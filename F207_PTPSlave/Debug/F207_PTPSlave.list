
F207_PTPSlave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000190c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003740  08019258  08019258  00029258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c998  0801c998  00030080  2**0
                  CONTENTS
  4 .ARM          00000008  0801c998  0801c998  0002c998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c9a0  0801c9a0  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c9a0  0801c9a0  0002c9a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c9a4  0801c9a4  0002c9a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0801c9a8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000beb4  20000080  0801ca28  00030080  2**3
                  ALLOC
 10 ._user_heap_stack 00006004  2000bf34  0801ca28  0003bf34  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00054575  00000000  00000000  000300a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000966c  00000000  00000000  0008461e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000025c8  00000000  00000000  0008dc90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002300  00000000  00000000  00090258  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000349df  00000000  00000000  00092558  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00034a1f  00000000  00000000  000c6f37  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e9f48  00000000  00000000  000fb956  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e589e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a124  00000000  00000000  001e591c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08019240 	.word	0x08019240

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08019240 	.word	0x08019240

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_frsub>:
 80001e0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__addsf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_fsub>:
 80001e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080001ec <__addsf3>:
 80001ec:	0042      	lsls	r2, r0, #1
 80001ee:	bf1f      	itttt	ne
 80001f0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80001f4:	ea92 0f03 	teqne	r2, r3
 80001f8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80001fc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000200:	d06a      	beq.n	80002d8 <__addsf3+0xec>
 8000202:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000206:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800020a:	bfc1      	itttt	gt
 800020c:	18d2      	addgt	r2, r2, r3
 800020e:	4041      	eorgt	r1, r0
 8000210:	4048      	eorgt	r0, r1
 8000212:	4041      	eorgt	r1, r0
 8000214:	bfb8      	it	lt
 8000216:	425b      	neglt	r3, r3
 8000218:	2b19      	cmp	r3, #25
 800021a:	bf88      	it	hi
 800021c:	4770      	bxhi	lr
 800021e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000222:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000226:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800022a:	bf18      	it	ne
 800022c:	4240      	negne	r0, r0
 800022e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000232:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000236:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800023a:	bf18      	it	ne
 800023c:	4249      	negne	r1, r1
 800023e:	ea92 0f03 	teq	r2, r3
 8000242:	d03f      	beq.n	80002c4 <__addsf3+0xd8>
 8000244:	f1a2 0201 	sub.w	r2, r2, #1
 8000248:	fa41 fc03 	asr.w	ip, r1, r3
 800024c:	eb10 000c 	adds.w	r0, r0, ip
 8000250:	f1c3 0320 	rsb	r3, r3, #32
 8000254:	fa01 f103 	lsl.w	r1, r1, r3
 8000258:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800025c:	d502      	bpl.n	8000264 <__addsf3+0x78>
 800025e:	4249      	negs	r1, r1
 8000260:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000264:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000268:	d313      	bcc.n	8000292 <__addsf3+0xa6>
 800026a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800026e:	d306      	bcc.n	800027e <__addsf3+0x92>
 8000270:	0840      	lsrs	r0, r0, #1
 8000272:	ea4f 0131 	mov.w	r1, r1, rrx
 8000276:	f102 0201 	add.w	r2, r2, #1
 800027a:	2afe      	cmp	r2, #254	; 0xfe
 800027c:	d251      	bcs.n	8000322 <__addsf3+0x136>
 800027e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000282:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000286:	bf08      	it	eq
 8000288:	f020 0001 	biceq.w	r0, r0, #1
 800028c:	ea40 0003 	orr.w	r0, r0, r3
 8000290:	4770      	bx	lr
 8000292:	0049      	lsls	r1, r1, #1
 8000294:	eb40 0000 	adc.w	r0, r0, r0
 8000298:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800029c:	f1a2 0201 	sub.w	r2, r2, #1
 80002a0:	d1ed      	bne.n	800027e <__addsf3+0x92>
 80002a2:	fab0 fc80 	clz	ip, r0
 80002a6:	f1ac 0c08 	sub.w	ip, ip, #8
 80002aa:	ebb2 020c 	subs.w	r2, r2, ip
 80002ae:	fa00 f00c 	lsl.w	r0, r0, ip
 80002b2:	bfaa      	itet	ge
 80002b4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002b8:	4252      	neglt	r2, r2
 80002ba:	4318      	orrge	r0, r3
 80002bc:	bfbc      	itt	lt
 80002be:	40d0      	lsrlt	r0, r2
 80002c0:	4318      	orrlt	r0, r3
 80002c2:	4770      	bx	lr
 80002c4:	f092 0f00 	teq	r2, #0
 80002c8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80002cc:	bf06      	itte	eq
 80002ce:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80002d2:	3201      	addeq	r2, #1
 80002d4:	3b01      	subne	r3, #1
 80002d6:	e7b5      	b.n	8000244 <__addsf3+0x58>
 80002d8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80002dc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80002e0:	bf18      	it	ne
 80002e2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002e6:	d021      	beq.n	800032c <__addsf3+0x140>
 80002e8:	ea92 0f03 	teq	r2, r3
 80002ec:	d004      	beq.n	80002f8 <__addsf3+0x10c>
 80002ee:	f092 0f00 	teq	r2, #0
 80002f2:	bf08      	it	eq
 80002f4:	4608      	moveq	r0, r1
 80002f6:	4770      	bx	lr
 80002f8:	ea90 0f01 	teq	r0, r1
 80002fc:	bf1c      	itt	ne
 80002fe:	2000      	movne	r0, #0
 8000300:	4770      	bxne	lr
 8000302:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000306:	d104      	bne.n	8000312 <__addsf3+0x126>
 8000308:	0040      	lsls	r0, r0, #1
 800030a:	bf28      	it	cs
 800030c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000310:	4770      	bx	lr
 8000312:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000316:	bf3c      	itt	cc
 8000318:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800031c:	4770      	bxcc	lr
 800031e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000322:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000326:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800032a:	4770      	bx	lr
 800032c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000330:	bf16      	itet	ne
 8000332:	4608      	movne	r0, r1
 8000334:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000338:	4601      	movne	r1, r0
 800033a:	0242      	lsls	r2, r0, #9
 800033c:	bf06      	itte	eq
 800033e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000342:	ea90 0f01 	teqeq	r0, r1
 8000346:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800034a:	4770      	bx	lr

0800034c <__aeabi_ui2f>:
 800034c:	f04f 0300 	mov.w	r3, #0
 8000350:	e004      	b.n	800035c <__aeabi_i2f+0x8>
 8000352:	bf00      	nop

08000354 <__aeabi_i2f>:
 8000354:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000358:	bf48      	it	mi
 800035a:	4240      	negmi	r0, r0
 800035c:	ea5f 0c00 	movs.w	ip, r0
 8000360:	bf08      	it	eq
 8000362:	4770      	bxeq	lr
 8000364:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000368:	4601      	mov	r1, r0
 800036a:	f04f 0000 	mov.w	r0, #0
 800036e:	e01c      	b.n	80003aa <__aeabi_l2f+0x2a>

08000370 <__aeabi_ul2f>:
 8000370:	ea50 0201 	orrs.w	r2, r0, r1
 8000374:	bf08      	it	eq
 8000376:	4770      	bxeq	lr
 8000378:	f04f 0300 	mov.w	r3, #0
 800037c:	e00a      	b.n	8000394 <__aeabi_l2f+0x14>
 800037e:	bf00      	nop

08000380 <__aeabi_l2f>:
 8000380:	ea50 0201 	orrs.w	r2, r0, r1
 8000384:	bf08      	it	eq
 8000386:	4770      	bxeq	lr
 8000388:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800038c:	d502      	bpl.n	8000394 <__aeabi_l2f+0x14>
 800038e:	4240      	negs	r0, r0
 8000390:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000394:	ea5f 0c01 	movs.w	ip, r1
 8000398:	bf02      	ittt	eq
 800039a:	4684      	moveq	ip, r0
 800039c:	4601      	moveq	r1, r0
 800039e:	2000      	moveq	r0, #0
 80003a0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80003a4:	bf08      	it	eq
 80003a6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80003aa:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80003ae:	fabc f28c 	clz	r2, ip
 80003b2:	3a08      	subs	r2, #8
 80003b4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003b8:	db10      	blt.n	80003dc <__aeabi_l2f+0x5c>
 80003ba:	fa01 fc02 	lsl.w	ip, r1, r2
 80003be:	4463      	add	r3, ip
 80003c0:	fa00 fc02 	lsl.w	ip, r0, r2
 80003c4:	f1c2 0220 	rsb	r2, r2, #32
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	fa20 f202 	lsr.w	r2, r0, r2
 80003d0:	eb43 0002 	adc.w	r0, r3, r2
 80003d4:	bf08      	it	eq
 80003d6:	f020 0001 	biceq.w	r0, r0, #1
 80003da:	4770      	bx	lr
 80003dc:	f102 0220 	add.w	r2, r2, #32
 80003e0:	fa01 fc02 	lsl.w	ip, r1, r2
 80003e4:	f1c2 0220 	rsb	r2, r2, #32
 80003e8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80003ec:	fa21 f202 	lsr.w	r2, r1, r2
 80003f0:	eb43 0002 	adc.w	r0, r3, r2
 80003f4:	bf08      	it	eq
 80003f6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80003fa:	4770      	bx	lr

080003fc <__aeabi_fmul>:
 80003fc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000400:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000404:	bf1e      	ittt	ne
 8000406:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800040a:	ea92 0f0c 	teqne	r2, ip
 800040e:	ea93 0f0c 	teqne	r3, ip
 8000412:	d06f      	beq.n	80004f4 <__aeabi_fmul+0xf8>
 8000414:	441a      	add	r2, r3
 8000416:	ea80 0c01 	eor.w	ip, r0, r1
 800041a:	0240      	lsls	r0, r0, #9
 800041c:	bf18      	it	ne
 800041e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000422:	d01e      	beq.n	8000462 <__aeabi_fmul+0x66>
 8000424:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000428:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800042c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000430:	fba0 3101 	umull	r3, r1, r0, r1
 8000434:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000438:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800043c:	bf3e      	ittt	cc
 800043e:	0049      	lslcc	r1, r1, #1
 8000440:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000444:	005b      	lslcc	r3, r3, #1
 8000446:	ea40 0001 	orr.w	r0, r0, r1
 800044a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800044e:	2afd      	cmp	r2, #253	; 0xfd
 8000450:	d81d      	bhi.n	800048e <__aeabi_fmul+0x92>
 8000452:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000456:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800045a:	bf08      	it	eq
 800045c:	f020 0001 	biceq.w	r0, r0, #1
 8000460:	4770      	bx	lr
 8000462:	f090 0f00 	teq	r0, #0
 8000466:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800046a:	bf08      	it	eq
 800046c:	0249      	lsleq	r1, r1, #9
 800046e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000472:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000476:	3a7f      	subs	r2, #127	; 0x7f
 8000478:	bfc2      	ittt	gt
 800047a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800047e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000482:	4770      	bxgt	lr
 8000484:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000488:	f04f 0300 	mov.w	r3, #0
 800048c:	3a01      	subs	r2, #1
 800048e:	dc5d      	bgt.n	800054c <__aeabi_fmul+0x150>
 8000490:	f112 0f19 	cmn.w	r2, #25
 8000494:	bfdc      	itt	le
 8000496:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800049a:	4770      	bxle	lr
 800049c:	f1c2 0200 	rsb	r2, r2, #0
 80004a0:	0041      	lsls	r1, r0, #1
 80004a2:	fa21 f102 	lsr.w	r1, r1, r2
 80004a6:	f1c2 0220 	rsb	r2, r2, #32
 80004aa:	fa00 fc02 	lsl.w	ip, r0, r2
 80004ae:	ea5f 0031 	movs.w	r0, r1, rrx
 80004b2:	f140 0000 	adc.w	r0, r0, #0
 80004b6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80004ba:	bf08      	it	eq
 80004bc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004c0:	4770      	bx	lr
 80004c2:	f092 0f00 	teq	r2, #0
 80004c6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80004ca:	bf02      	ittt	eq
 80004cc:	0040      	lsleq	r0, r0, #1
 80004ce:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80004d2:	3a01      	subeq	r2, #1
 80004d4:	d0f9      	beq.n	80004ca <__aeabi_fmul+0xce>
 80004d6:	ea40 000c 	orr.w	r0, r0, ip
 80004da:	f093 0f00 	teq	r3, #0
 80004de:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80004e2:	bf02      	ittt	eq
 80004e4:	0049      	lsleq	r1, r1, #1
 80004e6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80004ea:	3b01      	subeq	r3, #1
 80004ec:	d0f9      	beq.n	80004e2 <__aeabi_fmul+0xe6>
 80004ee:	ea41 010c 	orr.w	r1, r1, ip
 80004f2:	e78f      	b.n	8000414 <__aeabi_fmul+0x18>
 80004f4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80004f8:	ea92 0f0c 	teq	r2, ip
 80004fc:	bf18      	it	ne
 80004fe:	ea93 0f0c 	teqne	r3, ip
 8000502:	d00a      	beq.n	800051a <__aeabi_fmul+0x11e>
 8000504:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000508:	bf18      	it	ne
 800050a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800050e:	d1d8      	bne.n	80004c2 <__aeabi_fmul+0xc6>
 8000510:	ea80 0001 	eor.w	r0, r0, r1
 8000514:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000518:	4770      	bx	lr
 800051a:	f090 0f00 	teq	r0, #0
 800051e:	bf17      	itett	ne
 8000520:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000524:	4608      	moveq	r0, r1
 8000526:	f091 0f00 	teqne	r1, #0
 800052a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800052e:	d014      	beq.n	800055a <__aeabi_fmul+0x15e>
 8000530:	ea92 0f0c 	teq	r2, ip
 8000534:	d101      	bne.n	800053a <__aeabi_fmul+0x13e>
 8000536:	0242      	lsls	r2, r0, #9
 8000538:	d10f      	bne.n	800055a <__aeabi_fmul+0x15e>
 800053a:	ea93 0f0c 	teq	r3, ip
 800053e:	d103      	bne.n	8000548 <__aeabi_fmul+0x14c>
 8000540:	024b      	lsls	r3, r1, #9
 8000542:	bf18      	it	ne
 8000544:	4608      	movne	r0, r1
 8000546:	d108      	bne.n	800055a <__aeabi_fmul+0x15e>
 8000548:	ea80 0001 	eor.w	r0, r0, r1
 800054c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000550:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000554:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000558:	4770      	bx	lr
 800055a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800055e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000562:	4770      	bx	lr

08000564 <__aeabi_fdiv>:
 8000564:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000568:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800056c:	bf1e      	ittt	ne
 800056e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000572:	ea92 0f0c 	teqne	r2, ip
 8000576:	ea93 0f0c 	teqne	r3, ip
 800057a:	d069      	beq.n	8000650 <__aeabi_fdiv+0xec>
 800057c:	eba2 0203 	sub.w	r2, r2, r3
 8000580:	ea80 0c01 	eor.w	ip, r0, r1
 8000584:	0249      	lsls	r1, r1, #9
 8000586:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800058a:	d037      	beq.n	80005fc <__aeabi_fdiv+0x98>
 800058c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000590:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000594:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000598:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800059c:	428b      	cmp	r3, r1
 800059e:	bf38      	it	cc
 80005a0:	005b      	lslcc	r3, r3, #1
 80005a2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80005a6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80005aa:	428b      	cmp	r3, r1
 80005ac:	bf24      	itt	cs
 80005ae:	1a5b      	subcs	r3, r3, r1
 80005b0:	ea40 000c 	orrcs.w	r0, r0, ip
 80005b4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80005b8:	bf24      	itt	cs
 80005ba:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80005be:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80005c2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80005c6:	bf24      	itt	cs
 80005c8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80005cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80005d0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80005d4:	bf24      	itt	cs
 80005d6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80005da:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80005de:	011b      	lsls	r3, r3, #4
 80005e0:	bf18      	it	ne
 80005e2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80005e6:	d1e0      	bne.n	80005aa <__aeabi_fdiv+0x46>
 80005e8:	2afd      	cmp	r2, #253	; 0xfd
 80005ea:	f63f af50 	bhi.w	800048e <__aeabi_fmul+0x92>
 80005ee:	428b      	cmp	r3, r1
 80005f0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80005f4:	bf08      	it	eq
 80005f6:	f020 0001 	biceq.w	r0, r0, #1
 80005fa:	4770      	bx	lr
 80005fc:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000600:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000604:	327f      	adds	r2, #127	; 0x7f
 8000606:	bfc2      	ittt	gt
 8000608:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800060c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000610:	4770      	bxgt	lr
 8000612:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000616:	f04f 0300 	mov.w	r3, #0
 800061a:	3a01      	subs	r2, #1
 800061c:	e737      	b.n	800048e <__aeabi_fmul+0x92>
 800061e:	f092 0f00 	teq	r2, #0
 8000622:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000626:	bf02      	ittt	eq
 8000628:	0040      	lsleq	r0, r0, #1
 800062a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800062e:	3a01      	subeq	r2, #1
 8000630:	d0f9      	beq.n	8000626 <__aeabi_fdiv+0xc2>
 8000632:	ea40 000c 	orr.w	r0, r0, ip
 8000636:	f093 0f00 	teq	r3, #0
 800063a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800063e:	bf02      	ittt	eq
 8000640:	0049      	lsleq	r1, r1, #1
 8000642:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000646:	3b01      	subeq	r3, #1
 8000648:	d0f9      	beq.n	800063e <__aeabi_fdiv+0xda>
 800064a:	ea41 010c 	orr.w	r1, r1, ip
 800064e:	e795      	b.n	800057c <__aeabi_fdiv+0x18>
 8000650:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000654:	ea92 0f0c 	teq	r2, ip
 8000658:	d108      	bne.n	800066c <__aeabi_fdiv+0x108>
 800065a:	0242      	lsls	r2, r0, #9
 800065c:	f47f af7d 	bne.w	800055a <__aeabi_fmul+0x15e>
 8000660:	ea93 0f0c 	teq	r3, ip
 8000664:	f47f af70 	bne.w	8000548 <__aeabi_fmul+0x14c>
 8000668:	4608      	mov	r0, r1
 800066a:	e776      	b.n	800055a <__aeabi_fmul+0x15e>
 800066c:	ea93 0f0c 	teq	r3, ip
 8000670:	d104      	bne.n	800067c <__aeabi_fdiv+0x118>
 8000672:	024b      	lsls	r3, r1, #9
 8000674:	f43f af4c 	beq.w	8000510 <__aeabi_fmul+0x114>
 8000678:	4608      	mov	r0, r1
 800067a:	e76e      	b.n	800055a <__aeabi_fmul+0x15e>
 800067c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000680:	bf18      	it	ne
 8000682:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000686:	d1ca      	bne.n	800061e <__aeabi_fdiv+0xba>
 8000688:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800068c:	f47f af5c 	bne.w	8000548 <__aeabi_fmul+0x14c>
 8000690:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000694:	f47f af3c 	bne.w	8000510 <__aeabi_fmul+0x114>
 8000698:	e75f      	b.n	800055a <__aeabi_fmul+0x15e>
 800069a:	bf00      	nop

0800069c <__gesf2>:
 800069c:	f04f 3cff 	mov.w	ip, #4294967295
 80006a0:	e006      	b.n	80006b0 <__cmpsf2+0x4>
 80006a2:	bf00      	nop

080006a4 <__lesf2>:
 80006a4:	f04f 0c01 	mov.w	ip, #1
 80006a8:	e002      	b.n	80006b0 <__cmpsf2+0x4>
 80006aa:	bf00      	nop

080006ac <__cmpsf2>:
 80006ac:	f04f 0c01 	mov.w	ip, #1
 80006b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80006b4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006b8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006bc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80006c0:	bf18      	it	ne
 80006c2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006c6:	d011      	beq.n	80006ec <__cmpsf2+0x40>
 80006c8:	b001      	add	sp, #4
 80006ca:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80006ce:	bf18      	it	ne
 80006d0:	ea90 0f01 	teqne	r0, r1
 80006d4:	bf58      	it	pl
 80006d6:	ebb2 0003 	subspl.w	r0, r2, r3
 80006da:	bf88      	it	hi
 80006dc:	17c8      	asrhi	r0, r1, #31
 80006de:	bf38      	it	cc
 80006e0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80006e4:	bf18      	it	ne
 80006e6:	f040 0001 	orrne.w	r0, r0, #1
 80006ea:	4770      	bx	lr
 80006ec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80006f0:	d102      	bne.n	80006f8 <__cmpsf2+0x4c>
 80006f2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80006f6:	d105      	bne.n	8000704 <__cmpsf2+0x58>
 80006f8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80006fc:	d1e4      	bne.n	80006c8 <__cmpsf2+0x1c>
 80006fe:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000702:	d0e1      	beq.n	80006c8 <__cmpsf2+0x1c>
 8000704:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop

0800070c <__aeabi_cfrcmple>:
 800070c:	4684      	mov	ip, r0
 800070e:	4608      	mov	r0, r1
 8000710:	4661      	mov	r1, ip
 8000712:	e7ff      	b.n	8000714 <__aeabi_cfcmpeq>

08000714 <__aeabi_cfcmpeq>:
 8000714:	b50f      	push	{r0, r1, r2, r3, lr}
 8000716:	f7ff ffc9 	bl	80006ac <__cmpsf2>
 800071a:	2800      	cmp	r0, #0
 800071c:	bf48      	it	mi
 800071e:	f110 0f00 	cmnmi.w	r0, #0
 8000722:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000724 <__aeabi_fcmpeq>:
 8000724:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000728:	f7ff fff4 	bl	8000714 <__aeabi_cfcmpeq>
 800072c:	bf0c      	ite	eq
 800072e:	2001      	moveq	r0, #1
 8000730:	2000      	movne	r0, #0
 8000732:	f85d fb08 	ldr.w	pc, [sp], #8
 8000736:	bf00      	nop

08000738 <__aeabi_fcmplt>:
 8000738:	f84d ed08 	str.w	lr, [sp, #-8]!
 800073c:	f7ff ffea 	bl	8000714 <__aeabi_cfcmpeq>
 8000740:	bf34      	ite	cc
 8000742:	2001      	movcc	r0, #1
 8000744:	2000      	movcs	r0, #0
 8000746:	f85d fb08 	ldr.w	pc, [sp], #8
 800074a:	bf00      	nop

0800074c <__aeabi_fcmple>:
 800074c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000750:	f7ff ffe0 	bl	8000714 <__aeabi_cfcmpeq>
 8000754:	bf94      	ite	ls
 8000756:	2001      	movls	r0, #1
 8000758:	2000      	movhi	r0, #0
 800075a:	f85d fb08 	ldr.w	pc, [sp], #8
 800075e:	bf00      	nop

08000760 <__aeabi_fcmpge>:
 8000760:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000764:	f7ff ffd2 	bl	800070c <__aeabi_cfrcmple>
 8000768:	bf94      	ite	ls
 800076a:	2001      	movls	r0, #1
 800076c:	2000      	movhi	r0, #0
 800076e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000772:	bf00      	nop

08000774 <__aeabi_fcmpgt>:
 8000774:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000778:	f7ff ffc8 	bl	800070c <__aeabi_cfrcmple>
 800077c:	bf34      	ite	cc
 800077e:	2001      	movcc	r0, #1
 8000780:	2000      	movcs	r0, #0
 8000782:	f85d fb08 	ldr.w	pc, [sp], #8
 8000786:	bf00      	nop

08000788 <__aeabi_f2iz>:
 8000788:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800078c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000790:	d30f      	bcc.n	80007b2 <__aeabi_f2iz+0x2a>
 8000792:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000796:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800079a:	d90d      	bls.n	80007b8 <__aeabi_f2iz+0x30>
 800079c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80007a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007a4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80007a8:	fa23 f002 	lsr.w	r0, r3, r2
 80007ac:	bf18      	it	ne
 80007ae:	4240      	negne	r0, r0
 80007b0:	4770      	bx	lr
 80007b2:	f04f 0000 	mov.w	r0, #0
 80007b6:	4770      	bx	lr
 80007b8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80007bc:	d101      	bne.n	80007c2 <__aeabi_f2iz+0x3a>
 80007be:	0242      	lsls	r2, r0, #9
 80007c0:	d105      	bne.n	80007ce <__aeabi_f2iz+0x46>
 80007c2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80007c6:	bf08      	it	eq
 80007c8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80007cc:	4770      	bx	lr
 80007ce:	f04f 0000 	mov.w	r0, #0
 80007d2:	4770      	bx	lr

080007d4 <__aeabi_ldivmod>:
 80007d4:	b97b      	cbnz	r3, 80007f6 <__aeabi_ldivmod+0x22>
 80007d6:	b972      	cbnz	r2, 80007f6 <__aeabi_ldivmod+0x22>
 80007d8:	2900      	cmp	r1, #0
 80007da:	bfbe      	ittt	lt
 80007dc:	2000      	movlt	r0, #0
 80007de:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80007e2:	e006      	blt.n	80007f2 <__aeabi_ldivmod+0x1e>
 80007e4:	bf08      	it	eq
 80007e6:	2800      	cmpeq	r0, #0
 80007e8:	bf1c      	itt	ne
 80007ea:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80007ee:	f04f 30ff 	movne.w	r0, #4294967295
 80007f2:	f000 b9bf 	b.w	8000b74 <__aeabi_idiv0>
 80007f6:	f1ad 0c08 	sub.w	ip, sp, #8
 80007fa:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007fe:	2900      	cmp	r1, #0
 8000800:	db09      	blt.n	8000816 <__aeabi_ldivmod+0x42>
 8000802:	2b00      	cmp	r3, #0
 8000804:	db1a      	blt.n	800083c <__aeabi_ldivmod+0x68>
 8000806:	f000 f84d 	bl	80008a4 <__udivmoddi4>
 800080a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800080e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000812:	b004      	add	sp, #16
 8000814:	4770      	bx	lr
 8000816:	4240      	negs	r0, r0
 8000818:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800081c:	2b00      	cmp	r3, #0
 800081e:	db1b      	blt.n	8000858 <__aeabi_ldivmod+0x84>
 8000820:	f000 f840 	bl	80008a4 <__udivmoddi4>
 8000824:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000828:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800082c:	b004      	add	sp, #16
 800082e:	4240      	negs	r0, r0
 8000830:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000834:	4252      	negs	r2, r2
 8000836:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800083a:	4770      	bx	lr
 800083c:	4252      	negs	r2, r2
 800083e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000842:	f000 f82f 	bl	80008a4 <__udivmoddi4>
 8000846:	f8dd e004 	ldr.w	lr, [sp, #4]
 800084a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800084e:	b004      	add	sp, #16
 8000850:	4240      	negs	r0, r0
 8000852:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000856:	4770      	bx	lr
 8000858:	4252      	negs	r2, r2
 800085a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800085e:	f000 f821 	bl	80008a4 <__udivmoddi4>
 8000862:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000866:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800086a:	b004      	add	sp, #16
 800086c:	4252      	negs	r2, r2
 800086e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000872:	4770      	bx	lr

08000874 <__aeabi_uldivmod>:
 8000874:	b953      	cbnz	r3, 800088c <__aeabi_uldivmod+0x18>
 8000876:	b94a      	cbnz	r2, 800088c <__aeabi_uldivmod+0x18>
 8000878:	2900      	cmp	r1, #0
 800087a:	bf08      	it	eq
 800087c:	2800      	cmpeq	r0, #0
 800087e:	bf1c      	itt	ne
 8000880:	f04f 31ff 	movne.w	r1, #4294967295
 8000884:	f04f 30ff 	movne.w	r0, #4294967295
 8000888:	f000 b974 	b.w	8000b74 <__aeabi_idiv0>
 800088c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000890:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000894:	f000 f806 	bl	80008a4 <__udivmoddi4>
 8000898:	f8dd e004 	ldr.w	lr, [sp, #4]
 800089c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a0:	b004      	add	sp, #16
 80008a2:	4770      	bx	lr

080008a4 <__udivmoddi4>:
 80008a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008a8:	468c      	mov	ip, r1
 80008aa:	4604      	mov	r4, r0
 80008ac:	9e08      	ldr	r6, [sp, #32]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d14b      	bne.n	800094a <__udivmoddi4+0xa6>
 80008b2:	428a      	cmp	r2, r1
 80008b4:	4615      	mov	r5, r2
 80008b6:	d967      	bls.n	8000988 <__udivmoddi4+0xe4>
 80008b8:	fab2 f282 	clz	r2, r2
 80008bc:	b14a      	cbz	r2, 80008d2 <__udivmoddi4+0x2e>
 80008be:	f1c2 0720 	rsb	r7, r2, #32
 80008c2:	fa01 f302 	lsl.w	r3, r1, r2
 80008c6:	fa20 f707 	lsr.w	r7, r0, r7
 80008ca:	4095      	lsls	r5, r2
 80008cc:	ea47 0c03 	orr.w	ip, r7, r3
 80008d0:	4094      	lsls	r4, r2
 80008d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80008d6:	fbbc f7fe 	udiv	r7, ip, lr
 80008da:	fa1f f885 	uxth.w	r8, r5
 80008de:	fb0e c317 	mls	r3, lr, r7, ip
 80008e2:	fb07 f908 	mul.w	r9, r7, r8
 80008e6:	0c21      	lsrs	r1, r4, #16
 80008e8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008ec:	4599      	cmp	r9, r3
 80008ee:	d909      	bls.n	8000904 <__udivmoddi4+0x60>
 80008f0:	18eb      	adds	r3, r5, r3
 80008f2:	f107 31ff 	add.w	r1, r7, #4294967295
 80008f6:	f080 811c 	bcs.w	8000b32 <__udivmoddi4+0x28e>
 80008fa:	4599      	cmp	r9, r3
 80008fc:	f240 8119 	bls.w	8000b32 <__udivmoddi4+0x28e>
 8000900:	3f02      	subs	r7, #2
 8000902:	442b      	add	r3, r5
 8000904:	eba3 0309 	sub.w	r3, r3, r9
 8000908:	fbb3 f0fe 	udiv	r0, r3, lr
 800090c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000910:	fb00 f108 	mul.w	r1, r0, r8
 8000914:	b2a4      	uxth	r4, r4
 8000916:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800091a:	42a1      	cmp	r1, r4
 800091c:	d909      	bls.n	8000932 <__udivmoddi4+0x8e>
 800091e:	192c      	adds	r4, r5, r4
 8000920:	f100 33ff 	add.w	r3, r0, #4294967295
 8000924:	f080 8107 	bcs.w	8000b36 <__udivmoddi4+0x292>
 8000928:	42a1      	cmp	r1, r4
 800092a:	f240 8104 	bls.w	8000b36 <__udivmoddi4+0x292>
 800092e:	3802      	subs	r0, #2
 8000930:	442c      	add	r4, r5
 8000932:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000936:	2700      	movs	r7, #0
 8000938:	1a64      	subs	r4, r4, r1
 800093a:	b11e      	cbz	r6, 8000944 <__udivmoddi4+0xa0>
 800093c:	2300      	movs	r3, #0
 800093e:	40d4      	lsrs	r4, r2
 8000940:	e9c6 4300 	strd	r4, r3, [r6]
 8000944:	4639      	mov	r1, r7
 8000946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800094a:	428b      	cmp	r3, r1
 800094c:	d909      	bls.n	8000962 <__udivmoddi4+0xbe>
 800094e:	2e00      	cmp	r6, #0
 8000950:	f000 80ec 	beq.w	8000b2c <__udivmoddi4+0x288>
 8000954:	2700      	movs	r7, #0
 8000956:	e9c6 0100 	strd	r0, r1, [r6]
 800095a:	4638      	mov	r0, r7
 800095c:	4639      	mov	r1, r7
 800095e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000962:	fab3 f783 	clz	r7, r3
 8000966:	2f00      	cmp	r7, #0
 8000968:	d148      	bne.n	80009fc <__udivmoddi4+0x158>
 800096a:	428b      	cmp	r3, r1
 800096c:	d302      	bcc.n	8000974 <__udivmoddi4+0xd0>
 800096e:	4282      	cmp	r2, r0
 8000970:	f200 80fb 	bhi.w	8000b6a <__udivmoddi4+0x2c6>
 8000974:	1a84      	subs	r4, r0, r2
 8000976:	eb61 0303 	sbc.w	r3, r1, r3
 800097a:	2001      	movs	r0, #1
 800097c:	469c      	mov	ip, r3
 800097e:	2e00      	cmp	r6, #0
 8000980:	d0e0      	beq.n	8000944 <__udivmoddi4+0xa0>
 8000982:	e9c6 4c00 	strd	r4, ip, [r6]
 8000986:	e7dd      	b.n	8000944 <__udivmoddi4+0xa0>
 8000988:	b902      	cbnz	r2, 800098c <__udivmoddi4+0xe8>
 800098a:	deff      	udf	#255	; 0xff
 800098c:	fab2 f282 	clz	r2, r2
 8000990:	2a00      	cmp	r2, #0
 8000992:	f040 808f 	bne.w	8000ab4 <__udivmoddi4+0x210>
 8000996:	2701      	movs	r7, #1
 8000998:	1b49      	subs	r1, r1, r5
 800099a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800099e:	fa1f f985 	uxth.w	r9, r5
 80009a2:	fbb1 fef8 	udiv	lr, r1, r8
 80009a6:	fb08 111e 	mls	r1, r8, lr, r1
 80009aa:	fb09 f00e 	mul.w	r0, r9, lr
 80009ae:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80009b2:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 80009b6:	4298      	cmp	r0, r3
 80009b8:	d907      	bls.n	80009ca <__udivmoddi4+0x126>
 80009ba:	18eb      	adds	r3, r5, r3
 80009bc:	f10e 31ff 	add.w	r1, lr, #4294967295
 80009c0:	d202      	bcs.n	80009c8 <__udivmoddi4+0x124>
 80009c2:	4298      	cmp	r0, r3
 80009c4:	f200 80cd 	bhi.w	8000b62 <__udivmoddi4+0x2be>
 80009c8:	468e      	mov	lr, r1
 80009ca:	1a1b      	subs	r3, r3, r0
 80009cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009d0:	fb08 3310 	mls	r3, r8, r0, r3
 80009d4:	fb09 f900 	mul.w	r9, r9, r0
 80009d8:	b2a4      	uxth	r4, r4
 80009da:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009de:	45a1      	cmp	r9, r4
 80009e0:	d907      	bls.n	80009f2 <__udivmoddi4+0x14e>
 80009e2:	192c      	adds	r4, r5, r4
 80009e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80009e8:	d202      	bcs.n	80009f0 <__udivmoddi4+0x14c>
 80009ea:	45a1      	cmp	r9, r4
 80009ec:	f200 80b6 	bhi.w	8000b5c <__udivmoddi4+0x2b8>
 80009f0:	4618      	mov	r0, r3
 80009f2:	eba4 0409 	sub.w	r4, r4, r9
 80009f6:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80009fa:	e79e      	b.n	800093a <__udivmoddi4+0x96>
 80009fc:	f1c7 0520 	rsb	r5, r7, #32
 8000a00:	40bb      	lsls	r3, r7
 8000a02:	fa22 fc05 	lsr.w	ip, r2, r5
 8000a06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a0a:	fa21 f405 	lsr.w	r4, r1, r5
 8000a0e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a12:	fbb4 f9fe 	udiv	r9, r4, lr
 8000a16:	fa1f f88c 	uxth.w	r8, ip
 8000a1a:	fb0e 4419 	mls	r4, lr, r9, r4
 8000a1e:	fa20 f305 	lsr.w	r3, r0, r5
 8000a22:	40b9      	lsls	r1, r7
 8000a24:	fb09 fa08 	mul.w	sl, r9, r8
 8000a28:	4319      	orrs	r1, r3
 8000a2a:	0c0b      	lsrs	r3, r1, #16
 8000a2c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000a30:	45a2      	cmp	sl, r4
 8000a32:	fa02 f207 	lsl.w	r2, r2, r7
 8000a36:	fa00 f307 	lsl.w	r3, r0, r7
 8000a3a:	d90b      	bls.n	8000a54 <__udivmoddi4+0x1b0>
 8000a3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a40:	f109 30ff 	add.w	r0, r9, #4294967295
 8000a44:	f080 8088 	bcs.w	8000b58 <__udivmoddi4+0x2b4>
 8000a48:	45a2      	cmp	sl, r4
 8000a4a:	f240 8085 	bls.w	8000b58 <__udivmoddi4+0x2b4>
 8000a4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000a52:	4464      	add	r4, ip
 8000a54:	eba4 040a 	sub.w	r4, r4, sl
 8000a58:	fbb4 f0fe 	udiv	r0, r4, lr
 8000a5c:	fb0e 4410 	mls	r4, lr, r0, r4
 8000a60:	fb00 fa08 	mul.w	sl, r0, r8
 8000a64:	b289      	uxth	r1, r1
 8000a66:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000a6a:	45a2      	cmp	sl, r4
 8000a6c:	d908      	bls.n	8000a80 <__udivmoddi4+0x1dc>
 8000a6e:	eb1c 0404 	adds.w	r4, ip, r4
 8000a72:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a76:	d26b      	bcs.n	8000b50 <__udivmoddi4+0x2ac>
 8000a78:	45a2      	cmp	sl, r4
 8000a7a:	d969      	bls.n	8000b50 <__udivmoddi4+0x2ac>
 8000a7c:	3802      	subs	r0, #2
 8000a7e:	4464      	add	r4, ip
 8000a80:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000a84:	fba0 8902 	umull	r8, r9, r0, r2
 8000a88:	eba4 040a 	sub.w	r4, r4, sl
 8000a8c:	454c      	cmp	r4, r9
 8000a8e:	4641      	mov	r1, r8
 8000a90:	46ce      	mov	lr, r9
 8000a92:	d354      	bcc.n	8000b3e <__udivmoddi4+0x29a>
 8000a94:	d051      	beq.n	8000b3a <__udivmoddi4+0x296>
 8000a96:	2e00      	cmp	r6, #0
 8000a98:	d069      	beq.n	8000b6e <__udivmoddi4+0x2ca>
 8000a9a:	1a5a      	subs	r2, r3, r1
 8000a9c:	eb64 040e 	sbc.w	r4, r4, lr
 8000aa0:	fa04 f505 	lsl.w	r5, r4, r5
 8000aa4:	fa22 f307 	lsr.w	r3, r2, r7
 8000aa8:	40fc      	lsrs	r4, r7
 8000aaa:	431d      	orrs	r5, r3
 8000aac:	e9c6 5400 	strd	r5, r4, [r6]
 8000ab0:	2700      	movs	r7, #0
 8000ab2:	e747      	b.n	8000944 <__udivmoddi4+0xa0>
 8000ab4:	4095      	lsls	r5, r2
 8000ab6:	f1c2 0320 	rsb	r3, r2, #32
 8000aba:	fa21 f003 	lsr.w	r0, r1, r3
 8000abe:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000ac2:	fbb0 f7f8 	udiv	r7, r0, r8
 8000ac6:	fa1f f985 	uxth.w	r9, r5
 8000aca:	fb08 0017 	mls	r0, r8, r7, r0
 8000ace:	fa24 f303 	lsr.w	r3, r4, r3
 8000ad2:	4091      	lsls	r1, r2
 8000ad4:	fb07 fc09 	mul.w	ip, r7, r9
 8000ad8:	430b      	orrs	r3, r1
 8000ada:	0c19      	lsrs	r1, r3, #16
 8000adc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ae0:	458c      	cmp	ip, r1
 8000ae2:	fa04 f402 	lsl.w	r4, r4, r2
 8000ae6:	d907      	bls.n	8000af8 <__udivmoddi4+0x254>
 8000ae8:	1869      	adds	r1, r5, r1
 8000aea:	f107 30ff 	add.w	r0, r7, #4294967295
 8000aee:	d231      	bcs.n	8000b54 <__udivmoddi4+0x2b0>
 8000af0:	458c      	cmp	ip, r1
 8000af2:	d92f      	bls.n	8000b54 <__udivmoddi4+0x2b0>
 8000af4:	3f02      	subs	r7, #2
 8000af6:	4429      	add	r1, r5
 8000af8:	eba1 010c 	sub.w	r1, r1, ip
 8000afc:	fbb1 f0f8 	udiv	r0, r1, r8
 8000b00:	fb08 1c10 	mls	ip, r8, r0, r1
 8000b04:	fb00 fe09 	mul.w	lr, r0, r9
 8000b08:	b299      	uxth	r1, r3
 8000b0a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000b0e:	458e      	cmp	lr, r1
 8000b10:	d907      	bls.n	8000b22 <__udivmoddi4+0x27e>
 8000b12:	1869      	adds	r1, r5, r1
 8000b14:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b18:	d218      	bcs.n	8000b4c <__udivmoddi4+0x2a8>
 8000b1a:	458e      	cmp	lr, r1
 8000b1c:	d916      	bls.n	8000b4c <__udivmoddi4+0x2a8>
 8000b1e:	3802      	subs	r0, #2
 8000b20:	4429      	add	r1, r5
 8000b22:	eba1 010e 	sub.w	r1, r1, lr
 8000b26:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000b2a:	e73a      	b.n	80009a2 <__udivmoddi4+0xfe>
 8000b2c:	4637      	mov	r7, r6
 8000b2e:	4630      	mov	r0, r6
 8000b30:	e708      	b.n	8000944 <__udivmoddi4+0xa0>
 8000b32:	460f      	mov	r7, r1
 8000b34:	e6e6      	b.n	8000904 <__udivmoddi4+0x60>
 8000b36:	4618      	mov	r0, r3
 8000b38:	e6fb      	b.n	8000932 <__udivmoddi4+0x8e>
 8000b3a:	4543      	cmp	r3, r8
 8000b3c:	d2ab      	bcs.n	8000a96 <__udivmoddi4+0x1f2>
 8000b3e:	ebb8 0102 	subs.w	r1, r8, r2
 8000b42:	eb69 020c 	sbc.w	r2, r9, ip
 8000b46:	3801      	subs	r0, #1
 8000b48:	4696      	mov	lr, r2
 8000b4a:	e7a4      	b.n	8000a96 <__udivmoddi4+0x1f2>
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	e7e8      	b.n	8000b22 <__udivmoddi4+0x27e>
 8000b50:	4608      	mov	r0, r1
 8000b52:	e795      	b.n	8000a80 <__udivmoddi4+0x1dc>
 8000b54:	4607      	mov	r7, r0
 8000b56:	e7cf      	b.n	8000af8 <__udivmoddi4+0x254>
 8000b58:	4681      	mov	r9, r0
 8000b5a:	e77b      	b.n	8000a54 <__udivmoddi4+0x1b0>
 8000b5c:	3802      	subs	r0, #2
 8000b5e:	442c      	add	r4, r5
 8000b60:	e747      	b.n	80009f2 <__udivmoddi4+0x14e>
 8000b62:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b66:	442b      	add	r3, r5
 8000b68:	e72f      	b.n	80009ca <__udivmoddi4+0x126>
 8000b6a:	4638      	mov	r0, r7
 8000b6c:	e707      	b.n	800097e <__udivmoddi4+0xda>
 8000b6e:	4637      	mov	r7, r6
 8000b70:	e6e8      	b.n	8000944 <__udivmoddi4+0xa0>
 8000b72:	bf00      	nop

08000b74 <__aeabi_idiv0>:
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	4a06      	ldr	r2, [pc, #24]	; (8000ba0 <vApplicationGetIdleTaskMemory+0x28>)
 8000b88:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	4a05      	ldr	r2, [pc, #20]	; (8000ba4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b8e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2280      	movs	r2, #128	; 0x80
 8000b94:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000b96:	bf00      	nop
 8000b98:	3714      	adds	r7, #20
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr
 8000ba0:	2000009c 	.word	0x2000009c
 8000ba4:	200000fc 	.word	0x200000fc

08000ba8 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	4a07      	ldr	r2, [pc, #28]	; (8000bd4 <vApplicationGetTimerTaskMemory+0x2c>)
 8000bb8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000bba:	68bb      	ldr	r3, [r7, #8]
 8000bbc:	4a06      	ldr	r2, [pc, #24]	; (8000bd8 <vApplicationGetTimerTaskMemory+0x30>)
 8000bbe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bc6:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000bc8:	bf00      	nop
 8000bca:	3714      	adds	r7, #20
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bc80      	pop	{r7}
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	200002fc 	.word	0x200002fc
 8000bd8:	2000035c 	.word	0x2000035c

08000bdc <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart1 , (uint8_t *)&ch, 1 , 0xffff);
	while ((USART3->SR & 0X40) == 0)
 8000be4:	bf00      	nop
 8000be6:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <__io_putchar+0x2c>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d0f9      	beq.n	8000be6 <__io_putchar+0xa>
		;
	USART3->DR = (uint8_t) ch;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	4b04      	ldr	r3, [pc, #16]	; (8000c08 <__io_putchar+0x2c>)
 8000bf8:	605a      	str	r2, [r3, #4]
	return ch;
 8000bfa:	687b      	ldr	r3, [r7, #4]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bc80      	pop	{r7}
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	40004800 	.word	0x40004800

08000c0c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000c0c:	b5b0      	push	{r4, r5, r7, lr}
 8000c0e:	b08a      	sub	sp, #40	; 0x28
 8000c10:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000c12:	f000 fdbb 	bl	800178c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000c16:	f000 f82f 	bl	8000c78 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000c1a:	f000 f89d 	bl	8000d58 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8000c1e:	f000 f871 	bl	8000d04 <MX_USART3_UART_Init>
	/* add semaphores, ... */
	/* USER CODE END RTOS_SEMAPHORES */

	/* Create the timer(s) */
	/* definition and creation of myTimer01 */
	osTimerDef(myTimer01, Callback01);
 8000c22:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <main+0x5c>)
 8000c24:	623b      	str	r3, [r7, #32]
 8000c26:	2300      	movs	r3, #0
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
	myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8000c2a:	f107 0320 	add.w	r3, r7, #32
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2101      	movs	r1, #1
 8000c32:	4618      	mov	r0, r3
 8000c34:	f003 fe10 	bl	8004858 <osTimerCreate>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <main+0x60>)
 8000c3c:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of startTask */
	osThreadDef(startTask, StartTask, osPriorityLow, 0, 128);
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <main+0x64>)
 8000c40:	1d3c      	adds	r4, r7, #4
 8000c42:	461d      	mov	r5, r3
 8000c44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c48:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	startTaskHandle = osThreadCreate(osThread(startTask), NULL);
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	2100      	movs	r1, #0
 8000c54:	4618      	mov	r0, r3
 8000c56:	f003 fd9e 	bl	8004796 <osThreadCreate>
 8000c5a:	4602      	mov	r2, r0
 8000c5c:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <main+0x68>)
 8000c5e:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8000c60:	f003 fd82 	bl	8004768 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000c64:	e7fe      	b.n	8000c64 <main+0x58>
 8000c66:	bf00      	nop
 8000c68:	08000f61 	.word	0x08000f61
 8000c6c:	20004c5c 	.word	0x20004c5c
 8000c70:	08019264 	.word	0x08019264
 8000c74:	20004c58 	.word	0x20004c58

08000c78 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b092      	sub	sp, #72	; 0x48
 8000c7c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8000c7e:	f107 0318 	add.w	r3, r7, #24
 8000c82:	2230      	movs	r2, #48	; 0x30
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f017 fb44 	bl	8018314 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	60da      	str	r2, [r3, #12]
 8000c98:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ca6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000caa:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000cac:	2308      	movs	r3, #8
 8000cae:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLN = 240;
 8000cb0:	23f0      	movs	r3, #240	; 0xf0
 8000cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLQ = 5;
 8000cb8:	2305      	movs	r3, #5
 8000cba:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cbc:	f107 0318 	add.w	r3, r7, #24
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f001 ff8b 	bl	8002bdc <HAL_RCC_OscConfig>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <SystemClock_Config+0x58>
	{
		Error_Handler();
 8000ccc:	f000 f964 	bl	8000f98 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000cd0:	230f      	movs	r3, #15
 8000cd2:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cdc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ce0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ce2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ce6:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ce8:	1d3b      	adds	r3, r7, #4
 8000cea:	2103      	movs	r1, #3
 8000cec:	4618      	mov	r0, r3
 8000cee:	f002 f9c5 	bl	800307c <HAL_RCC_ClockConfig>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <SystemClock_Config+0x84>
	{
		Error_Handler();
 8000cf8:	f000 f94e 	bl	8000f98 <Error_Handler>
	}
}
 8000cfc:	bf00      	nop
 8000cfe:	3748      	adds	r7, #72	; 0x48
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000d08:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <MX_USART3_UART_Init+0x4c>)
 8000d0a:	4a12      	ldr	r2, [pc, #72]	; (8000d54 <MX_USART3_UART_Init+0x50>)
 8000d0c:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000d0e:	4b10      	ldr	r3, [pc, #64]	; (8000d50 <MX_USART3_UART_Init+0x4c>)
 8000d10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d14:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d16:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <MX_USART3_UART_Init+0x4c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <MX_USART3_UART_Init+0x4c>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000d22:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <MX_USART3_UART_Init+0x4c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000d28:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <MX_USART3_UART_Init+0x4c>)
 8000d2a:	220c      	movs	r2, #12
 8000d2c:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d2e:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <MX_USART3_UART_Init+0x4c>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <MX_USART3_UART_Init+0x4c>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d3a:	4805      	ldr	r0, [pc, #20]	; (8000d50 <MX_USART3_UART_Init+0x4c>)
 8000d3c:	f002 fe7a 	bl	8003a34 <HAL_UART_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 8000d46:	f000 f927 	bl	8000f98 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	20004c18 	.word	0x20004c18
 8000d54:	40004800 	.word	0x40004800

08000d58 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08c      	sub	sp, #48	; 0x30
 8000d5c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 8000d5e:	f107 031c 	add.w	r3, r7, #28
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	609a      	str	r2, [r3, #8]
 8000d6a:	60da      	str	r2, [r3, #12]
 8000d6c:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61bb      	str	r3, [r7, #24]
 8000d72:	4b5f      	ldr	r3, [pc, #380]	; (8000ef0 <MX_GPIO_Init+0x198>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	4a5e      	ldr	r2, [pc, #376]	; (8000ef0 <MX_GPIO_Init+0x198>)
 8000d78:	f043 0304 	orr.w	r3, r3, #4
 8000d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7e:	4b5c      	ldr	r3, [pc, #368]	; (8000ef0 <MX_GPIO_Init+0x198>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	f003 0304 	and.w	r3, r3, #4
 8000d86:	61bb      	str	r3, [r7, #24]
 8000d88:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
 8000d8e:	4b58      	ldr	r3, [pc, #352]	; (8000ef0 <MX_GPIO_Init+0x198>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	4a57      	ldr	r2, [pc, #348]	; (8000ef0 <MX_GPIO_Init+0x198>)
 8000d94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d98:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9a:	4b55      	ldr	r3, [pc, #340]	; (8000ef0 <MX_GPIO_Init+0x198>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000da2:	617b      	str	r3, [r7, #20]
 8000da4:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	613b      	str	r3, [r7, #16]
 8000daa:	4b51      	ldr	r3, [pc, #324]	; (8000ef0 <MX_GPIO_Init+0x198>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	4a50      	ldr	r2, [pc, #320]	; (8000ef0 <MX_GPIO_Init+0x198>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	6313      	str	r3, [r2, #48]	; 0x30
 8000db6:	4b4e      	ldr	r3, [pc, #312]	; (8000ef0 <MX_GPIO_Init+0x198>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	4b4a      	ldr	r3, [pc, #296]	; (8000ef0 <MX_GPIO_Init+0x198>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dca:	4a49      	ldr	r2, [pc, #292]	; (8000ef0 <MX_GPIO_Init+0x198>)
 8000dcc:	f043 0302 	orr.w	r3, r3, #2
 8000dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd2:	4b47      	ldr	r3, [pc, #284]	; (8000ef0 <MX_GPIO_Init+0x198>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	f003 0302 	and.w	r3, r3, #2
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	4b43      	ldr	r3, [pc, #268]	; (8000ef0 <MX_GPIO_Init+0x198>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	4a42      	ldr	r2, [pc, #264]	; (8000ef0 <MX_GPIO_Init+0x198>)
 8000de8:	f043 0308 	orr.w	r3, r3, #8
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
 8000dee:	4b40      	ldr	r3, [pc, #256]	; (8000ef0 <MX_GPIO_Init+0x198>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	f003 0308 	and.w	r3, r3, #8
 8000df6:	60bb      	str	r3, [r7, #8]
 8000df8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	4b3c      	ldr	r3, [pc, #240]	; (8000ef0 <MX_GPIO_Init+0x198>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a3b      	ldr	r2, [pc, #236]	; (8000ef0 <MX_GPIO_Init+0x198>)
 8000e04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b39      	ldr	r3, [pc, #228]	; (8000ef0 <MX_GPIO_Init+0x198>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4 | GPIO_PIN_5, GPIO_PIN_RESET);
 8000e16:	2200      	movs	r2, #0
 8000e18:	2130      	movs	r1, #48	; 0x30
 8000e1a:	4836      	ldr	r0, [pc, #216]	; (8000ef4 <MX_GPIO_Init+0x19c>)
 8000e1c:	f001 fea4 	bl	8002b68 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1 | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8000e20:	2200      	movs	r2, #0
 8000e22:	f244 0182 	movw	r1, #16514	; 0x4082
 8000e26:	4834      	ldr	r0, [pc, #208]	; (8000ef8 <MX_GPIO_Init+0x1a0>)
 8000e28:	f001 fe9e 	bl	8002b68 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2140      	movs	r1, #64	; 0x40
 8000e30:	4832      	ldr	r0, [pc, #200]	; (8000efc <MX_GPIO_Init+0x1a4>)
 8000e32:	f001 fe99 	bl	8002b68 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000e36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e3a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e3c:	4b30      	ldr	r3, [pc, #192]	; (8000f00 <MX_GPIO_Init+0x1a8>)
 8000e3e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000e44:	f107 031c 	add.w	r3, r7, #28
 8000e48:	4619      	mov	r1, r3
 8000e4a:	482e      	ldr	r0, [pc, #184]	; (8000f04 <MX_GPIO_Init+0x1ac>)
 8000e4c:	f001 fcee 	bl	800282c <HAL_GPIO_Init>

	/*Configure GPIO pins : PA4 PA5 */
	GPIO_InitStruct.Pin = GPIO_PIN_4 | GPIO_PIN_5;
 8000e50:	2330      	movs	r3, #48	; 0x30
 8000e52:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e54:	2301      	movs	r3, #1
 8000e56:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e60:	f107 031c 	add.w	r3, r7, #28
 8000e64:	4619      	mov	r1, r3
 8000e66:	4823      	ldr	r0, [pc, #140]	; (8000ef4 <MX_GPIO_Init+0x19c>)
 8000e68:	f001 fce0 	bl	800282c <HAL_GPIO_Init>

	/*Configure GPIO pin : PB0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e70:	4b23      	ldr	r3, [pc, #140]	; (8000f00 <MX_GPIO_Init+0x1a8>)
 8000e72:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e78:	f107 031c 	add.w	r3, r7, #28
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	481e      	ldr	r0, [pc, #120]	; (8000ef8 <MX_GPIO_Init+0x1a0>)
 8000e80:	f001 fcd4 	bl	800282c <HAL_GPIO_Init>

	/*Configure GPIO pins : PB1 LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | LD3_Pin | LD2_Pin;
 8000e84:	f244 0382 	movw	r3, #16514	; 0x4082
 8000e88:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	2300      	movs	r3, #0
 8000e94:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e96:	f107 031c 	add.w	r3, r7, #28
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4816      	ldr	r0, [pc, #88]	; (8000ef8 <MX_GPIO_Init+0x1a0>)
 8000e9e:	f001 fcc5 	bl	800282c <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000ea2:	2340      	movs	r3, #64	; 0x40
 8000ea4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000eb2:	f107 031c 	add.w	r3, r7, #28
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4810      	ldr	r0, [pc, #64]	; (8000efc <MX_GPIO_Init+0x1a4>)
 8000eba:	f001 fcb7 	bl	800282c <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ebe:	2380      	movs	r3, #128	; 0x80
 8000ec0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000eca:	f107 031c 	add.w	r3, r7, #28
 8000ece:	4619      	mov	r1, r3
 8000ed0:	480a      	ldr	r0, [pc, #40]	; (8000efc <MX_GPIO_Init+0x1a4>)
 8000ed2:	f001 fcab 	bl	800282c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	2105      	movs	r1, #5
 8000eda:	2006      	movs	r0, #6
 8000edc:	f000 fd6b 	bl	80019b6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000ee0:	2006      	movs	r0, #6
 8000ee2:	f000 fd84 	bl	80019ee <HAL_NVIC_EnableIRQ>

}
 8000ee6:	bf00      	nop
 8000ee8:	3730      	adds	r7, #48	; 0x30
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	40020000 	.word	0x40020000
 8000ef8:	40020400 	.word	0x40020400
 8000efc:	40021800 	.word	0x40021800
 8000f00:	10110000 	.word	0x10110000
 8000f04:	40020800 	.word	0x40020800

08000f08 <StartTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask */
void StartTask(void const *argument)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
	/* init code for LWIP */
	MX_LWIP_Init();
 8000f10:	f002 fec8 	bl	8003ca4 <MX_LWIP_Init>
	/* USER CODE BEGIN 5 */
	//UBaseType_t restStack = 0;
	osDelay(3000);
 8000f14:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000f18:	f003 fc89 	bl	800482e <osDelay>

//  osThreadDef(TCPClient, tcp_client_task, osPriorityNormal, 0, 2048);
//  TCPTaskHandle = osThreadCreate(osThread(TCPClient), NULL);

	osThreadId ptpTaskHandle = ptpd_init();
 8000f1c:	f015 fac8 	bl	80164b0 <ptpd_init>
 8000f20:	60f8      	str	r0, [r7, #12]
	/* Infinite loop */
	for (;;)
	{
		//restStack = uxTaskGetStackHighWaterMark(ptpTaskHandle);
		//printf("PTP task rest stack:%d byte\n",restStack*4);
		osDelay(2000);
 8000f22:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f26:	f003 fc82 	bl	800482e <osDelay>
 8000f2a:	e7fa      	b.n	8000f22 <StartTask+0x1a>

08000f2c <HAL_TIM_TriggerCallback>:
	}
	/* USER CODE END 5 */
}

void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	UNUSED(htim);
	DBG("HAL_TIM_TriggerCallback\n");
 8000f34:	f107 0308 	add.w	r3, r7, #8
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f017 f879 	bl	8018030 <getTime>
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	68fa      	ldr	r2, [r7, #12]
 8000f42:	4619      	mov	r1, r3
 8000f44:	4804      	ldr	r0, [pc, #16]	; (8000f58 <HAL_TIM_TriggerCallback+0x2c>)
 8000f46:	f017 f9ed 	bl	8018324 <iprintf>
 8000f4a:	4804      	ldr	r0, [pc, #16]	; (8000f5c <HAL_TIM_TriggerCallback+0x30>)
 8000f4c:	f017 fa5e 	bl	801840c <puts>
}
 8000f50:	bf00      	nop
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	08019280 	.word	0x08019280
 8000f5c:	08019290 	.word	0x08019290

08000f60 <Callback01>:

/* Callback01 function */
void Callback01(void const *argument)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback01 */

	/* USER CODE END Callback01 */
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bc80      	pop	{r7}
 8000f70:	4770      	bx	lr
	...

08000f74 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a04      	ldr	r2, [pc, #16]	; (8000f94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d101      	bne.n	8000f8a <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 8000f86:	f000 fc23 	bl	80017d0 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40010000 	.word	0x40010000

08000f98 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f9c:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000f9e:	e7fe      	b.n	8000f9e <Error_Handler+0x6>

08000fa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	607b      	str	r3, [r7, #4]
 8000faa:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <HAL_MspInit+0x54>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fae:	4a11      	ldr	r2, [pc, #68]	; (8000ff4 <HAL_MspInit+0x54>)
 8000fb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fb6:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <HAL_MspInit+0x54>)
 8000fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	603b      	str	r3, [r7, #0]
 8000fc6:	4b0b      	ldr	r3, [pc, #44]	; (8000ff4 <HAL_MspInit+0x54>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	4a0a      	ldr	r2, [pc, #40]	; (8000ff4 <HAL_MspInit+0x54>)
 8000fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd2:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <HAL_MspInit+0x54>)
 8000fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fda:	603b      	str	r3, [r7, #0]
 8000fdc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	210f      	movs	r1, #15
 8000fe2:	f06f 0001 	mvn.w	r0, #1
 8000fe6:	f000 fce6 	bl	80019b6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40023800 	.word	0x40023800

08000ff8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a19      	ldr	r2, [pc, #100]	; (800107c <HAL_UART_MspInit+0x84>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d12c      	bne.n	8001074 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	4b18      	ldr	r3, [pc, #96]	; (8001080 <HAL_UART_MspInit+0x88>)
 8001020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001022:	4a17      	ldr	r2, [pc, #92]	; (8001080 <HAL_UART_MspInit+0x88>)
 8001024:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001028:	6413      	str	r3, [r2, #64]	; 0x40
 800102a:	4b15      	ldr	r3, [pc, #84]	; (8001080 <HAL_UART_MspInit+0x88>)
 800102c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	4b11      	ldr	r3, [pc, #68]	; (8001080 <HAL_UART_MspInit+0x88>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a10      	ldr	r2, [pc, #64]	; (8001080 <HAL_UART_MspInit+0x88>)
 8001040:	f043 0308 	orr.w	r3, r3, #8
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
 8001046:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <HAL_UART_MspInit+0x88>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f003 0308 	and.w	r3, r3, #8
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001052:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001058:	2302      	movs	r3, #2
 800105a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001060:	2303      	movs	r3, #3
 8001062:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001064:	2307      	movs	r3, #7
 8001066:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	4619      	mov	r1, r3
 800106e:	4805      	ldr	r0, [pc, #20]	; (8001084 <HAL_UART_MspInit+0x8c>)
 8001070:	f001 fbdc 	bl	800282c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001074:	bf00      	nop
 8001076:	3728      	adds	r7, #40	; 0x28
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40004800 	.word	0x40004800
 8001080:	40023800 	.word	0x40023800
 8001084:	40020c00 	.word	0x40020c00

08001088 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08c      	sub	sp, #48	; 0x30
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001098:	2200      	movs	r2, #0
 800109a:	6879      	ldr	r1, [r7, #4]
 800109c:	2019      	movs	r0, #25
 800109e:	f000 fc8a 	bl	80019b6 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80010a2:	2019      	movs	r0, #25
 80010a4:	f000 fca3 	bl	80019ee <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80010a8:	2300      	movs	r3, #0
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	4b1f      	ldr	r3, [pc, #124]	; (800112c <HAL_InitTick+0xa4>)
 80010ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b0:	4a1e      	ldr	r2, [pc, #120]	; (800112c <HAL_InitTick+0xa4>)
 80010b2:	f043 0301 	orr.w	r3, r3, #1
 80010b6:	6453      	str	r3, [r2, #68]	; 0x44
 80010b8:	4b1c      	ldr	r3, [pc, #112]	; (800112c <HAL_InitTick+0xa4>)
 80010ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010bc:	f003 0301 	and.w	r3, r3, #1
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010c4:	f107 0210 	add.w	r2, r7, #16
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	4611      	mov	r1, r2
 80010ce:	4618      	mov	r0, r3
 80010d0:	f002 f9e6 	bl	80034a0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80010d4:	f002 f9c2 	bl	800345c <HAL_RCC_GetPCLK2Freq>
 80010d8:	4603      	mov	r3, r0
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010e0:	4a13      	ldr	r2, [pc, #76]	; (8001130 <HAL_InitTick+0xa8>)
 80010e2:	fba2 2303 	umull	r2, r3, r2, r3
 80010e6:	0c9b      	lsrs	r3, r3, #18
 80010e8:	3b01      	subs	r3, #1
 80010ea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80010ec:	4b11      	ldr	r3, [pc, #68]	; (8001134 <HAL_InitTick+0xac>)
 80010ee:	4a12      	ldr	r2, [pc, #72]	; (8001138 <HAL_InitTick+0xb0>)
 80010f0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80010f2:	4b10      	ldr	r3, [pc, #64]	; (8001134 <HAL_InitTick+0xac>)
 80010f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010f8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80010fa:	4a0e      	ldr	r2, [pc, #56]	; (8001134 <HAL_InitTick+0xac>)
 80010fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010fe:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001100:	4b0c      	ldr	r3, [pc, #48]	; (8001134 <HAL_InitTick+0xac>)
 8001102:	2200      	movs	r2, #0
 8001104:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001106:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <HAL_InitTick+0xac>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800110c:	4809      	ldr	r0, [pc, #36]	; (8001134 <HAL_InitTick+0xac>)
 800110e:	f002 f9f7 	bl	8003500 <HAL_TIM_Base_Init>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d104      	bne.n	8001122 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001118:	4806      	ldr	r0, [pc, #24]	; (8001134 <HAL_InitTick+0xac>)
 800111a:	f002 fa49 	bl	80035b0 <HAL_TIM_Base_Start_IT>
 800111e:	4603      	mov	r3, r0
 8001120:	e000      	b.n	8001124 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
}
 8001124:	4618      	mov	r0, r3
 8001126:	3730      	adds	r7, #48	; 0x30
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40023800 	.word	0x40023800
 8001130:	431bde83 	.word	0x431bde83
 8001134:	20004c60 	.word	0x20004c60
 8001138:	40010000 	.word	0x40010000

0800113c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001140:	e7fe      	b.n	8001140 <NMI_Handler+0x4>

08001142 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001146:	e7fe      	b.n	8001146 <HardFault_Handler+0x4>

08001148 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800114c:	e7fe      	b.n	800114c <MemManage_Handler+0x4>

0800114e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800114e:	b480      	push	{r7}
 8001150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001152:	e7fe      	b.n	8001152 <BusFault_Handler+0x4>

08001154 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001158:	e7fe      	b.n	8001158 <UsageFault_Handler+0x4>

0800115a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800115a:	b480      	push	{r7}
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	46bd      	mov	sp, r7
 8001162:	bc80      	pop	{r7}
 8001164:	4770      	bx	lr

08001166 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800116a:	2001      	movs	r0, #1
 800116c:	f001 fd14 	bl	8002b98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}

08001174 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001178:	4802      	ldr	r0, [pc, #8]	; (8001184 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800117a:	f002 fa87 	bl	800368c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20004c60 	.word	0x20004c60

08001188 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800118c:	4802      	ldr	r0, [pc, #8]	; (8001198 <ETH_IRQHandler+0x10>)
 800118e:	f000 ff26 	bl	8001fde <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	200065c4 	.word	0x200065c4

0800119c <ETH_EnhancedDescriptorCmd>:
  * @param  NewState: new state of the Enhanced descriptor structure.
  *   This parameter can be: ENABLE or DISABLE. 
  * @retval None
  */
void ETH_EnhancedDescriptorCmd(FunctionalState NewState)
{ 
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d00a      	beq.n	80011c2 <ETH_EnhancedDescriptorCmd+0x26>
  {
    /* Enable enhanced descriptor structure */
    ETH->DMABMR |= ETH_DMABMR_EDE;  
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <ETH_EnhancedDescriptorCmd+0x44>)
 80011ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	490a      	ldr	r1, [pc, #40]	; (80011e0 <ETH_EnhancedDescriptorCmd+0x44>)
 80011b6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80011ba:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80011be:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable enhanced descriptor structure */
    ETH->DMABMR &= ~ETH_DMABMR_EDE;
  }
}
 80011c0:	e009      	b.n	80011d6 <ETH_EnhancedDescriptorCmd+0x3a>
    ETH->DMABMR &= ~ETH_DMABMR_EDE;
 80011c2:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <ETH_EnhancedDescriptorCmd+0x44>)
 80011c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4905      	ldr	r1, [pc, #20]	; (80011e0 <ETH_EnhancedDescriptorCmd+0x44>)
 80011cc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80011d0:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 80011d4:	601a      	str	r2, [r3, #0]
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	bc80      	pop	{r7}
 80011de:	4770      	bx	lr
 80011e0:	40028000 	.word	0x40028000

080011e4 <ETH_MACITConfig>:
  * @param  NewState: new state of the specified ETHERNET MAC interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ETH_MACITConfig(uint32_t ETH_MAC_IT, FunctionalState NewState)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	460b      	mov	r3, r1
 80011ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ETH_MAC_IT(ETH_MAC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 80011f0:	78fb      	ldrb	r3, [r7, #3]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d007      	beq.n	8001206 <ETH_MACITConfig+0x22>
  {
    /* Enable the selected ETHERNET MAC interrupts */
    ETH->MACIMR &= (~(uint32_t)ETH_MAC_IT);
 80011f6:	4b09      	ldr	r3, [pc, #36]	; (800121c <ETH_MACITConfig+0x38>)
 80011f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	43db      	mvns	r3, r3
 80011fe:	4907      	ldr	r1, [pc, #28]	; (800121c <ETH_MACITConfig+0x38>)
 8001200:	4013      	ands	r3, r2
 8001202:	63cb      	str	r3, [r1, #60]	; 0x3c
  else
  {
    /* Disable the selected ETHERNET MAC interrupts */
    ETH->MACIMR |= ETH_MAC_IT;
  }
}
 8001204:	e005      	b.n	8001212 <ETH_MACITConfig+0x2e>
    ETH->MACIMR |= ETH_MAC_IT;
 8001206:	4b05      	ldr	r3, [pc, #20]	; (800121c <ETH_MACITConfig+0x38>)
 8001208:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800120a:	4904      	ldr	r1, [pc, #16]	; (800121c <ETH_MACITConfig+0x38>)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4313      	orrs	r3, r2
 8001210:	63cb      	str	r3, [r1, #60]	; 0x3c
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr
 800121c:	40028000 	.word	0x40028000

08001220 <HAL_ETH_TransmitFrame_TimeStamp>:
  * @param  FrameLength Amount of data to be sent
  * @TimeStamp TimeStamp
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame_TimeStamp(ETH_HandleTypeDef *heth, uint32_t FrameLength, ETH_TimeStamp *TimeStamp)
{
 8001220:	b480      	push	{r7}
 8001222:	b089      	sub	sp, #36	; 0x24
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800122c:	2300      	movs	r3, #0
 800122e:	61fb      	str	r3, [r7, #28]
 8001230:	2300      	movs	r3, #0
 8001232:	613b      	str	r3, [r7, #16]
 8001234:	2300      	movs	r3, #0
 8001236:	61bb      	str	r3, [r7, #24]
  uint32_t timeout = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001242:	2b01      	cmp	r3, #1
 8001244:	d101      	bne.n	800124a <HAL_ETH_TransmitFrame_TimeStamp+0x2a>
 8001246:	2302      	movs	r3, #2
 8001248:	e103      	b.n	8001452 <HAL_ETH_TransmitFrame_TimeStamp+0x232>
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2201      	movs	r2, #1
 800124e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	2202      	movs	r2, #2
 8001256:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

	/* Check timestamp.  */
  if (TimeStamp == NULL)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d101      	bne.n	8001264 <HAL_ETH_TransmitFrame_TimeStamp+0x44>
  {
    /* Return ERROR: Bad timestamp structure */
		return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e0f6      	b.n	8001452 <HAL_ETH_TransmitFrame_TimeStamp+0x232>
  }
    /* Initialize the timestamp. */
	TimeStamp->TimeStampHigh = 0;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	605a      	str	r2, [r3, #4]
	TimeStamp->TimeStampLow = 0;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	601a      	str	r2, [r3, #0]
	
  if (FrameLength == 0U) 
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d109      	bne.n	800128a <HAL_ETH_TransmitFrame_TimeStamp+0x6a>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	2201      	movs	r2, #1
 800127a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	2200      	movs	r2, #0
 8001282:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001286:	2301      	movs	r3, #1
 8001288:	e0e3      	b.n	8001452 <HAL_ETH_TransmitFrame_TimeStamp+0x232>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	da09      	bge.n	80012a8 <HAL_ETH_TransmitFrame_TimeStamp+0x88>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2212      	movs	r2, #18
 8001298:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	2200      	movs	r2, #0
 80012a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e0d4      	b.n	8001452 <HAL_ETH_TransmitFrame_TimeStamp+0x232>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d915      	bls.n	80012de <HAL_ETH_TransmitFrame_TimeStamp+0xbe>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	4a69      	ldr	r2, [pc, #420]	; (800145c <HAL_ETH_TransmitFrame_TimeStamp+0x23c>)
 80012b6:	fba2 2303 	umull	r2, r3, r2, r3
 80012ba:	0a9b      	lsrs	r3, r3, #10
 80012bc:	61fb      	str	r3, [r7, #28]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80012be:	68ba      	ldr	r2, [r7, #8]
 80012c0:	4b66      	ldr	r3, [pc, #408]	; (800145c <HAL_ETH_TransmitFrame_TimeStamp+0x23c>)
 80012c2:	fba3 1302 	umull	r1, r3, r3, r2
 80012c6:	0a9b      	lsrs	r3, r3, #10
 80012c8:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80012cc:	fb01 f303 	mul.w	r3, r1, r3
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d005      	beq.n	80012e2 <HAL_ETH_TransmitFrame_TimeStamp+0xc2>
    {
      bufcount++;
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	3301      	adds	r3, #1
 80012da:	61fb      	str	r3, [r7, #28]
 80012dc:	e001      	b.n	80012e2 <HAL_ETH_TransmitFrame_TimeStamp+0xc2>
    }
  }
  else 
  {  
    bufcount = 1U;
 80012de:	2301      	movs	r3, #1
 80012e0:	61fb      	str	r3, [r7, #28]
  }
  if (bufcount == 1U)
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d116      	bne.n	8001316 <HAL_ETH_TransmitFrame_TimeStamp+0xf6>
  {
    /* Set timestamp, LAST and FIRST segment */
    heth->TxDesc->Status |= ETH_DMATXDESC_TTSE|ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f2:	f042 5248 	orr.w	r2, r2, #838860800	; 0x32000000
 80012f6:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012fc:	68ba      	ldr	r2, [r7, #8]
 80012fe:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001302:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;	//��λ��λ��ʼ����
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800130e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	e050      	b.n	80013b8 <HAL_ETH_TransmitFrame_TimeStamp+0x198>
    //heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
  }
  else
  {
	/* Transmit over multiple descriptors. */
    for (i=0U; i< bufcount; i++)
 8001316:	2300      	movs	r3, #0
 8001318:	61bb      	str	r3, [r7, #24]
 800131a:	e049      	b.n	80013b0 <HAL_ETH_TransmitFrame_TimeStamp+0x190>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001326:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800132a:	601a      	str	r2, [r3, #0]
      /* First segment handling. */
      if (i == 0U) 
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d107      	bne.n	8001342 <HAL_ETH_TransmitFrame_TimeStamp+0x122>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800133c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001340:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001346:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800134a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	3b01      	subs	r3, #1
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	429a      	cmp	r2, r3
 8001354:	d116      	bne.n	8001384 <HAL_ETH_TransmitFrame_TimeStamp+0x164>
      {
        /* Setting the timestamp enable on the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_TTSE|ETH_DMATXDESC_LS;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001360:	f042 5208 	orr.w	r2, r2, #570425344	; 0x22000000
 8001364:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	4a3d      	ldr	r2, [pc, #244]	; (8001460 <HAL_ETH_TransmitFrame_TimeStamp+0x240>)
 800136a:	fb02 f203 	mul.w	r2, r2, r3
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	4413      	add	r3, r2
 8001372:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001376:	613b      	str	r3, [r7, #16]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137c:	693a      	ldr	r2, [r7, #16]
 800137e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001382:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800138e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001392:	601a      	str	r2, [r3, #0]
	  if (i < (bufcount-1U)){
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	3b01      	subs	r3, #1
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	429a      	cmp	r2, r3
 800139c:	d205      	bcs.n	80013aa <HAL_ETH_TransmitFrame_TimeStamp+0x18a>
	  	/* point to next descriptor */
      	heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	461a      	mov	r2, r3
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	3301      	adds	r3, #1
 80013ae:	61bb      	str	r3, [r7, #24]
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d3b1      	bcc.n	800131c <HAL_ETH_TransmitFrame_TimeStamp+0xfc>
      
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013c0:	3314      	adds	r3, #20
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0304 	and.w	r3, r3, #4
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d00d      	beq.n	80013e8 <HAL_ETH_TransmitFrame_TimeStamp+0x1c8>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013d4:	3314      	adds	r3, #20
 80013d6:	2204      	movs	r2, #4
 80013d8:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013e2:	3304      	adds	r3, #4
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
  }
  
    /* Wait for ETH_DMATXDESC_TTSS flag to be set */
  do
  {
    timeout++;
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	3301      	adds	r3, #1
 80013ec:	617b      	str	r3, [r7, #20]
  } while (!(heth->TxDesc->Status & ETH_DMATXDESC_TTSS) && (timeout < PHY_READ_TO));
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d104      	bne.n	8001406 <HAL_ETH_TransmitFrame_TimeStamp+0x1e6>
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001402:	4293      	cmp	r3, r2
 8001404:	d9f0      	bls.n	80013e8 <HAL_ETH_TransmitFrame_TimeStamp+0x1c8>

  /* Fill in time stamp of no timeout */
  if (timeout < PHY_READ_TO)
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800140c:	4293      	cmp	r3, r2
 800140e:	d809      	bhi.n	8001424 <HAL_ETH_TransmitFrame_TimeStamp+0x204>
  {
	  /* Fill in the time stamp */
	  TimeStamp->TimeStampHigh = heth->TxDesc->TimeStampHigh;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001414:	69da      	ldr	r2, [r3, #28]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	605a      	str	r2, [r3, #4]
	  TimeStamp->TimeStampLow = heth->TxDesc->TimeStampLow;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141e:	699a      	ldr	r2, [r3, #24]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	601a      	str	r2, [r3, #0]
  }

  /* Clear the DMATxDescToSet status register TTSS flag */
  heth->TxDesc->Status &= ~ETH_DMATXDESC_TTSS;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001432:	601a      	str	r2, [r3, #0]
  
  heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	461a      	mov	r2, r3
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2201      	movs	r2, #1
 8001444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2200      	movs	r2, #0
 800144c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001450:	2300      	movs	r3, #0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3724      	adds	r7, #36	; 0x24
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr
 800145c:	ac02b00b 	.word	0xac02b00b
 8001460:	fffffa0c 	.word	0xfffffa0c

08001464 <ETH_EnablePTPTimeStampAddend>:
  * @brief  Updated the PTP block for fine correction with the Time Stamp Addend register value.
  * @param  None
  * @retval None
  */
void ETH_EnablePTPTimeStampAddend(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* Enable the PTP block update with the Time Stamp Addend register value */
  ETH->PTPTSCR |= ETH_PTPTSCR_TSARU;    
 8001468:	4b05      	ldr	r3, [pc, #20]	; (8001480 <ETH_EnablePTPTimeStampAddend+0x1c>)
 800146a:	f8d3 3700 	ldr.w	r3, [r3, #1792]	; 0x700
 800146e:	4a04      	ldr	r2, [pc, #16]	; (8001480 <ETH_EnablePTPTimeStampAddend+0x1c>)
 8001470:	f043 0320 	orr.w	r3, r3, #32
 8001474:	f8c2 3700 	str.w	r3, [r2, #1792]	; 0x700
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr
 8001480:	40028000 	.word	0x40028000

08001484 <ETH_InitializePTPTimeStamp>:
  * @brief  Initialize the PTP Time Stamp
  * @param  None
  * @retval None
  */
void ETH_InitializePTPTimeStamp(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* Initialize the PTP Time Stamp */
  ETH->PTPTSCR |= ETH_PTPTSCR_TSSTI;    
 8001488:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <ETH_InitializePTPTimeStamp+0x1c>)
 800148a:	f8d3 3700 	ldr.w	r3, [r3, #1792]	; 0x700
 800148e:	4a04      	ldr	r2, [pc, #16]	; (80014a0 <ETH_InitializePTPTimeStamp+0x1c>)
 8001490:	f043 0304 	orr.w	r3, r3, #4
 8001494:	f8c2 3700 	str.w	r3, [r2, #1792]	; 0x700
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr
 80014a0:	40028000 	.word	0x40028000

080014a4 <ETH_PTPUpdateMethodConfig>:
  *     @arg ETH_PTP_FineUpdate   : Fine Update method 
  *     @arg ETH_PTP_CoarseUpdate : Coarse Update method 
  * @retval None
  */
void ETH_PTPUpdateMethodConfig(uint32_t UpdateMethod)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ETH_PTP_UPDATE(UpdateMethod));
  
  if (UpdateMethod != ETH_PTP_CoarseUpdate)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d008      	beq.n	80014c4 <ETH_PTPUpdateMethodConfig+0x20>
  {
    /* Enable the PTP Fine Update method */
    ETH->PTPTSCR |= ETH_PTPTSCR_TSFCU;
 80014b2:	4b0b      	ldr	r3, [pc, #44]	; (80014e0 <ETH_PTPUpdateMethodConfig+0x3c>)
 80014b4:	f8d3 3700 	ldr.w	r3, [r3, #1792]	; 0x700
 80014b8:	4a09      	ldr	r2, [pc, #36]	; (80014e0 <ETH_PTPUpdateMethodConfig+0x3c>)
 80014ba:	f043 0302 	orr.w	r3, r3, #2
 80014be:	f8c2 3700 	str.w	r3, [r2, #1792]	; 0x700
  else
  {
    /* Disable the PTP Coarse Update method */
    ETH->PTPTSCR &= (~(uint32_t)ETH_PTPTSCR_TSFCU);
  } 
}
 80014c2:	e007      	b.n	80014d4 <ETH_PTPUpdateMethodConfig+0x30>
    ETH->PTPTSCR &= (~(uint32_t)ETH_PTPTSCR_TSFCU);
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <ETH_PTPUpdateMethodConfig+0x3c>)
 80014c6:	f8d3 3700 	ldr.w	r3, [r3, #1792]	; 0x700
 80014ca:	4a05      	ldr	r2, [pc, #20]	; (80014e0 <ETH_PTPUpdateMethodConfig+0x3c>)
 80014cc:	f023 0302 	bic.w	r3, r3, #2
 80014d0:	f8c2 3700 	str.w	r3, [r2, #1792]	; 0x700
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	bc80      	pop	{r7}
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	40028000 	.word	0x40028000

080014e4 <ETH_PTPTimeStampCmd>:
  * @param  NewState: new state of the PTP time stamp for transmit and receive frames
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ETH_PTPTimeStampCmd(FunctionalState NewState)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d00a      	beq.n	800150a <ETH_PTPTimeStampCmd+0x26>
  {
    /* Enable the PTP time stamp for transmit and receive frames */
    ETH->PTPTSCR |= ETH_PTPTSCR_TSE | ETH_PTPTSSR_TSSIPV4FE | ETH_PTPTSSR_TSSIPV6FE | ETH_PTPTSSR_TSSARFE;
 80014f4:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <ETH_PTPTimeStampCmd+0x40>)
 80014f6:	f8d3 3700 	ldr.w	r3, [r3, #1792]	; 0x700
 80014fa:	4a0a      	ldr	r2, [pc, #40]	; (8001524 <ETH_PTPTimeStampCmd+0x40>)
 80014fc:	f443 5344 	orr.w	r3, r3, #12544	; 0x3100
 8001500:	f043 0301 	orr.w	r3, r3, #1
 8001504:	f8c2 3700 	str.w	r3, [r2, #1792]	; 0x700
  else
  {
    /* Disable the PTP time stamp for transmit and receive frames */
    ETH->PTPTSCR &= (~(uint32_t)ETH_PTPTSCR_TSE);
  }
}
 8001508:	e007      	b.n	800151a <ETH_PTPTimeStampCmd+0x36>
    ETH->PTPTSCR &= (~(uint32_t)ETH_PTPTSCR_TSE);
 800150a:	4b06      	ldr	r3, [pc, #24]	; (8001524 <ETH_PTPTimeStampCmd+0x40>)
 800150c:	f8d3 3700 	ldr.w	r3, [r3, #1792]	; 0x700
 8001510:	4a04      	ldr	r2, [pc, #16]	; (8001524 <ETH_PTPTimeStampCmd+0x40>)
 8001512:	f023 0301 	bic.w	r3, r3, #1
 8001516:	f8c2 3700 	str.w	r3, [r2, #1792]	; 0x700
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr
 8001524:	40028000 	.word	0x40028000

08001528 <ETH_GetPTPFlagStatus>:
  *     @arg ETH_PTP_FLAG_TSSTU : Time Stamp Update 
  *     @arg ETH_PTP_FLAG_TSSTI  : Time Stamp Initialize                       
  * @retval The new state of ETHERNET PTP Flag (SET or RESET).
  */
FlagStatus ETH_GetPTPFlagStatus(uint32_t ETH_PTP_FLAG)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8001530:	2300      	movs	r3, #0
 8001532:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ETH_PTP_GET_FLAG(ETH_PTP_FLAG));
  
  if ((ETH->PTPTSCR & ETH_PTP_FLAG) != (uint32_t)RESET)
 8001534:	4b08      	ldr	r3, [pc, #32]	; (8001558 <ETH_GetPTPFlagStatus+0x30>)
 8001536:	f8d3 2700 	ldr.w	r2, [r3, #1792]	; 0x700
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4013      	ands	r3, r2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d002      	beq.n	8001548 <ETH_GetPTPFlagStatus+0x20>
  {
    bitstatus = SET;
 8001542:	2301      	movs	r3, #1
 8001544:	73fb      	strb	r3, [r7, #15]
 8001546:	e001      	b.n	800154c <ETH_GetPTPFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8001548:	2300      	movs	r3, #0
 800154a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800154c:	7bfb      	ldrb	r3, [r7, #15]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3714      	adds	r7, #20
 8001552:	46bd      	mov	sp, r7
 8001554:	bc80      	pop	{r7}
 8001556:	4770      	bx	lr
 8001558:	40028000 	.word	0x40028000

0800155c <ETH_SetPTPSubSecondIncrement>:
  * @brief  Sets the system time Sub-Second Increment value.
  * @param  SubSecondValue: specifies the PTP Sub-Second Increment Register value.
  * @retval None
  */
void ETH_SetPTPSubSecondIncrement(uint32_t SubSecondValue)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ETH_PTP_SUBSECOND_INCREMENT(SubSecondValue));
  /* Set the PTP Sub-Second Increment Register */
  ETH->PTPSSIR = SubSecondValue;    
 8001564:	4a04      	ldr	r2, [pc, #16]	; (8001578 <ETH_SetPTPSubSecondIncrement+0x1c>)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f8c2 3704 	str.w	r3, [r2, #1796]	; 0x704
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	bc80      	pop	{r7}
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	40028000 	.word	0x40028000

0800157c <ETH_SetPTPTimeStampUpdate>:
  * @param  SubSecondValue: specifies the PTP Time update sub-second value.
  *   This parameter is a 31 bit value, bit32 correspond to the sign.
  * @retval None
  */
void ETH_SetPTPTimeStampUpdate(uint32_t Sign, uint32_t SecondValue, uint32_t SubSecondValue)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ETH_PTP_TIME_SIGN(Sign));  
  assert_param(IS_ETH_PTP_TIME_STAMP_UPDATE_SUBSECOND(SubSecondValue)); 
  /* Set the PTP Time Update High Register */
  ETH->PTPTSHUR = SecondValue;
 8001588:	4a07      	ldr	r2, [pc, #28]	; (80015a8 <ETH_SetPTPTimeStampUpdate+0x2c>)
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
  
  /* Set the PTP Time Update Low Register with sign */
  ETH->PTPTSLUR = Sign | SubSecondValue;   
 8001590:	4905      	ldr	r1, [pc, #20]	; (80015a8 <ETH_SetPTPTimeStampUpdate+0x2c>)
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4313      	orrs	r3, r2
 8001598:	f8c1 3714 	str.w	r3, [r1, #1812]	; 0x714
}
 800159c:	bf00      	nop
 800159e:	3714      	adds	r7, #20
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	40028000 	.word	0x40028000

080015ac <ETH_SetPTPTimeStampAddend>:
  * @brief  Sets the Time Stamp Addend value.
  * @param  Value: specifies the PTP Time Stamp Addend Register value.
  * @retval None
  */
void ETH_SetPTPTimeStampAddend(uint32_t Value)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* Set the PTP Time Stamp Addend Register */
  ETH->PTPTSAR = Value;    
 80015b4:	4a04      	ldr	r2, [pc, #16]	; (80015c8 <ETH_SetPTPTimeStampAddend+0x1c>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f8c2 3718 	str.w	r3, [r2, #1816]	; 0x718
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bc80      	pop	{r7}
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	40028000 	.word	0x40028000

080015cc <ETH_GetPTPRegister>:
  *     @arg ETH_PTPTTHR  : Target Time High Register 
  *     @arg ETH_PTPTTLR  : Target Time Low Register 
  * @retval The value of ETHERNET PTP Register value.
  */
uint32_t ETH_GetPTPRegister(uint32_t ETH_PTPReg)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ETH_PTP_REGISTER(ETH_PTPReg));
  
  /* Return the selected register value */
  return (*(__IO uint32_t *)(ETH_MAC_BASE + ETH_PTPReg));
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80015da:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
 80015de:	681b      	ldr	r3, [r3, #0]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr

080015ea <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b086      	sub	sp, #24
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	60f8      	str	r0, [r7, #12]
 80015f2:	60b9      	str	r1, [r7, #8]
 80015f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f6:	2300      	movs	r3, #0
 80015f8:	617b      	str	r3, [r7, #20]
 80015fa:	e00a      	b.n	8001612 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015fc:	f3af 8000 	nop.w
 8001600:	4601      	mov	r1, r0
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	1c5a      	adds	r2, r3, #1
 8001606:	60ba      	str	r2, [r7, #8]
 8001608:	b2ca      	uxtb	r2, r1
 800160a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	3301      	adds	r3, #1
 8001610:	617b      	str	r3, [r7, #20]
 8001612:	697a      	ldr	r2, [r7, #20]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	429a      	cmp	r2, r3
 8001618:	dbf0      	blt.n	80015fc <_read+0x12>
	}

return len;
 800161a:	687b      	ldr	r3, [r7, #4]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	e009      	b.n	800164a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	1c5a      	adds	r2, r3, #1
 800163a:	60ba      	str	r2, [r7, #8]
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff facc 	bl	8000bdc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	3301      	adds	r3, #1
 8001648:	617b      	str	r3, [r7, #20]
 800164a:	697a      	ldr	r2, [r7, #20]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	429a      	cmp	r2, r3
 8001650:	dbf1      	blt.n	8001636 <_write+0x12>
	}
	return len;
 8001652:	687b      	ldr	r3, [r7, #4]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3718      	adds	r7, #24
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <_close>:

int _close(int file)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
	return -1;
 8001664:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001668:	4618      	mov	r0, r3
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	bc80      	pop	{r7}
 8001670:	4770      	bx	lr

08001672 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001672:	b480      	push	{r7}
 8001674:	b083      	sub	sp, #12
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
 800167a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001682:	605a      	str	r2, [r3, #4]
	return 0;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr

08001690 <_isatty>:

int _isatty(int file)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
	return 1;
 8001698:	2301      	movs	r3, #1
}
 800169a:	4618      	mov	r0, r3
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr

080016a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
	return 0;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr

080016bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016bc:	b480      	push	{r7}
 80016be:	b087      	sub	sp, #28
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016c4:	4a14      	ldr	r2, [pc, #80]	; (8001718 <_sbrk+0x5c>)
 80016c6:	4b15      	ldr	r3, [pc, #84]	; (800171c <_sbrk+0x60>)
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016d0:	4b13      	ldr	r3, [pc, #76]	; (8001720 <_sbrk+0x64>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d102      	bne.n	80016de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016d8:	4b11      	ldr	r3, [pc, #68]	; (8001720 <_sbrk+0x64>)
 80016da:	4a12      	ldr	r2, [pc, #72]	; (8001724 <_sbrk+0x68>)
 80016dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016de:	4b10      	ldr	r3, [pc, #64]	; (8001720 <_sbrk+0x64>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4413      	add	r3, r2
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d205      	bcs.n	80016f8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80016ec:	4b0e      	ldr	r3, [pc, #56]	; (8001728 <_sbrk+0x6c>)
 80016ee:	220c      	movs	r2, #12
 80016f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016f2:	f04f 33ff 	mov.w	r3, #4294967295
 80016f6:	e009      	b.n	800170c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80016f8:	4b09      	ldr	r3, [pc, #36]	; (8001720 <_sbrk+0x64>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016fe:	4b08      	ldr	r3, [pc, #32]	; (8001720 <_sbrk+0x64>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4413      	add	r3, r2
 8001706:	4a06      	ldr	r2, [pc, #24]	; (8001720 <_sbrk+0x64>)
 8001708:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800170a:	68fb      	ldr	r3, [r7, #12]
}
 800170c:	4618      	mov	r0, r3
 800170e:	371c      	adds	r7, #28
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	20020000 	.word	0x20020000
 800171c:	00004000 	.word	0x00004000
 8001720:	2000075c 	.word	0x2000075c
 8001724:	2000bf38 	.word	0x2000bf38
 8001728:	2000b8e0 	.word	0x2000b8e0

0800172c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr

08001738 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001738:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001770 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800173c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800173e:	e003      	b.n	8001748 <LoopCopyDataInit>

08001740 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001740:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001742:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001744:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001746:	3104      	adds	r1, #4

08001748 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8001748:	480b      	ldr	r0, [pc, #44]	; (8001778 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800174a:	4b0c      	ldr	r3, [pc, #48]	; (800177c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800174c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800174e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001750:	d3f6      	bcc.n	8001740 <CopyDataInit>
  ldr  r2, =_sbss
 8001752:	4a0b      	ldr	r2, [pc, #44]	; (8001780 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001754:	e002      	b.n	800175c <LoopFillZerobss>

08001756 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001756:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001758:	f842 3b04 	str.w	r3, [r2], #4

0800175c <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 800175c:	4b09      	ldr	r3, [pc, #36]	; (8001784 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800175e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001760:	d3f9      	bcc.n	8001756 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001762:	f7ff ffe3 	bl	800172c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001766:	f016 fd97 	bl	8018298 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800176a:	f7ff fa4f 	bl	8000c0c <main>
  bx  lr
 800176e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001770:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001774:	0801c9a8 	.word	0x0801c9a8
  ldr  r0, =_sdata
 8001778:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800177c:	20000080 	.word	0x20000080
  ldr  r2, =_sbss
 8001780:	20000080 	.word	0x20000080
  ldr  r3, = _ebss
 8001784:	2000bf34 	.word	0x2000bf34

08001788 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001788:	e7fe      	b.n	8001788 <ADC_IRQHandler>
	...

0800178c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001790:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <HAL_Init+0x40>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a0d      	ldr	r2, [pc, #52]	; (80017cc <HAL_Init+0x40>)
 8001796:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800179a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 800179c:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <HAL_Init+0x40>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a0a      	ldr	r2, [pc, #40]	; (80017cc <HAL_Init+0x40>)
 80017a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017a8:	4b08      	ldr	r3, [pc, #32]	; (80017cc <HAL_Init+0x40>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a07      	ldr	r2, [pc, #28]	; (80017cc <HAL_Init+0x40>)
 80017ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017b4:	2003      	movs	r0, #3
 80017b6:	f000 f8f3 	bl	80019a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ba:	2000      	movs	r0, #0
 80017bc:	f7ff fc64 	bl	8001088 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80017c0:	f7ff fbee 	bl	8000fa0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40023c00 	.word	0x40023c00

080017d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <HAL_IncTick+0x1c>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	461a      	mov	r2, r3
 80017da:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <HAL_IncTick+0x20>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4413      	add	r3, r2
 80017e0:	4a03      	ldr	r2, [pc, #12]	; (80017f0 <HAL_IncTick+0x20>)
 80017e2:	6013      	str	r3, [r2, #0]
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr
 80017ec:	20000008 	.word	0x20000008
 80017f0:	20004ca8 	.word	0x20004ca8

080017f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  return uwTick;
 80017f8:	4b02      	ldr	r3, [pc, #8]	; (8001804 <HAL_GetTick+0x10>)
 80017fa:	681b      	ldr	r3, [r3, #0]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr
 8001804:	20004ca8 	.word	0x20004ca8

08001808 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001810:	f7ff fff0 	bl	80017f4 <HAL_GetTick>
 8001814:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001820:	d005      	beq.n	800182e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001822:	4b09      	ldr	r3, [pc, #36]	; (8001848 <HAL_Delay+0x40>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	461a      	mov	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4413      	add	r3, r2
 800182c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800182e:	bf00      	nop
 8001830:	f7ff ffe0 	bl	80017f4 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	429a      	cmp	r2, r3
 800183e:	d8f7      	bhi.n	8001830 <HAL_Delay+0x28>
  {
  }
}
 8001840:	bf00      	nop
 8001842:	3710      	adds	r7, #16
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20000008 	.word	0x20000008

0800184c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800185c:	4b0c      	ldr	r3, [pc, #48]	; (8001890 <__NVIC_SetPriorityGrouping+0x44>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001862:	68ba      	ldr	r2, [r7, #8]
 8001864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001868:	4013      	ands	r3, r2
 800186a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001874:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800187c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800187e:	4a04      	ldr	r2, [pc, #16]	; (8001890 <__NVIC_SetPriorityGrouping+0x44>)
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	60d3      	str	r3, [r2, #12]
}
 8001884:	bf00      	nop
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	bc80      	pop	{r7}
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001898:	4b04      	ldr	r3, [pc, #16]	; (80018ac <__NVIC_GetPriorityGrouping+0x18>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	0a1b      	lsrs	r3, r3, #8
 800189e:	f003 0307 	and.w	r3, r3, #7
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	db0b      	blt.n	80018da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	f003 021f 	and.w	r2, r3, #31
 80018c8:	4906      	ldr	r1, [pc, #24]	; (80018e4 <__NVIC_EnableIRQ+0x34>)
 80018ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ce:	095b      	lsrs	r3, r3, #5
 80018d0:	2001      	movs	r0, #1
 80018d2:	fa00 f202 	lsl.w	r2, r0, r2
 80018d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr
 80018e4:	e000e100 	.word	0xe000e100

080018e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	6039      	str	r1, [r7, #0]
 80018f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	db0a      	blt.n	8001912 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	490c      	ldr	r1, [pc, #48]	; (8001934 <__NVIC_SetPriority+0x4c>)
 8001902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001906:	0112      	lsls	r2, r2, #4
 8001908:	b2d2      	uxtb	r2, r2
 800190a:	440b      	add	r3, r1
 800190c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001910:	e00a      	b.n	8001928 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	b2da      	uxtb	r2, r3
 8001916:	4908      	ldr	r1, [pc, #32]	; (8001938 <__NVIC_SetPriority+0x50>)
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	f003 030f 	and.w	r3, r3, #15
 800191e:	3b04      	subs	r3, #4
 8001920:	0112      	lsls	r2, r2, #4
 8001922:	b2d2      	uxtb	r2, r2
 8001924:	440b      	add	r3, r1
 8001926:	761a      	strb	r2, [r3, #24]
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	e000e100 	.word	0xe000e100
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800193c:	b480      	push	{r7}
 800193e:	b089      	sub	sp, #36	; 0x24
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	f1c3 0307 	rsb	r3, r3, #7
 8001956:	2b04      	cmp	r3, #4
 8001958:	bf28      	it	cs
 800195a:	2304      	movcs	r3, #4
 800195c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	3304      	adds	r3, #4
 8001962:	2b06      	cmp	r3, #6
 8001964:	d902      	bls.n	800196c <NVIC_EncodePriority+0x30>
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3b03      	subs	r3, #3
 800196a:	e000      	b.n	800196e <NVIC_EncodePriority+0x32>
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001970:	f04f 32ff 	mov.w	r2, #4294967295
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43da      	mvns	r2, r3
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	401a      	ands	r2, r3
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001984:	f04f 31ff 	mov.w	r1, #4294967295
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	fa01 f303 	lsl.w	r3, r1, r3
 800198e:	43d9      	mvns	r1, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001994:	4313      	orrs	r3, r2
         );
}
 8001996:	4618      	mov	r0, r3
 8001998:	3724      	adds	r7, #36	; 0x24
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr

080019a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f7ff ff4f 	bl	800184c <__NVIC_SetPriorityGrouping>
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b086      	sub	sp, #24
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	4603      	mov	r3, r0
 80019be:	60b9      	str	r1, [r7, #8]
 80019c0:	607a      	str	r2, [r7, #4]
 80019c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019c8:	f7ff ff64 	bl	8001894 <__NVIC_GetPriorityGrouping>
 80019cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	68b9      	ldr	r1, [r7, #8]
 80019d2:	6978      	ldr	r0, [r7, #20]
 80019d4:	f7ff ffb2 	bl	800193c <NVIC_EncodePriority>
 80019d8:	4602      	mov	r2, r0
 80019da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019de:	4611      	mov	r1, r2
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff ff81 	bl	80018e8 <__NVIC_SetPriority>
}
 80019e6:	bf00      	nop
 80019e8:	3718      	adds	r7, #24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b082      	sub	sp, #8
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	4603      	mov	r3, r0
 80019f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff ff57 	bl	80018b0 <__NVIC_EnableIRQ>
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
	...

08001a0c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b088      	sub	sp, #32
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001a14:	2300      	movs	r3, #0
 8001a16:	61fb      	str	r3, [r7, #28]
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001a1c:	4ba3      	ldr	r3, [pc, #652]	; (8001cac <HAL_ETH_Init+0x2a0>)
 8001a1e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001a24:	2300      	movs	r3, #0
 8001a26:	613b      	str	r3, [r7, #16]

  /* Check the ETH peripheral state */
  if (heth == NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e175      	b.n	8001d1e <HAL_ETH_Init+0x312>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));

  if (heth->State == HAL_ETH_STATE_RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d106      	bne.n	8001a4c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f002 f9de 	bl	8003e08 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	4b97      	ldr	r3, [pc, #604]	; (8001cb0 <HAL_ETH_Init+0x2a4>)
 8001a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a54:	4a96      	ldr	r2, [pc, #600]	; (8001cb0 <HAL_ETH_Init+0x2a4>)
 8001a56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a5a:	6453      	str	r3, [r2, #68]	; 0x44
 8001a5c:	4b94      	ldr	r3, [pc, #592]	; (8001cb0 <HAL_ETH_Init+0x2a4>)
 8001a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a64:	60bb      	str	r3, [r7, #8]
 8001a66:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001a68:	4b92      	ldr	r3, [pc, #584]	; (8001cb4 <HAL_ETH_Init+0x2a8>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	4a91      	ldr	r2, [pc, #580]	; (8001cb4 <HAL_ETH_Init+0x2a8>)
 8001a6e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001a72:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001a74:	4b8f      	ldr	r3, [pc, #572]	; (8001cb4 <HAL_ETH_Init+0x2a8>)
 8001a76:	685a      	ldr	r2, [r3, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	498d      	ldr	r1, [pc, #564]	; (8001cb4 <HAL_ETH_Init+0x2a8>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	604b      	str	r3, [r1, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f042 0201 	orr.w	r2, r2, #1
 8001a94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a98:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a9a:	f7ff feab 	bl	80017f4 <HAL_GetTick>
 8001a9e:	6178      	str	r0, [r7, #20]

  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001aa0:	e011      	b.n	8001ac6 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_SWRESET)
 8001aa2:	f7ff fea7 	bl	80017f4 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001ab0:	d909      	bls.n	8001ac6 <HAL_ETH_Init+0xba>
    {
      heth->State = HAL_ETH_STATE_TIMEOUT;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2203      	movs	r2, #3
 8001ab6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e12b      	b.n	8001d1e <HAL_ETH_Init+0x312>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d1e4      	bne.n	8001aa2 <HAL_ETH_Init+0x96>
    }
  }

  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	f023 031c 	bic.w	r3, r3, #28
 8001ae6:	61fb      	str	r3, [r7, #28]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001ae8:	f001 fc8c 	bl	8003404 <HAL_RCC_GetHCLKFreq>
 8001aec:	61b8      	str	r0, [r7, #24]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	4a71      	ldr	r2, [pc, #452]	; (8001cb8 <HAL_ETH_Init+0x2ac>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d908      	bls.n	8001b08 <HAL_ETH_Init+0xfc>
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	4a70      	ldr	r2, [pc, #448]	; (8001cbc <HAL_ETH_Init+0x2b0>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d804      	bhi.n	8001b08 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	f043 0308 	orr.w	r3, r3, #8
 8001b04:	61fb      	str	r3, [r7, #28]
 8001b06:	e01a      	b.n	8001b3e <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	4a6c      	ldr	r2, [pc, #432]	; (8001cbc <HAL_ETH_Init+0x2b0>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d908      	bls.n	8001b22 <HAL_ETH_Init+0x116>
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	4a6b      	ldr	r2, [pc, #428]	; (8001cc0 <HAL_ETH_Init+0x2b4>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d804      	bhi.n	8001b22 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f043 030c 	orr.w	r3, r3, #12
 8001b1e:	61fb      	str	r3, [r7, #28]
 8001b20:	e00d      	b.n	8001b3e <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	4a66      	ldr	r2, [pc, #408]	; (8001cc0 <HAL_ETH_Init+0x2b4>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d903      	bls.n	8001b32 <HAL_ETH_Init+0x126>
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	4a65      	ldr	r2, [pc, #404]	; (8001cc4 <HAL_ETH_Init+0x2b8>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d904      	bls.n	8001b3c <HAL_ETH_Init+0x130>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else /* ((hclk >= 100000000)&&(hclk < 120000000)) */
  {
    /* CSR Clock Range between 100-120 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	f043 0304 	orr.w	r3, r3, #4
 8001b38:	61fb      	str	r3, [r7, #28]
 8001b3a:	e000      	b.n	8001b3e <HAL_ETH_Init+0x132>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001b3c:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	69fa      	ldr	r2, [r7, #28]
 8001b44:	611a      	str	r2, [r3, #16]

  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001b46:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 fb27 	bl	80021a0 <HAL_ETH_WritePHYRegister>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d00b      	beq.n	8001b70 <HAL_ETH_Init+0x164>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	613b      	str	r3, [r7, #16]

    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001b5c:	6939      	ldr	r1, [r7, #16]
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f000 fbb4 	bl	80022cc <ETH_MACDMAConfig>

    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e0d6      	b.n	8001d1e <HAL_ETH_Init+0x312>
  }

  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001b70:	20ff      	movs	r0, #255	; 0xff
 8001b72:	f7ff fe49 	bl	8001808 <HAL_Delay>

  if ((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f000 80a4 	beq.w	8001cc8 <HAL_ETH_Init+0x2bc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b80:	f7ff fe38 	bl	80017f4 <HAL_GetTick>
 8001b84:	6178      	str	r0, [r7, #20]

    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001b86:	f107 030c 	add.w	r3, r7, #12
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f000 fa9e 	bl	80020d0 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_LINKED_STATE)
 8001b94:	f7ff fe2e 	bl	80017f4 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d90f      	bls.n	8001bc6 <HAL_ETH_Init+0x1ba>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001baa:	6939      	ldr	r1, [r7, #16]
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 fb8d 	bl	80022cc <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e0ab      	b.n	8001d1e <HAL_ETH_Init+0x312>
      }
    }
    while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d0da      	beq.n	8001b86 <HAL_ETH_Init+0x17a>


    /* Enable Auto-Negotiation */
    if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001bd0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 fae2 	bl	80021a0 <HAL_ETH_WritePHYRegister>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00b      	beq.n	8001bfa <HAL_ETH_Init+0x1ee>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001be6:	6939      	ldr	r1, [r7, #16]
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f000 fb6f 	bl	80022cc <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e091      	b.n	8001d1e <HAL_ETH_Init+0x312>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 8001bfa:	f7ff fdfb 	bl	80017f4 <HAL_GetTick>
 8001bfe:	6178      	str	r0, [r7, #20]

    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001c00:	f107 030c 	add.w	r3, r7, #12
 8001c04:	461a      	mov	r2, r3
 8001c06:	2101      	movs	r1, #1
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f000 fa61 	bl	80020d0 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001c0e:	f7ff fdf1 	bl	80017f4 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d90f      	bls.n	8001c40 <HAL_ETH_Init+0x234>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001c24:	6939      	ldr	r1, [r7, #16]
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 fb50 	bl	80022cc <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e06e      	b.n	8001d1e <HAL_ETH_Init+0x312>
      }

    }
    while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f003 0320 	and.w	r3, r3, #32
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d0da      	beq.n	8001c00 <HAL_ETH_Init+0x1f4>

    /* Read the result of the auto-negotiation */
    if ((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001c4a:	f107 030c 	add.w	r3, r7, #12
 8001c4e:	461a      	mov	r2, r3
 8001c50:	211f      	movs	r1, #31
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 fa3c 	bl	80020d0 <HAL_ETH_ReadPHYRegister>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d00b      	beq.n	8001c76 <HAL_ETH_Init+0x26a>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001c62:	6939      	ldr	r1, [r7, #16]
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 fb31 	bl	80022cc <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e053      	b.n	8001d1e <HAL_ETH_Init+0x312>
    }

    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if ((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f003 0310 	and.w	r3, r3, #16
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d004      	beq.n	8001c8a <HAL_ETH_Init+0x27e>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c86:	60da      	str	r2, [r3, #12]
 8001c88:	e002      	b.n	8001c90 <HAL_ETH_Init+0x284>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if ((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f003 0304 	and.w	r3, r3, #4
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	e034      	b.n	8001d0c <HAL_ETH_Init+0x300>
    }
    else
    {
      /* Set Ethernet speed to 100M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_100M;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ca8:	609a      	str	r2, [r3, #8]
 8001caa:	e02f      	b.n	8001d0c <HAL_ETH_Init+0x300>
 8001cac:	03938700 	.word	0x03938700
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40013800 	.word	0x40013800
 8001cb8:	01312cff 	.word	0x01312cff
 8001cbc:	02160ebf 	.word	0x02160ebf
 8001cc0:	039386ff 	.word	0x039386ff
 8001cc4:	05f5e0ff 	.word	0x05f5e0ff
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

    /* Set MAC Speed and Duplex Mode */
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	08db      	lsrs	r3, r3, #3
 8001cce:	b29a      	uxth	r2, r3
                                                 (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	085b      	lsrs	r3, r3, #1
 8001cd6:	b29b      	uxth	r3, r3
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	461a      	mov	r2, r3
 8001cde:	2100      	movs	r1, #0
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f000 fa5d 	bl	80021a0 <HAL_ETH_WritePHYRegister>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d00b      	beq.n	8001d04 <HAL_ETH_Init+0x2f8>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001cf0:	6939      	ldr	r1, [r7, #16]
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 faea 	bl	80022cc <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e00c      	b.n	8001d1e <HAL_ETH_Init+0x312>
    }

    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001d04:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001d08:	f7ff fd7e 	bl	8001808 <HAL_Delay>
  }

  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001d0c:	6939      	ldr	r1, [r7, #16]
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 fadc 	bl	80022cc <ETH_MACDMAConfig>

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3720      	adds	r7, #32
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop

08001d28 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b087      	sub	sp, #28
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	607a      	str	r2, [r7, #4]
 8001d34:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d101      	bne.n	8001d48 <HAL_ETH_DMATxDescListInit+0x20>
 8001d44:	2302      	movs	r3, #2
 8001d46:	e052      	b.n	8001dee <HAL_ETH_DMATxDescListInit+0xc6>
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2202      	movs	r2, #2
 8001d54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	68ba      	ldr	r2, [r7, #8]
 8001d5c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0U; i < TxBuffCount; i++)
 8001d5e:	2300      	movs	r3, #0
 8001d60:	617b      	str	r3, [r7, #20]
 8001d62:	e030      	b.n	8001dc6 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	015b      	lsls	r3, r3, #5
 8001d68:	68ba      	ldr	r2, [r7, #8]
 8001d6a:	4413      	add	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]

    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001d74:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i * ETH_TX_BUF_SIZE]);
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001d7c:	fb02 f303 	mul.w	r3, r2, r3
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	4413      	add	r3, r2
 8001d84:	461a      	mov	r2, r3
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	609a      	str	r2, [r3, #8]

    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d105      	bne.n	8001d9e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	601a      	str	r2, [r3, #0]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (TxBuffCount - 1))
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	3b01      	subs	r3, #1
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d208      	bcs.n	8001dba <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab + i + 1);
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	3301      	adds	r3, #1
 8001dac:	015b      	lsls	r3, r3, #5
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	4413      	add	r3, r2
 8001db2:	461a      	mov	r2, r3
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	60da      	str	r2, [r3, #12]
 8001db8:	e002      	b.n	8001dc0 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;
 8001dba:	68ba      	ldr	r2, [r7, #8]
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < TxBuffCount; i++)
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	617b      	str	r3, [r7, #20]
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d3ca      	bcc.n	8001d64 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }

  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68ba      	ldr	r2, [r7, #8]
 8001dd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dd8:	3310      	adds	r3, #16
 8001dda:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	371c      	adds	r7, #28
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr

08001df8 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b087      	sub	sp, #28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	60b9      	str	r1, [r7, #8]
 8001e02:	607a      	str	r2, [r7, #4]
 8001e04:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001e06:	2300      	movs	r3, #0
 8001e08:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d101      	bne.n	8001e18 <HAL_ETH_DMARxDescListInit+0x20>
 8001e14:	2302      	movs	r3, #2
 8001e16:	e056      	b.n	8001ec6 <HAL_ETH_DMARxDescListInit+0xce>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2202      	movs	r2, #2
 8001e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	68ba      	ldr	r2, [r7, #8]
 8001e2c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Fill each DMARxDesc descriptor with the right values */
  for (i = 0U; i < RxBuffCount; i++)
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]
 8001e32:	e034      	b.n	8001e9e <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab + i;
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	015b      	lsls	r3, r3, #5
 8001e38:	68ba      	ldr	r2, [r7, #8]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	613b      	str	r3, [r7, #16]

    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001e44:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001e4c:	605a      	str	r2, [r3, #4]

    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i * ETH_RX_BUF_SIZE]);
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001e54:	fb02 f303 	mul.w	r3, r2, r3
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	461a      	mov	r2, r3
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	609a      	str	r2, [r3, #8]

    if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d105      	bne.n	8001e76 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	605a      	str	r2, [r3, #4]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (RxBuffCount - 1U))
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	697a      	ldr	r2, [r7, #20]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d208      	bcs.n	8001e92 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab + i + 1U);
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	3301      	adds	r3, #1
 8001e84:	015b      	lsls	r3, r3, #5
 8001e86:	68ba      	ldr	r2, [r7, #8]
 8001e88:	4413      	add	r3, r2
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	60da      	str	r2, [r3, #12]
 8001e90:	e002      	b.n	8001e98 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab);
 8001e92:	68ba      	ldr	r2, [r7, #8]
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < RxBuffCount; i++)
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	617b      	str	r3, [r7, #20]
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d3c6      	bcc.n	8001e34 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }

  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68ba      	ldr	r2, [r7, #8]
 8001eac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eb0:	330c      	adds	r3, #12
 8001eb2:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	371c      	adds	r7, #28
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bc80      	pop	{r7}
 8001ece:	4770      	bx	lr

08001ed0 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d101      	bne.n	8001eea <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	e074      	b.n	8001fd4 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001efa:	e05a      	b.n	8001fb2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	3301      	adds	r3, #1
 8001f00:	60fb      	str	r3, [r7, #12]

    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */
    if ((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f10:	d10d      	bne.n	8001f2e <HAL_ETH_GetReceivedFrame_IT+0x5e>
    {
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	461a      	mov	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	629a      	str	r2, [r3, #40]	; 0x28
 8001f2c:	e041      	b.n	8001fb2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d10b      	bne.n	8001f54 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f40:	1c5a      	adds	r2, r3, #1
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	629a      	str	r2, [r3, #40]	; 0x28
 8001f52:	e02e      	b.n	8001fb2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    {
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f60:	1c5a      	adds	r2, r3, #1
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	639a      	str	r2, [r3, #56]	; 0x38

      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d103      	bne.n	8001f76 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	0c1b      	lsrs	r3, r3, #16
 8001f7e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001f82:	1f1a      	subs	r2, r3, #4
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8c:	689a      	ldr	r2, [r3, #8]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	641a      	str	r2, [r3, #64]	; 0x40

      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Return function status */
      return HAL_OK;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	e010      	b.n	8001fd4 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	db02      	blt.n	8001fc2 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	2b03      	cmp	r3, #3
 8001fc0:	d99c      	bls.n	8001efc <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bc80      	pop	{r7}
 8001fdc:	4770      	bx	lr

08001fde <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fee:	3314      	adds	r3, #20
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff6:	2b40      	cmp	r3, #64	; 0x40
 8001ff8:	d112      	bne.n	8002020 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f001 ffec 	bl	8003fd8 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002008:	3314      	adds	r3, #20
 800200a:	2240      	movs	r2, #64	; 0x40
 800200c:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800201e:	e01b      	b.n	8002058 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002028:	3314      	adds	r3, #20
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	2b01      	cmp	r3, #1
 8002032:	d111      	bne.n	8002058 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 f839 	bl	80020ac <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002042:	3314      	adds	r3, #20
 8002044:	2201      	movs	r2, #1
 8002046:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2201      	movs	r2, #1
 800204c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002060:	3314      	adds	r3, #20
 8002062:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002066:	601a      	str	r2, [r3, #0]

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002070:	3314      	adds	r3, #20
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002078:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800207c:	d112      	bne.n	80020a4 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f81d 	bl	80020be <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800208c:	3314      	adds	r3, #20
 800208e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002092:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 80020a4:	bf00      	nop
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bc80      	pop	{r7}
 80020bc:	4770      	bx	lr

080020be <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80020be:	b480      	push	{r7}
 80020c0:	b083      	sub	sp, #12
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr

080020d0 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param  RegValue PHY register value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	460b      	mov	r3, r1
 80020da:	607a      	str	r2, [r7, #4]
 80020dc:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80020de:	2300      	movs	r3, #0
 80020e0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b82      	cmp	r3, #130	; 0x82
 80020f0:	d101      	bne.n	80020f6 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80020f2:	2302      	movs	r3, #2
 80020f4:	e050      	b.n	8002198 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2282      	movs	r2, #130	; 0x82
 80020fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	f003 031c 	and.w	r3, r3, #28
 800210c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	8a1b      	ldrh	r3, [r3, #16]
 8002112:	02db      	lsls	r3, r3, #11
 8002114:	b29b      	uxth	r3, r3
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	4313      	orrs	r3, r2
 800211a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800211c:	897b      	ldrh	r3, [r7, #10]
 800211e:	019b      	lsls	r3, r3, #6
 8002120:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002124:	697a      	ldr	r2, [r7, #20]
 8002126:	4313      	orrs	r3, r2
 8002128:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	f023 0302 	bic.w	r3, r3, #2
 8002130:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	697a      	ldr	r2, [r7, #20]
 8002140:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002142:	f7ff fb57 	bl	80017f4 <HAL_GetTick>
 8002146:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002148:	e015      	b.n	8002176 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 800214a:	f7ff fb53 	bl	80017f4 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002158:	d309      	bcc.n	800216e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State = HAL_ETH_STATE_READY;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2201      	movs	r2, #1
 800215e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e014      	b.n	8002198 <HAL_ETH_ReadPHYRegister+0xc8>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1e4      	bne.n	800214a <HAL_ETH_ReadPHYRegister+0x7a>
  }

  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	b29b      	uxth	r3, r3
 8002188:	461a      	mov	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3718      	adds	r7, #24
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	460b      	mov	r3, r1
 80021aa:	607a      	str	r2, [r7, #4]
 80021ac:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80021b2:	2300      	movs	r3, #0
 80021b4:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b42      	cmp	r3, #66	; 0x42
 80021c0:	d101      	bne.n	80021c6 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80021c2:	2302      	movs	r3, #2
 80021c4:	e04e      	b.n	8002264 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2242      	movs	r2, #66	; 0x42
 80021ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	f003 031c 	and.w	r3, r3, #28
 80021dc:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	8a1b      	ldrh	r3, [r3, #16]
 80021e2:	02db      	lsls	r3, r3, #11
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80021ec:	897b      	ldrh	r3, [r7, #10]
 80021ee:	019b      	lsls	r3, r3, #6
 80021f0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80021f4:	697a      	ldr	r2, [r7, #20]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	f043 0302 	orr.w	r3, r3, #2
 8002200:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	b29a      	uxth	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800221c:	f7ff faea 	bl	80017f4 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002222:	e015      	b.n	8002250 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002224:	f7ff fae6 	bl	80017f4 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002232:	d309      	bcc.n	8002248 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State = HAL_ETH_STATE_READY;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e00d      	b.n	8002264 <HAL_ETH_WritePHYRegister+0xc4>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1e4      	bne.n	8002224 <HAL_ETH_WritePHYRegister+0x84>
  }

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	4618      	mov	r0, r3
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <HAL_ETH_Start>:
 * @param  heth pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800227a:	2b01      	cmp	r3, #1
 800227c:	d101      	bne.n	8002282 <HAL_ETH_Start+0x16>
 800227e:	2302      	movs	r3, #2
 8002280:	e01f      	b.n	80022c2 <HAL_ETH_Start+0x56>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2201      	movs	r2, #1
 8002286:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2202      	movs	r2, #2
 800228e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 fa1a 	bl	80026cc <ETH_MACTransmissionEnable>

  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f000 fa34 	bl	8002706 <ETH_MACReceptionEnable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 fa7c 	bl	800279c <ETH_FlushTransmitFIFO>

  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f000 fa4b 	bl	8002740 <ETH_DMATransmissionEnable>

  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 fa5f 	bl	800276e <ETH_DMAReceptionEnable>

  /* Set the ETH state to READY*/
  heth->State = HAL_ETH_STATE_READY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
	...

080022cc <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b0b0      	sub	sp, #192	; 0xc0
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80022d6:	2300      	movs	r3, #0
 80022d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d007      	beq.n	80022f2 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022e8:	60da      	str	r2, [r3, #12]

    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022f0:	609a      	str	r2, [r3, #8]
  }

  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80022f2:	2300      	movs	r3, #0
 80022f4:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80022f6:	2300      	movs	r3, #0
 80022f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80022fa:	2300      	movs	r3, #0
 80022fc:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80022fe:	2300      	movs	r3, #0
 8002300:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002302:	2300      	movs	r3, #0
 8002304:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002306:	2300      	movs	r3, #0
 8002308:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d103      	bne.n	800231a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002316:	663b      	str	r3, [r7, #96]	; 0x60
 8002318:	e001      	b.n	800231e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800231a:	2300      	movs	r3, #0
 800231c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800231e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002322:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002324:	2300      	movs	r3, #0
 8002326:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002328:	2300      	movs	r3, #0
 800232a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800232c:	2300      	movs	r3, #0
 800232e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002330:	2300      	movs	r3, #0
 8002332:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002334:	2300      	movs	r3, #0
 8002336:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002338:	2340      	movs	r3, #64	; 0x40
 800233a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800233c:	2300      	movs	r3, #0
 800233e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002342:	2300      	movs	r3, #0
 8002344:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002348:	2300      	movs	r3, #0
 800234a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800234e:	2300      	movs	r3, #0
 8002350:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002354:	2300      	movs	r3, #0
 8002356:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800235a:	2300      	movs	r3, #0
 800235c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8002360:	2300      	movs	r3, #0
 8002362:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8002366:	2300      	movs	r3, #0
 8002368:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800236c:	2380      	movs	r3, #128	; 0x80
 800236e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002372:	2300      	movs	r3, #0
 8002374:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002378:	2300      	movs	r3, #0
 800237a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800237e:	2300      	movs	r3, #0
 8002380:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002384:	2300      	movs	r3, #0
 8002386:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800238a:	2300      	movs	r3, #0
 800238c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8002390:	2300      	movs	r3, #0
 8002392:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80023a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023a4:	4bac      	ldr	r3, [pc, #688]	; (8002658 <ETH_MACDMAConfig+0x38c>)
 80023a6:	4013      	ands	r3, r2
 80023a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 80023ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
                        macinit.Jabber |
 80023ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 80023b0:	431a      	orrs	r2, r3
                        macinit.InterFrameGap |
 80023b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                        macinit.Jabber |
 80023b4:	431a      	orrs	r2, r3
                        macinit.CarrierSense |
 80023b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                        macinit.InterFrameGap |
 80023b8:	431a      	orrs	r2, r3
                        (heth->Init).Speed |
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	689b      	ldr	r3, [r3, #8]
                        macinit.CarrierSense |
 80023be:	431a      	orrs	r2, r3
                        macinit.ReceiveOwn |
 80023c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                        (heth->Init).Speed |
 80023c2:	431a      	orrs	r2, r3
                        macinit.LoopbackMode |
 80023c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                        macinit.ReceiveOwn |
 80023c6:	431a      	orrs	r2, r3
                        (heth->Init).DuplexMode |
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
                        macinit.LoopbackMode |
 80023cc:	431a      	orrs	r2, r3
                        macinit.ChecksumOffload |
 80023ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                        (heth->Init).DuplexMode |
 80023d0:	431a      	orrs	r2, r3
                        macinit.RetryTransmission |
 80023d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                        macinit.ChecksumOffload |
 80023d4:	431a      	orrs	r2, r3
                        macinit.AutomaticPadCRCStrip |
 80023d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                        macinit.RetryTransmission |
 80023d8:	431a      	orrs	r2, r3
                        macinit.BackOffLimit |
 80023da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                        macinit.AutomaticPadCRCStrip |
 80023dc:	431a      	orrs	r2, r3
                        macinit.DeferralCheck);
 80023de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                        macinit.BackOffLimit |
 80023e0:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 80023e2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023e6:	4313      	orrs	r3, r2
 80023e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023f4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002400:	2001      	movs	r0, #1
 8002402:	f7ff fa01 	bl	8001808 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800240e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8002410:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002412:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8002414:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002416:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002418:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception |
 800241a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800241e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002420:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception |
 8002424:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002426:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800242a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800242c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002430:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002434:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800243c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 800243e:	605a      	str	r2, [r3, #4]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800244a:	2001      	movs	r0, #1
 800244c:	f7ff f9dc 	bl	8001808 <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002458:	605a      	str	r2, [r3, #4]

  /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
  /* Write to ETHERNET MACHTHR */
  (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002462:	609a      	str	r2, [r3, #8]

  /* Write to ETHERNET MACHTLR */
  (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800246c:	60da      	str	r2, [r3, #12]
  /*----------------------- ETHERNET MACFCR Configuration -------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002478:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800247c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002480:	4013      	ands	r3, r2
 8002482:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
  /* Set the PLT bit according to ETH PauseLowThreshold value */
  /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
  /* Set the RFE bit according to ETH ReceiveFlowControl value */
  /* Set the TFE bit according to ETH TransmitFlowControl value */
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8002486:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800248a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800248c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8002490:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002492:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002496:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect |
 8002498:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800249c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800249e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect |
 80024a2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl);
 80024a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80024a8:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 80024aa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024ae:	4313      	orrs	r3, r2
 80024b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024bc:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024c8:	2001      	movs	r0, #1
 80024ca:	f7ff f99d 	bl	8001808 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024d6:	619a      	str	r2, [r3, #24]

  /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
  /* Set the ETV bit according to ETH VLANTagComparison value */
  /* Set the VL bit according to ETH VLANTagIdentifier value */
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 80024d8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                           macinit.VLANTagIdentifier);
 80024dc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	430a      	orrs	r2, r1
 80024e6:	61da      	str	r2, [r3, #28]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACVLANTR;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80024f2:	2001      	movs	r0, #1
 80024f4:	f7ff f988 	bl	8001808 <HAL_Delay>
  (heth->Instance)->MACVLANTR = tmpreg1;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002500:	61da      	str	r2, [r3, #28]

  /* Ethernet DMA default initialization ************************************/
  dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002502:	2300      	movs	r3, #0
 8002504:	60bb      	str	r3, [r7, #8]
  dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002506:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800250a:	60fb      	str	r3, [r7, #12]
  dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800250c:	2300      	movs	r3, #0
 800250e:	613b      	str	r3, [r7, #16]
  dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;
 8002510:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002514:	617b      	str	r3, [r7, #20]
  dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002516:	2300      	movs	r3, #0
 8002518:	61bb      	str	r3, [r7, #24]
  dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800251a:	2300      	movs	r3, #0
 800251c:	61fb      	str	r3, [r7, #28]
  dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800251e:	2300      	movs	r3, #0
 8002520:	623b      	str	r3, [r7, #32]
  dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002522:	2300      	movs	r3, #0
 8002524:	627b      	str	r3, [r7, #36]	; 0x24
  dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002526:	2304      	movs	r3, #4
 8002528:	62bb      	str	r3, [r7, #40]	; 0x28
  dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800252a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800252e:	62fb      	str	r3, [r7, #44]	; 0x2c
  dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002530:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002534:	633b      	str	r3, [r7, #48]	; 0x30
  dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002536:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800253a:	637b      	str	r3, [r7, #52]	; 0x34
  dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800253c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002540:	63bb      	str	r3, [r7, #56]	; 0x38
  dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002542:	2380      	movs	r3, #128	; 0x80
 8002544:	63fb      	str	r3, [r7, #60]	; 0x3c
  dmainit.DescriptorSkipLength = 0x0U;
 8002546:	2300      	movs	r3, #0
 8002548:	643b      	str	r3, [r7, #64]	; 0x40
  dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800254a:	2300      	movs	r3, #0
 800254c:	647b      	str	r3, [r7, #68]	; 0x44

  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002556:	3318      	adds	r3, #24
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800255e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002562:	4b3e      	ldr	r3, [pc, #248]	; (800265c <ETH_MACDMAConfig+0x390>)
 8002564:	4013      	ands	r3, r2
 8002566:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the TTC bit according to ETH TransmitThresholdControl value */
  /* Set the FEF bit according to ETH ForwardErrorFrames value */
  /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
  /* Set the RTC bit according to ETH ReceiveThresholdControl value */
  /* Set the OSF bit according to ETH SecondFrameOperate value */
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 800256a:	68ba      	ldr	r2, [r7, #8]
                        dmainit.ReceiveStoreForward |
 800256c:	68fb      	ldr	r3, [r7, #12]
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 800256e:	431a      	orrs	r2, r3
                        dmainit.FlushReceivedFrame |
 8002570:	693b      	ldr	r3, [r7, #16]
                        dmainit.ReceiveStoreForward |
 8002572:	431a      	orrs	r2, r3
                        dmainit.TransmitStoreForward |
 8002574:	697b      	ldr	r3, [r7, #20]
                        dmainit.FlushReceivedFrame |
 8002576:	431a      	orrs	r2, r3
                        dmainit.TransmitThresholdControl |
 8002578:	69bb      	ldr	r3, [r7, #24]
                        dmainit.TransmitStoreForward |
 800257a:	431a      	orrs	r2, r3
                        dmainit.ForwardErrorFrames |
 800257c:	69fb      	ldr	r3, [r7, #28]
                        dmainit.TransmitThresholdControl |
 800257e:	431a      	orrs	r2, r3
                        dmainit.ForwardUndersizedGoodFrames |
 8002580:	6a3b      	ldr	r3, [r7, #32]
                        dmainit.ForwardErrorFrames |
 8002582:	431a      	orrs	r2, r3
                        dmainit.ReceiveThresholdControl |
 8002584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                        dmainit.ForwardUndersizedGoodFrames |
 8002586:	431a      	orrs	r2, r3
                        dmainit.SecondFrameOperate);
 8002588:	6abb      	ldr	r3, [r7, #40]	; 0x28
                        dmainit.ReceiveThresholdControl |
 800258a:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 800258c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002590:	4313      	orrs	r3, r2
 8002592:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800259e:	3318      	adds	r3, #24
 80025a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80025a4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025ae:	3318      	adds	r3, #24
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025b6:	2001      	movs	r0, #1
 80025b8:	f7ff f926 	bl	8001808 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025c4:	3318      	adds	r3, #24
 80025c6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80025ca:	601a      	str	r2, [r3, #0]
  /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
  /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
  /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
  /* Set the DSL bit according to ETH DesciptorSkipLength value */
  /* Set the PR and DA bits according to ETH DMAArbitration value */
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80025cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                        dmainit.FixedBurst |
 80025ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80025d0:	431a      	orrs	r2, r3
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80025d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                        dmainit.FixedBurst |
 80025d4:	431a      	orrs	r2, r3
                                        dmainit.TxDMABurstLength |
 80025d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80025d8:	431a      	orrs	r2, r3
                                        dmainit.EnhancedDescriptorFormat |
 80025da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                        dmainit.TxDMABurstLength |
 80025dc:	431a      	orrs	r2, r3
                                        (dmainit.DescriptorSkipLength << 2U) |
 80025de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025e0:	009b      	lsls	r3, r3, #2
                                        dmainit.EnhancedDescriptorFormat |
 80025e2:	431a      	orrs	r2, r3
                                        dmainit.DMAArbitration |
 80025e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                        (dmainit.DescriptorSkipLength << 2U) |
 80025e6:	431a      	orrs	r2, r3
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80025f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025f4:	601a      	str	r2, [r3, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002604:	2001      	movs	r0, #1
 8002606:	f7ff f8ff 	bl	8001808 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002612:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002616:	601a      	str	r2, [r3, #0]

  if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	699b      	ldr	r3, [r3, #24]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d10f      	bne.n	8002640 <ETH_MACDMAConfig+0x374>
  {
    /* Enable the Ethernet Rx Interrupt */
    __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002628:	331c      	adds	r3, #28
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002634:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002638:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800263c:	331c      	adds	r3, #28
 800263e:	601a      	str	r2, [r3, #0]
  }

  /* Initialize MAC address in ethernet MAC */
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	695b      	ldr	r3, [r3, #20]
 8002644:	461a      	mov	r2, r3
 8002646:	2100      	movs	r1, #0
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 f809 	bl	8002660 <ETH_MACAddressConfig>
}
 800264e:	bf00      	nop
 8002650:	37c0      	adds	r7, #192	; 0xc0
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	ff20810f 	.word	0xff20810f
 800265c:	f8de3f23 	.word	0xf8de3f23

08002660 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002660:	b480      	push	{r7}
 8002662:	b087      	sub	sp, #28
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3305      	adds	r3, #5
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	021b      	lsls	r3, r3, #8
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	3204      	adds	r2, #4
 8002678:	7812      	ldrb	r2, [r2, #0]
 800267a:	4313      	orrs	r3, r2
 800267c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800267e:	68ba      	ldr	r2, [r7, #8]
 8002680:	4b10      	ldr	r3, [pc, #64]	; (80026c4 <ETH_MACAddressConfig+0x64>)
 8002682:	4413      	add	r3, r2
 8002684:	461a      	mov	r2, r3
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	3303      	adds	r3, #3
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	061a      	lsls	r2, r3, #24
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	3302      	adds	r3, #2
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	041b      	lsls	r3, r3, #16
 800269a:	431a      	orrs	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3301      	adds	r3, #1
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	021b      	lsls	r3, r3, #8
 80026a4:	4313      	orrs	r3, r2
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	7812      	ldrb	r2, [r2, #0]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80026ae:	68ba      	ldr	r2, [r7, #8]
 80026b0:	4b05      	ldr	r3, [pc, #20]	; (80026c8 <ETH_MACAddressConfig+0x68>)
 80026b2:	4413      	add	r3, r2
 80026b4:	461a      	mov	r2, r3
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	6013      	str	r3, [r2, #0]
}
 80026ba:	bf00      	nop
 80026bc:	371c      	adds	r7, #28
 80026be:	46bd      	mov	sp, r7
 80026c0:	bc80      	pop	{r7}
 80026c2:	4770      	bx	lr
 80026c4:	40028040 	.word	0x40028040
 80026c8:	40028044 	.word	0x40028044

080026cc <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80026d4:	2300      	movs	r3, #0
 80026d6:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f042 0208 	orr.w	r2, r2, #8
 80026e6:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80026f0:	2001      	movs	r0, #1
 80026f2:	f000 f87d 	bl	80027f0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	601a      	str	r2, [r3, #0]
}
 80026fe:	bf00      	nop
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b084      	sub	sp, #16
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800270e:	2300      	movs	r3, #0
 8002710:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f042 0204 	orr.w	r2, r2, #4
 8002720:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800272a:	2001      	movs	r0, #1
 800272c:	f000 f860 	bl	80027f0 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	601a      	str	r2, [r3, #0]
}
 8002738:	bf00      	nop
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002750:	3318      	adds	r3, #24
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800275c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002760:	3318      	adds	r3, #24
 8002762:	601a      	str	r2, [r3, #0]
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr

0800276e <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800277e:	3318      	adds	r3, #24
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f042 0202 	orr.w	r2, r2, #2
 800278a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800278e:	3318      	adds	r3, #24
 8002790:	601a      	str	r2, [r3, #0]
}
 8002792:	bf00      	nop
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	bc80      	pop	{r7}
 800279a:	4770      	bx	lr

0800279c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80027a4:	2300      	movs	r3, #0
 80027a6:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027b0:	3318      	adds	r3, #24
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80027bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027c0:	3318      	adds	r3, #24
 80027c2:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027cc:	3318      	adds	r3, #24
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80027d2:	2001      	movs	r0, #1
 80027d4:	f000 f80c 	bl	80027f0 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027e2:	3318      	adds	r3, #24
 80027e4:	601a      	str	r2, [r3, #0]
}
 80027e6:	bf00      	nop
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
	...

080027f0 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b085      	sub	sp, #20
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027f8:	4b0a      	ldr	r3, [pc, #40]	; (8002824 <ETH_Delay+0x34>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a0a      	ldr	r2, [pc, #40]	; (8002828 <ETH_Delay+0x38>)
 80027fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002802:	0a5b      	lsrs	r3, r3, #9
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	fb02 f303 	mul.w	r3, r2, r3
 800280a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800280c:	bf00      	nop
  }
  while (Delay --);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	1e5a      	subs	r2, r3, #1
 8002812:	60fa      	str	r2, [r7, #12]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1f9      	bne.n	800280c <ETH_Delay+0x1c>
}
 8002818:	bf00      	nop
 800281a:	3714      	adds	r7, #20
 800281c:	46bd      	mov	sp, r7
 800281e:	bc80      	pop	{r7}
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	20000000 	.word	0x20000000
 8002828:	10624dd3 	.word	0x10624dd3

0800282c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800282c:	b480      	push	{r7}
 800282e:	b087      	sub	sp, #28
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002836:	2300      	movs	r3, #0
 8002838:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800283a:	e16f      	b.n	8002b1c <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	2101      	movs	r1, #1
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	fa01 f303 	lsl.w	r3, r1, r3
 8002848:	4013      	ands	r3, r2
 800284a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 8161 	beq.w	8002b16 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d00b      	beq.n	8002874 <HAL_GPIO_Init+0x48>
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	2b02      	cmp	r3, #2
 8002862:	d007      	beq.n	8002874 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002868:	2b11      	cmp	r3, #17
 800286a:	d003      	beq.n	8002874 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	2b12      	cmp	r3, #18
 8002872:	d130      	bne.n	80028d6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	2203      	movs	r2, #3
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	43db      	mvns	r3, r3
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	4013      	ands	r3, r2
 800288a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	68da      	ldr	r2, [r3, #12]
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	4313      	orrs	r3, r2
 800289c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028aa:	2201      	movs	r2, #1
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	43db      	mvns	r3, r3
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	4013      	ands	r3, r2
 80028b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	091b      	lsrs	r3, r3, #4
 80028c0:	f003 0201 	and.w	r2, r3, #1
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	2203      	movs	r2, #3
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	43db      	mvns	r3, r3
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	4013      	ands	r3, r2
 80028ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	689a      	ldr	r2, [r3, #8]
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	60da      	str	r2, [r3, #12]

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	2b02      	cmp	r3, #2
 800290c:	d003      	beq.n	8002916 <HAL_GPIO_Init+0xea>
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2b12      	cmp	r3, #18
 8002914:	d123      	bne.n	800295e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	08da      	lsrs	r2, r3, #3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	3208      	adds	r2, #8
 800291e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002922:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	f003 0307 	and.w	r3, r3, #7
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	220f      	movs	r2, #15
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	43db      	mvns	r3, r3
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	4013      	ands	r3, r2
 8002938:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	691a      	ldr	r2, [r3, #16]
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	fa02 f303 	lsl.w	r3, r2, r3
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	4313      	orrs	r3, r2
 800294e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	08da      	lsrs	r2, r3, #3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3208      	adds	r2, #8
 8002958:	6939      	ldr	r1, [r7, #16]
 800295a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	2203      	movs	r2, #3
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	43db      	mvns	r3, r3
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	4013      	ands	r3, r2
 8002974:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f003 0203 	and.w	r2, r3, #3
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	693a      	ldr	r2, [r7, #16]
 8002988:	4313      	orrs	r3, r2
 800298a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	f000 80bb 	beq.w	8002b16 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029a0:	2300      	movs	r3, #0
 80029a2:	60bb      	str	r3, [r7, #8]
 80029a4:	4b64      	ldr	r3, [pc, #400]	; (8002b38 <HAL_GPIO_Init+0x30c>)
 80029a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a8:	4a63      	ldr	r2, [pc, #396]	; (8002b38 <HAL_GPIO_Init+0x30c>)
 80029aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029ae:	6453      	str	r3, [r2, #68]	; 0x44
 80029b0:	4b61      	ldr	r3, [pc, #388]	; (8002b38 <HAL_GPIO_Init+0x30c>)
 80029b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029b8:	60bb      	str	r3, [r7, #8]
 80029ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029bc:	4a5f      	ldr	r2, [pc, #380]	; (8002b3c <HAL_GPIO_Init+0x310>)
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	089b      	lsrs	r3, r3, #2
 80029c2:	3302      	adds	r3, #2
 80029c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	f003 0303 	and.w	r3, r3, #3
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	220f      	movs	r2, #15
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	43db      	mvns	r3, r3
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	4013      	ands	r3, r2
 80029de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a57      	ldr	r2, [pc, #348]	; (8002b40 <HAL_GPIO_Init+0x314>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d031      	beq.n	8002a4c <HAL_GPIO_Init+0x220>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a56      	ldr	r2, [pc, #344]	; (8002b44 <HAL_GPIO_Init+0x318>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d02b      	beq.n	8002a48 <HAL_GPIO_Init+0x21c>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a55      	ldr	r2, [pc, #340]	; (8002b48 <HAL_GPIO_Init+0x31c>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d025      	beq.n	8002a44 <HAL_GPIO_Init+0x218>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a54      	ldr	r2, [pc, #336]	; (8002b4c <HAL_GPIO_Init+0x320>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d01f      	beq.n	8002a40 <HAL_GPIO_Init+0x214>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a53      	ldr	r2, [pc, #332]	; (8002b50 <HAL_GPIO_Init+0x324>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d019      	beq.n	8002a3c <HAL_GPIO_Init+0x210>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a52      	ldr	r2, [pc, #328]	; (8002b54 <HAL_GPIO_Init+0x328>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d013      	beq.n	8002a38 <HAL_GPIO_Init+0x20c>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a51      	ldr	r2, [pc, #324]	; (8002b58 <HAL_GPIO_Init+0x32c>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d00d      	beq.n	8002a34 <HAL_GPIO_Init+0x208>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a50      	ldr	r2, [pc, #320]	; (8002b5c <HAL_GPIO_Init+0x330>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d007      	beq.n	8002a30 <HAL_GPIO_Init+0x204>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a4f      	ldr	r2, [pc, #316]	; (8002b60 <HAL_GPIO_Init+0x334>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d101      	bne.n	8002a2c <HAL_GPIO_Init+0x200>
 8002a28:	2308      	movs	r3, #8
 8002a2a:	e010      	b.n	8002a4e <HAL_GPIO_Init+0x222>
 8002a2c:	2309      	movs	r3, #9
 8002a2e:	e00e      	b.n	8002a4e <HAL_GPIO_Init+0x222>
 8002a30:	2307      	movs	r3, #7
 8002a32:	e00c      	b.n	8002a4e <HAL_GPIO_Init+0x222>
 8002a34:	2306      	movs	r3, #6
 8002a36:	e00a      	b.n	8002a4e <HAL_GPIO_Init+0x222>
 8002a38:	2305      	movs	r3, #5
 8002a3a:	e008      	b.n	8002a4e <HAL_GPIO_Init+0x222>
 8002a3c:	2304      	movs	r3, #4
 8002a3e:	e006      	b.n	8002a4e <HAL_GPIO_Init+0x222>
 8002a40:	2303      	movs	r3, #3
 8002a42:	e004      	b.n	8002a4e <HAL_GPIO_Init+0x222>
 8002a44:	2302      	movs	r3, #2
 8002a46:	e002      	b.n	8002a4e <HAL_GPIO_Init+0x222>
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e000      	b.n	8002a4e <HAL_GPIO_Init+0x222>
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	f002 0203 	and.w	r2, r2, #3
 8002a54:	0092      	lsls	r2, r2, #2
 8002a56:	4093      	lsls	r3, r2
 8002a58:	461a      	mov	r2, r3
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a60:	4936      	ldr	r1, [pc, #216]	; (8002b3c <HAL_GPIO_Init+0x310>)
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	089b      	lsrs	r3, r3, #2
 8002a66:	3302      	adds	r3, #2
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a6e:	4b3d      	ldr	r3, [pc, #244]	; (8002b64 <HAL_GPIO_Init+0x338>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	43db      	mvns	r3, r3
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d003      	beq.n	8002a92 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a92:	4a34      	ldr	r2, [pc, #208]	; (8002b64 <HAL_GPIO_Init+0x338>)
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a98:	4b32      	ldr	r3, [pc, #200]	; (8002b64 <HAL_GPIO_Init+0x338>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d003      	beq.n	8002abc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002abc:	4a29      	ldr	r2, [pc, #164]	; (8002b64 <HAL_GPIO_Init+0x338>)
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ac2:	4b28      	ldr	r3, [pc, #160]	; (8002b64 <HAL_GPIO_Init+0x338>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	43db      	mvns	r3, r3
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002ae6:	4a1f      	ldr	r2, [pc, #124]	; (8002b64 <HAL_GPIO_Init+0x338>)
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002aec:	4b1d      	ldr	r3, [pc, #116]	; (8002b64 <HAL_GPIO_Init+0x338>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	43db      	mvns	r3, r3
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	4013      	ands	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d003      	beq.n	8002b10 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002b10:	4a14      	ldr	r2, [pc, #80]	; (8002b64 <HAL_GPIO_Init+0x338>)
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	fa22 f303 	lsr.w	r3, r2, r3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f47f ae88 	bne.w	800283c <HAL_GPIO_Init+0x10>
  }
}
 8002b2c:	bf00      	nop
 8002b2e:	371c      	adds	r7, #28
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bc80      	pop	{r7}
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	40013800 	.word	0x40013800
 8002b40:	40020000 	.word	0x40020000
 8002b44:	40020400 	.word	0x40020400
 8002b48:	40020800 	.word	0x40020800
 8002b4c:	40020c00 	.word	0x40020c00
 8002b50:	40021000 	.word	0x40021000
 8002b54:	40021400 	.word	0x40021400
 8002b58:	40021800 	.word	0x40021800
 8002b5c:	40021c00 	.word	0x40021c00
 8002b60:	40022000 	.word	0x40022000
 8002b64:	40013c00 	.word	0x40013c00

08002b68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	460b      	mov	r3, r1
 8002b72:	807b      	strh	r3, [r7, #2]
 8002b74:	4613      	mov	r3, r2
 8002b76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b78:	787b      	ldrb	r3, [r7, #1]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d003      	beq.n	8002b86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b7e:	887a      	ldrh	r2, [r7, #2]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b84:	e003      	b.n	8002b8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b86:	887b      	ldrh	r3, [r7, #2]
 8002b88:	041a      	lsls	r2, r3, #16
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	619a      	str	r2, [r3, #24]
}
 8002b8e:	bf00      	nop
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr

08002b98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002ba2:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ba4:	695a      	ldr	r2, [r3, #20]
 8002ba6:	88fb      	ldrh	r3, [r7, #6]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d006      	beq.n	8002bbc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002bae:	4a05      	ldr	r2, [pc, #20]	; (8002bc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002bb0:	88fb      	ldrh	r3, [r7, #6]
 8002bb2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002bb4:	88fb      	ldrh	r3, [r7, #6]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f000 f806 	bl	8002bc8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002bbc:	bf00      	nop
 8002bbe:	3708      	adds	r7, #8
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40013c00 	.word	0x40013c00

08002bc8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	4603      	mov	r3, r0
 8002bd0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002bd2:	bf00      	nop
 8002bd4:	370c      	adds	r7, #12
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bc80      	pop	{r7}
 8002bda:	4770      	bx	lr

08002bdc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b08a      	sub	sp, #40	; 0x28
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e237      	b.n	800305e <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d050      	beq.n	8002c9c <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bfa:	4ba3      	ldr	r3, [pc, #652]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 030c 	and.w	r3, r3, #12
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	d00c      	beq.n	8002c20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c06:	4ba0      	ldr	r3, [pc, #640]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c0e:	2b08      	cmp	r3, #8
 8002c10:	d112      	bne.n	8002c38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c12:	4b9d      	ldr	r3, [pc, #628]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c1e:	d10b      	bne.n	8002c38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c20:	4b99      	ldr	r3, [pc, #612]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d036      	beq.n	8002c9a <HAL_RCC_OscConfig+0xbe>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d132      	bne.n	8002c9a <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e212      	b.n	800305e <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685a      	ldr	r2, [r3, #4]
 8002c3c:	4b93      	ldr	r3, [pc, #588]	; (8002e8c <HAL_RCC_OscConfig+0x2b0>)
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d013      	beq.n	8002c72 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c4a:	f7fe fdd3 	bl	80017f4 <HAL_GetTick>
 8002c4e:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c50:	e008      	b.n	8002c64 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c52:	f7fe fdcf 	bl	80017f4 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	6a3b      	ldr	r3, [r7, #32]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b64      	cmp	r3, #100	; 0x64
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e1fc      	b.n	800305e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c64:	4b88      	ldr	r3, [pc, #544]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0f0      	beq.n	8002c52 <HAL_RCC_OscConfig+0x76>
 8002c70:	e014      	b.n	8002c9c <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c72:	f7fe fdbf 	bl	80017f4 <HAL_GetTick>
 8002c76:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c78:	e008      	b.n	8002c8c <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c7a:	f7fe fdbb 	bl	80017f4 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	6a3b      	ldr	r3, [r7, #32]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	2b64      	cmp	r3, #100	; 0x64
 8002c86:	d901      	bls.n	8002c8c <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e1e8      	b.n	800305e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c8c:	4b7e      	ldr	r3, [pc, #504]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1f0      	bne.n	8002c7a <HAL_RCC_OscConfig+0x9e>
 8002c98:	e000      	b.n	8002c9c <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c9a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d077      	beq.n	8002d98 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ca8:	4b77      	ldr	r3, [pc, #476]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f003 030c 	and.w	r3, r3, #12
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d00b      	beq.n	8002ccc <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cb4:	4b74      	ldr	r3, [pc, #464]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cbc:	2b08      	cmp	r3, #8
 8002cbe:	d126      	bne.n	8002d0e <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cc0:	4b71      	ldr	r3, [pc, #452]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d120      	bne.n	8002d0e <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ccc:	4b6e      	ldr	r3, [pc, #440]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d005      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x108>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d001      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e1bc      	b.n	800305e <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce4:	4b68      	ldr	r3, [pc, #416]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	21f8      	movs	r1, #248	; 0xf8
 8002cf2:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf4:	69b9      	ldr	r1, [r7, #24]
 8002cf6:	fa91 f1a1 	rbit	r1, r1
 8002cfa:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002cfc:	6979      	ldr	r1, [r7, #20]
 8002cfe:	fab1 f181 	clz	r1, r1
 8002d02:	b2c9      	uxtb	r1, r1
 8002d04:	408b      	lsls	r3, r1
 8002d06:	4960      	ldr	r1, [pc, #384]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d0c:	e044      	b.n	8002d98 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d02a      	beq.n	8002d6c <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d16:	4b5e      	ldr	r3, [pc, #376]	; (8002e90 <HAL_RCC_OscConfig+0x2b4>)
 8002d18:	2201      	movs	r2, #1
 8002d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1c:	f7fe fd6a 	bl	80017f4 <HAL_GetTick>
 8002d20:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d24:	f7fe fd66 	bl	80017f4 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	6a3b      	ldr	r3, [r7, #32]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e193      	b.n	800305e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d36:	4b54      	ldr	r3, [pc, #336]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d0f0      	beq.n	8002d24 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d42:	4b51      	ldr	r3, [pc, #324]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	21f8      	movs	r1, #248	; 0xf8
 8002d50:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d52:	6939      	ldr	r1, [r7, #16]
 8002d54:	fa91 f1a1 	rbit	r1, r1
 8002d58:	60f9      	str	r1, [r7, #12]
  return result;
 8002d5a:	68f9      	ldr	r1, [r7, #12]
 8002d5c:	fab1 f181 	clz	r1, r1
 8002d60:	b2c9      	uxtb	r1, r1
 8002d62:	408b      	lsls	r3, r1
 8002d64:	4948      	ldr	r1, [pc, #288]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	600b      	str	r3, [r1, #0]
 8002d6a:	e015      	b.n	8002d98 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d6c:	4b48      	ldr	r3, [pc, #288]	; (8002e90 <HAL_RCC_OscConfig+0x2b4>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d72:	f7fe fd3f 	bl	80017f4 <HAL_GetTick>
 8002d76:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d78:	e008      	b.n	8002d8c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d7a:	f7fe fd3b 	bl	80017f4 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	6a3b      	ldr	r3, [r7, #32]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b02      	cmp	r3, #2
 8002d86:	d901      	bls.n	8002d8c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e168      	b.n	800305e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d8c:	4b3e      	ldr	r3, [pc, #248]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1f0      	bne.n	8002d7a <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0308 	and.w	r3, r3, #8
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d030      	beq.n	8002e06 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d016      	beq.n	8002dda <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dac:	4b39      	ldr	r3, [pc, #228]	; (8002e94 <HAL_RCC_OscConfig+0x2b8>)
 8002dae:	2201      	movs	r2, #1
 8002db0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db2:	f7fe fd1f 	bl	80017f4 <HAL_GetTick>
 8002db6:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002db8:	e008      	b.n	8002dcc <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dba:	f7fe fd1b 	bl	80017f4 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	6a3b      	ldr	r3, [r7, #32]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e148      	b.n	800305e <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dcc:	4b2e      	ldr	r3, [pc, #184]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d0f0      	beq.n	8002dba <HAL_RCC_OscConfig+0x1de>
 8002dd8:	e015      	b.n	8002e06 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dda:	4b2e      	ldr	r3, [pc, #184]	; (8002e94 <HAL_RCC_OscConfig+0x2b8>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de0:	f7fe fd08 	bl	80017f4 <HAL_GetTick>
 8002de4:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002de6:	e008      	b.n	8002dfa <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002de8:	f7fe fd04 	bl	80017f4 <HAL_GetTick>
 8002dec:	4602      	mov	r2, r0
 8002dee:	6a3b      	ldr	r3, [r7, #32]
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e131      	b.n	800305e <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dfa:	4b23      	ldr	r3, [pc, #140]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002dfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1f0      	bne.n	8002de8 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0304 	and.w	r3, r3, #4
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f000 8088 	beq.w	8002f24 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e14:	2300      	movs	r3, #0
 8002e16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e1a:	4b1b      	ldr	r3, [pc, #108]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d110      	bne.n	8002e48 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e26:	2300      	movs	r3, #0
 8002e28:	60bb      	str	r3, [r7, #8]
 8002e2a:	4b17      	ldr	r3, [pc, #92]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	4a16      	ldr	r2, [pc, #88]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e34:	6413      	str	r3, [r2, #64]	; 0x40
 8002e36:	4b14      	ldr	r3, [pc, #80]	; (8002e88 <HAL_RCC_OscConfig+0x2ac>)
 8002e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3e:	60bb      	str	r3, [r7, #8]
 8002e40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e42:	2301      	movs	r3, #1
 8002e44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002e48:	4b13      	ldr	r3, [pc, #76]	; (8002e98 <HAL_RCC_OscConfig+0x2bc>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a12      	ldr	r2, [pc, #72]	; (8002e98 <HAL_RCC_OscConfig+0x2bc>)
 8002e4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e52:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e54:	4b10      	ldr	r3, [pc, #64]	; (8002e98 <HAL_RCC_OscConfig+0x2bc>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d123      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e60:	4b0d      	ldr	r3, [pc, #52]	; (8002e98 <HAL_RCC_OscConfig+0x2bc>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a0c      	ldr	r2, [pc, #48]	; (8002e98 <HAL_RCC_OscConfig+0x2bc>)
 8002e66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e6a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e6c:	f7fe fcc2 	bl	80017f4 <HAL_GetTick>
 8002e70:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e72:	e013      	b.n	8002e9c <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e74:	f7fe fcbe 	bl	80017f4 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	6a3b      	ldr	r3, [r7, #32]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d90c      	bls.n	8002e9c <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e0eb      	b.n	800305e <HAL_RCC_OscConfig+0x482>
 8002e86:	bf00      	nop
 8002e88:	40023800 	.word	0x40023800
 8002e8c:	40023802 	.word	0x40023802
 8002e90:	42470000 	.word	0x42470000
 8002e94:	42470e80 	.word	0x42470e80
 8002e98:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e9c:	4b72      	ldr	r3, [pc, #456]	; (8003068 <HAL_RCC_OscConfig+0x48c>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0e5      	beq.n	8002e74 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	4b6f      	ldr	r3, [pc, #444]	; (800306c <HAL_RCC_OscConfig+0x490>)
 8002eae:	b2d2      	uxtb	r2, r2
 8002eb0:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d015      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eba:	f7fe fc9b 	bl	80017f4 <HAL_GetTick>
 8002ebe:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ec0:	e00a      	b.n	8002ed8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ec2:	f7fe fc97 	bl	80017f4 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	6a3b      	ldr	r3, [r7, #32]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d901      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e0c2      	b.n	800305e <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed8:	4b65      	ldr	r3, [pc, #404]	; (8003070 <HAL_RCC_OscConfig+0x494>)
 8002eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d0ee      	beq.n	8002ec2 <HAL_RCC_OscConfig+0x2e6>
 8002ee4:	e014      	b.n	8002f10 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee6:	f7fe fc85 	bl	80017f4 <HAL_GetTick>
 8002eea:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eec:	e00a      	b.n	8002f04 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eee:	f7fe fc81 	bl	80017f4 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	6a3b      	ldr	r3, [r7, #32]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d901      	bls.n	8002f04 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e0ac      	b.n	800305e <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f04:	4b5a      	ldr	r3, [pc, #360]	; (8003070 <HAL_RCC_OscConfig+0x494>)
 8002f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1ee      	bne.n	8002eee <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d105      	bne.n	8002f24 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f18:	4b55      	ldr	r3, [pc, #340]	; (8003070 <HAL_RCC_OscConfig+0x494>)
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1c:	4a54      	ldr	r2, [pc, #336]	; (8003070 <HAL_RCC_OscConfig+0x494>)
 8002f1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f000 8097 	beq.w	800305c <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f2e:	4b50      	ldr	r3, [pc, #320]	; (8003070 <HAL_RCC_OscConfig+0x494>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 030c 	and.w	r3, r3, #12
 8002f36:	2b08      	cmp	r3, #8
 8002f38:	d061      	beq.n	8002ffe <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d146      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f42:	4b4c      	ldr	r3, [pc, #304]	; (8003074 <HAL_RCC_OscConfig+0x498>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f48:	f7fe fc54 	bl	80017f4 <HAL_GetTick>
 8002f4c:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f50:	f7fe fc50 	bl	80017f4 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	6a3b      	ldr	r3, [r7, #32]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b64      	cmp	r3, #100	; 0x64
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e07d      	b.n	800305e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f62:	4b43      	ldr	r3, [pc, #268]	; (8003070 <HAL_RCC_OscConfig+0x494>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1f0      	bne.n	8002f50 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f6e:	4b40      	ldr	r3, [pc, #256]	; (8003070 <HAL_RCC_OscConfig+0x494>)
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	4b41      	ldr	r3, [pc, #260]	; (8003078 <HAL_RCC_OscConfig+0x49c>)
 8002f74:	4013      	ands	r3, r2
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	69d1      	ldr	r1, [r2, #28]
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	6a12      	ldr	r2, [r2, #32]
 8002f7e:	4311      	orrs	r1, r2
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f84:	0192      	lsls	r2, r2, #6
 8002f86:	4311      	orrs	r1, r2
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002f8c:	0612      	lsls	r2, r2, #24
 8002f8e:	4311      	orrs	r1, r2
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002f94:	0852      	lsrs	r2, r2, #1
 8002f96:	3a01      	subs	r2, #1
 8002f98:	0412      	lsls	r2, r2, #16
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	4934      	ldr	r1, [pc, #208]	; (8003070 <HAL_RCC_OscConfig+0x494>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fa2:	4b34      	ldr	r3, [pc, #208]	; (8003074 <HAL_RCC_OscConfig+0x498>)
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa8:	f7fe fc24 	bl	80017f4 <HAL_GetTick>
 8002fac:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fb0:	f7fe fc20 	bl	80017f4 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	6a3b      	ldr	r3, [r7, #32]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b64      	cmp	r3, #100	; 0x64
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e04d      	b.n	800305e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fc2:	4b2b      	ldr	r3, [pc, #172]	; (8003070 <HAL_RCC_OscConfig+0x494>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0f0      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x3d4>
 8002fce:	e045      	b.n	800305c <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fd0:	4b28      	ldr	r3, [pc, #160]	; (8003074 <HAL_RCC_OscConfig+0x498>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd6:	f7fe fc0d 	bl	80017f4 <HAL_GetTick>
 8002fda:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fdc:	e008      	b.n	8002ff0 <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fde:	f7fe fc09 	bl	80017f4 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	6a3b      	ldr	r3, [r7, #32]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b64      	cmp	r3, #100	; 0x64
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e036      	b.n	800305e <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ff0:	4b1f      	ldr	r3, [pc, #124]	; (8003070 <HAL_RCC_OscConfig+0x494>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1f0      	bne.n	8002fde <HAL_RCC_OscConfig+0x402>
 8002ffc:	e02e      	b.n	800305c <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d101      	bne.n	800300a <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e029      	b.n	800305e <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 800300a:	4b19      	ldr	r3, [pc, #100]	; (8003070 <HAL_RCC_OscConfig+0x494>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	429a      	cmp	r2, r3
 800301c:	d11c      	bne.n	8003058 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003028:	429a      	cmp	r2, r3
 800302a:	d115      	bne.n	8003058 <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	099b      	lsrs	r3, r3, #6
 8003030:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003038:	429a      	cmp	r2, r3
 800303a:	d10d      	bne.n	8003058 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003046:	429a      	cmp	r2, r3
 8003048:	d106      	bne.n	8003058 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003054:	429a      	cmp	r2, r3
 8003056:	d001      	beq.n	800305c <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e000      	b.n	800305e <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3728      	adds	r7, #40	; 0x28
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	40007000 	.word	0x40007000
 800306c:	40023870 	.word	0x40023870
 8003070:	40023800 	.word	0x40023800
 8003074:	42470060 	.word	0x42470060
 8003078:	f0bc8000 	.word	0xf0bc8000

0800307c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e0d2      	b.n	8003236 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003090:	4b6b      	ldr	r3, [pc, #428]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 030f 	and.w	r3, r3, #15
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	429a      	cmp	r2, r3
 800309c:	d90c      	bls.n	80030b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800309e:	4b68      	ldr	r3, [pc, #416]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	b2d2      	uxtb	r2, r2
 80030a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030a6:	4b66      	ldr	r3, [pc, #408]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	683a      	ldr	r2, [r7, #0]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d001      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e0be      	b.n	8003236 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d020      	beq.n	8003106 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d005      	beq.n	80030dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030d0:	4b5c      	ldr	r3, [pc, #368]	; (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	4a5b      	ldr	r2, [pc, #364]	; (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 80030d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0308 	and.w	r3, r3, #8
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d005      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 80030e8:	4b56      	ldr	r3, [pc, #344]	; (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	4a55      	ldr	r2, [pc, #340]	; (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 80030ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030f4:	4b53      	ldr	r3, [pc, #332]	; (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	4950      	ldr	r1, [pc, #320]	; (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 8003102:	4313      	orrs	r3, r2
 8003104:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d040      	beq.n	8003194 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	2b01      	cmp	r3, #1
 8003118:	d107      	bne.n	800312a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800311a:	4b4a      	ldr	r3, [pc, #296]	; (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d115      	bne.n	8003152 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e085      	b.n	8003236 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	2b02      	cmp	r3, #2
 8003130:	d107      	bne.n	8003142 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003132:	4b44      	ldr	r3, [pc, #272]	; (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d109      	bne.n	8003152 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e079      	b.n	8003236 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003142:	4b40      	ldr	r3, [pc, #256]	; (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e071      	b.n	8003236 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003152:	4b3c      	ldr	r3, [pc, #240]	; (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f023 0203 	bic.w	r2, r3, #3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	4939      	ldr	r1, [pc, #228]	; (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 8003160:	4313      	orrs	r3, r2
 8003162:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003164:	f7fe fb46 	bl	80017f4 <HAL_GetTick>
 8003168:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800316a:	e00a      	b.n	8003182 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800316c:	f7fe fb42 	bl	80017f4 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	f241 3288 	movw	r2, #5000	; 0x1388
 800317a:	4293      	cmp	r3, r2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e059      	b.n	8003236 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003182:	4b30      	ldr	r3, [pc, #192]	; (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 020c 	and.w	r2, r3, #12
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	429a      	cmp	r2, r3
 8003192:	d1eb      	bne.n	800316c <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003194:	4b2a      	ldr	r3, [pc, #168]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 030f 	and.w	r3, r3, #15
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d20c      	bcs.n	80031bc <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031a2:	4b27      	ldr	r3, [pc, #156]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 80031a4:	683a      	ldr	r2, [r7, #0]
 80031a6:	b2d2      	uxtb	r2, r2
 80031a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031aa:	4b25      	ldr	r3, [pc, #148]	; (8003240 <HAL_RCC_ClockConfig+0x1c4>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 030f 	and.w	r3, r3, #15
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d001      	beq.n	80031bc <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e03c      	b.n	8003236 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d008      	beq.n	80031da <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031c8:	4b1e      	ldr	r3, [pc, #120]	; (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	491b      	ldr	r1, [pc, #108]	; (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0308 	and.w	r3, r3, #8
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d009      	beq.n	80031fa <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031e6:	4b17      	ldr	r3, [pc, #92]	; (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	4913      	ldr	r1, [pc, #76]	; (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80031fa:	f000 f82b 	bl	8003254 <HAL_RCC_GetSysClockFreq>
 80031fe:	4601      	mov	r1, r0
 8003200:	4b10      	ldr	r3, [pc, #64]	; (8003244 <HAL_RCC_ClockConfig+0x1c8>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003208:	22f0      	movs	r2, #240	; 0xf0
 800320a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	fa92 f2a2 	rbit	r2, r2
 8003212:	60fa      	str	r2, [r7, #12]
  return result;
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	fab2 f282 	clz	r2, r2
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	40d3      	lsrs	r3, r2
 800321e:	4a0a      	ldr	r2, [pc, #40]	; (8003248 <HAL_RCC_ClockConfig+0x1cc>)
 8003220:	5cd3      	ldrb	r3, [r2, r3]
 8003222:	fa21 f303 	lsr.w	r3, r1, r3
 8003226:	4a09      	ldr	r2, [pc, #36]	; (800324c <HAL_RCC_ClockConfig+0x1d0>)
 8003228:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800322a:	4b09      	ldr	r3, [pc, #36]	; (8003250 <HAL_RCC_ClockConfig+0x1d4>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4618      	mov	r0, r3
 8003230:	f7fd ff2a 	bl	8001088 <HAL_InitTick>

  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3718      	adds	r7, #24
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	40023c00 	.word	0x40023c00
 8003244:	40023800 	.word	0x40023800
 8003248:	0801c778 	.word	0x0801c778
 800324c:	20000000 	.word	0x20000000
 8003250:	20000004 	.word	0x20000004

08003254 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800325a:	2300      	movs	r3, #0
 800325c:	607b      	str	r3, [r7, #4]
 800325e:	2300      	movs	r3, #0
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	2300      	movs	r3, #0
 8003264:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003266:	2300      	movs	r3, #0
 8003268:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800326a:	4b63      	ldr	r3, [pc, #396]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f003 030c 	and.w	r3, r3, #12
 8003272:	2b04      	cmp	r3, #4
 8003274:	d007      	beq.n	8003286 <HAL_RCC_GetSysClockFreq+0x32>
 8003276:	2b08      	cmp	r3, #8
 8003278:	d008      	beq.n	800328c <HAL_RCC_GetSysClockFreq+0x38>
 800327a:	2b00      	cmp	r3, #0
 800327c:	f040 80b4 	bne.w	80033e8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003280:	4b5e      	ldr	r3, [pc, #376]	; (80033fc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003282:	60bb      	str	r3, [r7, #8]
       break;
 8003284:	e0b3      	b.n	80033ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003286:	4b5e      	ldr	r3, [pc, #376]	; (8003400 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003288:	60bb      	str	r3, [r7, #8]
      break;
 800328a:	e0b0      	b.n	80033ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800328c:	4b5a      	ldr	r3, [pc, #360]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003294:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003296:	4b58      	ldr	r3, [pc, #352]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d04a      	beq.n	8003338 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032a2:	4b55      	ldr	r3, [pc, #340]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	099b      	lsrs	r3, r3, #6
 80032a8:	f04f 0400 	mov.w	r4, #0
 80032ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 80032b0:	f04f 0200 	mov.w	r2, #0
 80032b4:	ea03 0501 	and.w	r5, r3, r1
 80032b8:	ea04 0602 	and.w	r6, r4, r2
 80032bc:	4629      	mov	r1, r5
 80032be:	4632      	mov	r2, r6
 80032c0:	f04f 0300 	mov.w	r3, #0
 80032c4:	f04f 0400 	mov.w	r4, #0
 80032c8:	0154      	lsls	r4, r2, #5
 80032ca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80032ce:	014b      	lsls	r3, r1, #5
 80032d0:	4619      	mov	r1, r3
 80032d2:	4622      	mov	r2, r4
 80032d4:	1b49      	subs	r1, r1, r5
 80032d6:	eb62 0206 	sbc.w	r2, r2, r6
 80032da:	f04f 0300 	mov.w	r3, #0
 80032de:	f04f 0400 	mov.w	r4, #0
 80032e2:	0194      	lsls	r4, r2, #6
 80032e4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80032e8:	018b      	lsls	r3, r1, #6
 80032ea:	1a5b      	subs	r3, r3, r1
 80032ec:	eb64 0402 	sbc.w	r4, r4, r2
 80032f0:	f04f 0100 	mov.w	r1, #0
 80032f4:	f04f 0200 	mov.w	r2, #0
 80032f8:	00e2      	lsls	r2, r4, #3
 80032fa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80032fe:	00d9      	lsls	r1, r3, #3
 8003300:	460b      	mov	r3, r1
 8003302:	4614      	mov	r4, r2
 8003304:	195b      	adds	r3, r3, r5
 8003306:	eb44 0406 	adc.w	r4, r4, r6
 800330a:	f04f 0100 	mov.w	r1, #0
 800330e:	f04f 0200 	mov.w	r2, #0
 8003312:	0262      	lsls	r2, r4, #9
 8003314:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003318:	0259      	lsls	r1, r3, #9
 800331a:	460b      	mov	r3, r1
 800331c:	4614      	mov	r4, r2
 800331e:	4618      	mov	r0, r3
 8003320:	4621      	mov	r1, r4
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f04f 0400 	mov.w	r4, #0
 8003328:	461a      	mov	r2, r3
 800332a:	4623      	mov	r3, r4
 800332c:	f7fd faa2 	bl	8000874 <__aeabi_uldivmod>
 8003330:	4603      	mov	r3, r0
 8003332:	460c      	mov	r4, r1
 8003334:	60fb      	str	r3, [r7, #12]
 8003336:	e049      	b.n	80033cc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003338:	4b2f      	ldr	r3, [pc, #188]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	099b      	lsrs	r3, r3, #6
 800333e:	f04f 0400 	mov.w	r4, #0
 8003342:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003346:	f04f 0200 	mov.w	r2, #0
 800334a:	ea03 0501 	and.w	r5, r3, r1
 800334e:	ea04 0602 	and.w	r6, r4, r2
 8003352:	4629      	mov	r1, r5
 8003354:	4632      	mov	r2, r6
 8003356:	f04f 0300 	mov.w	r3, #0
 800335a:	f04f 0400 	mov.w	r4, #0
 800335e:	0154      	lsls	r4, r2, #5
 8003360:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003364:	014b      	lsls	r3, r1, #5
 8003366:	4619      	mov	r1, r3
 8003368:	4622      	mov	r2, r4
 800336a:	1b49      	subs	r1, r1, r5
 800336c:	eb62 0206 	sbc.w	r2, r2, r6
 8003370:	f04f 0300 	mov.w	r3, #0
 8003374:	f04f 0400 	mov.w	r4, #0
 8003378:	0194      	lsls	r4, r2, #6
 800337a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800337e:	018b      	lsls	r3, r1, #6
 8003380:	1a5b      	subs	r3, r3, r1
 8003382:	eb64 0402 	sbc.w	r4, r4, r2
 8003386:	f04f 0100 	mov.w	r1, #0
 800338a:	f04f 0200 	mov.w	r2, #0
 800338e:	00e2      	lsls	r2, r4, #3
 8003390:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003394:	00d9      	lsls	r1, r3, #3
 8003396:	460b      	mov	r3, r1
 8003398:	4614      	mov	r4, r2
 800339a:	195b      	adds	r3, r3, r5
 800339c:	eb44 0406 	adc.w	r4, r4, r6
 80033a0:	f04f 0100 	mov.w	r1, #0
 80033a4:	f04f 0200 	mov.w	r2, #0
 80033a8:	02a2      	lsls	r2, r4, #10
 80033aa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80033ae:	0299      	lsls	r1, r3, #10
 80033b0:	460b      	mov	r3, r1
 80033b2:	4614      	mov	r4, r2
 80033b4:	4618      	mov	r0, r3
 80033b6:	4621      	mov	r1, r4
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f04f 0400 	mov.w	r4, #0
 80033be:	461a      	mov	r2, r3
 80033c0:	4623      	mov	r3, r4
 80033c2:	f7fd fa57 	bl	8000874 <__aeabi_uldivmod>
 80033c6:	4603      	mov	r3, r0
 80033c8:	460c      	mov	r4, r1
 80033ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033cc:	4b0a      	ldr	r3, [pc, #40]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	0c1b      	lsrs	r3, r3, #16
 80033d2:	f003 0303 	and.w	r3, r3, #3
 80033d6:	3301      	adds	r3, #1
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e4:	60bb      	str	r3, [r7, #8]
      break;
 80033e6:	e002      	b.n	80033ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033e8:	4b04      	ldr	r3, [pc, #16]	; (80033fc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80033ea:	60bb      	str	r3, [r7, #8]
      break;
 80033ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033ee:	68bb      	ldr	r3, [r7, #8]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3714      	adds	r7, #20
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033f8:	40023800 	.word	0x40023800
 80033fc:	00f42400 	.word	0x00f42400
 8003400:	007a1200 	.word	0x007a1200

08003404 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003408:	4b02      	ldr	r3, [pc, #8]	; (8003414 <HAL_RCC_GetHCLKFreq+0x10>)
 800340a:	681b      	ldr	r3, [r3, #0]
}
 800340c:	4618      	mov	r0, r3
 800340e:	46bd      	mov	sp, r7
 8003410:	bc80      	pop	{r7}
 8003412:	4770      	bx	lr
 8003414:	20000000 	.word	0x20000000

08003418 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800341e:	f7ff fff1 	bl	8003404 <HAL_RCC_GetHCLKFreq>
 8003422:	4601      	mov	r1, r0
 8003424:	4b0b      	ldr	r3, [pc, #44]	; (8003454 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800342c:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8003430:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	fa92 f2a2 	rbit	r2, r2
 8003438:	603a      	str	r2, [r7, #0]
  return result;
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	fab2 f282 	clz	r2, r2
 8003440:	b2d2      	uxtb	r2, r2
 8003442:	40d3      	lsrs	r3, r2
 8003444:	4a04      	ldr	r2, [pc, #16]	; (8003458 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003446:	5cd3      	ldrb	r3, [r2, r3]
 8003448:	fa21 f303 	lsr.w	r3, r1, r3
}
 800344c:	4618      	mov	r0, r3
 800344e:	3708      	adds	r7, #8
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40023800 	.word	0x40023800
 8003458:	0801c788 	.word	0x0801c788

0800345c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8003462:	f7ff ffcf 	bl	8003404 <HAL_RCC_GetHCLKFreq>
 8003466:	4601      	mov	r1, r0
 8003468:	4b0b      	ldr	r3, [pc, #44]	; (8003498 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003470:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8003474:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	fa92 f2a2 	rbit	r2, r2
 800347c:	603a      	str	r2, [r7, #0]
  return result;
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	fab2 f282 	clz	r2, r2
 8003484:	b2d2      	uxtb	r2, r2
 8003486:	40d3      	lsrs	r3, r2
 8003488:	4a04      	ldr	r2, [pc, #16]	; (800349c <HAL_RCC_GetPCLK2Freq+0x40>)
 800348a:	5cd3      	ldrb	r3, [r2, r3]
 800348c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003490:	4618      	mov	r0, r3
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	40023800 	.word	0x40023800
 800349c:	0801c788 	.word	0x0801c788

080034a0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	220f      	movs	r2, #15
 80034ae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80034b0:	4b11      	ldr	r3, [pc, #68]	; (80034f8 <HAL_RCC_GetClockConfig+0x58>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f003 0203 	and.w	r2, r3, #3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80034bc:	4b0e      	ldr	r3, [pc, #56]	; (80034f8 <HAL_RCC_GetClockConfig+0x58>)
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80034c8:	4b0b      	ldr	r3, [pc, #44]	; (80034f8 <HAL_RCC_GetClockConfig+0x58>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80034d4:	4b08      	ldr	r3, [pc, #32]	; (80034f8 <HAL_RCC_GetClockConfig+0x58>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	08db      	lsrs	r3, r3, #3
 80034da:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80034e2:	4b06      	ldr	r3, [pc, #24]	; (80034fc <HAL_RCC_GetClockConfig+0x5c>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 020f 	and.w	r2, r3, #15
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	601a      	str	r2, [r3, #0]
}
 80034ee:	bf00      	nop
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bc80      	pop	{r7}
 80034f6:	4770      	bx	lr
 80034f8:	40023800 	.word	0x40023800
 80034fc:	40023c00 	.word	0x40023c00

08003500 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e041      	b.n	8003596 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	d106      	bne.n	800352c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f839 	bl	800359e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2202      	movs	r2, #2
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	3304      	adds	r3, #4
 800353c:	4619      	mov	r1, r3
 800353e:	4610      	mov	r0, r2
 8003540:	f000 f9c8 	bl	80038d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3708      	adds	r7, #8
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800359e:	b480      	push	{r7}
 80035a0:	b083      	sub	sp, #12
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80035a6:	bf00      	nop
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bc80      	pop	{r7}
 80035ae:	4770      	bx	lr

080035b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d001      	beq.n	80035c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e04e      	b.n	8003666 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2202      	movs	r2, #2
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68da      	ldr	r2, [r3, #12]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 0201 	orr.w	r2, r2, #1
 80035de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a22      	ldr	r2, [pc, #136]	; (8003670 <HAL_TIM_Base_Start_IT+0xc0>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d022      	beq.n	8003630 <HAL_TIM_Base_Start_IT+0x80>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035f2:	d01d      	beq.n	8003630 <HAL_TIM_Base_Start_IT+0x80>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a1e      	ldr	r2, [pc, #120]	; (8003674 <HAL_TIM_Base_Start_IT+0xc4>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d018      	beq.n	8003630 <HAL_TIM_Base_Start_IT+0x80>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a1d      	ldr	r2, [pc, #116]	; (8003678 <HAL_TIM_Base_Start_IT+0xc8>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d013      	beq.n	8003630 <HAL_TIM_Base_Start_IT+0x80>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a1b      	ldr	r2, [pc, #108]	; (800367c <HAL_TIM_Base_Start_IT+0xcc>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d00e      	beq.n	8003630 <HAL_TIM_Base_Start_IT+0x80>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a1a      	ldr	r2, [pc, #104]	; (8003680 <HAL_TIM_Base_Start_IT+0xd0>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d009      	beq.n	8003630 <HAL_TIM_Base_Start_IT+0x80>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a18      	ldr	r2, [pc, #96]	; (8003684 <HAL_TIM_Base_Start_IT+0xd4>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d004      	beq.n	8003630 <HAL_TIM_Base_Start_IT+0x80>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a17      	ldr	r2, [pc, #92]	; (8003688 <HAL_TIM_Base_Start_IT+0xd8>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d111      	bne.n	8003654 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 0307 	and.w	r3, r3, #7
 800363a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2b06      	cmp	r3, #6
 8003640:	d010      	beq.n	8003664 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f042 0201 	orr.w	r2, r2, #1
 8003650:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003652:	e007      	b.n	8003664 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f042 0201 	orr.w	r2, r2, #1
 8003662:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3714      	adds	r7, #20
 800366a:	46bd      	mov	sp, r7
 800366c:	bc80      	pop	{r7}
 800366e:	4770      	bx	lr
 8003670:	40010000 	.word	0x40010000
 8003674:	40000400 	.word	0x40000400
 8003678:	40000800 	.word	0x40000800
 800367c:	40000c00 	.word	0x40000c00
 8003680:	40010400 	.word	0x40010400
 8003684:	40014000 	.word	0x40014000
 8003688:	40001800 	.word	0x40001800

0800368c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d122      	bne.n	80036e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	d11b      	bne.n	80036e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f06f 0202 	mvn.w	r2, #2
 80036b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	f003 0303 	and.w	r3, r3, #3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f8ed 	bl	80038ae <HAL_TIM_IC_CaptureCallback>
 80036d4:	e005      	b.n	80036e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f8e0 	bl	800389c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 f8ef 	bl	80038c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	f003 0304 	and.w	r3, r3, #4
 80036f2:	2b04      	cmp	r3, #4
 80036f4:	d122      	bne.n	800373c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	f003 0304 	and.w	r3, r3, #4
 8003700:	2b04      	cmp	r3, #4
 8003702:	d11b      	bne.n	800373c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f06f 0204 	mvn.w	r2, #4
 800370c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2202      	movs	r2, #2
 8003712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800371e:	2b00      	cmp	r3, #0
 8003720:	d003      	beq.n	800372a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f8c3 	bl	80038ae <HAL_TIM_IC_CaptureCallback>
 8003728:	e005      	b.n	8003736 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f8b6 	bl	800389c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 f8c5 	bl	80038c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	f003 0308 	and.w	r3, r3, #8
 8003746:	2b08      	cmp	r3, #8
 8003748:	d122      	bne.n	8003790 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	f003 0308 	and.w	r3, r3, #8
 8003754:	2b08      	cmp	r3, #8
 8003756:	d11b      	bne.n	8003790 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f06f 0208 	mvn.w	r2, #8
 8003760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2204      	movs	r2, #4
 8003766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	f003 0303 	and.w	r3, r3, #3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f899 	bl	80038ae <HAL_TIM_IC_CaptureCallback>
 800377c:	e005      	b.n	800378a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f88c 	bl	800389c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 f89b 	bl	80038c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	f003 0310 	and.w	r3, r3, #16
 800379a:	2b10      	cmp	r3, #16
 800379c:	d122      	bne.n	80037e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	f003 0310 	and.w	r3, r3, #16
 80037a8:	2b10      	cmp	r3, #16
 80037aa:	d11b      	bne.n	80037e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f06f 0210 	mvn.w	r2, #16
 80037b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2208      	movs	r2, #8
 80037ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d003      	beq.n	80037d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 f86f 	bl	80038ae <HAL_TIM_IC_CaptureCallback>
 80037d0:	e005      	b.n	80037de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f862 	bl	800389c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 f871 	bl	80038c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d10e      	bne.n	8003810 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	f003 0301 	and.w	r3, r3, #1
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d107      	bne.n	8003810 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f06f 0201 	mvn.w	r2, #1
 8003808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7fd fbb2 	bl	8000f74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800381a:	2b80      	cmp	r3, #128	; 0x80
 800381c:	d10e      	bne.n	800383c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003828:	2b80      	cmp	r3, #128	; 0x80
 800382a:	d107      	bne.n	800383c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f8f3 	bl	8003a22 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003846:	2b40      	cmp	r3, #64	; 0x40
 8003848:	d10e      	bne.n	8003868 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003854:	2b40      	cmp	r3, #64	; 0x40
 8003856:	d107      	bne.n	8003868 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7fd fb62 	bl	8000f2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	f003 0320 	and.w	r3, r3, #32
 8003872:	2b20      	cmp	r3, #32
 8003874:	d10e      	bne.n	8003894 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	f003 0320 	and.w	r3, r3, #32
 8003880:	2b20      	cmp	r3, #32
 8003882:	d107      	bne.n	8003894 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f06f 0220 	mvn.w	r2, #32
 800388c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 f8be 	bl	8003a10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003894:	bf00      	nop
 8003896:	3708      	adds	r7, #8
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bc80      	pop	{r7}
 80038ac:	4770      	bx	lr

080038ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038ae:	b480      	push	{r7}
 80038b0:	b083      	sub	sp, #12
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038b6:	bf00      	nop
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bc80      	pop	{r7}
 80038be:	4770      	bx	lr

080038c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bc80      	pop	{r7}
 80038d0:	4770      	bx	lr
	...

080038d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a3f      	ldr	r2, [pc, #252]	; (80039e4 <TIM_Base_SetConfig+0x110>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d013      	beq.n	8003914 <TIM_Base_SetConfig+0x40>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038f2:	d00f      	beq.n	8003914 <TIM_Base_SetConfig+0x40>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a3c      	ldr	r2, [pc, #240]	; (80039e8 <TIM_Base_SetConfig+0x114>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d00b      	beq.n	8003914 <TIM_Base_SetConfig+0x40>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a3b      	ldr	r2, [pc, #236]	; (80039ec <TIM_Base_SetConfig+0x118>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d007      	beq.n	8003914 <TIM_Base_SetConfig+0x40>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a3a      	ldr	r2, [pc, #232]	; (80039f0 <TIM_Base_SetConfig+0x11c>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d003      	beq.n	8003914 <TIM_Base_SetConfig+0x40>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a39      	ldr	r2, [pc, #228]	; (80039f4 <TIM_Base_SetConfig+0x120>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d108      	bne.n	8003926 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800391a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	4313      	orrs	r3, r2
 8003924:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a2e      	ldr	r2, [pc, #184]	; (80039e4 <TIM_Base_SetConfig+0x110>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d02b      	beq.n	8003986 <TIM_Base_SetConfig+0xb2>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003934:	d027      	beq.n	8003986 <TIM_Base_SetConfig+0xb2>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a2b      	ldr	r2, [pc, #172]	; (80039e8 <TIM_Base_SetConfig+0x114>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d023      	beq.n	8003986 <TIM_Base_SetConfig+0xb2>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a2a      	ldr	r2, [pc, #168]	; (80039ec <TIM_Base_SetConfig+0x118>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d01f      	beq.n	8003986 <TIM_Base_SetConfig+0xb2>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a29      	ldr	r2, [pc, #164]	; (80039f0 <TIM_Base_SetConfig+0x11c>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d01b      	beq.n	8003986 <TIM_Base_SetConfig+0xb2>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a28      	ldr	r2, [pc, #160]	; (80039f4 <TIM_Base_SetConfig+0x120>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d017      	beq.n	8003986 <TIM_Base_SetConfig+0xb2>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4a27      	ldr	r2, [pc, #156]	; (80039f8 <TIM_Base_SetConfig+0x124>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d013      	beq.n	8003986 <TIM_Base_SetConfig+0xb2>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a26      	ldr	r2, [pc, #152]	; (80039fc <TIM_Base_SetConfig+0x128>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d00f      	beq.n	8003986 <TIM_Base_SetConfig+0xb2>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a25      	ldr	r2, [pc, #148]	; (8003a00 <TIM_Base_SetConfig+0x12c>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d00b      	beq.n	8003986 <TIM_Base_SetConfig+0xb2>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a24      	ldr	r2, [pc, #144]	; (8003a04 <TIM_Base_SetConfig+0x130>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d007      	beq.n	8003986 <TIM_Base_SetConfig+0xb2>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a23      	ldr	r2, [pc, #140]	; (8003a08 <TIM_Base_SetConfig+0x134>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d003      	beq.n	8003986 <TIM_Base_SetConfig+0xb2>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a22      	ldr	r2, [pc, #136]	; (8003a0c <TIM_Base_SetConfig+0x138>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d108      	bne.n	8003998 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800398c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	4313      	orrs	r3, r2
 8003996:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	689a      	ldr	r2, [r3, #8]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a09      	ldr	r2, [pc, #36]	; (80039e4 <TIM_Base_SetConfig+0x110>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d003      	beq.n	80039cc <TIM_Base_SetConfig+0xf8>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a0b      	ldr	r2, [pc, #44]	; (80039f4 <TIM_Base_SetConfig+0x120>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d103      	bne.n	80039d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	691a      	ldr	r2, [r3, #16]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	615a      	str	r2, [r3, #20]
}
 80039da:	bf00      	nop
 80039dc:	3714      	adds	r7, #20
 80039de:	46bd      	mov	sp, r7
 80039e0:	bc80      	pop	{r7}
 80039e2:	4770      	bx	lr
 80039e4:	40010000 	.word	0x40010000
 80039e8:	40000400 	.word	0x40000400
 80039ec:	40000800 	.word	0x40000800
 80039f0:	40000c00 	.word	0x40000c00
 80039f4:	40010400 	.word	0x40010400
 80039f8:	40014000 	.word	0x40014000
 80039fc:	40014400 	.word	0x40014400
 8003a00:	40014800 	.word	0x40014800
 8003a04:	40001800 	.word	0x40001800
 8003a08:	40001c00 	.word	0x40001c00
 8003a0c:	40002000 	.word	0x40002000

08003a10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b083      	sub	sp, #12
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bc80      	pop	{r7}
 8003a20:	4770      	bx	lr

08003a22 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a22:	b480      	push	{r7}
 8003a24:	b083      	sub	sp, #12
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a2a:	bf00      	nop
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bc80      	pop	{r7}
 8003a32:	4770      	bx	lr

08003a34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d101      	bne.n	8003a46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e03f      	b.n	8003ac6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d106      	bne.n	8003a60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7fd facc 	bl	8000ff8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2224      	movs	r2, #36	; 0x24
 8003a64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68da      	ldr	r2, [r3, #12]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 f829 	bl	8003ad0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	691a      	ldr	r2, [r3, #16]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	695a      	ldr	r2, [r3, #20]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68da      	ldr	r2, [r3, #12]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003aac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2220      	movs	r2, #32
 8003ab8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2220      	movs	r2, #32
 8003ac0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
	...

08003ad0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68da      	ldr	r2, [r3, #12]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	430a      	orrs	r2, r1
 8003aec:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689a      	ldr	r2, [r3, #8]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	431a      	orrs	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	431a      	orrs	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003b10:	f023 030c 	bic.w	r3, r3, #12
 8003b14:	687a      	ldr	r2, [r7, #4]
 8003b16:	6812      	ldr	r2, [r2, #0]
 8003b18:	68b9      	ldr	r1, [r7, #8]
 8003b1a:	430b      	orrs	r3, r1
 8003b1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	695b      	ldr	r3, [r3, #20]
 8003b24:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	699a      	ldr	r2, [r3, #24]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a57      	ldr	r2, [pc, #348]	; (8003c98 <UART_SetConfig+0x1c8>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d004      	beq.n	8003b48 <UART_SetConfig+0x78>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a56      	ldr	r2, [pc, #344]	; (8003c9c <UART_SetConfig+0x1cc>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d103      	bne.n	8003b50 <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b48:	f7ff fc88 	bl	800345c <HAL_RCC_GetPCLK2Freq>
 8003b4c:	60f8      	str	r0, [r7, #12]
 8003b4e:	e002      	b.n	8003b56 <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003b50:	f7ff fc62 	bl	8003418 <HAL_RCC_GetPCLK1Freq>
 8003b54:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b5e:	d14c      	bne.n	8003bfa <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	4613      	mov	r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	4413      	add	r3, r2
 8003b68:	009a      	lsls	r2, r3, #2
 8003b6a:	441a      	add	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b76:	4a4a      	ldr	r2, [pc, #296]	; (8003ca0 <UART_SetConfig+0x1d0>)
 8003b78:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7c:	095b      	lsrs	r3, r3, #5
 8003b7e:	0119      	lsls	r1, r3, #4
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	4613      	mov	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	4413      	add	r3, r2
 8003b88:	009a      	lsls	r2, r3, #2
 8003b8a:	441a      	add	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b96:	4b42      	ldr	r3, [pc, #264]	; (8003ca0 <UART_SetConfig+0x1d0>)
 8003b98:	fba3 0302 	umull	r0, r3, r3, r2
 8003b9c:	095b      	lsrs	r3, r3, #5
 8003b9e:	2064      	movs	r0, #100	; 0x64
 8003ba0:	fb00 f303 	mul.w	r3, r0, r3
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	3332      	adds	r3, #50	; 0x32
 8003baa:	4a3d      	ldr	r2, [pc, #244]	; (8003ca0 <UART_SetConfig+0x1d0>)
 8003bac:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb0:	095b      	lsrs	r3, r3, #5
 8003bb2:	005b      	lsls	r3, r3, #1
 8003bb4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003bb8:	4419      	add	r1, r3
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	009a      	lsls	r2, r3, #2
 8003bc4:	441a      	add	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	005b      	lsls	r3, r3, #1
 8003bcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bd0:	4b33      	ldr	r3, [pc, #204]	; (8003ca0 <UART_SetConfig+0x1d0>)
 8003bd2:	fba3 0302 	umull	r0, r3, r3, r2
 8003bd6:	095b      	lsrs	r3, r3, #5
 8003bd8:	2064      	movs	r0, #100	; 0x64
 8003bda:	fb00 f303 	mul.w	r3, r0, r3
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	00db      	lsls	r3, r3, #3
 8003be2:	3332      	adds	r3, #50	; 0x32
 8003be4:	4a2e      	ldr	r2, [pc, #184]	; (8003ca0 <UART_SetConfig+0x1d0>)
 8003be6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bea:	095b      	lsrs	r3, r3, #5
 8003bec:	f003 0207 	and.w	r2, r3, #7
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	440a      	add	r2, r1
 8003bf6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003bf8:	e04a      	b.n	8003c90 <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	009a      	lsls	r2, r3, #2
 8003c04:	441a      	add	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c10:	4a23      	ldr	r2, [pc, #140]	; (8003ca0 <UART_SetConfig+0x1d0>)
 8003c12:	fba2 2303 	umull	r2, r3, r2, r3
 8003c16:	095b      	lsrs	r3, r3, #5
 8003c18:	0119      	lsls	r1, r3, #4
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4413      	add	r3, r2
 8003c22:	009a      	lsls	r2, r3, #2
 8003c24:	441a      	add	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c30:	4b1b      	ldr	r3, [pc, #108]	; (8003ca0 <UART_SetConfig+0x1d0>)
 8003c32:	fba3 0302 	umull	r0, r3, r3, r2
 8003c36:	095b      	lsrs	r3, r3, #5
 8003c38:	2064      	movs	r0, #100	; 0x64
 8003c3a:	fb00 f303 	mul.w	r3, r0, r3
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	011b      	lsls	r3, r3, #4
 8003c42:	3332      	adds	r3, #50	; 0x32
 8003c44:	4a16      	ldr	r2, [pc, #88]	; (8003ca0 <UART_SetConfig+0x1d0>)
 8003c46:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4a:	095b      	lsrs	r3, r3, #5
 8003c4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c50:	4419      	add	r1, r3
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	4613      	mov	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4413      	add	r3, r2
 8003c5a:	009a      	lsls	r2, r3, #2
 8003c5c:	441a      	add	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c68:	4b0d      	ldr	r3, [pc, #52]	; (8003ca0 <UART_SetConfig+0x1d0>)
 8003c6a:	fba3 0302 	umull	r0, r3, r3, r2
 8003c6e:	095b      	lsrs	r3, r3, #5
 8003c70:	2064      	movs	r0, #100	; 0x64
 8003c72:	fb00 f303 	mul.w	r3, r0, r3
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	011b      	lsls	r3, r3, #4
 8003c7a:	3332      	adds	r3, #50	; 0x32
 8003c7c:	4a08      	ldr	r2, [pc, #32]	; (8003ca0 <UART_SetConfig+0x1d0>)
 8003c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c82:	095b      	lsrs	r3, r3, #5
 8003c84:	f003 020f 	and.w	r2, r3, #15
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	440a      	add	r2, r1
 8003c8e:	609a      	str	r2, [r3, #8]
}
 8003c90:	bf00      	nop
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	40011000 	.word	0x40011000
 8003c9c:	40011400 	.word	0x40011400
 8003ca0:	51eb851f 	.word	0x51eb851f

08003ca4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8003caa:	2100      	movs	r1, #0
 8003cac:	2000      	movs	r0, #0
 8003cae:	f004 f99b 	bl	8007fe8 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0x3201A8C0;		//192.168.1.50
 8003cb2:	4b16      	ldr	r3, [pc, #88]	; (8003d0c <MX_LWIP_Init+0x68>)
 8003cb4:	4a16      	ldr	r2, [pc, #88]	; (8003d10 <MX_LWIP_Init+0x6c>)
 8003cb6:	601a      	str	r2, [r3, #0]
  netmask.addr = 0x00FFFFFF;	//255.255.255.0
 8003cb8:	4b16      	ldr	r3, [pc, #88]	; (8003d14 <MX_LWIP_Init+0x70>)
 8003cba:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8003cbe:	601a      	str	r2, [r3, #0]
  gw.addr = 0x0101A8C0;			//192.168.1.1
 8003cc0:	4b15      	ldr	r3, [pc, #84]	; (8003d18 <MX_LWIP_Init+0x74>)
 8003cc2:	4a16      	ldr	r2, [pc, #88]	; (8003d1c <MX_LWIP_Init+0x78>)
 8003cc4:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8003cc6:	4b16      	ldr	r3, [pc, #88]	; (8003d20 <MX_LWIP_Init+0x7c>)
 8003cc8:	9302      	str	r3, [sp, #8]
 8003cca:	4b16      	ldr	r3, [pc, #88]	; (8003d24 <MX_LWIP_Init+0x80>)
 8003ccc:	9301      	str	r3, [sp, #4]
 8003cce:	2300      	movs	r3, #0
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	4b11      	ldr	r3, [pc, #68]	; (8003d18 <MX_LWIP_Init+0x74>)
 8003cd4:	4a0f      	ldr	r2, [pc, #60]	; (8003d14 <MX_LWIP_Init+0x70>)
 8003cd6:	490d      	ldr	r1, [pc, #52]	; (8003d0c <MX_LWIP_Init+0x68>)
 8003cd8:	4813      	ldr	r0, [pc, #76]	; (8003d28 <MX_LWIP_Init+0x84>)
 8003cda:	f005 f94f 	bl	8008f7c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003cde:	4812      	ldr	r0, [pc, #72]	; (8003d28 <MX_LWIP_Init+0x84>)
 8003ce0:	f005 fa3e 	bl	8009160 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8003ce4:	4b10      	ldr	r3, [pc, #64]	; (8003d28 <MX_LWIP_Init+0x84>)
 8003ce6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8003cea:	089b      	lsrs	r3, r3, #2
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d003      	beq.n	8003cfe <MX_LWIP_Init+0x5a>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003cf6:	480c      	ldr	r0, [pc, #48]	; (8003d28 <MX_LWIP_Init+0x84>)
 8003cf8:	f005 fa40 	bl	800917c <netif_set_up>
  //dhcp_start(&gnetif);

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003cfc:	e002      	b.n	8003d04 <MX_LWIP_Init+0x60>
    netif_set_down(&gnetif);
 8003cfe:	480a      	ldr	r0, [pc, #40]	; (8003d28 <MX_LWIP_Init+0x84>)
 8003d00:	f005 fa8a 	bl	8009218 <netif_set_down>
}
 8003d04:	bf00      	nop
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	20004ce8 	.word	0x20004ce8
 8003d10:	3201a8c0 	.word	0x3201a8c0
 8003d14:	20004cec 	.word	0x20004cec
 8003d18:	20004cf0 	.word	0x20004cf0
 8003d1c:	0101a8c0 	.word	0x0101a8c0
 8003d20:	08007f11 	.word	0x08007f11
 8003d24:	080044d5 	.word	0x080044d5
 8003d28:	20004cac 	.word	0x20004cac

08003d2c <ETH_PTPSubSecond2NanoSecond>:
#if LWIP_PTP
static void ETH_PTPStart(uint32_t UpdateMethod);
#endif

u32_t ETH_PTPSubSecond2NanoSecond(u32_t SubSecondValue)
{
 8003d2c:	b490      	push	{r4, r7}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
	uint64_t val = SubSecondValue * 1000000000ll;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f04f 0400 	mov.w	r4, #0
 8003d3a:	4a10      	ldr	r2, [pc, #64]	; (8003d7c <ETH_PTPSubSecond2NanoSecond+0x50>)
 8003d3c:	fb02 f104 	mul.w	r1, r2, r4
 8003d40:	2200      	movs	r2, #0
 8003d42:	fb02 f203 	mul.w	r2, r2, r3
 8003d46:	440a      	add	r2, r1
 8003d48:	490c      	ldr	r1, [pc, #48]	; (8003d7c <ETH_PTPSubSecond2NanoSecond+0x50>)
 8003d4a:	fba3 3401 	umull	r3, r4, r3, r1
 8003d4e:	4422      	add	r2, r4
 8003d50:	4614      	mov	r4, r2
 8003d52:	e9c7 3402 	strd	r3, r4, [r7, #8]
	val >>= 31;
 8003d56:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003d5a:	f04f 0300 	mov.w	r3, #0
 8003d5e:	f04f 0400 	mov.w	r4, #0
 8003d62:	0fcb      	lsrs	r3, r1, #31
 8003d64:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 8003d68:	0fd4      	lsrs	r4, r2, #31
 8003d6a:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return val;
 8003d6e:	68bb      	ldr	r3, [r7, #8]
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3710      	adds	r7, #16
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bc90      	pop	{r4, r7}
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	3b9aca00 	.word	0x3b9aca00

08003d80 <ETH_PTPNanoSecond2SubSecond>:

u32_t ETH_PTPNanoSecond2SubSecond(u32_t SubSecondValue)
{
 8003d80:	b590      	push	{r4, r7, lr}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
	uint64_t val = SubSecondValue * 0x80000000ll;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	f04f 0200 	mov.w	r2, #0
 8003d90:	f04f 0300 	mov.w	r3, #0
 8003d94:	f04f 0400 	mov.w	r4, #0
 8003d98:	07d4      	lsls	r4, r2, #31
 8003d9a:	ea44 0451 	orr.w	r4, r4, r1, lsr #1
 8003d9e:	07cb      	lsls	r3, r1, #31
 8003da0:	e9c7 3402 	strd	r3, r4, [r7, #8]
	val /= 1000000000;
 8003da4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003da8:	a307      	add	r3, pc, #28	; (adr r3, 8003dc8 <ETH_PTPNanoSecond2SubSecond+0x48>)
 8003daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dae:	f7fc fd61 	bl	8000874 <__aeabi_uldivmod>
 8003db2:	4603      	mov	r3, r0
 8003db4:	460c      	mov	r4, r1
 8003db6:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return val;
 8003dba:	68bb      	ldr	r3, [r7, #8]
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3714      	adds	r7, #20
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd90      	pop	{r4, r7, pc}
 8003dc4:	f3af 8000 	nop.w
 8003dc8:	3b9aca00 	.word	0x3b9aca00
 8003dcc:	00000000 	.word	0x00000000

08003dd0 <ETH_PTPTime_GetTime>:

void ETH_PTPTime_GetTime(struct ptptime_t *timestamp)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
	timestamp->tv_nsec = ETH_PTPSubSecond2NanoSecond(
 8003dd8:	f240 700c 	movw	r0, #1804	; 0x70c
 8003ddc:	f7fd fbf6 	bl	80015cc <ETH_GetPTPRegister>
 8003de0:	4603      	mov	r3, r0
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7ff ffa2 	bl	8003d2c <ETH_PTPSubSecond2NanoSecond>
 8003de8:	4603      	mov	r3, r0
 8003dea:	461a      	mov	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	605a      	str	r2, [r3, #4]
			ETH_GetPTPRegister(ETH_PTPTSLR));
	timestamp->tv_sec = ETH_GetPTPRegister(ETH_PTPTSHR);
 8003df0:	f44f 60e1 	mov.w	r0, #1800	; 0x708
 8003df4:	f7fd fbea 	bl	80015cc <ETH_GetPTPRegister>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	601a      	str	r2, [r3, #0]
}
 8003e00:	bf00      	nop
 8003e02:	3708      	adds	r7, #8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef *ethHandle)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b08e      	sub	sp, #56	; 0x38
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =
 8003e10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e14:	2200      	movs	r2, #0
 8003e16:	601a      	str	r2, [r3, #0]
 8003e18:	605a      	str	r2, [r3, #4]
 8003e1a:	609a      	str	r2, [r3, #8]
 8003e1c:	60da      	str	r2, [r3, #12]
 8003e1e:	611a      	str	r2, [r3, #16]
	{ 0 };
	if (ethHandle->Instance == ETH)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a64      	ldr	r2, [pc, #400]	; (8003fb8 <HAL_ETH_MspInit+0x1b0>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	f040 80c2 	bne.w	8003fb0 <HAL_ETH_MspInit+0x1a8>
	{
		/* USER CODE BEGIN ETH_MspInit 0 */

		/* USER CODE END ETH_MspInit 0 */
		/* Enable Peripheral clock */
		__HAL_RCC_ETH_CLK_ENABLE();
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	623b      	str	r3, [r7, #32]
 8003e30:	4b62      	ldr	r3, [pc, #392]	; (8003fbc <HAL_ETH_MspInit+0x1b4>)
 8003e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e34:	4a61      	ldr	r2, [pc, #388]	; (8003fbc <HAL_ETH_MspInit+0x1b4>)
 8003e36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e3a:	6313      	str	r3, [r2, #48]	; 0x30
 8003e3c:	4b5f      	ldr	r3, [pc, #380]	; (8003fbc <HAL_ETH_MspInit+0x1b4>)
 8003e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e44:	623b      	str	r3, [r7, #32]
 8003e46:	6a3b      	ldr	r3, [r7, #32]
 8003e48:	2300      	movs	r3, #0
 8003e4a:	61fb      	str	r3, [r7, #28]
 8003e4c:	4b5b      	ldr	r3, [pc, #364]	; (8003fbc <HAL_ETH_MspInit+0x1b4>)
 8003e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e50:	4a5a      	ldr	r2, [pc, #360]	; (8003fbc <HAL_ETH_MspInit+0x1b4>)
 8003e52:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e56:	6313      	str	r3, [r2, #48]	; 0x30
 8003e58:	4b58      	ldr	r3, [pc, #352]	; (8003fbc <HAL_ETH_MspInit+0x1b4>)
 8003e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e60:	61fb      	str	r3, [r7, #28]
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	2300      	movs	r3, #0
 8003e66:	61bb      	str	r3, [r7, #24]
 8003e68:	4b54      	ldr	r3, [pc, #336]	; (8003fbc <HAL_ETH_MspInit+0x1b4>)
 8003e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6c:	4a53      	ldr	r2, [pc, #332]	; (8003fbc <HAL_ETH_MspInit+0x1b4>)
 8003e6e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e72:	6313      	str	r3, [r2, #48]	; 0x30
 8003e74:	4b51      	ldr	r3, [pc, #324]	; (8003fbc <HAL_ETH_MspInit+0x1b4>)
 8003e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e7c:	61bb      	str	r3, [r7, #24]
 8003e7e:	69bb      	ldr	r3, [r7, #24]

		__HAL_RCC_GPIOC_CLK_ENABLE();
 8003e80:	2300      	movs	r3, #0
 8003e82:	617b      	str	r3, [r7, #20]
 8003e84:	4b4d      	ldr	r3, [pc, #308]	; (8003fbc <HAL_ETH_MspInit+0x1b4>)
 8003e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e88:	4a4c      	ldr	r2, [pc, #304]	; (8003fbc <HAL_ETH_MspInit+0x1b4>)
 8003e8a:	f043 0304 	orr.w	r3, r3, #4
 8003e8e:	6313      	str	r3, [r2, #48]	; 0x30
 8003e90:	4b4a      	ldr	r3, [pc, #296]	; (8003fbc <HAL_ETH_MspInit+0x1b4>)
 8003e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e94:	f003 0304 	and.w	r3, r3, #4
 8003e98:	617b      	str	r3, [r7, #20]
 8003e9a:	697b      	ldr	r3, [r7, #20]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	613b      	str	r3, [r7, #16]
 8003ea0:	4b46      	ldr	r3, [pc, #280]	; (8003fbc <HAL_ETH_MspInit+0x1b4>)
 8003ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea4:	4a45      	ldr	r2, [pc, #276]	; (8003fbc <HAL_ETH_MspInit+0x1b4>)
 8003ea6:	f043 0301 	orr.w	r3, r3, #1
 8003eaa:	6313      	str	r3, [r2, #48]	; 0x30
 8003eac:	4b43      	ldr	r3, [pc, #268]	; (8003fbc <HAL_ETH_MspInit+0x1b4>)
 8003eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	613b      	str	r3, [r7, #16]
 8003eb6:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8003eb8:	2300      	movs	r3, #0
 8003eba:	60fb      	str	r3, [r7, #12]
 8003ebc:	4b3f      	ldr	r3, [pc, #252]	; (8003fbc <HAL_ETH_MspInit+0x1b4>)
 8003ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec0:	4a3e      	ldr	r2, [pc, #248]	; (8003fbc <HAL_ETH_MspInit+0x1b4>)
 8003ec2:	f043 0302 	orr.w	r3, r3, #2
 8003ec6:	6313      	str	r3, [r2, #48]	; 0x30
 8003ec8:	4b3c      	ldr	r3, [pc, #240]	; (8003fbc <HAL_ETH_MspInit+0x1b4>)
 8003eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	60fb      	str	r3, [r7, #12]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOG_CLK_ENABLE();
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	60bb      	str	r3, [r7, #8]
 8003ed8:	4b38      	ldr	r3, [pc, #224]	; (8003fbc <HAL_ETH_MspInit+0x1b4>)
 8003eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003edc:	4a37      	ldr	r2, [pc, #220]	; (8003fbc <HAL_ETH_MspInit+0x1b4>)
 8003ede:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ee2:	6313      	str	r3, [r2, #48]	; 0x30
 8003ee4:	4b35      	ldr	r3, [pc, #212]	; (8003fbc <HAL_ETH_MspInit+0x1b4>)
 8003ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eec:	60bb      	str	r3, [r7, #8]
 8003eee:	68bb      	ldr	r3, [r7, #8]
		 PC5     ------> ETH_RXD1
		 PB11     ------> ETH_TX_EN
		 PG13     ------> ETH_TXD0
		 PG14     ------> ETH_TXD1
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 8003ef0:	2332      	movs	r3, #50	; 0x32
 8003ef2:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ef4:	2302      	movs	r3, #2
 8003ef6:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003efc:	2303      	movs	r3, #3
 8003efe:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003f00:	230b      	movs	r3, #11
 8003f02:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f08:	4619      	mov	r1, r3
 8003f0a:	482d      	ldr	r0, [pc, #180]	; (8003fc0 <HAL_ETH_MspInit+0x1b8>)
 8003f0c:	f7fe fc8e 	bl	800282c <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 8003f10:	2386      	movs	r3, #134	; 0x86
 8003f12:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f14:	2302      	movs	r3, #2
 8003f16:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003f20:	230b      	movs	r3, #11
 8003f22:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f28:	4619      	mov	r1, r3
 8003f2a:	4826      	ldr	r0, [pc, #152]	; (8003fc4 <HAL_ETH_MspInit+0x1bc>)
 8003f2c:	f7fe fc7e 	bl	800282c <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003f30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003f34:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f36:	2302      	movs	r3, #2
 8003f38:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003f42:	230b      	movs	r3, #11
 8003f44:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	481e      	ldr	r0, [pc, #120]	; (8003fc8 <HAL_ETH_MspInit+0x1c0>)
 8003f4e:	f7fe fc6d 	bl	800282c <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14;
 8003f52:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003f56:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f58:	2302      	movs	r3, #2
 8003f5a:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f60:	2303      	movs	r3, #3
 8003f62:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003f64:	230b      	movs	r3, #11
 8003f66:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003f68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	4817      	ldr	r0, [pc, #92]	; (8003fcc <HAL_ETH_MspInit+0x1c4>)
 8003f70:	f7fe fc5c 	bl	800282c <HAL_GPIO_Init>

		/* Peripheral interrupt init */
		HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8003f74:	2200      	movs	r2, #0
 8003f76:	2105      	movs	r1, #5
 8003f78:	203d      	movs	r0, #61	; 0x3d
 8003f7a:	f7fd fd1c 	bl	80019b6 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(ETH_IRQn);
 8003f7e:	203d      	movs	r0, #61	; 0x3d
 8003f80:	f7fd fd35 	bl	80019ee <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN ETH_MspInit 1 */
		printf("Restarting PHY...\r\n");
 8003f84:	4812      	ldr	r0, [pc, #72]	; (8003fd0 <HAL_ETH_MspInit+0x1c8>)
 8003f86:	f014 fa41 	bl	801840c <puts>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	2120      	movs	r1, #32
 8003f8e:	480d      	ldr	r0, [pc, #52]	; (8003fc4 <HAL_ETH_MspInit+0x1bc>)
 8003f90:	f7fe fdea 	bl	8002b68 <HAL_GPIO_WritePin>
		vTaskDelay(100);
 8003f94:	2064      	movs	r0, #100	; 0x64
 8003f96:	f002 f8fd 	bl	8006194 <vTaskDelay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	2120      	movs	r1, #32
 8003f9e:	4809      	ldr	r0, [pc, #36]	; (8003fc4 <HAL_ETH_MspInit+0x1bc>)
 8003fa0:	f7fe fde2 	bl	8002b68 <HAL_GPIO_WritePin>
		vTaskDelay(100);
 8003fa4:	2064      	movs	r0, #100	; 0x64
 8003fa6:	f002 f8f5 	bl	8006194 <vTaskDelay>
		printf("LAN8720 Initializing...\r\n");
 8003faa:	480a      	ldr	r0, [pc, #40]	; (8003fd4 <HAL_ETH_MspInit+0x1cc>)
 8003fac:	f014 fa2e 	bl	801840c <puts>
		/* USER CODE END ETH_MspInit 1 */
	}
}
 8003fb0:	bf00      	nop
 8003fb2:	3738      	adds	r7, #56	; 0x38
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	40028000 	.word	0x40028000
 8003fbc:	40023800 	.word	0x40023800
 8003fc0:	40020800 	.word	0x40020800
 8003fc4:	40020000 	.word	0x40020000
 8003fc8:	40020400 	.word	0x40020400
 8003fcc:	40021800 	.word	0x40021800
 8003fd0:	080192a8 	.word	0x080192a8
 8003fd4:	080192bc 	.word	0x080192bc

08003fd8 <HAL_ETH_RxCpltCallback>:
 * @brief  Ethernet Rx Transfer completed callback
 * @param  heth: ETH handle
 * @retval None
 */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(s_xSemaphore);
 8003fe0:	4b04      	ldr	r3, [pc, #16]	; (8003ff4 <HAL_ETH_RxCpltCallback+0x1c>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f000 fe0b 	bl	8004c00 <osSemaphoreRelease>
}
 8003fea:	bf00      	nop
 8003fec:	3708      	adds	r7, #8
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	20000760 	.word	0x20000760

08003ff8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003ff8:	b5b0      	push	{r4, r5, r7, lr}
 8003ffa:	b090      	sub	sp, #64	; 0x40
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
	uint32_t regvalue = 0;
 8004000:	2300      	movs	r3, #0
 8004002:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_StatusTypeDef hal_eth_init_status;

	/* Init ETH */

	uint8_t MACAddr[6];
	heth.Instance = ETH;
 8004004:	4b5d      	ldr	r3, [pc, #372]	; (800417c <low_level_init+0x184>)
 8004006:	4a5e      	ldr	r2, [pc, #376]	; (8004180 <low_level_init+0x188>)
 8004008:	601a      	str	r2, [r3, #0]
	heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800400a:	4b5c      	ldr	r3, [pc, #368]	; (800417c <low_level_init+0x184>)
 800400c:	2201      	movs	r2, #1
 800400e:	605a      	str	r2, [r3, #4]
	heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004010:	4b5a      	ldr	r3, [pc, #360]	; (800417c <low_level_init+0x184>)
 8004012:	2200      	movs	r2, #0
 8004014:	821a      	strh	r2, [r3, #16]
	MACAddr[0] = 0x00;
 8004016:	2300      	movs	r3, #0
 8004018:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	MACAddr[1] = 0x80;
 800401c:	2380      	movs	r3, #128	; 0x80
 800401e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	MACAddr[2] = 0xE1;
 8004022:	23e1      	movs	r3, #225	; 0xe1
 8004024:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	MACAddr[3] = 0x00;
 8004028:	2300      	movs	r3, #0
 800402a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	MACAddr[4] = 0x00;
 800402e:	2300      	movs	r3, #0
 8004030:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	MACAddr[5] = 0x01;
 8004034:	2301      	movs	r3, #1
 8004036:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	heth.Init.MACAddr = &MACAddr[0];
 800403a:	4a50      	ldr	r2, [pc, #320]	; (800417c <low_level_init+0x184>)
 800403c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004040:	6153      	str	r3, [r2, #20]
	heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8004042:	4b4e      	ldr	r3, [pc, #312]	; (800417c <low_level_init+0x184>)
 8004044:	2201      	movs	r2, #1
 8004046:	619a      	str	r2, [r3, #24]
	heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004048:	4b4c      	ldr	r3, [pc, #304]	; (800417c <low_level_init+0x184>)
 800404a:	2200      	movs	r2, #0
 800404c:	61da      	str	r2, [r3, #28]
	heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800404e:	4b4b      	ldr	r3, [pc, #300]	; (800417c <low_level_init+0x184>)
 8004050:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004054:	621a      	str	r2, [r3, #32]

	/* USER CODE BEGIN MACADDRESS */

	/* USER CODE END MACADDRESS */

	hal_eth_init_status = HAL_ETH_Init(&heth);
 8004056:	4849      	ldr	r0, [pc, #292]	; (800417c <low_level_init+0x184>)
 8004058:	f7fd fcd8 	bl	8001a0c <HAL_ETH_Init>
 800405c:	4603      	mov	r3, r0
 800405e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (hal_eth_init_status == HAL_OK)
 8004062:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004066:	2b00      	cmp	r3, #0
 8004068:	d108      	bne.n	800407c <low_level_init+0x84>
	{
		/* Set netif link flag */
		netif->flags |= NETIF_FLAG_LINK_UP |
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8004070:	f043 0326 	orr.w	r3, r3, #38	; 0x26
 8004074:	b2da      	uxtb	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
		NETIF_FLAG_IGMP | 		//�鲥���IGMP��־λ
				NETIF_FLAG_BROADCAST;
	}
	/* Initialize Tx Descriptors list: Chain Mode */
	HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800407c:	2304      	movs	r3, #4
 800407e:	4a41      	ldr	r2, [pc, #260]	; (8004184 <low_level_init+0x18c>)
 8004080:	4941      	ldr	r1, [pc, #260]	; (8004188 <low_level_init+0x190>)
 8004082:	483e      	ldr	r0, [pc, #248]	; (800417c <low_level_init+0x184>)
 8004084:	f7fd fe50 	bl	8001d28 <HAL_ETH_DMATxDescListInit>

	/* Initialize Rx Descriptors list: Chain Mode  */
	HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8004088:	2304      	movs	r3, #4
 800408a:	4a40      	ldr	r2, [pc, #256]	; (800418c <low_level_init+0x194>)
 800408c:	4940      	ldr	r1, [pc, #256]	; (8004190 <low_level_init+0x198>)
 800408e:	483b      	ldr	r0, [pc, #236]	; (800417c <low_level_init+0x184>)
 8004090:	f7fd feb2 	bl	8001df8 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET 

	/* set MAC hardware address length */
	netif->hwaddr_len = ETH_HWADDR_LEN;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2206      	movs	r2, #6
 8004098:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	/* set MAC hardware address */
	netif->hwaddr[0] = heth.Init.MACAddr[0];
 800409c:	4b37      	ldr	r3, [pc, #220]	; (800417c <low_level_init+0x184>)
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	781a      	ldrb	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	netif->hwaddr[1] = heth.Init.MACAddr[1];
 80040a8:	4b34      	ldr	r3, [pc, #208]	; (800417c <low_level_init+0x184>)
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	785a      	ldrb	r2, [r3, #1]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	netif->hwaddr[2] = heth.Init.MACAddr[2];
 80040b4:	4b31      	ldr	r3, [pc, #196]	; (800417c <low_level_init+0x184>)
 80040b6:	695b      	ldr	r3, [r3, #20]
 80040b8:	789a      	ldrb	r2, [r3, #2]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	netif->hwaddr[3] = heth.Init.MACAddr[3];
 80040c0:	4b2e      	ldr	r3, [pc, #184]	; (800417c <low_level_init+0x184>)
 80040c2:	695b      	ldr	r3, [r3, #20]
 80040c4:	78da      	ldrb	r2, [r3, #3]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	netif->hwaddr[4] = heth.Init.MACAddr[4];
 80040cc:	4b2b      	ldr	r3, [pc, #172]	; (800417c <low_level_init+0x184>)
 80040ce:	695b      	ldr	r3, [r3, #20]
 80040d0:	791a      	ldrb	r2, [r3, #4]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	netif->hwaddr[5] = heth.Init.MACAddr[5];
 80040d8:	4b28      	ldr	r3, [pc, #160]	; (800417c <low_level_init+0x184>)
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	795a      	ldrb	r2, [r3, #5]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

	/* maximum transfer unit */
	netif->mtu = 1500;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80040ea:	855a      	strh	r2, [r3, #42]	; 0x2a

	/* Accept broadcast address and ARP traffic */
	/* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
#if LWIP_ARP
	netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80040f2:	f043 030a 	orr.w	r3, r3, #10
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
#else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

	/* create a binary semaphore used for informing ethernetif of frame reception */
	osSemaphoreDef(SEM);
 80040fe:	2300      	movs	r3, #0
 8004100:	62bb      	str	r3, [r7, #40]	; 0x28
 8004102:	2300      	movs	r3, #0
 8004104:	62fb      	str	r3, [r7, #44]	; 0x2c
	s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8004106:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800410a:	2101      	movs	r1, #1
 800410c:	4618      	mov	r0, r3
 800410e:	f000 fcf5 	bl	8004afc <osSemaphoreCreate>
 8004112:	4602      	mov	r2, r0
 8004114:	4b1f      	ldr	r3, [pc, #124]	; (8004194 <low_level_init+0x19c>)
 8004116:	601a      	str	r2, [r3, #0]

	/* create the task that handles the ETH_MAC */
	osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0,
 8004118:	4b1f      	ldr	r3, [pc, #124]	; (8004198 <low_level_init+0x1a0>)
 800411a:	f107 040c 	add.w	r4, r7, #12
 800411e:	461d      	mov	r5, r3
 8004120:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004122:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004124:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004128:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			INTERFACE_THREAD_STACK_SIZE);
	osThreadCreate(osThread(EthIf), netif);
 800412c:	f107 030c 	add.w	r3, r7, #12
 8004130:	6879      	ldr	r1, [r7, #4]
 8004132:	4618      	mov	r0, r3
 8004134:	f000 fb2f 	bl	8004796 <osThreadCreate>
	/* Enable MAC and DMA transmission and reception */
	HAL_ETH_Start(&heth);
 8004138:	4810      	ldr	r0, [pc, #64]	; (800417c <low_level_init+0x184>)
 800413a:	f7fe f897 	bl	800226c <HAL_ETH_Start>
	/* USER CODE BEGIN PHY_PRE_CONFIG */

	/* USER CODE END PHY_PRE_CONFIG */

	/* Read Register Configuration */
	HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800413e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004142:	461a      	mov	r2, r3
 8004144:	211d      	movs	r1, #29
 8004146:	480d      	ldr	r0, [pc, #52]	; (800417c <low_level_init+0x184>)
 8004148:	f7fd ffc2 	bl	80020d0 <HAL_ETH_ReadPHYRegister>
	regvalue |= (PHY_ISFR_INT4);
 800414c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800414e:	f043 030b 	orr.w	r3, r3, #11
 8004152:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Enable Interrupt on change of link status */
	HAL_ETH_WritePHYRegister(&heth, PHY_ISFR, regvalue);
 8004154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004156:	461a      	mov	r2, r3
 8004158:	211d      	movs	r1, #29
 800415a:	4808      	ldr	r0, [pc, #32]	; (800417c <low_level_init+0x184>)
 800415c:	f7fe f820 	bl	80021a0 <HAL_ETH_WritePHYRegister>

	/* Read Register Configuration */
	HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8004160:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004164:	461a      	mov	r2, r3
 8004166:	211d      	movs	r1, #29
 8004168:	4804      	ldr	r0, [pc, #16]	; (800417c <low_level_init+0x184>)
 800416a:	f7fd ffb1 	bl	80020d0 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

	/* USER CODE BEGIN LOW_LEVEL_INIT */
#if LWIP_PTP
	/* Enable PTP Timestamping */
	ETH_PTPStart(ETH_PTP_FineUpdate);
 800416e:	2001      	movs	r0, #1
 8004170:	f000 f9e6 	bl	8004540 <ETH_PTPStart>
	/* ETH_PTPStart(ETH_PTP_CoarseUpdate); */
#endif
	/* USER CODE END LOW_LEVEL_INIT */
}
 8004174:	bf00      	nop
 8004176:	3740      	adds	r7, #64	; 0x40
 8004178:	46bd      	mov	sp, r7
 800417a:	bdb0      	pop	{r4, r5, r7, pc}
 800417c:	200065c4 	.word	0x200065c4
 8004180:	40028000 	.word	0x40028000
 8004184:	2000660c 	.word	0x2000660c
 8004188:	20004cf4 	.word	0x20004cf4
 800418c:	20004d74 	.word	0x20004d74
 8004190:	20006544 	.word	0x20006544
 8004194:	20000760 	.word	0x20000760
 8004198:	080192e0 	.word	0x080192e0

0800419c <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b08c      	sub	sp, #48	; 0x30
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
	err_t errval;
	struct pbuf *q;
	uint8_t *buffer = (uint8_t*) (heth.TxDesc->Buffer1Addr);
 80041a6:	4b55      	ldr	r3, [pc, #340]	; (80042fc <low_level_output+0x160>)
 80041a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	627b      	str	r3, [r7, #36]	; 0x24
	__IO ETH_DMADescTypeDef *DmaTxDesc;
	uint32_t framelength = 0;
 80041ae:	2300      	movs	r3, #0
 80041b0:	61fb      	str	r3, [r7, #28]
	uint32_t bufferoffset = 0;
 80041b2:	2300      	movs	r3, #0
 80041b4:	61bb      	str	r3, [r7, #24]
	uint32_t byteslefttocopy = 0;
 80041b6:	2300      	movs	r3, #0
 80041b8:	617b      	str	r3, [r7, #20]
	uint32_t payloadoffset = 0;
 80041ba:	2300      	movs	r3, #0
 80041bc:	613b      	str	r3, [r7, #16]
	DmaTxDesc = heth.TxDesc;
 80041be:	4b4f      	ldr	r3, [pc, #316]	; (80042fc <low_level_output+0x160>)
 80041c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c2:	623b      	str	r3, [r7, #32]
	bufferoffset = 0;
 80041c4:	2300      	movs	r3, #0
 80041c6:	61bb      	str	r3, [r7, #24]
	ETH_TimeStamp timeStamp;
#endif
	/* USER CODE END LOW_LEVEL_OUTPUT 1 */

	/* copy frame from pbufs to driver buffers */
	for (q = p; q != NULL; q = q->next)
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80041cc:	e05a      	b.n	8004284 <low_level_output+0xe8>
	{
		/* Is this buffer available? If not, goto error */
		if ((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t) RESET)
 80041ce:	6a3b      	ldr	r3, [r7, #32]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	da03      	bge.n	80041de <low_level_output+0x42>
		{
			errval = ERR_USE;
 80041d6:	23f8      	movs	r3, #248	; 0xf8
 80041d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			goto error;
 80041dc:	e070      	b.n	80042c0 <low_level_output+0x124>
		}

		/* Get bytes in current lwIP buffer */
		byteslefttocopy = q->len;
 80041de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e0:	895b      	ldrh	r3, [r3, #10]
 80041e2:	617b      	str	r3, [r7, #20]
		payloadoffset = 0;
 80041e4:	2300      	movs	r3, #0
 80041e6:	613b      	str	r3, [r7, #16]

		/* Check if the length of data to copy is bigger than Tx buffer size*/
		while ((byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE)
 80041e8:	e02f      	b.n	800424a <low_level_output+0xae>
		{
			/* Copy data to Tx buffer*/
			memcpy((uint8_t*) ((uint8_t*) buffer + bufferoffset),
 80041ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	18d0      	adds	r0, r2, r3
					(uint8_t*) ((uint8_t*) q->payload + payloadoffset),
 80041f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f2:	685a      	ldr	r2, [r3, #4]
			memcpy((uint8_t*) ((uint8_t*) buffer + bufferoffset),
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	18d1      	adds	r1, r2, r3
					(ETH_TX_BUF_SIZE - bufferoffset));
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80041fe:	3304      	adds	r3, #4
			memcpy((uint8_t*) ((uint8_t*) buffer + bufferoffset),
 8004200:	461a      	mov	r2, r3
 8004202:	f014 f87c 	bl	80182fe <memcpy>

			/* Point to next descriptor */
			DmaTxDesc = (ETH_DMADescTypeDef*) (DmaTxDesc->Buffer2NextDescAddr);
 8004206:	6a3b      	ldr	r3, [r7, #32]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	623b      	str	r3, [r7, #32]

			/* Check if the buffer is available */
			if ((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t) RESET)
 800420c:	6a3b      	ldr	r3, [r7, #32]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	da03      	bge.n	800421c <low_level_output+0x80>
			{
				errval = ERR_USE;
 8004214:	23f8      	movs	r3, #248	; 0xf8
 8004216:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				goto error;
 800421a:	e051      	b.n	80042c0 <low_level_output+0x124>
			}

			buffer = (uint8_t*) (DmaTxDesc->Buffer1Addr);
 800421c:	6a3b      	ldr	r3, [r7, #32]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	627b      	str	r3, [r7, #36]	; 0x24

			byteslefttocopy = byteslefttocopy
					- (ETH_TX_BUF_SIZE - bufferoffset);
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	4413      	add	r3, r2
			byteslefttocopy = byteslefttocopy
 8004228:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800422c:	617b      	str	r3, [r7, #20]
			payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800422e:	693a      	ldr	r2, [r7, #16]
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004238:	613b      	str	r3, [r7, #16]
			framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800423a:	69fa      	ldr	r2, [r7, #28]
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004244:	61fb      	str	r3, [r7, #28]
			bufferoffset = 0;
 8004246:	2300      	movs	r3, #0
 8004248:	61bb      	str	r3, [r7, #24]
		while ((byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE)
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	4413      	add	r3, r2
 8004250:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004254:	4293      	cmp	r3, r2
 8004256:	d8c8      	bhi.n	80041ea <low_level_output+0x4e>
		}

		/* Copy the remaining bytes */
		memcpy((uint8_t*) ((uint8_t*) buffer + bufferoffset),
 8004258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	18d0      	adds	r0, r2, r3
				(uint8_t*) ((uint8_t*) q->payload + payloadoffset),
 800425e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004260:	685a      	ldr	r2, [r3, #4]
		memcpy((uint8_t*) ((uint8_t*) buffer + bufferoffset),
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	4413      	add	r3, r2
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	4619      	mov	r1, r3
 800426a:	f014 f848 	bl	80182fe <memcpy>
				byteslefttocopy);
		bufferoffset = bufferoffset + byteslefttocopy;
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	4413      	add	r3, r2
 8004274:	61bb      	str	r3, [r7, #24]
		framelength = framelength + byteslefttocopy;
 8004276:	69fa      	ldr	r2, [r7, #28]
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	4413      	add	r3, r2
 800427c:	61fb      	str	r3, [r7, #28]
	for (q = p; q != NULL; q = q->next)
 800427e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	62bb      	str	r3, [r7, #40]	; 0x28
 8004284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1a1      	bne.n	80041ce <low_level_output+0x32>

	/* Prepare transmit descriptors to give to DMA */
	/* USER CODE BEGIN LOW_LEVEL_OUTPUT 2 */
#if LWIP_PTP
	/* Transmit the packet filling in the packet timestamp. */
	if (HAL_ETH_TransmitFrame_TimeStamp(&heth, framelength, &timeStamp)
 800428a:	f107 0308 	add.w	r3, r7, #8
 800428e:	461a      	mov	r2, r3
 8004290:	69f9      	ldr	r1, [r7, #28]
 8004292:	481a      	ldr	r0, [pc, #104]	; (80042fc <low_level_output+0x160>)
 8004294:	f7fc ffc4 	bl	8001220 <HAL_ETH_TransmitFrame_TimeStamp>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <low_level_output+0x10a>
			!= HAL_OK)
	{
		errval = ERR_IF;
 800429e:	23f4      	movs	r3, #244	; 0xf4
 80042a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		goto error;
 80042a4:	e00c      	b.n	80042c0 <low_level_output+0x124>
	}
	else
	{
		/* Fill in the time stamp information. */
		p->time_sec = timeStamp.TimeStampHigh;
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	611a      	str	r2, [r3, #16]
		p->time_nsec = ETH_PTPSubSecond2NanoSecond(timeStamp.TimeStampLow);
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7ff fd3c 	bl	8003d2c <ETH_PTPSubSecond2NanoSecond>
 80042b4:	4602      	mov	r2, r0
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	615a      	str	r2, [r3, #20]
/* USER CODE END LOW_LEVEL_OUTPUT 2 */
  HAL_ETH_TransmitFrame(&heth, framelength);
/* USER CODE BEGIN LOW_LEVEL_OUTPUT 3 */
#endif
	/* USER CODE END LOW_LEVEL_OUTPUT 3 */
	errval = ERR_OK;
 80042ba:	2300      	movs	r3, #0
 80042bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	error:

	/* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
	if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t) RESET)
 80042c0:	4b0e      	ldr	r3, [pc, #56]	; (80042fc <low_level_output+0x160>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042c8:	3314      	adds	r3, #20
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0320 	and.w	r3, r3, #32
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d00d      	beq.n	80042f0 <low_level_output+0x154>
	{
		/* Clear TUS ETHERNET DMA flag */
		heth.Instance->DMASR = ETH_DMASR_TUS;
 80042d4:	4b09      	ldr	r3, [pc, #36]	; (80042fc <low_level_output+0x160>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042dc:	3314      	adds	r3, #20
 80042de:	2220      	movs	r2, #32
 80042e0:	601a      	str	r2, [r3, #0]

		/* Resume DMA transmission*/
		heth.Instance->DMATPDR = 0;
 80042e2:	4b06      	ldr	r3, [pc, #24]	; (80042fc <low_level_output+0x160>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042ea:	3304      	adds	r3, #4
 80042ec:	2200      	movs	r2, #0
 80042ee:	601a      	str	r2, [r3, #0]
	}
	return errval;
 80042f0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3730      	adds	r7, #48	; 0x30
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	200065c4 	.word	0x200065c4

08004300 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
 */
static struct pbuf* low_level_input(struct netif *netif)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b08c      	sub	sp, #48	; 0x30
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
	struct pbuf *p = NULL;
 8004308:	2300      	movs	r3, #0
 800430a:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct pbuf *q = NULL;
 800430c:	2300      	movs	r3, #0
 800430e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t len = 0;
 8004310:	2300      	movs	r3, #0
 8004312:	81fb      	strh	r3, [r7, #14]
	uint8_t *buffer;
	__IO ETH_DMADescTypeDef *dmarxdesc;
	uint32_t bufferoffset = 0;
 8004314:	2300      	movs	r3, #0
 8004316:	61fb      	str	r3, [r7, #28]
	uint32_t payloadoffset = 0;
 8004318:	2300      	movs	r3, #0
 800431a:	61bb      	str	r3, [r7, #24]
	uint32_t byteslefttocopy = 0;
 800431c:	2300      	movs	r3, #0
 800431e:	617b      	str	r3, [r7, #20]
	uint32_t i = 0;
 8004320:	2300      	movs	r3, #0
 8004322:	613b      	str	r3, [r7, #16]

	/* get received frame */
	if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8004324:	4856      	ldr	r0, [pc, #344]	; (8004480 <low_level_input+0x180>)
 8004326:	f7fd fdd3 	bl	8001ed0 <HAL_ETH_GetReceivedFrame_IT>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d001      	beq.n	8004334 <low_level_input+0x34>
		return NULL;
 8004330:	2300      	movs	r3, #0
 8004332:	e0a0      	b.n	8004476 <low_level_input+0x176>

	/* Obtain the size of the packet and put it into the "len" variable. */
	len = heth.RxFrameInfos.length;
 8004334:	4b52      	ldr	r3, [pc, #328]	; (8004480 <low_level_input+0x180>)
 8004336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004338:	81fb      	strh	r3, [r7, #14]
	buffer = (uint8_t*) heth.RxFrameInfos.buffer;
 800433a:	4b51      	ldr	r3, [pc, #324]	; (8004480 <low_level_input+0x180>)
 800433c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433e:	627b      	str	r3, [r7, #36]	; 0x24

	if (len > 0)
 8004340:	89fb      	ldrh	r3, [r7, #14]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d006      	beq.n	8004354 <low_level_input+0x54>
	{
		/* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
		p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8004346:	89fb      	ldrh	r3, [r7, #14]
 8004348:	2203      	movs	r2, #3
 800434a:	4619      	mov	r1, r3
 800434c:	2004      	movs	r0, #4
 800434e:	f004 ffe5 	bl	800931c <pbuf_alloc>
 8004352:	62f8      	str	r0, [r7, #44]	; 0x2c
	}

	if (p != NULL)
 8004354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004356:	2b00      	cmp	r3, #0
 8004358:	d04b      	beq.n	80043f2 <low_level_input+0xf2>
	{
		dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800435a:	4b49      	ldr	r3, [pc, #292]	; (8004480 <low_level_input+0x180>)
 800435c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435e:	623b      	str	r3, [r7, #32]
		bufferoffset = 0;
 8004360:	2300      	movs	r3, #0
 8004362:	61fb      	str	r3, [r7, #28]
//	for(int i = 0;i<len; i++){
//		printf("%x ",buffer[i]);
//	}
//	printf("\n");

		for (q = p; q != NULL; q = q->next)
 8004364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004366:	62bb      	str	r3, [r7, #40]	; 0x28
 8004368:	e040      	b.n	80043ec <low_level_input+0xec>
		{
			byteslefttocopy = q->len;
 800436a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436c:	895b      	ldrh	r3, [r3, #10]
 800436e:	617b      	str	r3, [r7, #20]
			payloadoffset = 0;
 8004370:	2300      	movs	r3, #0
 8004372:	61bb      	str	r3, [r7, #24]

			/* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
			while ((byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE)
 8004374:	e021      	b.n	80043ba <low_level_input+0xba>
			{
				/* Copy data to pbuf */
				memcpy((uint8_t*) ((uint8_t*) q->payload + payloadoffset),
 8004376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	18d0      	adds	r0, r2, r3
						(uint8_t*) ((uint8_t*) buffer + bufferoffset),
 800437e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004380:	69fb      	ldr	r3, [r7, #28]
 8004382:	18d1      	adds	r1, r2, r3
						(ETH_RX_BUF_SIZE - bufferoffset));
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800438a:	3304      	adds	r3, #4
				memcpy((uint8_t*) ((uint8_t*) q->payload + payloadoffset),
 800438c:	461a      	mov	r2, r3
 800438e:	f013 ffb6 	bl	80182fe <memcpy>

				/* Point to next descriptor */
				dmarxdesc =
						(ETH_DMADescTypeDef*) (dmarxdesc->Buffer2NextDescAddr);
 8004392:	6a3b      	ldr	r3, [r7, #32]
 8004394:	68db      	ldr	r3, [r3, #12]
				dmarxdesc =
 8004396:	623b      	str	r3, [r7, #32]
				buffer = (uint8_t*) (dmarxdesc->Buffer1Addr);
 8004398:	6a3b      	ldr	r3, [r7, #32]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	627b      	str	r3, [r7, #36]	; 0x24

				byteslefttocopy = byteslefttocopy
						- (ETH_RX_BUF_SIZE - bufferoffset);
 800439e:	69fa      	ldr	r2, [r7, #28]
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	4413      	add	r3, r2
				byteslefttocopy = byteslefttocopy
 80043a4:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80043a8:	617b      	str	r3, [r7, #20]
				payloadoffset = payloadoffset
						+ (ETH_RX_BUF_SIZE - bufferoffset);
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	1ad3      	subs	r3, r2, r3
				payloadoffset = payloadoffset
 80043b0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80043b4:	61bb      	str	r3, [r7, #24]
				bufferoffset = 0;
 80043b6:	2300      	movs	r3, #0
 80043b8:	61fb      	str	r3, [r7, #28]
			while ((byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE)
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	4413      	add	r3, r2
 80043c0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d8d6      	bhi.n	8004376 <low_level_input+0x76>
			}
			/* Copy remaining data in pbuf */
			memcpy((uint8_t*) ((uint8_t*) q->payload + payloadoffset),
 80043c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ca:	685a      	ldr	r2, [r3, #4]
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	18d0      	adds	r0, r2, r3
					(uint8_t*) ((uint8_t*) buffer + bufferoffset),
 80043d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	4413      	add	r3, r2
			memcpy((uint8_t*) ((uint8_t*) q->payload + payloadoffset),
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	4619      	mov	r1, r3
 80043da:	f013 ff90 	bl	80182fe <memcpy>
					byteslefttocopy);
			bufferoffset = bufferoffset + byteslefttocopy;
 80043de:	69fa      	ldr	r2, [r7, #28]
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	4413      	add	r3, r2
 80043e4:	61fb      	str	r3, [r7, #28]
		for (q = p; q != NULL; q = q->next)
 80043e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80043ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1bb      	bne.n	800436a <low_level_input+0x6a>
		}

	}
	/* USER CODE BEGIN LOW_LEVEL_INPUT 1 */
#if LWIP_PTP
	dmarxdesc = heth.RxFrameInfos.LSRxDesc;
 80043f2:	4b23      	ldr	r3, [pc, #140]	; (8004480 <low_level_input+0x180>)
 80043f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f6:	623b      	str	r3, [r7, #32]
	p->time_sec = dmarxdesc->TimeStampHigh;
 80043f8:	6a3b      	ldr	r3, [r7, #32]
 80043fa:	69da      	ldr	r2, [r3, #28]
 80043fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043fe:	611a      	str	r2, [r3, #16]
	p->time_nsec = ETH_PTPSubSecond2NanoSecond(dmarxdesc->TimeStampLow);
 8004400:	6a3b      	ldr	r3, [r7, #32]
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	4618      	mov	r0, r3
 8004406:	f7ff fc91 	bl	8003d2c <ETH_PTPSubSecond2NanoSecond>
 800440a:	4602      	mov	r2, r0
 800440c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800440e:	615a      	str	r2, [r3, #20]
#endif
	/* USER CODE END LOW_LEVEL_INPUT 1 */

	/* Release descriptors to DMA */
	/* Point to first descriptor */
	dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004410:	4b1b      	ldr	r3, [pc, #108]	; (8004480 <low_level_input+0x180>)
 8004412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004414:	623b      	str	r3, [r7, #32]
	/* Set Own bit in Rx descriptors: gives the buffers back to DMA */
	for (i = 0; i < heth.RxFrameInfos.SegCount; i++)
 8004416:	2300      	movs	r3, #0
 8004418:	613b      	str	r3, [r7, #16]
 800441a:	e00b      	b.n	8004434 <low_level_input+0x134>
	{
		dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800441c:	6a3b      	ldr	r3, [r7, #32]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004424:	6a3b      	ldr	r3, [r7, #32]
 8004426:	601a      	str	r2, [r3, #0]
		dmarxdesc = (ETH_DMADescTypeDef*) (dmarxdesc->Buffer2NextDescAddr);
 8004428:	6a3b      	ldr	r3, [r7, #32]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	623b      	str	r3, [r7, #32]
	for (i = 0; i < heth.RxFrameInfos.SegCount; i++)
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	3301      	adds	r3, #1
 8004432:	613b      	str	r3, [r7, #16]
 8004434:	4b12      	ldr	r3, [pc, #72]	; (8004480 <low_level_input+0x180>)
 8004436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	429a      	cmp	r2, r3
 800443c:	d3ee      	bcc.n	800441c <low_level_input+0x11c>
	}

	/* Clear Segment_Count */
	heth.RxFrameInfos.SegCount = 0;
 800443e:	4b10      	ldr	r3, [pc, #64]	; (8004480 <low_level_input+0x180>)
 8004440:	2200      	movs	r2, #0
 8004442:	639a      	str	r2, [r3, #56]	; 0x38

	/* When Rx Buffer unavailable flag is set: clear it and resume reception */
	if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t) RESET)
 8004444:	4b0e      	ldr	r3, [pc, #56]	; (8004480 <low_level_input+0x180>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800444c:	3314      	adds	r3, #20
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00d      	beq.n	8004474 <low_level_input+0x174>
	{
		/* Clear RBUS ETHERNET DMA flag */
		heth.Instance->DMASR = ETH_DMASR_RBUS;
 8004458:	4b09      	ldr	r3, [pc, #36]	; (8004480 <low_level_input+0x180>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004460:	3314      	adds	r3, #20
 8004462:	2280      	movs	r2, #128	; 0x80
 8004464:	601a      	str	r2, [r3, #0]
		/* Resume DMA reception */
		heth.Instance->DMARPDR = 0;
 8004466:	4b06      	ldr	r3, [pc, #24]	; (8004480 <low_level_input+0x180>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800446e:	3308      	adds	r3, #8
 8004470:	2200      	movs	r2, #0
 8004472:	601a      	str	r2, [r3, #0]
	}
	return p;
 8004474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004476:	4618      	mov	r0, r3
 8004478:	3730      	adds	r7, #48	; 0x30
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	200065c4 	.word	0x200065c4

08004484 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const *argument)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
	struct pbuf *p;
	struct netif *netif = (struct netif*) argument;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	60fb      	str	r3, [r7, #12]

	for (;;)
	{
		if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004490:	4b0f      	ldr	r3, [pc, #60]	; (80044d0 <ethernetif_input+0x4c>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f04f 31ff 	mov.w	r1, #4294967295
 8004498:	4618      	mov	r0, r3
 800449a:	f000 fb63 	bl	8004b64 <osSemaphoreWait>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1f5      	bne.n	8004490 <ethernetif_input+0xc>
		{
			do
			{
				p = low_level_input(netif);
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f7ff ff2b 	bl	8004300 <low_level_input>
 80044aa:	60b8      	str	r0, [r7, #8]
				if (p != NULL)
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00a      	beq.n	80044c8 <ethernetif_input+0x44>
				{
					if (netif->input(p, netif) != ERR_OK)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	68f9      	ldr	r1, [r7, #12]
 80044b8:	68b8      	ldr	r0, [r7, #8]
 80044ba:	4798      	blx	r3
 80044bc:	4603      	mov	r3, r0
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d002      	beq.n	80044c8 <ethernetif_input+0x44>
					{
						pbuf_free(p);
 80044c2:	68b8      	ldr	r0, [r7, #8]
 80044c4:	f005 fa9c 	bl	8009a00 <pbuf_free>
					}
				}
			} while (p != NULL);
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1ea      	bne.n	80044a4 <ethernetif_input+0x20>
		if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80044ce:	e7df      	b.n	8004490 <ethernetif_input+0xc>
 80044d0:	20000760 	.word	0x20000760

080044d4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
	LWIP_ASSERT("netif != NULL", (netif != NULL));
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d106      	bne.n	80044f0 <ethernetif_init+0x1c>
 80044e2:	4b0e      	ldr	r3, [pc, #56]	; (800451c <ethernetif_init+0x48>)
 80044e4:	f240 22b1 	movw	r2, #689	; 0x2b1
 80044e8:	490d      	ldr	r1, [pc, #52]	; (8004520 <ethernetif_init+0x4c>)
 80044ea:	480e      	ldr	r0, [pc, #56]	; (8004524 <ethernetif_init+0x50>)
 80044ec:	f013 ff1a 	bl	8018324 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

	netif->name[0] = IFNAME0;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2273      	movs	r2, #115	; 0x73
 80044f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	netif->name[1] = IFNAME1;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2274      	movs	r2, #116	; 0x74
 80044fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	 * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
	netif->output = etharp_output;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a09      	ldr	r2, [pc, #36]	; (8004528 <ethernetif_init+0x54>)
 8004504:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

	netif->linkoutput = low_level_output;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a08      	ldr	r2, [pc, #32]	; (800452c <ethernetif_init+0x58>)
 800450a:	619a      	str	r2, [r3, #24]

	/* initialize the hardware */
	low_level_init(netif);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f7ff fd73 	bl	8003ff8 <low_level_init>

	return ERR_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3708      	adds	r7, #8
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	08019350 	.word	0x08019350
 8004520:	0801936c 	.word	0x0801936c
 8004524:	0801937c 	.word	0x0801937c
 8004528:	08010dc1 	.word	0x08010dc1
 800452c:	0800419d 	.word	0x0800419d

08004530 <sys_now>:
 *         when LWIP_TIMERS == 1 and NO_SYS == 1
 * @param  None
 * @retval Time
 */
u32_t sys_now(void)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8004534:	f7fd f95e 	bl	80017f4 <HAL_GetTick>
 8004538:	4603      	mov	r3, r0
}
 800453a:	4618      	mov	r0, r3
 800453c:	bd80      	pop	{r7, pc}
	...

08004540 <ETH_PTPStart>:
 *                       ETH_PTP_CoarseUpdate : Coarse Update method
 * Output         : None
 * Return         : None
 *******************************************************************************/
static void ETH_PTPStart(uint32_t UpdateMethod)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_ETH_PTP_UPDATE(UpdateMethod));

	/* Mask the Time stamp trigger interrupt by setting bit 9 in the MACIMR register. */
	ETH_MACITConfig(ETH_MAC_IT_TST, DISABLE);
 8004548:	2100      	movs	r1, #0
 800454a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800454e:	f7fc fe49 	bl	80011e4 <ETH_MACITConfig>

	/* Program Time stamp register bit 0 to enable time stamping. */
	ETH_PTPTimeStampCmd(ENABLE);
 8004552:	2001      	movs	r0, #1
 8004554:	f7fc ffc6 	bl	80014e4 <ETH_PTPTimeStampCmd>

	/* Program the Subsecond increment register based on the PTP clock frequency. */
	ETH_SetPTPSubSecondIncrement(ADJ_FREQ_BASE_INCREMENT); /* to achieve 20 ns accuracy, the value is ~ 43 */
 8004558:	200c      	movs	r0, #12
 800455a:	f7fc ffff 	bl	800155c <ETH_SetPTPSubSecondIncrement>

	if (UpdateMethod == ETH_PTP_FineUpdate)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d10b      	bne.n	800457c <ETH_PTPStart+0x3c>
	{
		/* If you are using the Fine correction method, program the Time stamp addend register
		 * and set Time stamp control register bit 5 (addend register update). */
		ETH_SetPTPTimeStampAddend(ADJ_FREQ_BASE_ADDEND);
 8004564:	480e      	ldr	r0, [pc, #56]	; (80045a0 <ETH_PTPStart+0x60>)
 8004566:	f7fd f821 	bl	80015ac <ETH_SetPTPTimeStampAddend>
		ETH_EnablePTPTimeStampAddend();
 800456a:	f7fc ff7b 	bl	8001464 <ETH_EnablePTPTimeStampAddend>

		/* Poll the Time stamp control register until bit 5 is cleared. */
		while (ETH_GetPTPFlagStatus(ETH_PTP_FLAG_TSARU) == SET)
 800456e:	bf00      	nop
 8004570:	2020      	movs	r0, #32
 8004572:	f7fc ffd9 	bl	8001528 <ETH_GetPTPFlagStatus>
 8004576:	4603      	mov	r3, r0
 8004578:	2b01      	cmp	r3, #1
 800457a:	d0f9      	beq.n	8004570 <ETH_PTPStart+0x30>
			;
	}

	/* To select the Fine correction method (if required),
	 * program Time stamp control register  bit 1. */
	ETH_PTPUpdateMethodConfig(UpdateMethod);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f7fc ff91 	bl	80014a4 <ETH_PTPUpdateMethodConfig>

	/* Program the Time stamp high update and Time stamp low update registers
	 * with the appropriate time value. */
	ETH_SetPTPTimeStampUpdate(ETH_PTP_PositiveTime, 0, 0);
 8004582:	2200      	movs	r2, #0
 8004584:	2100      	movs	r1, #0
 8004586:	2000      	movs	r0, #0
 8004588:	f7fc fff8 	bl	800157c <ETH_SetPTPTimeStampUpdate>

	/* Set Time stamp control register bit 2 (Time stamp init). */
	ETH_InitializePTPTimeStamp();
 800458c:	f7fc ff7a 	bl	8001484 <ETH_InitializePTPTimeStamp>

	/* The enhanced descriptor format is enabled and the descriptor size is
	 * increased to 32 bytes (8 DWORDS). This is required when time stamping 
	 * is activated above. */
	ETH_EnhancedDescriptorCmd(ENABLE);
 8004590:	2001      	movs	r0, #1
 8004592:	f7fc fe03 	bl	800119c <ETH_EnhancedDescriptorCmd>

	/* The Time stamp counter starts operation as soon as it is initialized
	 * with the value written in the Time stamp update register. */
}
 8004596:	bf00      	nop
 8004598:	3708      	adds	r7, #8
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	fe843e9e 	.word	0xfe843e9e

080045a4 <ETH_PTPTime_AdjFreq>:
 * Input          : Correction value in thousandth of ppm (Adj*10^9)
 * Output         : None
 * Return         : None
 *******************************************************************************/
void ETH_PTPTime_AdjFreq(int32_t Adj)
{
 80045a4:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80045a8:	b084      	sub	sp, #16
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
	 addend += ADJ_FREQ_BASE_ADDEND;
	 */

	/* 32bit estimation
	 ADJ_LIMIT = ((1l<<63)/275/ADJ_FREQ_BASE_ADDEND) = 11258181 = 11 258 ppm*/
	if (Adj > 5120000)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a39      	ldr	r2, [pc, #228]	; (8004698 <ETH_PTPTime_AdjFreq+0xf4>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	dd01      	ble.n	80045ba <ETH_PTPTime_AdjFreq+0x16>
		Adj = 5120000;
 80045b6:	4b38      	ldr	r3, [pc, #224]	; (8004698 <ETH_PTPTime_AdjFreq+0xf4>)
 80045b8:	607b      	str	r3, [r7, #4]
	if (Adj < -5120000)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a37      	ldr	r2, [pc, #220]	; (800469c <ETH_PTPTime_AdjFreq+0xf8>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	da01      	bge.n	80045c6 <ETH_PTPTime_AdjFreq+0x22>
		Adj = -5120000;
 80045c2:	4b36      	ldr	r3, [pc, #216]	; (800469c <ETH_PTPTime_AdjFreq+0xf8>)
 80045c4:	607b      	str	r3, [r7, #4]

	addend = ((((275LL * Adj) >> 8) * (ADJ_FREQ_BASE_ADDEND >> 24)) >> 6)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	461d      	mov	r5, r3
 80045ca:	ea4f 76e5 	mov.w	r6, r5, asr #31
 80045ce:	46ab      	mov	fp, r5
 80045d0:	46b4      	mov	ip, r6
 80045d2:	f04f 0100 	mov.w	r1, #0
 80045d6:	f04f 0200 	mov.w	r2, #0
 80045da:	ea4f 120c 	mov.w	r2, ip, lsl #4
 80045de:	ea42 721b 	orr.w	r2, r2, fp, lsr #28
 80045e2:	ea4f 110b 	mov.w	r1, fp, lsl #4
 80045e6:	468b      	mov	fp, r1
 80045e8:	4694      	mov	ip, r2
 80045ea:	eb1b 0b05 	adds.w	fp, fp, r5
 80045ee:	eb4c 0c06 	adc.w	ip, ip, r6
 80045f2:	f04f 0100 	mov.w	r1, #0
 80045f6:	f04f 0200 	mov.w	r2, #0
 80045fa:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 80045fe:	ea42 725b 	orr.w	r2, r2, fp, lsr #29
 8004602:	ea4f 01cb 	mov.w	r1, fp, lsl #3
 8004606:	468b      	mov	fp, r1
 8004608:	4694      	mov	ip, r2
 800460a:	eb1b 0b05 	adds.w	fp, fp, r5
 800460e:	eb4c 0c06 	adc.w	ip, ip, r6
 8004612:	eb1b 030b 	adds.w	r3, fp, fp
 8004616:	eb4c 040c 	adc.w	r4, ip, ip
 800461a:	469b      	mov	fp, r3
 800461c:	46a4      	mov	ip, r4
 800461e:	eb1b 0305 	adds.w	r3, fp, r5
 8004622:	eb4c 0406 	adc.w	r4, ip, r6
 8004626:	f04f 0100 	mov.w	r1, #0
 800462a:	f04f 0200 	mov.w	r2, #0
 800462e:	0a19      	lsrs	r1, r3, #8
 8004630:	ea41 6104 	orr.w	r1, r1, r4, lsl #24
 8004634:	1222      	asrs	r2, r4, #8
 8004636:	468b      	mov	fp, r1
 8004638:	4694      	mov	ip, r2
 800463a:	f04f 0500 	mov.w	r5, #0
 800463e:	f04f 0600 	mov.w	r6, #0
 8004642:	ea4f 16cc 	mov.w	r6, ip, lsl #7
 8004646:	ea46 665b 	orr.w	r6, r6, fp, lsr #25
 800464a:	ea4f 15cb 	mov.w	r5, fp, lsl #7
 800464e:	46ab      	mov	fp, r5
 8004650:	46b4      	mov	ip, r6
 8004652:	ebbb 0b01 	subs.w	fp, fp, r1
 8004656:	eb6c 0c02 	sbc.w	ip, ip, r2
 800465a:	eb1b 030b 	adds.w	r3, fp, fp
 800465e:	eb4c 040c 	adc.w	r4, ip, ip
 8004662:	469b      	mov	fp, r3
 8004664:	46a4      	mov	ip, r4
 8004666:	4659      	mov	r1, fp
 8004668:	4662      	mov	r2, ip
 800466a:	f04f 0300 	mov.w	r3, #0
 800466e:	f04f 0400 	mov.w	r4, #0
 8004672:	098b      	lsrs	r3, r1, #6
 8004674:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8004678:	1194      	asrs	r4, r2, #6
			+ ADJ_FREQ_BASE_ADDEND;
 800467a:	461a      	mov	r2, r3
	addend = ((((275LL * Adj) >> 8) * (ADJ_FREQ_BASE_ADDEND >> 24)) >> 6)
 800467c:	4b08      	ldr	r3, [pc, #32]	; (80046a0 <ETH_PTPTime_AdjFreq+0xfc>)
 800467e:	4413      	add	r3, r2
 8004680:	60fb      	str	r3, [r7, #12]
	//printf("addend:%x  delta:%d\n",addend,addend-ADJ_FREQ_BASE_ADDEND);
	/* Reprogram the Time stamp addend register with new Rate value and set ETH_TPTSCR */
	ETH_SetPTPTimeStampAddend((uint32_t) addend);
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	f7fc ff92 	bl	80015ac <ETH_SetPTPTimeStampAddend>
	ETH_EnablePTPTimeStampAddend();
 8004688:	f7fc feec 	bl	8001464 <ETH_EnablePTPTimeStampAddend>
}
 800468c:	bf00      	nop
 800468e:	3710      	adds	r7, #16
 8004690:	46bd      	mov	sp, r7
 8004692:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8004696:	bf00      	nop
 8004698:	004e2000 	.word	0x004e2000
 800469c:	ffb1e000 	.word	0xffb1e000
 80046a0:	fe843e9e 	.word	0xfe843e9e

080046a4 <ETH_PTPTime_SetTime>:
 * Input          : Time with sign
 * Output         : None
 * Return         : None
 *******************************************************************************/
void ETH_PTPTime_SetTime(struct ptptime_t *timestamp)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
	uint32_t SecondValue;
	uint32_t NanoSecondValue;
	uint32_t SubSecondValue;

	/* determine sign and correct Second and Nanosecond values */
	if (timestamp->tv_sec < 0
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	db07      	blt.n	80046c4 <ETH_PTPTime_SetTime+0x20>
			|| (timestamp->tv_sec == 0 && timestamp->tv_nsec < 0))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10f      	bne.n	80046dc <ETH_PTPTime_SetTime+0x38>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	da0b      	bge.n	80046dc <ETH_PTPTime_SetTime+0x38>
	{
		Sign = ETH_PTP_NegativeTime;
 80046c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80046c8:	617b      	str	r3, [r7, #20]
		SecondValue = -timestamp->tv_sec;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	425b      	negs	r3, r3
 80046d0:	613b      	str	r3, [r7, #16]
		NanoSecondValue = -timestamp->tv_nsec;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	425b      	negs	r3, r3
 80046d8:	60fb      	str	r3, [r7, #12]
 80046da:	e007      	b.n	80046ec <ETH_PTPTime_SetTime+0x48>
	}
	else
	{
		Sign = ETH_PTP_PositiveTime;
 80046dc:	2300      	movs	r3, #0
 80046de:	617b      	str	r3, [r7, #20]
		SecondValue = timestamp->tv_sec;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	613b      	str	r3, [r7, #16]
		NanoSecondValue = timestamp->tv_nsec;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	60fb      	str	r3, [r7, #12]
	}

	/* convert nanosecond to subseconds */
	SubSecondValue = ETH_PTPNanoSecond2SubSecond(NanoSecondValue);
 80046ec:	68f8      	ldr	r0, [r7, #12]
 80046ee:	f7ff fb47 	bl	8003d80 <ETH_PTPNanoSecond2SubSecond>
 80046f2:	60b8      	str	r0, [r7, #8]

	/* Write the offset (positive or negative) in the Time stamp update high and low registers. */
	ETH_SetPTPTimeStampUpdate(Sign, SecondValue, SubSecondValue);
 80046f4:	68ba      	ldr	r2, [r7, #8]
 80046f6:	6939      	ldr	r1, [r7, #16]
 80046f8:	6978      	ldr	r0, [r7, #20]
 80046fa:	f7fc ff3f 	bl	800157c <ETH_SetPTPTimeStampUpdate>
	/* Set Time stamp control register bit 2 (Time stamp init). */
	ETH_InitializePTPTimeStamp();
 80046fe:	f7fc fec1 	bl	8001484 <ETH_InitializePTPTimeStamp>
	/* The Time stamp counter starts operation as soon as it is initialized
	 * with the value written in the Time stamp update register. */
	while (ETH_GetPTPFlagStatus(ETH_PTP_FLAG_TSSTI) == SET)
 8004702:	bf00      	nop
 8004704:	2004      	movs	r0, #4
 8004706:	f7fc ff0f 	bl	8001528 <ETH_GetPTPFlagStatus>
 800470a:	4603      	mov	r3, r0
 800470c:	2b01      	cmp	r3, #1
 800470e:	d0f9      	beq.n	8004704 <ETH_PTPTime_SetTime+0x60>
		;
}
 8004710:	bf00      	nop
 8004712:	3718      	adds	r7, #24
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	4603      	mov	r3, r0
 8004720:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004722:	2300      	movs	r3, #0
 8004724:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004726:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800472a:	2b84      	cmp	r3, #132	; 0x84
 800472c:	d005      	beq.n	800473a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800472e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	4413      	add	r3, r2
 8004736:	3303      	adds	r3, #3
 8004738:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800473a:	68fb      	ldr	r3, [r7, #12]
}
 800473c:	4618      	mov	r0, r3
 800473e:	3714      	adds	r7, #20
 8004740:	46bd      	mov	sp, r7
 8004742:	bc80      	pop	{r7}
 8004744:	4770      	bx	lr

08004746 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004746:	b480      	push	{r7}
 8004748:	b083      	sub	sp, #12
 800474a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800474c:	f3ef 8305 	mrs	r3, IPSR
 8004750:	607b      	str	r3, [r7, #4]
  return(result);
 8004752:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004754:	2b00      	cmp	r3, #0
 8004756:	bf14      	ite	ne
 8004758:	2301      	movne	r3, #1
 800475a:	2300      	moveq	r3, #0
 800475c:	b2db      	uxtb	r3, r3
}
 800475e:	4618      	mov	r0, r3
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	bc80      	pop	{r7}
 8004766:	4770      	bx	lr

08004768 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800476c:	f001 fd46 	bl	80061fc <vTaskStartScheduler>
  
  return osOK;
 8004770:	2300      	movs	r3, #0
}
 8004772:	4618      	mov	r0, r3
 8004774:	bd80      	pop	{r7, pc}

08004776 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800477a:	f7ff ffe4 	bl	8004746 <inHandlerMode>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d003      	beq.n	800478c <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8004784:	f001 fe56 	bl	8006434 <xTaskGetTickCountFromISR>
 8004788:	4603      	mov	r3, r0
 800478a:	e002      	b.n	8004792 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800478c:	f001 fe44 	bl	8006418 <xTaskGetTickCount>
 8004790:	4603      	mov	r3, r0
  }
}
 8004792:	4618      	mov	r0, r3
 8004794:	bd80      	pop	{r7, pc}

08004796 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004796:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004798:	b089      	sub	sp, #36	; 0x24
 800479a:	af04      	add	r7, sp, #16
 800479c:	6078      	str	r0, [r7, #4]
 800479e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d020      	beq.n	80047ea <osThreadCreate+0x54>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d01c      	beq.n	80047ea <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685c      	ldr	r4, [r3, #4]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681d      	ldr	r5, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	691e      	ldr	r6, [r3, #16]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7ff ffa8 	bl	8004718 <makeFreeRtosPriority>
 80047c8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80047d2:	9202      	str	r2, [sp, #8]
 80047d4:	9301      	str	r3, [sp, #4]
 80047d6:	9100      	str	r1, [sp, #0]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	4632      	mov	r2, r6
 80047dc:	4629      	mov	r1, r5
 80047de:	4620      	mov	r0, r4
 80047e0:	f001 fb52 	bl	8005e88 <xTaskCreateStatic>
 80047e4:	4603      	mov	r3, r0
 80047e6:	60fb      	str	r3, [r7, #12]
 80047e8:	e01c      	b.n	8004824 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685c      	ldr	r4, [r3, #4]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80047f6:	b29e      	uxth	r6, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80047fe:	4618      	mov	r0, r3
 8004800:	f7ff ff8a 	bl	8004718 <makeFreeRtosPriority>
 8004804:	4602      	mov	r2, r0
 8004806:	f107 030c 	add.w	r3, r7, #12
 800480a:	9301      	str	r3, [sp, #4]
 800480c:	9200      	str	r2, [sp, #0]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	4632      	mov	r2, r6
 8004812:	4629      	mov	r1, r5
 8004814:	4620      	mov	r0, r4
 8004816:	f001 fb90 	bl	8005f3a <xTaskCreate>
 800481a:	4603      	mov	r3, r0
 800481c:	2b01      	cmp	r3, #1
 800481e:	d001      	beq.n	8004824 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004820:	2300      	movs	r3, #0
 8004822:	e000      	b.n	8004826 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004824:	68fb      	ldr	r3, [r7, #12]
}
 8004826:	4618      	mov	r0, r3
 8004828:	3714      	adds	r7, #20
 800482a:	46bd      	mov	sp, r7
 800482c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800482e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b084      	sub	sp, #16
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d001      	beq.n	8004844 <osDelay+0x16>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	e000      	b.n	8004846 <osDelay+0x18>
 8004844:	2301      	movs	r3, #1
 8004846:	4618      	mov	r0, r3
 8004848:	f001 fca4 	bl	8006194 <vTaskDelay>
  
  return osOK;
 800484c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800484e:	4618      	mov	r0, r3
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
	...

08004858 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b086      	sub	sp, #24
 800485c:	af02      	add	r7, sp, #8
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	460b      	mov	r3, r1
 8004862:	607a      	str	r2, [r7, #4]
 8004864:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d013      	beq.n	8004896 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 800486e:	7afb      	ldrb	r3, [r7, #11]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d101      	bne.n	8004878 <osTimerCreate+0x20>
 8004874:	2101      	movs	r1, #1
 8004876:	e000      	b.n	800487a <osTimerCreate+0x22>
 8004878:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 8004882:	9201      	str	r2, [sp, #4]
 8004884:	9300      	str	r3, [sp, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	460a      	mov	r2, r1
 800488a:	2101      	movs	r1, #1
 800488c:	480b      	ldr	r0, [pc, #44]	; (80048bc <osTimerCreate+0x64>)
 800488e:	f002 fbaa 	bl	8006fe6 <xTimerCreateStatic>
 8004892:	4603      	mov	r3, r0
 8004894:	e00e      	b.n	80048b4 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8004896:	7afb      	ldrb	r3, [r7, #11]
 8004898:	2b01      	cmp	r3, #1
 800489a:	d101      	bne.n	80048a0 <osTimerCreate+0x48>
 800489c:	2201      	movs	r2, #1
 800489e:	e000      	b.n	80048a2 <osTimerCreate+0x4a>
 80048a0:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 80048a6:	9300      	str	r3, [sp, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2101      	movs	r1, #1
 80048ac:	4803      	ldr	r0, [pc, #12]	; (80048bc <osTimerCreate+0x64>)
 80048ae:	f002 fb79 	bl	8006fa4 <xTimerCreate>
 80048b2:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	080193a4 	.word	0x080193a4

080048c0 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b088      	sub	sp, #32
 80048c4:	af02      	add	r7, sp, #8
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 80048ca:	2300      	movs	r3, #0
 80048cc:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 80048ce:	2300      	movs	r3, #0
 80048d0:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d101      	bne.n	80048e0 <osTimerStart+0x20>
    ticks = 1;
 80048dc:	2301      	movs	r3, #1
 80048de:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 80048e0:	f7ff ff31 	bl	8004746 <inHandlerMode>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d01b      	beq.n	8004922 <osTimerStart+0x62>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 80048ea:	f107 020c 	add.w	r2, r7, #12
 80048ee:	2300      	movs	r3, #0
 80048f0:	9300      	str	r3, [sp, #0]
 80048f2:	4613      	mov	r3, r2
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	2109      	movs	r1, #9
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f002 fbe1 	bl	80070c0 <xTimerGenericCommand>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b01      	cmp	r3, #1
 8004902:	d002      	beq.n	800490a <osTimerStart+0x4a>
    {
      result = osErrorOS;
 8004904:	23ff      	movs	r3, #255	; 0xff
 8004906:	617b      	str	r3, [r7, #20]
 8004908:	e018      	b.n	800493c <osTimerStart+0x7c>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d015      	beq.n	800493c <osTimerStart+0x7c>
 8004910:	4b0d      	ldr	r3, [pc, #52]	; (8004948 <osTimerStart+0x88>)
 8004912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004916:	601a      	str	r2, [r3, #0]
 8004918:	f3bf 8f4f 	dsb	sy
 800491c:	f3bf 8f6f 	isb	sy
 8004920:	e00c      	b.n	800493c <osTimerStart+0x7c>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8004922:	2300      	movs	r3, #0
 8004924:	9300      	str	r3, [sp, #0]
 8004926:	2300      	movs	r3, #0
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	2104      	movs	r1, #4
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f002 fbc7 	bl	80070c0 <xTimerGenericCommand>
 8004932:	4603      	mov	r3, r0
 8004934:	2b01      	cmp	r3, #1
 8004936:	d001      	beq.n	800493c <osTimerStart+0x7c>
      result = osErrorOS;
 8004938:	23ff      	movs	r3, #255	; 0xff
 800493a:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 800493c:	697b      	ldr	r3, [r7, #20]
}
 800493e:	4618      	mov	r0, r3
 8004940:	3718      	adds	r7, #24
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	e000ed04 	.word	0xe000ed04

0800494c <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af02      	add	r7, sp, #8
 8004952:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004954:	2300      	movs	r3, #0
 8004956:	60fb      	str	r3, [r7, #12]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8004958:	2300      	movs	r3, #0
 800495a:	60bb      	str	r3, [r7, #8]

  if (inHandlerMode()) {
 800495c:	f7ff fef3 	bl	8004746 <inHandlerMode>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d01a      	beq.n	800499c <osTimerStop+0x50>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 8004966:	f107 0208 	add.w	r2, r7, #8
 800496a:	2300      	movs	r3, #0
 800496c:	9300      	str	r3, [sp, #0]
 800496e:	4613      	mov	r3, r2
 8004970:	2200      	movs	r2, #0
 8004972:	2108      	movs	r1, #8
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f002 fba3 	bl	80070c0 <xTimerGenericCommand>
 800497a:	4603      	mov	r3, r0
 800497c:	2b01      	cmp	r3, #1
 800497e:	d001      	beq.n	8004984 <osTimerStop+0x38>
      return osErrorOS;
 8004980:	23ff      	movs	r3, #255	; 0xff
 8004982:	e019      	b.n	80049b8 <osTimerStop+0x6c>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d015      	beq.n	80049b6 <osTimerStop+0x6a>
 800498a:	4b0d      	ldr	r3, [pc, #52]	; (80049c0 <osTimerStop+0x74>)
 800498c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004990:	601a      	str	r2, [r3, #0]
 8004992:	f3bf 8f4f 	dsb	sy
 8004996:	f3bf 8f6f 	isb	sy
 800499a:	e00c      	b.n	80049b6 <osTimerStop+0x6a>
  }
  else {
    if (xTimerStop(timer_id, 0) != pdPASS) {
 800499c:	2300      	movs	r3, #0
 800499e:	9300      	str	r3, [sp, #0]
 80049a0:	2300      	movs	r3, #0
 80049a2:	2200      	movs	r2, #0
 80049a4:	2103      	movs	r1, #3
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f002 fb8a 	bl	80070c0 <xTimerGenericCommand>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d001      	beq.n	80049b6 <osTimerStop+0x6a>
      result = osErrorOS;
 80049b2:	23ff      	movs	r3, #255	; 0xff
 80049b4:	60fb      	str	r3, [r7, #12]
    }
  }
#else 
  result = osErrorOS;
#endif 
  return result;
 80049b6:	68fb      	ldr	r3, [r7, #12]
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	e000ed04 	.word	0xe000ed04

080049c4 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d007      	beq.n	80049e4 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	4619      	mov	r1, r3
 80049da:	2001      	movs	r0, #1
 80049dc:	f000 fc3c 	bl	8005258 <xQueueCreateMutexStatic>
 80049e0:	4603      	mov	r3, r0
 80049e2:	e003      	b.n	80049ec <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80049e4:	2001      	movs	r0, #1
 80049e6:	f000 fc1f 	bl	8005228 <xQueueCreateMutex>
 80049ea:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3708      	adds	r7, #8
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80049fe:	2300      	movs	r3, #0
 8004a00:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d101      	bne.n	8004a0c <osMutexWait+0x18>
    return osErrorParameter;
 8004a08:	2380      	movs	r3, #128	; 0x80
 8004a0a:	e03a      	b.n	8004a82 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a16:	d103      	bne.n	8004a20 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8004a18:	f04f 33ff 	mov.w	r3, #4294967295
 8004a1c:	60fb      	str	r3, [r7, #12]
 8004a1e:	e009      	b.n	8004a34 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d006      	beq.n	8004a34 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d101      	bne.n	8004a34 <osMutexWait+0x40>
      ticks = 1;
 8004a30:	2301      	movs	r3, #1
 8004a32:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004a34:	f7ff fe87 	bl	8004746 <inHandlerMode>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d017      	beq.n	8004a6e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004a3e:	f107 0308 	add.w	r3, r7, #8
 8004a42:	461a      	mov	r2, r3
 8004a44:	2100      	movs	r1, #0
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f001 f81e 	bl	8005a88 <xQueueReceiveFromISR>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d001      	beq.n	8004a56 <osMutexWait+0x62>
      return osErrorOS;
 8004a52:	23ff      	movs	r3, #255	; 0xff
 8004a54:	e015      	b.n	8004a82 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d011      	beq.n	8004a80 <osMutexWait+0x8c>
 8004a5c:	4b0b      	ldr	r3, [pc, #44]	; (8004a8c <osMutexWait+0x98>)
 8004a5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a62:	601a      	str	r2, [r3, #0]
 8004a64:	f3bf 8f4f 	dsb	sy
 8004a68:	f3bf 8f6f 	isb	sy
 8004a6c:	e008      	b.n	8004a80 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8004a6e:	68f9      	ldr	r1, [r7, #12]
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 ff01 	bl	8005878 <xQueueSemaphoreTake>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d001      	beq.n	8004a80 <osMutexWait+0x8c>
    return osErrorOS;
 8004a7c:	23ff      	movs	r3, #255	; 0xff
 8004a7e:	e000      	b.n	8004a82 <osMutexWait+0x8e>
  }
  
  return osOK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3710      	adds	r7, #16
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	e000ed04 	.word	0xe000ed04

08004a90 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8004aa0:	f7ff fe51 	bl	8004746 <inHandlerMode>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d016      	beq.n	8004ad8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004aaa:	f107 0308 	add.w	r3, r7, #8
 8004aae:	4619      	mov	r1, r3
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 fd7b 	bl	80055ac <xQueueGiveFromISR>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d001      	beq.n	8004ac0 <osMutexRelease+0x30>
      return osErrorOS;
 8004abc:	23ff      	movs	r3, #255	; 0xff
 8004abe:	e017      	b.n	8004af0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d013      	beq.n	8004aee <osMutexRelease+0x5e>
 8004ac6:	4b0c      	ldr	r3, [pc, #48]	; (8004af8 <osMutexRelease+0x68>)
 8004ac8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004acc:	601a      	str	r2, [r3, #0]
 8004ace:	f3bf 8f4f 	dsb	sy
 8004ad2:	f3bf 8f6f 	isb	sy
 8004ad6:	e00a      	b.n	8004aee <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8004ad8:	2300      	movs	r3, #0
 8004ada:	2200      	movs	r2, #0
 8004adc:	2100      	movs	r1, #0
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 fbd6 	bl	8005290 <xQueueGenericSend>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d001      	beq.n	8004aee <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8004aea:	23ff      	movs	r3, #255	; 0xff
 8004aec:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8004aee:	68fb      	ldr	r3, [r7, #12]
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	e000ed04 	.word	0xe000ed04

08004afc <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b086      	sub	sp, #24
 8004b00:	af02      	add	r7, sp, #8
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d010      	beq.n	8004b30 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d10b      	bne.n	8004b2c <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685a      	ldr	r2, [r3, #4]
 8004b18:	2303      	movs	r3, #3
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	2200      	movs	r2, #0
 8004b20:	2100      	movs	r1, #0
 8004b22:	2001      	movs	r0, #1
 8004b24:	f000 fa98 	bl	8005058 <xQueueGenericCreateStatic>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	e016      	b.n	8004b5a <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	e014      	b.n	8004b5a <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d110      	bne.n	8004b58 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8004b36:	2203      	movs	r2, #3
 8004b38:	2100      	movs	r1, #0
 8004b3a:	2001      	movs	r0, #1
 8004b3c:	f000 fafe 	bl	800513c <xQueueGenericCreate>
 8004b40:	60f8      	str	r0, [r7, #12]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d005      	beq.n	8004b54 <osSemaphoreCreate+0x58>
 8004b48:	2300      	movs	r3, #0
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	68f8      	ldr	r0, [r7, #12]
 8004b50:	f000 fb9e 	bl	8005290 <xQueueGenericSend>
      return sema;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	e000      	b.n	8004b5a <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8004b58:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
	...

08004b64 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004b6e:	2300      	movs	r3, #0
 8004b70:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d101      	bne.n	8004b7c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8004b78:	2380      	movs	r3, #128	; 0x80
 8004b7a:	e03a      	b.n	8004bf2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b86:	d103      	bne.n	8004b90 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8004b88:	f04f 33ff 	mov.w	r3, #4294967295
 8004b8c:	60fb      	str	r3, [r7, #12]
 8004b8e:	e009      	b.n	8004ba4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d006      	beq.n	8004ba4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d101      	bne.n	8004ba4 <osSemaphoreWait+0x40>
      ticks = 1;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004ba4:	f7ff fdcf 	bl	8004746 <inHandlerMode>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d017      	beq.n	8004bde <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004bae:	f107 0308 	add.w	r3, r7, #8
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 ff66 	bl	8005a88 <xQueueReceiveFromISR>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d001      	beq.n	8004bc6 <osSemaphoreWait+0x62>
      return osErrorOS;
 8004bc2:	23ff      	movs	r3, #255	; 0xff
 8004bc4:	e015      	b.n	8004bf2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d011      	beq.n	8004bf0 <osSemaphoreWait+0x8c>
 8004bcc:	4b0b      	ldr	r3, [pc, #44]	; (8004bfc <osSemaphoreWait+0x98>)
 8004bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bd2:	601a      	str	r2, [r3, #0]
 8004bd4:	f3bf 8f4f 	dsb	sy
 8004bd8:	f3bf 8f6f 	isb	sy
 8004bdc:	e008      	b.n	8004bf0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8004bde:	68f9      	ldr	r1, [r7, #12]
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 fe49 	bl	8005878 <xQueueSemaphoreTake>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d001      	beq.n	8004bf0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8004bec:	23ff      	movs	r3, #255	; 0xff
 8004bee:	e000      	b.n	8004bf2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8004bf0:	2300      	movs	r3, #0
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3710      	adds	r7, #16
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	e000ed04 	.word	0xe000ed04

08004c00 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8004c10:	f7ff fd99 	bl	8004746 <inHandlerMode>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d016      	beq.n	8004c48 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004c1a:	f107 0308 	add.w	r3, r7, #8
 8004c1e:	4619      	mov	r1, r3
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 fcc3 	bl	80055ac <xQueueGiveFromISR>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d001      	beq.n	8004c30 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8004c2c:	23ff      	movs	r3, #255	; 0xff
 8004c2e:	e017      	b.n	8004c60 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d013      	beq.n	8004c5e <osSemaphoreRelease+0x5e>
 8004c36:	4b0c      	ldr	r3, [pc, #48]	; (8004c68 <osSemaphoreRelease+0x68>)
 8004c38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c3c:	601a      	str	r2, [r3, #0]
 8004c3e:	f3bf 8f4f 	dsb	sy
 8004c42:	f3bf 8f6f 	isb	sy
 8004c46:	e00a      	b.n	8004c5e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8004c48:	2300      	movs	r3, #0
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 fb1e 	bl	8005290 <xQueueGenericSend>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d001      	beq.n	8004c5e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8004c5a:	23ff      	movs	r3, #255	; 0xff
 8004c5c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3710      	adds	r7, #16
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	e000ed04 	.word	0xe000ed04

08004c6c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004c6c:	b590      	push	{r4, r7, lr}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af02      	add	r7, sp, #8
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d012      	beq.n	8004ca4 <osMessageCreate+0x38>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00e      	beq.n	8004ca4 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6818      	ldr	r0, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6859      	ldr	r1, [r3, #4]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	689a      	ldr	r2, [r3, #8]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	68dc      	ldr	r4, [r3, #12]
 8004c96:	2300      	movs	r3, #0
 8004c98:	9300      	str	r3, [sp, #0]
 8004c9a:	4623      	mov	r3, r4
 8004c9c:	f000 f9dc 	bl	8005058 <xQueueGenericCreateStatic>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	e008      	b.n	8004cb6 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6818      	ldr	r0, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	4619      	mov	r1, r3
 8004cb0:	f000 fa44 	bl	800513c <xQueueGenericCreate>
 8004cb4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd90      	pop	{r4, r7, pc}
	...

08004cc0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b086      	sub	sp, #24
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d101      	bne.n	8004cde <osMessagePut+0x1e>
    ticks = 1;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8004cde:	f7ff fd32 	bl	8004746 <inHandlerMode>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d018      	beq.n	8004d1a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004ce8:	f107 0210 	add.w	r2, r7, #16
 8004cec:	f107 0108 	add.w	r1, r7, #8
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	68f8      	ldr	r0, [r7, #12]
 8004cf4:	f000 fbc6 	bl	8005484 <xQueueGenericSendFromISR>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d001      	beq.n	8004d02 <osMessagePut+0x42>
      return osErrorOS;
 8004cfe:	23ff      	movs	r3, #255	; 0xff
 8004d00:	e018      	b.n	8004d34 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d014      	beq.n	8004d32 <osMessagePut+0x72>
 8004d08:	4b0c      	ldr	r3, [pc, #48]	; (8004d3c <osMessagePut+0x7c>)
 8004d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d0e:	601a      	str	r2, [r3, #0]
 8004d10:	f3bf 8f4f 	dsb	sy
 8004d14:	f3bf 8f6f 	isb	sy
 8004d18:	e00b      	b.n	8004d32 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8004d1a:	f107 0108 	add.w	r1, r7, #8
 8004d1e:	2300      	movs	r3, #0
 8004d20:	697a      	ldr	r2, [r7, #20]
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f000 fab4 	bl	8005290 <xQueueGenericSend>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d001      	beq.n	8004d32 <osMessagePut+0x72>
      return osErrorOS;
 8004d2e:	23ff      	movs	r3, #255	; 0xff
 8004d30:	e000      	b.n	8004d34 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3718      	adds	r7, #24
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	e000ed04 	.word	0xe000ed04

08004d40 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8004d40:	b590      	push	{r4, r7, lr}
 8004d42:	b08b      	sub	sp, #44	; 0x2c
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	60f8      	str	r0, [r7, #12]
 8004d48:	60b9      	str	r1, [r7, #8]
 8004d4a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8004d50:	2300      	movs	r3, #0
 8004d52:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d10a      	bne.n	8004d70 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8004d5a:	2380      	movs	r3, #128	; 0x80
 8004d5c:	617b      	str	r3, [r7, #20]
    return event;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	461c      	mov	r4, r3
 8004d62:	f107 0314 	add.w	r3, r7, #20
 8004d66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004d6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004d6e:	e054      	b.n	8004e1a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8004d70:	2300      	movs	r3, #0
 8004d72:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8004d74:	2300      	movs	r3, #0
 8004d76:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d7e:	d103      	bne.n	8004d88 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8004d80:	f04f 33ff 	mov.w	r3, #4294967295
 8004d84:	627b      	str	r3, [r7, #36]	; 0x24
 8004d86:	e009      	b.n	8004d9c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d006      	beq.n	8004d9c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8004d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d101      	bne.n	8004d9c <osMessageGet+0x5c>
      ticks = 1;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8004d9c:	f7ff fcd3 	bl	8004746 <inHandlerMode>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d01c      	beq.n	8004de0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8004da6:	f107 0220 	add.w	r2, r7, #32
 8004daa:	f107 0314 	add.w	r3, r7, #20
 8004dae:	3304      	adds	r3, #4
 8004db0:	4619      	mov	r1, r3
 8004db2:	68b8      	ldr	r0, [r7, #8]
 8004db4:	f000 fe68 	bl	8005a88 <xQueueReceiveFromISR>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d102      	bne.n	8004dc4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8004dbe:	2310      	movs	r3, #16
 8004dc0:	617b      	str	r3, [r7, #20]
 8004dc2:	e001      	b.n	8004dc8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004dc8:	6a3b      	ldr	r3, [r7, #32]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d01d      	beq.n	8004e0a <osMessageGet+0xca>
 8004dce:	4b15      	ldr	r3, [pc, #84]	; (8004e24 <osMessageGet+0xe4>)
 8004dd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dd4:	601a      	str	r2, [r3, #0]
 8004dd6:	f3bf 8f4f 	dsb	sy
 8004dda:	f3bf 8f6f 	isb	sy
 8004dde:	e014      	b.n	8004e0a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8004de0:	f107 0314 	add.w	r3, r7, #20
 8004de4:	3304      	adds	r3, #4
 8004de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004de8:	4619      	mov	r1, r3
 8004dea:	68b8      	ldr	r0, [r7, #8]
 8004dec:	f000 fc68 	bl	80056c0 <xQueueReceive>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d102      	bne.n	8004dfc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8004df6:	2310      	movs	r3, #16
 8004df8:	617b      	str	r3, [r7, #20]
 8004dfa:	e006      	b.n	8004e0a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d101      	bne.n	8004e06 <osMessageGet+0xc6>
 8004e02:	2300      	movs	r3, #0
 8004e04:	e000      	b.n	8004e08 <osMessageGet+0xc8>
 8004e06:	2340      	movs	r3, #64	; 0x40
 8004e08:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	461c      	mov	r4, r3
 8004e0e:	f107 0314 	add.w	r3, r7, #20
 8004e12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004e16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004e1a:	68f8      	ldr	r0, [r7, #12]
 8004e1c:	372c      	adds	r7, #44	; 0x2c
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd90      	pop	{r4, r7, pc}
 8004e22:	bf00      	nop
 8004e24:	e000ed04 	.word	0xe000ed04

08004e28 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f103 0208 	add.w	r2, r3, #8
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e40:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f103 0208 	add.w	r2, r3, #8
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f103 0208 	add.w	r2, r3, #8
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bc80      	pop	{r7}
 8004e64:	4770      	bx	lr

08004e66 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004e66:	b480      	push	{r7}
 8004e68:	b083      	sub	sp, #12
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bc80      	pop	{r7}
 8004e7c:	4770      	bx	lr

08004e7e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004e7e:	b480      	push	{r7}
 8004e80:	b085      	sub	sp, #20
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
 8004e86:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	689a      	ldr	r2, [r3, #8]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	683a      	ldr	r2, [r7, #0]
 8004ea2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	683a      	ldr	r2, [r7, #0]
 8004ea8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	1c5a      	adds	r2, r3, #1
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	601a      	str	r2, [r3, #0]
}
 8004eba:	bf00      	nop
 8004ebc:	3714      	adds	r7, #20
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bc80      	pop	{r7}
 8004ec2:	4770      	bx	lr

08004ec4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eda:	d103      	bne.n	8004ee4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	60fb      	str	r3, [r7, #12]
 8004ee2:	e00c      	b.n	8004efe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	3308      	adds	r3, #8
 8004ee8:	60fb      	str	r3, [r7, #12]
 8004eea:	e002      	b.n	8004ef2 <vListInsert+0x2e>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	60fb      	str	r3, [r7, #12]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68ba      	ldr	r2, [r7, #8]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d2f6      	bcs.n	8004eec <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	685a      	ldr	r2, [r3, #4]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	683a      	ldr	r2, [r7, #0]
 8004f0c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	683a      	ldr	r2, [r7, #0]
 8004f18:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	1c5a      	adds	r2, r3, #1
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	601a      	str	r2, [r3, #0]
}
 8004f2a:	bf00      	nop
 8004f2c:	3714      	adds	r7, #20
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bc80      	pop	{r7}
 8004f32:	4770      	bx	lr

08004f34 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	6892      	ldr	r2, [r2, #8]
 8004f4a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	6852      	ldr	r2, [r2, #4]
 8004f54:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d103      	bne.n	8004f68 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	1e5a      	subs	r2, r3, #1
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3714      	adds	r7, #20
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bc80      	pop	{r7}
 8004f84:	4770      	bx	lr
	...

08004f88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d109      	bne.n	8004fb0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa0:	f383 8811 	msr	BASEPRI, r3
 8004fa4:	f3bf 8f6f 	isb	sy
 8004fa8:	f3bf 8f4f 	dsb	sy
 8004fac:	60bb      	str	r3, [r7, #8]
 8004fae:	e7fe      	b.n	8004fae <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004fb0:	f002 fc3a 	bl	8007828 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fbc:	68f9      	ldr	r1, [r7, #12]
 8004fbe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004fc0:	fb01 f303 	mul.w	r3, r1, r3
 8004fc4:	441a      	add	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	68f9      	ldr	r1, [r7, #12]
 8004fe4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004fe6:	fb01 f303 	mul.w	r3, r1, r3
 8004fea:	441a      	add	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	22ff      	movs	r2, #255	; 0xff
 8004ff4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	22ff      	movs	r2, #255	; 0xff
 8004ffc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d114      	bne.n	8005030 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d01a      	beq.n	8005044 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	3310      	adds	r3, #16
 8005012:	4618      	mov	r0, r3
 8005014:	f001 fb84 	bl	8006720 <xTaskRemoveFromEventList>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d012      	beq.n	8005044 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800501e:	4b0d      	ldr	r3, [pc, #52]	; (8005054 <xQueueGenericReset+0xcc>)
 8005020:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005024:	601a      	str	r2, [r3, #0]
 8005026:	f3bf 8f4f 	dsb	sy
 800502a:	f3bf 8f6f 	isb	sy
 800502e:	e009      	b.n	8005044 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	3310      	adds	r3, #16
 8005034:	4618      	mov	r0, r3
 8005036:	f7ff fef7 	bl	8004e28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	3324      	adds	r3, #36	; 0x24
 800503e:	4618      	mov	r0, r3
 8005040:	f7ff fef2 	bl	8004e28 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005044:	f002 fc1e 	bl	8007884 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005048:	2301      	movs	r3, #1
}
 800504a:	4618      	mov	r0, r3
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	e000ed04 	.word	0xe000ed04

08005058 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005058:	b580      	push	{r7, lr}
 800505a:	b08e      	sub	sp, #56	; 0x38
 800505c:	af02      	add	r7, sp, #8
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
 8005064:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d109      	bne.n	8005080 <xQueueGenericCreateStatic+0x28>
 800506c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005070:	f383 8811 	msr	BASEPRI, r3
 8005074:	f3bf 8f6f 	isb	sy
 8005078:	f3bf 8f4f 	dsb	sy
 800507c:	62bb      	str	r3, [r7, #40]	; 0x28
 800507e:	e7fe      	b.n	800507e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d109      	bne.n	800509a <xQueueGenericCreateStatic+0x42>
 8005086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508a:	f383 8811 	msr	BASEPRI, r3
 800508e:	f3bf 8f6f 	isb	sy
 8005092:	f3bf 8f4f 	dsb	sy
 8005096:	627b      	str	r3, [r7, #36]	; 0x24
 8005098:	e7fe      	b.n	8005098 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d002      	beq.n	80050a6 <xQueueGenericCreateStatic+0x4e>
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d001      	beq.n	80050aa <xQueueGenericCreateStatic+0x52>
 80050a6:	2301      	movs	r3, #1
 80050a8:	e000      	b.n	80050ac <xQueueGenericCreateStatic+0x54>
 80050aa:	2300      	movs	r3, #0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d109      	bne.n	80050c4 <xQueueGenericCreateStatic+0x6c>
 80050b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b4:	f383 8811 	msr	BASEPRI, r3
 80050b8:	f3bf 8f6f 	isb	sy
 80050bc:	f3bf 8f4f 	dsb	sy
 80050c0:	623b      	str	r3, [r7, #32]
 80050c2:	e7fe      	b.n	80050c2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d102      	bne.n	80050d0 <xQueueGenericCreateStatic+0x78>
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d101      	bne.n	80050d4 <xQueueGenericCreateStatic+0x7c>
 80050d0:	2301      	movs	r3, #1
 80050d2:	e000      	b.n	80050d6 <xQueueGenericCreateStatic+0x7e>
 80050d4:	2300      	movs	r3, #0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d109      	bne.n	80050ee <xQueueGenericCreateStatic+0x96>
 80050da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050de:	f383 8811 	msr	BASEPRI, r3
 80050e2:	f3bf 8f6f 	isb	sy
 80050e6:	f3bf 8f4f 	dsb	sy
 80050ea:	61fb      	str	r3, [r7, #28]
 80050ec:	e7fe      	b.n	80050ec <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80050ee:	2348      	movs	r3, #72	; 0x48
 80050f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	2b48      	cmp	r3, #72	; 0x48
 80050f6:	d009      	beq.n	800510c <xQueueGenericCreateStatic+0xb4>
 80050f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050fc:	f383 8811 	msr	BASEPRI, r3
 8005100:	f3bf 8f6f 	isb	sy
 8005104:	f3bf 8f4f 	dsb	sy
 8005108:	61bb      	str	r3, [r7, #24]
 800510a:	e7fe      	b.n	800510a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00d      	beq.n	8005132 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005118:	2201      	movs	r2, #1
 800511a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800511e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005124:	9300      	str	r3, [sp, #0]
 8005126:	4613      	mov	r3, r2
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	68b9      	ldr	r1, [r7, #8]
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f000 f842 	bl	80051b6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005134:	4618      	mov	r0, r3
 8005136:	3730      	adds	r7, #48	; 0x30
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800513c:	b580      	push	{r7, lr}
 800513e:	b08a      	sub	sp, #40	; 0x28
 8005140:	af02      	add	r7, sp, #8
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	4613      	mov	r3, r2
 8005148:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d109      	bne.n	8005164 <xQueueGenericCreate+0x28>
 8005150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005154:	f383 8811 	msr	BASEPRI, r3
 8005158:	f3bf 8f6f 	isb	sy
 800515c:	f3bf 8f4f 	dsb	sy
 8005160:	613b      	str	r3, [r7, #16]
 8005162:	e7fe      	b.n	8005162 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d102      	bne.n	8005170 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800516a:	2300      	movs	r3, #0
 800516c:	61fb      	str	r3, [r7, #28]
 800516e:	e004      	b.n	800517a <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	68ba      	ldr	r2, [r7, #8]
 8005174:	fb02 f303 	mul.w	r3, r2, r3
 8005178:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	3348      	adds	r3, #72	; 0x48
 800517e:	4618      	mov	r0, r3
 8005180:	f002 fc48 	bl	8007a14 <pvPortMalloc>
 8005184:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d00f      	beq.n	80051ac <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	3348      	adds	r3, #72	; 0x48
 8005190:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800519a:	79fa      	ldrb	r2, [r7, #7]
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	9300      	str	r3, [sp, #0]
 80051a0:	4613      	mov	r3, r2
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	68b9      	ldr	r1, [r7, #8]
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	f000 f805 	bl	80051b6 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80051ac:	69bb      	ldr	r3, [r7, #24]
	}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3720      	adds	r7, #32
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b084      	sub	sp, #16
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	60f8      	str	r0, [r7, #12]
 80051be:	60b9      	str	r1, [r7, #8]
 80051c0:	607a      	str	r2, [r7, #4]
 80051c2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d103      	bne.n	80051d2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	69ba      	ldr	r2, [r7, #24]
 80051ce:	601a      	str	r2, [r3, #0]
 80051d0:	e002      	b.n	80051d8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	687a      	ldr	r2, [r7, #4]
 80051d6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80051e4:	2101      	movs	r1, #1
 80051e6:	69b8      	ldr	r0, [r7, #24]
 80051e8:	f7ff fece 	bl	8004f88 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80051ec:	bf00      	nop
 80051ee:	3710      	adds	r7, #16
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00e      	beq.n	8005220 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005214:	2300      	movs	r3, #0
 8005216:	2200      	movs	r2, #0
 8005218:	2100      	movs	r1, #0
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f838 	bl	8005290 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005220:	bf00      	nop
 8005222:	3708      	adds	r7, #8
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005228:	b580      	push	{r7, lr}
 800522a:	b086      	sub	sp, #24
 800522c:	af00      	add	r7, sp, #0
 800522e:	4603      	mov	r3, r0
 8005230:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005232:	2301      	movs	r3, #1
 8005234:	617b      	str	r3, [r7, #20]
 8005236:	2300      	movs	r3, #0
 8005238:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800523a:	79fb      	ldrb	r3, [r7, #7]
 800523c:	461a      	mov	r2, r3
 800523e:	6939      	ldr	r1, [r7, #16]
 8005240:	6978      	ldr	r0, [r7, #20]
 8005242:	f7ff ff7b 	bl	800513c <xQueueGenericCreate>
 8005246:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8005248:	68f8      	ldr	r0, [r7, #12]
 800524a:	f7ff ffd3 	bl	80051f4 <prvInitialiseMutex>

		return pxNewQueue;
 800524e:	68fb      	ldr	r3, [r7, #12]
	}
 8005250:	4618      	mov	r0, r3
 8005252:	3718      	adds	r7, #24
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005258:	b580      	push	{r7, lr}
 800525a:	b088      	sub	sp, #32
 800525c:	af02      	add	r7, sp, #8
 800525e:	4603      	mov	r3, r0
 8005260:	6039      	str	r1, [r7, #0]
 8005262:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005264:	2301      	movs	r3, #1
 8005266:	617b      	str	r3, [r7, #20]
 8005268:	2300      	movs	r3, #0
 800526a:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800526c:	79fb      	ldrb	r3, [r7, #7]
 800526e:	9300      	str	r3, [sp, #0]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	2200      	movs	r2, #0
 8005274:	6939      	ldr	r1, [r7, #16]
 8005276:	6978      	ldr	r0, [r7, #20]
 8005278:	f7ff feee 	bl	8005058 <xQueueGenericCreateStatic>
 800527c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800527e:	68f8      	ldr	r0, [r7, #12]
 8005280:	f7ff ffb8 	bl	80051f4 <prvInitialiseMutex>

		return pxNewQueue;
 8005284:	68fb      	ldr	r3, [r7, #12]
	}
 8005286:	4618      	mov	r0, r3
 8005288:	3718      	adds	r7, #24
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
	...

08005290 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b08e      	sub	sp, #56	; 0x38
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
 800529c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800529e:	2300      	movs	r3, #0
 80052a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80052a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d109      	bne.n	80052c0 <xQueueGenericSend+0x30>
 80052ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b0:	f383 8811 	msr	BASEPRI, r3
 80052b4:	f3bf 8f6f 	isb	sy
 80052b8:	f3bf 8f4f 	dsb	sy
 80052bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80052be:	e7fe      	b.n	80052be <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d103      	bne.n	80052ce <xQueueGenericSend+0x3e>
 80052c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d101      	bne.n	80052d2 <xQueueGenericSend+0x42>
 80052ce:	2301      	movs	r3, #1
 80052d0:	e000      	b.n	80052d4 <xQueueGenericSend+0x44>
 80052d2:	2300      	movs	r3, #0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d109      	bne.n	80052ec <xQueueGenericSend+0x5c>
 80052d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052dc:	f383 8811 	msr	BASEPRI, r3
 80052e0:	f3bf 8f6f 	isb	sy
 80052e4:	f3bf 8f4f 	dsb	sy
 80052e8:	627b      	str	r3, [r7, #36]	; 0x24
 80052ea:	e7fe      	b.n	80052ea <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d103      	bne.n	80052fa <xQueueGenericSend+0x6a>
 80052f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d101      	bne.n	80052fe <xQueueGenericSend+0x6e>
 80052fa:	2301      	movs	r3, #1
 80052fc:	e000      	b.n	8005300 <xQueueGenericSend+0x70>
 80052fe:	2300      	movs	r3, #0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d109      	bne.n	8005318 <xQueueGenericSend+0x88>
 8005304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005308:	f383 8811 	msr	BASEPRI, r3
 800530c:	f3bf 8f6f 	isb	sy
 8005310:	f3bf 8f4f 	dsb	sy
 8005314:	623b      	str	r3, [r7, #32]
 8005316:	e7fe      	b.n	8005316 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005318:	f001 fbbc 	bl	8006a94 <xTaskGetSchedulerState>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d102      	bne.n	8005328 <xQueueGenericSend+0x98>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d101      	bne.n	800532c <xQueueGenericSend+0x9c>
 8005328:	2301      	movs	r3, #1
 800532a:	e000      	b.n	800532e <xQueueGenericSend+0x9e>
 800532c:	2300      	movs	r3, #0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d109      	bne.n	8005346 <xQueueGenericSend+0xb6>
 8005332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005336:	f383 8811 	msr	BASEPRI, r3
 800533a:	f3bf 8f6f 	isb	sy
 800533e:	f3bf 8f4f 	dsb	sy
 8005342:	61fb      	str	r3, [r7, #28]
 8005344:	e7fe      	b.n	8005344 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005346:	f002 fa6f 	bl	8007828 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800534a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800534e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005352:	429a      	cmp	r2, r3
 8005354:	d302      	bcc.n	800535c <xQueueGenericSend+0xcc>
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	2b02      	cmp	r3, #2
 800535a:	d129      	bne.n	80053b0 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800535c:	683a      	ldr	r2, [r7, #0]
 800535e:	68b9      	ldr	r1, [r7, #8]
 8005360:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005362:	f000 fc25 	bl	8005bb0 <prvCopyDataToQueue>
 8005366:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536c:	2b00      	cmp	r3, #0
 800536e:	d010      	beq.n	8005392 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005372:	3324      	adds	r3, #36	; 0x24
 8005374:	4618      	mov	r0, r3
 8005376:	f001 f9d3 	bl	8006720 <xTaskRemoveFromEventList>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d013      	beq.n	80053a8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005380:	4b3f      	ldr	r3, [pc, #252]	; (8005480 <xQueueGenericSend+0x1f0>)
 8005382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005386:	601a      	str	r2, [r3, #0]
 8005388:	f3bf 8f4f 	dsb	sy
 800538c:	f3bf 8f6f 	isb	sy
 8005390:	e00a      	b.n	80053a8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005394:	2b00      	cmp	r3, #0
 8005396:	d007      	beq.n	80053a8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005398:	4b39      	ldr	r3, [pc, #228]	; (8005480 <xQueueGenericSend+0x1f0>)
 800539a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800539e:	601a      	str	r2, [r3, #0]
 80053a0:	f3bf 8f4f 	dsb	sy
 80053a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80053a8:	f002 fa6c 	bl	8007884 <vPortExitCritical>
				return pdPASS;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e063      	b.n	8005478 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d103      	bne.n	80053be <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80053b6:	f002 fa65 	bl	8007884 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80053ba:	2300      	movs	r3, #0
 80053bc:	e05c      	b.n	8005478 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80053be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d106      	bne.n	80053d2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80053c4:	f107 0314 	add.w	r3, r7, #20
 80053c8:	4618      	mov	r0, r3
 80053ca:	f001 fa0b 	bl	80067e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80053ce:	2301      	movs	r3, #1
 80053d0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80053d2:	f002 fa57 	bl	8007884 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80053d6:	f000 ff75 	bl	80062c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80053da:	f002 fa25 	bl	8007828 <vPortEnterCritical>
 80053de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053e4:	b25b      	sxtb	r3, r3
 80053e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ea:	d103      	bne.n	80053f4 <xQueueGenericSend+0x164>
 80053ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053fa:	b25b      	sxtb	r3, r3
 80053fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005400:	d103      	bne.n	800540a <xQueueGenericSend+0x17a>
 8005402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005404:	2200      	movs	r2, #0
 8005406:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800540a:	f002 fa3b 	bl	8007884 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800540e:	1d3a      	adds	r2, r7, #4
 8005410:	f107 0314 	add.w	r3, r7, #20
 8005414:	4611      	mov	r1, r2
 8005416:	4618      	mov	r0, r3
 8005418:	f001 f9fa 	bl	8006810 <xTaskCheckForTimeOut>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d124      	bne.n	800546c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005422:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005424:	f000 fcbc 	bl	8005da0 <prvIsQueueFull>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d018      	beq.n	8005460 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800542e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005430:	3310      	adds	r3, #16
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	4611      	mov	r1, r2
 8005436:	4618      	mov	r0, r3
 8005438:	f001 f924 	bl	8006684 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800543c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800543e:	f000 fc47 	bl	8005cd0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005442:	f000 ff4d 	bl	80062e0 <xTaskResumeAll>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	f47f af7c 	bne.w	8005346 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800544e:	4b0c      	ldr	r3, [pc, #48]	; (8005480 <xQueueGenericSend+0x1f0>)
 8005450:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005454:	601a      	str	r2, [r3, #0]
 8005456:	f3bf 8f4f 	dsb	sy
 800545a:	f3bf 8f6f 	isb	sy
 800545e:	e772      	b.n	8005346 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005460:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005462:	f000 fc35 	bl	8005cd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005466:	f000 ff3b 	bl	80062e0 <xTaskResumeAll>
 800546a:	e76c      	b.n	8005346 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800546c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800546e:	f000 fc2f 	bl	8005cd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005472:	f000 ff35 	bl	80062e0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005476:	2300      	movs	r3, #0
		}
	}
}
 8005478:	4618      	mov	r0, r3
 800547a:	3738      	adds	r7, #56	; 0x38
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	e000ed04 	.word	0xe000ed04

08005484 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b08e      	sub	sp, #56	; 0x38
 8005488:	af00      	add	r7, sp, #0
 800548a:	60f8      	str	r0, [r7, #12]
 800548c:	60b9      	str	r1, [r7, #8]
 800548e:	607a      	str	r2, [r7, #4]
 8005490:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005498:	2b00      	cmp	r3, #0
 800549a:	d109      	bne.n	80054b0 <xQueueGenericSendFromISR+0x2c>
 800549c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a0:	f383 8811 	msr	BASEPRI, r3
 80054a4:	f3bf 8f6f 	isb	sy
 80054a8:	f3bf 8f4f 	dsb	sy
 80054ac:	627b      	str	r3, [r7, #36]	; 0x24
 80054ae:	e7fe      	b.n	80054ae <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d103      	bne.n	80054be <xQueueGenericSendFromISR+0x3a>
 80054b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d101      	bne.n	80054c2 <xQueueGenericSendFromISR+0x3e>
 80054be:	2301      	movs	r3, #1
 80054c0:	e000      	b.n	80054c4 <xQueueGenericSendFromISR+0x40>
 80054c2:	2300      	movs	r3, #0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d109      	bne.n	80054dc <xQueueGenericSendFromISR+0x58>
 80054c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054cc:	f383 8811 	msr	BASEPRI, r3
 80054d0:	f3bf 8f6f 	isb	sy
 80054d4:	f3bf 8f4f 	dsb	sy
 80054d8:	623b      	str	r3, [r7, #32]
 80054da:	e7fe      	b.n	80054da <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d103      	bne.n	80054ea <xQueueGenericSendFromISR+0x66>
 80054e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d101      	bne.n	80054ee <xQueueGenericSendFromISR+0x6a>
 80054ea:	2301      	movs	r3, #1
 80054ec:	e000      	b.n	80054f0 <xQueueGenericSendFromISR+0x6c>
 80054ee:	2300      	movs	r3, #0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d109      	bne.n	8005508 <xQueueGenericSendFromISR+0x84>
 80054f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f8:	f383 8811 	msr	BASEPRI, r3
 80054fc:	f3bf 8f6f 	isb	sy
 8005500:	f3bf 8f4f 	dsb	sy
 8005504:	61fb      	str	r3, [r7, #28]
 8005506:	e7fe      	b.n	8005506 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005508:	f002 fa48 	bl	800799c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800550c:	f3ef 8211 	mrs	r2, BASEPRI
 8005510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005514:	f383 8811 	msr	BASEPRI, r3
 8005518:	f3bf 8f6f 	isb	sy
 800551c:	f3bf 8f4f 	dsb	sy
 8005520:	61ba      	str	r2, [r7, #24]
 8005522:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005524:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005526:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800552c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005530:	429a      	cmp	r2, r3
 8005532:	d302      	bcc.n	800553a <xQueueGenericSendFromISR+0xb6>
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	2b02      	cmp	r3, #2
 8005538:	d12c      	bne.n	8005594 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800553a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005540:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005544:	683a      	ldr	r2, [r7, #0]
 8005546:	68b9      	ldr	r1, [r7, #8]
 8005548:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800554a:	f000 fb31 	bl	8005bb0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800554e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005556:	d112      	bne.n	800557e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555c:	2b00      	cmp	r3, #0
 800555e:	d016      	beq.n	800558e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005562:	3324      	adds	r3, #36	; 0x24
 8005564:	4618      	mov	r0, r3
 8005566:	f001 f8db 	bl	8006720 <xTaskRemoveFromEventList>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00e      	beq.n	800558e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00b      	beq.n	800558e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2201      	movs	r2, #1
 800557a:	601a      	str	r2, [r3, #0]
 800557c:	e007      	b.n	800558e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800557e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005582:	3301      	adds	r3, #1
 8005584:	b2db      	uxtb	r3, r3
 8005586:	b25a      	sxtb	r2, r3
 8005588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800558e:	2301      	movs	r3, #1
 8005590:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005592:	e001      	b.n	8005598 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005594:	2300      	movs	r3, #0
 8005596:	637b      	str	r3, [r7, #52]	; 0x34
 8005598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800559a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80055a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3738      	adds	r7, #56	; 0x38
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b08e      	sub	sp, #56	; 0x38
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80055ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d109      	bne.n	80055d4 <xQueueGiveFromISR+0x28>
	__asm volatile
 80055c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c4:	f383 8811 	msr	BASEPRI, r3
 80055c8:	f3bf 8f6f 	isb	sy
 80055cc:	f3bf 8f4f 	dsb	sy
 80055d0:	623b      	str	r3, [r7, #32]
 80055d2:	e7fe      	b.n	80055d2 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80055d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d009      	beq.n	80055f0 <xQueueGiveFromISR+0x44>
 80055dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e0:	f383 8811 	msr	BASEPRI, r3
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	61fb      	str	r3, [r7, #28]
 80055ee:	e7fe      	b.n	80055ee <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80055f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d103      	bne.n	8005600 <xQueueGiveFromISR+0x54>
 80055f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d101      	bne.n	8005604 <xQueueGiveFromISR+0x58>
 8005600:	2301      	movs	r3, #1
 8005602:	e000      	b.n	8005606 <xQueueGiveFromISR+0x5a>
 8005604:	2300      	movs	r3, #0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d109      	bne.n	800561e <xQueueGiveFromISR+0x72>
 800560a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560e:	f383 8811 	msr	BASEPRI, r3
 8005612:	f3bf 8f6f 	isb	sy
 8005616:	f3bf 8f4f 	dsb	sy
 800561a:	61bb      	str	r3, [r7, #24]
 800561c:	e7fe      	b.n	800561c <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800561e:	f002 f9bd 	bl	800799c <vPortValidateInterruptPriority>
	__asm volatile
 8005622:	f3ef 8211 	mrs	r2, BASEPRI
 8005626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562a:	f383 8811 	msr	BASEPRI, r3
 800562e:	f3bf 8f6f 	isb	sy
 8005632:	f3bf 8f4f 	dsb	sy
 8005636:	617a      	str	r2, [r7, #20]
 8005638:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800563a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800563c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800563e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005642:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005648:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800564a:	429a      	cmp	r2, r3
 800564c:	d22b      	bcs.n	80056a6 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800564e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005650:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005654:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565a:	1c5a      	adds	r2, r3, #1
 800565c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005660:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005668:	d112      	bne.n	8005690 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800566a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566e:	2b00      	cmp	r3, #0
 8005670:	d016      	beq.n	80056a0 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005674:	3324      	adds	r3, #36	; 0x24
 8005676:	4618      	mov	r0, r3
 8005678:	f001 f852 	bl	8006720 <xTaskRemoveFromEventList>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00e      	beq.n	80056a0 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00b      	beq.n	80056a0 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	2201      	movs	r2, #1
 800568c:	601a      	str	r2, [r3, #0]
 800568e:	e007      	b.n	80056a0 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005690:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005694:	3301      	adds	r3, #1
 8005696:	b2db      	uxtb	r3, r3
 8005698:	b25a      	sxtb	r2, r3
 800569a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80056a0:	2301      	movs	r3, #1
 80056a2:	637b      	str	r3, [r7, #52]	; 0x34
 80056a4:	e001      	b.n	80056aa <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80056a6:	2300      	movs	r3, #0
 80056a8:	637b      	str	r3, [r7, #52]	; 0x34
 80056aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ac:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80056b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3738      	adds	r7, #56	; 0x38
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
	...

080056c0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b08c      	sub	sp, #48	; 0x30
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80056cc:	2300      	movs	r3, #0
 80056ce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80056d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d109      	bne.n	80056ee <xQueueReceive+0x2e>
	__asm volatile
 80056da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056de:	f383 8811 	msr	BASEPRI, r3
 80056e2:	f3bf 8f6f 	isb	sy
 80056e6:	f3bf 8f4f 	dsb	sy
 80056ea:	623b      	str	r3, [r7, #32]
 80056ec:	e7fe      	b.n	80056ec <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d103      	bne.n	80056fc <xQueueReceive+0x3c>
 80056f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d101      	bne.n	8005700 <xQueueReceive+0x40>
 80056fc:	2301      	movs	r3, #1
 80056fe:	e000      	b.n	8005702 <xQueueReceive+0x42>
 8005700:	2300      	movs	r3, #0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d109      	bne.n	800571a <xQueueReceive+0x5a>
 8005706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570a:	f383 8811 	msr	BASEPRI, r3
 800570e:	f3bf 8f6f 	isb	sy
 8005712:	f3bf 8f4f 	dsb	sy
 8005716:	61fb      	str	r3, [r7, #28]
 8005718:	e7fe      	b.n	8005718 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800571a:	f001 f9bb 	bl	8006a94 <xTaskGetSchedulerState>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d102      	bne.n	800572a <xQueueReceive+0x6a>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d101      	bne.n	800572e <xQueueReceive+0x6e>
 800572a:	2301      	movs	r3, #1
 800572c:	e000      	b.n	8005730 <xQueueReceive+0x70>
 800572e:	2300      	movs	r3, #0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d109      	bne.n	8005748 <xQueueReceive+0x88>
 8005734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005738:	f383 8811 	msr	BASEPRI, r3
 800573c:	f3bf 8f6f 	isb	sy
 8005740:	f3bf 8f4f 	dsb	sy
 8005744:	61bb      	str	r3, [r7, #24]
 8005746:	e7fe      	b.n	8005746 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8005748:	f002 f86e 	bl	8007828 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800574c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005750:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005754:	2b00      	cmp	r3, #0
 8005756:	d01f      	beq.n	8005798 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005758:	68b9      	ldr	r1, [r7, #8]
 800575a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800575c:	f000 fa92 	bl	8005c84 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005762:	1e5a      	subs	r2, r3, #1
 8005764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005766:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d00f      	beq.n	8005790 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005772:	3310      	adds	r3, #16
 8005774:	4618      	mov	r0, r3
 8005776:	f000 ffd3 	bl	8006720 <xTaskRemoveFromEventList>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d007      	beq.n	8005790 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005780:	4b3c      	ldr	r3, [pc, #240]	; (8005874 <xQueueReceive+0x1b4>)
 8005782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005786:	601a      	str	r2, [r3, #0]
 8005788:	f3bf 8f4f 	dsb	sy
 800578c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005790:	f002 f878 	bl	8007884 <vPortExitCritical>
				return pdPASS;
 8005794:	2301      	movs	r3, #1
 8005796:	e069      	b.n	800586c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d103      	bne.n	80057a6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800579e:	f002 f871 	bl	8007884 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80057a2:	2300      	movs	r3, #0
 80057a4:	e062      	b.n	800586c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d106      	bne.n	80057ba <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057ac:	f107 0310 	add.w	r3, r7, #16
 80057b0:	4618      	mov	r0, r3
 80057b2:	f001 f817 	bl	80067e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057b6:	2301      	movs	r3, #1
 80057b8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057ba:	f002 f863 	bl	8007884 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057be:	f000 fd81 	bl	80062c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057c2:	f002 f831 	bl	8007828 <vPortEnterCritical>
 80057c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057cc:	b25b      	sxtb	r3, r3
 80057ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d2:	d103      	bne.n	80057dc <xQueueReceive+0x11c>
 80057d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d6:	2200      	movs	r2, #0
 80057d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057e2:	b25b      	sxtb	r3, r3
 80057e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e8:	d103      	bne.n	80057f2 <xQueueReceive+0x132>
 80057ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057f2:	f002 f847 	bl	8007884 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057f6:	1d3a      	adds	r2, r7, #4
 80057f8:	f107 0310 	add.w	r3, r7, #16
 80057fc:	4611      	mov	r1, r2
 80057fe:	4618      	mov	r0, r3
 8005800:	f001 f806 	bl	8006810 <xTaskCheckForTimeOut>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d123      	bne.n	8005852 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800580a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800580c:	f000 fab2 	bl	8005d74 <prvIsQueueEmpty>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d017      	beq.n	8005846 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005818:	3324      	adds	r3, #36	; 0x24
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	4611      	mov	r1, r2
 800581e:	4618      	mov	r0, r3
 8005820:	f000 ff30 	bl	8006684 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005824:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005826:	f000 fa53 	bl	8005cd0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800582a:	f000 fd59 	bl	80062e0 <xTaskResumeAll>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d189      	bne.n	8005748 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8005834:	4b0f      	ldr	r3, [pc, #60]	; (8005874 <xQueueReceive+0x1b4>)
 8005836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800583a:	601a      	str	r2, [r3, #0]
 800583c:	f3bf 8f4f 	dsb	sy
 8005840:	f3bf 8f6f 	isb	sy
 8005844:	e780      	b.n	8005748 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005846:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005848:	f000 fa42 	bl	8005cd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800584c:	f000 fd48 	bl	80062e0 <xTaskResumeAll>
 8005850:	e77a      	b.n	8005748 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005852:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005854:	f000 fa3c 	bl	8005cd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005858:	f000 fd42 	bl	80062e0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800585c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800585e:	f000 fa89 	bl	8005d74 <prvIsQueueEmpty>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	f43f af6f 	beq.w	8005748 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800586a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800586c:	4618      	mov	r0, r3
 800586e:	3730      	adds	r7, #48	; 0x30
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}
 8005874:	e000ed04 	.word	0xe000ed04

08005878 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b08e      	sub	sp, #56	; 0x38
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005882:	2300      	movs	r3, #0
 8005884:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800588a:	2300      	movs	r3, #0
 800588c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800588e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005890:	2b00      	cmp	r3, #0
 8005892:	d109      	bne.n	80058a8 <xQueueSemaphoreTake+0x30>
 8005894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005898:	f383 8811 	msr	BASEPRI, r3
 800589c:	f3bf 8f6f 	isb	sy
 80058a0:	f3bf 8f4f 	dsb	sy
 80058a4:	623b      	str	r3, [r7, #32]
 80058a6:	e7fe      	b.n	80058a6 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80058a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d009      	beq.n	80058c4 <xQueueSemaphoreTake+0x4c>
 80058b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b4:	f383 8811 	msr	BASEPRI, r3
 80058b8:	f3bf 8f6f 	isb	sy
 80058bc:	f3bf 8f4f 	dsb	sy
 80058c0:	61fb      	str	r3, [r7, #28]
 80058c2:	e7fe      	b.n	80058c2 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80058c4:	f001 f8e6 	bl	8006a94 <xTaskGetSchedulerState>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d102      	bne.n	80058d4 <xQueueSemaphoreTake+0x5c>
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d101      	bne.n	80058d8 <xQueueSemaphoreTake+0x60>
 80058d4:	2301      	movs	r3, #1
 80058d6:	e000      	b.n	80058da <xQueueSemaphoreTake+0x62>
 80058d8:	2300      	movs	r3, #0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d109      	bne.n	80058f2 <xQueueSemaphoreTake+0x7a>
 80058de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e2:	f383 8811 	msr	BASEPRI, r3
 80058e6:	f3bf 8f6f 	isb	sy
 80058ea:	f3bf 8f4f 	dsb	sy
 80058ee:	61bb      	str	r3, [r7, #24]
 80058f0:	e7fe      	b.n	80058f0 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80058f2:	f001 ff99 	bl	8007828 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80058f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fa:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80058fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d024      	beq.n	800594c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005904:	1e5a      	subs	r2, r3, #1
 8005906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005908:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800590a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d104      	bne.n	800591c <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005912:	f001 fa85 	bl	8006e20 <pvTaskIncrementMutexHeldCount>
 8005916:	4602      	mov	r2, r0
 8005918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800591a:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800591c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00f      	beq.n	8005944 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005926:	3310      	adds	r3, #16
 8005928:	4618      	mov	r0, r3
 800592a:	f000 fef9 	bl	8006720 <xTaskRemoveFromEventList>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d007      	beq.n	8005944 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005934:	4b53      	ldr	r3, [pc, #332]	; (8005a84 <xQueueSemaphoreTake+0x20c>)
 8005936:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800593a:	601a      	str	r2, [r3, #0]
 800593c:	f3bf 8f4f 	dsb	sy
 8005940:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005944:	f001 ff9e 	bl	8007884 <vPortExitCritical>
				return pdPASS;
 8005948:	2301      	movs	r3, #1
 800594a:	e096      	b.n	8005a7a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d110      	bne.n	8005974 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005954:	2b00      	cmp	r3, #0
 8005956:	d009      	beq.n	800596c <xQueueSemaphoreTake+0xf4>
 8005958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800595c:	f383 8811 	msr	BASEPRI, r3
 8005960:	f3bf 8f6f 	isb	sy
 8005964:	f3bf 8f4f 	dsb	sy
 8005968:	617b      	str	r3, [r7, #20]
 800596a:	e7fe      	b.n	800596a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800596c:	f001 ff8a 	bl	8007884 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005970:	2300      	movs	r3, #0
 8005972:	e082      	b.n	8005a7a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005976:	2b00      	cmp	r3, #0
 8005978:	d106      	bne.n	8005988 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800597a:	f107 030c 	add.w	r3, r7, #12
 800597e:	4618      	mov	r0, r3
 8005980:	f000 ff30 	bl	80067e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005984:	2301      	movs	r3, #1
 8005986:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005988:	f001 ff7c 	bl	8007884 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800598c:	f000 fc9a 	bl	80062c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005990:	f001 ff4a 	bl	8007828 <vPortEnterCritical>
 8005994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005996:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800599a:	b25b      	sxtb	r3, r3
 800599c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a0:	d103      	bne.n	80059aa <xQueueSemaphoreTake+0x132>
 80059a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a4:	2200      	movs	r2, #0
 80059a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059b0:	b25b      	sxtb	r3, r3
 80059b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b6:	d103      	bne.n	80059c0 <xQueueSemaphoreTake+0x148>
 80059b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059c0:	f001 ff60 	bl	8007884 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80059c4:	463a      	mov	r2, r7
 80059c6:	f107 030c 	add.w	r3, r7, #12
 80059ca:	4611      	mov	r1, r2
 80059cc:	4618      	mov	r0, r3
 80059ce:	f000 ff1f 	bl	8006810 <xTaskCheckForTimeOut>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d132      	bne.n	8005a3e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80059da:	f000 f9cb 	bl	8005d74 <prvIsQueueEmpty>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d026      	beq.n	8005a32 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80059e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d109      	bne.n	8005a00 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80059ec:	f001 ff1c 	bl	8007828 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80059f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	4618      	mov	r0, r3
 80059f6:	f001 f86b 	bl	8006ad0 <xTaskPriorityInherit>
 80059fa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80059fc:	f001 ff42 	bl	8007884 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a02:	3324      	adds	r3, #36	; 0x24
 8005a04:	683a      	ldr	r2, [r7, #0]
 8005a06:	4611      	mov	r1, r2
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f000 fe3b 	bl	8006684 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005a0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a10:	f000 f95e 	bl	8005cd0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005a14:	f000 fc64 	bl	80062e0 <xTaskResumeAll>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	f47f af69 	bne.w	80058f2 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8005a20:	4b18      	ldr	r3, [pc, #96]	; (8005a84 <xQueueSemaphoreTake+0x20c>)
 8005a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a26:	601a      	str	r2, [r3, #0]
 8005a28:	f3bf 8f4f 	dsb	sy
 8005a2c:	f3bf 8f6f 	isb	sy
 8005a30:	e75f      	b.n	80058f2 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005a32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a34:	f000 f94c 	bl	8005cd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a38:	f000 fc52 	bl	80062e0 <xTaskResumeAll>
 8005a3c:	e759      	b.n	80058f2 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005a3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a40:	f000 f946 	bl	8005cd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a44:	f000 fc4c 	bl	80062e0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a4a:	f000 f993 	bl	8005d74 <prvIsQueueEmpty>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f43f af4e 	beq.w	80058f2 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00d      	beq.n	8005a78 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8005a5c:	f001 fee4 	bl	8007828 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005a60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a62:	f000 f88e 	bl	8005b82 <prvGetDisinheritPriorityAfterTimeout>
 8005a66:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8005a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f001 f938 	bl	8006ce4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005a74:	f001 ff06 	bl	8007884 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005a78:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3738      	adds	r7, #56	; 0x38
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	e000ed04 	.word	0xe000ed04

08005a88 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b08e      	sub	sp, #56	; 0x38
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d109      	bne.n	8005ab2 <xQueueReceiveFromISR+0x2a>
 8005a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa2:	f383 8811 	msr	BASEPRI, r3
 8005aa6:	f3bf 8f6f 	isb	sy
 8005aaa:	f3bf 8f4f 	dsb	sy
 8005aae:	623b      	str	r3, [r7, #32]
 8005ab0:	e7fe      	b.n	8005ab0 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d103      	bne.n	8005ac0 <xQueueReceiveFromISR+0x38>
 8005ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d101      	bne.n	8005ac4 <xQueueReceiveFromISR+0x3c>
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e000      	b.n	8005ac6 <xQueueReceiveFromISR+0x3e>
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d109      	bne.n	8005ade <xQueueReceiveFromISR+0x56>
 8005aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ace:	f383 8811 	msr	BASEPRI, r3
 8005ad2:	f3bf 8f6f 	isb	sy
 8005ad6:	f3bf 8f4f 	dsb	sy
 8005ada:	61fb      	str	r3, [r7, #28]
 8005adc:	e7fe      	b.n	8005adc <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ade:	f001 ff5d 	bl	800799c <vPortValidateInterruptPriority>
	__asm volatile
 8005ae2:	f3ef 8211 	mrs	r2, BASEPRI
 8005ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aea:	f383 8811 	msr	BASEPRI, r3
 8005aee:	f3bf 8f6f 	isb	sy
 8005af2:	f3bf 8f4f 	dsb	sy
 8005af6:	61ba      	str	r2, [r7, #24]
 8005af8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005afa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005afc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b02:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d02f      	beq.n	8005b6a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005b14:	68b9      	ldr	r1, [r7, #8]
 8005b16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b18:	f000 f8b4 	bl	8005c84 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b1e:	1e5a      	subs	r2, r3, #1
 8005b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b22:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005b24:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b2c:	d112      	bne.n	8005b54 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d016      	beq.n	8005b64 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b38:	3310      	adds	r3, #16
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f000 fdf0 	bl	8006720 <xTaskRemoveFromEventList>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00e      	beq.n	8005b64 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00b      	beq.n	8005b64 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	601a      	str	r2, [r3, #0]
 8005b52:	e007      	b.n	8005b64 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005b54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b58:	3301      	adds	r3, #1
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	b25a      	sxtb	r2, r3
 8005b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005b64:	2301      	movs	r3, #1
 8005b66:	637b      	str	r3, [r7, #52]	; 0x34
 8005b68:	e001      	b.n	8005b6e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	637b      	str	r3, [r7, #52]	; 0x34
 8005b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b70:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3738      	adds	r7, #56	; 0x38
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005b82:	b480      	push	{r7}
 8005b84:	b085      	sub	sp, #20
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d006      	beq.n	8005ba0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f1c3 0307 	rsb	r3, r3, #7
 8005b9c:	60fb      	str	r3, [r7, #12]
 8005b9e:	e001      	b.n	8005ba4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
	}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3714      	adds	r7, #20
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bc80      	pop	{r7}
 8005bae:	4770      	bx	lr

08005bb0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b086      	sub	sp, #24
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	60b9      	str	r1, [r7, #8]
 8005bba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d10d      	bne.n	8005bea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d14d      	bne.n	8005c72 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f000 fffe 	bl	8006bdc <xTaskPriorityDisinherit>
 8005be0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	605a      	str	r2, [r3, #4]
 8005be8:	e043      	b.n	8005c72 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d119      	bne.n	8005c24 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	6898      	ldr	r0, [r3, #8]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	68b9      	ldr	r1, [r7, #8]
 8005bfc:	f012 fb7f 	bl	80182fe <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	689a      	ldr	r2, [r3, #8]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c08:	441a      	add	r2, r3
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	689a      	ldr	r2, [r3, #8]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d32b      	bcc.n	8005c72 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	609a      	str	r2, [r3, #8]
 8005c22:	e026      	b.n	8005c72 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	68d8      	ldr	r0, [r3, #12]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	68b9      	ldr	r1, [r7, #8]
 8005c30:	f012 fb65 	bl	80182fe <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	68da      	ldr	r2, [r3, #12]
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3c:	425b      	negs	r3, r3
 8005c3e:	441a      	add	r2, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	68da      	ldr	r2, [r3, #12]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d207      	bcs.n	8005c60 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	685a      	ldr	r2, [r3, #4]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c58:	425b      	negs	r3, r3
 8005c5a:	441a      	add	r2, r3
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d105      	bne.n	8005c72 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d002      	beq.n	8005c72 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	1c5a      	adds	r2, r3, #1
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005c7a:	697b      	ldr	r3, [r7, #20]
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3718      	adds	r7, #24
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}

08005c84 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b082      	sub	sp, #8
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d018      	beq.n	8005cc8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	68da      	ldr	r2, [r3, #12]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9e:	441a      	add	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	68da      	ldr	r2, [r3, #12]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d303      	bcc.n	8005cb8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	68d9      	ldr	r1, [r3, #12]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	6838      	ldr	r0, [r7, #0]
 8005cc4:	f012 fb1b 	bl	80182fe <memcpy>
	}
}
 8005cc8:	bf00      	nop
 8005cca:	3708      	adds	r7, #8
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005cd8:	f001 fda6 	bl	8007828 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ce2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ce4:	e011      	b.n	8005d0a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d012      	beq.n	8005d14 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	3324      	adds	r3, #36	; 0x24
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f000 fd14 	bl	8006720 <xTaskRemoveFromEventList>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d001      	beq.n	8005d02 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005cfe:	f000 fde7 	bl	80068d0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005d02:	7bfb      	ldrb	r3, [r7, #15]
 8005d04:	3b01      	subs	r3, #1
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	dce9      	bgt.n	8005ce6 <prvUnlockQueue+0x16>
 8005d12:	e000      	b.n	8005d16 <prvUnlockQueue+0x46>
					break;
 8005d14:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	22ff      	movs	r2, #255	; 0xff
 8005d1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005d1e:	f001 fdb1 	bl	8007884 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d22:	f001 fd81 	bl	8007828 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d2c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d2e:	e011      	b.n	8005d54 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d012      	beq.n	8005d5e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	3310      	adds	r3, #16
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f000 fcef 	bl	8006720 <xTaskRemoveFromEventList>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d001      	beq.n	8005d4c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005d48:	f000 fdc2 	bl	80068d0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d4c:	7bbb      	ldrb	r3, [r7, #14]
 8005d4e:	3b01      	subs	r3, #1
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	dce9      	bgt.n	8005d30 <prvUnlockQueue+0x60>
 8005d5c:	e000      	b.n	8005d60 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005d5e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	22ff      	movs	r2, #255	; 0xff
 8005d64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005d68:	f001 fd8c 	bl	8007884 <vPortExitCritical>
}
 8005d6c:	bf00      	nop
 8005d6e:	3710      	adds	r7, #16
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d7c:	f001 fd54 	bl	8007828 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d102      	bne.n	8005d8e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	60fb      	str	r3, [r7, #12]
 8005d8c:	e001      	b.n	8005d92 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d92:	f001 fd77 	bl	8007884 <vPortExitCritical>

	return xReturn;
 8005d96:	68fb      	ldr	r3, [r7, #12]
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3710      	adds	r7, #16
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005da8:	f001 fd3e 	bl	8007828 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d102      	bne.n	8005dbe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005db8:	2301      	movs	r3, #1
 8005dba:	60fb      	str	r3, [r7, #12]
 8005dbc:	e001      	b.n	8005dc2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005dc2:	f001 fd5f 	bl	8007884 <vPortExitCritical>

	return xReturn;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3710      	adds	r7, #16
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005dda:	2300      	movs	r3, #0
 8005ddc:	60fb      	str	r3, [r7, #12]
 8005dde:	e014      	b.n	8005e0a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005de0:	4a0e      	ldr	r2, [pc, #56]	; (8005e1c <vQueueAddToRegistry+0x4c>)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d10b      	bne.n	8005e04 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005dec:	490b      	ldr	r1, [pc, #44]	; (8005e1c <vQueueAddToRegistry+0x4c>)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	683a      	ldr	r2, [r7, #0]
 8005df2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005df6:	4a09      	ldr	r2, [pc, #36]	; (8005e1c <vQueueAddToRegistry+0x4c>)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	00db      	lsls	r3, r3, #3
 8005dfc:	4413      	add	r3, r2
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005e02:	e005      	b.n	8005e10 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	3301      	adds	r3, #1
 8005e08:	60fb      	str	r3, [r7, #12]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2b07      	cmp	r3, #7
 8005e0e:	d9e7      	bls.n	8005de0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005e10:	bf00      	nop
 8005e12:	3714      	adds	r7, #20
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bc80      	pop	{r7}
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	20007ddc 	.word	0x20007ddc

08005e20 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b086      	sub	sp, #24
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005e30:	f001 fcfa 	bl	8007828 <vPortEnterCritical>
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e3a:	b25b      	sxtb	r3, r3
 8005e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e40:	d103      	bne.n	8005e4a <vQueueWaitForMessageRestricted+0x2a>
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e50:	b25b      	sxtb	r3, r3
 8005e52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e56:	d103      	bne.n	8005e60 <vQueueWaitForMessageRestricted+0x40>
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e60:	f001 fd10 	bl	8007884 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d106      	bne.n	8005e7a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	3324      	adds	r3, #36	; 0x24
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	68b9      	ldr	r1, [r7, #8]
 8005e74:	4618      	mov	r0, r3
 8005e76:	f000 fc29 	bl	80066cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005e7a:	6978      	ldr	r0, [r7, #20]
 8005e7c:	f7ff ff28 	bl	8005cd0 <prvUnlockQueue>
	}
 8005e80:	bf00      	nop
 8005e82:	3718      	adds	r7, #24
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b08e      	sub	sp, #56	; 0x38
 8005e8c:	af04      	add	r7, sp, #16
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	607a      	str	r2, [r7, #4]
 8005e94:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d109      	bne.n	8005eb0 <xTaskCreateStatic+0x28>
	__asm volatile
 8005e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea0:	f383 8811 	msr	BASEPRI, r3
 8005ea4:	f3bf 8f6f 	isb	sy
 8005ea8:	f3bf 8f4f 	dsb	sy
 8005eac:	623b      	str	r3, [r7, #32]
 8005eae:	e7fe      	b.n	8005eae <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d109      	bne.n	8005eca <xTaskCreateStatic+0x42>
 8005eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eba:	f383 8811 	msr	BASEPRI, r3
 8005ebe:	f3bf 8f6f 	isb	sy
 8005ec2:	f3bf 8f4f 	dsb	sy
 8005ec6:	61fb      	str	r3, [r7, #28]
 8005ec8:	e7fe      	b.n	8005ec8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005eca:	2360      	movs	r3, #96	; 0x60
 8005ecc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	2b60      	cmp	r3, #96	; 0x60
 8005ed2:	d009      	beq.n	8005ee8 <xTaskCreateStatic+0x60>
 8005ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed8:	f383 8811 	msr	BASEPRI, r3
 8005edc:	f3bf 8f6f 	isb	sy
 8005ee0:	f3bf 8f4f 	dsb	sy
 8005ee4:	61bb      	str	r3, [r7, #24]
 8005ee6:	e7fe      	b.n	8005ee6 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d01e      	beq.n	8005f2c <xTaskCreateStatic+0xa4>
 8005eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d01b      	beq.n	8005f2c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005efc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f00:	2202      	movs	r2, #2
 8005f02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f06:	2300      	movs	r3, #0
 8005f08:	9303      	str	r3, [sp, #12]
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0c:	9302      	str	r3, [sp, #8]
 8005f0e:	f107 0314 	add.w	r3, r7, #20
 8005f12:	9301      	str	r3, [sp, #4]
 8005f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f16:	9300      	str	r3, [sp, #0]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	68b9      	ldr	r1, [r7, #8]
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	f000 f850 	bl	8005fc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f26:	f000 f8cb 	bl	80060c0 <prvAddNewTaskToReadyList>
 8005f2a:	e001      	b.n	8005f30 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f30:	697b      	ldr	r3, [r7, #20]
	}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3728      	adds	r7, #40	; 0x28
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}

08005f3a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b08c      	sub	sp, #48	; 0x30
 8005f3e:	af04      	add	r7, sp, #16
 8005f40:	60f8      	str	r0, [r7, #12]
 8005f42:	60b9      	str	r1, [r7, #8]
 8005f44:	603b      	str	r3, [r7, #0]
 8005f46:	4613      	mov	r3, r2
 8005f48:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f4a:	88fb      	ldrh	r3, [r7, #6]
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f001 fd60 	bl	8007a14 <pvPortMalloc>
 8005f54:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00e      	beq.n	8005f7a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005f5c:	2060      	movs	r0, #96	; 0x60
 8005f5e:	f001 fd59 	bl	8007a14 <pvPortMalloc>
 8005f62:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d003      	beq.n	8005f72 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	697a      	ldr	r2, [r7, #20]
 8005f6e:	631a      	str	r2, [r3, #48]	; 0x30
 8005f70:	e005      	b.n	8005f7e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005f72:	6978      	ldr	r0, [r7, #20]
 8005f74:	f001 fe10 	bl	8007b98 <vPortFree>
 8005f78:	e001      	b.n	8005f7e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d017      	beq.n	8005fb4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f8c:	88fa      	ldrh	r2, [r7, #6]
 8005f8e:	2300      	movs	r3, #0
 8005f90:	9303      	str	r3, [sp, #12]
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	9302      	str	r3, [sp, #8]
 8005f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f98:	9301      	str	r3, [sp, #4]
 8005f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f9c:	9300      	str	r3, [sp, #0]
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	68b9      	ldr	r1, [r7, #8]
 8005fa2:	68f8      	ldr	r0, [r7, #12]
 8005fa4:	f000 f80e 	bl	8005fc4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005fa8:	69f8      	ldr	r0, [r7, #28]
 8005faa:	f000 f889 	bl	80060c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	61bb      	str	r3, [r7, #24]
 8005fb2:	e002      	b.n	8005fba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005fb4:	f04f 33ff 	mov.w	r3, #4294967295
 8005fb8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005fba:	69bb      	ldr	r3, [r7, #24]
	}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3720      	adds	r7, #32
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b088      	sub	sp, #32
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]
 8005fd0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005fdc:	3b01      	subs	r3, #1
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	f023 0307 	bic.w	r3, r3, #7
 8005fea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	f003 0307 	and.w	r3, r3, #7
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d009      	beq.n	800600a <prvInitialiseNewTask+0x46>
 8005ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffa:	f383 8811 	msr	BASEPRI, r3
 8005ffe:	f3bf 8f6f 	isb	sy
 8006002:	f3bf 8f4f 	dsb	sy
 8006006:	617b      	str	r3, [r7, #20]
 8006008:	e7fe      	b.n	8006008 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800600a:	2300      	movs	r3, #0
 800600c:	61fb      	str	r3, [r7, #28]
 800600e:	e012      	b.n	8006036 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006010:	68ba      	ldr	r2, [r7, #8]
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	4413      	add	r3, r2
 8006016:	7819      	ldrb	r1, [r3, #0]
 8006018:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	4413      	add	r3, r2
 800601e:	3334      	adds	r3, #52	; 0x34
 8006020:	460a      	mov	r2, r1
 8006022:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006024:	68ba      	ldr	r2, [r7, #8]
 8006026:	69fb      	ldr	r3, [r7, #28]
 8006028:	4413      	add	r3, r2
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d006      	beq.n	800603e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	3301      	adds	r3, #1
 8006034:	61fb      	str	r3, [r7, #28]
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	2b18      	cmp	r3, #24
 800603a:	d9e9      	bls.n	8006010 <prvInitialiseNewTask+0x4c>
 800603c:	e000      	b.n	8006040 <prvInitialiseNewTask+0x7c>
		{
			break;
 800603e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006042:	2200      	movs	r2, #0
 8006044:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604a:	2b06      	cmp	r3, #6
 800604c:	d901      	bls.n	8006052 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800604e:	2306      	movs	r3, #6
 8006050:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006054:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006056:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800605c:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800605e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006060:	2200      	movs	r2, #0
 8006062:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006066:	3304      	adds	r3, #4
 8006068:	4618      	mov	r0, r3
 800606a:	f7fe fefc 	bl	8004e66 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800606e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006070:	3318      	adds	r3, #24
 8006072:	4618      	mov	r0, r3
 8006074:	f7fe fef7 	bl	8004e66 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800607c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800607e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006080:	f1c3 0207 	rsb	r2, r3, #7
 8006084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006086:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800608c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800608e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006090:	2200      	movs	r2, #0
 8006092:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006096:	2200      	movs	r2, #0
 8006098:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800609c:	683a      	ldr	r2, [r7, #0]
 800609e:	68f9      	ldr	r1, [r7, #12]
 80060a0:	69b8      	ldr	r0, [r7, #24]
 80060a2:	f001 fad5 	bl	8007650 <pxPortInitialiseStack>
 80060a6:	4602      	mov	r2, r0
 80060a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060aa:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80060ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d002      	beq.n	80060b8 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80060b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060b8:	bf00      	nop
 80060ba:	3720      	adds	r7, #32
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b082      	sub	sp, #8
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80060c8:	f001 fbae 	bl	8007828 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80060cc:	4b2a      	ldr	r3, [pc, #168]	; (8006178 <prvAddNewTaskToReadyList+0xb8>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	3301      	adds	r3, #1
 80060d2:	4a29      	ldr	r2, [pc, #164]	; (8006178 <prvAddNewTaskToReadyList+0xb8>)
 80060d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80060d6:	4b29      	ldr	r3, [pc, #164]	; (800617c <prvAddNewTaskToReadyList+0xbc>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d109      	bne.n	80060f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80060de:	4a27      	ldr	r2, [pc, #156]	; (800617c <prvAddNewTaskToReadyList+0xbc>)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80060e4:	4b24      	ldr	r3, [pc, #144]	; (8006178 <prvAddNewTaskToReadyList+0xb8>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d110      	bne.n	800610e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80060ec:	f000 fc14 	bl	8006918 <prvInitialiseTaskLists>
 80060f0:	e00d      	b.n	800610e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80060f2:	4b23      	ldr	r3, [pc, #140]	; (8006180 <prvAddNewTaskToReadyList+0xc0>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d109      	bne.n	800610e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80060fa:	4b20      	ldr	r3, [pc, #128]	; (800617c <prvAddNewTaskToReadyList+0xbc>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006104:	429a      	cmp	r2, r3
 8006106:	d802      	bhi.n	800610e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006108:	4a1c      	ldr	r2, [pc, #112]	; (800617c <prvAddNewTaskToReadyList+0xbc>)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800610e:	4b1d      	ldr	r3, [pc, #116]	; (8006184 <prvAddNewTaskToReadyList+0xc4>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	3301      	adds	r3, #1
 8006114:	4a1b      	ldr	r2, [pc, #108]	; (8006184 <prvAddNewTaskToReadyList+0xc4>)
 8006116:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800611c:	2201      	movs	r2, #1
 800611e:	409a      	lsls	r2, r3
 8006120:	4b19      	ldr	r3, [pc, #100]	; (8006188 <prvAddNewTaskToReadyList+0xc8>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4313      	orrs	r3, r2
 8006126:	4a18      	ldr	r2, [pc, #96]	; (8006188 <prvAddNewTaskToReadyList+0xc8>)
 8006128:	6013      	str	r3, [r2, #0]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800612e:	4613      	mov	r3, r2
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	4413      	add	r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	4a15      	ldr	r2, [pc, #84]	; (800618c <prvAddNewTaskToReadyList+0xcc>)
 8006138:	441a      	add	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	3304      	adds	r3, #4
 800613e:	4619      	mov	r1, r3
 8006140:	4610      	mov	r0, r2
 8006142:	f7fe fe9c 	bl	8004e7e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006146:	f001 fb9d 	bl	8007884 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800614a:	4b0d      	ldr	r3, [pc, #52]	; (8006180 <prvAddNewTaskToReadyList+0xc0>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00e      	beq.n	8006170 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006152:	4b0a      	ldr	r3, [pc, #40]	; (800617c <prvAddNewTaskToReadyList+0xbc>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800615c:	429a      	cmp	r2, r3
 800615e:	d207      	bcs.n	8006170 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006160:	4b0b      	ldr	r3, [pc, #44]	; (8006190 <prvAddNewTaskToReadyList+0xd0>)
 8006162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006166:	601a      	str	r2, [r3, #0]
 8006168:	f3bf 8f4f 	dsb	sy
 800616c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006170:	bf00      	nop
 8006172:	3708      	adds	r7, #8
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	20000864 	.word	0x20000864
 800617c:	20000764 	.word	0x20000764
 8006180:	20000870 	.word	0x20000870
 8006184:	20000880 	.word	0x20000880
 8006188:	2000086c 	.word	0x2000086c
 800618c:	20000768 	.word	0x20000768
 8006190:	e000ed04 	.word	0xe000ed04

08006194 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800619c:	2300      	movs	r3, #0
 800619e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d016      	beq.n	80061d4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80061a6:	4b13      	ldr	r3, [pc, #76]	; (80061f4 <vTaskDelay+0x60>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d009      	beq.n	80061c2 <vTaskDelay+0x2e>
 80061ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b2:	f383 8811 	msr	BASEPRI, r3
 80061b6:	f3bf 8f6f 	isb	sy
 80061ba:	f3bf 8f4f 	dsb	sy
 80061be:	60bb      	str	r3, [r7, #8]
 80061c0:	e7fe      	b.n	80061c0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80061c2:	f000 f87f 	bl	80062c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80061c6:	2100      	movs	r1, #0
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 fe3d 	bl	8006e48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80061ce:	f000 f887 	bl	80062e0 <xTaskResumeAll>
 80061d2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d107      	bne.n	80061ea <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80061da:	4b07      	ldr	r3, [pc, #28]	; (80061f8 <vTaskDelay+0x64>)
 80061dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061e0:	601a      	str	r2, [r3, #0]
 80061e2:	f3bf 8f4f 	dsb	sy
 80061e6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80061ea:	bf00      	nop
 80061ec:	3710      	adds	r7, #16
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	2000088c 	.word	0x2000088c
 80061f8:	e000ed04 	.word	0xe000ed04

080061fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b08a      	sub	sp, #40	; 0x28
 8006200:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006202:	2300      	movs	r3, #0
 8006204:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006206:	2300      	movs	r3, #0
 8006208:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800620a:	463a      	mov	r2, r7
 800620c:	1d39      	adds	r1, r7, #4
 800620e:	f107 0308 	add.w	r3, r7, #8
 8006212:	4618      	mov	r0, r3
 8006214:	f7fa fcb0 	bl	8000b78 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006218:	6839      	ldr	r1, [r7, #0]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	68ba      	ldr	r2, [r7, #8]
 800621e:	9202      	str	r2, [sp, #8]
 8006220:	9301      	str	r3, [sp, #4]
 8006222:	2300      	movs	r3, #0
 8006224:	9300      	str	r3, [sp, #0]
 8006226:	2300      	movs	r3, #0
 8006228:	460a      	mov	r2, r1
 800622a:	4920      	ldr	r1, [pc, #128]	; (80062ac <vTaskStartScheduler+0xb0>)
 800622c:	4820      	ldr	r0, [pc, #128]	; (80062b0 <vTaskStartScheduler+0xb4>)
 800622e:	f7ff fe2b 	bl	8005e88 <xTaskCreateStatic>
 8006232:	4602      	mov	r2, r0
 8006234:	4b1f      	ldr	r3, [pc, #124]	; (80062b4 <vTaskStartScheduler+0xb8>)
 8006236:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006238:	4b1e      	ldr	r3, [pc, #120]	; (80062b4 <vTaskStartScheduler+0xb8>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d002      	beq.n	8006246 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006240:	2301      	movs	r3, #1
 8006242:	617b      	str	r3, [r7, #20]
 8006244:	e001      	b.n	800624a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006246:	2300      	movs	r3, #0
 8006248:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d102      	bne.n	8006256 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006250:	f000 fe60 	bl	8006f14 <xTimerCreateTimerTask>
 8006254:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	2b01      	cmp	r3, #1
 800625a:	d115      	bne.n	8006288 <vTaskStartScheduler+0x8c>
 800625c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006260:	f383 8811 	msr	BASEPRI, r3
 8006264:	f3bf 8f6f 	isb	sy
 8006268:	f3bf 8f4f 	dsb	sy
 800626c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800626e:	4b12      	ldr	r3, [pc, #72]	; (80062b8 <vTaskStartScheduler+0xbc>)
 8006270:	f04f 32ff 	mov.w	r2, #4294967295
 8006274:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006276:	4b11      	ldr	r3, [pc, #68]	; (80062bc <vTaskStartScheduler+0xc0>)
 8006278:	2201      	movs	r2, #1
 800627a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800627c:	4b10      	ldr	r3, [pc, #64]	; (80062c0 <vTaskStartScheduler+0xc4>)
 800627e:	2200      	movs	r2, #0
 8006280:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006282:	f001 fa61 	bl	8007748 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006286:	e00d      	b.n	80062a4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800628e:	d109      	bne.n	80062a4 <vTaskStartScheduler+0xa8>
 8006290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006294:	f383 8811 	msr	BASEPRI, r3
 8006298:	f3bf 8f6f 	isb	sy
 800629c:	f3bf 8f4f 	dsb	sy
 80062a0:	60fb      	str	r3, [r7, #12]
 80062a2:	e7fe      	b.n	80062a2 <vTaskStartScheduler+0xa6>
}
 80062a4:	bf00      	nop
 80062a6:	3718      	adds	r7, #24
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	080193a8 	.word	0x080193a8
 80062b0:	080068e9 	.word	0x080068e9
 80062b4:	20000888 	.word	0x20000888
 80062b8:	20000884 	.word	0x20000884
 80062bc:	20000870 	.word	0x20000870
 80062c0:	20000868 	.word	0x20000868

080062c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80062c4:	b480      	push	{r7}
 80062c6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80062c8:	4b04      	ldr	r3, [pc, #16]	; (80062dc <vTaskSuspendAll+0x18>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	3301      	adds	r3, #1
 80062ce:	4a03      	ldr	r2, [pc, #12]	; (80062dc <vTaskSuspendAll+0x18>)
 80062d0:	6013      	str	r3, [r2, #0]
}
 80062d2:	bf00      	nop
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bc80      	pop	{r7}
 80062d8:	4770      	bx	lr
 80062da:	bf00      	nop
 80062dc:	2000088c 	.word	0x2000088c

080062e0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80062e6:	2300      	movs	r3, #0
 80062e8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80062ea:	2300      	movs	r3, #0
 80062ec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80062ee:	4b41      	ldr	r3, [pc, #260]	; (80063f4 <xTaskResumeAll+0x114>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d109      	bne.n	800630a <xTaskResumeAll+0x2a>
 80062f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fa:	f383 8811 	msr	BASEPRI, r3
 80062fe:	f3bf 8f6f 	isb	sy
 8006302:	f3bf 8f4f 	dsb	sy
 8006306:	603b      	str	r3, [r7, #0]
 8006308:	e7fe      	b.n	8006308 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800630a:	f001 fa8d 	bl	8007828 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800630e:	4b39      	ldr	r3, [pc, #228]	; (80063f4 <xTaskResumeAll+0x114>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	3b01      	subs	r3, #1
 8006314:	4a37      	ldr	r2, [pc, #220]	; (80063f4 <xTaskResumeAll+0x114>)
 8006316:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006318:	4b36      	ldr	r3, [pc, #216]	; (80063f4 <xTaskResumeAll+0x114>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d161      	bne.n	80063e4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006320:	4b35      	ldr	r3, [pc, #212]	; (80063f8 <xTaskResumeAll+0x118>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d05d      	beq.n	80063e4 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006328:	e02e      	b.n	8006388 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800632a:	4b34      	ldr	r3, [pc, #208]	; (80063fc <xTaskResumeAll+0x11c>)
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	3318      	adds	r3, #24
 8006336:	4618      	mov	r0, r3
 8006338:	f7fe fdfc 	bl	8004f34 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	3304      	adds	r3, #4
 8006340:	4618      	mov	r0, r3
 8006342:	f7fe fdf7 	bl	8004f34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634a:	2201      	movs	r2, #1
 800634c:	409a      	lsls	r2, r3
 800634e:	4b2c      	ldr	r3, [pc, #176]	; (8006400 <xTaskResumeAll+0x120>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4313      	orrs	r3, r2
 8006354:	4a2a      	ldr	r2, [pc, #168]	; (8006400 <xTaskResumeAll+0x120>)
 8006356:	6013      	str	r3, [r2, #0]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800635c:	4613      	mov	r3, r2
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	4413      	add	r3, r2
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	4a27      	ldr	r2, [pc, #156]	; (8006404 <xTaskResumeAll+0x124>)
 8006366:	441a      	add	r2, r3
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	3304      	adds	r3, #4
 800636c:	4619      	mov	r1, r3
 800636e:	4610      	mov	r0, r2
 8006370:	f7fe fd85 	bl	8004e7e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006378:	4b23      	ldr	r3, [pc, #140]	; (8006408 <xTaskResumeAll+0x128>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800637e:	429a      	cmp	r2, r3
 8006380:	d302      	bcc.n	8006388 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8006382:	4b22      	ldr	r3, [pc, #136]	; (800640c <xTaskResumeAll+0x12c>)
 8006384:	2201      	movs	r2, #1
 8006386:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006388:	4b1c      	ldr	r3, [pc, #112]	; (80063fc <xTaskResumeAll+0x11c>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d1cc      	bne.n	800632a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006396:	f000 fb59 	bl	8006a4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800639a:	4b1d      	ldr	r3, [pc, #116]	; (8006410 <xTaskResumeAll+0x130>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d010      	beq.n	80063c8 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80063a6:	f000 f857 	bl	8006458 <xTaskIncrementTick>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d002      	beq.n	80063b6 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80063b0:	4b16      	ldr	r3, [pc, #88]	; (800640c <xTaskResumeAll+0x12c>)
 80063b2:	2201      	movs	r2, #1
 80063b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	3b01      	subs	r3, #1
 80063ba:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1f1      	bne.n	80063a6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80063c2:	4b13      	ldr	r3, [pc, #76]	; (8006410 <xTaskResumeAll+0x130>)
 80063c4:	2200      	movs	r2, #0
 80063c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80063c8:	4b10      	ldr	r3, [pc, #64]	; (800640c <xTaskResumeAll+0x12c>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d009      	beq.n	80063e4 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80063d0:	2301      	movs	r3, #1
 80063d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80063d4:	4b0f      	ldr	r3, [pc, #60]	; (8006414 <xTaskResumeAll+0x134>)
 80063d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063da:	601a      	str	r2, [r3, #0]
 80063dc:	f3bf 8f4f 	dsb	sy
 80063e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80063e4:	f001 fa4e 	bl	8007884 <vPortExitCritical>

	return xAlreadyYielded;
 80063e8:	68bb      	ldr	r3, [r7, #8]
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3710      	adds	r7, #16
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	2000088c 	.word	0x2000088c
 80063f8:	20000864 	.word	0x20000864
 80063fc:	20000824 	.word	0x20000824
 8006400:	2000086c 	.word	0x2000086c
 8006404:	20000768 	.word	0x20000768
 8006408:	20000764 	.word	0x20000764
 800640c:	20000878 	.word	0x20000878
 8006410:	20000874 	.word	0x20000874
 8006414:	e000ed04 	.word	0xe000ed04

08006418 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800641e:	4b04      	ldr	r3, [pc, #16]	; (8006430 <xTaskGetTickCount+0x18>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006424:	687b      	ldr	r3, [r7, #4]
}
 8006426:	4618      	mov	r0, r3
 8006428:	370c      	adds	r7, #12
 800642a:	46bd      	mov	sp, r7
 800642c:	bc80      	pop	{r7}
 800642e:	4770      	bx	lr
 8006430:	20000868 	.word	0x20000868

08006434 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800643a:	f001 faaf 	bl	800799c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800643e:	2300      	movs	r3, #0
 8006440:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006442:	4b04      	ldr	r3, [pc, #16]	; (8006454 <xTaskGetTickCountFromISR+0x20>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006448:	683b      	ldr	r3, [r7, #0]
}
 800644a:	4618      	mov	r0, r3
 800644c:	3708      	adds	r7, #8
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	20000868 	.word	0x20000868

08006458 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b086      	sub	sp, #24
 800645c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800645e:	2300      	movs	r3, #0
 8006460:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006462:	4b50      	ldr	r3, [pc, #320]	; (80065a4 <xTaskIncrementTick+0x14c>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	f040 808c 	bne.w	8006584 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800646c:	4b4e      	ldr	r3, [pc, #312]	; (80065a8 <xTaskIncrementTick+0x150>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	3301      	adds	r3, #1
 8006472:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006474:	4a4c      	ldr	r2, [pc, #304]	; (80065a8 <xTaskIncrementTick+0x150>)
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d11f      	bne.n	80064c0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006480:	4b4a      	ldr	r3, [pc, #296]	; (80065ac <xTaskIncrementTick+0x154>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d009      	beq.n	800649e <xTaskIncrementTick+0x46>
 800648a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800648e:	f383 8811 	msr	BASEPRI, r3
 8006492:	f3bf 8f6f 	isb	sy
 8006496:	f3bf 8f4f 	dsb	sy
 800649a:	603b      	str	r3, [r7, #0]
 800649c:	e7fe      	b.n	800649c <xTaskIncrementTick+0x44>
 800649e:	4b43      	ldr	r3, [pc, #268]	; (80065ac <xTaskIncrementTick+0x154>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	60fb      	str	r3, [r7, #12]
 80064a4:	4b42      	ldr	r3, [pc, #264]	; (80065b0 <xTaskIncrementTick+0x158>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a40      	ldr	r2, [pc, #256]	; (80065ac <xTaskIncrementTick+0x154>)
 80064aa:	6013      	str	r3, [r2, #0]
 80064ac:	4a40      	ldr	r2, [pc, #256]	; (80065b0 <xTaskIncrementTick+0x158>)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6013      	str	r3, [r2, #0]
 80064b2:	4b40      	ldr	r3, [pc, #256]	; (80065b4 <xTaskIncrementTick+0x15c>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	3301      	adds	r3, #1
 80064b8:	4a3e      	ldr	r2, [pc, #248]	; (80065b4 <xTaskIncrementTick+0x15c>)
 80064ba:	6013      	str	r3, [r2, #0]
 80064bc:	f000 fac6 	bl	8006a4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80064c0:	4b3d      	ldr	r3, [pc, #244]	; (80065b8 <xTaskIncrementTick+0x160>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	693a      	ldr	r2, [r7, #16]
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d34d      	bcc.n	8006566 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064ca:	4b38      	ldr	r3, [pc, #224]	; (80065ac <xTaskIncrementTick+0x154>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d101      	bne.n	80064d8 <xTaskIncrementTick+0x80>
 80064d4:	2301      	movs	r3, #1
 80064d6:	e000      	b.n	80064da <xTaskIncrementTick+0x82>
 80064d8:	2300      	movs	r3, #0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d004      	beq.n	80064e8 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064de:	4b36      	ldr	r3, [pc, #216]	; (80065b8 <xTaskIncrementTick+0x160>)
 80064e0:	f04f 32ff 	mov.w	r2, #4294967295
 80064e4:	601a      	str	r2, [r3, #0]
					break;
 80064e6:	e03e      	b.n	8006566 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80064e8:	4b30      	ldr	r3, [pc, #192]	; (80065ac <xTaskIncrementTick+0x154>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80064f8:	693a      	ldr	r2, [r7, #16]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d203      	bcs.n	8006508 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006500:	4a2d      	ldr	r2, [pc, #180]	; (80065b8 <xTaskIncrementTick+0x160>)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6013      	str	r3, [r2, #0]
						break;
 8006506:	e02e      	b.n	8006566 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	3304      	adds	r3, #4
 800650c:	4618      	mov	r0, r3
 800650e:	f7fe fd11 	bl	8004f34 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006516:	2b00      	cmp	r3, #0
 8006518:	d004      	beq.n	8006524 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	3318      	adds	r3, #24
 800651e:	4618      	mov	r0, r3
 8006520:	f7fe fd08 	bl	8004f34 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006528:	2201      	movs	r2, #1
 800652a:	409a      	lsls	r2, r3
 800652c:	4b23      	ldr	r3, [pc, #140]	; (80065bc <xTaskIncrementTick+0x164>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4313      	orrs	r3, r2
 8006532:	4a22      	ldr	r2, [pc, #136]	; (80065bc <xTaskIncrementTick+0x164>)
 8006534:	6013      	str	r3, [r2, #0]
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800653a:	4613      	mov	r3, r2
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	4413      	add	r3, r2
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	4a1f      	ldr	r2, [pc, #124]	; (80065c0 <xTaskIncrementTick+0x168>)
 8006544:	441a      	add	r2, r3
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	3304      	adds	r3, #4
 800654a:	4619      	mov	r1, r3
 800654c:	4610      	mov	r0, r2
 800654e:	f7fe fc96 	bl	8004e7e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006556:	4b1b      	ldr	r3, [pc, #108]	; (80065c4 <xTaskIncrementTick+0x16c>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655c:	429a      	cmp	r2, r3
 800655e:	d3b4      	bcc.n	80064ca <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006560:	2301      	movs	r3, #1
 8006562:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006564:	e7b1      	b.n	80064ca <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006566:	4b17      	ldr	r3, [pc, #92]	; (80065c4 <xTaskIncrementTick+0x16c>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800656c:	4914      	ldr	r1, [pc, #80]	; (80065c0 <xTaskIncrementTick+0x168>)
 800656e:	4613      	mov	r3, r2
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	4413      	add	r3, r2
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	440b      	add	r3, r1
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2b01      	cmp	r3, #1
 800657c:	d907      	bls.n	800658e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800657e:	2301      	movs	r3, #1
 8006580:	617b      	str	r3, [r7, #20]
 8006582:	e004      	b.n	800658e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006584:	4b10      	ldr	r3, [pc, #64]	; (80065c8 <xTaskIncrementTick+0x170>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	3301      	adds	r3, #1
 800658a:	4a0f      	ldr	r2, [pc, #60]	; (80065c8 <xTaskIncrementTick+0x170>)
 800658c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800658e:	4b0f      	ldr	r3, [pc, #60]	; (80065cc <xTaskIncrementTick+0x174>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d001      	beq.n	800659a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8006596:	2301      	movs	r3, #1
 8006598:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800659a:	697b      	ldr	r3, [r7, #20]
}
 800659c:	4618      	mov	r0, r3
 800659e:	3718      	adds	r7, #24
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	2000088c 	.word	0x2000088c
 80065a8:	20000868 	.word	0x20000868
 80065ac:	2000081c 	.word	0x2000081c
 80065b0:	20000820 	.word	0x20000820
 80065b4:	2000087c 	.word	0x2000087c
 80065b8:	20000884 	.word	0x20000884
 80065bc:	2000086c 	.word	0x2000086c
 80065c0:	20000768 	.word	0x20000768
 80065c4:	20000764 	.word	0x20000764
 80065c8:	20000874 	.word	0x20000874
 80065cc:	20000878 	.word	0x20000878

080065d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80065d0:	b480      	push	{r7}
 80065d2:	b087      	sub	sp, #28
 80065d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80065d6:	4b26      	ldr	r3, [pc, #152]	; (8006670 <vTaskSwitchContext+0xa0>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d003      	beq.n	80065e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80065de:	4b25      	ldr	r3, [pc, #148]	; (8006674 <vTaskSwitchContext+0xa4>)
 80065e0:	2201      	movs	r2, #1
 80065e2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80065e4:	e03e      	b.n	8006664 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80065e6:	4b23      	ldr	r3, [pc, #140]	; (8006674 <vTaskSwitchContext+0xa4>)
 80065e8:	2200      	movs	r2, #0
 80065ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80065ec:	4b22      	ldr	r3, [pc, #136]	; (8006678 <vTaskSwitchContext+0xa8>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	fab3 f383 	clz	r3, r3
 80065f8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80065fa:	7afb      	ldrb	r3, [r7, #11]
 80065fc:	f1c3 031f 	rsb	r3, r3, #31
 8006600:	617b      	str	r3, [r7, #20]
 8006602:	491e      	ldr	r1, [pc, #120]	; (800667c <vTaskSwitchContext+0xac>)
 8006604:	697a      	ldr	r2, [r7, #20]
 8006606:	4613      	mov	r3, r2
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	4413      	add	r3, r2
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	440b      	add	r3, r1
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d109      	bne.n	800662a <vTaskSwitchContext+0x5a>
	__asm volatile
 8006616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661a:	f383 8811 	msr	BASEPRI, r3
 800661e:	f3bf 8f6f 	isb	sy
 8006622:	f3bf 8f4f 	dsb	sy
 8006626:	607b      	str	r3, [r7, #4]
 8006628:	e7fe      	b.n	8006628 <vTaskSwitchContext+0x58>
 800662a:	697a      	ldr	r2, [r7, #20]
 800662c:	4613      	mov	r3, r2
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	4413      	add	r3, r2
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	4a11      	ldr	r2, [pc, #68]	; (800667c <vTaskSwitchContext+0xac>)
 8006636:	4413      	add	r3, r2
 8006638:	613b      	str	r3, [r7, #16]
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	685a      	ldr	r2, [r3, #4]
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	605a      	str	r2, [r3, #4]
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	685a      	ldr	r2, [r3, #4]
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	3308      	adds	r3, #8
 800664c:	429a      	cmp	r2, r3
 800664e:	d104      	bne.n	800665a <vTaskSwitchContext+0x8a>
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	685a      	ldr	r2, [r3, #4]
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	605a      	str	r2, [r3, #4]
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	4a07      	ldr	r2, [pc, #28]	; (8006680 <vTaskSwitchContext+0xb0>)
 8006662:	6013      	str	r3, [r2, #0]
}
 8006664:	bf00      	nop
 8006666:	371c      	adds	r7, #28
 8006668:	46bd      	mov	sp, r7
 800666a:	bc80      	pop	{r7}
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop
 8006670:	2000088c 	.word	0x2000088c
 8006674:	20000878 	.word	0x20000878
 8006678:	2000086c 	.word	0x2000086c
 800667c:	20000768 	.word	0x20000768
 8006680:	20000764 	.word	0x20000764

08006684 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d109      	bne.n	80066a8 <vTaskPlaceOnEventList+0x24>
 8006694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006698:	f383 8811 	msr	BASEPRI, r3
 800669c:	f3bf 8f6f 	isb	sy
 80066a0:	f3bf 8f4f 	dsb	sy
 80066a4:	60fb      	str	r3, [r7, #12]
 80066a6:	e7fe      	b.n	80066a6 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80066a8:	4b07      	ldr	r3, [pc, #28]	; (80066c8 <vTaskPlaceOnEventList+0x44>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	3318      	adds	r3, #24
 80066ae:	4619      	mov	r1, r3
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f7fe fc07 	bl	8004ec4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80066b6:	2101      	movs	r1, #1
 80066b8:	6838      	ldr	r0, [r7, #0]
 80066ba:	f000 fbc5 	bl	8006e48 <prvAddCurrentTaskToDelayedList>
}
 80066be:	bf00      	nop
 80066c0:	3710      	adds	r7, #16
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	20000764 	.word	0x20000764

080066cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b086      	sub	sp, #24
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	60b9      	str	r1, [r7, #8]
 80066d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d109      	bne.n	80066f2 <vTaskPlaceOnEventListRestricted+0x26>
 80066de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e2:	f383 8811 	msr	BASEPRI, r3
 80066e6:	f3bf 8f6f 	isb	sy
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	617b      	str	r3, [r7, #20]
 80066f0:	e7fe      	b.n	80066f0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80066f2:	4b0a      	ldr	r3, [pc, #40]	; (800671c <vTaskPlaceOnEventListRestricted+0x50>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	3318      	adds	r3, #24
 80066f8:	4619      	mov	r1, r3
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	f7fe fbbf 	bl	8004e7e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d002      	beq.n	800670c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8006706:	f04f 33ff 	mov.w	r3, #4294967295
 800670a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800670c:	6879      	ldr	r1, [r7, #4]
 800670e:	68b8      	ldr	r0, [r7, #8]
 8006710:	f000 fb9a 	bl	8006e48 <prvAddCurrentTaskToDelayedList>
	}
 8006714:	bf00      	nop
 8006716:	3718      	adds	r7, #24
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}
 800671c:	20000764 	.word	0x20000764

08006720 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b086      	sub	sp, #24
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d109      	bne.n	800674a <xTaskRemoveFromEventList+0x2a>
 8006736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673a:	f383 8811 	msr	BASEPRI, r3
 800673e:	f3bf 8f6f 	isb	sy
 8006742:	f3bf 8f4f 	dsb	sy
 8006746:	60fb      	str	r3, [r7, #12]
 8006748:	e7fe      	b.n	8006748 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	3318      	adds	r3, #24
 800674e:	4618      	mov	r0, r3
 8006750:	f7fe fbf0 	bl	8004f34 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006754:	4b1d      	ldr	r3, [pc, #116]	; (80067cc <xTaskRemoveFromEventList+0xac>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d11c      	bne.n	8006796 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	3304      	adds	r3, #4
 8006760:	4618      	mov	r0, r3
 8006762:	f7fe fbe7 	bl	8004f34 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676a:	2201      	movs	r2, #1
 800676c:	409a      	lsls	r2, r3
 800676e:	4b18      	ldr	r3, [pc, #96]	; (80067d0 <xTaskRemoveFromEventList+0xb0>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4313      	orrs	r3, r2
 8006774:	4a16      	ldr	r2, [pc, #88]	; (80067d0 <xTaskRemoveFromEventList+0xb0>)
 8006776:	6013      	str	r3, [r2, #0]
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800677c:	4613      	mov	r3, r2
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	4413      	add	r3, r2
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	4a13      	ldr	r2, [pc, #76]	; (80067d4 <xTaskRemoveFromEventList+0xb4>)
 8006786:	441a      	add	r2, r3
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	3304      	adds	r3, #4
 800678c:	4619      	mov	r1, r3
 800678e:	4610      	mov	r0, r2
 8006790:	f7fe fb75 	bl	8004e7e <vListInsertEnd>
 8006794:	e005      	b.n	80067a2 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	3318      	adds	r3, #24
 800679a:	4619      	mov	r1, r3
 800679c:	480e      	ldr	r0, [pc, #56]	; (80067d8 <xTaskRemoveFromEventList+0xb8>)
 800679e:	f7fe fb6e 	bl	8004e7e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067a6:	4b0d      	ldr	r3, [pc, #52]	; (80067dc <xTaskRemoveFromEventList+0xbc>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d905      	bls.n	80067bc <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80067b0:	2301      	movs	r3, #1
 80067b2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80067b4:	4b0a      	ldr	r3, [pc, #40]	; (80067e0 <xTaskRemoveFromEventList+0xc0>)
 80067b6:	2201      	movs	r2, #1
 80067b8:	601a      	str	r2, [r3, #0]
 80067ba:	e001      	b.n	80067c0 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80067bc:	2300      	movs	r3, #0
 80067be:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80067c0:	697b      	ldr	r3, [r7, #20]
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3718      	adds	r7, #24
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	2000088c 	.word	0x2000088c
 80067d0:	2000086c 	.word	0x2000086c
 80067d4:	20000768 	.word	0x20000768
 80067d8:	20000824 	.word	0x20000824
 80067dc:	20000764 	.word	0x20000764
 80067e0:	20000878 	.word	0x20000878

080067e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80067ec:	4b06      	ldr	r3, [pc, #24]	; (8006808 <vTaskInternalSetTimeOutState+0x24>)
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80067f4:	4b05      	ldr	r3, [pc, #20]	; (800680c <vTaskInternalSetTimeOutState+0x28>)
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	605a      	str	r2, [r3, #4]
}
 80067fc:	bf00      	nop
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	bc80      	pop	{r7}
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	2000087c 	.word	0x2000087c
 800680c:	20000868 	.word	0x20000868

08006810 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b088      	sub	sp, #32
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d109      	bne.n	8006834 <xTaskCheckForTimeOut+0x24>
 8006820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006824:	f383 8811 	msr	BASEPRI, r3
 8006828:	f3bf 8f6f 	isb	sy
 800682c:	f3bf 8f4f 	dsb	sy
 8006830:	613b      	str	r3, [r7, #16]
 8006832:	e7fe      	b.n	8006832 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d109      	bne.n	800684e <xTaskCheckForTimeOut+0x3e>
 800683a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683e:	f383 8811 	msr	BASEPRI, r3
 8006842:	f3bf 8f6f 	isb	sy
 8006846:	f3bf 8f4f 	dsb	sy
 800684a:	60fb      	str	r3, [r7, #12]
 800684c:	e7fe      	b.n	800684c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800684e:	f000 ffeb 	bl	8007828 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006852:	4b1d      	ldr	r3, [pc, #116]	; (80068c8 <xTaskCheckForTimeOut+0xb8>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	69ba      	ldr	r2, [r7, #24]
 800685e:	1ad3      	subs	r3, r2, r3
 8006860:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800686a:	d102      	bne.n	8006872 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800686c:	2300      	movs	r3, #0
 800686e:	61fb      	str	r3, [r7, #28]
 8006870:	e023      	b.n	80068ba <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	4b15      	ldr	r3, [pc, #84]	; (80068cc <xTaskCheckForTimeOut+0xbc>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	429a      	cmp	r2, r3
 800687c:	d007      	beq.n	800688e <xTaskCheckForTimeOut+0x7e>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	69ba      	ldr	r2, [r7, #24]
 8006884:	429a      	cmp	r2, r3
 8006886:	d302      	bcc.n	800688e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006888:	2301      	movs	r3, #1
 800688a:	61fb      	str	r3, [r7, #28]
 800688c:	e015      	b.n	80068ba <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	697a      	ldr	r2, [r7, #20]
 8006894:	429a      	cmp	r2, r3
 8006896:	d20b      	bcs.n	80068b0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	1ad2      	subs	r2, r2, r3
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f7ff ff9d 	bl	80067e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80068aa:	2300      	movs	r3, #0
 80068ac:	61fb      	str	r3, [r7, #28]
 80068ae:	e004      	b.n	80068ba <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	2200      	movs	r2, #0
 80068b4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80068b6:	2301      	movs	r3, #1
 80068b8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80068ba:	f000 ffe3 	bl	8007884 <vPortExitCritical>

	return xReturn;
 80068be:	69fb      	ldr	r3, [r7, #28]
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3720      	adds	r7, #32
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}
 80068c8:	20000868 	.word	0x20000868
 80068cc:	2000087c 	.word	0x2000087c

080068d0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80068d0:	b480      	push	{r7}
 80068d2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80068d4:	4b03      	ldr	r3, [pc, #12]	; (80068e4 <vTaskMissedYield+0x14>)
 80068d6:	2201      	movs	r2, #1
 80068d8:	601a      	str	r2, [r3, #0]
}
 80068da:	bf00      	nop
 80068dc:	46bd      	mov	sp, r7
 80068de:	bc80      	pop	{r7}
 80068e0:	4770      	bx	lr
 80068e2:	bf00      	nop
 80068e4:	20000878 	.word	0x20000878

080068e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80068f0:	f000 f852 	bl	8006998 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80068f4:	4b06      	ldr	r3, [pc, #24]	; (8006910 <prvIdleTask+0x28>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d9f9      	bls.n	80068f0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80068fc:	4b05      	ldr	r3, [pc, #20]	; (8006914 <prvIdleTask+0x2c>)
 80068fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006902:	601a      	str	r2, [r3, #0]
 8006904:	f3bf 8f4f 	dsb	sy
 8006908:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800690c:	e7f0      	b.n	80068f0 <prvIdleTask+0x8>
 800690e:	bf00      	nop
 8006910:	20000768 	.word	0x20000768
 8006914:	e000ed04 	.word	0xe000ed04

08006918 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b082      	sub	sp, #8
 800691c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800691e:	2300      	movs	r3, #0
 8006920:	607b      	str	r3, [r7, #4]
 8006922:	e00c      	b.n	800693e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	4613      	mov	r3, r2
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	4413      	add	r3, r2
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	4a12      	ldr	r2, [pc, #72]	; (8006978 <prvInitialiseTaskLists+0x60>)
 8006930:	4413      	add	r3, r2
 8006932:	4618      	mov	r0, r3
 8006934:	f7fe fa78 	bl	8004e28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	3301      	adds	r3, #1
 800693c:	607b      	str	r3, [r7, #4]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2b06      	cmp	r3, #6
 8006942:	d9ef      	bls.n	8006924 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006944:	480d      	ldr	r0, [pc, #52]	; (800697c <prvInitialiseTaskLists+0x64>)
 8006946:	f7fe fa6f 	bl	8004e28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800694a:	480d      	ldr	r0, [pc, #52]	; (8006980 <prvInitialiseTaskLists+0x68>)
 800694c:	f7fe fa6c 	bl	8004e28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006950:	480c      	ldr	r0, [pc, #48]	; (8006984 <prvInitialiseTaskLists+0x6c>)
 8006952:	f7fe fa69 	bl	8004e28 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006956:	480c      	ldr	r0, [pc, #48]	; (8006988 <prvInitialiseTaskLists+0x70>)
 8006958:	f7fe fa66 	bl	8004e28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800695c:	480b      	ldr	r0, [pc, #44]	; (800698c <prvInitialiseTaskLists+0x74>)
 800695e:	f7fe fa63 	bl	8004e28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006962:	4b0b      	ldr	r3, [pc, #44]	; (8006990 <prvInitialiseTaskLists+0x78>)
 8006964:	4a05      	ldr	r2, [pc, #20]	; (800697c <prvInitialiseTaskLists+0x64>)
 8006966:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006968:	4b0a      	ldr	r3, [pc, #40]	; (8006994 <prvInitialiseTaskLists+0x7c>)
 800696a:	4a05      	ldr	r2, [pc, #20]	; (8006980 <prvInitialiseTaskLists+0x68>)
 800696c:	601a      	str	r2, [r3, #0]
}
 800696e:	bf00      	nop
 8006970:	3708      	adds	r7, #8
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	20000768 	.word	0x20000768
 800697c:	200007f4 	.word	0x200007f4
 8006980:	20000808 	.word	0x20000808
 8006984:	20000824 	.word	0x20000824
 8006988:	20000838 	.word	0x20000838
 800698c:	20000850 	.word	0x20000850
 8006990:	2000081c 	.word	0x2000081c
 8006994:	20000820 	.word	0x20000820

08006998 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800699e:	e019      	b.n	80069d4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80069a0:	f000 ff42 	bl	8007828 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80069a4:	4b0f      	ldr	r3, [pc, #60]	; (80069e4 <prvCheckTasksWaitingTermination+0x4c>)
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	3304      	adds	r3, #4
 80069b0:	4618      	mov	r0, r3
 80069b2:	f7fe fabf 	bl	8004f34 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80069b6:	4b0c      	ldr	r3, [pc, #48]	; (80069e8 <prvCheckTasksWaitingTermination+0x50>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	3b01      	subs	r3, #1
 80069bc:	4a0a      	ldr	r2, [pc, #40]	; (80069e8 <prvCheckTasksWaitingTermination+0x50>)
 80069be:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80069c0:	4b0a      	ldr	r3, [pc, #40]	; (80069ec <prvCheckTasksWaitingTermination+0x54>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	3b01      	subs	r3, #1
 80069c6:	4a09      	ldr	r2, [pc, #36]	; (80069ec <prvCheckTasksWaitingTermination+0x54>)
 80069c8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80069ca:	f000 ff5b 	bl	8007884 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 f80e 	bl	80069f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80069d4:	4b05      	ldr	r3, [pc, #20]	; (80069ec <prvCheckTasksWaitingTermination+0x54>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d1e1      	bne.n	80069a0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80069dc:	bf00      	nop
 80069de:	3708      	adds	r7, #8
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	20000838 	.word	0x20000838
 80069e8:	20000864 	.word	0x20000864
 80069ec:	2000084c 	.word	0x2000084c

080069f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d108      	bne.n	8006a14 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a06:	4618      	mov	r0, r3
 8006a08:	f001 f8c6 	bl	8007b98 <vPortFree>
				vPortFree( pxTCB );
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f001 f8c3 	bl	8007b98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006a12:	e017      	b.n	8006a44 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d103      	bne.n	8006a26 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f001 f8ba 	bl	8007b98 <vPortFree>
	}
 8006a24:	e00e      	b.n	8006a44 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d009      	beq.n	8006a44 <prvDeleteTCB+0x54>
 8006a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a34:	f383 8811 	msr	BASEPRI, r3
 8006a38:	f3bf 8f6f 	isb	sy
 8006a3c:	f3bf 8f4f 	dsb	sy
 8006a40:	60fb      	str	r3, [r7, #12]
 8006a42:	e7fe      	b.n	8006a42 <prvDeleteTCB+0x52>
	}
 8006a44:	bf00      	nop
 8006a46:	3710      	adds	r7, #16
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a52:	4b0e      	ldr	r3, [pc, #56]	; (8006a8c <prvResetNextTaskUnblockTime+0x40>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d101      	bne.n	8006a60 <prvResetNextTaskUnblockTime+0x14>
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	e000      	b.n	8006a62 <prvResetNextTaskUnblockTime+0x16>
 8006a60:	2300      	movs	r3, #0
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d004      	beq.n	8006a70 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006a66:	4b0a      	ldr	r3, [pc, #40]	; (8006a90 <prvResetNextTaskUnblockTime+0x44>)
 8006a68:	f04f 32ff 	mov.w	r2, #4294967295
 8006a6c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006a6e:	e008      	b.n	8006a82 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006a70:	4b06      	ldr	r3, [pc, #24]	; (8006a8c <prvResetNextTaskUnblockTime+0x40>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	4a04      	ldr	r2, [pc, #16]	; (8006a90 <prvResetNextTaskUnblockTime+0x44>)
 8006a80:	6013      	str	r3, [r2, #0]
}
 8006a82:	bf00      	nop
 8006a84:	370c      	adds	r7, #12
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bc80      	pop	{r7}
 8006a8a:	4770      	bx	lr
 8006a8c:	2000081c 	.word	0x2000081c
 8006a90:	20000884 	.word	0x20000884

08006a94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006a9a:	4b0b      	ldr	r3, [pc, #44]	; (8006ac8 <xTaskGetSchedulerState+0x34>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d102      	bne.n	8006aa8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	607b      	str	r3, [r7, #4]
 8006aa6:	e008      	b.n	8006aba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006aa8:	4b08      	ldr	r3, [pc, #32]	; (8006acc <xTaskGetSchedulerState+0x38>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d102      	bne.n	8006ab6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006ab0:	2302      	movs	r3, #2
 8006ab2:	607b      	str	r3, [r7, #4]
 8006ab4:	e001      	b.n	8006aba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006aba:	687b      	ldr	r3, [r7, #4]
	}
 8006abc:	4618      	mov	r0, r3
 8006abe:	370c      	adds	r7, #12
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bc80      	pop	{r7}
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop
 8006ac8:	20000870 	.word	0x20000870
 8006acc:	2000088c 	.word	0x2000088c

08006ad0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006adc:	2300      	movs	r3, #0
 8006ade:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d06e      	beq.n	8006bc4 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aea:	4b39      	ldr	r3, [pc, #228]	; (8006bd0 <xTaskPriorityInherit+0x100>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d25e      	bcs.n	8006bb2 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	699b      	ldr	r3, [r3, #24]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	db06      	blt.n	8006b0a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006afc:	4b34      	ldr	r3, [pc, #208]	; (8006bd0 <xTaskPriorityInherit+0x100>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b02:	f1c3 0207 	rsb	r2, r3, #7
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	6959      	ldr	r1, [r3, #20]
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b12:	4613      	mov	r3, r2
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	4413      	add	r3, r2
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	4a2e      	ldr	r2, [pc, #184]	; (8006bd4 <xTaskPriorityInherit+0x104>)
 8006b1c:	4413      	add	r3, r2
 8006b1e:	4299      	cmp	r1, r3
 8006b20:	d101      	bne.n	8006b26 <xTaskPriorityInherit+0x56>
 8006b22:	2301      	movs	r3, #1
 8006b24:	e000      	b.n	8006b28 <xTaskPriorityInherit+0x58>
 8006b26:	2300      	movs	r3, #0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d03a      	beq.n	8006ba2 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	3304      	adds	r3, #4
 8006b30:	4618      	mov	r0, r3
 8006b32:	f7fe f9ff 	bl	8004f34 <uxListRemove>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d115      	bne.n	8006b68 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b40:	4924      	ldr	r1, [pc, #144]	; (8006bd4 <xTaskPriorityInherit+0x104>)
 8006b42:	4613      	mov	r3, r2
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	4413      	add	r3, r2
 8006b48:	009b      	lsls	r3, r3, #2
 8006b4a:	440b      	add	r3, r1
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d10a      	bne.n	8006b68 <xTaskPriorityInherit+0x98>
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b56:	2201      	movs	r2, #1
 8006b58:	fa02 f303 	lsl.w	r3, r2, r3
 8006b5c:	43da      	mvns	r2, r3
 8006b5e:	4b1e      	ldr	r3, [pc, #120]	; (8006bd8 <xTaskPriorityInherit+0x108>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4013      	ands	r3, r2
 8006b64:	4a1c      	ldr	r2, [pc, #112]	; (8006bd8 <xTaskPriorityInherit+0x108>)
 8006b66:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006b68:	4b19      	ldr	r3, [pc, #100]	; (8006bd0 <xTaskPriorityInherit+0x100>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b76:	2201      	movs	r2, #1
 8006b78:	409a      	lsls	r2, r3
 8006b7a:	4b17      	ldr	r3, [pc, #92]	; (8006bd8 <xTaskPriorityInherit+0x108>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	4a15      	ldr	r2, [pc, #84]	; (8006bd8 <xTaskPriorityInherit+0x108>)
 8006b82:	6013      	str	r3, [r2, #0]
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b88:	4613      	mov	r3, r2
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	4413      	add	r3, r2
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	4a10      	ldr	r2, [pc, #64]	; (8006bd4 <xTaskPriorityInherit+0x104>)
 8006b92:	441a      	add	r2, r3
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	3304      	adds	r3, #4
 8006b98:	4619      	mov	r1, r3
 8006b9a:	4610      	mov	r0, r2
 8006b9c:	f7fe f96f 	bl	8004e7e <vListInsertEnd>
 8006ba0:	e004      	b.n	8006bac <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006ba2:	4b0b      	ldr	r3, [pc, #44]	; (8006bd0 <xTaskPriorityInherit+0x100>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006bac:	2301      	movs	r3, #1
 8006bae:	60fb      	str	r3, [r7, #12]
 8006bb0:	e008      	b.n	8006bc4 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006bb6:	4b06      	ldr	r3, [pc, #24]	; (8006bd0 <xTaskPriorityInherit+0x100>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d201      	bcs.n	8006bc4 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
	}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3710      	adds	r7, #16
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	20000764 	.word	0x20000764
 8006bd4:	20000768 	.word	0x20000768
 8006bd8:	2000086c 	.word	0x2000086c

08006bdc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b086      	sub	sp, #24
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006be8:	2300      	movs	r3, #0
 8006bea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d06c      	beq.n	8006ccc <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006bf2:	4b39      	ldr	r3, [pc, #228]	; (8006cd8 <xTaskPriorityDisinherit+0xfc>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	693a      	ldr	r2, [r7, #16]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d009      	beq.n	8006c10 <xTaskPriorityDisinherit+0x34>
 8006bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c00:	f383 8811 	msr	BASEPRI, r3
 8006c04:	f3bf 8f6f 	isb	sy
 8006c08:	f3bf 8f4f 	dsb	sy
 8006c0c:	60fb      	str	r3, [r7, #12]
 8006c0e:	e7fe      	b.n	8006c0e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d109      	bne.n	8006c2c <xTaskPriorityDisinherit+0x50>
 8006c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c1c:	f383 8811 	msr	BASEPRI, r3
 8006c20:	f3bf 8f6f 	isb	sy
 8006c24:	f3bf 8f4f 	dsb	sy
 8006c28:	60bb      	str	r3, [r7, #8]
 8006c2a:	e7fe      	b.n	8006c2a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c30:	1e5a      	subs	r2, r3, #1
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d044      	beq.n	8006ccc <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d140      	bne.n	8006ccc <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	3304      	adds	r3, #4
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f7fe f970 	bl	8004f34 <uxListRemove>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d115      	bne.n	8006c86 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c5e:	491f      	ldr	r1, [pc, #124]	; (8006cdc <xTaskPriorityDisinherit+0x100>)
 8006c60:	4613      	mov	r3, r2
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	4413      	add	r3, r2
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	440b      	add	r3, r1
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d10a      	bne.n	8006c86 <xTaskPriorityDisinherit+0xaa>
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c74:	2201      	movs	r2, #1
 8006c76:	fa02 f303 	lsl.w	r3, r2, r3
 8006c7a:	43da      	mvns	r2, r3
 8006c7c:	4b18      	ldr	r3, [pc, #96]	; (8006ce0 <xTaskPriorityDisinherit+0x104>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4013      	ands	r3, r2
 8006c82:	4a17      	ldr	r2, [pc, #92]	; (8006ce0 <xTaskPriorityDisinherit+0x104>)
 8006c84:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c92:	f1c3 0207 	rsb	r2, r3, #7
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006c9a:	693b      	ldr	r3, [r7, #16]
 8006c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c9e:	2201      	movs	r2, #1
 8006ca0:	409a      	lsls	r2, r3
 8006ca2:	4b0f      	ldr	r3, [pc, #60]	; (8006ce0 <xTaskPriorityDisinherit+0x104>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	4a0d      	ldr	r2, [pc, #52]	; (8006ce0 <xTaskPriorityDisinherit+0x104>)
 8006caa:	6013      	str	r3, [r2, #0]
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cb0:	4613      	mov	r3, r2
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	4413      	add	r3, r2
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	4a08      	ldr	r2, [pc, #32]	; (8006cdc <xTaskPriorityDisinherit+0x100>)
 8006cba:	441a      	add	r2, r3
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	3304      	adds	r3, #4
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	4610      	mov	r0, r2
 8006cc4:	f7fe f8db 	bl	8004e7e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006ccc:	697b      	ldr	r3, [r7, #20]
	}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3718      	adds	r7, #24
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	20000764 	.word	0x20000764
 8006cdc:	20000768 	.word	0x20000768
 8006ce0:	2000086c 	.word	0x2000086c

08006ce4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b088      	sub	sp, #32
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f000 8086 	beq.w	8006e0a <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d109      	bne.n	8006d1a <vTaskPriorityDisinheritAfterTimeout+0x36>
 8006d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0a:	f383 8811 	msr	BASEPRI, r3
 8006d0e:	f3bf 8f6f 	isb	sy
 8006d12:	f3bf 8f4f 	dsb	sy
 8006d16:	60fb      	str	r3, [r7, #12]
 8006d18:	e7fe      	b.n	8006d18 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d1e:	683a      	ldr	r2, [r7, #0]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d902      	bls.n	8006d2a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	61fb      	str	r3, [r7, #28]
 8006d28:	e002      	b.n	8006d30 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d2e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d34:	69fa      	ldr	r2, [r7, #28]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d067      	beq.n	8006e0a <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d3e:	697a      	ldr	r2, [r7, #20]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d162      	bne.n	8006e0a <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006d44:	4b33      	ldr	r3, [pc, #204]	; (8006e14 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	69ba      	ldr	r2, [r7, #24]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d109      	bne.n	8006d62 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8006d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d52:	f383 8811 	msr	BASEPRI, r3
 8006d56:	f3bf 8f6f 	isb	sy
 8006d5a:	f3bf 8f4f 	dsb	sy
 8006d5e:	60bb      	str	r3, [r7, #8]
 8006d60:	e7fe      	b.n	8006d60 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006d62:	69bb      	ldr	r3, [r7, #24]
 8006d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d66:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006d68:	69bb      	ldr	r3, [r7, #24]
 8006d6a:	69fa      	ldr	r2, [r7, #28]
 8006d6c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	699b      	ldr	r3, [r3, #24]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	db04      	blt.n	8006d80 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d76:	69fb      	ldr	r3, [r7, #28]
 8006d78:	f1c3 0207 	rsb	r2, r3, #7
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	6959      	ldr	r1, [r3, #20]
 8006d84:	693a      	ldr	r2, [r7, #16]
 8006d86:	4613      	mov	r3, r2
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	4413      	add	r3, r2
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	4a22      	ldr	r2, [pc, #136]	; (8006e18 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006d90:	4413      	add	r3, r2
 8006d92:	4299      	cmp	r1, r3
 8006d94:	d101      	bne.n	8006d9a <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8006d96:	2301      	movs	r3, #1
 8006d98:	e000      	b.n	8006d9c <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d034      	beq.n	8006e0a <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	3304      	adds	r3, #4
 8006da4:	4618      	mov	r0, r3
 8006da6:	f7fe f8c5 	bl	8004f34 <uxListRemove>
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d115      	bne.n	8006ddc <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006db4:	4918      	ldr	r1, [pc, #96]	; (8006e18 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006db6:	4613      	mov	r3, r2
 8006db8:	009b      	lsls	r3, r3, #2
 8006dba:	4413      	add	r3, r2
 8006dbc:	009b      	lsls	r3, r3, #2
 8006dbe:	440b      	add	r3, r1
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d10a      	bne.n	8006ddc <vTaskPriorityDisinheritAfterTimeout+0xf8>
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dca:	2201      	movs	r2, #1
 8006dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8006dd0:	43da      	mvns	r2, r3
 8006dd2:	4b12      	ldr	r3, [pc, #72]	; (8006e1c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4013      	ands	r3, r2
 8006dd8:	4a10      	ldr	r2, [pc, #64]	; (8006e1c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006dda:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de0:	2201      	movs	r2, #1
 8006de2:	409a      	lsls	r2, r3
 8006de4:	4b0d      	ldr	r3, [pc, #52]	; (8006e1c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	4a0c      	ldr	r2, [pc, #48]	; (8006e1c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8006dec:	6013      	str	r3, [r2, #0]
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006df2:	4613      	mov	r3, r2
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	4413      	add	r3, r2
 8006df8:	009b      	lsls	r3, r3, #2
 8006dfa:	4a07      	ldr	r2, [pc, #28]	; (8006e18 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8006dfc:	441a      	add	r2, r3
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	3304      	adds	r3, #4
 8006e02:	4619      	mov	r1, r3
 8006e04:	4610      	mov	r0, r2
 8006e06:	f7fe f83a 	bl	8004e7e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e0a:	bf00      	nop
 8006e0c:	3720      	adds	r7, #32
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	20000764 	.word	0x20000764
 8006e18:	20000768 	.word	0x20000768
 8006e1c:	2000086c 	.word	0x2000086c

08006e20 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8006e20:	b480      	push	{r7}
 8006e22:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006e24:	4b07      	ldr	r3, [pc, #28]	; (8006e44 <pvTaskIncrementMutexHeldCount+0x24>)
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d004      	beq.n	8006e36 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006e2c:	4b05      	ldr	r3, [pc, #20]	; (8006e44 <pvTaskIncrementMutexHeldCount+0x24>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e32:	3201      	adds	r2, #1
 8006e34:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 8006e36:	4b03      	ldr	r3, [pc, #12]	; (8006e44 <pvTaskIncrementMutexHeldCount+0x24>)
 8006e38:	681b      	ldr	r3, [r3, #0]
	}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bc80      	pop	{r7}
 8006e40:	4770      	bx	lr
 8006e42:	bf00      	nop
 8006e44:	20000764 	.word	0x20000764

08006e48 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006e52:	4b29      	ldr	r3, [pc, #164]	; (8006ef8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e58:	4b28      	ldr	r3, [pc, #160]	; (8006efc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	3304      	adds	r3, #4
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f7fe f868 	bl	8004f34 <uxListRemove>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d10b      	bne.n	8006e82 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006e6a:	4b24      	ldr	r3, [pc, #144]	; (8006efc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e70:	2201      	movs	r2, #1
 8006e72:	fa02 f303 	lsl.w	r3, r2, r3
 8006e76:	43da      	mvns	r2, r3
 8006e78:	4b21      	ldr	r3, [pc, #132]	; (8006f00 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4013      	ands	r3, r2
 8006e7e:	4a20      	ldr	r2, [pc, #128]	; (8006f00 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006e80:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e88:	d10a      	bne.n	8006ea0 <prvAddCurrentTaskToDelayedList+0x58>
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d007      	beq.n	8006ea0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006e90:	4b1a      	ldr	r3, [pc, #104]	; (8006efc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	3304      	adds	r3, #4
 8006e96:	4619      	mov	r1, r3
 8006e98:	481a      	ldr	r0, [pc, #104]	; (8006f04 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006e9a:	f7fd fff0 	bl	8004e7e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006e9e:	e026      	b.n	8006eee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006ea0:	68fa      	ldr	r2, [r7, #12]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006ea8:	4b14      	ldr	r3, [pc, #80]	; (8006efc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	68ba      	ldr	r2, [r7, #8]
 8006eae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006eb0:	68ba      	ldr	r2, [r7, #8]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d209      	bcs.n	8006ecc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006eb8:	4b13      	ldr	r3, [pc, #76]	; (8006f08 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	4b0f      	ldr	r3, [pc, #60]	; (8006efc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	3304      	adds	r3, #4
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	4610      	mov	r0, r2
 8006ec6:	f7fd fffd 	bl	8004ec4 <vListInsert>
}
 8006eca:	e010      	b.n	8006eee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ecc:	4b0f      	ldr	r3, [pc, #60]	; (8006f0c <prvAddCurrentTaskToDelayedList+0xc4>)
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	4b0a      	ldr	r3, [pc, #40]	; (8006efc <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	3304      	adds	r3, #4
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	4610      	mov	r0, r2
 8006eda:	f7fd fff3 	bl	8004ec4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006ede:	4b0c      	ldr	r3, [pc, #48]	; (8006f10 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	68ba      	ldr	r2, [r7, #8]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d202      	bcs.n	8006eee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006ee8:	4a09      	ldr	r2, [pc, #36]	; (8006f10 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	6013      	str	r3, [r2, #0]
}
 8006eee:	bf00      	nop
 8006ef0:	3710      	adds	r7, #16
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	20000868 	.word	0x20000868
 8006efc:	20000764 	.word	0x20000764
 8006f00:	2000086c 	.word	0x2000086c
 8006f04:	20000850 	.word	0x20000850
 8006f08:	20000820 	.word	0x20000820
 8006f0c:	2000081c 	.word	0x2000081c
 8006f10:	20000884 	.word	0x20000884

08006f14 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b08a      	sub	sp, #40	; 0x28
 8006f18:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006f1e:	f000 fb37 	bl	8007590 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006f22:	4b1c      	ldr	r3, [pc, #112]	; (8006f94 <xTimerCreateTimerTask+0x80>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d021      	beq.n	8006f6e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006f32:	1d3a      	adds	r2, r7, #4
 8006f34:	f107 0108 	add.w	r1, r7, #8
 8006f38:	f107 030c 	add.w	r3, r7, #12
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f7f9 fe33 	bl	8000ba8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006f42:	6879      	ldr	r1, [r7, #4]
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	68fa      	ldr	r2, [r7, #12]
 8006f48:	9202      	str	r2, [sp, #8]
 8006f4a:	9301      	str	r3, [sp, #4]
 8006f4c:	2302      	movs	r3, #2
 8006f4e:	9300      	str	r3, [sp, #0]
 8006f50:	2300      	movs	r3, #0
 8006f52:	460a      	mov	r2, r1
 8006f54:	4910      	ldr	r1, [pc, #64]	; (8006f98 <xTimerCreateTimerTask+0x84>)
 8006f56:	4811      	ldr	r0, [pc, #68]	; (8006f9c <xTimerCreateTimerTask+0x88>)
 8006f58:	f7fe ff96 	bl	8005e88 <xTaskCreateStatic>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	4b10      	ldr	r3, [pc, #64]	; (8006fa0 <xTimerCreateTimerTask+0x8c>)
 8006f60:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006f62:	4b0f      	ldr	r3, [pc, #60]	; (8006fa0 <xTimerCreateTimerTask+0x8c>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d001      	beq.n	8006f6e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d109      	bne.n	8006f88 <xTimerCreateTimerTask+0x74>
 8006f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f78:	f383 8811 	msr	BASEPRI, r3
 8006f7c:	f3bf 8f6f 	isb	sy
 8006f80:	f3bf 8f4f 	dsb	sy
 8006f84:	613b      	str	r3, [r7, #16]
 8006f86:	e7fe      	b.n	8006f86 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8006f88:	697b      	ldr	r3, [r7, #20]
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3718      	adds	r7, #24
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	200008c0 	.word	0x200008c0
 8006f98:	080193b0 	.word	0x080193b0
 8006f9c:	080071d9 	.word	0x080071d9
 8006fa0:	200008c4 	.word	0x200008c4

08006fa4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b088      	sub	sp, #32
 8006fa8:	af02      	add	r7, sp, #8
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	607a      	str	r2, [r7, #4]
 8006fb0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8006fb2:	202c      	movs	r0, #44	; 0x2c
 8006fb4:	f000 fd2e 	bl	8007a14 <pvPortMalloc>
 8006fb8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d00d      	beq.n	8006fdc <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	9301      	str	r3, [sp, #4]
 8006fc4:	6a3b      	ldr	r3, [r7, #32]
 8006fc6:	9300      	str	r3, [sp, #0]
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	68b9      	ldr	r1, [r7, #8]
 8006fce:	68f8      	ldr	r0, [r7, #12]
 8006fd0:	f000 f844 	bl	800705c <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8006fdc:	697b      	ldr	r3, [r7, #20]
	}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3718      	adds	r7, #24
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b08a      	sub	sp, #40	; 0x28
 8006fea:	af02      	add	r7, sp, #8
 8006fec:	60f8      	str	r0, [r7, #12]
 8006fee:	60b9      	str	r1, [r7, #8]
 8006ff0:	607a      	str	r2, [r7, #4]
 8006ff2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8006ff4:	232c      	movs	r3, #44	; 0x2c
 8006ff6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	2b2c      	cmp	r3, #44	; 0x2c
 8006ffc:	d009      	beq.n	8007012 <xTimerCreateStatic+0x2c>
 8006ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007002:	f383 8811 	msr	BASEPRI, r3
 8007006:	f3bf 8f6f 	isb	sy
 800700a:	f3bf 8f4f 	dsb	sy
 800700e:	61bb      	str	r3, [r7, #24]
 8007010:	e7fe      	b.n	8007010 <xTimerCreateStatic+0x2a>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8007012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007014:	2b00      	cmp	r3, #0
 8007016:	d109      	bne.n	800702c <xTimerCreateStatic+0x46>
 8007018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800701c:	f383 8811 	msr	BASEPRI, r3
 8007020:	f3bf 8f6f 	isb	sy
 8007024:	f3bf 8f4f 	dsb	sy
 8007028:	617b      	str	r3, [r7, #20]
 800702a:	e7fe      	b.n	800702a <xTimerCreateStatic+0x44>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800702c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800702e:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8007030:	69fb      	ldr	r3, [r7, #28]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00d      	beq.n	8007052 <xTimerCreateStatic+0x6c>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	9301      	str	r3, [sp, #4]
 800703a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703c:	9300      	str	r3, [sp, #0]
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	68b9      	ldr	r1, [r7, #8]
 8007044:	68f8      	ldr	r0, [r7, #12]
 8007046:	f000 f809 	bl	800705c <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	2201      	movs	r2, #1
 800704e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 8007052:	69fb      	ldr	r3, [r7, #28]
	}
 8007054:	4618      	mov	r0, r3
 8007056:	3720      	adds	r7, #32
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b086      	sub	sp, #24
 8007060:	af00      	add	r7, sp, #0
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	60b9      	str	r1, [r7, #8]
 8007066:	607a      	str	r2, [r7, #4]
 8007068:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d109      	bne.n	8007084 <prvInitialiseNewTimer+0x28>
 8007070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007074:	f383 8811 	msr	BASEPRI, r3
 8007078:	f3bf 8f6f 	isb	sy
 800707c:	f3bf 8f4f 	dsb	sy
 8007080:	617b      	str	r3, [r7, #20]
 8007082:	e7fe      	b.n	8007082 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8007084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007086:	2b00      	cmp	r3, #0
 8007088:	d015      	beq.n	80070b6 <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800708a:	f000 fa81 	bl	8007590 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800708e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007096:	68ba      	ldr	r2, [r7, #8]
 8007098:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800709a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709c:	687a      	ldr	r2, [r7, #4]
 800709e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 80070a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a2:	683a      	ldr	r2, [r7, #0]
 80070a4:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80070a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a8:	6a3a      	ldr	r2, [r7, #32]
 80070aa:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80070ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ae:	3304      	adds	r3, #4
 80070b0:	4618      	mov	r0, r3
 80070b2:	f7fd fed8 	bl	8004e66 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80070b6:	bf00      	nop
 80070b8:	3718      	adds	r7, #24
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
	...

080070c0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b08a      	sub	sp, #40	; 0x28
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	60f8      	str	r0, [r7, #12]
 80070c8:	60b9      	str	r1, [r7, #8]
 80070ca:	607a      	str	r2, [r7, #4]
 80070cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80070ce:	2300      	movs	r3, #0
 80070d0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d109      	bne.n	80070ec <xTimerGenericCommand+0x2c>
 80070d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070dc:	f383 8811 	msr	BASEPRI, r3
 80070e0:	f3bf 8f6f 	isb	sy
 80070e4:	f3bf 8f4f 	dsb	sy
 80070e8:	623b      	str	r3, [r7, #32]
 80070ea:	e7fe      	b.n	80070ea <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80070ec:	4b19      	ldr	r3, [pc, #100]	; (8007154 <xTimerGenericCommand+0x94>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d02a      	beq.n	800714a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	2b05      	cmp	r3, #5
 8007104:	dc18      	bgt.n	8007138 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007106:	f7ff fcc5 	bl	8006a94 <xTaskGetSchedulerState>
 800710a:	4603      	mov	r3, r0
 800710c:	2b02      	cmp	r3, #2
 800710e:	d109      	bne.n	8007124 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007110:	4b10      	ldr	r3, [pc, #64]	; (8007154 <xTimerGenericCommand+0x94>)
 8007112:	6818      	ldr	r0, [r3, #0]
 8007114:	f107 0114 	add.w	r1, r7, #20
 8007118:	2300      	movs	r3, #0
 800711a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800711c:	f7fe f8b8 	bl	8005290 <xQueueGenericSend>
 8007120:	6278      	str	r0, [r7, #36]	; 0x24
 8007122:	e012      	b.n	800714a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007124:	4b0b      	ldr	r3, [pc, #44]	; (8007154 <xTimerGenericCommand+0x94>)
 8007126:	6818      	ldr	r0, [r3, #0]
 8007128:	f107 0114 	add.w	r1, r7, #20
 800712c:	2300      	movs	r3, #0
 800712e:	2200      	movs	r2, #0
 8007130:	f7fe f8ae 	bl	8005290 <xQueueGenericSend>
 8007134:	6278      	str	r0, [r7, #36]	; 0x24
 8007136:	e008      	b.n	800714a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007138:	4b06      	ldr	r3, [pc, #24]	; (8007154 <xTimerGenericCommand+0x94>)
 800713a:	6818      	ldr	r0, [r3, #0]
 800713c:	f107 0114 	add.w	r1, r7, #20
 8007140:	2300      	movs	r3, #0
 8007142:	683a      	ldr	r2, [r7, #0]
 8007144:	f7fe f99e 	bl	8005484 <xQueueGenericSendFromISR>
 8007148:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800714a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800714c:	4618      	mov	r0, r3
 800714e:	3728      	adds	r7, #40	; 0x28
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}
 8007154:	200008c0 	.word	0x200008c0

08007158 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b088      	sub	sp, #32
 800715c:	af02      	add	r7, sp, #8
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007162:	4b1c      	ldr	r3, [pc, #112]	; (80071d4 <prvProcessExpiredTimer+0x7c>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	3304      	adds	r3, #4
 8007170:	4618      	mov	r0, r3
 8007172:	f7fd fedf 	bl	8004f34 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	69db      	ldr	r3, [r3, #28]
 800717a:	2b01      	cmp	r3, #1
 800717c:	d121      	bne.n	80071c2 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	699a      	ldr	r2, [r3, #24]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	18d1      	adds	r1, r2, r3
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	683a      	ldr	r2, [r7, #0]
 800718a:	6978      	ldr	r0, [r7, #20]
 800718c:	f000 f8c8 	bl	8007320 <prvInsertTimerInActiveList>
 8007190:	4603      	mov	r3, r0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d015      	beq.n	80071c2 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007196:	2300      	movs	r3, #0
 8007198:	9300      	str	r3, [sp, #0]
 800719a:	2300      	movs	r3, #0
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	2100      	movs	r1, #0
 80071a0:	6978      	ldr	r0, [r7, #20]
 80071a2:	f7ff ff8d 	bl	80070c0 <xTimerGenericCommand>
 80071a6:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d109      	bne.n	80071c2 <prvProcessExpiredTimer+0x6a>
 80071ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b2:	f383 8811 	msr	BASEPRI, r3
 80071b6:	f3bf 8f6f 	isb	sy
 80071ba:	f3bf 8f4f 	dsb	sy
 80071be:	60fb      	str	r3, [r7, #12]
 80071c0:	e7fe      	b.n	80071c0 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c6:	6978      	ldr	r0, [r7, #20]
 80071c8:	4798      	blx	r3
}
 80071ca:	bf00      	nop
 80071cc:	3718      	adds	r7, #24
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	200008b8 	.word	0x200008b8

080071d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80071e0:	f107 0308 	add.w	r3, r7, #8
 80071e4:	4618      	mov	r0, r3
 80071e6:	f000 f857 	bl	8007298 <prvGetNextExpireTime>
 80071ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	4619      	mov	r1, r3
 80071f0:	68f8      	ldr	r0, [r7, #12]
 80071f2:	f000 f803 	bl	80071fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80071f6:	f000 f8d5 	bl	80073a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80071fa:	e7f1      	b.n	80071e0 <prvTimerTask+0x8>

080071fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b084      	sub	sp, #16
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007206:	f7ff f85d 	bl	80062c4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800720a:	f107 0308 	add.w	r3, r7, #8
 800720e:	4618      	mov	r0, r3
 8007210:	f000 f866 	bl	80072e0 <prvSampleTimeNow>
 8007214:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d130      	bne.n	800727e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d10a      	bne.n	8007238 <prvProcessTimerOrBlockTask+0x3c>
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	429a      	cmp	r2, r3
 8007228:	d806      	bhi.n	8007238 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800722a:	f7ff f859 	bl	80062e0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800722e:	68f9      	ldr	r1, [r7, #12]
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f7ff ff91 	bl	8007158 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007236:	e024      	b.n	8007282 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d008      	beq.n	8007250 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800723e:	4b13      	ldr	r3, [pc, #76]	; (800728c <prvProcessTimerOrBlockTask+0x90>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	2b00      	cmp	r3, #0
 8007246:	bf0c      	ite	eq
 8007248:	2301      	moveq	r3, #1
 800724a:	2300      	movne	r3, #0
 800724c:	b2db      	uxtb	r3, r3
 800724e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007250:	4b0f      	ldr	r3, [pc, #60]	; (8007290 <prvProcessTimerOrBlockTask+0x94>)
 8007252:	6818      	ldr	r0, [r3, #0]
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	683a      	ldr	r2, [r7, #0]
 800725c:	4619      	mov	r1, r3
 800725e:	f7fe fddf 	bl	8005e20 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007262:	f7ff f83d 	bl	80062e0 <xTaskResumeAll>
 8007266:	4603      	mov	r3, r0
 8007268:	2b00      	cmp	r3, #0
 800726a:	d10a      	bne.n	8007282 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800726c:	4b09      	ldr	r3, [pc, #36]	; (8007294 <prvProcessTimerOrBlockTask+0x98>)
 800726e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007272:	601a      	str	r2, [r3, #0]
 8007274:	f3bf 8f4f 	dsb	sy
 8007278:	f3bf 8f6f 	isb	sy
}
 800727c:	e001      	b.n	8007282 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800727e:	f7ff f82f 	bl	80062e0 <xTaskResumeAll>
}
 8007282:	bf00      	nop
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	200008bc 	.word	0x200008bc
 8007290:	200008c0 	.word	0x200008c0
 8007294:	e000ed04 	.word	0xe000ed04

08007298 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007298:	b480      	push	{r7}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80072a0:	4b0e      	ldr	r3, [pc, #56]	; (80072dc <prvGetNextExpireTime+0x44>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	bf0c      	ite	eq
 80072aa:	2301      	moveq	r3, #1
 80072ac:	2300      	movne	r3, #0
 80072ae:	b2db      	uxtb	r3, r3
 80072b0:	461a      	mov	r2, r3
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d105      	bne.n	80072ca <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80072be:	4b07      	ldr	r3, [pc, #28]	; (80072dc <prvGetNextExpireTime+0x44>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	60fb      	str	r3, [r7, #12]
 80072c8:	e001      	b.n	80072ce <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80072ca:	2300      	movs	r3, #0
 80072cc:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80072ce:	68fb      	ldr	r3, [r7, #12]
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3714      	adds	r7, #20
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bc80      	pop	{r7}
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	200008b8 	.word	0x200008b8

080072e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80072e8:	f7ff f896 	bl	8006418 <xTaskGetTickCount>
 80072ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80072ee:	4b0b      	ldr	r3, [pc, #44]	; (800731c <prvSampleTimeNow+0x3c>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d205      	bcs.n	8007304 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80072f8:	f000 f8ea 	bl	80074d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	601a      	str	r2, [r3, #0]
 8007302:	e002      	b.n	800730a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800730a:	4a04      	ldr	r2, [pc, #16]	; (800731c <prvSampleTimeNow+0x3c>)
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007310:	68fb      	ldr	r3, [r7, #12]
}
 8007312:	4618      	mov	r0, r3
 8007314:	3710      	adds	r7, #16
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}
 800731a:	bf00      	nop
 800731c:	200008c8 	.word	0x200008c8

08007320 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b086      	sub	sp, #24
 8007324:	af00      	add	r7, sp, #0
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	607a      	str	r2, [r7, #4]
 800732c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800732e:	2300      	movs	r3, #0
 8007330:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	68ba      	ldr	r2, [r7, #8]
 8007336:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	68fa      	ldr	r2, [r7, #12]
 800733c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800733e:	68ba      	ldr	r2, [r7, #8]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	429a      	cmp	r2, r3
 8007344:	d812      	bhi.n	800736c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	1ad2      	subs	r2, r2, r3
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	699b      	ldr	r3, [r3, #24]
 8007350:	429a      	cmp	r2, r3
 8007352:	d302      	bcc.n	800735a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007354:	2301      	movs	r3, #1
 8007356:	617b      	str	r3, [r7, #20]
 8007358:	e01b      	b.n	8007392 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800735a:	4b10      	ldr	r3, [pc, #64]	; (800739c <prvInsertTimerInActiveList+0x7c>)
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	3304      	adds	r3, #4
 8007362:	4619      	mov	r1, r3
 8007364:	4610      	mov	r0, r2
 8007366:	f7fd fdad 	bl	8004ec4 <vListInsert>
 800736a:	e012      	b.n	8007392 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	429a      	cmp	r2, r3
 8007372:	d206      	bcs.n	8007382 <prvInsertTimerInActiveList+0x62>
 8007374:	68ba      	ldr	r2, [r7, #8]
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	429a      	cmp	r2, r3
 800737a:	d302      	bcc.n	8007382 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800737c:	2301      	movs	r3, #1
 800737e:	617b      	str	r3, [r7, #20]
 8007380:	e007      	b.n	8007392 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007382:	4b07      	ldr	r3, [pc, #28]	; (80073a0 <prvInsertTimerInActiveList+0x80>)
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	3304      	adds	r3, #4
 800738a:	4619      	mov	r1, r3
 800738c:	4610      	mov	r0, r2
 800738e:	f7fd fd99 	bl	8004ec4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007392:	697b      	ldr	r3, [r7, #20]
}
 8007394:	4618      	mov	r0, r3
 8007396:	3718      	adds	r7, #24
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}
 800739c:	200008bc 	.word	0x200008bc
 80073a0:	200008b8 	.word	0x200008b8

080073a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b08c      	sub	sp, #48	; 0x30
 80073a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80073aa:	e07f      	b.n	80074ac <prvProcessReceivedCommands+0x108>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	db7b      	blt.n	80074aa <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80073b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b8:	695b      	ldr	r3, [r3, #20]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d004      	beq.n	80073c8 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80073be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c0:	3304      	adds	r3, #4
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7fd fdb6 	bl	8004f34 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80073c8:	1d3b      	adds	r3, r7, #4
 80073ca:	4618      	mov	r0, r3
 80073cc:	f7ff ff88 	bl	80072e0 <prvSampleTimeNow>
 80073d0:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	2b09      	cmp	r3, #9
 80073d6:	d869      	bhi.n	80074ac <prvProcessReceivedCommands+0x108>
 80073d8:	a201      	add	r2, pc, #4	; (adr r2, 80073e0 <prvProcessReceivedCommands+0x3c>)
 80073da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073de:	bf00      	nop
 80073e0:	08007409 	.word	0x08007409
 80073e4:	08007409 	.word	0x08007409
 80073e8:	08007409 	.word	0x08007409
 80073ec:	080074ad 	.word	0x080074ad
 80073f0:	08007463 	.word	0x08007463
 80073f4:	08007499 	.word	0x08007499
 80073f8:	08007409 	.word	0x08007409
 80073fc:	08007409 	.word	0x08007409
 8007400:	080074ad 	.word	0x080074ad
 8007404:	08007463 	.word	0x08007463
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007408:	68fa      	ldr	r2, [r7, #12]
 800740a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740c:	699b      	ldr	r3, [r3, #24]
 800740e:	18d1      	adds	r1, r2, r3
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	6a3a      	ldr	r2, [r7, #32]
 8007414:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007416:	f7ff ff83 	bl	8007320 <prvInsertTimerInActiveList>
 800741a:	4603      	mov	r3, r0
 800741c:	2b00      	cmp	r3, #0
 800741e:	d045      	beq.n	80074ac <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007424:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007426:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742a:	69db      	ldr	r3, [r3, #28]
 800742c:	2b01      	cmp	r3, #1
 800742e:	d13d      	bne.n	80074ac <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007430:	68fa      	ldr	r2, [r7, #12]
 8007432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007434:	699b      	ldr	r3, [r3, #24]
 8007436:	441a      	add	r2, r3
 8007438:	2300      	movs	r3, #0
 800743a:	9300      	str	r3, [sp, #0]
 800743c:	2300      	movs	r3, #0
 800743e:	2100      	movs	r1, #0
 8007440:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007442:	f7ff fe3d 	bl	80070c0 <xTimerGenericCommand>
 8007446:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d12e      	bne.n	80074ac <prvProcessReceivedCommands+0x108>
 800744e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007452:	f383 8811 	msr	BASEPRI, r3
 8007456:	f3bf 8f6f 	isb	sy
 800745a:	f3bf 8f4f 	dsb	sy
 800745e:	61bb      	str	r3, [r7, #24]
 8007460:	e7fe      	b.n	8007460 <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007466:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746a:	699b      	ldr	r3, [r3, #24]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d109      	bne.n	8007484 <prvProcessReceivedCommands+0xe0>
 8007470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007474:	f383 8811 	msr	BASEPRI, r3
 8007478:	f3bf 8f6f 	isb	sy
 800747c:	f3bf 8f4f 	dsb	sy
 8007480:	617b      	str	r3, [r7, #20]
 8007482:	e7fe      	b.n	8007482 <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007486:	699a      	ldr	r2, [r3, #24]
 8007488:	6a3b      	ldr	r3, [r7, #32]
 800748a:	18d1      	adds	r1, r2, r3
 800748c:	6a3b      	ldr	r3, [r7, #32]
 800748e:	6a3a      	ldr	r2, [r7, #32]
 8007490:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007492:	f7ff ff45 	bl	8007320 <prvInsertTimerInActiveList>
					break;
 8007496:	e009      	b.n	80074ac <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d104      	bne.n	80074ac <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 80074a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80074a4:	f000 fb78 	bl	8007b98 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80074a8:	e000      	b.n	80074ac <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80074aa:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80074ac:	4b07      	ldr	r3, [pc, #28]	; (80074cc <prvProcessReceivedCommands+0x128>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f107 0108 	add.w	r1, r7, #8
 80074b4:	2200      	movs	r2, #0
 80074b6:	4618      	mov	r0, r3
 80074b8:	f7fe f902 	bl	80056c0 <xQueueReceive>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	f47f af74 	bne.w	80073ac <prvProcessReceivedCommands+0x8>
	}
}
 80074c4:	bf00      	nop
 80074c6:	3728      	adds	r7, #40	; 0x28
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	200008c0 	.word	0x200008c0

080074d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b088      	sub	sp, #32
 80074d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80074d6:	e044      	b.n	8007562 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80074d8:	4b2b      	ldr	r3, [pc, #172]	; (8007588 <prvSwitchTimerLists+0xb8>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80074e2:	4b29      	ldr	r3, [pc, #164]	; (8007588 <prvSwitchTimerLists+0xb8>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	68db      	ldr	r3, [r3, #12]
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	3304      	adds	r3, #4
 80074f0:	4618      	mov	r0, r3
 80074f2:	f7fd fd1f 	bl	8004f34 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074fa:	68f8      	ldr	r0, [r7, #12]
 80074fc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	69db      	ldr	r3, [r3, #28]
 8007502:	2b01      	cmp	r3, #1
 8007504:	d12d      	bne.n	8007562 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	699b      	ldr	r3, [r3, #24]
 800750a:	693a      	ldr	r2, [r7, #16]
 800750c:	4413      	add	r3, r2
 800750e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007510:	68ba      	ldr	r2, [r7, #8]
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	429a      	cmp	r2, r3
 8007516:	d90e      	bls.n	8007536 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	68ba      	ldr	r2, [r7, #8]
 800751c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	68fa      	ldr	r2, [r7, #12]
 8007522:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007524:	4b18      	ldr	r3, [pc, #96]	; (8007588 <prvSwitchTimerLists+0xb8>)
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	3304      	adds	r3, #4
 800752c:	4619      	mov	r1, r3
 800752e:	4610      	mov	r0, r2
 8007530:	f7fd fcc8 	bl	8004ec4 <vListInsert>
 8007534:	e015      	b.n	8007562 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007536:	2300      	movs	r3, #0
 8007538:	9300      	str	r3, [sp, #0]
 800753a:	2300      	movs	r3, #0
 800753c:	693a      	ldr	r2, [r7, #16]
 800753e:	2100      	movs	r1, #0
 8007540:	68f8      	ldr	r0, [r7, #12]
 8007542:	f7ff fdbd 	bl	80070c0 <xTimerGenericCommand>
 8007546:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d109      	bne.n	8007562 <prvSwitchTimerLists+0x92>
 800754e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007552:	f383 8811 	msr	BASEPRI, r3
 8007556:	f3bf 8f6f 	isb	sy
 800755a:	f3bf 8f4f 	dsb	sy
 800755e:	603b      	str	r3, [r7, #0]
 8007560:	e7fe      	b.n	8007560 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007562:	4b09      	ldr	r3, [pc, #36]	; (8007588 <prvSwitchTimerLists+0xb8>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d1b5      	bne.n	80074d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800756c:	4b06      	ldr	r3, [pc, #24]	; (8007588 <prvSwitchTimerLists+0xb8>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007572:	4b06      	ldr	r3, [pc, #24]	; (800758c <prvSwitchTimerLists+0xbc>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a04      	ldr	r2, [pc, #16]	; (8007588 <prvSwitchTimerLists+0xb8>)
 8007578:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800757a:	4a04      	ldr	r2, [pc, #16]	; (800758c <prvSwitchTimerLists+0xbc>)
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	6013      	str	r3, [r2, #0]
}
 8007580:	bf00      	nop
 8007582:	3718      	adds	r7, #24
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}
 8007588:	200008b8 	.word	0x200008b8
 800758c:	200008bc 	.word	0x200008bc

08007590 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007596:	f000 f947 	bl	8007828 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800759a:	4b15      	ldr	r3, [pc, #84]	; (80075f0 <prvCheckForValidListAndQueue+0x60>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d120      	bne.n	80075e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80075a2:	4814      	ldr	r0, [pc, #80]	; (80075f4 <prvCheckForValidListAndQueue+0x64>)
 80075a4:	f7fd fc40 	bl	8004e28 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80075a8:	4813      	ldr	r0, [pc, #76]	; (80075f8 <prvCheckForValidListAndQueue+0x68>)
 80075aa:	f7fd fc3d 	bl	8004e28 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80075ae:	4b13      	ldr	r3, [pc, #76]	; (80075fc <prvCheckForValidListAndQueue+0x6c>)
 80075b0:	4a10      	ldr	r2, [pc, #64]	; (80075f4 <prvCheckForValidListAndQueue+0x64>)
 80075b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80075b4:	4b12      	ldr	r3, [pc, #72]	; (8007600 <prvCheckForValidListAndQueue+0x70>)
 80075b6:	4a10      	ldr	r2, [pc, #64]	; (80075f8 <prvCheckForValidListAndQueue+0x68>)
 80075b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80075ba:	2300      	movs	r3, #0
 80075bc:	9300      	str	r3, [sp, #0]
 80075be:	4b11      	ldr	r3, [pc, #68]	; (8007604 <prvCheckForValidListAndQueue+0x74>)
 80075c0:	4a11      	ldr	r2, [pc, #68]	; (8007608 <prvCheckForValidListAndQueue+0x78>)
 80075c2:	210c      	movs	r1, #12
 80075c4:	200a      	movs	r0, #10
 80075c6:	f7fd fd47 	bl	8005058 <xQueueGenericCreateStatic>
 80075ca:	4602      	mov	r2, r0
 80075cc:	4b08      	ldr	r3, [pc, #32]	; (80075f0 <prvCheckForValidListAndQueue+0x60>)
 80075ce:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80075d0:	4b07      	ldr	r3, [pc, #28]	; (80075f0 <prvCheckForValidListAndQueue+0x60>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d005      	beq.n	80075e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80075d8:	4b05      	ldr	r3, [pc, #20]	; (80075f0 <prvCheckForValidListAndQueue+0x60>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	490b      	ldr	r1, [pc, #44]	; (800760c <prvCheckForValidListAndQueue+0x7c>)
 80075de:	4618      	mov	r0, r3
 80075e0:	f7fe fbf6 	bl	8005dd0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80075e4:	f000 f94e 	bl	8007884 <vPortExitCritical>
}
 80075e8:	bf00      	nop
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
 80075ee:	bf00      	nop
 80075f0:	200008c0 	.word	0x200008c0
 80075f4:	20000890 	.word	0x20000890
 80075f8:	200008a4 	.word	0x200008a4
 80075fc:	200008b8 	.word	0x200008b8
 8007600:	200008bc 	.word	0x200008bc
 8007604:	20000944 	.word	0x20000944
 8007608:	200008cc 	.word	0x200008cc
 800760c:	080193b8 	.word	0x080193b8

08007610 <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b086      	sub	sp, #24
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d109      	bne.n	8007636 <pvTimerGetTimerID+0x26>
 8007622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007626:	f383 8811 	msr	BASEPRI, r3
 800762a:	f3bf 8f6f 	isb	sy
 800762e:	f3bf 8f4f 	dsb	sy
 8007632:	60fb      	str	r3, [r7, #12]
 8007634:	e7fe      	b.n	8007634 <pvTimerGetTimerID+0x24>

	taskENTER_CRITICAL();
 8007636:	f000 f8f7 	bl	8007828 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	6a1b      	ldr	r3, [r3, #32]
 800763e:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8007640:	f000 f920 	bl	8007884 <vPortExitCritical>

	return pvReturn;
 8007644:	693b      	ldr	r3, [r7, #16]
}
 8007646:	4618      	mov	r0, r3
 8007648:	3718      	adds	r7, #24
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
	...

08007650 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007650:	b480      	push	{r7}
 8007652:	b085      	sub	sp, #20
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	3b04      	subs	r3, #4
 8007660:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007668:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	3b04      	subs	r3, #4
 800766e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	f023 0201 	bic.w	r2, r3, #1
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	3b04      	subs	r3, #4
 800767e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007680:	4a08      	ldr	r2, [pc, #32]	; (80076a4 <pxPortInitialiseStack+0x54>)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	3b14      	subs	r3, #20
 800768a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	3b20      	subs	r3, #32
 8007696:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007698:	68fb      	ldr	r3, [r7, #12]
}
 800769a:	4618      	mov	r0, r3
 800769c:	3714      	adds	r7, #20
 800769e:	46bd      	mov	sp, r7
 80076a0:	bc80      	pop	{r7}
 80076a2:	4770      	bx	lr
 80076a4:	080076a9 	.word	0x080076a9

080076a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80076a8:	b480      	push	{r7}
 80076aa:	b085      	sub	sp, #20
 80076ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80076ae:	2300      	movs	r3, #0
 80076b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80076b2:	4b10      	ldr	r3, [pc, #64]	; (80076f4 <prvTaskExitError+0x4c>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ba:	d009      	beq.n	80076d0 <prvTaskExitError+0x28>
 80076bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c0:	f383 8811 	msr	BASEPRI, r3
 80076c4:	f3bf 8f6f 	isb	sy
 80076c8:	f3bf 8f4f 	dsb	sy
 80076cc:	60fb      	str	r3, [r7, #12]
 80076ce:	e7fe      	b.n	80076ce <prvTaskExitError+0x26>
 80076d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d4:	f383 8811 	msr	BASEPRI, r3
 80076d8:	f3bf 8f6f 	isb	sy
 80076dc:	f3bf 8f4f 	dsb	sy
 80076e0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80076e2:	bf00      	nop
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d0fc      	beq.n	80076e4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80076ea:	bf00      	nop
 80076ec:	3714      	adds	r7, #20
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bc80      	pop	{r7}
 80076f2:	4770      	bx	lr
 80076f4:	2000000c 	.word	0x2000000c
	...

08007700 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007700:	4b07      	ldr	r3, [pc, #28]	; (8007720 <pxCurrentTCBConst2>)
 8007702:	6819      	ldr	r1, [r3, #0]
 8007704:	6808      	ldr	r0, [r1, #0]
 8007706:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800770a:	f380 8809 	msr	PSP, r0
 800770e:	f3bf 8f6f 	isb	sy
 8007712:	f04f 0000 	mov.w	r0, #0
 8007716:	f380 8811 	msr	BASEPRI, r0
 800771a:	f04e 0e0d 	orr.w	lr, lr, #13
 800771e:	4770      	bx	lr

08007720 <pxCurrentTCBConst2>:
 8007720:	20000764 	.word	0x20000764
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007724:	bf00      	nop
 8007726:	bf00      	nop

08007728 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007728:	4806      	ldr	r0, [pc, #24]	; (8007744 <prvPortStartFirstTask+0x1c>)
 800772a:	6800      	ldr	r0, [r0, #0]
 800772c:	6800      	ldr	r0, [r0, #0]
 800772e:	f380 8808 	msr	MSP, r0
 8007732:	b662      	cpsie	i
 8007734:	b661      	cpsie	f
 8007736:	f3bf 8f4f 	dsb	sy
 800773a:	f3bf 8f6f 	isb	sy
 800773e:	df00      	svc	0
 8007740:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007742:	bf00      	nop
 8007744:	e000ed08 	.word	0xe000ed08

08007748 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b084      	sub	sp, #16
 800774c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800774e:	4b31      	ldr	r3, [pc, #196]	; (8007814 <xPortStartScheduler+0xcc>)
 8007750:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	781b      	ldrb	r3, [r3, #0]
 8007756:	b2db      	uxtb	r3, r3
 8007758:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	22ff      	movs	r2, #255	; 0xff
 800775e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	b2db      	uxtb	r3, r3
 8007766:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007768:	78fb      	ldrb	r3, [r7, #3]
 800776a:	b2db      	uxtb	r3, r3
 800776c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007770:	b2da      	uxtb	r2, r3
 8007772:	4b29      	ldr	r3, [pc, #164]	; (8007818 <xPortStartScheduler+0xd0>)
 8007774:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007776:	4b29      	ldr	r3, [pc, #164]	; (800781c <xPortStartScheduler+0xd4>)
 8007778:	2207      	movs	r2, #7
 800777a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800777c:	e009      	b.n	8007792 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800777e:	4b27      	ldr	r3, [pc, #156]	; (800781c <xPortStartScheduler+0xd4>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	3b01      	subs	r3, #1
 8007784:	4a25      	ldr	r2, [pc, #148]	; (800781c <xPortStartScheduler+0xd4>)
 8007786:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007788:	78fb      	ldrb	r3, [r7, #3]
 800778a:	b2db      	uxtb	r3, r3
 800778c:	005b      	lsls	r3, r3, #1
 800778e:	b2db      	uxtb	r3, r3
 8007790:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007792:	78fb      	ldrb	r3, [r7, #3]
 8007794:	b2db      	uxtb	r3, r3
 8007796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800779a:	2b80      	cmp	r3, #128	; 0x80
 800779c:	d0ef      	beq.n	800777e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800779e:	4b1f      	ldr	r3, [pc, #124]	; (800781c <xPortStartScheduler+0xd4>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f1c3 0307 	rsb	r3, r3, #7
 80077a6:	2b04      	cmp	r3, #4
 80077a8:	d009      	beq.n	80077be <xPortStartScheduler+0x76>
 80077aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ae:	f383 8811 	msr	BASEPRI, r3
 80077b2:	f3bf 8f6f 	isb	sy
 80077b6:	f3bf 8f4f 	dsb	sy
 80077ba:	60bb      	str	r3, [r7, #8]
 80077bc:	e7fe      	b.n	80077bc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80077be:	4b17      	ldr	r3, [pc, #92]	; (800781c <xPortStartScheduler+0xd4>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	021b      	lsls	r3, r3, #8
 80077c4:	4a15      	ldr	r2, [pc, #84]	; (800781c <xPortStartScheduler+0xd4>)
 80077c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80077c8:	4b14      	ldr	r3, [pc, #80]	; (800781c <xPortStartScheduler+0xd4>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80077d0:	4a12      	ldr	r2, [pc, #72]	; (800781c <xPortStartScheduler+0xd4>)
 80077d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	b2da      	uxtb	r2, r3
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80077dc:	4b10      	ldr	r3, [pc, #64]	; (8007820 <xPortStartScheduler+0xd8>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a0f      	ldr	r2, [pc, #60]	; (8007820 <xPortStartScheduler+0xd8>)
 80077e2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80077e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80077e8:	4b0d      	ldr	r3, [pc, #52]	; (8007820 <xPortStartScheduler+0xd8>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a0c      	ldr	r2, [pc, #48]	; (8007820 <xPortStartScheduler+0xd8>)
 80077ee:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80077f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80077f4:	f000 f8b0 	bl	8007958 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80077f8:	4b0a      	ldr	r3, [pc, #40]	; (8007824 <xPortStartScheduler+0xdc>)
 80077fa:	2200      	movs	r2, #0
 80077fc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80077fe:	f7ff ff93 	bl	8007728 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007802:	f7fe fee5 	bl	80065d0 <vTaskSwitchContext>
	prvTaskExitError();
 8007806:	f7ff ff4f 	bl	80076a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800780a:	2300      	movs	r3, #0
}
 800780c:	4618      	mov	r0, r3
 800780e:	3710      	adds	r7, #16
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}
 8007814:	e000e400 	.word	0xe000e400
 8007818:	2000098c 	.word	0x2000098c
 800781c:	20000990 	.word	0x20000990
 8007820:	e000ed20 	.word	0xe000ed20
 8007824:	2000000c 	.word	0x2000000c

08007828 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007828:	b480      	push	{r7}
 800782a:	b083      	sub	sp, #12
 800782c:	af00      	add	r7, sp, #0
 800782e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007832:	f383 8811 	msr	BASEPRI, r3
 8007836:	f3bf 8f6f 	isb	sy
 800783a:	f3bf 8f4f 	dsb	sy
 800783e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007840:	4b0e      	ldr	r3, [pc, #56]	; (800787c <vPortEnterCritical+0x54>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	3301      	adds	r3, #1
 8007846:	4a0d      	ldr	r2, [pc, #52]	; (800787c <vPortEnterCritical+0x54>)
 8007848:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800784a:	4b0c      	ldr	r3, [pc, #48]	; (800787c <vPortEnterCritical+0x54>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	2b01      	cmp	r3, #1
 8007850:	d10e      	bne.n	8007870 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007852:	4b0b      	ldr	r3, [pc, #44]	; (8007880 <vPortEnterCritical+0x58>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	b2db      	uxtb	r3, r3
 8007858:	2b00      	cmp	r3, #0
 800785a:	d009      	beq.n	8007870 <vPortEnterCritical+0x48>
 800785c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007860:	f383 8811 	msr	BASEPRI, r3
 8007864:	f3bf 8f6f 	isb	sy
 8007868:	f3bf 8f4f 	dsb	sy
 800786c:	603b      	str	r3, [r7, #0]
 800786e:	e7fe      	b.n	800786e <vPortEnterCritical+0x46>
	}
}
 8007870:	bf00      	nop
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	bc80      	pop	{r7}
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	2000000c 	.word	0x2000000c
 8007880:	e000ed04 	.word	0xe000ed04

08007884 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800788a:	4b10      	ldr	r3, [pc, #64]	; (80078cc <vPortExitCritical+0x48>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d109      	bne.n	80078a6 <vPortExitCritical+0x22>
 8007892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007896:	f383 8811 	msr	BASEPRI, r3
 800789a:	f3bf 8f6f 	isb	sy
 800789e:	f3bf 8f4f 	dsb	sy
 80078a2:	607b      	str	r3, [r7, #4]
 80078a4:	e7fe      	b.n	80078a4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80078a6:	4b09      	ldr	r3, [pc, #36]	; (80078cc <vPortExitCritical+0x48>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	3b01      	subs	r3, #1
 80078ac:	4a07      	ldr	r2, [pc, #28]	; (80078cc <vPortExitCritical+0x48>)
 80078ae:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80078b0:	4b06      	ldr	r3, [pc, #24]	; (80078cc <vPortExitCritical+0x48>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d104      	bne.n	80078c2 <vPortExitCritical+0x3e>
 80078b8:	2300      	movs	r3, #0
 80078ba:	603b      	str	r3, [r7, #0]
	__asm volatile
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80078c2:	bf00      	nop
 80078c4:	370c      	adds	r7, #12
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bc80      	pop	{r7}
 80078ca:	4770      	bx	lr
 80078cc:	2000000c 	.word	0x2000000c

080078d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80078d0:	f3ef 8009 	mrs	r0, PSP
 80078d4:	f3bf 8f6f 	isb	sy
 80078d8:	4b0d      	ldr	r3, [pc, #52]	; (8007910 <pxCurrentTCBConst>)
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80078e0:	6010      	str	r0, [r2, #0]
 80078e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80078e6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80078ea:	f380 8811 	msr	BASEPRI, r0
 80078ee:	f7fe fe6f 	bl	80065d0 <vTaskSwitchContext>
 80078f2:	f04f 0000 	mov.w	r0, #0
 80078f6:	f380 8811 	msr	BASEPRI, r0
 80078fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80078fe:	6819      	ldr	r1, [r3, #0]
 8007900:	6808      	ldr	r0, [r1, #0]
 8007902:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007906:	f380 8809 	msr	PSP, r0
 800790a:	f3bf 8f6f 	isb	sy
 800790e:	4770      	bx	lr

08007910 <pxCurrentTCBConst>:
 8007910:	20000764 	.word	0x20000764
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007914:	bf00      	nop
 8007916:	bf00      	nop

08007918 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
	__asm volatile
 800791e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007922:	f383 8811 	msr	BASEPRI, r3
 8007926:	f3bf 8f6f 	isb	sy
 800792a:	f3bf 8f4f 	dsb	sy
 800792e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007930:	f7fe fd92 	bl	8006458 <xTaskIncrementTick>
 8007934:	4603      	mov	r3, r0
 8007936:	2b00      	cmp	r3, #0
 8007938:	d003      	beq.n	8007942 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800793a:	4b06      	ldr	r3, [pc, #24]	; (8007954 <SysTick_Handler+0x3c>)
 800793c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007940:	601a      	str	r2, [r3, #0]
 8007942:	2300      	movs	r3, #0
 8007944:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800794c:	bf00      	nop
 800794e:	3708      	adds	r7, #8
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}
 8007954:	e000ed04 	.word	0xe000ed04

08007958 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007958:	b480      	push	{r7}
 800795a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800795c:	4b0a      	ldr	r3, [pc, #40]	; (8007988 <vPortSetupTimerInterrupt+0x30>)
 800795e:	2200      	movs	r2, #0
 8007960:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007962:	4b0a      	ldr	r3, [pc, #40]	; (800798c <vPortSetupTimerInterrupt+0x34>)
 8007964:	2200      	movs	r2, #0
 8007966:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007968:	4b09      	ldr	r3, [pc, #36]	; (8007990 <vPortSetupTimerInterrupt+0x38>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a09      	ldr	r2, [pc, #36]	; (8007994 <vPortSetupTimerInterrupt+0x3c>)
 800796e:	fba2 2303 	umull	r2, r3, r2, r3
 8007972:	099b      	lsrs	r3, r3, #6
 8007974:	4a08      	ldr	r2, [pc, #32]	; (8007998 <vPortSetupTimerInterrupt+0x40>)
 8007976:	3b01      	subs	r3, #1
 8007978:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800797a:	4b03      	ldr	r3, [pc, #12]	; (8007988 <vPortSetupTimerInterrupt+0x30>)
 800797c:	2207      	movs	r2, #7
 800797e:	601a      	str	r2, [r3, #0]
}
 8007980:	bf00      	nop
 8007982:	46bd      	mov	sp, r7
 8007984:	bc80      	pop	{r7}
 8007986:	4770      	bx	lr
 8007988:	e000e010 	.word	0xe000e010
 800798c:	e000e018 	.word	0xe000e018
 8007990:	20000000 	.word	0x20000000
 8007994:	10624dd3 	.word	0x10624dd3
 8007998:	e000e014 	.word	0xe000e014

0800799c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800799c:	b480      	push	{r7}
 800799e:	b085      	sub	sp, #20
 80079a0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80079a2:	f3ef 8305 	mrs	r3, IPSR
 80079a6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2b0f      	cmp	r3, #15
 80079ac:	d913      	bls.n	80079d6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80079ae:	4a15      	ldr	r2, [pc, #84]	; (8007a04 <vPortValidateInterruptPriority+0x68>)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	4413      	add	r3, r2
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80079b8:	4b13      	ldr	r3, [pc, #76]	; (8007a08 <vPortValidateInterruptPriority+0x6c>)
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	7afa      	ldrb	r2, [r7, #11]
 80079be:	429a      	cmp	r2, r3
 80079c0:	d209      	bcs.n	80079d6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80079c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c6:	f383 8811 	msr	BASEPRI, r3
 80079ca:	f3bf 8f6f 	isb	sy
 80079ce:	f3bf 8f4f 	dsb	sy
 80079d2:	607b      	str	r3, [r7, #4]
 80079d4:	e7fe      	b.n	80079d4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80079d6:	4b0d      	ldr	r3, [pc, #52]	; (8007a0c <vPortValidateInterruptPriority+0x70>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80079de:	4b0c      	ldr	r3, [pc, #48]	; (8007a10 <vPortValidateInterruptPriority+0x74>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d909      	bls.n	80079fa <vPortValidateInterruptPriority+0x5e>
 80079e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ea:	f383 8811 	msr	BASEPRI, r3
 80079ee:	f3bf 8f6f 	isb	sy
 80079f2:	f3bf 8f4f 	dsb	sy
 80079f6:	603b      	str	r3, [r7, #0]
 80079f8:	e7fe      	b.n	80079f8 <vPortValidateInterruptPriority+0x5c>
	}
 80079fa:	bf00      	nop
 80079fc:	3714      	adds	r7, #20
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bc80      	pop	{r7}
 8007a02:	4770      	bx	lr
 8007a04:	e000e3f0 	.word	0xe000e3f0
 8007a08:	2000098c 	.word	0x2000098c
 8007a0c:	e000ed0c 	.word	0xe000ed0c
 8007a10:	20000990 	.word	0x20000990

08007a14 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b08a      	sub	sp, #40	; 0x28
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007a20:	f7fe fc50 	bl	80062c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007a24:	4b57      	ldr	r3, [pc, #348]	; (8007b84 <pvPortMalloc+0x170>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d101      	bne.n	8007a30 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007a2c:	f000 f90c 	bl	8007c48 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007a30:	4b55      	ldr	r3, [pc, #340]	; (8007b88 <pvPortMalloc+0x174>)
 8007a32:	681a      	ldr	r2, [r3, #0]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	4013      	ands	r3, r2
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	f040 808c 	bne.w	8007b56 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d01c      	beq.n	8007a7e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007a44:	2208      	movs	r2, #8
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	4413      	add	r3, r2
 8007a4a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	f003 0307 	and.w	r3, r3, #7
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d013      	beq.n	8007a7e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f023 0307 	bic.w	r3, r3, #7
 8007a5c:	3308      	adds	r3, #8
 8007a5e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f003 0307 	and.w	r3, r3, #7
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d009      	beq.n	8007a7e <pvPortMalloc+0x6a>
 8007a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a6e:	f383 8811 	msr	BASEPRI, r3
 8007a72:	f3bf 8f6f 	isb	sy
 8007a76:	f3bf 8f4f 	dsb	sy
 8007a7a:	617b      	str	r3, [r7, #20]
 8007a7c:	e7fe      	b.n	8007a7c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d068      	beq.n	8007b56 <pvPortMalloc+0x142>
 8007a84:	4b41      	ldr	r3, [pc, #260]	; (8007b8c <pvPortMalloc+0x178>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d863      	bhi.n	8007b56 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007a8e:	4b40      	ldr	r3, [pc, #256]	; (8007b90 <pvPortMalloc+0x17c>)
 8007a90:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007a92:	4b3f      	ldr	r3, [pc, #252]	; (8007b90 <pvPortMalloc+0x17c>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007a98:	e004      	b.n	8007aa4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d903      	bls.n	8007ab6 <pvPortMalloc+0xa2>
 8007aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d1f1      	bne.n	8007a9a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007ab6:	4b33      	ldr	r3, [pc, #204]	; (8007b84 <pvPortMalloc+0x170>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d04a      	beq.n	8007b56 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007ac0:	6a3b      	ldr	r3, [r7, #32]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	2208      	movs	r2, #8
 8007ac6:	4413      	add	r3, r2
 8007ac8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	6a3b      	ldr	r3, [r7, #32]
 8007ad0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad4:	685a      	ldr	r2, [r3, #4]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	1ad2      	subs	r2, r2, r3
 8007ada:	2308      	movs	r3, #8
 8007adc:	005b      	lsls	r3, r3, #1
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d91e      	bls.n	8007b20 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4413      	add	r3, r2
 8007ae8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007aea:	69bb      	ldr	r3, [r7, #24]
 8007aec:	f003 0307 	and.w	r3, r3, #7
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d009      	beq.n	8007b08 <pvPortMalloc+0xf4>
 8007af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af8:	f383 8811 	msr	BASEPRI, r3
 8007afc:	f3bf 8f6f 	isb	sy
 8007b00:	f3bf 8f4f 	dsb	sy
 8007b04:	613b      	str	r3, [r7, #16]
 8007b06:	e7fe      	b.n	8007b06 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0a:	685a      	ldr	r2, [r3, #4]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	1ad2      	subs	r2, r2, r3
 8007b10:	69bb      	ldr	r3, [r7, #24]
 8007b12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b16:	687a      	ldr	r2, [r7, #4]
 8007b18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007b1a:	69b8      	ldr	r0, [r7, #24]
 8007b1c:	f000 f8f6 	bl	8007d0c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007b20:	4b1a      	ldr	r3, [pc, #104]	; (8007b8c <pvPortMalloc+0x178>)
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	1ad3      	subs	r3, r2, r3
 8007b2a:	4a18      	ldr	r2, [pc, #96]	; (8007b8c <pvPortMalloc+0x178>)
 8007b2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007b2e:	4b17      	ldr	r3, [pc, #92]	; (8007b8c <pvPortMalloc+0x178>)
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	4b18      	ldr	r3, [pc, #96]	; (8007b94 <pvPortMalloc+0x180>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d203      	bcs.n	8007b42 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007b3a:	4b14      	ldr	r3, [pc, #80]	; (8007b8c <pvPortMalloc+0x178>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a15      	ldr	r2, [pc, #84]	; (8007b94 <pvPortMalloc+0x180>)
 8007b40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b44:	685a      	ldr	r2, [r3, #4]
 8007b46:	4b10      	ldr	r3, [pc, #64]	; (8007b88 <pvPortMalloc+0x174>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	431a      	orrs	r2, r3
 8007b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b52:	2200      	movs	r2, #0
 8007b54:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007b56:	f7fe fbc3 	bl	80062e0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b5a:	69fb      	ldr	r3, [r7, #28]
 8007b5c:	f003 0307 	and.w	r3, r3, #7
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d009      	beq.n	8007b78 <pvPortMalloc+0x164>
 8007b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b68:	f383 8811 	msr	BASEPRI, r3
 8007b6c:	f3bf 8f6f 	isb	sy
 8007b70:	f3bf 8f4f 	dsb	sy
 8007b74:	60fb      	str	r3, [r7, #12]
 8007b76:	e7fe      	b.n	8007b76 <pvPortMalloc+0x162>
	return pvReturn;
 8007b78:	69fb      	ldr	r3, [r7, #28]
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3728      	adds	r7, #40	; 0x28
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	bf00      	nop
 8007b84:	2000459c 	.word	0x2000459c
 8007b88:	200045a8 	.word	0x200045a8
 8007b8c:	200045a0 	.word	0x200045a0
 8007b90:	20004594 	.word	0x20004594
 8007b94:	200045a4 	.word	0x200045a4

08007b98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b086      	sub	sp, #24
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d046      	beq.n	8007c38 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007baa:	2308      	movs	r3, #8
 8007bac:	425b      	negs	r3, r3
 8007bae:	697a      	ldr	r2, [r7, #20]
 8007bb0:	4413      	add	r3, r2
 8007bb2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	685a      	ldr	r2, [r3, #4]
 8007bbc:	4b20      	ldr	r3, [pc, #128]	; (8007c40 <vPortFree+0xa8>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4013      	ands	r3, r2
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d109      	bne.n	8007bda <vPortFree+0x42>
 8007bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bca:	f383 8811 	msr	BASEPRI, r3
 8007bce:	f3bf 8f6f 	isb	sy
 8007bd2:	f3bf 8f4f 	dsb	sy
 8007bd6:	60fb      	str	r3, [r7, #12]
 8007bd8:	e7fe      	b.n	8007bd8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d009      	beq.n	8007bf6 <vPortFree+0x5e>
 8007be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be6:	f383 8811 	msr	BASEPRI, r3
 8007bea:	f3bf 8f6f 	isb	sy
 8007bee:	f3bf 8f4f 	dsb	sy
 8007bf2:	60bb      	str	r3, [r7, #8]
 8007bf4:	e7fe      	b.n	8007bf4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	685a      	ldr	r2, [r3, #4]
 8007bfa:	4b11      	ldr	r3, [pc, #68]	; (8007c40 <vPortFree+0xa8>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4013      	ands	r3, r2
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d019      	beq.n	8007c38 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d115      	bne.n	8007c38 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	685a      	ldr	r2, [r3, #4]
 8007c10:	4b0b      	ldr	r3, [pc, #44]	; (8007c40 <vPortFree+0xa8>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	43db      	mvns	r3, r3
 8007c16:	401a      	ands	r2, r3
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007c1c:	f7fe fb52 	bl	80062c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	685a      	ldr	r2, [r3, #4]
 8007c24:	4b07      	ldr	r3, [pc, #28]	; (8007c44 <vPortFree+0xac>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4413      	add	r3, r2
 8007c2a:	4a06      	ldr	r2, [pc, #24]	; (8007c44 <vPortFree+0xac>)
 8007c2c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007c2e:	6938      	ldr	r0, [r7, #16]
 8007c30:	f000 f86c 	bl	8007d0c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007c34:	f7fe fb54 	bl	80062e0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007c38:	bf00      	nop
 8007c3a:	3718      	adds	r7, #24
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}
 8007c40:	200045a8 	.word	0x200045a8
 8007c44:	200045a0 	.word	0x200045a0

08007c48 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b085      	sub	sp, #20
 8007c4c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007c4e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007c52:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007c54:	4b27      	ldr	r3, [pc, #156]	; (8007cf4 <prvHeapInit+0xac>)
 8007c56:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	f003 0307 	and.w	r3, r3, #7
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d00c      	beq.n	8007c7c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	3307      	adds	r3, #7
 8007c66:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f023 0307 	bic.w	r3, r3, #7
 8007c6e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007c70:	68ba      	ldr	r2, [r7, #8]
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	1ad3      	subs	r3, r2, r3
 8007c76:	4a1f      	ldr	r2, [pc, #124]	; (8007cf4 <prvHeapInit+0xac>)
 8007c78:	4413      	add	r3, r2
 8007c7a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007c80:	4a1d      	ldr	r2, [pc, #116]	; (8007cf8 <prvHeapInit+0xb0>)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007c86:	4b1c      	ldr	r3, [pc, #112]	; (8007cf8 <prvHeapInit+0xb0>)
 8007c88:	2200      	movs	r2, #0
 8007c8a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	68ba      	ldr	r2, [r7, #8]
 8007c90:	4413      	add	r3, r2
 8007c92:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007c94:	2208      	movs	r2, #8
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	1a9b      	subs	r3, r3, r2
 8007c9a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f023 0307 	bic.w	r3, r3, #7
 8007ca2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	4a15      	ldr	r2, [pc, #84]	; (8007cfc <prvHeapInit+0xb4>)
 8007ca8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007caa:	4b14      	ldr	r3, [pc, #80]	; (8007cfc <prvHeapInit+0xb4>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007cb2:	4b12      	ldr	r3, [pc, #72]	; (8007cfc <prvHeapInit+0xb4>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	68fa      	ldr	r2, [r7, #12]
 8007cc2:	1ad2      	subs	r2, r2, r3
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007cc8:	4b0c      	ldr	r3, [pc, #48]	; (8007cfc <prvHeapInit+0xb4>)
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	4a0a      	ldr	r2, [pc, #40]	; (8007d00 <prvHeapInit+0xb8>)
 8007cd6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	4a09      	ldr	r2, [pc, #36]	; (8007d04 <prvHeapInit+0xbc>)
 8007cde:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007ce0:	4b09      	ldr	r3, [pc, #36]	; (8007d08 <prvHeapInit+0xc0>)
 8007ce2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007ce6:	601a      	str	r2, [r3, #0]
}
 8007ce8:	bf00      	nop
 8007cea:	3714      	adds	r7, #20
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bc80      	pop	{r7}
 8007cf0:	4770      	bx	lr
 8007cf2:	bf00      	nop
 8007cf4:	20000994 	.word	0x20000994
 8007cf8:	20004594 	.word	0x20004594
 8007cfc:	2000459c 	.word	0x2000459c
 8007d00:	200045a4 	.word	0x200045a4
 8007d04:	200045a0 	.word	0x200045a0
 8007d08:	200045a8 	.word	0x200045a8

08007d0c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007d0c:	b480      	push	{r7}
 8007d0e:	b085      	sub	sp, #20
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007d14:	4b27      	ldr	r3, [pc, #156]	; (8007db4 <prvInsertBlockIntoFreeList+0xa8>)
 8007d16:	60fb      	str	r3, [r7, #12]
 8007d18:	e002      	b.n	8007d20 <prvInsertBlockIntoFreeList+0x14>
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	60fb      	str	r3, [r7, #12]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d8f7      	bhi.n	8007d1a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	68ba      	ldr	r2, [r7, #8]
 8007d34:	4413      	add	r3, r2
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d108      	bne.n	8007d4e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	685a      	ldr	r2, [r3, #4]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	441a      	add	r2, r3
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	68ba      	ldr	r2, [r7, #8]
 8007d58:	441a      	add	r2, r3
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d118      	bne.n	8007d94 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	4b14      	ldr	r3, [pc, #80]	; (8007db8 <prvInsertBlockIntoFreeList+0xac>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d00d      	beq.n	8007d8a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	685a      	ldr	r2, [r3, #4]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	441a      	add	r2, r3
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	601a      	str	r2, [r3, #0]
 8007d88:	e008      	b.n	8007d9c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007d8a:	4b0b      	ldr	r3, [pc, #44]	; (8007db8 <prvInsertBlockIntoFreeList+0xac>)
 8007d8c:	681a      	ldr	r2, [r3, #0]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	601a      	str	r2, [r3, #0]
 8007d92:	e003      	b.n	8007d9c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007d9c:	68fa      	ldr	r2, [r7, #12]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d002      	beq.n	8007daa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007daa:	bf00      	nop
 8007dac:	3714      	adds	r7, #20
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bc80      	pop	{r7}
 8007db2:	4770      	bx	lr
 8007db4:	20004594 	.word	0x20004594
 8007db8:	2000459c 	.word	0x2000459c

08007dbc <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 8007dc4:	4b29      	ldr	r3, [pc, #164]	; (8007e6c <tcpip_thread+0xb0>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d005      	beq.n	8007dd8 <tcpip_thread+0x1c>
    tcpip_init_done(tcpip_init_done_arg);
 8007dcc:	4b27      	ldr	r3, [pc, #156]	; (8007e6c <tcpip_thread+0xb0>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a27      	ldr	r2, [pc, #156]	; (8007e70 <tcpip_thread+0xb4>)
 8007dd2:	6812      	ldr	r2, [r2, #0]
 8007dd4:	4610      	mov	r0, r2
 8007dd6:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 8007dd8:	4826      	ldr	r0, [pc, #152]	; (8007e74 <tcpip_thread+0xb8>)
 8007dda:	f00b fd55 	bl	8013888 <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 8007dde:	4825      	ldr	r0, [pc, #148]	; (8007e74 <tcpip_thread+0xb8>)
 8007de0:	f00b fd61 	bl	80138a6 <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8007de4:	f107 030c 	add.w	r3, r7, #12
 8007de8:	4619      	mov	r1, r3
 8007dea:	4823      	ldr	r0, [pc, #140]	; (8007e78 <tcpip_thread+0xbc>)
 8007dec:	f006 fe9e 	bl	800eb2c <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 8007df0:	4820      	ldr	r0, [pc, #128]	; (8007e74 <tcpip_thread+0xb8>)
 8007df2:	f00b fd49 	bl	8013888 <sys_mutex_lock>
    if (msg == NULL) {
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d106      	bne.n	8007e0a <tcpip_thread+0x4e>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8007dfc:	4b1f      	ldr	r3, [pc, #124]	; (8007e7c <tcpip_thread+0xc0>)
 8007dfe:	2269      	movs	r2, #105	; 0x69
 8007e00:	491f      	ldr	r1, [pc, #124]	; (8007e80 <tcpip_thread+0xc4>)
 8007e02:	4820      	ldr	r0, [pc, #128]	; (8007e84 <tcpip_thread+0xc8>)
 8007e04:	f010 fa8e 	bl	8018324 <iprintf>
      continue;
 8007e08:	e02f      	b.n	8007e6a <tcpip_thread+0xae>
    }
    switch (msg->type) {
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	2b03      	cmp	r3, #3
 8007e10:	d011      	beq.n	8007e36 <tcpip_thread+0x7a>
 8007e12:	2b04      	cmp	r3, #4
 8007e14:	d01b      	beq.n	8007e4e <tcpip_thread+0x92>
 8007e16:	2b02      	cmp	r3, #2
 8007e18:	d120      	bne.n	8007e5c <tcpip_thread+0xa0>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	68db      	ldr	r3, [r3, #12]
 8007e1e:	68fa      	ldr	r2, [r7, #12]
 8007e20:	6850      	ldr	r0, [r2, #4]
 8007e22:	68fa      	ldr	r2, [r7, #12]
 8007e24:	6892      	ldr	r2, [r2, #8]
 8007e26:	4611      	mov	r1, r2
 8007e28:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	2009      	movs	r0, #9
 8007e30:	f001 f874 	bl	8008f1c <memp_free>
      break;
 8007e34:	e019      	b.n	8007e6a <tcpip_thread+0xae>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	68fa      	ldr	r2, [r7, #12]
 8007e3c:	6892      	ldr	r2, [r2, #8]
 8007e3e:	4610      	mov	r0, r2
 8007e40:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	4619      	mov	r1, r3
 8007e46:	2008      	movs	r0, #8
 8007e48:	f001 f868 	bl	8008f1c <memp_free>
      break;
 8007e4c:	e00d      	b.n	8007e6a <tcpip_thread+0xae>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	68fa      	ldr	r2, [r7, #12]
 8007e54:	6892      	ldr	r2, [r2, #8]
 8007e56:	4610      	mov	r0, r2
 8007e58:	4798      	blx	r3
      break;
 8007e5a:	e006      	b.n	8007e6a <tcpip_thread+0xae>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8007e5c:	4b07      	ldr	r3, [pc, #28]	; (8007e7c <tcpip_thread+0xc0>)
 8007e5e:	229b      	movs	r2, #155	; 0x9b
 8007e60:	4907      	ldr	r1, [pc, #28]	; (8007e80 <tcpip_thread+0xc4>)
 8007e62:	4808      	ldr	r0, [pc, #32]	; (8007e84 <tcpip_thread+0xc8>)
 8007e64:	f010 fa5e 	bl	8018324 <iprintf>
      break;
 8007e68:	bf00      	nop
    UNLOCK_TCPIP_CORE();
 8007e6a:	e7b8      	b.n	8007dde <tcpip_thread+0x22>
 8007e6c:	200045ac 	.word	0x200045ac
 8007e70:	200045b0 	.word	0x200045b0
 8007e74:	20007e1c 	.word	0x20007e1c
 8007e78:	200045b4 	.word	0x200045b4
 8007e7c:	080193c0 	.word	0x080193c0
 8007e80:	080193f0 	.word	0x080193f0
 8007e84:	08019410 	.word	0x08019410

08007e88 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b086      	sub	sp, #24
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	60f8      	str	r0, [r7, #12]
 8007e90:	60b9      	str	r1, [r7, #8]
 8007e92:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8007e94:	481a      	ldr	r0, [pc, #104]	; (8007f00 <tcpip_inpkt+0x78>)
 8007e96:	f00b fcbd 	bl	8013814 <sys_mbox_valid>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d105      	bne.n	8007eac <tcpip_inpkt+0x24>
 8007ea0:	4b18      	ldr	r3, [pc, #96]	; (8007f04 <tcpip_inpkt+0x7c>)
 8007ea2:	22b5      	movs	r2, #181	; 0xb5
 8007ea4:	4918      	ldr	r1, [pc, #96]	; (8007f08 <tcpip_inpkt+0x80>)
 8007ea6:	4819      	ldr	r0, [pc, #100]	; (8007f0c <tcpip_inpkt+0x84>)
 8007ea8:	f010 fa3c 	bl	8018324 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8007eac:	2009      	movs	r0, #9
 8007eae:	f000 ffe3 	bl	8008e78 <memp_malloc>
 8007eb2:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d102      	bne.n	8007ec0 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8007eba:	f04f 33ff 	mov.w	r3, #4294967295
 8007ebe:	e01a      	b.n	8007ef6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	2202      	movs	r2, #2
 8007ec4:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	68fa      	ldr	r2, [r7, #12]
 8007eca:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	68ba      	ldr	r2, [r7, #8]
 8007ed0:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8007ed8:	6979      	ldr	r1, [r7, #20]
 8007eda:	4809      	ldr	r0, [pc, #36]	; (8007f00 <tcpip_inpkt+0x78>)
 8007edc:	f00b fc41 	bl	8013762 <sys_mbox_trypost>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d006      	beq.n	8007ef4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8007ee6:	6979      	ldr	r1, [r7, #20]
 8007ee8:	2009      	movs	r0, #9
 8007eea:	f001 f817 	bl	8008f1c <memp_free>
    return ERR_MEM;
 8007eee:	f04f 33ff 	mov.w	r3, #4294967295
 8007ef2:	e000      	b.n	8007ef6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8007ef4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3718      	adds	r7, #24
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	bf00      	nop
 8007f00:	200045b4 	.word	0x200045b4
 8007f04:	080193c0 	.word	0x080193c0
 8007f08:	08019438 	.word	0x08019438
 8007f0c:	08019410 	.word	0x08019410

08007f10 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8007f20:	f003 0318 	and.w	r3, r3, #24
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d006      	beq.n	8007f36 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8007f28:	4a08      	ldr	r2, [pc, #32]	; (8007f4c <tcpip_input+0x3c>)
 8007f2a:	6839      	ldr	r1, [r7, #0]
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f7ff ffab 	bl	8007e88 <tcpip_inpkt>
 8007f32:	4603      	mov	r3, r0
 8007f34:	e005      	b.n	8007f42 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 8007f36:	4a06      	ldr	r2, [pc, #24]	; (8007f50 <tcpip_input+0x40>)
 8007f38:	6839      	ldr	r1, [r7, #0]
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f7ff ffa4 	bl	8007e88 <tcpip_inpkt>
 8007f40:	4603      	mov	r3, r0
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3708      	adds	r7, #8
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}
 8007f4a:	bf00      	nop
 8007f4c:	0801353d 	.word	0x0801353d
 8007f50:	080120c9 	.word	0x080120c9

08007f54 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b086      	sub	sp, #24
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	60b9      	str	r1, [r7, #8]
 8007f5e:	4613      	mov	r3, r2
 8007f60:	71fb      	strb	r3, [r7, #7]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8007f62:	481d      	ldr	r0, [pc, #116]	; (8007fd8 <tcpip_callback_with_block+0x84>)
 8007f64:	f00b fc56 	bl	8013814 <sys_mbox_valid>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d105      	bne.n	8007f7a <tcpip_callback_with_block+0x26>
 8007f6e:	4b1b      	ldr	r3, [pc, #108]	; (8007fdc <tcpip_callback_with_block+0x88>)
 8007f70:	22ee      	movs	r2, #238	; 0xee
 8007f72:	491b      	ldr	r1, [pc, #108]	; (8007fe0 <tcpip_callback_with_block+0x8c>)
 8007f74:	481b      	ldr	r0, [pc, #108]	; (8007fe4 <tcpip_callback_with_block+0x90>)
 8007f76:	f010 f9d5 	bl	8018324 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8007f7a:	2008      	movs	r0, #8
 8007f7c:	f000 ff7c 	bl	8008e78 <memp_malloc>
 8007f80:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d102      	bne.n	8007f8e <tcpip_callback_with_block+0x3a>
    return ERR_MEM;
 8007f88:	f04f 33ff 	mov.w	r3, #4294967295
 8007f8c:	e01f      	b.n	8007fce <tcpip_callback_with_block+0x7a>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	2203      	movs	r2, #3
 8007f92:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	68fa      	ldr	r2, [r7, #12]
 8007f98:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	68ba      	ldr	r2, [r7, #8]
 8007f9e:	609a      	str	r2, [r3, #8]
  if (block) {
 8007fa0:	79fb      	ldrb	r3, [r7, #7]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d004      	beq.n	8007fb0 <tcpip_callback_with_block+0x5c>
    sys_mbox_post(&mbox, msg);
 8007fa6:	6979      	ldr	r1, [r7, #20]
 8007fa8:	480b      	ldr	r0, [pc, #44]	; (8007fd8 <tcpip_callback_with_block+0x84>)
 8007faa:	f00b fbc5 	bl	8013738 <sys_mbox_post>
 8007fae:	e00d      	b.n	8007fcc <tcpip_callback_with_block+0x78>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8007fb0:	6979      	ldr	r1, [r7, #20]
 8007fb2:	4809      	ldr	r0, [pc, #36]	; (8007fd8 <tcpip_callback_with_block+0x84>)
 8007fb4:	f00b fbd5 	bl	8013762 <sys_mbox_trypost>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d006      	beq.n	8007fcc <tcpip_callback_with_block+0x78>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8007fbe:	6979      	ldr	r1, [r7, #20]
 8007fc0:	2008      	movs	r0, #8
 8007fc2:	f000 ffab 	bl	8008f1c <memp_free>
      return ERR_MEM;
 8007fc6:	f04f 33ff 	mov.w	r3, #4294967295
 8007fca:	e000      	b.n	8007fce <tcpip_callback_with_block+0x7a>
    }
  }
  return ERR_OK;
 8007fcc:	2300      	movs	r3, #0
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3718      	adds	r7, #24
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
 8007fd6:	bf00      	nop
 8007fd8:	200045b4 	.word	0x200045b4
 8007fdc:	080193c0 	.word	0x080193c0
 8007fe0:	08019438 	.word	0x08019438
 8007fe4:	08019410 	.word	0x08019410

08007fe8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af02      	add	r7, sp, #8
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
  lwip_init();
 8007ff2:	f000 fb77 	bl	80086e4 <lwip_init>

  tcpip_init_done = initfunc;
 8007ff6:	4a17      	ldr	r2, [pc, #92]	; (8008054 <tcpip_init+0x6c>)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8007ffc:	4a16      	ldr	r2, [pc, #88]	; (8008058 <tcpip_init+0x70>)
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8008002:	2106      	movs	r1, #6
 8008004:	4815      	ldr	r0, [pc, #84]	; (800805c <tcpip_init+0x74>)
 8008006:	f00b fb75 	bl	80136f4 <sys_mbox_new>
 800800a:	4603      	mov	r3, r0
 800800c:	2b00      	cmp	r3, #0
 800800e:	d006      	beq.n	800801e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8008010:	4b13      	ldr	r3, [pc, #76]	; (8008060 <tcpip_init+0x78>)
 8008012:	f240 12d5 	movw	r2, #469	; 0x1d5
 8008016:	4913      	ldr	r1, [pc, #76]	; (8008064 <tcpip_init+0x7c>)
 8008018:	4813      	ldr	r0, [pc, #76]	; (8008068 <tcpip_init+0x80>)
 800801a:	f010 f983 	bl	8018324 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800801e:	4813      	ldr	r0, [pc, #76]	; (800806c <tcpip_init+0x84>)
 8008020:	f00b fc16 	bl	8013850 <sys_mutex_new>
 8008024:	4603      	mov	r3, r0
 8008026:	2b00      	cmp	r3, #0
 8008028:	d006      	beq.n	8008038 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800802a:	4b0d      	ldr	r3, [pc, #52]	; (8008060 <tcpip_init+0x78>)
 800802c:	f240 12d9 	movw	r2, #473	; 0x1d9
 8008030:	490f      	ldr	r1, [pc, #60]	; (8008070 <tcpip_init+0x88>)
 8008032:	480d      	ldr	r0, [pc, #52]	; (8008068 <tcpip_init+0x80>)
 8008034:	f010 f976 	bl	8018324 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8008038:	2303      	movs	r3, #3
 800803a:	9300      	str	r3, [sp, #0]
 800803c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008040:	2200      	movs	r2, #0
 8008042:	490c      	ldr	r1, [pc, #48]	; (8008074 <tcpip_init+0x8c>)
 8008044:	480c      	ldr	r0, [pc, #48]	; (8008078 <tcpip_init+0x90>)
 8008046:	f00b fc3b 	bl	80138c0 <sys_thread_new>
}
 800804a:	bf00      	nop
 800804c:	3708      	adds	r7, #8
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	200045ac 	.word	0x200045ac
 8008058:	200045b0 	.word	0x200045b0
 800805c:	200045b4 	.word	0x200045b4
 8008060:	080193c0 	.word	0x080193c0
 8008064:	08019448 	.word	0x08019448
 8008068:	08019410 	.word	0x08019410
 800806c:	20007e1c 	.word	0x20007e1c
 8008070:	0801946c 	.word	0x0801946c
 8008074:	08007dbd 	.word	0x08007dbd
 8008078:	08019490 	.word	0x08019490

0800807c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	4603      	mov	r3, r0
 8008084:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 8008086:	88fb      	ldrh	r3, [r7, #6]
 8008088:	ba5b      	rev16	r3, r3
 800808a:	b29b      	uxth	r3, r3
}
 800808c:	4618      	mov	r0, r3
 800808e:	370c      	adds	r7, #12
 8008090:	46bd      	mov	sp, r7
 8008092:	bc80      	pop	{r7}
 8008094:	4770      	bx	lr

08008096 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8008096:	b480      	push	{r7}
 8008098:	b083      	sub	sp, #12
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	061a      	lsls	r2, r3, #24
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	021b      	lsls	r3, r3, #8
 80080a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80080aa:	431a      	orrs	r2, r3
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	0a1b      	lsrs	r3, r3, #8
 80080b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80080b4:	431a      	orrs	r2, r3
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	0e1b      	lsrs	r3, r3, #24
 80080ba:	4313      	orrs	r3, r2
}
 80080bc:	4618      	mov	r0, r3
 80080be:	370c      	adds	r7, #12
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bc80      	pop	{r7}
 80080c4:	4770      	bx	lr

080080c6 <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 80080c6:	b480      	push	{r7}
 80080c8:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 80080ca:	bf00      	nop
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bc80      	pop	{r7}
 80080d0:	4770      	bx	lr

080080d2 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 80080d2:	b580      	push	{r7, lr}
 80080d4:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 80080d6:	f000 fa83 	bl	80085e0 <dns_check_entries>
}
 80080da:	bf00      	nop
 80080dc:	bd80      	pop	{r7, pc}
	...

080080e0 <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b090      	sub	sp, #64	; 0x40
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	4603      	mov	r3, r0
 80080e8:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry* entry = &dns_table[idx];
 80080ea:	79fa      	ldrb	r2, [r7, #7]
 80080ec:	4613      	mov	r3, r2
 80080ee:	011b      	lsls	r3, r3, #4
 80080f0:	4413      	add	r3, r2
 80080f2:	011b      	lsls	r3, r3, #4
 80080f4:	4a64      	ldr	r2, [pc, #400]	; (8008288 <dns_send+0x1a8>)
 80080f6:	4413      	add	r3, r2
 80080f8:	633b      	str	r3, [r7, #48]	; 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
              (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 80080fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080fc:	7adb      	ldrb	r3, [r3, #11]
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d906      	bls.n	8008110 <dns_send+0x30>
 8008102:	4b62      	ldr	r3, [pc, #392]	; (800828c <dns_send+0x1ac>)
 8008104:	f240 22ed 	movw	r2, #749	; 0x2ed
 8008108:	4961      	ldr	r1, [pc, #388]	; (8008290 <dns_send+0x1b0>)
 800810a:	4862      	ldr	r0, [pc, #392]	; (8008294 <dns_send+0x1b4>)
 800810c:	f010 f90a 	bl	8018324 <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 8008110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008112:	7adb      	ldrb	r3, [r3, #11]
 8008114:	461a      	mov	r2, r3
 8008116:	4b60      	ldr	r3, [pc, #384]	; (8008298 <dns_send+0x1b8>)
 8008118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d109      	bne.n	8008134 <dns_send+0x54>
      && !entry->is_mdns
#endif
    ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 8008120:	79fb      	ldrb	r3, [r7, #7]
 8008122:	2100      	movs	r1, #0
 8008124:	4618      	mov	r0, r3
 8008126:	f000 f8bb 	bl	80082a0 <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 800812a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800812c:	2200      	movs	r2, #0
 800812e:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 8008130:	2300      	movs	r3, #0
 8008132:	e0a4      	b.n	800827e <dns_send+0x19e>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 8008134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008136:	3310      	adds	r3, #16
 8008138:	4618      	mov	r0, r3
 800813a:	f7f8 f849 	bl	80001d0 <strlen>
 800813e:	4603      	mov	r3, r0
 8008140:	b29b      	uxth	r3, r3
 8008142:	3312      	adds	r3, #18
 8008144:	b29b      	uxth	r3, r3
 8008146:	2200      	movs	r2, #0
 8008148:	4619      	mov	r1, r3
 800814a:	2000      	movs	r0, #0
 800814c:	f001 f8e6 	bl	800931c <pbuf_alloc>
 8008150:	62f8      	str	r0, [r7, #44]	; 0x2c
                 SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 8008152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008154:	2b00      	cmp	r3, #0
 8008156:	f000 808d 	beq.w	8008274 <dns_send+0x194>
    const ip_addr_t* dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 800815a:	f107 0310 	add.w	r3, r7, #16
 800815e:	220c      	movs	r2, #12
 8008160:	2100      	movs	r1, #0
 8008162:	4618      	mov	r0, r3
 8008164:	f010 f8d6 	bl	8018314 <memset>
    hdr.id = lwip_htons(entry->txid);
 8008168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816a:	891b      	ldrh	r3, [r3, #8]
 800816c:	4618      	mov	r0, r3
 800816e:	f7ff ff85 	bl	800807c <lwip_htons>
 8008172:	4603      	mov	r3, r0
 8008174:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 8008176:	2301      	movs	r3, #1
 8008178:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 800817a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800817e:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 8008180:	f107 0310 	add.w	r3, r7, #16
 8008184:	220c      	movs	r2, #12
 8008186:	4619      	mov	r1, r3
 8008188:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800818a:	f001 fef9 	bl	8009f80 <pbuf_take>
    hostname = entry->name;
 800818e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008190:	3310      	adds	r3, #16
 8008192:	63bb      	str	r3, [r7, #56]	; 0x38
    --hostname;
 8008194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008196:	3b01      	subs	r3, #1
 8008198:	63bb      	str	r3, [r7, #56]	; 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 800819a:	230c      	movs	r3, #12
 800819c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    do {
      ++hostname;
 800819e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a0:	3301      	adds	r3, #1
 80081a2:	63bb      	str	r3, [r7, #56]	; 0x38
      hostname_part = hostname;
 80081a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a6:	62bb      	str	r3, [r7, #40]	; 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 80081a8:	2300      	movs	r3, #0
 80081aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80081ae:	e007      	b.n	80081c0 <dns_send+0xe0>
        ++n;
 80081b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80081b4:	3301      	adds	r3, #1
 80081b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 80081ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081bc:	3301      	adds	r3, #1
 80081be:	63bb      	str	r3, [r7, #56]	; 0x38
 80081c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	2b2e      	cmp	r3, #46	; 0x2e
 80081c6:	d003      	beq.n	80081d0 <dns_send+0xf0>
 80081c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d1ef      	bne.n	80081b0 <dns_send+0xd0>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 80081d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081d4:	1ad3      	subs	r3, r2, r3
 80081d6:	84fb      	strh	r3, [r7, #38]	; 0x26
      pbuf_put_at(p, query_idx, n);
 80081d8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80081dc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80081de:	4619      	mov	r1, r3
 80081e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80081e2:	f001 ffb1 	bl	800a148 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, query_idx + 1);
 80081e6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80081e8:	3301      	adds	r3, #1
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80081ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80081f2:	f001 ff57 	bl	800a0a4 <pbuf_take_at>
      query_idx += n + 1;
 80081f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80081fa:	b29a      	uxth	r2, r3
 80081fc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80081fe:	4413      	add	r3, r2
 8008200:	b29b      	uxth	r3, r3
 8008202:	3301      	adds	r3, #1
 8008204:	87bb      	strh	r3, [r7, #60]	; 0x3c
    } while (*hostname != 0);
 8008206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d1c7      	bne.n	800819e <dns_send+0xbe>
    pbuf_put_at(p, query_idx, 0);
 800820e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008210:	2200      	movs	r2, #0
 8008212:	4619      	mov	r1, r3
 8008214:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008216:	f001 ff97 	bl	800a148 <pbuf_put_at>
    query_idx++;
 800821a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800821c:	3301      	adds	r3, #1
 800821e:	87bb      	strh	r3, [r7, #60]	; 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 8008220:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008224:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 8008226:	f44f 7380 	mov.w	r3, #256	; 0x100
 800822a:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 800822c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800822e:	f107 010c 	add.w	r1, r7, #12
 8008232:	2204      	movs	r2, #4
 8008234:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008236:	f001 ff35 	bl	800a0a4 <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 800823a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800823c:	7bdb      	ldrb	r3, [r3, #15]
 800823e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 8008242:	2335      	movs	r3, #53	; 0x35
 8008244:	847b      	strh	r3, [r7, #34]	; 0x22
      dst = &dns_servers[entry->server_idx];
 8008246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008248:	7adb      	ldrb	r3, [r3, #11]
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	4a12      	ldr	r2, [pc, #72]	; (8008298 <dns_send+0x1b8>)
 800824e:	4413      	add	r3, r2
 8008250:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8008252:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008256:	4a11      	ldr	r2, [pc, #68]	; (800829c <dns_send+0x1bc>)
 8008258:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800825c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800825e:	69fa      	ldr	r2, [r7, #28]
 8008260:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008262:	f006 fde7 	bl	800ee34 <udp_sendto>
 8008266:	4603      	mov	r3, r0
 8008268:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* free pbuf */
    pbuf_free(p);
 800826c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800826e:	f001 fbc7 	bl	8009a00 <pbuf_free>
 8008272:	e002      	b.n	800827a <dns_send+0x19a>
  } else {
    err = ERR_MEM;
 8008274:	23ff      	movs	r3, #255	; 0xff
 8008276:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return err;
 800827a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800827e:	4618      	mov	r0, r3
 8008280:	3740      	adds	r7, #64	; 0x40
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	200045c8 	.word	0x200045c8
 800828c:	080194a0 	.word	0x080194a0
 8008290:	080194d0 	.word	0x080194d0
 8008294:	080194e8 	.word	0x080194e8
 8008298:	20004a38 	.word	0x20004a38
 800829c:	200045b8 	.word	0x200045b8

080082a0 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t* addr)
{
 80082a0:	b590      	push	{r4, r7, lr}
 80082a2:	b085      	sub	sp, #20
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	4603      	mov	r3, r0
 80082a8:	6039      	str	r1, [r7, #0]
 80082aa:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 80082ac:	2300      	movs	r3, #0
 80082ae:	73fb      	strb	r3, [r7, #15]
 80082b0:	e03d      	b.n	800832e <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 80082b2:	7bfa      	ldrb	r2, [r7, #15]
 80082b4:	4957      	ldr	r1, [pc, #348]	; (8008414 <dns_call_found+0x174>)
 80082b6:	4613      	mov	r3, r2
 80082b8:	005b      	lsls	r3, r3, #1
 80082ba:	4413      	add	r3, r2
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	440b      	add	r3, r1
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d030      	beq.n	8008328 <dns_call_found+0x88>
 80082c6:	7bfa      	ldrb	r2, [r7, #15]
 80082c8:	4952      	ldr	r1, [pc, #328]	; (8008414 <dns_call_found+0x174>)
 80082ca:	4613      	mov	r3, r2
 80082cc:	005b      	lsls	r3, r3, #1
 80082ce:	4413      	add	r3, r2
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	440b      	add	r3, r1
 80082d4:	3308      	adds	r3, #8
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	79fa      	ldrb	r2, [r7, #7]
 80082da:	429a      	cmp	r2, r3
 80082dc:	d124      	bne.n	8008328 <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 80082de:	7bfa      	ldrb	r2, [r7, #15]
 80082e0:	494c      	ldr	r1, [pc, #304]	; (8008414 <dns_call_found+0x174>)
 80082e2:	4613      	mov	r3, r2
 80082e4:	005b      	lsls	r3, r3, #1
 80082e6:	4413      	add	r3, r2
 80082e8:	009b      	lsls	r3, r3, #2
 80082ea:	440b      	add	r3, r1
 80082ec:	681c      	ldr	r4, [r3, #0]
 80082ee:	79fa      	ldrb	r2, [r7, #7]
 80082f0:	4613      	mov	r3, r2
 80082f2:	011b      	lsls	r3, r3, #4
 80082f4:	4413      	add	r3, r2
 80082f6:	011b      	lsls	r3, r3, #4
 80082f8:	3310      	adds	r3, #16
 80082fa:	4a47      	ldr	r2, [pc, #284]	; (8008418 <dns_call_found+0x178>)
 80082fc:	1898      	adds	r0, r3, r2
 80082fe:	7bfa      	ldrb	r2, [r7, #15]
 8008300:	4944      	ldr	r1, [pc, #272]	; (8008414 <dns_call_found+0x174>)
 8008302:	4613      	mov	r3, r2
 8008304:	005b      	lsls	r3, r3, #1
 8008306:	4413      	add	r3, r2
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	440b      	add	r3, r1
 800830c:	3304      	adds	r3, #4
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	461a      	mov	r2, r3
 8008312:	6839      	ldr	r1, [r7, #0]
 8008314:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 8008316:	7bfa      	ldrb	r2, [r7, #15]
 8008318:	493e      	ldr	r1, [pc, #248]	; (8008414 <dns_call_found+0x174>)
 800831a:	4613      	mov	r3, r2
 800831c:	005b      	lsls	r3, r3, #1
 800831e:	4413      	add	r3, r2
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	440b      	add	r3, r1
 8008324:	2200      	movs	r2, #0
 8008326:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8008328:	7bfb      	ldrb	r3, [r7, #15]
 800832a:	3301      	adds	r3, #1
 800832c:	73fb      	strb	r3, [r7, #15]
 800832e:	7bfb      	ldrb	r3, [r7, #15]
 8008330:	2b03      	cmp	r3, #3
 8008332:	d9be      	bls.n	80082b2 <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8008334:	2300      	movs	r3, #0
 8008336:	73fb      	strb	r3, [r7, #15]
 8008338:	e031      	b.n	800839e <dns_call_found+0xfe>
    if (i == idx) {
 800833a:	7bfa      	ldrb	r2, [r7, #15]
 800833c:	79fb      	ldrb	r3, [r7, #7]
 800833e:	429a      	cmp	r2, r3
 8008340:	d029      	beq.n	8008396 <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 8008342:	7bfa      	ldrb	r2, [r7, #15]
 8008344:	4934      	ldr	r1, [pc, #208]	; (8008418 <dns_call_found+0x178>)
 8008346:	4613      	mov	r3, r2
 8008348:	011b      	lsls	r3, r3, #4
 800834a:	4413      	add	r3, r2
 800834c:	011b      	lsls	r3, r3, #4
 800834e:	440b      	add	r3, r1
 8008350:	330a      	adds	r3, #10
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	2b02      	cmp	r3, #2
 8008356:	d11f      	bne.n	8008398 <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 8008358:	7bfa      	ldrb	r2, [r7, #15]
 800835a:	492f      	ldr	r1, [pc, #188]	; (8008418 <dns_call_found+0x178>)
 800835c:	4613      	mov	r3, r2
 800835e:	011b      	lsls	r3, r3, #4
 8008360:	4413      	add	r3, r2
 8008362:	011b      	lsls	r3, r3, #4
 8008364:	440b      	add	r3, r1
 8008366:	330f      	adds	r3, #15
 8008368:	7819      	ldrb	r1, [r3, #0]
 800836a:	79fa      	ldrb	r2, [r7, #7]
 800836c:	482a      	ldr	r0, [pc, #168]	; (8008418 <dns_call_found+0x178>)
 800836e:	4613      	mov	r3, r2
 8008370:	011b      	lsls	r3, r3, #4
 8008372:	4413      	add	r3, r2
 8008374:	011b      	lsls	r3, r3, #4
 8008376:	4403      	add	r3, r0
 8008378:	330f      	adds	r3, #15
 800837a:	781b      	ldrb	r3, [r3, #0]
 800837c:	4299      	cmp	r1, r3
 800837e:	d10b      	bne.n	8008398 <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8008380:	79fa      	ldrb	r2, [r7, #7]
 8008382:	4925      	ldr	r1, [pc, #148]	; (8008418 <dns_call_found+0x178>)
 8008384:	4613      	mov	r3, r2
 8008386:	011b      	lsls	r3, r3, #4
 8008388:	4413      	add	r3, r2
 800838a:	011b      	lsls	r3, r3, #4
 800838c:	440b      	add	r3, r1
 800838e:	330f      	adds	r3, #15
 8008390:	2204      	movs	r2, #4
 8008392:	701a      	strb	r2, [r3, #0]
        break;
 8008394:	e006      	b.n	80083a4 <dns_call_found+0x104>
      continue; /* only check other requests */
 8008396:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8008398:	7bfb      	ldrb	r3, [r7, #15]
 800839a:	3301      	adds	r3, #1
 800839c:	73fb      	strb	r3, [r7, #15]
 800839e:	7bfb      	ldrb	r3, [r7, #15]
 80083a0:	2b03      	cmp	r3, #3
 80083a2:	d9ca      	bls.n	800833a <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 80083a4:	79fa      	ldrb	r2, [r7, #7]
 80083a6:	491c      	ldr	r1, [pc, #112]	; (8008418 <dns_call_found+0x178>)
 80083a8:	4613      	mov	r3, r2
 80083aa:	011b      	lsls	r3, r3, #4
 80083ac:	4413      	add	r3, r2
 80083ae:	011b      	lsls	r3, r3, #4
 80083b0:	440b      	add	r3, r1
 80083b2:	330f      	adds	r3, #15
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	2b03      	cmp	r3, #3
 80083b8:	d827      	bhi.n	800840a <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 80083ba:	79fa      	ldrb	r2, [r7, #7]
 80083bc:	4916      	ldr	r1, [pc, #88]	; (8008418 <dns_call_found+0x178>)
 80083be:	4613      	mov	r3, r2
 80083c0:	011b      	lsls	r3, r3, #4
 80083c2:	4413      	add	r3, r2
 80083c4:	011b      	lsls	r3, r3, #4
 80083c6:	440b      	add	r3, r1
 80083c8:	330f      	adds	r3, #15
 80083ca:	781b      	ldrb	r3, [r3, #0]
 80083cc:	461a      	mov	r2, r3
 80083ce:	4b13      	ldr	r3, [pc, #76]	; (800841c <dns_call_found+0x17c>)
 80083d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083d4:	4618      	mov	r0, r3
 80083d6:	f006 fef9 	bl	800f1cc <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 80083da:	79fa      	ldrb	r2, [r7, #7]
 80083dc:	490e      	ldr	r1, [pc, #56]	; (8008418 <dns_call_found+0x178>)
 80083de:	4613      	mov	r3, r2
 80083e0:	011b      	lsls	r3, r3, #4
 80083e2:	4413      	add	r3, r2
 80083e4:	011b      	lsls	r3, r3, #4
 80083e6:	440b      	add	r3, r1
 80083e8:	330f      	adds	r3, #15
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	4619      	mov	r1, r3
 80083ee:	4b0b      	ldr	r3, [pc, #44]	; (800841c <dns_call_found+0x17c>)
 80083f0:	2200      	movs	r2, #0
 80083f2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 80083f6:	79fa      	ldrb	r2, [r7, #7]
 80083f8:	4907      	ldr	r1, [pc, #28]	; (8008418 <dns_call_found+0x178>)
 80083fa:	4613      	mov	r3, r2
 80083fc:	011b      	lsls	r3, r3, #4
 80083fe:	4413      	add	r3, r2
 8008400:	011b      	lsls	r3, r3, #4
 8008402:	440b      	add	r3, r1
 8008404:	330f      	adds	r3, #15
 8008406:	2204      	movs	r2, #4
 8008408:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 800840a:	bf00      	nop
 800840c:	3714      	adds	r7, #20
 800840e:	46bd      	mov	sp, r7
 8008410:	bd90      	pop	{r4, r7, pc}
 8008412:	bf00      	nop
 8008414:	20004a08 	.word	0x20004a08
 8008418:	200045c8 	.word	0x200045c8
 800841c:	200045b8 	.word	0x200045b8

08008420 <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b082      	sub	sp, #8
 8008424:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 8008426:	f00f fff9 	bl	801841c <rand>
 800842a:	4603      	mov	r3, r0
 800842c:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800842e:	2300      	movs	r3, #0
 8008430:	71fb      	strb	r3, [r7, #7]
 8008432:	e01a      	b.n	800846a <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8008434:	79fa      	ldrb	r2, [r7, #7]
 8008436:	4911      	ldr	r1, [pc, #68]	; (800847c <dns_create_txid+0x5c>)
 8008438:	4613      	mov	r3, r2
 800843a:	011b      	lsls	r3, r3, #4
 800843c:	4413      	add	r3, r2
 800843e:	011b      	lsls	r3, r3, #4
 8008440:	440b      	add	r3, r1
 8008442:	330a      	adds	r3, #10
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	2b02      	cmp	r3, #2
 8008448:	d10c      	bne.n	8008464 <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 800844a:	79fa      	ldrb	r2, [r7, #7]
 800844c:	490b      	ldr	r1, [pc, #44]	; (800847c <dns_create_txid+0x5c>)
 800844e:	4613      	mov	r3, r2
 8008450:	011b      	lsls	r3, r3, #4
 8008452:	4413      	add	r3, r2
 8008454:	011b      	lsls	r3, r3, #4
 8008456:	440b      	add	r3, r1
 8008458:	3308      	adds	r3, #8
 800845a:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800845c:	88ba      	ldrh	r2, [r7, #4]
 800845e:	429a      	cmp	r2, r3
 8008460:	d100      	bne.n	8008464 <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 8008462:	e7e0      	b.n	8008426 <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8008464:	79fb      	ldrb	r3, [r7, #7]
 8008466:	3301      	adds	r3, #1
 8008468:	71fb      	strb	r3, [r7, #7]
 800846a:	79fb      	ldrb	r3, [r7, #7]
 800846c:	2b03      	cmp	r3, #3
 800846e:	d9e1      	bls.n	8008434 <dns_create_txid+0x14>
    }
  }

  return txid;
 8008470:	88bb      	ldrh	r3, [r7, #4]
}
 8008472:	4618      	mov	r0, r3
 8008474:	3708      	adds	r7, #8
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}
 800847a:	bf00      	nop
 800847c:	200045c8 	.word	0x200045c8

08008480 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b084      	sub	sp, #16
 8008484:	af00      	add	r7, sp, #0
 8008486:	4603      	mov	r3, r0
 8008488:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 800848a:	79fa      	ldrb	r2, [r7, #7]
 800848c:	4613      	mov	r3, r2
 800848e:	011b      	lsls	r3, r3, #4
 8008490:	4413      	add	r3, r2
 8008492:	011b      	lsls	r3, r3, #4
 8008494:	4a4c      	ldr	r2, [pc, #304]	; (80085c8 <dns_check_entry+0x148>)
 8008496:	4413      	add	r3, r2
 8008498:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 800849a:	79fb      	ldrb	r3, [r7, #7]
 800849c:	2b03      	cmp	r3, #3
 800849e:	d906      	bls.n	80084ae <dns_check_entry+0x2e>
 80084a0:	4b4a      	ldr	r3, [pc, #296]	; (80085cc <dns_check_entry+0x14c>)
 80084a2:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
 80084a6:	494a      	ldr	r1, [pc, #296]	; (80085d0 <dns_check_entry+0x150>)
 80084a8:	484a      	ldr	r0, [pc, #296]	; (80085d4 <dns_check_entry+0x154>)
 80084aa:	f00f ff3b 	bl	8018324 <iprintf>

  switch (entry->state) {
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	7a9b      	ldrb	r3, [r3, #10]
 80084b2:	2b03      	cmp	r3, #3
 80084b4:	d876      	bhi.n	80085a4 <dns_check_entry+0x124>
 80084b6:	a201      	add	r2, pc, #4	; (adr r2, 80084bc <dns_check_entry+0x3c>)
 80084b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084bc:	080085b5 	.word	0x080085b5
 80084c0:	080084cd 	.word	0x080084cd
 80084c4:	080084ff 	.word	0x080084ff
 80084c8:	08008583 	.word	0x08008583
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 80084cc:	f7ff ffa8 	bl	8008420 <dns_create_txid>
 80084d0:	4603      	mov	r3, r0
 80084d2:	461a      	mov	r2, r3
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	2202      	movs	r2, #2
 80084dc:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2200      	movs	r2, #0
 80084e2:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2201      	movs	r2, #1
 80084e8:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2200      	movs	r2, #0
 80084ee:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 80084f0:	79fb      	ldrb	r3, [r7, #7]
 80084f2:	4618      	mov	r0, r3
 80084f4:	f7ff fdf4 	bl	80080e0 <dns_send>
 80084f8:	4603      	mov	r3, r0
 80084fa:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 80084fc:	e05f      	b.n	80085be <dns_check_entry+0x13e>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	7b1b      	ldrb	r3, [r3, #12]
 8008502:	3b01      	subs	r3, #1
 8008504:	b2da      	uxtb	r2, r3
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	731a      	strb	r2, [r3, #12]
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	7b1b      	ldrb	r3, [r3, #12]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d152      	bne.n	80085b8 <dns_check_entry+0x138>
        if (++entry->retries == DNS_MAX_RETRIES) {
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	7b5b      	ldrb	r3, [r3, #13]
 8008516:	3301      	adds	r3, #1
 8008518:	b2da      	uxtb	r2, r3
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	735a      	strb	r2, [r3, #13]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	7b5b      	ldrb	r3, [r3, #13]
 8008522:	2b04      	cmp	r3, #4
 8008524:	d122      	bne.n	800856c <dns_check_entry+0xec>
          if ((entry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[entry->server_idx + 1])
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	7adb      	ldrb	r3, [r3, #11]
 800852a:	3301      	adds	r3, #1
 800852c:	2b01      	cmp	r3, #1
 800852e:	dc14      	bgt.n	800855a <dns_check_entry+0xda>
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	7adb      	ldrb	r3, [r3, #11]
 8008534:	3301      	adds	r3, #1
 8008536:	4a28      	ldr	r2, [pc, #160]	; (80085d8 <dns_check_entry+0x158>)
 8008538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d00c      	beq.n	800855a <dns_check_entry+0xda>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
            && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
            ) {
            /* change of server */
            entry->server_idx++;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	7adb      	ldrb	r3, [r3, #11]
 8008544:	3301      	adds	r3, #1
 8008546:	b2da      	uxtb	r2, r3
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2201      	movs	r2, #1
 8008550:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2200      	movs	r2, #0
 8008556:	735a      	strb	r2, [r3, #13]
 8008558:	e00c      	b.n	8008574 <dns_check_entry+0xf4>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 800855a:	79fb      	ldrb	r3, [r7, #7]
 800855c:	2100      	movs	r1, #0
 800855e:	4618      	mov	r0, r3
 8008560:	f7ff fe9e 	bl	80082a0 <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2200      	movs	r2, #0
 8008568:	729a      	strb	r2, [r3, #10]
            break;
 800856a:	e028      	b.n	80085be <dns_check_entry+0x13e>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	7b5a      	ldrb	r2, [r3, #13]
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 8008574:	79fb      	ldrb	r3, [r7, #7]
 8008576:	4618      	mov	r0, r3
 8008578:	f7ff fdb2 	bl	80080e0 <dns_send>
 800857c:	4603      	mov	r3, r0
 800857e:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 8008580:	e01a      	b.n	80085b8 <dns_check_entry+0x138>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d008      	beq.n	800859c <dns_check_entry+0x11c>
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	1e5a      	subs	r2, r3, #1
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	601a      	str	r2, [r3, #0]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d10f      	bne.n	80085bc <dns_check_entry+0x13c>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2200      	movs	r2, #0
 80085a0:	729a      	strb	r2, [r3, #10]
      }
      break;
 80085a2:	e00b      	b.n	80085bc <dns_check_entry+0x13c>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 80085a4:	4b09      	ldr	r3, [pc, #36]	; (80085cc <dns_check_entry+0x14c>)
 80085a6:	f240 4237 	movw	r2, #1079	; 0x437
 80085aa:	490c      	ldr	r1, [pc, #48]	; (80085dc <dns_check_entry+0x15c>)
 80085ac:	4809      	ldr	r0, [pc, #36]	; (80085d4 <dns_check_entry+0x154>)
 80085ae:	f00f feb9 	bl	8018324 <iprintf>
      break;
 80085b2:	e004      	b.n	80085be <dns_check_entry+0x13e>
      break;
 80085b4:	bf00      	nop
 80085b6:	e002      	b.n	80085be <dns_check_entry+0x13e>
      break;
 80085b8:	bf00      	nop
 80085ba:	e000      	b.n	80085be <dns_check_entry+0x13e>
      break;
 80085bc:	bf00      	nop
  }
}
 80085be:	bf00      	nop
 80085c0:	3710      	adds	r7, #16
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	bf00      	nop
 80085c8:	200045c8 	.word	0x200045c8
 80085cc:	080194a0 	.word	0x080194a0
 80085d0:	08019510 	.word	0x08019510
 80085d4:	080194e8 	.word	0x080194e8
 80085d8:	20004a38 	.word	0x20004a38
 80085dc:	0801952c 	.word	0x0801952c

080085e0 <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b082      	sub	sp, #8
 80085e4:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 80085e6:	2300      	movs	r3, #0
 80085e8:	71fb      	strb	r3, [r7, #7]
 80085ea:	e006      	b.n	80085fa <dns_check_entries+0x1a>
    dns_check_entry(i);
 80085ec:	79fb      	ldrb	r3, [r7, #7]
 80085ee:	4618      	mov	r0, r3
 80085f0:	f7ff ff46 	bl	8008480 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 80085f4:	79fb      	ldrb	r3, [r7, #7]
 80085f6:	3301      	adds	r3, #1
 80085f8:	71fb      	strb	r3, [r7, #7]
 80085fa:	79fb      	ldrb	r3, [r7, #7]
 80085fc:	2b03      	cmp	r3, #3
 80085fe:	d9f5      	bls.n	80085ec <dns_check_entries+0xc>
  }
}
 8008600:	bf00      	nop
 8008602:	3708      	adds	r7, #8
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 8008608:	b480      	push	{r7}
 800860a:	b089      	sub	sp, #36	; 0x24
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 8008616:	2300      	movs	r3, #0
 8008618:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800861a:	2300      	movs	r3, #0
 800861c:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800861e:	69fb      	ldr	r3, [r7, #28]
 8008620:	f003 0301 	and.w	r3, r3, #1
 8008624:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d00d      	beq.n	8008648 <lwip_standard_chksum+0x40>
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	2b00      	cmp	r3, #0
 8008630:	dd0a      	ble.n	8008648 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 8008632:	69fa      	ldr	r2, [r7, #28]
 8008634:	1c53      	adds	r3, r2, #1
 8008636:	61fb      	str	r3, [r7, #28]
 8008638:	f107 030e 	add.w	r3, r7, #14
 800863c:	3301      	adds	r3, #1
 800863e:	7812      	ldrb	r2, [r2, #0]
 8008640:	701a      	strb	r2, [r3, #0]
    len--;
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	3b01      	subs	r3, #1
 8008646:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 8008648:	69fb      	ldr	r3, [r7, #28]
 800864a:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800864c:	e00a      	b.n	8008664 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800864e:	69bb      	ldr	r3, [r7, #24]
 8008650:	1c9a      	adds	r2, r3, #2
 8008652:	61ba      	str	r2, [r7, #24]
 8008654:	881b      	ldrh	r3, [r3, #0]
 8008656:	461a      	mov	r2, r3
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	4413      	add	r3, r2
 800865c:	617b      	str	r3, [r7, #20]
    len -= 2;
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	3b02      	subs	r3, #2
 8008662:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	2b01      	cmp	r3, #1
 8008668:	dcf1      	bgt.n	800864e <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	2b00      	cmp	r3, #0
 800866e:	dd04      	ble.n	800867a <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8008670:	f107 030e 	add.w	r3, r7, #14
 8008674:	69ba      	ldr	r2, [r7, #24]
 8008676:	7812      	ldrb	r2, [r2, #0]
 8008678:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800867a:	89fb      	ldrh	r3, [r7, #14]
 800867c:	461a      	mov	r2, r3
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	4413      	add	r3, r2
 8008682:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	0c1a      	lsrs	r2, r3, #16
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	b29b      	uxth	r3, r3
 800868c:	4413      	add	r3, r2
 800868e:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	0c1a      	lsrs	r2, r3, #16
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	b29b      	uxth	r3, r3
 8008698:	4413      	add	r3, r2
 800869a:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d007      	beq.n	80086b2 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	021b      	lsls	r3, r3, #8
 80086a6:	b29a      	uxth	r2, r3
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	0a1b      	lsrs	r3, r3, #8
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	4313      	orrs	r3, r2
 80086b0:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	b29b      	uxth	r3, r3
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3724      	adds	r7, #36	; 0x24
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bc80      	pop	{r7}
 80086be:	4770      	bx	lr

080086c0 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	460b      	mov	r3, r1
 80086ca:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 80086cc:	887b      	ldrh	r3, [r7, #2]
 80086ce:	4619      	mov	r1, r3
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f7ff ff99 	bl	8008608 <lwip_standard_chksum>
 80086d6:	4603      	mov	r3, r0
 80086d8:	43db      	mvns	r3, r3
 80086da:	b29b      	uxth	r3, r3
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3708      	adds	r7, #8
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80086ea:	2300      	movs	r3, #0
 80086ec:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80086ee:	f00b f8a1 	bl	8013834 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80086f2:	f000 f8ab 	bl	800884c <mem_init>
  memp_init();
 80086f6:	f000 fb73 	bl	8008de0 <memp_init>
  pbuf_init();
  netif_init();
 80086fa:	f000 fc39 	bl	8008f70 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80086fe:	f006 fa3b 	bl	800eb78 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8008702:	f001 fd43 	bl	800a18c <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
 8008706:	f008 ffe1 	bl	80116cc <igmp_init>
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 800870a:	f7ff fcdc 	bl	80080c6 <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 800870e:	f006 f8c9 	bl	800e8a4 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8008712:	bf00      	nop
 8008714:	3708      	adds	r7, #8
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
	...

0800871c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b084      	sub	sp, #16
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8008724:	4b40      	ldr	r3, [pc, #256]	; (8008828 <plug_holes+0x10c>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	687a      	ldr	r2, [r7, #4]
 800872a:	429a      	cmp	r2, r3
 800872c:	d206      	bcs.n	800873c <plug_holes+0x20>
 800872e:	4b3f      	ldr	r3, [pc, #252]	; (800882c <plug_holes+0x110>)
 8008730:	f240 125d 	movw	r2, #349	; 0x15d
 8008734:	493e      	ldr	r1, [pc, #248]	; (8008830 <plug_holes+0x114>)
 8008736:	483f      	ldr	r0, [pc, #252]	; (8008834 <plug_holes+0x118>)
 8008738:	f00f fdf4 	bl	8018324 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800873c:	4b3e      	ldr	r3, [pc, #248]	; (8008838 <plug_holes+0x11c>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	429a      	cmp	r2, r3
 8008744:	d306      	bcc.n	8008754 <plug_holes+0x38>
 8008746:	4b39      	ldr	r3, [pc, #228]	; (800882c <plug_holes+0x110>)
 8008748:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800874c:	493b      	ldr	r1, [pc, #236]	; (800883c <plug_holes+0x120>)
 800874e:	4839      	ldr	r0, [pc, #228]	; (8008834 <plug_holes+0x118>)
 8008750:	f00f fde8 	bl	8018324 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	791b      	ldrb	r3, [r3, #4]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d006      	beq.n	800876a <plug_holes+0x4e>
 800875c:	4b33      	ldr	r3, [pc, #204]	; (800882c <plug_holes+0x110>)
 800875e:	f240 125f 	movw	r2, #351	; 0x15f
 8008762:	4937      	ldr	r1, [pc, #220]	; (8008840 <plug_holes+0x124>)
 8008764:	4833      	ldr	r0, [pc, #204]	; (8008834 <plug_holes+0x118>)
 8008766:	f00f fddd 	bl	8018324 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	881b      	ldrh	r3, [r3, #0]
 800876e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008772:	d906      	bls.n	8008782 <plug_holes+0x66>
 8008774:	4b2d      	ldr	r3, [pc, #180]	; (800882c <plug_holes+0x110>)
 8008776:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800877a:	4932      	ldr	r1, [pc, #200]	; (8008844 <plug_holes+0x128>)
 800877c:	482d      	ldr	r0, [pc, #180]	; (8008834 <plug_holes+0x118>)
 800877e:	f00f fdd1 	bl	8018324 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 8008782:	4b29      	ldr	r3, [pc, #164]	; (8008828 <plug_holes+0x10c>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	687a      	ldr	r2, [r7, #4]
 8008788:	8812      	ldrh	r2, [r2, #0]
 800878a:	4413      	add	r3, r2
 800878c:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	429a      	cmp	r2, r3
 8008794:	d01f      	beq.n	80087d6 <plug_holes+0xba>
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	791b      	ldrb	r3, [r3, #4]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d11b      	bne.n	80087d6 <plug_holes+0xba>
 800879e:	4b26      	ldr	r3, [pc, #152]	; (8008838 <plug_holes+0x11c>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	68fa      	ldr	r2, [r7, #12]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d016      	beq.n	80087d6 <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80087a8:	4b27      	ldr	r3, [pc, #156]	; (8008848 <plug_holes+0x12c>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	68fa      	ldr	r2, [r7, #12]
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d102      	bne.n	80087b8 <plug_holes+0x9c>
      lfree = mem;
 80087b2:	4a25      	ldr	r2, [pc, #148]	; (8008848 <plug_holes+0x12c>)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	881a      	ldrh	r2, [r3, #0]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	4a19      	ldr	r2, [pc, #100]	; (8008828 <plug_holes+0x10c>)
 80087c4:	6812      	ldr	r2, [r2, #0]
 80087c6:	1a99      	subs	r1, r3, r2
 80087c8:	4b17      	ldr	r3, [pc, #92]	; (8008828 <plug_holes+0x10c>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	68fa      	ldr	r2, [r7, #12]
 80087ce:	8812      	ldrh	r2, [r2, #0]
 80087d0:	4413      	add	r3, r2
 80087d2:	b28a      	uxth	r2, r1
 80087d4:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 80087d6:	4b14      	ldr	r3, [pc, #80]	; (8008828 <plug_holes+0x10c>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	8852      	ldrh	r2, [r2, #2]
 80087de:	4413      	add	r3, r2
 80087e0:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80087e2:	68ba      	ldr	r2, [r7, #8]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d01a      	beq.n	8008820 <plug_holes+0x104>
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	791b      	ldrb	r3, [r3, #4]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d116      	bne.n	8008820 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80087f2:	4b15      	ldr	r3, [pc, #84]	; (8008848 <plug_holes+0x12c>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d102      	bne.n	8008802 <plug_holes+0xe6>
      lfree = pmem;
 80087fc:	4a12      	ldr	r2, [pc, #72]	; (8008848 <plug_holes+0x12c>)
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	881a      	ldrh	r2, [r3, #0]
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	4a06      	ldr	r2, [pc, #24]	; (8008828 <plug_holes+0x10c>)
 800880e:	6812      	ldr	r2, [r2, #0]
 8008810:	1a99      	subs	r1, r3, r2
 8008812:	4b05      	ldr	r3, [pc, #20]	; (8008828 <plug_holes+0x10c>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	687a      	ldr	r2, [r7, #4]
 8008818:	8812      	ldrh	r2, [r2, #0]
 800881a:	4413      	add	r3, r2
 800881c:	b28a      	uxth	r2, r1
 800881e:	805a      	strh	r2, [r3, #2]
  }
}
 8008820:	bf00      	nop
 8008822:	3710      	adds	r7, #16
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}
 8008828:	20004a40 	.word	0x20004a40
 800882c:	0801954c 	.word	0x0801954c
 8008830:	0801957c 	.word	0x0801957c
 8008834:	08019594 	.word	0x08019594
 8008838:	20004a44 	.word	0x20004a44
 800883c:	080195bc 	.word	0x080195bc
 8008840:	080195d8 	.word	0x080195d8
 8008844:	080195f4 	.word	0x080195f4
 8008848:	20004a48 	.word	0x20004a48

0800884c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b082      	sub	sp, #8
 8008850:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8008852:	4b1e      	ldr	r3, [pc, #120]	; (80088cc <mem_init+0x80>)
 8008854:	3303      	adds	r3, #3
 8008856:	f023 0303 	bic.w	r3, r3, #3
 800885a:	461a      	mov	r2, r3
 800885c:	4b1c      	ldr	r3, [pc, #112]	; (80088d0 <mem_init+0x84>)
 800885e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8008860:	4b1b      	ldr	r3, [pc, #108]	; (80088d0 <mem_init+0x84>)
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800886c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2200      	movs	r2, #0
 8008872:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800887a:	4b15      	ldr	r3, [pc, #84]	; (80088d0 <mem_init+0x84>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8008882:	4a14      	ldr	r2, [pc, #80]	; (80088d4 <mem_init+0x88>)
 8008884:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8008886:	4b13      	ldr	r3, [pc, #76]	; (80088d4 <mem_init+0x88>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2201      	movs	r2, #1
 800888c:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800888e:	4b11      	ldr	r3, [pc, #68]	; (80088d4 <mem_init+0x88>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8008896:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8008898:	4b0e      	ldr	r3, [pc, #56]	; (80088d4 <mem_init+0x88>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80088a0:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80088a2:	4b0b      	ldr	r3, [pc, #44]	; (80088d0 <mem_init+0x84>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a0c      	ldr	r2, [pc, #48]	; (80088d8 <mem_init+0x8c>)
 80088a8:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80088aa:	480c      	ldr	r0, [pc, #48]	; (80088dc <mem_init+0x90>)
 80088ac:	f00a ffd0 	bl	8013850 <sys_mutex_new>
 80088b0:	4603      	mov	r3, r0
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d006      	beq.n	80088c4 <mem_init+0x78>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80088b6:	4b0a      	ldr	r3, [pc, #40]	; (80088e0 <mem_init+0x94>)
 80088b8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80088bc:	4909      	ldr	r1, [pc, #36]	; (80088e4 <mem_init+0x98>)
 80088be:	480a      	ldr	r0, [pc, #40]	; (80088e8 <mem_init+0x9c>)
 80088c0:	f00f fd30 	bl	8018324 <iprintf>
  }
}
 80088c4:	bf00      	nop
 80088c6:	3708      	adds	r7, #8
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}
 80088cc:	20007e38 	.word	0x20007e38
 80088d0:	20004a40 	.word	0x20004a40
 80088d4:	20004a44 	.word	0x20004a44
 80088d8:	20004a48 	.word	0x20004a48
 80088dc:	20004a4c 	.word	0x20004a4c
 80088e0:	0801954c 	.word	0x0801954c
 80088e4:	08019620 	.word	0x08019620
 80088e8:	08019594 	.word	0x08019594

080088ec <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d050      	beq.n	800899c <mem_free+0xb0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f003 0303 	and.w	r3, r3, #3
 8008900:	2b00      	cmp	r3, #0
 8008902:	d006      	beq.n	8008912 <mem_free+0x26>
 8008904:	4b27      	ldr	r3, [pc, #156]	; (80089a4 <mem_free+0xb8>)
 8008906:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800890a:	4927      	ldr	r1, [pc, #156]	; (80089a8 <mem_free+0xbc>)
 800890c:	4827      	ldr	r0, [pc, #156]	; (80089ac <mem_free+0xc0>)
 800890e:	f00f fd09 	bl	8018324 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8008912:	4b27      	ldr	r3, [pc, #156]	; (80089b0 <mem_free+0xc4>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	687a      	ldr	r2, [r7, #4]
 8008918:	429a      	cmp	r2, r3
 800891a:	d304      	bcc.n	8008926 <mem_free+0x3a>
 800891c:	4b25      	ldr	r3, [pc, #148]	; (80089b4 <mem_free+0xc8>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	687a      	ldr	r2, [r7, #4]
 8008922:	429a      	cmp	r2, r3
 8008924:	d306      	bcc.n	8008934 <mem_free+0x48>
 8008926:	4b1f      	ldr	r3, [pc, #124]	; (80089a4 <mem_free+0xb8>)
 8008928:	f240 12af 	movw	r2, #431	; 0x1af
 800892c:	4922      	ldr	r1, [pc, #136]	; (80089b8 <mem_free+0xcc>)
 800892e:	481f      	ldr	r0, [pc, #124]	; (80089ac <mem_free+0xc0>)
 8008930:	f00f fcf8 	bl	8018324 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8008934:	4b1e      	ldr	r3, [pc, #120]	; (80089b0 <mem_free+0xc4>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	429a      	cmp	r2, r3
 800893c:	d304      	bcc.n	8008948 <mem_free+0x5c>
 800893e:	4b1d      	ldr	r3, [pc, #116]	; (80089b4 <mem_free+0xc8>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	429a      	cmp	r2, r3
 8008946:	d306      	bcc.n	8008956 <mem_free+0x6a>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 8008948:	f00a ffe0 	bl	801390c <sys_arch_protect>
 800894c:	60b8      	str	r0, [r7, #8]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800894e:	68b8      	ldr	r0, [r7, #8]
 8008950:	f00a ffea 	bl	8013928 <sys_arch_unprotect>
    return;
 8008954:	e023      	b.n	800899e <mem_free+0xb2>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8008956:	4819      	ldr	r0, [pc, #100]	; (80089bc <mem_free+0xd0>)
 8008958:	f00a ff96 	bl	8013888 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	3b08      	subs	r3, #8
 8008960:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	791b      	ldrb	r3, [r3, #4]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d106      	bne.n	8008978 <mem_free+0x8c>
 800896a:	4b0e      	ldr	r3, [pc, #56]	; (80089a4 <mem_free+0xb8>)
 800896c:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8008970:	4913      	ldr	r1, [pc, #76]	; (80089c0 <mem_free+0xd4>)
 8008972:	480e      	ldr	r0, [pc, #56]	; (80089ac <mem_free+0xc0>)
 8008974:	f00f fcd6 	bl	8018324 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2200      	movs	r2, #0
 800897c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800897e:	4b11      	ldr	r3, [pc, #68]	; (80089c4 <mem_free+0xd8>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	68fa      	ldr	r2, [r7, #12]
 8008984:	429a      	cmp	r2, r3
 8008986:	d202      	bcs.n	800898e <mem_free+0xa2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8008988:	4a0e      	ldr	r2, [pc, #56]	; (80089c4 <mem_free+0xd8>)
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800898e:	68f8      	ldr	r0, [r7, #12]
 8008990:	f7ff fec4 	bl	800871c <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8008994:	4809      	ldr	r0, [pc, #36]	; (80089bc <mem_free+0xd0>)
 8008996:	f00a ff86 	bl	80138a6 <sys_mutex_unlock>
 800899a:	e000      	b.n	800899e <mem_free+0xb2>
    return;
 800899c:	bf00      	nop
}
 800899e:	3710      	adds	r7, #16
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	0801954c 	.word	0x0801954c
 80089a8:	0801963c 	.word	0x0801963c
 80089ac:	08019594 	.word	0x08019594
 80089b0:	20004a40 	.word	0x20004a40
 80089b4:	20004a44 	.word	0x20004a44
 80089b8:	08019660 	.word	0x08019660
 80089bc:	20004a4c 	.word	0x20004a4c
 80089c0:	08019678 	.word	0x08019678
 80089c4:	20004a48 	.word	0x20004a48

080089c8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b088      	sub	sp, #32
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	460b      	mov	r3, r1
 80089d2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 80089d4:	887b      	ldrh	r3, [r7, #2]
 80089d6:	3303      	adds	r3, #3
 80089d8:	b29b      	uxth	r3, r3
 80089da:	f023 0303 	bic.w	r3, r3, #3
 80089de:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 80089e0:	887b      	ldrh	r3, [r7, #2]
 80089e2:	2b0b      	cmp	r3, #11
 80089e4:	d801      	bhi.n	80089ea <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80089e6:	230c      	movs	r3, #12
 80089e8:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 80089ea:	887b      	ldrh	r3, [r7, #2]
 80089ec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80089f0:	d901      	bls.n	80089f6 <mem_trim+0x2e>
    return NULL;
 80089f2:	2300      	movs	r3, #0
 80089f4:	e0bd      	b.n	8008b72 <mem_trim+0x1aa>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80089f6:	4b61      	ldr	r3, [pc, #388]	; (8008b7c <mem_trim+0x1b4>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d304      	bcc.n	8008a0a <mem_trim+0x42>
 8008a00:	4b5f      	ldr	r3, [pc, #380]	; (8008b80 <mem_trim+0x1b8>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d306      	bcc.n	8008a18 <mem_trim+0x50>
 8008a0a:	4b5e      	ldr	r3, [pc, #376]	; (8008b84 <mem_trim+0x1bc>)
 8008a0c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008a10:	495d      	ldr	r1, [pc, #372]	; (8008b88 <mem_trim+0x1c0>)
 8008a12:	485e      	ldr	r0, [pc, #376]	; (8008b8c <mem_trim+0x1c4>)
 8008a14:	f00f fc86 	bl	8018324 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8008a18:	4b58      	ldr	r3, [pc, #352]	; (8008b7c <mem_trim+0x1b4>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	d304      	bcc.n	8008a2c <mem_trim+0x64>
 8008a22:	4b57      	ldr	r3, [pc, #348]	; (8008b80 <mem_trim+0x1b8>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d307      	bcc.n	8008a3c <mem_trim+0x74>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 8008a2c:	f00a ff6e 	bl	801390c <sys_arch_protect>
 8008a30:	60f8      	str	r0, [r7, #12]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 8008a32:	68f8      	ldr	r0, [r7, #12]
 8008a34:	f00a ff78 	bl	8013928 <sys_arch_unprotect>
    return rmem;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	e09a      	b.n	8008b72 <mem_trim+0x1aa>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	3b08      	subs	r3, #8
 8008a40:	61fb      	str	r3, [r7, #28]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8008a42:	69fb      	ldr	r3, [r7, #28]
 8008a44:	4a4d      	ldr	r2, [pc, #308]	; (8008b7c <mem_trim+0x1b4>)
 8008a46:	6812      	ldr	r2, [r2, #0]
 8008a48:	1a9b      	subs	r3, r3, r2
 8008a4a:	837b      	strh	r3, [r7, #26]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8008a4c:	69fb      	ldr	r3, [r7, #28]
 8008a4e:	881a      	ldrh	r2, [r3, #0]
 8008a50:	8b7b      	ldrh	r3, [r7, #26]
 8008a52:	1ad3      	subs	r3, r2, r3
 8008a54:	b29b      	uxth	r3, r3
 8008a56:	3b08      	subs	r3, #8
 8008a58:	833b      	strh	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8008a5a:	887a      	ldrh	r2, [r7, #2]
 8008a5c:	8b3b      	ldrh	r3, [r7, #24]
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d906      	bls.n	8008a70 <mem_trim+0xa8>
 8008a62:	4b48      	ldr	r3, [pc, #288]	; (8008b84 <mem_trim+0x1bc>)
 8008a64:	f240 2206 	movw	r2, #518	; 0x206
 8008a68:	4949      	ldr	r1, [pc, #292]	; (8008b90 <mem_trim+0x1c8>)
 8008a6a:	4848      	ldr	r0, [pc, #288]	; (8008b8c <mem_trim+0x1c4>)
 8008a6c:	f00f fc5a 	bl	8018324 <iprintf>
  if (newsize > size) {
 8008a70:	887a      	ldrh	r2, [r7, #2]
 8008a72:	8b3b      	ldrh	r3, [r7, #24]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d901      	bls.n	8008a7c <mem_trim+0xb4>
    /* not supported */
    return NULL;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	e07a      	b.n	8008b72 <mem_trim+0x1aa>
  }
  if (newsize == size) {
 8008a7c:	887a      	ldrh	r2, [r7, #2]
 8008a7e:	8b3b      	ldrh	r3, [r7, #24]
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d101      	bne.n	8008a88 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	e074      	b.n	8008b72 <mem_trim+0x1aa>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8008a88:	4842      	ldr	r0, [pc, #264]	; (8008b94 <mem_trim+0x1cc>)
 8008a8a:	f00a fefd 	bl	8013888 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8008a8e:	4b3b      	ldr	r3, [pc, #236]	; (8008b7c <mem_trim+0x1b4>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	69fa      	ldr	r2, [r7, #28]
 8008a94:	8812      	ldrh	r2, [r2, #0]
 8008a96:	4413      	add	r3, r2
 8008a98:	617b      	str	r3, [r7, #20]
  if (mem2->used == 0) {
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	791b      	ldrb	r3, [r3, #4]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d131      	bne.n	8008b06 <mem_trim+0x13e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	881b      	ldrh	r3, [r3, #0]
 8008aa6:	823b      	strh	r3, [r7, #16]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8008aa8:	8b7a      	ldrh	r2, [r7, #26]
 8008aaa:	887b      	ldrh	r3, [r7, #2]
 8008aac:	4413      	add	r3, r2
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	3308      	adds	r3, #8
 8008ab2:	827b      	strh	r3, [r7, #18]
    if (lfree == mem2) {
 8008ab4:	4b38      	ldr	r3, [pc, #224]	; (8008b98 <mem_trim+0x1d0>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	697a      	ldr	r2, [r7, #20]
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d105      	bne.n	8008aca <mem_trim+0x102>
      lfree = (struct mem *)(void *)&ram[ptr2];
 8008abe:	4b2f      	ldr	r3, [pc, #188]	; (8008b7c <mem_trim+0x1b4>)
 8008ac0:	681a      	ldr	r2, [r3, #0]
 8008ac2:	8a7b      	ldrh	r3, [r7, #18]
 8008ac4:	4413      	add	r3, r2
 8008ac6:	4a34      	ldr	r2, [pc, #208]	; (8008b98 <mem_trim+0x1d0>)
 8008ac8:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8008aca:	4b2c      	ldr	r3, [pc, #176]	; (8008b7c <mem_trim+0x1b4>)
 8008acc:	681a      	ldr	r2, [r3, #0]
 8008ace:	8a7b      	ldrh	r3, [r7, #18]
 8008ad0:	4413      	add	r3, r2
 8008ad2:	617b      	str	r3, [r7, #20]
    mem2->used = 0;
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	8a3a      	ldrh	r2, [r7, #16]
 8008ade:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	8b7a      	ldrh	r2, [r7, #26]
 8008ae4:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8008ae6:	69fb      	ldr	r3, [r7, #28]
 8008ae8:	8a7a      	ldrh	r2, [r7, #18]
 8008aea:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	881b      	ldrh	r3, [r3, #0]
 8008af0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008af4:	d039      	beq.n	8008b6a <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8008af6:	4b21      	ldr	r3, [pc, #132]	; (8008b7c <mem_trim+0x1b4>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	697a      	ldr	r2, [r7, #20]
 8008afc:	8812      	ldrh	r2, [r2, #0]
 8008afe:	4413      	add	r3, r2
 8008b00:	8a7a      	ldrh	r2, [r7, #18]
 8008b02:	805a      	strh	r2, [r3, #2]
 8008b04:	e031      	b.n	8008b6a <mem_trim+0x1a2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8008b06:	887b      	ldrh	r3, [r7, #2]
 8008b08:	f103 0214 	add.w	r2, r3, #20
 8008b0c:	8b3b      	ldrh	r3, [r7, #24]
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d82b      	bhi.n	8008b6a <mem_trim+0x1a2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8008b12:	8b7a      	ldrh	r2, [r7, #26]
 8008b14:	887b      	ldrh	r3, [r7, #2]
 8008b16:	4413      	add	r3, r2
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	3308      	adds	r3, #8
 8008b1c:	827b      	strh	r3, [r7, #18]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8008b1e:	4b17      	ldr	r3, [pc, #92]	; (8008b7c <mem_trim+0x1b4>)
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	8a7b      	ldrh	r3, [r7, #18]
 8008b24:	4413      	add	r3, r2
 8008b26:	617b      	str	r3, [r7, #20]
    if (mem2 < lfree) {
 8008b28:	4b1b      	ldr	r3, [pc, #108]	; (8008b98 <mem_trim+0x1d0>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	697a      	ldr	r2, [r7, #20]
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d202      	bcs.n	8008b38 <mem_trim+0x170>
      lfree = mem2;
 8008b32:	4a19      	ldr	r2, [pc, #100]	; (8008b98 <mem_trim+0x1d0>)
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	881a      	ldrh	r2, [r3, #0]
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	8b7a      	ldrh	r2, [r7, #26]
 8008b4a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	8a7a      	ldrh	r2, [r7, #18]
 8008b50:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	881b      	ldrh	r3, [r3, #0]
 8008b56:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008b5a:	d006      	beq.n	8008b6a <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8008b5c:	4b07      	ldr	r3, [pc, #28]	; (8008b7c <mem_trim+0x1b4>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	697a      	ldr	r2, [r7, #20]
 8008b62:	8812      	ldrh	r2, [r2, #0]
 8008b64:	4413      	add	r3, r2
 8008b66:	8a7a      	ldrh	r2, [r7, #18]
 8008b68:	805a      	strh	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8008b6a:	480a      	ldr	r0, [pc, #40]	; (8008b94 <mem_trim+0x1cc>)
 8008b6c:	f00a fe9b 	bl	80138a6 <sys_mutex_unlock>
  return rmem;
 8008b70:	687b      	ldr	r3, [r7, #4]
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3720      	adds	r7, #32
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	20004a40 	.word	0x20004a40
 8008b80:	20004a44 	.word	0x20004a44
 8008b84:	0801954c 	.word	0x0801954c
 8008b88:	0801968c 	.word	0x0801968c
 8008b8c:	08019594 	.word	0x08019594
 8008b90:	080196a4 	.word	0x080196a4
 8008b94:	20004a4c 	.word	0x20004a4c
 8008b98:	20004a48 	.word	0x20004a48

08008b9c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b088      	sub	sp, #32
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8008ba6:	88fb      	ldrh	r3, [r7, #6]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d101      	bne.n	8008bb0 <mem_malloc+0x14>
    return NULL;
 8008bac:	2300      	movs	r3, #0
 8008bae:	e0d1      	b.n	8008d54 <mem_malloc+0x1b8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8008bb0:	88fb      	ldrh	r3, [r7, #6]
 8008bb2:	3303      	adds	r3, #3
 8008bb4:	b29b      	uxth	r3, r3
 8008bb6:	f023 0303 	bic.w	r3, r3, #3
 8008bba:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 8008bbc:	88fb      	ldrh	r3, [r7, #6]
 8008bbe:	2b0b      	cmp	r3, #11
 8008bc0:	d801      	bhi.n	8008bc6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8008bc2:	230c      	movs	r3, #12
 8008bc4:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 8008bc6:	88fb      	ldrh	r3, [r7, #6]
 8008bc8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008bcc:	d901      	bls.n	8008bd2 <mem_malloc+0x36>
    return NULL;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	e0c0      	b.n	8008d54 <mem_malloc+0x1b8>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8008bd2:	4862      	ldr	r0, [pc, #392]	; (8008d5c <mem_malloc+0x1c0>)
 8008bd4:	f00a fe58 	bl	8013888 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8008bd8:	4b61      	ldr	r3, [pc, #388]	; (8008d60 <mem_malloc+0x1c4>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	461a      	mov	r2, r3
 8008bde:	4b61      	ldr	r3, [pc, #388]	; (8008d64 <mem_malloc+0x1c8>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	1ad3      	subs	r3, r2, r3
 8008be4:	83fb      	strh	r3, [r7, #30]
 8008be6:	e0aa      	b.n	8008d3e <mem_malloc+0x1a2>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 8008be8:	4b5e      	ldr	r3, [pc, #376]	; (8008d64 <mem_malloc+0x1c8>)
 8008bea:	681a      	ldr	r2, [r3, #0]
 8008bec:	8bfb      	ldrh	r3, [r7, #30]
 8008bee:	4413      	add	r3, r2
 8008bf0:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	791b      	ldrb	r3, [r3, #4]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	f040 809b 	bne.w	8008d32 <mem_malloc+0x196>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	881b      	ldrh	r3, [r3, #0]
 8008c00:	461a      	mov	r2, r3
 8008c02:	8bfb      	ldrh	r3, [r7, #30]
 8008c04:	1ad3      	subs	r3, r2, r3
 8008c06:	f1a3 0208 	sub.w	r2, r3, #8
 8008c0a:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	f0c0 8090 	bcc.w	8008d32 <mem_malloc+0x196>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	881b      	ldrh	r3, [r3, #0]
 8008c16:	461a      	mov	r2, r3
 8008c18:	8bfb      	ldrh	r3, [r7, #30]
 8008c1a:	1ad3      	subs	r3, r2, r3
 8008c1c:	f1a3 0208 	sub.w	r2, r3, #8
 8008c20:	88fb      	ldrh	r3, [r7, #6]
 8008c22:	3314      	adds	r3, #20
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d327      	bcc.n	8008c78 <mem_malloc+0xdc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8008c28:	8bfa      	ldrh	r2, [r7, #30]
 8008c2a:	88fb      	ldrh	r3, [r7, #6]
 8008c2c:	4413      	add	r3, r2
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	3308      	adds	r3, #8
 8008c32:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8008c34:	4b4b      	ldr	r3, [pc, #300]	; (8008d64 <mem_malloc+0x1c8>)
 8008c36:	681a      	ldr	r2, [r3, #0]
 8008c38:	8a7b      	ldrh	r3, [r7, #18]
 8008c3a:	4413      	add	r3, r2
 8008c3c:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2200      	movs	r2, #0
 8008c42:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	881a      	ldrh	r2, [r3, #0]
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	8bfa      	ldrh	r2, [r7, #30]
 8008c50:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	8a7a      	ldrh	r2, [r7, #18]
 8008c56:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	881b      	ldrh	r3, [r3, #0]
 8008c62:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008c66:	d00a      	beq.n	8008c7e <mem_malloc+0xe2>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8008c68:	4b3e      	ldr	r3, [pc, #248]	; (8008d64 <mem_malloc+0x1c8>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	68fa      	ldr	r2, [r7, #12]
 8008c6e:	8812      	ldrh	r2, [r2, #0]
 8008c70:	4413      	add	r3, r2
 8008c72:	8a7a      	ldrh	r2, [r7, #18]
 8008c74:	805a      	strh	r2, [r3, #2]
 8008c76:	e002      	b.n	8008c7e <mem_malloc+0xe2>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8008c7e:	4b38      	ldr	r3, [pc, #224]	; (8008d60 <mem_malloc+0x1c4>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	697a      	ldr	r2, [r7, #20]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d127      	bne.n	8008cd8 <mem_malloc+0x13c>
          struct mem *cur = lfree;
 8008c88:	4b35      	ldr	r3, [pc, #212]	; (8008d60 <mem_malloc+0x1c4>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8008c8e:	e005      	b.n	8008c9c <mem_malloc+0x100>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 8008c90:	4b34      	ldr	r3, [pc, #208]	; (8008d64 <mem_malloc+0x1c8>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	69ba      	ldr	r2, [r7, #24]
 8008c96:	8812      	ldrh	r2, [r2, #0]
 8008c98:	4413      	add	r3, r2
 8008c9a:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 8008c9c:	69bb      	ldr	r3, [r7, #24]
 8008c9e:	791b      	ldrb	r3, [r3, #4]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d004      	beq.n	8008cae <mem_malloc+0x112>
 8008ca4:	4b30      	ldr	r3, [pc, #192]	; (8008d68 <mem_malloc+0x1cc>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	69ba      	ldr	r2, [r7, #24]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d1f0      	bne.n	8008c90 <mem_malloc+0xf4>
          }
          lfree = cur;
 8008cae:	4a2c      	ldr	r2, [pc, #176]	; (8008d60 <mem_malloc+0x1c4>)
 8008cb0:	69bb      	ldr	r3, [r7, #24]
 8008cb2:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8008cb4:	4b2a      	ldr	r3, [pc, #168]	; (8008d60 <mem_malloc+0x1c4>)
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	4b2b      	ldr	r3, [pc, #172]	; (8008d68 <mem_malloc+0x1cc>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d00b      	beq.n	8008cd8 <mem_malloc+0x13c>
 8008cc0:	4b27      	ldr	r3, [pc, #156]	; (8008d60 <mem_malloc+0x1c4>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	791b      	ldrb	r3, [r3, #4]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d006      	beq.n	8008cd8 <mem_malloc+0x13c>
 8008cca:	4b28      	ldr	r3, [pc, #160]	; (8008d6c <mem_malloc+0x1d0>)
 8008ccc:	f240 22cf 	movw	r2, #719	; 0x2cf
 8008cd0:	4927      	ldr	r1, [pc, #156]	; (8008d70 <mem_malloc+0x1d4>)
 8008cd2:	4828      	ldr	r0, [pc, #160]	; (8008d74 <mem_malloc+0x1d8>)
 8008cd4:	f00f fb26 	bl	8018324 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8008cd8:	4820      	ldr	r0, [pc, #128]	; (8008d5c <mem_malloc+0x1c0>)
 8008cda:	f00a fde4 	bl	80138a6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8008cde:	88fa      	ldrh	r2, [r7, #6]
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	4413      	add	r3, r2
 8008ce4:	3308      	adds	r3, #8
 8008ce6:	4a20      	ldr	r2, [pc, #128]	; (8008d68 <mem_malloc+0x1cc>)
 8008ce8:	6812      	ldr	r2, [r2, #0]
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d906      	bls.n	8008cfc <mem_malloc+0x160>
 8008cee:	4b1f      	ldr	r3, [pc, #124]	; (8008d6c <mem_malloc+0x1d0>)
 8008cf0:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8008cf4:	4920      	ldr	r1, [pc, #128]	; (8008d78 <mem_malloc+0x1dc>)
 8008cf6:	481f      	ldr	r0, [pc, #124]	; (8008d74 <mem_malloc+0x1d8>)
 8008cf8:	f00f fb14 	bl	8018324 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	f003 0303 	and.w	r3, r3, #3
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d006      	beq.n	8008d14 <mem_malloc+0x178>
 8008d06:	4b19      	ldr	r3, [pc, #100]	; (8008d6c <mem_malloc+0x1d0>)
 8008d08:	f240 22d6 	movw	r2, #726	; 0x2d6
 8008d0c:	491b      	ldr	r1, [pc, #108]	; (8008d7c <mem_malloc+0x1e0>)
 8008d0e:	4819      	ldr	r0, [pc, #100]	; (8008d74 <mem_malloc+0x1d8>)
 8008d10:	f00f fb08 	bl	8018324 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	f003 0303 	and.w	r3, r3, #3
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d006      	beq.n	8008d2c <mem_malloc+0x190>
 8008d1e:	4b13      	ldr	r3, [pc, #76]	; (8008d6c <mem_malloc+0x1d0>)
 8008d20:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 8008d24:	4916      	ldr	r1, [pc, #88]	; (8008d80 <mem_malloc+0x1e4>)
 8008d26:	4813      	ldr	r0, [pc, #76]	; (8008d74 <mem_malloc+0x1d8>)
 8008d28:	f00f fafc 	bl	8018324 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	3308      	adds	r3, #8
 8008d30:	e010      	b.n	8008d54 <mem_malloc+0x1b8>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8008d32:	4b0c      	ldr	r3, [pc, #48]	; (8008d64 <mem_malloc+0x1c8>)
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	8bfb      	ldrh	r3, [r7, #30]
 8008d38:	4413      	add	r3, r2
 8008d3a:	881b      	ldrh	r3, [r3, #0]
 8008d3c:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8008d3e:	8bfa      	ldrh	r2, [r7, #30]
 8008d40:	88fb      	ldrh	r3, [r7, #6]
 8008d42:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8008d46:	429a      	cmp	r2, r3
 8008d48:	f4ff af4e 	bcc.w	8008be8 <mem_malloc+0x4c>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8008d4c:	4803      	ldr	r0, [pc, #12]	; (8008d5c <mem_malloc+0x1c0>)
 8008d4e:	f00a fdaa 	bl	80138a6 <sys_mutex_unlock>
  return NULL;
 8008d52:	2300      	movs	r3, #0
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3720      	adds	r7, #32
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	20004a4c 	.word	0x20004a4c
 8008d60:	20004a48 	.word	0x20004a48
 8008d64:	20004a40 	.word	0x20004a40
 8008d68:	20004a44 	.word	0x20004a44
 8008d6c:	0801954c 	.word	0x0801954c
 8008d70:	080196c4 	.word	0x080196c4
 8008d74:	08019594 	.word	0x08019594
 8008d78:	080196e0 	.word	0x080196e0
 8008d7c:	08019710 	.word	0x08019710
 8008d80:	08019740 	.word	0x08019740

08008d84 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b085      	sub	sp, #20
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	689b      	ldr	r3, [r3, #8]
 8008d90:	2200      	movs	r2, #0
 8008d92:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	3303      	adds	r3, #3
 8008d9a:	f023 0303 	bic.w	r3, r3, #3
 8008d9e:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8008da0:	2300      	movs	r3, #0
 8008da2:	60fb      	str	r3, [r7, #12]
 8008da4:	e011      	b.n	8008dca <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	689b      	ldr	r3, [r3, #8]
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	689b      	ldr	r3, [r3, #8]
 8008db4:	68ba      	ldr	r2, [r7, #8]
 8008db6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	881b      	ldrh	r3, [r3, #0]
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	4413      	add	r3, r2
 8008dc2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	60fb      	str	r3, [r7, #12]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	885b      	ldrh	r3, [r3, #2]
 8008dce:	461a      	mov	r2, r3
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	dbe7      	blt.n	8008da6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8008dd6:	bf00      	nop
 8008dd8:	3714      	adds	r7, #20
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bc80      	pop	{r7}
 8008dde:	4770      	bx	lr

08008de0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008de6:	2300      	movs	r3, #0
 8008de8:	80fb      	strh	r3, [r7, #6]
 8008dea:	e009      	b.n	8008e00 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8008dec:	88fb      	ldrh	r3, [r7, #6]
 8008dee:	4a08      	ldr	r2, [pc, #32]	; (8008e10 <memp_init+0x30>)
 8008df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008df4:	4618      	mov	r0, r3
 8008df6:	f7ff ffc5 	bl	8008d84 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008dfa:	88fb      	ldrh	r3, [r7, #6]
 8008dfc:	3301      	adds	r3, #1
 8008dfe:	80fb      	strh	r3, [r7, #6]
 8008e00:	88fb      	ldrh	r3, [r7, #6]
 8008e02:	2b0e      	cmp	r3, #14
 8008e04:	d9f2      	bls.n	8008dec <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8008e06:	bf00      	nop
 8008e08:	3708      	adds	r7, #8
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}
 8008e0e:	bf00      	nop
 8008e10:	0801c844 	.word	0x0801c844

08008e14 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b084      	sub	sp, #16
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8008e1c:	f00a fd76 	bl	801390c <sys_arch_protect>
 8008e20:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	689b      	ldr	r3, [r3, #8]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d015      	beq.n	8008e5c <do_memp_malloc_pool+0x48>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	689b      	ldr	r3, [r3, #8]
 8008e34:	68ba      	ldr	r2, [r7, #8]
 8008e36:	6812      	ldr	r2, [r2, #0]
 8008e38:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	f003 0303 	and.w	r3, r3, #3
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d006      	beq.n	8008e52 <do_memp_malloc_pool+0x3e>
 8008e44:	4b09      	ldr	r3, [pc, #36]	; (8008e6c <do_memp_malloc_pool+0x58>)
 8008e46:	f240 1249 	movw	r2, #329	; 0x149
 8008e4a:	4909      	ldr	r1, [pc, #36]	; (8008e70 <do_memp_malloc_pool+0x5c>)
 8008e4c:	4809      	ldr	r0, [pc, #36]	; (8008e74 <do_memp_malloc_pool+0x60>)
 8008e4e:	f00f fa69 	bl	8018324 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8008e52:	68f8      	ldr	r0, [r7, #12]
 8008e54:	f00a fd68 	bl	8013928 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	e003      	b.n	8008e64 <do_memp_malloc_pool+0x50>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 8008e5c:	68f8      	ldr	r0, [r7, #12]
 8008e5e:	f00a fd63 	bl	8013928 <sys_arch_unprotect>
  return NULL;
 8008e62:	2300      	movs	r3, #0
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3710      	adds	r7, #16
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}
 8008e6c:	08019764 	.word	0x08019764
 8008e70:	08019794 	.word	0x08019794
 8008e74:	080197b8 	.word	0x080197b8

08008e78 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	4603      	mov	r3, r0
 8008e80:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8008e82:	79fb      	ldrb	r3, [r7, #7]
 8008e84:	2b0e      	cmp	r3, #14
 8008e86:	d908      	bls.n	8008e9a <memp_malloc+0x22>
 8008e88:	4b0a      	ldr	r3, [pc, #40]	; (8008eb4 <memp_malloc+0x3c>)
 8008e8a:	f240 1287 	movw	r2, #391	; 0x187
 8008e8e:	490a      	ldr	r1, [pc, #40]	; (8008eb8 <memp_malloc+0x40>)
 8008e90:	480a      	ldr	r0, [pc, #40]	; (8008ebc <memp_malloc+0x44>)
 8008e92:	f00f fa47 	bl	8018324 <iprintf>
 8008e96:	2300      	movs	r3, #0
 8008e98:	e008      	b.n	8008eac <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8008e9a:	79fb      	ldrb	r3, [r7, #7]
 8008e9c:	4a08      	ldr	r2, [pc, #32]	; (8008ec0 <memp_malloc+0x48>)
 8008e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f7ff ffb6 	bl	8008e14 <do_memp_malloc_pool>
 8008ea8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
}
 8008eac:	4618      	mov	r0, r3
 8008eae:	3710      	adds	r7, #16
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}
 8008eb4:	08019764 	.word	0x08019764
 8008eb8:	080197f4 	.word	0x080197f4
 8008ebc:	080197b8 	.word	0x080197b8
 8008ec0:	0801c844 	.word	0x0801c844

08008ec4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b084      	sub	sp, #16
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
 8008ecc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	f003 0303 	and.w	r3, r3, #3
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d006      	beq.n	8008ee6 <do_memp_free_pool+0x22>
 8008ed8:	4b0d      	ldr	r3, [pc, #52]	; (8008f10 <do_memp_free_pool+0x4c>)
 8008eda:	f240 129d 	movw	r2, #413	; 0x19d
 8008ede:	490d      	ldr	r1, [pc, #52]	; (8008f14 <do_memp_free_pool+0x50>)
 8008ee0:	480d      	ldr	r0, [pc, #52]	; (8008f18 <do_memp_free_pool+0x54>)
 8008ee2:	f00f fa1f 	bl	8018324 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8008eea:	f00a fd0f 	bl	801390c <sys_arch_protect>
 8008eee:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	689b      	ldr	r3, [r3, #8]
 8008efe:	68fa      	ldr	r2, [r7, #12]
 8008f00:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8008f02:	68b8      	ldr	r0, [r7, #8]
 8008f04:	f00a fd10 	bl	8013928 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8008f08:	bf00      	nop
 8008f0a:	3710      	adds	r7, #16
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}
 8008f10:	08019764 	.word	0x08019764
 8008f14:	08019814 	.word	0x08019814
 8008f18:	080197b8 	.word	0x080197b8

08008f1c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b082      	sub	sp, #8
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	4603      	mov	r3, r0
 8008f24:	6039      	str	r1, [r7, #0]
 8008f26:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8008f28:	79fb      	ldrb	r3, [r7, #7]
 8008f2a:	2b0e      	cmp	r3, #14
 8008f2c:	d907      	bls.n	8008f3e <memp_free+0x22>
 8008f2e:	4b0c      	ldr	r3, [pc, #48]	; (8008f60 <memp_free+0x44>)
 8008f30:	f240 12db 	movw	r2, #475	; 0x1db
 8008f34:	490b      	ldr	r1, [pc, #44]	; (8008f64 <memp_free+0x48>)
 8008f36:	480c      	ldr	r0, [pc, #48]	; (8008f68 <memp_free+0x4c>)
 8008f38:	f00f f9f4 	bl	8018324 <iprintf>
 8008f3c:	e00c      	b.n	8008f58 <memp_free+0x3c>

  if (mem == NULL) {
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d008      	beq.n	8008f56 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8008f44:	79fb      	ldrb	r3, [r7, #7]
 8008f46:	4a09      	ldr	r2, [pc, #36]	; (8008f6c <memp_free+0x50>)
 8008f48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f4c:	6839      	ldr	r1, [r7, #0]
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f7ff ffb8 	bl	8008ec4 <do_memp_free_pool>
 8008f54:	e000      	b.n	8008f58 <memp_free+0x3c>
    return;
 8008f56:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8008f58:	3708      	adds	r7, #8
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	08019764 	.word	0x08019764
 8008f64:	08019834 	.word	0x08019834
 8008f68:	080197b8 	.word	0x080197b8
 8008f6c:	0801c844 	.word	0x0801c844

08008f70 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8008f70:	b480      	push	{r7}
 8008f72:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8008f74:	bf00      	nop
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bc80      	pop	{r7}
 8008f7a:	4770      	bx	lr

08008f7c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b084      	sub	sp, #16
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	60f8      	str	r0, [r7, #12]
 8008f84:	60b9      	str	r1, [r7, #8]
 8008f86:	607a      	str	r2, [r7, #4]
 8008f88:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 8008f8a:	69fb      	ldr	r3, [r7, #28]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d105      	bne.n	8008f9c <netif_add+0x20>
 8008f90:	4b29      	ldr	r3, [pc, #164]	; (8009038 <netif_add+0xbc>)
 8008f92:	22fb      	movs	r2, #251	; 0xfb
 8008f94:	4929      	ldr	r1, [pc, #164]	; (800903c <netif_add+0xc0>)
 8008f96:	482a      	ldr	r0, [pc, #168]	; (8009040 <netif_add+0xc4>)
 8008f98:	f00f f9c4 	bl	8018324 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2200      	movs	r2, #0
 8008fac:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	3320      	adds	r3, #32
 8008fba:	2208      	movs	r2, #8
 8008fbc:	2100      	movs	r1, #0
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f00f f9a8 	bl	8018314 <memset>
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2203      	movs	r2, #3
 8008fc8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
#endif /* LWIP_NETIF_LINK_CALLBACK */
#if LWIP_IGMP
  netif->igmp_mac_filter = NULL;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	639a      	str	r2, [r3, #56]	; 0x38
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	69ba      	ldr	r2, [r7, #24]
 8008fd6:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 8008fd8:	4b1a      	ldr	r3, [pc, #104]	; (8009044 <netif_add+0xc8>)
 8008fda:	781b      	ldrb	r3, [r3, #0]
 8008fdc:	1c5a      	adds	r2, r3, #1
 8008fde:	b2d1      	uxtb	r1, r2
 8008fe0:	4a18      	ldr	r2, [pc, #96]	; (8009044 <netif_add+0xc8>)
 8008fe2:	7011      	strb	r1, [r2, #0]
 8008fe4:	68fa      	ldr	r2, [r7, #12]
 8008fe6:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36
  netif->input = input;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	6a3a      	ldr	r2, [r7, #32]
 8008fee:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	687a      	ldr	r2, [r7, #4]
 8008ff4:	68b9      	ldr	r1, [r7, #8]
 8008ff6:	68f8      	ldr	r0, [r7, #12]
 8008ff8:	f000 f828 	bl	800904c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8008ffc:	69fb      	ldr	r3, [r7, #28]
 8008ffe:	68f8      	ldr	r0, [r7, #12]
 8009000:	4798      	blx	r3
 8009002:	4603      	mov	r3, r0
 8009004:	2b00      	cmp	r3, #0
 8009006:	d001      	beq.n	800900c <netif_add+0x90>
    return NULL;
 8009008:	2300      	movs	r3, #0
 800900a:	e011      	b.n	8009030 <netif_add+0xb4>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800900c:	4b0e      	ldr	r3, [pc, #56]	; (8009048 <netif_add+0xcc>)
 800900e:	681a      	ldr	r2, [r3, #0]
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8009014:	4a0c      	ldr	r2, [pc, #48]	; (8009048 <netif_add+0xcc>)
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	6013      	str	r3, [r2, #0]
  mib2_netif_added(netif);

#if LWIP_IGMP
  /* start IGMP processing */
  if (netif->flags & NETIF_FLAG_IGMP) {
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8009020:	f003 0320 	and.w	r3, r3, #32
 8009024:	2b00      	cmp	r3, #0
 8009026:	d002      	beq.n	800902e <netif_add+0xb2>
    igmp_start(netif);
 8009028:	68f8      	ldr	r0, [r7, #12]
 800902a:	f008 fb63 	bl	80116f4 <igmp_start>
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 800902e:	68fb      	ldr	r3, [r7, #12]
}
 8009030:	4618      	mov	r0, r3
 8009032:	3710      	adds	r7, #16
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}
 8009038:	08019850 	.word	0x08019850
 800903c:	08019884 	.word	0x08019884
 8009040:	0801989c 	.word	0x0801989c
 8009044:	20004a8c 	.word	0x20004a8c
 8009048:	2000b8b4 	.word	0x2000b8b4

0800904c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b084      	sub	sp, #16
 8009050:	af00      	add	r7, sp, #0
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	607a      	str	r2, [r7, #4]
 8009058:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d003      	beq.n	8009068 <netif_set_addr+0x1c>
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d10c      	bne.n	8009082 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 8009068:	68b9      	ldr	r1, [r7, #8]
 800906a:	68f8      	ldr	r0, [r7, #12]
 800906c:	f000 f81a 	bl	80090a4 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8009070:	6879      	ldr	r1, [r7, #4]
 8009072:	68f8      	ldr	r0, [r7, #12]
 8009074:	f000 f861 	bl	800913a <netif_set_netmask>
    netif_set_gw(netif, gw);
 8009078:	6839      	ldr	r1, [r7, #0]
 800907a:	68f8      	ldr	r0, [r7, #12]
 800907c:	f000 f84a 	bl	8009114 <netif_set_gw>
 8009080:	e00b      	b.n	800909a <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 8009082:	6879      	ldr	r1, [r7, #4]
 8009084:	68f8      	ldr	r0, [r7, #12]
 8009086:	f000 f858 	bl	800913a <netif_set_netmask>
    netif_set_gw(netif, gw);
 800908a:	6839      	ldr	r1, [r7, #0]
 800908c:	68f8      	ldr	r0, [r7, #12]
 800908e:	f000 f841 	bl	8009114 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 8009092:	68b9      	ldr	r1, [r7, #8]
 8009094:	68f8      	ldr	r0, [r7, #12]
 8009096:	f000 f805 	bl	80090a4 <netif_set_ipaddr>
  }
}
 800909a:	bf00      	nop
 800909c:	3710      	adds	r7, #16
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}
	...

080090a4 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b084      	sub	sp, #16
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d003      	beq.n	80090bc <netif_set_ipaddr+0x18>
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	60fb      	str	r3, [r7, #12]
 80090ba:	e002      	b.n	80090c2 <netif_set_ipaddr+0x1e>
 80090bc:	4b14      	ldr	r3, [pc, #80]	; (8009110 <netif_set_ipaddr+0x6c>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 80090c2:	68fa      	ldr	r2, [r7, #12]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	3304      	adds	r3, #4
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d01c      	beq.n	8009108 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	3304      	adds	r3, #4
 80090d2:	f107 020c 	add.w	r2, r7, #12
 80090d6:	4611      	mov	r1, r2
 80090d8:	4618      	mov	r0, r3
 80090da:	f002 f9e1 	bl	800b4a0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	3304      	adds	r3, #4
 80090e2:	f107 020c 	add.w	r2, r7, #12
 80090e6:	4611      	mov	r1, r2
 80090e8:	4618      	mov	r0, r3
 80090ea:	f006 f8bb 	bl	800f264 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d002      	beq.n	80090fa <netif_set_ipaddr+0x56>
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	e000      	b.n	80090fc <netif_set_ipaddr+0x58>
 80090fa:	2300      	movs	r3, #0
 80090fc:	687a      	ldr	r2, [r7, #4]
 80090fe:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8009100:	2101      	movs	r1, #1
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 f85d 	bl	80091c2 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 8009108:	bf00      	nop
 800910a:	3710      	adds	r7, #16
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}
 8009110:	0801c8e0 	.word	0x0801c8e0

08009114 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 8009114:	b480      	push	{r7}
 8009116:	b083      	sub	sp, #12
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d002      	beq.n	800912a <netif_set_gw+0x16>
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	e000      	b.n	800912c <netif_set_gw+0x18>
 800912a:	2300      	movs	r3, #0
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 8009130:	bf00      	nop
 8009132:	370c      	adds	r7, #12
 8009134:	46bd      	mov	sp, r7
 8009136:	bc80      	pop	{r7}
 8009138:	4770      	bx	lr

0800913a <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 800913a:	b480      	push	{r7}
 800913c:	b083      	sub	sp, #12
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
 8009142:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d002      	beq.n	8009150 <netif_set_netmask+0x16>
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	e000      	b.n	8009152 <netif_set_netmask+0x18>
 8009150:	2300      	movs	r3, #0
 8009152:	687a      	ldr	r2, [r7, #4]
 8009154:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 8009156:	bf00      	nop
 8009158:	370c      	adds	r7, #12
 800915a:	46bd      	mov	sp, r7
 800915c:	bc80      	pop	{r7}
 800915e:	4770      	bx	lr

08009160 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8009160:	b480      	push	{r7}
 8009162:	b083      	sub	sp, #12
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8009168:	4a03      	ldr	r2, [pc, #12]	; (8009178 <netif_set_default+0x18>)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800916e:	bf00      	nop
 8009170:	370c      	adds	r7, #12
 8009172:	46bd      	mov	sp, r7
 8009174:	bc80      	pop	{r7}
 8009176:	4770      	bx	lr
 8009178:	2000b8b8 	.word	0x2000b8b8

0800917c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b082      	sub	sp, #8
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800918a:	f003 0301 	and.w	r3, r3, #1
 800918e:	2b00      	cmp	r3, #0
 8009190:	d113      	bne.n	80091ba <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8009198:	f043 0301 	orr.w	r3, r3, #1
 800919c:	b2da      	uxtb	r2, r3
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80091aa:	f003 0304 	and.w	r3, r3, #4
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d003      	beq.n	80091ba <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 80091b2:	2103      	movs	r1, #3
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 f804 	bl	80091c2 <netif_issue_reports>
    }
  }
}
 80091ba:	bf00      	nop
 80091bc:	3708      	adds	r7, #8
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}

080091c2 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 80091c2:	b580      	push	{r7, lr}
 80091c4:	b082      	sub	sp, #8
 80091c6:	af00      	add	r7, sp, #0
 80091c8:	6078      	str	r0, [r7, #4]
 80091ca:	460b      	mov	r3, r1
 80091cc:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80091ce:	78fb      	ldrb	r3, [r7, #3]
 80091d0:	f003 0301 	and.w	r3, r3, #1
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d01b      	beq.n	8009210 <netif_issue_reports+0x4e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	3304      	adds	r3, #4
 80091dc:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d016      	beq.n	8009210 <netif_issue_reports+0x4e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80091e8:	f003 0308 	and.w	r3, r3, #8
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d005      	beq.n	80091fc <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	3304      	adds	r3, #4
 80091f4:	4619      	mov	r1, r3
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f008 f8c8 	bl	801138c <etharp_request>
    }
#endif /* LWIP_ARP */

#if LWIP_IGMP
    /* resend IGMP memberships */
    if (netif->flags & NETIF_FLAG_IGMP) {
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8009202:	f003 0320 	and.w	r3, r3, #32
 8009206:	2b00      	cmp	r3, #0
 8009208:	d002      	beq.n	8009210 <netif_issue_reports+0x4e>
      igmp_report_groups(netif);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f008 fa9c 	bl	8011748 <igmp_report_groups>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 8009210:	bf00      	nop
 8009212:	3708      	adds	r7, #8
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}

08009218 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b082      	sub	sp, #8
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8009226:	f003 0301 	and.w	r3, r3, #1
 800922a:	2b00      	cmp	r3, #0
 800922c:	d012      	beq.n	8009254 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8009234:	f023 0301 	bic.w	r3, r3, #1
 8009238:	b2da      	uxtb	r2, r3
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8009246:	f003 0308 	and.w	r3, r3, #8
 800924a:	2b00      	cmp	r3, #0
 800924c:	d002      	beq.n	8009254 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f007 fc5e 	bl	8010b10 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8009254:	bf00      	nop
 8009256:	3708      	adds	r7, #8
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b082      	sub	sp, #8
 8009260:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8009262:	f00a fb53 	bl	801390c <sys_arch_protect>
 8009266:	6038      	str	r0, [r7, #0]
 8009268:	4b0f      	ldr	r3, [pc, #60]	; (80092a8 <pbuf_free_ooseq+0x4c>)
 800926a:	2200      	movs	r2, #0
 800926c:	701a      	strb	r2, [r3, #0]
 800926e:	6838      	ldr	r0, [r7, #0]
 8009270:	f00a fb5a 	bl	8013928 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009274:	4b0d      	ldr	r3, [pc, #52]	; (80092ac <pbuf_free_ooseq+0x50>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	607b      	str	r3, [r7, #4]
 800927a:	e00f      	b.n	800929c <pbuf_free_ooseq+0x40>
    if (NULL != pcb->ooseq) {
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009280:	2b00      	cmp	r3, #0
 8009282:	d008      	beq.n	8009296 <pbuf_free_ooseq+0x3a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\r\n"));
      tcp_segs_free(pcb->ooseq);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009288:	4618      	mov	r0, r3
 800928a:	f001 fe46 	bl	800af1a <tcp_segs_free>
      pcb->ooseq = NULL;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2200      	movs	r2, #0
 8009292:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 8009294:	e005      	b.n	80092a2 <pbuf_free_ooseq+0x46>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	68db      	ldr	r3, [r3, #12]
 800929a:	607b      	str	r3, [r7, #4]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d1ec      	bne.n	800927c <pbuf_free_ooseq+0x20>
    }
  }
}
 80092a2:	3708      	adds	r7, #8
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}
 80092a8:	2000b8bc 	.word	0x2000b8bc
 80092ac:	2000b8c4 	.word	0x2000b8c4

080092b0 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b082      	sub	sp, #8
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 80092b8:	f7ff ffd0 	bl	800925c <pbuf_free_ooseq>
}
 80092bc:	bf00      	nop
 80092be:	3708      	adds	r7, #8
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b082      	sub	sp, #8
 80092c8:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 80092ca:	f00a fb1f 	bl	801390c <sys_arch_protect>
 80092ce:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 80092d0:	4b10      	ldr	r3, [pc, #64]	; (8009314 <pbuf_pool_is_empty+0x50>)
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 80092d6:	4b0f      	ldr	r3, [pc, #60]	; (8009314 <pbuf_pool_is_empty+0x50>)
 80092d8:	2201      	movs	r2, #1
 80092da:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f00a fb23 	bl	8013928 <sys_arch_unprotect>

  if (!queued) {
 80092e2:	78fb      	ldrb	r3, [r7, #3]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d110      	bne.n	800930a <pbuf_pool_is_empty+0x46>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80092e8:	2200      	movs	r2, #0
 80092ea:	2100      	movs	r1, #0
 80092ec:	480a      	ldr	r0, [pc, #40]	; (8009318 <pbuf_pool_is_empty+0x54>)
 80092ee:	f7fe fe31 	bl	8007f54 <tcpip_callback_with_block>
 80092f2:	4603      	mov	r3, r0
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d008      	beq.n	800930a <pbuf_pool_is_empty+0x46>
 80092f8:	f00a fb08 	bl	801390c <sys_arch_protect>
 80092fc:	6078      	str	r0, [r7, #4]
 80092fe:	4b05      	ldr	r3, [pc, #20]	; (8009314 <pbuf_pool_is_empty+0x50>)
 8009300:	2200      	movs	r2, #0
 8009302:	701a      	strb	r2, [r3, #0]
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f00a fb0f 	bl	8013928 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800930a:	bf00      	nop
 800930c:	3708      	adds	r7, #8
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
 8009312:	bf00      	nop
 8009314:	2000b8bc 	.word	0x2000b8bc
 8009318:	080092b1 	.word	0x080092b1

0800931c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b088      	sub	sp, #32
 8009320:	af00      	add	r7, sp, #0
 8009322:	4603      	mov	r3, r0
 8009324:	71fb      	strb	r3, [r7, #7]
 8009326:	460b      	mov	r3, r1
 8009328:	80bb      	strh	r3, [r7, #4]
 800932a:	4613      	mov	r3, r2
 800932c:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\r\n", length));

  /* determine header offset */
  switch (layer) {
 800932e:	79fb      	ldrb	r3, [r7, #7]
 8009330:	2b04      	cmp	r3, #4
 8009332:	d81c      	bhi.n	800936e <pbuf_alloc+0x52>
 8009334:	a201      	add	r2, pc, #4	; (adr r2, 800933c <pbuf_alloc+0x20>)
 8009336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800933a:	bf00      	nop
 800933c:	08009351 	.word	0x08009351
 8009340:	08009357 	.word	0x08009357
 8009344:	0800935d 	.word	0x0800935d
 8009348:	08009363 	.word	0x08009363
 800934c:	08009369 	.word	0x08009369
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8009350:	2336      	movs	r3, #54	; 0x36
 8009352:	82fb      	strh	r3, [r7, #22]
    break;
 8009354:	e014      	b.n	8009380 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8009356:	2322      	movs	r3, #34	; 0x22
 8009358:	82fb      	strh	r3, [r7, #22]
    break;
 800935a:	e011      	b.n	8009380 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800935c:	230e      	movs	r3, #14
 800935e:	82fb      	strh	r3, [r7, #22]
    break;
 8009360:	e00e      	b.n	8009380 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8009362:	2300      	movs	r3, #0
 8009364:	82fb      	strh	r3, [r7, #22]
    break;
 8009366:	e00b      	b.n	8009380 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 8009368:	2300      	movs	r3, #0
 800936a:	82fb      	strh	r3, [r7, #22]
    break;
 800936c:	e008      	b.n	8009380 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800936e:	4ba5      	ldr	r3, [pc, #660]	; (8009604 <pbuf_alloc+0x2e8>)
 8009370:	f44f 728b 	mov.w	r2, #278	; 0x116
 8009374:	49a4      	ldr	r1, [pc, #656]	; (8009608 <pbuf_alloc+0x2ec>)
 8009376:	48a5      	ldr	r0, [pc, #660]	; (800960c <pbuf_alloc+0x2f0>)
 8009378:	f00e ffd4 	bl	8018324 <iprintf>
    return NULL;
 800937c:	2300      	movs	r3, #0
 800937e:	e15d      	b.n	800963c <pbuf_alloc+0x320>
  }

  switch (type) {
 8009380:	79bb      	ldrb	r3, [r7, #6]
 8009382:	2b03      	cmp	r3, #3
 8009384:	f200 8134 	bhi.w	80095f0 <pbuf_alloc+0x2d4>
 8009388:	a201      	add	r2, pc, #4	; (adr r2, 8009390 <pbuf_alloc+0x74>)
 800938a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800938e:	bf00      	nop
 8009390:	08009531 	.word	0x08009531
 8009394:	080095bd 	.word	0x080095bd
 8009398:	080095bd 	.word	0x080095bd
 800939c:	080093a1 	.word	0x080093a1
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80093a0:	200e      	movs	r0, #14
 80093a2:	f7ff fd69 	bl	8008e78 <memp_malloc>
 80093a6:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\r\n", (void *)p));
    if (p == NULL) {
 80093a8:	69fb      	ldr	r3, [r7, #28]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d103      	bne.n	80093b6 <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 80093ae:	f7ff ff89 	bl	80092c4 <pbuf_pool_is_empty>
      return NULL;
 80093b2:	2300      	movs	r3, #0
 80093b4:	e142      	b.n	800963c <pbuf_alloc+0x320>
    }
    p->type = type;
 80093b6:	69fb      	ldr	r3, [r7, #28]
 80093b8:	79ba      	ldrb	r2, [r7, #6]
 80093ba:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 80093bc:	69fb      	ldr	r3, [r7, #28]
 80093be:	2200      	movs	r2, #0
 80093c0:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 80093c2:	8afb      	ldrh	r3, [r7, #22]
 80093c4:	3318      	adds	r3, #24
 80093c6:	69fa      	ldr	r2, [r7, #28]
 80093c8:	4413      	add	r3, r2
 80093ca:	3303      	adds	r3, #3
 80093cc:	f023 0303 	bic.w	r3, r3, #3
 80093d0:	461a      	mov	r2, r3
 80093d2:	69fb      	ldr	r3, [r7, #28]
 80093d4:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 80093d6:	69fb      	ldr	r3, [r7, #28]
 80093d8:	685b      	ldr	r3, [r3, #4]
 80093da:	f003 0303 	and.w	r3, r3, #3
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d006      	beq.n	80093f0 <pbuf_alloc+0xd4>
 80093e2:	4b88      	ldr	r3, [pc, #544]	; (8009604 <pbuf_alloc+0x2e8>)
 80093e4:	f240 1229 	movw	r2, #297	; 0x129
 80093e8:	4989      	ldr	r1, [pc, #548]	; (8009610 <pbuf_alloc+0x2f4>)
 80093ea:	4888      	ldr	r0, [pc, #544]	; (800960c <pbuf_alloc+0x2f0>)
 80093ec:	f00e ff9a 	bl	8018324 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 80093f0:	69fb      	ldr	r3, [r7, #28]
 80093f2:	88ba      	ldrh	r2, [r7, #4]
 80093f4:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 80093f6:	8afb      	ldrh	r3, [r7, #22]
 80093f8:	3303      	adds	r3, #3
 80093fa:	f023 0303 	bic.w	r3, r3, #3
 80093fe:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 8009402:	88bb      	ldrh	r3, [r7, #4]
 8009404:	4293      	cmp	r3, r2
 8009406:	bf28      	it	cs
 8009408:	4613      	movcs	r3, r2
 800940a:	b29a      	uxth	r2, r3
 800940c:	69fb      	ldr	r3, [r7, #28]
 800940e:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8009410:	69fb      	ldr	r3, [r7, #28]
 8009412:	685b      	ldr	r3, [r3, #4]
 8009414:	69fa      	ldr	r2, [r7, #28]
 8009416:	8952      	ldrh	r2, [r2, #10]
 8009418:	441a      	add	r2, r3
 800941a:	69fb      	ldr	r3, [r7, #28]
 800941c:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8009420:	429a      	cmp	r2, r3
 8009422:	d906      	bls.n	8009432 <pbuf_alloc+0x116>
 8009424:	4b77      	ldr	r3, [pc, #476]	; (8009604 <pbuf_alloc+0x2e8>)
 8009426:	f44f 7298 	mov.w	r2, #304	; 0x130
 800942a:	497a      	ldr	r1, [pc, #488]	; (8009614 <pbuf_alloc+0x2f8>)
 800942c:	4877      	ldr	r0, [pc, #476]	; (800960c <pbuf_alloc+0x2f0>)
 800942e:	f00e ff79 	bl	8018324 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8009432:	8afb      	ldrh	r3, [r7, #22]
 8009434:	3303      	adds	r3, #3
 8009436:	f023 0303 	bic.w	r3, r3, #3
 800943a:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800943e:	d106      	bne.n	800944e <pbuf_alloc+0x132>
 8009440:	4b70      	ldr	r3, [pc, #448]	; (8009604 <pbuf_alloc+0x2e8>)
 8009442:	f44f 7299 	mov.w	r2, #306	; 0x132
 8009446:	4974      	ldr	r1, [pc, #464]	; (8009618 <pbuf_alloc+0x2fc>)
 8009448:	4870      	ldr	r0, [pc, #448]	; (800960c <pbuf_alloc+0x2f0>)
 800944a:	f00e ff6b 	bl	8018324 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 800944e:	69fb      	ldr	r3, [r7, #28]
 8009450:	2201      	movs	r2, #1
 8009452:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 8009454:	69fb      	ldr	r3, [r7, #28]
 8009456:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 8009458:	88bb      	ldrh	r3, [r7, #4]
 800945a:	69fa      	ldr	r2, [r7, #28]
 800945c:	8952      	ldrh	r2, [r2, #10]
 800945e:	1a9b      	subs	r3, r3, r2
 8009460:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 8009462:	e061      	b.n	8009528 <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8009464:	200e      	movs	r0, #14
 8009466:	f7ff fd07 	bl	8008e78 <memp_malloc>
 800946a:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d106      	bne.n	8009480 <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 8009472:	f7ff ff27 	bl	80092c4 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 8009476:	69f8      	ldr	r0, [r7, #28]
 8009478:	f000 fac2 	bl	8009a00 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 800947c:	2300      	movs	r3, #0
 800947e:	e0dd      	b.n	800963c <pbuf_alloc+0x320>
      }
      q->type = type;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	79ba      	ldrb	r2, [r7, #6]
 8009484:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2200      	movs	r2, #0
 800948a:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2200      	movs	r2, #0
 8009490:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 8009492:	69bb      	ldr	r3, [r7, #24]
 8009494:	68fa      	ldr	r2, [r7, #12]
 8009496:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800949e:	4293      	cmp	r3, r2
 80094a0:	dd06      	ble.n	80094b0 <pbuf_alloc+0x194>
 80094a2:	4b58      	ldr	r3, [pc, #352]	; (8009604 <pbuf_alloc+0x2e8>)
 80094a4:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 80094a8:	495c      	ldr	r1, [pc, #368]	; (800961c <pbuf_alloc+0x300>)
 80094aa:	4858      	ldr	r0, [pc, #352]	; (800960c <pbuf_alloc+0x2f0>)
 80094ac:	f00e ff3a 	bl	8018324 <iprintf>
      q->tot_len = (u16_t)rem_len;
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	b29a      	uxth	r2, r3
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	b29b      	uxth	r3, r3
 80094bc:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80094c0:	bf28      	it	cs
 80094c2:	f44f 7314 	movcs.w	r3, #592	; 0x250
 80094c6:	b29a      	uxth	r2, r3
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	f103 0218 	add.w	r2, r3, #24
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	f003 0303 	and.w	r3, r3, #3
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d006      	beq.n	80094f0 <pbuf_alloc+0x1d4>
 80094e2:	4b48      	ldr	r3, [pc, #288]	; (8009604 <pbuf_alloc+0x2e8>)
 80094e4:	f44f 72a9 	mov.w	r2, #338	; 0x152
 80094e8:	494d      	ldr	r1, [pc, #308]	; (8009620 <pbuf_alloc+0x304>)
 80094ea:	4848      	ldr	r0, [pc, #288]	; (800960c <pbuf_alloc+0x2f0>)
 80094ec:	f00e ff1a 	bl	8018324 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80094f0:	69fb      	ldr	r3, [r7, #28]
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	69fa      	ldr	r2, [r7, #28]
 80094f6:	8952      	ldrh	r2, [r2, #10]
 80094f8:	441a      	add	r2, r3
 80094fa:	69fb      	ldr	r3, [r7, #28]
 80094fc:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8009500:	429a      	cmp	r2, r3
 8009502:	d906      	bls.n	8009512 <pbuf_alloc+0x1f6>
 8009504:	4b3f      	ldr	r3, [pc, #252]	; (8009604 <pbuf_alloc+0x2e8>)
 8009506:	f240 1255 	movw	r2, #341	; 0x155
 800950a:	4942      	ldr	r1, [pc, #264]	; (8009614 <pbuf_alloc+0x2f8>)
 800950c:	483f      	ldr	r0, [pc, #252]	; (800960c <pbuf_alloc+0x2f0>)
 800950e:	f00e ff09 	bl	8018324 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2201      	movs	r2, #1
 8009516:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	895b      	ldrh	r3, [r3, #10]
 800951c:	461a      	mov	r2, r3
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	1a9b      	subs	r3, r3, r2
 8009522:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	2b00      	cmp	r3, #0
 800952c:	dc9a      	bgt.n	8009464 <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 800952e:	e07e      	b.n	800962e <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8009530:	8afb      	ldrh	r3, [r7, #22]
 8009532:	331b      	adds	r3, #27
 8009534:	b29b      	uxth	r3, r3
 8009536:	f023 0303 	bic.w	r3, r3, #3
 800953a:	b29a      	uxth	r2, r3
 800953c:	88bb      	ldrh	r3, [r7, #4]
 800953e:	3303      	adds	r3, #3
 8009540:	b29b      	uxth	r3, r3
 8009542:	f023 0303 	bic.w	r3, r3, #3
 8009546:	b29b      	uxth	r3, r3
 8009548:	4413      	add	r3, r2
 800954a:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800954c:	897a      	ldrh	r2, [r7, #10]
 800954e:	88bb      	ldrh	r3, [r7, #4]
 8009550:	3303      	adds	r3, #3
 8009552:	f023 0303 	bic.w	r3, r3, #3
 8009556:	429a      	cmp	r2, r3
 8009558:	d201      	bcs.n	800955e <pbuf_alloc+0x242>
        return NULL;
 800955a:	2300      	movs	r3, #0
 800955c:	e06e      	b.n	800963c <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 800955e:	897b      	ldrh	r3, [r7, #10]
 8009560:	4618      	mov	r0, r3
 8009562:	f7ff fb1b 	bl	8008b9c <mem_malloc>
 8009566:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 8009568:	69fb      	ldr	r3, [r7, #28]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d101      	bne.n	8009572 <pbuf_alloc+0x256>
      return NULL;
 800956e:	2300      	movs	r3, #0
 8009570:	e064      	b.n	800963c <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8009572:	8afb      	ldrh	r3, [r7, #22]
 8009574:	3318      	adds	r3, #24
 8009576:	69fa      	ldr	r2, [r7, #28]
 8009578:	4413      	add	r3, r2
 800957a:	3303      	adds	r3, #3
 800957c:	f023 0303 	bic.w	r3, r3, #3
 8009580:	461a      	mov	r2, r3
 8009582:	69fb      	ldr	r3, [r7, #28]
 8009584:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8009586:	69fb      	ldr	r3, [r7, #28]
 8009588:	88ba      	ldrh	r2, [r7, #4]
 800958a:	811a      	strh	r2, [r3, #8]
 800958c:	69fb      	ldr	r3, [r7, #28]
 800958e:	891a      	ldrh	r2, [r3, #8]
 8009590:	69fb      	ldr	r3, [r7, #28]
 8009592:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8009594:	69fb      	ldr	r3, [r7, #28]
 8009596:	2200      	movs	r2, #0
 8009598:	601a      	str	r2, [r3, #0]
    p->type = type;
 800959a:	69fb      	ldr	r3, [r7, #28]
 800959c:	79ba      	ldrb	r2, [r7, #6]
 800959e:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80095a0:	69fb      	ldr	r3, [r7, #28]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	f003 0303 	and.w	r3, r3, #3
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d03f      	beq.n	800962c <pbuf_alloc+0x310>
 80095ac:	4b15      	ldr	r3, [pc, #84]	; (8009604 <pbuf_alloc+0x2e8>)
 80095ae:	f240 1277 	movw	r2, #375	; 0x177
 80095b2:	491c      	ldr	r1, [pc, #112]	; (8009624 <pbuf_alloc+0x308>)
 80095b4:	4815      	ldr	r0, [pc, #84]	; (800960c <pbuf_alloc+0x2f0>)
 80095b6:	f00e feb5 	bl	8018324 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 80095ba:	e037      	b.n	800962c <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80095bc:	200d      	movs	r0, #13
 80095be:	f7ff fc5b 	bl	8008e78 <memp_malloc>
 80095c2:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 80095c4:	69fb      	ldr	r3, [r7, #28]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d101      	bne.n	80095ce <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\r\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 80095ca:	2300      	movs	r3, #0
 80095cc:	e036      	b.n	800963c <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 80095ce:	69fb      	ldr	r3, [r7, #28]
 80095d0:	2200      	movs	r2, #0
 80095d2:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 80095d4:	69fb      	ldr	r3, [r7, #28]
 80095d6:	88ba      	ldrh	r2, [r7, #4]
 80095d8:	811a      	strh	r2, [r3, #8]
 80095da:	69fb      	ldr	r3, [r7, #28]
 80095dc:	891a      	ldrh	r2, [r3, #8]
 80095de:	69fb      	ldr	r3, [r7, #28]
 80095e0:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 80095e2:	69fb      	ldr	r3, [r7, #28]
 80095e4:	2200      	movs	r2, #0
 80095e6:	601a      	str	r2, [r3, #0]
    p->type = type;
 80095e8:	69fb      	ldr	r3, [r7, #28]
 80095ea:	79ba      	ldrb	r2, [r7, #6]
 80095ec:	731a      	strb	r2, [r3, #12]
    break;
 80095ee:	e01e      	b.n	800962e <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80095f0:	4b04      	ldr	r3, [pc, #16]	; (8009604 <pbuf_alloc+0x2e8>)
 80095f2:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 80095f6:	490c      	ldr	r1, [pc, #48]	; (8009628 <pbuf_alloc+0x30c>)
 80095f8:	4804      	ldr	r0, [pc, #16]	; (800960c <pbuf_alloc+0x2f0>)
 80095fa:	f00e fe93 	bl	8018324 <iprintf>
    return NULL;
 80095fe:	2300      	movs	r3, #0
 8009600:	e01c      	b.n	800963c <pbuf_alloc+0x320>
 8009602:	bf00      	nop
 8009604:	080198c4 	.word	0x080198c4
 8009608:	080198f4 	.word	0x080198f4
 800960c:	08019910 	.word	0x08019910
 8009610:	08019938 	.word	0x08019938
 8009614:	08019968 	.word	0x08019968
 8009618:	0801999c 	.word	0x0801999c
 800961c:	080199d0 	.word	0x080199d0
 8009620:	080199e4 	.word	0x080199e4
 8009624:	08019a14 	.word	0x08019a14
 8009628:	08019a40 	.word	0x08019a40
    break;
 800962c:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 800962e:	69fb      	ldr	r3, [r7, #28]
 8009630:	2201      	movs	r2, #1
 8009632:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 8009634:	69fb      	ldr	r3, [r7, #28]
 8009636:	2200      	movs	r2, #0
 8009638:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\r\n", length, (void *)p));
  return p;
 800963a:	69fb      	ldr	r3, [r7, #28]
}
 800963c:	4618      	mov	r0, r3
 800963e:	3720      	adds	r7, #32
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}

08009644 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b084      	sub	sp, #16
 8009648:	af00      	add	r7, sp, #0
 800964a:	603b      	str	r3, [r7, #0]
 800964c:	4603      	mov	r3, r0
 800964e:	71fb      	strb	r3, [r7, #7]
 8009650:	460b      	mov	r3, r1
 8009652:	80bb      	strh	r3, [r7, #4]
 8009654:	4613      	mov	r3, r2
 8009656:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\r\n", length));

  /* determine header offset */
  switch (l) {
 8009658:	79fb      	ldrb	r3, [r7, #7]
 800965a:	2b04      	cmp	r3, #4
 800965c:	d81b      	bhi.n	8009696 <pbuf_alloced_custom+0x52>
 800965e:	a201      	add	r2, pc, #4	; (adr r2, 8009664 <pbuf_alloced_custom+0x20>)
 8009660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009664:	08009679 	.word	0x08009679
 8009668:	0800967f 	.word	0x0800967f
 800966c:	08009685 	.word	0x08009685
 8009670:	0800968b 	.word	0x0800968b
 8009674:	08009691 	.word	0x08009691
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8009678:	2336      	movs	r3, #54	; 0x36
 800967a:	81fb      	strh	r3, [r7, #14]
    break;
 800967c:	e014      	b.n	80096a8 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800967e:	2322      	movs	r3, #34	; 0x22
 8009680:	81fb      	strh	r3, [r7, #14]
    break;
 8009682:	e011      	b.n	80096a8 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8009684:	230e      	movs	r3, #14
 8009686:	81fb      	strh	r3, [r7, #14]
    break;
 8009688:	e00e      	b.n	80096a8 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800968a:	2300      	movs	r3, #0
 800968c:	81fb      	strh	r3, [r7, #14]
    break;
 800968e:	e00b      	b.n	80096a8 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 8009690:	2300      	movs	r3, #0
 8009692:	81fb      	strh	r3, [r7, #14]
    break;
 8009694:	e008      	b.n	80096a8 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 8009696:	4b1d      	ldr	r3, [pc, #116]	; (800970c <pbuf_alloced_custom+0xc8>)
 8009698:	f240 12c5 	movw	r2, #453	; 0x1c5
 800969c:	491c      	ldr	r1, [pc, #112]	; (8009710 <pbuf_alloced_custom+0xcc>)
 800969e:	481d      	ldr	r0, [pc, #116]	; (8009714 <pbuf_alloced_custom+0xd0>)
 80096a0:	f00e fe40 	bl	8018324 <iprintf>
    return NULL;
 80096a4:	2300      	movs	r3, #0
 80096a6:	e02d      	b.n	8009704 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80096a8:	89fb      	ldrh	r3, [r7, #14]
 80096aa:	3303      	adds	r3, #3
 80096ac:	f023 0203 	bic.w	r2, r3, #3
 80096b0:	88bb      	ldrh	r3, [r7, #4]
 80096b2:	441a      	add	r2, r3
 80096b4:	8bbb      	ldrh	r3, [r7, #28]
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d901      	bls.n	80096be <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\r\n", length));
    return NULL;
 80096ba:	2300      	movs	r3, #0
 80096bc:	e022      	b.n	8009704 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	2200      	movs	r2, #0
 80096c2:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 80096c4:	69bb      	ldr	r3, [r7, #24]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d008      	beq.n	80096dc <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80096ca:	89fb      	ldrh	r3, [r7, #14]
 80096cc:	3303      	adds	r3, #3
 80096ce:	f023 0303 	bic.w	r3, r3, #3
 80096d2:	69ba      	ldr	r2, [r7, #24]
 80096d4:	441a      	add	r2, r3
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	605a      	str	r2, [r3, #4]
 80096da:	e002      	b.n	80096e2 <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	2200      	movs	r2, #0
 80096e0:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	2202      	movs	r2, #2
 80096e6:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	88ba      	ldrh	r2, [r7, #4]
 80096ec:	811a      	strh	r2, [r3, #8]
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	891a      	ldrh	r2, [r3, #8]
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	79ba      	ldrb	r2, [r7, #6]
 80096fa:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	2201      	movs	r2, #1
 8009700:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8009702:	683b      	ldr	r3, [r7, #0]
}
 8009704:	4618      	mov	r0, r3
 8009706:	3710      	adds	r7, #16
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}
 800970c:	080198c4 	.word	0x080198c4
 8009710:	08019a5c 	.word	0x08019a5c
 8009714:	08019910 	.word	0x08019910

08009718 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b086      	sub	sp, #24
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	460b      	mov	r3, r1
 8009722:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d106      	bne.n	8009738 <pbuf_realloc+0x20>
 800972a:	4b4b      	ldr	r3, [pc, #300]	; (8009858 <pbuf_realloc+0x140>)
 800972c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8009730:	494a      	ldr	r1, [pc, #296]	; (800985c <pbuf_realloc+0x144>)
 8009732:	484b      	ldr	r0, [pc, #300]	; (8009860 <pbuf_realloc+0x148>)
 8009734:	f00e fdf6 	bl	8018324 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	7b1b      	ldrb	r3, [r3, #12]
 800973c:	2b03      	cmp	r3, #3
 800973e:	d012      	beq.n	8009766 <pbuf_realloc+0x4e>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	7b1b      	ldrb	r3, [r3, #12]
 8009744:	2b01      	cmp	r3, #1
 8009746:	d00e      	beq.n	8009766 <pbuf_realloc+0x4e>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	7b1b      	ldrb	r3, [r3, #12]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d00a      	beq.n	8009766 <pbuf_realloc+0x4e>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	7b1b      	ldrb	r3, [r3, #12]
 8009754:	2b02      	cmp	r3, #2
 8009756:	d006      	beq.n	8009766 <pbuf_realloc+0x4e>
 8009758:	4b3f      	ldr	r3, [pc, #252]	; (8009858 <pbuf_realloc+0x140>)
 800975a:	f240 12f7 	movw	r2, #503	; 0x1f7
 800975e:	4941      	ldr	r1, [pc, #260]	; (8009864 <pbuf_realloc+0x14c>)
 8009760:	483f      	ldr	r0, [pc, #252]	; (8009860 <pbuf_realloc+0x148>)
 8009762:	f00e fddf 	bl	8018324 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	891b      	ldrh	r3, [r3, #8]
 800976a:	887a      	ldrh	r2, [r7, #2]
 800976c:	429a      	cmp	r2, r3
 800976e:	d26f      	bcs.n	8009850 <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 8009770:	887b      	ldrh	r3, [r7, #2]
 8009772:	687a      	ldr	r2, [r7, #4]
 8009774:	8912      	ldrh	r2, [r2, #8]
 8009776:	1a9b      	subs	r3, r3, r2
 8009778:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800977a:	887b      	ldrh	r3, [r7, #2]
 800977c:	827b      	strh	r3, [r7, #18]
  q = p;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8009782:	e025      	b.n	80097d0 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	895b      	ldrh	r3, [r3, #10]
 8009788:	8a7a      	ldrh	r2, [r7, #18]
 800978a:	1ad3      	subs	r3, r2, r3
 800978c:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009794:	4293      	cmp	r3, r2
 8009796:	dd06      	ble.n	80097a6 <pbuf_realloc+0x8e>
 8009798:	4b2f      	ldr	r3, [pc, #188]	; (8009858 <pbuf_realloc+0x140>)
 800979a:	f240 220b 	movw	r2, #523	; 0x20b
 800979e:	4932      	ldr	r1, [pc, #200]	; (8009868 <pbuf_realloc+0x150>)
 80097a0:	482f      	ldr	r0, [pc, #188]	; (8009860 <pbuf_realloc+0x148>)
 80097a2:	f00e fdbf 	bl	8018324 <iprintf>
    q->tot_len += (u16_t)grow;
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	891a      	ldrh	r2, [r3, #8]
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	b29b      	uxth	r3, r3
 80097ae:	4413      	add	r3, r2
 80097b0:	b29a      	uxth	r2, r3
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d106      	bne.n	80097d0 <pbuf_realloc+0xb8>
 80097c2:	4b25      	ldr	r3, [pc, #148]	; (8009858 <pbuf_realloc+0x140>)
 80097c4:	f240 220f 	movw	r2, #527	; 0x20f
 80097c8:	4928      	ldr	r1, [pc, #160]	; (800986c <pbuf_realloc+0x154>)
 80097ca:	4825      	ldr	r0, [pc, #148]	; (8009860 <pbuf_realloc+0x148>)
 80097cc:	f00e fdaa 	bl	8018324 <iprintf>
  while (rem_len > q->len) {
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	895b      	ldrh	r3, [r3, #10]
 80097d4:	8a7a      	ldrh	r2, [r7, #18]
 80097d6:	429a      	cmp	r2, r3
 80097d8:	d8d4      	bhi.n	8009784 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	7b1b      	ldrb	r3, [r3, #12]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d122      	bne.n	8009828 <pbuf_realloc+0x110>
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	895b      	ldrh	r3, [r3, #10]
 80097e6:	8a7a      	ldrh	r2, [r7, #18]
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d01d      	beq.n	8009828 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	7b5b      	ldrb	r3, [r3, #13]
 80097f0:	f003 0302 	and.w	r3, r3, #2
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d117      	bne.n	8009828 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	685b      	ldr	r3, [r3, #4]
 80097fc:	461a      	mov	r2, r3
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	1ad3      	subs	r3, r2, r3
 8009802:	b29a      	uxth	r2, r3
 8009804:	8a7b      	ldrh	r3, [r7, #18]
 8009806:	4413      	add	r3, r2
 8009808:	b29b      	uxth	r3, r3
 800980a:	4619      	mov	r1, r3
 800980c:	6978      	ldr	r0, [r7, #20]
 800980e:	f7ff f8db 	bl	80089c8 <mem_trim>
 8009812:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8009814:	697b      	ldr	r3, [r7, #20]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d106      	bne.n	8009828 <pbuf_realloc+0x110>
 800981a:	4b0f      	ldr	r3, [pc, #60]	; (8009858 <pbuf_realloc+0x140>)
 800981c:	f240 221d 	movw	r2, #541	; 0x21d
 8009820:	4913      	ldr	r1, [pc, #76]	; (8009870 <pbuf_realloc+0x158>)
 8009822:	480f      	ldr	r0, [pc, #60]	; (8009860 <pbuf_realloc+0x148>)
 8009824:	f00e fd7e 	bl	8018324 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8009828:	697b      	ldr	r3, [r7, #20]
 800982a:	8a7a      	ldrh	r2, [r7, #18]
 800982c:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	895a      	ldrh	r2, [r3, #10]
 8009832:	697b      	ldr	r3, [r7, #20]
 8009834:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d004      	beq.n	8009848 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4618      	mov	r0, r3
 8009844:	f000 f8dc 	bl	8009a00 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8009848:	697b      	ldr	r3, [r7, #20]
 800984a:	2200      	movs	r2, #0
 800984c:	601a      	str	r2, [r3, #0]
 800984e:	e000      	b.n	8009852 <pbuf_realloc+0x13a>
    return;
 8009850:	bf00      	nop

}
 8009852:	3718      	adds	r7, #24
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}
 8009858:	080198c4 	.word	0x080198c4
 800985c:	08019a80 	.word	0x08019a80
 8009860:	08019910 	.word	0x08019910
 8009864:	08019a98 	.word	0x08019a98
 8009868:	08019ab4 	.word	0x08019ab4
 800986c:	08019ac8 	.word	0x08019ac8
 8009870:	08019ae0 	.word	0x08019ae0

08009874 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b084      	sub	sp, #16
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	460b      	mov	r3, r1
 800987e:	807b      	strh	r3, [r7, #2]
 8009880:	4613      	mov	r3, r2
 8009882:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d106      	bne.n	8009898 <pbuf_header_impl+0x24>
 800988a:	4b46      	ldr	r3, [pc, #280]	; (80099a4 <pbuf_header_impl+0x130>)
 800988c:	f240 223f 	movw	r2, #575	; 0x23f
 8009890:	4945      	ldr	r1, [pc, #276]	; (80099a8 <pbuf_header_impl+0x134>)
 8009892:	4846      	ldr	r0, [pc, #280]	; (80099ac <pbuf_header_impl+0x138>)
 8009894:	f00e fd46 	bl	8018324 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 8009898:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d002      	beq.n	80098a6 <pbuf_header_impl+0x32>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d101      	bne.n	80098aa <pbuf_header_impl+0x36>
    return 0;
 80098a6:	2300      	movs	r3, #0
 80098a8:	e078      	b.n	800999c <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 80098aa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	da10      	bge.n	80098d4 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 80098b2:	887b      	ldrh	r3, [r7, #2]
 80098b4:	425b      	negs	r3, r3
 80098b6:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	895b      	ldrh	r3, [r3, #10]
 80098bc:	89fa      	ldrh	r2, [r7, #14]
 80098be:	429a      	cmp	r2, r3
 80098c0:	d90a      	bls.n	80098d8 <pbuf_header_impl+0x64>
 80098c2:	4b38      	ldr	r3, [pc, #224]	; (80099a4 <pbuf_header_impl+0x130>)
 80098c4:	f240 2247 	movw	r2, #583	; 0x247
 80098c8:	4939      	ldr	r1, [pc, #228]	; (80099b0 <pbuf_header_impl+0x13c>)
 80098ca:	4838      	ldr	r0, [pc, #224]	; (80099ac <pbuf_header_impl+0x138>)
 80098cc:	f00e fd2a 	bl	8018324 <iprintf>
 80098d0:	2301      	movs	r3, #1
 80098d2:	e063      	b.n	800999c <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 80098d4:	887b      	ldrh	r3, [r7, #2]
 80098d6:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	7b1b      	ldrb	r3, [r3, #12]
 80098dc:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 80098e4:	89bb      	ldrh	r3, [r7, #12]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d002      	beq.n	80098f0 <pbuf_header_impl+0x7c>
 80098ea:	89bb      	ldrh	r3, [r7, #12]
 80098ec:	2b03      	cmp	r3, #3
 80098ee:	d112      	bne.n	8009916 <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	685a      	ldr	r2, [r3, #4]
 80098f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80098f8:	425b      	negs	r3, r3
 80098fa:	441a      	add	r2, r3
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	685a      	ldr	r2, [r3, #4]
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	3318      	adds	r3, #24
 8009908:	429a      	cmp	r2, r3
 800990a:	d238      	bcs.n	800997e <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\r\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	68ba      	ldr	r2, [r7, #8]
 8009910:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 8009912:	2301      	movs	r3, #1
 8009914:	e042      	b.n	800999c <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8009916:	89bb      	ldrh	r3, [r7, #12]
 8009918:	2b02      	cmp	r3, #2
 800991a:	d002      	beq.n	8009922 <pbuf_header_impl+0xae>
 800991c:	89bb      	ldrh	r3, [r7, #12]
 800991e:	2b01      	cmp	r3, #1
 8009920:	d124      	bne.n	800996c <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8009922:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009926:	2b00      	cmp	r3, #0
 8009928:	da0d      	bge.n	8009946 <pbuf_header_impl+0xd2>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	895b      	ldrh	r3, [r3, #10]
 800992e:	89fa      	ldrh	r2, [r7, #14]
 8009930:	429a      	cmp	r2, r3
 8009932:	d808      	bhi.n	8009946 <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	685a      	ldr	r2, [r3, #4]
 8009938:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800993c:	425b      	negs	r3, r3
 800993e:	441a      	add	r2, r3
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	605a      	str	r2, [r3, #4]
 8009944:	e011      	b.n	800996a <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 8009946:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800994a:	2b00      	cmp	r3, #0
 800994c:	dd0b      	ble.n	8009966 <pbuf_header_impl+0xf2>
 800994e:	787b      	ldrb	r3, [r7, #1]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d008      	beq.n	8009966 <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	685a      	ldr	r2, [r3, #4]
 8009958:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800995c:	425b      	negs	r3, r3
 800995e:	441a      	add	r2, r3
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	605a      	str	r2, [r3, #4]
 8009964:	e001      	b.n	800996a <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8009966:	2301      	movs	r3, #1
 8009968:	e018      	b.n	800999c <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800996a:	e008      	b.n	800997e <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 800996c:	4b0d      	ldr	r3, [pc, #52]	; (80099a4 <pbuf_header_impl+0x130>)
 800996e:	f240 2277 	movw	r2, #631	; 0x277
 8009972:	4910      	ldr	r1, [pc, #64]	; (80099b4 <pbuf_header_impl+0x140>)
 8009974:	480d      	ldr	r0, [pc, #52]	; (80099ac <pbuf_header_impl+0x138>)
 8009976:	f00e fcd5 	bl	8018324 <iprintf>
    return 1;
 800997a:	2301      	movs	r3, #1
 800997c:	e00e      	b.n	800999c <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	895a      	ldrh	r2, [r3, #10]
 8009982:	887b      	ldrh	r3, [r7, #2]
 8009984:	4413      	add	r3, r2
 8009986:	b29a      	uxth	r2, r3
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	891a      	ldrh	r2, [r3, #8]
 8009990:	887b      	ldrh	r3, [r7, #2]
 8009992:	4413      	add	r3, r2
 8009994:	b29a      	uxth	r2, r3
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\r\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800999a:	2300      	movs	r3, #0
}
 800999c:	4618      	mov	r0, r3
 800999e:	3710      	adds	r7, #16
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}
 80099a4:	080198c4 	.word	0x080198c4
 80099a8:	08019afc 	.word	0x08019afc
 80099ac:	08019910 	.word	0x08019910
 80099b0:	08019b08 	.word	0x08019b08
 80099b4:	08019b28 	.word	0x08019b28

080099b8 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b082      	sub	sp, #8
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	460b      	mov	r3, r1
 80099c2:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 80099c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80099c8:	2200      	movs	r2, #0
 80099ca:	4619      	mov	r1, r3
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f7ff ff51 	bl	8009874 <pbuf_header_impl>
 80099d2:	4603      	mov	r3, r0
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3708      	adds	r7, #8
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b082      	sub	sp, #8
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	460b      	mov	r3, r1
 80099e6:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 80099e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80099ec:	2201      	movs	r2, #1
 80099ee:	4619      	mov	r1, r3
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f7ff ff3f 	bl	8009874 <pbuf_header_impl>
 80099f6:	4603      	mov	r3, r0
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3708      	adds	r7, #8
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}

08009a00 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b088      	sub	sp, #32
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d10b      	bne.n	8009a26 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d106      	bne.n	8009a22 <pbuf_free+0x22>
 8009a14:	4b41      	ldr	r3, [pc, #260]	; (8009b1c <pbuf_free+0x11c>)
 8009a16:	f240 22d2 	movw	r2, #722	; 0x2d2
 8009a1a:	4941      	ldr	r1, [pc, #260]	; (8009b20 <pbuf_free+0x120>)
 8009a1c:	4841      	ldr	r0, [pc, #260]	; (8009b24 <pbuf_free+0x124>)
 8009a1e:	f00e fc81 	bl	8018324 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\r\n"));
    return 0;
 8009a22:	2300      	movs	r3, #0
 8009a24:	e076      	b.n	8009b14 <pbuf_free+0x114>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\r\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	7b1b      	ldrb	r3, [r3, #12]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d012      	beq.n	8009a54 <pbuf_free+0x54>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	7b1b      	ldrb	r3, [r3, #12]
 8009a32:	2b01      	cmp	r3, #1
 8009a34:	d00e      	beq.n	8009a54 <pbuf_free+0x54>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	7b1b      	ldrb	r3, [r3, #12]
 8009a3a:	2b02      	cmp	r3, #2
 8009a3c:	d00a      	beq.n	8009a54 <pbuf_free+0x54>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	7b1b      	ldrb	r3, [r3, #12]
 8009a42:	2b03      	cmp	r3, #3
 8009a44:	d006      	beq.n	8009a54 <pbuf_free+0x54>
 8009a46:	4b35      	ldr	r3, [pc, #212]	; (8009b1c <pbuf_free+0x11c>)
 8009a48:	f240 22de 	movw	r2, #734	; 0x2de
 8009a4c:	4936      	ldr	r1, [pc, #216]	; (8009b28 <pbuf_free+0x128>)
 8009a4e:	4835      	ldr	r0, [pc, #212]	; (8009b24 <pbuf_free+0x124>)
 8009a50:	f00e fc68 	bl	8018324 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 8009a54:	2300      	movs	r3, #0
 8009a56:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8009a58:	e058      	b.n	8009b0c <pbuf_free+0x10c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8009a5a:	f009 ff57 	bl	801390c <sys_arch_protect>
 8009a5e:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	89db      	ldrh	r3, [r3, #14]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d106      	bne.n	8009a76 <pbuf_free+0x76>
 8009a68:	4b2c      	ldr	r3, [pc, #176]	; (8009b1c <pbuf_free+0x11c>)
 8009a6a:	f240 22eb 	movw	r2, #747	; 0x2eb
 8009a6e:	492f      	ldr	r1, [pc, #188]	; (8009b2c <pbuf_free+0x12c>)
 8009a70:	482c      	ldr	r0, [pc, #176]	; (8009b24 <pbuf_free+0x124>)
 8009a72:	f00e fc57 	bl	8018324 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	89db      	ldrh	r3, [r3, #14]
 8009a7a:	3b01      	subs	r3, #1
 8009a7c:	b29a      	uxth	r2, r3
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	81da      	strh	r2, [r3, #14]
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	89db      	ldrh	r3, [r3, #14]
 8009a86:	82fb      	strh	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
 8009a88:	69b8      	ldr	r0, [r7, #24]
 8009a8a:	f009 ff4d 	bl	8013928 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8009a8e:	8afb      	ldrh	r3, [r7, #22]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d139      	bne.n	8009b08 <pbuf_free+0x108>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\r\n", (void *)p));
      type = p->type;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	7b1b      	ldrb	r3, [r3, #12]
 8009a9e:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	7b5b      	ldrb	r3, [r3, #13]
 8009aa4:	f003 0302 	and.w	r3, r3, #2
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d011      	beq.n	8009ad0 <pbuf_free+0xd0>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	699b      	ldr	r3, [r3, #24]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d106      	bne.n	8009ac6 <pbuf_free+0xc6>
 8009ab8:	4b18      	ldr	r3, [pc, #96]	; (8009b1c <pbuf_free+0x11c>)
 8009aba:	f240 22f9 	movw	r2, #761	; 0x2f9
 8009abe:	491c      	ldr	r1, [pc, #112]	; (8009b30 <pbuf_free+0x130>)
 8009ac0:	4818      	ldr	r0, [pc, #96]	; (8009b24 <pbuf_free+0x124>)
 8009ac2:	f00e fc2f 	bl	8018324 <iprintf>
        pc->custom_free_function(p);
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	699b      	ldr	r3, [r3, #24]
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	4798      	blx	r3
 8009ace:	e015      	b.n	8009afc <pbuf_free+0xfc>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 8009ad0:	89fb      	ldrh	r3, [r7, #14]
 8009ad2:	2b03      	cmp	r3, #3
 8009ad4:	d104      	bne.n	8009ae0 <pbuf_free+0xe0>
          memp_free(MEMP_PBUF_POOL, p);
 8009ad6:	6879      	ldr	r1, [r7, #4]
 8009ad8:	200e      	movs	r0, #14
 8009ada:	f7ff fa1f 	bl	8008f1c <memp_free>
 8009ade:	e00d      	b.n	8009afc <pbuf_free+0xfc>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8009ae0:	89fb      	ldrh	r3, [r7, #14]
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	d002      	beq.n	8009aec <pbuf_free+0xec>
 8009ae6:	89fb      	ldrh	r3, [r7, #14]
 8009ae8:	2b02      	cmp	r3, #2
 8009aea:	d104      	bne.n	8009af6 <pbuf_free+0xf6>
          memp_free(MEMP_PBUF, p);
 8009aec:	6879      	ldr	r1, [r7, #4]
 8009aee:	200d      	movs	r0, #13
 8009af0:	f7ff fa14 	bl	8008f1c <memp_free>
 8009af4:	e002      	b.n	8009afc <pbuf_free+0xfc>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f7fe fef8 	bl	80088ec <mem_free>
        }
      }
      count++;
 8009afc:	7ffb      	ldrb	r3, [r7, #31]
 8009afe:	3301      	adds	r3, #1
 8009b00:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8009b02:	693b      	ldr	r3, [r7, #16]
 8009b04:	607b      	str	r3, [r7, #4]
 8009b06:	e001      	b.n	8009b0c <pbuf_free+0x10c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\r\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d1a3      	bne.n	8009a5a <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8009b12:	7ffb      	ldrb	r3, [r7, #31]
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	3720      	adds	r7, #32
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}
 8009b1c:	080198c4 	.word	0x080198c4
 8009b20:	08019afc 	.word	0x08019afc
 8009b24:	08019910 	.word	0x08019910
 8009b28:	08019b38 	.word	0x08019b38
 8009b2c:	08019b50 	.word	0x08019b50
 8009b30:	08019b68 	.word	0x08019b68

08009b34 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b085      	sub	sp, #20
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8009b40:	e005      	b.n	8009b4e <pbuf_clen+0x1a>
    ++len;
 8009b42:	89fb      	ldrh	r3, [r7, #14]
 8009b44:	3301      	adds	r3, #1
 8009b46:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d1f6      	bne.n	8009b42 <pbuf_clen+0xe>
  }
  return len;
 8009b54:	89fb      	ldrh	r3, [r7, #14]
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3714      	adds	r7, #20
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bc80      	pop	{r7}
 8009b5e:	4770      	bx	lr

08009b60 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d016      	beq.n	8009b9c <pbuf_ref+0x3c>
    SYS_ARCH_INC(p->ref, 1);
 8009b6e:	f009 fecd 	bl	801390c <sys_arch_protect>
 8009b72:	60f8      	str	r0, [r7, #12]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	89db      	ldrh	r3, [r3, #14]
 8009b78:	3301      	adds	r3, #1
 8009b7a:	b29a      	uxth	r2, r3
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	81da      	strh	r2, [r3, #14]
 8009b80:	68f8      	ldr	r0, [r7, #12]
 8009b82:	f009 fed1 	bl	8013928 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	89db      	ldrh	r3, [r3, #14]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d106      	bne.n	8009b9c <pbuf_ref+0x3c>
 8009b8e:	4b05      	ldr	r3, [pc, #20]	; (8009ba4 <pbuf_ref+0x44>)
 8009b90:	f240 3239 	movw	r2, #825	; 0x339
 8009b94:	4904      	ldr	r1, [pc, #16]	; (8009ba8 <pbuf_ref+0x48>)
 8009b96:	4805      	ldr	r0, [pc, #20]	; (8009bac <pbuf_ref+0x4c>)
 8009b98:	f00e fbc4 	bl	8018324 <iprintf>
  }
}
 8009b9c:	bf00      	nop
 8009b9e:	3710      	adds	r7, #16
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}
 8009ba4:	080198c4 	.word	0x080198c4
 8009ba8:	08019b8c 	.word	0x08019b8c
 8009bac:	08019910 	.word	0x08019910

08009bb0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b084      	sub	sp, #16
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
 8009bb8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d002      	beq.n	8009bc6 <pbuf_cat+0x16>
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d107      	bne.n	8009bd6 <pbuf_cat+0x26>
 8009bc6:	4b20      	ldr	r3, [pc, #128]	; (8009c48 <pbuf_cat+0x98>)
 8009bc8:	f240 324d 	movw	r2, #845	; 0x34d
 8009bcc:	491f      	ldr	r1, [pc, #124]	; (8009c4c <pbuf_cat+0x9c>)
 8009bce:	4820      	ldr	r0, [pc, #128]	; (8009c50 <pbuf_cat+0xa0>)
 8009bd0:	f00e fba8 	bl	8018324 <iprintf>
 8009bd4:	e034      	b.n	8009c40 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	60fb      	str	r3, [r7, #12]
 8009bda:	e00a      	b.n	8009bf2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	891a      	ldrh	r2, [r3, #8]
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	891b      	ldrh	r3, [r3, #8]
 8009be4:	4413      	add	r3, r2
 8009be6:	b29a      	uxth	r2, r3
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	60fb      	str	r3, [r7, #12]
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d1f0      	bne.n	8009bdc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	891a      	ldrh	r2, [r3, #8]
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	895b      	ldrh	r3, [r3, #10]
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d006      	beq.n	8009c14 <pbuf_cat+0x64>
 8009c06:	4b10      	ldr	r3, [pc, #64]	; (8009c48 <pbuf_cat+0x98>)
 8009c08:	f240 3255 	movw	r2, #853	; 0x355
 8009c0c:	4911      	ldr	r1, [pc, #68]	; (8009c54 <pbuf_cat+0xa4>)
 8009c0e:	4810      	ldr	r0, [pc, #64]	; (8009c50 <pbuf_cat+0xa0>)
 8009c10:	f00e fb88 	bl	8018324 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d006      	beq.n	8009c2a <pbuf_cat+0x7a>
 8009c1c:	4b0a      	ldr	r3, [pc, #40]	; (8009c48 <pbuf_cat+0x98>)
 8009c1e:	f240 3256 	movw	r2, #854	; 0x356
 8009c22:	490d      	ldr	r1, [pc, #52]	; (8009c58 <pbuf_cat+0xa8>)
 8009c24:	480a      	ldr	r0, [pc, #40]	; (8009c50 <pbuf_cat+0xa0>)
 8009c26:	f00e fb7d 	bl	8018324 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	891a      	ldrh	r2, [r3, #8]
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	891b      	ldrh	r3, [r3, #8]
 8009c32:	4413      	add	r3, r2
 8009c34:	b29a      	uxth	r2, r3
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	683a      	ldr	r2, [r7, #0]
 8009c3e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8009c40:	3710      	adds	r7, #16
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	080198c4 	.word	0x080198c4
 8009c4c:	08019ba0 	.word	0x08019ba0
 8009c50:	08019910 	.word	0x08019910
 8009c54:	08019bd8 	.word	0x08019bd8
 8009c58:	08019c08 	.word	0x08019c08

08009c5c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b082      	sub	sp, #8
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8009c66:	6839      	ldr	r1, [r7, #0]
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f7ff ffa1 	bl	8009bb0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8009c6e:	6838      	ldr	r0, [r7, #0]
 8009c70:	f7ff ff76 	bl	8009b60 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\r\n", (void *)h, (void *)t));
}
 8009c74:	bf00      	nop
 8009c76:	3708      	adds	r7, #8
 8009c78:	46bd      	mov	sp, r7
 8009c7a:	bd80      	pop	{r7, pc}

08009c7c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b084      	sub	sp, #16
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
 8009c84:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 8009c86:	2300      	movs	r3, #0
 8009c88:	81fb      	strh	r3, [r7, #14]
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\r\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d008      	beq.n	8009ca6 <pbuf_copy+0x2a>
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d005      	beq.n	8009ca6 <pbuf_copy+0x2a>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	891a      	ldrh	r2, [r3, #8]
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	891b      	ldrh	r3, [r3, #8]
 8009ca2:	429a      	cmp	r2, r3
 8009ca4:	d209      	bcs.n	8009cba <pbuf_copy+0x3e>
 8009ca6:	4b54      	ldr	r3, [pc, #336]	; (8009df8 <pbuf_copy+0x17c>)
 8009ca8:	f240 32bd 	movw	r2, #957	; 0x3bd
 8009cac:	4953      	ldr	r1, [pc, #332]	; (8009dfc <pbuf_copy+0x180>)
 8009cae:	4854      	ldr	r0, [pc, #336]	; (8009e00 <pbuf_copy+0x184>)
 8009cb0:	f00e fb38 	bl	8018324 <iprintf>
 8009cb4:	f06f 030f 	mvn.w	r3, #15
 8009cb8:	e099      	b.n	8009dee <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	895b      	ldrh	r3, [r3, #10]
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	89fb      	ldrh	r3, [r7, #14]
 8009cc2:	1ad2      	subs	r2, r2, r3
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	895b      	ldrh	r3, [r3, #10]
 8009cc8:	4619      	mov	r1, r3
 8009cca:	89bb      	ldrh	r3, [r7, #12]
 8009ccc:	1acb      	subs	r3, r1, r3
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	db05      	blt.n	8009cde <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	895a      	ldrh	r2, [r3, #10]
 8009cd6:	89bb      	ldrh	r3, [r7, #12]
 8009cd8:	1ad3      	subs	r3, r2, r3
 8009cda:	817b      	strh	r3, [r7, #10]
 8009cdc:	e004      	b.n	8009ce8 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	895a      	ldrh	r2, [r3, #10]
 8009ce2:	89fb      	ldrh	r3, [r7, #14]
 8009ce4:	1ad3      	subs	r3, r2, r3
 8009ce6:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	685a      	ldr	r2, [r3, #4]
 8009cec:	89fb      	ldrh	r3, [r7, #14]
 8009cee:	18d0      	adds	r0, r2, r3
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	685a      	ldr	r2, [r3, #4]
 8009cf4:	89bb      	ldrh	r3, [r7, #12]
 8009cf6:	4413      	add	r3, r2
 8009cf8:	897a      	ldrh	r2, [r7, #10]
 8009cfa:	4619      	mov	r1, r3
 8009cfc:	f00e faff 	bl	80182fe <memcpy>
    offset_to += len;
 8009d00:	89fa      	ldrh	r2, [r7, #14]
 8009d02:	897b      	ldrh	r3, [r7, #10]
 8009d04:	4413      	add	r3, r2
 8009d06:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 8009d08:	89ba      	ldrh	r2, [r7, #12]
 8009d0a:	897b      	ldrh	r3, [r7, #10]
 8009d0c:	4413      	add	r3, r2
 8009d0e:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	895b      	ldrh	r3, [r3, #10]
 8009d14:	89fa      	ldrh	r2, [r7, #14]
 8009d16:	429a      	cmp	r2, r3
 8009d18:	d906      	bls.n	8009d28 <pbuf_copy+0xac>
 8009d1a:	4b37      	ldr	r3, [pc, #220]	; (8009df8 <pbuf_copy+0x17c>)
 8009d1c:	f240 32cd 	movw	r2, #973	; 0x3cd
 8009d20:	4938      	ldr	r1, [pc, #224]	; (8009e04 <pbuf_copy+0x188>)
 8009d22:	4837      	ldr	r0, [pc, #220]	; (8009e00 <pbuf_copy+0x184>)
 8009d24:	f00e fafe 	bl	8018324 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	895b      	ldrh	r3, [r3, #10]
 8009d2c:	89ba      	ldrh	r2, [r7, #12]
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d906      	bls.n	8009d40 <pbuf_copy+0xc4>
 8009d32:	4b31      	ldr	r3, [pc, #196]	; (8009df8 <pbuf_copy+0x17c>)
 8009d34:	f240 32ce 	movw	r2, #974	; 0x3ce
 8009d38:	4933      	ldr	r1, [pc, #204]	; (8009e08 <pbuf_copy+0x18c>)
 8009d3a:	4831      	ldr	r0, [pc, #196]	; (8009e00 <pbuf_copy+0x184>)
 8009d3c:	f00e faf2 	bl	8018324 <iprintf>
    if (offset_from >= p_from->len) {
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	895b      	ldrh	r3, [r3, #10]
 8009d44:	89ba      	ldrh	r2, [r7, #12]
 8009d46:	429a      	cmp	r2, r3
 8009d48:	d304      	bcc.n	8009d54 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	895b      	ldrh	r3, [r3, #10]
 8009d58:	89fa      	ldrh	r2, [r7, #14]
 8009d5a:	429a      	cmp	r2, r3
 8009d5c:	d114      	bne.n	8009d88 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d10c      	bne.n	8009d88 <pbuf_copy+0x10c>
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d009      	beq.n	8009d88 <pbuf_copy+0x10c>
 8009d74:	4b20      	ldr	r3, [pc, #128]	; (8009df8 <pbuf_copy+0x17c>)
 8009d76:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8009d7a:	4924      	ldr	r1, [pc, #144]	; (8009e0c <pbuf_copy+0x190>)
 8009d7c:	4820      	ldr	r0, [pc, #128]	; (8009e00 <pbuf_copy+0x184>)
 8009d7e:	f00e fad1 	bl	8018324 <iprintf>
 8009d82:	f06f 030f 	mvn.w	r3, #15
 8009d86:	e032      	b.n	8009dee <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d013      	beq.n	8009db6 <pbuf_copy+0x13a>
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	895a      	ldrh	r2, [r3, #10]
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	891b      	ldrh	r3, [r3, #8]
 8009d96:	429a      	cmp	r2, r3
 8009d98:	d10d      	bne.n	8009db6 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d009      	beq.n	8009db6 <pbuf_copy+0x13a>
 8009da2:	4b15      	ldr	r3, [pc, #84]	; (8009df8 <pbuf_copy+0x17c>)
 8009da4:	f240 32de 	movw	r2, #990	; 0x3de
 8009da8:	4919      	ldr	r1, [pc, #100]	; (8009e10 <pbuf_copy+0x194>)
 8009daa:	4815      	ldr	r0, [pc, #84]	; (8009e00 <pbuf_copy+0x184>)
 8009dac:	f00e faba 	bl	8018324 <iprintf>
 8009db0:	f06f 0305 	mvn.w	r3, #5
 8009db4:	e01b      	b.n	8009dee <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d013      	beq.n	8009de4 <pbuf_copy+0x168>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	895a      	ldrh	r2, [r3, #10]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	891b      	ldrh	r3, [r3, #8]
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	d10d      	bne.n	8009de4 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d009      	beq.n	8009de4 <pbuf_copy+0x168>
 8009dd0:	4b09      	ldr	r3, [pc, #36]	; (8009df8 <pbuf_copy+0x17c>)
 8009dd2:	f240 32e3 	movw	r2, #995	; 0x3e3
 8009dd6:	490e      	ldr	r1, [pc, #56]	; (8009e10 <pbuf_copy+0x194>)
 8009dd8:	4809      	ldr	r0, [pc, #36]	; (8009e00 <pbuf_copy+0x184>)
 8009dda:	f00e faa3 	bl	8018324 <iprintf>
 8009dde:	f06f 0305 	mvn.w	r3, #5
 8009de2:	e004      	b.n	8009dee <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	f47f af67 	bne.w	8009cba <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\r\n"));
  return ERR_OK;
 8009dec:	2300      	movs	r3, #0
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	3710      	adds	r7, #16
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}
 8009df6:	bf00      	nop
 8009df8:	080198c4 	.word	0x080198c4
 8009dfc:	08019c54 	.word	0x08019c54
 8009e00:	08019910 	.word	0x08019910
 8009e04:	08019c84 	.word	0x08019c84
 8009e08:	08019c9c 	.word	0x08019c9c
 8009e0c:	08019cb8 	.word	0x08019cb8
 8009e10:	08019cc8 	.word	0x08019cc8

08009e14 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b088      	sub	sp, #32
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	60f8      	str	r0, [r7, #12]
 8009e1c:	60b9      	str	r1, [r7, #8]
 8009e1e:	4611      	mov	r1, r2
 8009e20:	461a      	mov	r2, r3
 8009e22:	460b      	mov	r3, r1
 8009e24:	80fb      	strh	r3, [r7, #6]
 8009e26:	4613      	mov	r3, r2
 8009e28:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d108      	bne.n	8009e46 <pbuf_copy_partial+0x32>
 8009e34:	4b30      	ldr	r3, [pc, #192]	; (8009ef8 <pbuf_copy_partial+0xe4>)
 8009e36:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8009e3a:	4930      	ldr	r1, [pc, #192]	; (8009efc <pbuf_copy_partial+0xe8>)
 8009e3c:	4830      	ldr	r0, [pc, #192]	; (8009f00 <pbuf_copy_partial+0xec>)
 8009e3e:	f00e fa71 	bl	8018324 <iprintf>
 8009e42:	2300      	movs	r3, #0
 8009e44:	e054      	b.n	8009ef0 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d108      	bne.n	8009e5e <pbuf_copy_partial+0x4a>
 8009e4c:	4b2a      	ldr	r3, [pc, #168]	; (8009ef8 <pbuf_copy_partial+0xe4>)
 8009e4e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8009e52:	492c      	ldr	r1, [pc, #176]	; (8009f04 <pbuf_copy_partial+0xf0>)
 8009e54:	482a      	ldr	r0, [pc, #168]	; (8009f00 <pbuf_copy_partial+0xec>)
 8009e56:	f00e fa65 	bl	8018324 <iprintf>
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	e048      	b.n	8009ef0 <pbuf_copy_partial+0xdc>

  left = 0;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d002      	beq.n	8009e6e <pbuf_copy_partial+0x5a>
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d101      	bne.n	8009e72 <pbuf_copy_partial+0x5e>
    return 0;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	e03e      	b.n	8009ef0 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	61fb      	str	r3, [r7, #28]
 8009e76:	e034      	b.n	8009ee2 <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 8009e78:	88bb      	ldrh	r3, [r7, #4]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d00a      	beq.n	8009e94 <pbuf_copy_partial+0x80>
 8009e7e:	69fb      	ldr	r3, [r7, #28]
 8009e80:	895b      	ldrh	r3, [r3, #10]
 8009e82:	88ba      	ldrh	r2, [r7, #4]
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d305      	bcc.n	8009e94 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8009e88:	69fb      	ldr	r3, [r7, #28]
 8009e8a:	895b      	ldrh	r3, [r3, #10]
 8009e8c:	88ba      	ldrh	r2, [r7, #4]
 8009e8e:	1ad3      	subs	r3, r2, r3
 8009e90:	80bb      	strh	r3, [r7, #4]
 8009e92:	e023      	b.n	8009edc <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 8009e94:	69fb      	ldr	r3, [r7, #28]
 8009e96:	895a      	ldrh	r2, [r3, #10]
 8009e98:	88bb      	ldrh	r3, [r7, #4]
 8009e9a:	1ad3      	subs	r3, r2, r3
 8009e9c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8009e9e:	8b3a      	ldrh	r2, [r7, #24]
 8009ea0:	88fb      	ldrh	r3, [r7, #6]
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d901      	bls.n	8009eaa <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 8009ea6:	88fb      	ldrh	r3, [r7, #6]
 8009ea8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8009eaa:	8b7b      	ldrh	r3, [r7, #26]
 8009eac:	68ba      	ldr	r2, [r7, #8]
 8009eae:	18d0      	adds	r0, r2, r3
 8009eb0:	69fb      	ldr	r3, [r7, #28]
 8009eb2:	685a      	ldr	r2, [r3, #4]
 8009eb4:	88bb      	ldrh	r3, [r7, #4]
 8009eb6:	4413      	add	r3, r2
 8009eb8:	8b3a      	ldrh	r2, [r7, #24]
 8009eba:	4619      	mov	r1, r3
 8009ebc:	f00e fa1f 	bl	80182fe <memcpy>
      copied_total += buf_copy_len;
 8009ec0:	8afa      	ldrh	r2, [r7, #22]
 8009ec2:	8b3b      	ldrh	r3, [r7, #24]
 8009ec4:	4413      	add	r3, r2
 8009ec6:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 8009ec8:	8b7a      	ldrh	r2, [r7, #26]
 8009eca:	8b3b      	ldrh	r3, [r7, #24]
 8009ecc:	4413      	add	r3, r2
 8009ece:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 8009ed0:	88fa      	ldrh	r2, [r7, #6]
 8009ed2:	8b3b      	ldrh	r3, [r7, #24]
 8009ed4:	1ad3      	subs	r3, r2, r3
 8009ed6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009edc:	69fb      	ldr	r3, [r7, #28]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	61fb      	str	r3, [r7, #28]
 8009ee2:	88fb      	ldrh	r3, [r7, #6]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d002      	beq.n	8009eee <pbuf_copy_partial+0xda>
 8009ee8:	69fb      	ldr	r3, [r7, #28]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d1c4      	bne.n	8009e78 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 8009eee:	8afb      	ldrh	r3, [r7, #22]
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3720      	adds	r7, #32
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}
 8009ef8:	080198c4 	.word	0x080198c4
 8009efc:	08019cf4 	.word	0x08019cf4
 8009f00:	08019910 	.word	0x08019910
 8009f04:	08019d14 	.word	0x08019d14

08009f08 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf*
pbuf_skip_const(const struct pbuf* in, u16_t in_offset, u16_t* out_offset)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b087      	sub	sp, #28
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	60f8      	str	r0, [r7, #12]
 8009f10:	460b      	mov	r3, r1
 8009f12:	607a      	str	r2, [r7, #4]
 8009f14:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 8009f16:	897b      	ldrh	r3, [r7, #10]
 8009f18:	82fb      	strh	r3, [r7, #22]
  const struct pbuf* q = in;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 8009f1e:	e007      	b.n	8009f30 <pbuf_skip_const+0x28>
    offset_left -= q->len;
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	895b      	ldrh	r3, [r3, #10]
 8009f24:	8afa      	ldrh	r2, [r7, #22]
 8009f26:	1ad3      	subs	r3, r2, r3
 8009f28:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d004      	beq.n	8009f40 <pbuf_skip_const+0x38>
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	895b      	ldrh	r3, [r3, #10]
 8009f3a:	8afa      	ldrh	r2, [r7, #22]
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	d2ef      	bcs.n	8009f20 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d002      	beq.n	8009f4c <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	8afa      	ldrh	r2, [r7, #22]
 8009f4a:	801a      	strh	r2, [r3, #0]
  }
  return q;
 8009f4c:	693b      	ldr	r3, [r7, #16]
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	371c      	adds	r7, #28
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bc80      	pop	{r7}
 8009f56:	4770      	bx	lr

08009f58 <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf*
pbuf_skip(struct pbuf* in, u16_t in_offset, u16_t* out_offset)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b086      	sub	sp, #24
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	60f8      	str	r0, [r7, #12]
 8009f60:	460b      	mov	r3, r1
 8009f62:	607a      	str	r2, [r7, #4]
 8009f64:	817b      	strh	r3, [r7, #10]
  const struct pbuf* out = pbuf_skip_const(in, in_offset, out_offset);
 8009f66:	897b      	ldrh	r3, [r7, #10]
 8009f68:	687a      	ldr	r2, [r7, #4]
 8009f6a:	4619      	mov	r1, r3
 8009f6c:	68f8      	ldr	r0, [r7, #12]
 8009f6e:	f7ff ffcb 	bl	8009f08 <pbuf_skip_const>
 8009f72:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf*, out);
 8009f74:	697b      	ldr	r3, [r7, #20]
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3718      	adds	r7, #24
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}
	...

08009f80 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b088      	sub	sp, #32
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	60f8      	str	r0, [r7, #12]
 8009f88:	60b9      	str	r1, [r7, #8]
 8009f8a:	4613      	mov	r3, r2
 8009f8c:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  u16_t buf_copy_len;
  u16_t total_copy_len = len;
 8009f8e:	88fb      	ldrh	r3, [r7, #6]
 8009f90:	833b      	strh	r3, [r7, #24]
  u16_t copied_total = 0;
 8009f92:	2300      	movs	r3, #0
 8009f94:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d109      	bne.n	8009fb0 <pbuf_take+0x30>
 8009f9c:	4b3a      	ldr	r3, [pc, #232]	; (800a088 <pbuf_take+0x108>)
 8009f9e:	f240 4284 	movw	r2, #1156	; 0x484
 8009fa2:	493a      	ldr	r1, [pc, #232]	; (800a08c <pbuf_take+0x10c>)
 8009fa4:	483a      	ldr	r0, [pc, #232]	; (800a090 <pbuf_take+0x110>)
 8009fa6:	f00e f9bd 	bl	8018324 <iprintf>
 8009faa:	f06f 030f 	mvn.w	r3, #15
 8009fae:	e066      	b.n	800a07e <pbuf_take+0xfe>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d109      	bne.n	8009fca <pbuf_take+0x4a>
 8009fb6:	4b34      	ldr	r3, [pc, #208]	; (800a088 <pbuf_take+0x108>)
 8009fb8:	f240 4285 	movw	r2, #1157	; 0x485
 8009fbc:	4935      	ldr	r1, [pc, #212]	; (800a094 <pbuf_take+0x114>)
 8009fbe:	4834      	ldr	r0, [pc, #208]	; (800a090 <pbuf_take+0x110>)
 8009fc0:	f00e f9b0 	bl	8018324 <iprintf>
 8009fc4:	f06f 030f 	mvn.w	r3, #15
 8009fc8:	e059      	b.n	800a07e <pbuf_take+0xfe>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	891b      	ldrh	r3, [r3, #8]
 8009fce:	88fa      	ldrh	r2, [r7, #6]
 8009fd0:	429a      	cmp	r2, r3
 8009fd2:	d909      	bls.n	8009fe8 <pbuf_take+0x68>
 8009fd4:	4b2c      	ldr	r3, [pc, #176]	; (800a088 <pbuf_take+0x108>)
 8009fd6:	f240 4286 	movw	r2, #1158	; 0x486
 8009fda:	492f      	ldr	r1, [pc, #188]	; (800a098 <pbuf_take+0x118>)
 8009fdc:	482c      	ldr	r0, [pc, #176]	; (800a090 <pbuf_take+0x110>)
 8009fde:	f00e f9a1 	bl	8018324 <iprintf>
 8009fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8009fe6:	e04a      	b.n	800a07e <pbuf_take+0xfe>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d007      	beq.n	8009ffe <pbuf_take+0x7e>
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d004      	beq.n	8009ffe <pbuf_take+0x7e>
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	891b      	ldrh	r3, [r3, #8]
 8009ff8:	88fa      	ldrh	r2, [r7, #6]
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d902      	bls.n	800a004 <pbuf_take+0x84>
    return ERR_ARG;
 8009ffe:	f06f 030f 	mvn.w	r3, #15
 800a002:	e03c      	b.n	800a07e <pbuf_take+0xfe>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	61fb      	str	r3, [r7, #28]
 800a008:	e027      	b.n	800a05a <pbuf_take+0xda>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800a00a:	69fb      	ldr	r3, [r7, #28]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d106      	bne.n	800a01e <pbuf_take+0x9e>
 800a010:	4b1d      	ldr	r3, [pc, #116]	; (800a088 <pbuf_take+0x108>)
 800a012:	f240 428e 	movw	r2, #1166	; 0x48e
 800a016:	4921      	ldr	r1, [pc, #132]	; (800a09c <pbuf_take+0x11c>)
 800a018:	481d      	ldr	r0, [pc, #116]	; (800a090 <pbuf_take+0x110>)
 800a01a:	f00e f983 	bl	8018324 <iprintf>
    buf_copy_len = total_copy_len;
 800a01e:	8b3b      	ldrh	r3, [r7, #24]
 800a020:	837b      	strh	r3, [r7, #26]
    if (buf_copy_len > p->len) {
 800a022:	69fb      	ldr	r3, [r7, #28]
 800a024:	895b      	ldrh	r3, [r3, #10]
 800a026:	8b7a      	ldrh	r2, [r7, #26]
 800a028:	429a      	cmp	r2, r3
 800a02a:	d902      	bls.n	800a032 <pbuf_take+0xb2>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800a02c:	69fb      	ldr	r3, [r7, #28]
 800a02e:	895b      	ldrh	r3, [r3, #10]
 800a030:	837b      	strh	r3, [r7, #26]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char*)dataptr)[copied_total], buf_copy_len);
 800a032:	69fb      	ldr	r3, [r7, #28]
 800a034:	6858      	ldr	r0, [r3, #4]
 800a036:	8afb      	ldrh	r3, [r7, #22]
 800a038:	68ba      	ldr	r2, [r7, #8]
 800a03a:	4413      	add	r3, r2
 800a03c:	8b7a      	ldrh	r2, [r7, #26]
 800a03e:	4619      	mov	r1, r3
 800a040:	f00e f95d 	bl	80182fe <memcpy>
    total_copy_len -= buf_copy_len;
 800a044:	8b3a      	ldrh	r2, [r7, #24]
 800a046:	8b7b      	ldrh	r3, [r7, #26]
 800a048:	1ad3      	subs	r3, r2, r3
 800a04a:	833b      	strh	r3, [r7, #24]
    copied_total += buf_copy_len;
 800a04c:	8afa      	ldrh	r2, [r7, #22]
 800a04e:	8b7b      	ldrh	r3, [r7, #26]
 800a050:	4413      	add	r3, r2
 800a052:	82fb      	strh	r3, [r7, #22]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800a054:	69fb      	ldr	r3, [r7, #28]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	61fb      	str	r3, [r7, #28]
 800a05a:	8b3b      	ldrh	r3, [r7, #24]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d1d4      	bne.n	800a00a <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800a060:	8b3b      	ldrh	r3, [r7, #24]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d103      	bne.n	800a06e <pbuf_take+0xee>
 800a066:	8afa      	ldrh	r2, [r7, #22]
 800a068:	88fb      	ldrh	r3, [r7, #6]
 800a06a:	429a      	cmp	r2, r3
 800a06c:	d006      	beq.n	800a07c <pbuf_take+0xfc>
 800a06e:	4b06      	ldr	r3, [pc, #24]	; (800a088 <pbuf_take+0x108>)
 800a070:	f240 4299 	movw	r2, #1177	; 0x499
 800a074:	490a      	ldr	r1, [pc, #40]	; (800a0a0 <pbuf_take+0x120>)
 800a076:	4806      	ldr	r0, [pc, #24]	; (800a090 <pbuf_take+0x110>)
 800a078:	f00e f954 	bl	8018324 <iprintf>
  return ERR_OK;
 800a07c:	2300      	movs	r3, #0
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3720      	adds	r7, #32
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}
 800a086:	bf00      	nop
 800a088:	080198c4 	.word	0x080198c4
 800a08c:	08019d38 	.word	0x08019d38
 800a090:	08019910 	.word	0x08019910
 800a094:	08019d50 	.word	0x08019d50
 800a098:	08019d6c 	.word	0x08019d6c
 800a09c:	08019d8c 	.word	0x08019d8c
 800a0a0:	08019da4 	.word	0x08019da4

0800a0a4 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b088      	sub	sp, #32
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	60f8      	str	r0, [r7, #12]
 800a0ac:	60b9      	str	r1, [r7, #8]
 800a0ae:	4611      	mov	r1, r2
 800a0b0:	461a      	mov	r2, r3
 800a0b2:	460b      	mov	r3, r1
 800a0b4:	80fb      	strh	r3, [r7, #6]
 800a0b6:	4613      	mov	r3, r2
 800a0b8:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf* q = pbuf_skip(buf, offset, &target_offset);
 800a0ba:	f107 0210 	add.w	r2, r7, #16
 800a0be:	88bb      	ldrh	r3, [r7, #4]
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	68f8      	ldr	r0, [r7, #12]
 800a0c4:	f7ff ff48 	bl	8009f58 <pbuf_skip>
 800a0c8:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 800a0ca:	69fb      	ldr	r3, [r7, #28]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d035      	beq.n	800a13c <pbuf_take_at+0x98>
 800a0d0:	69fb      	ldr	r3, [r7, #28]
 800a0d2:	891b      	ldrh	r3, [r3, #8]
 800a0d4:	461a      	mov	r2, r3
 800a0d6:	8a3b      	ldrh	r3, [r7, #16]
 800a0d8:	4619      	mov	r1, r3
 800a0da:	88fb      	ldrh	r3, [r7, #6]
 800a0dc:	440b      	add	r3, r1
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	db2c      	blt.n	800a13c <pbuf_take_at+0x98>
    u16_t remaining_len = len;
 800a0e2:	88fb      	ldrh	r3, [r7, #6]
 800a0e4:	837b      	strh	r3, [r7, #26]
    const u8_t* src_ptr = (const u8_t*)dataptr;
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len = LWIP_MIN(q->len - target_offset, len);
 800a0ea:	88fa      	ldrh	r2, [r7, #6]
 800a0ec:	69fb      	ldr	r3, [r7, #28]
 800a0ee:	895b      	ldrh	r3, [r3, #10]
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	8a3b      	ldrh	r3, [r7, #16]
 800a0f4:	1acb      	subs	r3, r1, r3
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	bfa8      	it	ge
 800a0fa:	4613      	movge	r3, r2
 800a0fc:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t*)q->payload) + target_offset, dataptr, first_copy_len);
 800a0fe:	69fb      	ldr	r3, [r7, #28]
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	8a3a      	ldrh	r2, [r7, #16]
 800a104:	4413      	add	r3, r2
 800a106:	8a7a      	ldrh	r2, [r7, #18]
 800a108:	68b9      	ldr	r1, [r7, #8]
 800a10a:	4618      	mov	r0, r3
 800a10c:	f00e f8f7 	bl	80182fe <memcpy>
    remaining_len -= first_copy_len;
 800a110:	8b7a      	ldrh	r2, [r7, #26]
 800a112:	8a7b      	ldrh	r3, [r7, #18]
 800a114:	1ad3      	subs	r3, r2, r3
 800a116:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 800a118:	8a7b      	ldrh	r3, [r7, #18]
 800a11a:	697a      	ldr	r2, [r7, #20]
 800a11c:	4413      	add	r3, r2
 800a11e:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 800a120:	8b7b      	ldrh	r3, [r7, #26]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d008      	beq.n	800a138 <pbuf_take_at+0x94>
      return pbuf_take(q->next, src_ptr, remaining_len);
 800a126:	69fb      	ldr	r3, [r7, #28]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	8b7a      	ldrh	r2, [r7, #26]
 800a12c:	6979      	ldr	r1, [r7, #20]
 800a12e:	4618      	mov	r0, r3
 800a130:	f7ff ff26 	bl	8009f80 <pbuf_take>
 800a134:	4603      	mov	r3, r0
 800a136:	e003      	b.n	800a140 <pbuf_take_at+0x9c>
    }
    return ERR_OK;
 800a138:	2300      	movs	r3, #0
 800a13a:	e001      	b.n	800a140 <pbuf_take_at+0x9c>
  }
  return ERR_MEM;
 800a13c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a140:	4618      	mov	r0, r3
 800a142:	3720      	adds	r7, #32
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf* p, u16_t offset, u8_t data)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b084      	sub	sp, #16
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	460b      	mov	r3, r1
 800a152:	807b      	strh	r3, [r7, #2]
 800a154:	4613      	mov	r3, r2
 800a156:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf* q = pbuf_skip(p, offset, &q_idx);
 800a158:	f107 020a 	add.w	r2, r7, #10
 800a15c:	887b      	ldrh	r3, [r7, #2]
 800a15e:	4619      	mov	r1, r3
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f7ff fef9 	bl	8009f58 <pbuf_skip>
 800a166:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d00a      	beq.n	800a184 <pbuf_put_at+0x3c>
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	895a      	ldrh	r2, [r3, #10]
 800a172:	897b      	ldrh	r3, [r7, #10]
 800a174:	429a      	cmp	r2, r3
 800a176:	d905      	bls.n	800a184 <pbuf_put_at+0x3c>
    ((u8_t*)q->payload)[q_idx] = data;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	685b      	ldr	r3, [r3, #4]
 800a17c:	897a      	ldrh	r2, [r7, #10]
 800a17e:	4413      	add	r3, r2
 800a180:	787a      	ldrb	r2, [r7, #1]
 800a182:	701a      	strb	r2, [r3, #0]
  }
}
 800a184:	bf00      	nop
 800a186:	3710      	adds	r7, #16
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800a18c:	b480      	push	{r7}
 800a18e:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800a190:	bf00      	nop
 800a192:	46bd      	mov	sp, r7
 800a194:	bc80      	pop	{r7}
 800a196:	4770      	bx	lr

0800a198 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800a19c:	f000 fdf0 	bl	800ad80 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800a1a0:	4b07      	ldr	r3, [pc, #28]	; (800a1c0 <tcp_tmr+0x28>)
 800a1a2:	781b      	ldrb	r3, [r3, #0]
 800a1a4:	3301      	adds	r3, #1
 800a1a6:	b2da      	uxtb	r2, r3
 800a1a8:	4b05      	ldr	r3, [pc, #20]	; (800a1c0 <tcp_tmr+0x28>)
 800a1aa:	701a      	strb	r2, [r3, #0]
 800a1ac:	4b04      	ldr	r3, [pc, #16]	; (800a1c0 <tcp_tmr+0x28>)
 800a1ae:	781b      	ldrb	r3, [r3, #0]
 800a1b0:	f003 0301 	and.w	r3, r3, #1
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d001      	beq.n	800a1bc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800a1b8:	f000 fb22 	bl	800a800 <tcp_slowtmr>
  }
}
 800a1bc:	bf00      	nop
 800a1be:	bd80      	pop	{r7, pc}
 800a1c0:	20004a8d 	.word	0x20004a8d

0800a1c4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b085      	sub	sp, #20
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	60fb      	str	r3, [r7, #12]
 800a1d2:	e00a      	b.n	800a1ea <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a1d8:	683a      	ldr	r2, [r7, #0]
 800a1da:	429a      	cmp	r2, r3
 800a1dc:	d102      	bne.n	800a1e4 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	68db      	ldr	r3, [r3, #12]
 800a1e8:	60fb      	str	r3, [r7, #12]
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d1f1      	bne.n	800a1d4 <tcp_remove_listener+0x10>
      }
   }
}
 800a1f0:	bf00      	nop
 800a1f2:	3714      	adds	r7, #20
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bc80      	pop	{r7}
 800a1f8:	4770      	bx	lr
	...

0800a1fc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b084      	sub	sp, #16
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d105      	bne.n	800a216 <tcp_listen_closed+0x1a>
 800a20a:	4b13      	ldr	r3, [pc, #76]	; (800a258 <tcp_listen_closed+0x5c>)
 800a20c:	22c0      	movs	r2, #192	; 0xc0
 800a20e:	4913      	ldr	r1, [pc, #76]	; (800a25c <tcp_listen_closed+0x60>)
 800a210:	4813      	ldr	r0, [pc, #76]	; (800a260 <tcp_listen_closed+0x64>)
 800a212:	f00e f887 	bl	8018324 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	7d1b      	ldrb	r3, [r3, #20]
 800a21a:	2b01      	cmp	r3, #1
 800a21c:	d005      	beq.n	800a22a <tcp_listen_closed+0x2e>
 800a21e:	4b0e      	ldr	r3, [pc, #56]	; (800a258 <tcp_listen_closed+0x5c>)
 800a220:	22c1      	movs	r2, #193	; 0xc1
 800a222:	4910      	ldr	r1, [pc, #64]	; (800a264 <tcp_listen_closed+0x68>)
 800a224:	480e      	ldr	r0, [pc, #56]	; (800a260 <tcp_listen_closed+0x64>)
 800a226:	f00e f87d 	bl	8018324 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a22a:	2301      	movs	r3, #1
 800a22c:	60fb      	str	r3, [r7, #12]
 800a22e:	e00b      	b.n	800a248 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800a230:	4a0d      	ldr	r2, [pc, #52]	; (800a268 <tcp_listen_closed+0x6c>)
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	6879      	ldr	r1, [r7, #4]
 800a23c:	4618      	mov	r0, r3
 800a23e:	f7ff ffc1 	bl	800a1c4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	3301      	adds	r3, #1
 800a246:	60fb      	str	r3, [r7, #12]
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	2b03      	cmp	r3, #3
 800a24c:	d9f0      	bls.n	800a230 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800a24e:	bf00      	nop
 800a250:	3710      	adds	r7, #16
 800a252:	46bd      	mov	sp, r7
 800a254:	bd80      	pop	{r7, pc}
 800a256:	bf00      	nop
 800a258:	08019e48 	.word	0x08019e48
 800a25c:	08019e78 	.word	0x08019e78
 800a260:	08019e84 	.word	0x08019e84
 800a264:	08019eac 	.word	0x08019eac
 800a268:	0801c898 	.word	0x0801c898

0800a26c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800a26c:	b5b0      	push	{r4, r5, r7, lr}
 800a26e:	b086      	sub	sp, #24
 800a270:	af02      	add	r7, sp, #8
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	460b      	mov	r3, r1
 800a276:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800a278:	78fb      	ldrb	r3, [r7, #3]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d075      	beq.n	800a36a <tcp_close_shutdown+0xfe>
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	7d1b      	ldrb	r3, [r3, #20]
 800a282:	2b04      	cmp	r3, #4
 800a284:	d003      	beq.n	800a28e <tcp_close_shutdown+0x22>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	7d1b      	ldrb	r3, [r3, #20]
 800a28a:	2b07      	cmp	r3, #7
 800a28c:	d16d      	bne.n	800a36a <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a292:	2b00      	cmp	r3, #0
 800a294:	d104      	bne.n	800a2a0 <tcp_close_shutdown+0x34>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a29a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a29e:	d064      	beq.n	800a36a <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	7e9b      	ldrb	r3, [r3, #26]
 800a2a4:	f003 0310 	and.w	r3, r3, #16
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d106      	bne.n	800a2ba <tcp_close_shutdown+0x4e>
 800a2ac:	4b59      	ldr	r3, [pc, #356]	; (800a414 <tcp_close_shutdown+0x1a8>)
 800a2ae:	f240 120f 	movw	r2, #271	; 0x10f
 800a2b2:	4959      	ldr	r1, [pc, #356]	; (800a418 <tcp_close_shutdown+0x1ac>)
 800a2b4:	4859      	ldr	r0, [pc, #356]	; (800a41c <tcp_close_shutdown+0x1b0>)
 800a2b6:	f00e f835 	bl	8018324 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a2c2:	687c      	ldr	r4, [r7, #4]
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	1d1d      	adds	r5, r3, #4
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	8adb      	ldrh	r3, [r3, #22]
 800a2cc:	687a      	ldr	r2, [r7, #4]
 800a2ce:	8b12      	ldrh	r2, [r2, #24]
 800a2d0:	9201      	str	r2, [sp, #4]
 800a2d2:	9300      	str	r3, [sp, #0]
 800a2d4:	462b      	mov	r3, r5
 800a2d6:	4622      	mov	r2, r4
 800a2d8:	f004 f85e 	bl	800e398 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f000 ffc5 	bl	800b26c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800a2e2:	4b4f      	ldr	r3, [pc, #316]	; (800a420 <tcp_close_shutdown+0x1b4>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	687a      	ldr	r2, [r7, #4]
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d105      	bne.n	800a2f8 <tcp_close_shutdown+0x8c>
 800a2ec:	4b4c      	ldr	r3, [pc, #304]	; (800a420 <tcp_close_shutdown+0x1b4>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	68db      	ldr	r3, [r3, #12]
 800a2f2:	4a4b      	ldr	r2, [pc, #300]	; (800a420 <tcp_close_shutdown+0x1b4>)
 800a2f4:	6013      	str	r3, [r2, #0]
 800a2f6:	e013      	b.n	800a320 <tcp_close_shutdown+0xb4>
 800a2f8:	4b49      	ldr	r3, [pc, #292]	; (800a420 <tcp_close_shutdown+0x1b4>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	60fb      	str	r3, [r7, #12]
 800a2fe:	e00c      	b.n	800a31a <tcp_close_shutdown+0xae>
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	68db      	ldr	r3, [r3, #12]
 800a304:	687a      	ldr	r2, [r7, #4]
 800a306:	429a      	cmp	r2, r3
 800a308:	d104      	bne.n	800a314 <tcp_close_shutdown+0xa8>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	68da      	ldr	r2, [r3, #12]
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	60da      	str	r2, [r3, #12]
 800a312:	e005      	b.n	800a320 <tcp_close_shutdown+0xb4>
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	68db      	ldr	r3, [r3, #12]
 800a318:	60fb      	str	r3, [r7, #12]
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d1ef      	bne.n	800a300 <tcp_close_shutdown+0x94>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2200      	movs	r2, #0
 800a324:	60da      	str	r2, [r3, #12]
 800a326:	4b3f      	ldr	r3, [pc, #252]	; (800a424 <tcp_close_shutdown+0x1b8>)
 800a328:	2201      	movs	r2, #1
 800a32a:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	7d1b      	ldrb	r3, [r3, #20]
 800a330:	2b04      	cmp	r3, #4
 800a332:	d10c      	bne.n	800a34e <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	220a      	movs	r2, #10
 800a338:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800a33a:	4b3b      	ldr	r3, [pc, #236]	; (800a428 <tcp_close_shutdown+0x1bc>)
 800a33c:	681a      	ldr	r2, [r3, #0]
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	60da      	str	r2, [r3, #12]
 800a342:	4a39      	ldr	r2, [pc, #228]	; (800a428 <tcp_close_shutdown+0x1bc>)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6013      	str	r3, [r2, #0]
 800a348:	f004 fa76 	bl	800e838 <tcp_timer_needed>
 800a34c:	e00b      	b.n	800a366 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 800a34e:	4b37      	ldr	r3, [pc, #220]	; (800a42c <tcp_close_shutdown+0x1c0>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	687a      	ldr	r2, [r7, #4]
 800a354:	429a      	cmp	r2, r3
 800a356:	d102      	bne.n	800a35e <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 800a358:	f003 fae8 	bl	800d92c <tcp_trigger_input_pcb_close>
 800a35c:	e003      	b.n	800a366 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 800a35e:	6879      	ldr	r1, [r7, #4]
 800a360:	2001      	movs	r0, #1
 800a362:	f7fe fddb 	bl	8008f1c <memp_free>
        }
      }
      return ERR_OK;
 800a366:	2300      	movs	r3, #0
 800a368:	e050      	b.n	800a40c <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	7d1b      	ldrb	r3, [r3, #20]
 800a36e:	2b01      	cmp	r3, #1
 800a370:	d02e      	beq.n	800a3d0 <tcp_close_shutdown+0x164>
 800a372:	2b02      	cmp	r3, #2
 800a374:	d038      	beq.n	800a3e8 <tcp_close_shutdown+0x17c>
 800a376:	2b00      	cmp	r3, #0
 800a378:	d142      	bne.n	800a400 <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	8adb      	ldrh	r3, [r3, #22]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d021      	beq.n	800a3c6 <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800a382:	4b2b      	ldr	r3, [pc, #172]	; (800a430 <tcp_close_shutdown+0x1c4>)
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	687a      	ldr	r2, [r7, #4]
 800a388:	429a      	cmp	r2, r3
 800a38a:	d105      	bne.n	800a398 <tcp_close_shutdown+0x12c>
 800a38c:	4b28      	ldr	r3, [pc, #160]	; (800a430 <tcp_close_shutdown+0x1c4>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	68db      	ldr	r3, [r3, #12]
 800a392:	4a27      	ldr	r2, [pc, #156]	; (800a430 <tcp_close_shutdown+0x1c4>)
 800a394:	6013      	str	r3, [r2, #0]
 800a396:	e013      	b.n	800a3c0 <tcp_close_shutdown+0x154>
 800a398:	4b25      	ldr	r3, [pc, #148]	; (800a430 <tcp_close_shutdown+0x1c4>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	60bb      	str	r3, [r7, #8]
 800a39e:	e00c      	b.n	800a3ba <tcp_close_shutdown+0x14e>
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	68db      	ldr	r3, [r3, #12]
 800a3a4:	687a      	ldr	r2, [r7, #4]
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d104      	bne.n	800a3b4 <tcp_close_shutdown+0x148>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	68da      	ldr	r2, [r3, #12]
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	60da      	str	r2, [r3, #12]
 800a3b2:	e005      	b.n	800a3c0 <tcp_close_shutdown+0x154>
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	68db      	ldr	r3, [r3, #12]
 800a3b8:	60bb      	str	r3, [r7, #8]
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d1ef      	bne.n	800a3a0 <tcp_close_shutdown+0x134>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 800a3c6:	6879      	ldr	r1, [r7, #4]
 800a3c8:	2001      	movs	r0, #1
 800a3ca:	f7fe fda7 	bl	8008f1c <memp_free>
    break;
 800a3ce:	e01c      	b.n	800a40a <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f7ff ff13 	bl	800a1fc <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800a3d6:	6879      	ldr	r1, [r7, #4]
 800a3d8:	4816      	ldr	r0, [pc, #88]	; (800a434 <tcp_close_shutdown+0x1c8>)
 800a3da:	f000 ff89 	bl	800b2f0 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800a3de:	6879      	ldr	r1, [r7, #4]
 800a3e0:	2002      	movs	r0, #2
 800a3e2:	f7fe fd9b 	bl	8008f1c <memp_free>
    break;
 800a3e6:	e010      	b.n	800a40a <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 800a3e8:	6879      	ldr	r1, [r7, #4]
 800a3ea:	480d      	ldr	r0, [pc, #52]	; (800a420 <tcp_close_shutdown+0x1b4>)
 800a3ec:	f000 ff80 	bl	800b2f0 <tcp_pcb_remove>
 800a3f0:	4b0c      	ldr	r3, [pc, #48]	; (800a424 <tcp_close_shutdown+0x1b8>)
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 800a3f6:	6879      	ldr	r1, [r7, #4]
 800a3f8:	2001      	movs	r0, #1
 800a3fa:	f7fe fd8f 	bl	8008f1c <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 800a3fe:	e004      	b.n	800a40a <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f000 f819 	bl	800a438 <tcp_close_shutdown_fin>
 800a406:	4603      	mov	r3, r0
 800a408:	e000      	b.n	800a40c <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 800a40a:	2300      	movs	r3, #0
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	3710      	adds	r7, #16
 800a410:	46bd      	mov	sp, r7
 800a412:	bdb0      	pop	{r4, r5, r7, pc}
 800a414:	08019e48 	.word	0x08019e48
 800a418:	08019ec4 	.word	0x08019ec4
 800a41c:	08019e84 	.word	0x08019e84
 800a420:	2000b8c4 	.word	0x2000b8c4
 800a424:	2000b8c0 	.word	0x2000b8c0
 800a428:	2000b8d4 	.word	0x2000b8d4
 800a42c:	2000b8d8 	.word	0x2000b8d8
 800a430:	2000b8d0 	.word	0x2000b8d0
 800a434:	2000b8cc 	.word	0x2000b8cc

0800a438 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b084      	sub	sp, #16
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d106      	bne.n	800a454 <tcp_close_shutdown_fin+0x1c>
 800a446:	4b2c      	ldr	r3, [pc, #176]	; (800a4f8 <tcp_close_shutdown_fin+0xc0>)
 800a448:	f240 124d 	movw	r2, #333	; 0x14d
 800a44c:	492b      	ldr	r1, [pc, #172]	; (800a4fc <tcp_close_shutdown_fin+0xc4>)
 800a44e:	482c      	ldr	r0, [pc, #176]	; (800a500 <tcp_close_shutdown_fin+0xc8>)
 800a450:	f00d ff68 	bl	8018324 <iprintf>

  switch (pcb->state) {
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	7d1b      	ldrb	r3, [r3, #20]
 800a458:	2b04      	cmp	r3, #4
 800a45a:	d010      	beq.n	800a47e <tcp_close_shutdown_fin+0x46>
 800a45c:	2b07      	cmp	r3, #7
 800a45e:	d01b      	beq.n	800a498 <tcp_close_shutdown_fin+0x60>
 800a460:	2b03      	cmp	r3, #3
 800a462:	d126      	bne.n	800a4b2 <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f003 faed 	bl	800da44 <tcp_send_fin>
 800a46a:	4603      	mov	r3, r0
 800a46c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800a46e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d11f      	bne.n	800a4b6 <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2205      	movs	r2, #5
 800a47a:	751a      	strb	r2, [r3, #20]
    }
    break;
 800a47c:	e01b      	b.n	800a4b6 <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f003 fae0 	bl	800da44 <tcp_send_fin>
 800a484:	4603      	mov	r3, r0
 800a486:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800a488:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d114      	bne.n	800a4ba <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2205      	movs	r2, #5
 800a494:	751a      	strb	r2, [r3, #20]
    }
    break;
 800a496:	e010      	b.n	800a4ba <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f003 fad3 	bl	800da44 <tcp_send_fin>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800a4a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d109      	bne.n	800a4be <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2209      	movs	r2, #9
 800a4ae:	751a      	strb	r2, [r3, #20]
    }
    break;
 800a4b0:	e005      	b.n	800a4be <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	e01c      	b.n	800a4f0 <tcp_close_shutdown_fin+0xb8>
    break;
 800a4b6:	bf00      	nop
 800a4b8:	e002      	b.n	800a4c0 <tcp_close_shutdown_fin+0x88>
    break;
 800a4ba:	bf00      	nop
 800a4bc:	e000      	b.n	800a4c0 <tcp_close_shutdown_fin+0x88>
    break;
 800a4be:	bf00      	nop
  }

  if (err == ERR_OK) {
 800a4c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d103      	bne.n	800a4d0 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f003 fcdb 	bl	800de84 <tcp_output>
 800a4ce:	e00d      	b.n	800a4ec <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800a4d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a4d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4d8:	d108      	bne.n	800a4ec <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	7e9b      	ldrb	r3, [r3, #26]
 800a4de:	f043 0308 	orr.w	r3, r3, #8
 800a4e2:	b2da      	uxtb	r2, r3
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	e001      	b.n	800a4f0 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800a4ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	3710      	adds	r7, #16
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	bd80      	pop	{r7, pc}
 800a4f8:	08019e48 	.word	0x08019e48
 800a4fc:	08019e78 	.word	0x08019e78
 800a500:	08019e84 	.word	0x08019e84

0800a504 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b082      	sub	sp, #8
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	7d1b      	ldrb	r3, [r3, #20]
 800a510:	2b01      	cmp	r3, #1
 800a512:	d006      	beq.n	800a522 <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	7e9b      	ldrb	r3, [r3, #26]
 800a518:	f043 0310 	orr.w	r3, r3, #16
 800a51c:	b2da      	uxtb	r2, r3
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800a522:	2101      	movs	r1, #1
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f7ff fea1 	bl	800a26c <tcp_close_shutdown>
 800a52a:	4603      	mov	r3, r0
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3708      	adds	r7, #8
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}

0800a534 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b08c      	sub	sp, #48	; 0x30
 800a538:	af02      	add	r7, sp, #8
 800a53a:	6078      	str	r0, [r7, #4]
 800a53c:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	7d1b      	ldrb	r3, [r3, #20]
 800a542:	2b01      	cmp	r3, #1
 800a544:	d106      	bne.n	800a554 <tcp_abandon+0x20>
 800a546:	4b4d      	ldr	r3, [pc, #308]	; (800a67c <tcp_abandon+0x148>)
 800a548:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a54c:	494c      	ldr	r1, [pc, #304]	; (800a680 <tcp_abandon+0x14c>)
 800a54e:	484d      	ldr	r0, [pc, #308]	; (800a684 <tcp_abandon+0x150>)
 800a550:	f00d fee8 	bl	8018324 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	7d1b      	ldrb	r3, [r3, #20]
 800a558:	2b0a      	cmp	r3, #10
 800a55a:	d108      	bne.n	800a56e <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800a55c:	6879      	ldr	r1, [r7, #4]
 800a55e:	484a      	ldr	r0, [pc, #296]	; (800a688 <tcp_abandon+0x154>)
 800a560:	f000 fec6 	bl	800b2f0 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800a564:	6879      	ldr	r1, [r7, #4]
 800a566:	2001      	movs	r0, #1
 800a568:	f7fe fcd8 	bl	8008f1c <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 800a56c:	e081      	b.n	800a672 <tcp_abandon+0x13e>
    int send_rst = 0;
 800a56e:	2300      	movs	r3, #0
 800a570:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800a572:	2300      	movs	r3, #0
 800a574:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a57a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a580:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a588:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	691b      	ldr	r3, [r3, #16]
 800a58e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	7d1b      	ldrb	r3, [r3, #20]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d126      	bne.n	800a5e6 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	8adb      	ldrh	r3, [r3, #22]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d02e      	beq.n	800a5fe <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a5a0:	4b3a      	ldr	r3, [pc, #232]	; (800a68c <tcp_abandon+0x158>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	687a      	ldr	r2, [r7, #4]
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	d105      	bne.n	800a5b6 <tcp_abandon+0x82>
 800a5aa:	4b38      	ldr	r3, [pc, #224]	; (800a68c <tcp_abandon+0x158>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	68db      	ldr	r3, [r3, #12]
 800a5b0:	4a36      	ldr	r2, [pc, #216]	; (800a68c <tcp_abandon+0x158>)
 800a5b2:	6013      	str	r3, [r2, #0]
 800a5b4:	e013      	b.n	800a5de <tcp_abandon+0xaa>
 800a5b6:	4b35      	ldr	r3, [pc, #212]	; (800a68c <tcp_abandon+0x158>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	61fb      	str	r3, [r7, #28]
 800a5bc:	e00c      	b.n	800a5d8 <tcp_abandon+0xa4>
 800a5be:	69fb      	ldr	r3, [r7, #28]
 800a5c0:	68db      	ldr	r3, [r3, #12]
 800a5c2:	687a      	ldr	r2, [r7, #4]
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d104      	bne.n	800a5d2 <tcp_abandon+0x9e>
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	68da      	ldr	r2, [r3, #12]
 800a5cc:	69fb      	ldr	r3, [r7, #28]
 800a5ce:	60da      	str	r2, [r3, #12]
 800a5d0:	e005      	b.n	800a5de <tcp_abandon+0xaa>
 800a5d2:	69fb      	ldr	r3, [r7, #28]
 800a5d4:	68db      	ldr	r3, [r3, #12]
 800a5d6:	61fb      	str	r3, [r7, #28]
 800a5d8:	69fb      	ldr	r3, [r7, #28]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d1ef      	bne.n	800a5be <tcp_abandon+0x8a>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	60da      	str	r2, [r3, #12]
 800a5e4:	e00b      	b.n	800a5fe <tcp_abandon+0xca>
      send_rst = reset;
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	8adb      	ldrh	r3, [r3, #22]
 800a5ee:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a5f0:	6879      	ldr	r1, [r7, #4]
 800a5f2:	4827      	ldr	r0, [pc, #156]	; (800a690 <tcp_abandon+0x15c>)
 800a5f4:	f000 fe7c 	bl	800b2f0 <tcp_pcb_remove>
 800a5f8:	4b26      	ldr	r3, [pc, #152]	; (800a694 <tcp_abandon+0x160>)
 800a5fa:	2201      	movs	r2, #1
 800a5fc:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a602:	2b00      	cmp	r3, #0
 800a604:	d004      	beq.n	800a610 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a60a:	4618      	mov	r0, r3
 800a60c:	f000 fc85 	bl	800af1a <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a614:	2b00      	cmp	r3, #0
 800a616:	d004      	beq.n	800a622 <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a61c:	4618      	mov	r0, r3
 800a61e:	f000 fc7c 	bl	800af1a <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a626:	2b00      	cmp	r3, #0
 800a628:	d004      	beq.n	800a634 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a62e:	4618      	mov	r0, r3
 800a630:	f000 fc73 	bl	800af1a <tcp_segs_free>
    if (send_rst) {
 800a634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a636:	2b00      	cmp	r3, #0
 800a638:	d00c      	beq.n	800a654 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800a63a:	687a      	ldr	r2, [r7, #4]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	1d19      	adds	r1, r3, #4
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	8b1b      	ldrh	r3, [r3, #24]
 800a644:	9301      	str	r3, [sp, #4]
 800a646:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a648:	9300      	str	r3, [sp, #0]
 800a64a:	460b      	mov	r3, r1
 800a64c:	6979      	ldr	r1, [r7, #20]
 800a64e:	69b8      	ldr	r0, [r7, #24]
 800a650:	f003 fea2 	bl	800e398 <tcp_rst>
    last_state = pcb->state;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	7d1b      	ldrb	r3, [r3, #20]
 800a658:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 800a65a:	6879      	ldr	r1, [r7, #4]
 800a65c:	2001      	movs	r0, #1
 800a65e:	f7fe fc5d 	bl	8008f1c <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d004      	beq.n	800a672 <tcp_abandon+0x13e>
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	f06f 010c 	mvn.w	r1, #12
 800a66e:	68f8      	ldr	r0, [r7, #12]
 800a670:	4798      	blx	r3
}
 800a672:	bf00      	nop
 800a674:	3728      	adds	r7, #40	; 0x28
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}
 800a67a:	bf00      	nop
 800a67c:	08019e48 	.word	0x08019e48
 800a680:	08019ee0 	.word	0x08019ee0
 800a684:	08019e84 	.word	0x08019e84
 800a688:	2000b8d4 	.word	0x2000b8d4
 800a68c:	2000b8d0 	.word	0x2000b8d0
 800a690:	2000b8c4 	.word	0x2000b8c4
 800a694:	2000b8c0 	.word	0x2000b8c0

0800a698 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b082      	sub	sp, #8
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800a6a0:	2101      	movs	r1, #1
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f7ff ff46 	bl	800a534 <tcp_abandon>
}
 800a6a8:	bf00      	nop
 800a6aa:	3708      	adds	r7, #8
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b084      	sub	sp, #16
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6bc:	687a      	ldr	r2, [r7, #4]
 800a6be:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800a6c0:	4413      	add	r3, r2
 800a6c2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6c8:	687a      	ldr	r2, [r7, #4]
 800a6ca:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800a6cc:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800a6d0:	bf28      	it	cs
 800a6d2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800a6d6:	b292      	uxth	r2, r2
 800a6d8:	4413      	add	r3, r2
 800a6da:	68fa      	ldr	r2, [r7, #12]
 800a6dc:	1ad3      	subs	r3, r2, r3
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	db08      	blt.n	800a6f4 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6ee:	68fa      	ldr	r2, [r7, #12]
 800a6f0:	1ad3      	subs	r3, r2, r3
 800a6f2:	e020      	b.n	800a736 <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6fc:	1ad3      	subs	r3, r2, r3
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	dd03      	ble.n	800a70a <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2200      	movs	r2, #0
 800a706:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a708:	e014      	b.n	800a734 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a712:	1ad3      	subs	r3, r2, r3
 800a714:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a71c:	d306      	bcc.n	800a72c <tcp_update_rcv_ann_wnd+0x7c>
 800a71e:	4b08      	ldr	r3, [pc, #32]	; (800a740 <tcp_update_rcv_ann_wnd+0x90>)
 800a720:	f44f 7242 	mov.w	r2, #776	; 0x308
 800a724:	4907      	ldr	r1, [pc, #28]	; (800a744 <tcp_update_rcv_ann_wnd+0x94>)
 800a726:	4808      	ldr	r0, [pc, #32]	; (800a748 <tcp_update_rcv_ann_wnd+0x98>)
 800a728:	f00d fdfc 	bl	8018324 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	b29a      	uxth	r2, r3
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800a734:	2300      	movs	r3, #0
  }
}
 800a736:	4618      	mov	r0, r3
 800a738:	3710      	adds	r7, #16
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}
 800a73e:	bf00      	nop
 800a740:	08019e48 	.word	0x08019e48
 800a744:	08019f60 	.word	0x08019f60
 800a748:	08019e84 	.word	0x08019e84

0800a74c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b084      	sub	sp, #16
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
 800a754:	460b      	mov	r3, r1
 800a756:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	7d1b      	ldrb	r3, [r3, #20]
 800a75c:	2b01      	cmp	r3, #1
 800a75e:	d106      	bne.n	800a76e <tcp_recved+0x22>
 800a760:	4b23      	ldr	r3, [pc, #140]	; (800a7f0 <tcp_recved+0xa4>)
 800a762:	f44f 7248 	mov.w	r2, #800	; 0x320
 800a766:	4923      	ldr	r1, [pc, #140]	; (800a7f4 <tcp_recved+0xa8>)
 800a768:	4823      	ldr	r0, [pc, #140]	; (800a7f8 <tcp_recved+0xac>)
 800a76a:	f00d fddb 	bl	8018324 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a772:	887b      	ldrh	r3, [r7, #2]
 800a774:	4413      	add	r3, r2
 800a776:	b29a      	uxth	r2, r3
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a780:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a784:	d904      	bls.n	800a790 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a78c:	851a      	strh	r2, [r3, #40]	; 0x28
 800a78e:	e017      	b.n	800a7c0 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a794:	2b00      	cmp	r3, #0
 800a796:	d113      	bne.n	800a7c0 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	7d1b      	ldrb	r3, [r3, #20]
 800a79c:	2b07      	cmp	r3, #7
 800a79e:	d003      	beq.n	800a7a8 <tcp_recved+0x5c>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	7d1b      	ldrb	r3, [r3, #20]
 800a7a4:	2b09      	cmp	r3, #9
 800a7a6:	d104      	bne.n	800a7b2 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a7ae:	851a      	strh	r2, [r3, #40]	; 0x28
 800a7b0:	e006      	b.n	800a7c0 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800a7b2:	4b0f      	ldr	r3, [pc, #60]	; (800a7f0 <tcp_recved+0xa4>)
 800a7b4:	f240 322d 	movw	r2, #813	; 0x32d
 800a7b8:	4910      	ldr	r1, [pc, #64]	; (800a7fc <tcp_recved+0xb0>)
 800a7ba:	480f      	ldr	r0, [pc, #60]	; (800a7f8 <tcp_recved+0xac>)
 800a7bc:	f00d fdb2 	bl	8018324 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f7ff ff75 	bl	800a6b0 <tcp_update_rcv_ann_wnd>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a7d0:	db09      	blt.n	800a7e6 <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	7e9b      	ldrb	r3, [r3, #26]
 800a7d6:	f043 0302 	orr.w	r3, r3, #2
 800a7da:	b2da      	uxtb	r2, r3
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f003 fb4f 	bl	800de84 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800a7e6:	bf00      	nop
 800a7e8:	3710      	adds	r7, #16
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}
 800a7ee:	bf00      	nop
 800a7f0:	08019e48 	.word	0x08019e48
 800a7f4:	08019f7c 	.word	0x08019f7c
 800a7f8:	08019e84 	.word	0x08019e84
 800a7fc:	08019fa4 	.word	0x08019fa4

0800a800 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800a800:	b5b0      	push	{r4, r5, r7, lr}
 800a802:	b08c      	sub	sp, #48	; 0x30
 800a804:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800a806:	2300      	movs	r3, #0
 800a808:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 800a80a:	4b97      	ldr	r3, [pc, #604]	; (800aa68 <tcp_slowtmr+0x268>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	3301      	adds	r3, #1
 800a810:	4a95      	ldr	r2, [pc, #596]	; (800aa68 <tcp_slowtmr+0x268>)
 800a812:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800a814:	4b95      	ldr	r3, [pc, #596]	; (800aa6c <tcp_slowtmr+0x26c>)
 800a816:	781b      	ldrb	r3, [r3, #0]
 800a818:	3301      	adds	r3, #1
 800a81a:	b2da      	uxtb	r2, r3
 800a81c:	4b93      	ldr	r3, [pc, #588]	; (800aa6c <tcp_slowtmr+0x26c>)
 800a81e:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800a820:	2300      	movs	r3, #0
 800a822:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 800a824:	4b92      	ldr	r3, [pc, #584]	; (800aa70 <tcp_slowtmr+0x270>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800a82a:	e227      	b.n	800ac7c <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800a82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a82e:	7d1b      	ldrb	r3, [r3, #20]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d106      	bne.n	800a842 <tcp_slowtmr+0x42>
 800a834:	4b8f      	ldr	r3, [pc, #572]	; (800aa74 <tcp_slowtmr+0x274>)
 800a836:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800a83a:	498f      	ldr	r1, [pc, #572]	; (800aa78 <tcp_slowtmr+0x278>)
 800a83c:	488f      	ldr	r0, [pc, #572]	; (800aa7c <tcp_slowtmr+0x27c>)
 800a83e:	f00d fd71 	bl	8018324 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800a842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a844:	7d1b      	ldrb	r3, [r3, #20]
 800a846:	2b01      	cmp	r3, #1
 800a848:	d106      	bne.n	800a858 <tcp_slowtmr+0x58>
 800a84a:	4b8a      	ldr	r3, [pc, #552]	; (800aa74 <tcp_slowtmr+0x274>)
 800a84c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800a850:	498b      	ldr	r1, [pc, #556]	; (800aa80 <tcp_slowtmr+0x280>)
 800a852:	488a      	ldr	r0, [pc, #552]	; (800aa7c <tcp_slowtmr+0x27c>)
 800a854:	f00d fd66 	bl	8018324 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800a858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a85a:	7d1b      	ldrb	r3, [r3, #20]
 800a85c:	2b0a      	cmp	r3, #10
 800a85e:	d106      	bne.n	800a86e <tcp_slowtmr+0x6e>
 800a860:	4b84      	ldr	r3, [pc, #528]	; (800aa74 <tcp_slowtmr+0x274>)
 800a862:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800a866:	4987      	ldr	r1, [pc, #540]	; (800aa84 <tcp_slowtmr+0x284>)
 800a868:	4884      	ldr	r0, [pc, #528]	; (800aa7c <tcp_slowtmr+0x27c>)
 800a86a:	f00d fd5b 	bl	8018324 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800a86e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a870:	7f5a      	ldrb	r2, [r3, #29]
 800a872:	4b7e      	ldr	r3, [pc, #504]	; (800aa6c <tcp_slowtmr+0x26c>)
 800a874:	781b      	ldrb	r3, [r3, #0]
 800a876:	429a      	cmp	r2, r3
 800a878:	d103      	bne.n	800a882 <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 800a87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a87c:	68db      	ldr	r3, [r3, #12]
 800a87e:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 800a880:	e1fc      	b.n	800ac7c <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 800a882:	4b7a      	ldr	r3, [pc, #488]	; (800aa6c <tcp_slowtmr+0x26c>)
 800a884:	781a      	ldrb	r2, [r3, #0]
 800a886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a888:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 800a88a:	2300      	movs	r3, #0
 800a88c:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 800a88e:	2300      	movs	r3, #0
 800a890:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800a892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a894:	7d1b      	ldrb	r3, [r3, #20]
 800a896:	2b02      	cmp	r3, #2
 800a898:	d108      	bne.n	800a8ac <tcp_slowtmr+0xac>
 800a89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a89c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a8a0:	2b05      	cmp	r3, #5
 800a8a2:	d903      	bls.n	800a8ac <tcp_slowtmr+0xac>
      ++pcb_remove;
 800a8a4:	7ffb      	ldrb	r3, [r7, #31]
 800a8a6:	3301      	adds	r3, #1
 800a8a8:	77fb      	strb	r3, [r7, #31]
 800a8aa:	e0a2      	b.n	800a9f2 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800a8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a8b2:	2b0b      	cmp	r3, #11
 800a8b4:	d903      	bls.n	800a8be <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800a8b6:	7ffb      	ldrb	r3, [r7, #31]
 800a8b8:	3301      	adds	r3, #1
 800a8ba:	77fb      	strb	r3, [r7, #31]
 800a8bc:	e099      	b.n	800a9f2 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800a8be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c0:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d032      	beq.n	800a92e <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800a8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ca:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800a8ce:	3b01      	subs	r3, #1
 800a8d0:	4a6d      	ldr	r2, [pc, #436]	; (800aa88 <tcp_slowtmr+0x288>)
 800a8d2:	5cd3      	ldrb	r3, [r2, r3]
 800a8d4:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 800a8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d8:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800a8dc:	7cfa      	ldrb	r2, [r7, #19]
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	d907      	bls.n	800a8f2 <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 800a8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8e4:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800a8e8:	3301      	adds	r3, #1
 800a8ea:	b2da      	uxtb	r2, r3
 800a8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ee:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 800a8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f4:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800a8f8:	7cfa      	ldrb	r2, [r7, #19]
 800a8fa:	429a      	cmp	r2, r3
 800a8fc:	d879      	bhi.n	800a9f2 <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800a8fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a900:	f003 feda 	bl	800e6b8 <tcp_zero_window_probe>
 800a904:	4603      	mov	r3, r0
 800a906:	2b00      	cmp	r3, #0
 800a908:	d173      	bne.n	800a9f2 <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 800a90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a90c:	2200      	movs	r2, #0
 800a90e:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800a912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a914:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800a918:	2b06      	cmp	r3, #6
 800a91a:	d86a      	bhi.n	800a9f2 <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 800a91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a91e:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800a922:	3301      	adds	r3, #1
 800a924:	b2da      	uxtb	r2, r3
 800a926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a928:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800a92c:	e061      	b.n	800a9f2 <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 800a92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a930:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a934:	2b00      	cmp	r3, #0
 800a936:	db08      	blt.n	800a94a <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 800a938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a93a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a93e:	b29b      	uxth	r3, r3
 800a940:	3301      	adds	r3, #1
 800a942:	b29b      	uxth	r3, r3
 800a944:	b21a      	sxth	r2, r3
 800a946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a948:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800a94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d04f      	beq.n	800a9f2 <tcp_slowtmr+0x1f2>
 800a952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a954:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800a958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a95a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a95e:	429a      	cmp	r2, r3
 800a960:	db47      	blt.n	800a9f2 <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 800a962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a964:	7d1b      	ldrb	r3, [r3, #20]
 800a966:	2b02      	cmp	r3, #2
 800a968:	d018      	beq.n	800a99c <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 800a96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a96c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a970:	2b0c      	cmp	r3, #12
 800a972:	bf28      	it	cs
 800a974:	230c      	movcs	r3, #12
 800a976:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800a978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a97a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800a97e:	10db      	asrs	r3, r3, #3
 800a980:	b21b      	sxth	r3, r3
 800a982:	461a      	mov	r2, r3
 800a984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a986:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800a98a:	4413      	add	r3, r2
 800a98c:	7dfa      	ldrb	r2, [r7, #23]
 800a98e:	493f      	ldr	r1, [pc, #252]	; (800aa8c <tcp_slowtmr+0x28c>)
 800a990:	5c8a      	ldrb	r2, [r1, r2]
 800a992:	4093      	lsls	r3, r2
 800a994:	b21a      	sxth	r2, r3
 800a996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a998:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 800a99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a99e:	2200      	movs	r2, #0
 800a9a0:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800a9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9a4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9aa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	bf28      	it	cs
 800a9b2:	4613      	movcs	r3, r2
 800a9b4:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 800a9b6:	8abb      	ldrh	r3, [r7, #20]
 800a9b8:	085b      	lsrs	r3, r3, #1
 800a9ba:	b29a      	uxth	r2, r3
 800a9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9be:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800a9c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a9cc:	005b      	lsls	r3, r3, #1
 800a9ce:	b29b      	uxth	r3, r3
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	d206      	bcs.n	800a9e2 <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 800a9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a9d8:	005b      	lsls	r3, r3, #1
 800a9da:	b29a      	uxth	r2, r3
 800a9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9de:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 800a9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e4:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800a9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 800a9ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a9ee:	f003 fd49 	bl	800e484 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800a9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9f4:	7d1b      	ldrb	r3, [r3, #20]
 800a9f6:	2b06      	cmp	r3, #6
 800a9f8:	d10f      	bne.n	800aa1a <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800a9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9fc:	7e9b      	ldrb	r3, [r3, #26]
 800a9fe:	f003 0310 	and.w	r3, r3, #16
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d009      	beq.n	800aa1a <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800aa06:	4b18      	ldr	r3, [pc, #96]	; (800aa68 <tcp_slowtmr+0x268>)
 800aa08:	681a      	ldr	r2, [r3, #0]
 800aa0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa0c:	6a1b      	ldr	r3, [r3, #32]
 800aa0e:	1ad3      	subs	r3, r2, r3
 800aa10:	2b28      	cmp	r3, #40	; 0x28
 800aa12:	d902      	bls.n	800aa1a <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800aa14:	7ffb      	ldrb	r3, [r7, #31]
 800aa16:	3301      	adds	r3, #1
 800aa18:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800aa1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa1c:	7a1b      	ldrb	r3, [r3, #8]
 800aa1e:	f003 0308 	and.w	r3, r3, #8
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d05d      	beq.n	800aae2 <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 800aa26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa28:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800aa2a:	2b04      	cmp	r3, #4
 800aa2c:	d003      	beq.n	800aa36 <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 800aa2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa30:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 800aa32:	2b07      	cmp	r3, #7
 800aa34:	d155      	bne.n	800aae2 <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800aa36:	4b0c      	ldr	r3, [pc, #48]	; (800aa68 <tcp_slowtmr+0x268>)
 800aa38:	681a      	ldr	r2, [r3, #0]
 800aa3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa3c:	6a1b      	ldr	r3, [r3, #32]
 800aa3e:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800aa40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa46:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800aa4a:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800aa4e:	4910      	ldr	r1, [pc, #64]	; (800aa90 <tcp_slowtmr+0x290>)
 800aa50:	fba1 1303 	umull	r1, r3, r1, r3
 800aa54:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800aa56:	429a      	cmp	r2, r3
 800aa58:	d91c      	bls.n	800aa94 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800aa5a:	7ffb      	ldrb	r3, [r7, #31]
 800aa5c:	3301      	adds	r3, #1
 800aa5e:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 800aa60:	7fbb      	ldrb	r3, [r7, #30]
 800aa62:	3301      	adds	r3, #1
 800aa64:	77bb      	strb	r3, [r7, #30]
 800aa66:	e03c      	b.n	800aae2 <tcp_slowtmr+0x2e2>
 800aa68:	2000b8c8 	.word	0x2000b8c8
 800aa6c:	20004a8e 	.word	0x20004a8e
 800aa70:	2000b8c4 	.word	0x2000b8c4
 800aa74:	08019e48 	.word	0x08019e48
 800aa78:	08019ff8 	.word	0x08019ff8
 800aa7c:	08019e84 	.word	0x08019e84
 800aa80:	0801a024 	.word	0x0801a024
 800aa84:	0801a050 	.word	0x0801a050
 800aa88:	0801c890 	.word	0x0801c890
 800aa8c:	0801c880 	.word	0x0801c880
 800aa90:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800aa94:	4b97      	ldr	r3, [pc, #604]	; (800acf4 <tcp_slowtmr+0x4f4>)
 800aa96:	681a      	ldr	r2, [r3, #0]
 800aa98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa9a:	6a1b      	ldr	r3, [r3, #32]
 800aa9c:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800aa9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa0:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800aaa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa6:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800aaaa:	4618      	mov	r0, r3
 800aaac:	4b92      	ldr	r3, [pc, #584]	; (800acf8 <tcp_slowtmr+0x4f8>)
 800aaae:	fb03 f300 	mul.w	r3, r3, r0
 800aab2:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 800aab4:	4991      	ldr	r1, [pc, #580]	; (800acfc <tcp_slowtmr+0x4fc>)
 800aab6:	fba1 1303 	umull	r1, r3, r1, r3
 800aaba:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800aabc:	429a      	cmp	r2, r3
 800aabe:	d910      	bls.n	800aae2 <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 800aac0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aac2:	f003 fdbc 	bl	800e63e <tcp_keepalive>
 800aac6:	4603      	mov	r3, r0
 800aac8:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 800aaca:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d107      	bne.n	800aae2 <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 800aad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aad4:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800aad8:	3301      	adds	r3, #1
 800aada:	b2da      	uxtb	r2, r3
 800aadc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aade:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800aae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d016      	beq.n	800ab18 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800aaea:	4b82      	ldr	r3, [pc, #520]	; (800acf4 <tcp_slowtmr+0x4f4>)
 800aaec:	681a      	ldr	r2, [r3, #0]
 800aaee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf0:	6a1b      	ldr	r3, [r3, #32]
 800aaf2:	1ad2      	subs	r2, r2, r3
 800aaf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800aafa:	4619      	mov	r1, r3
 800aafc:	460b      	mov	r3, r1
 800aafe:	005b      	lsls	r3, r3, #1
 800ab00:	440b      	add	r3, r1
 800ab02:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800ab04:	429a      	cmp	r2, r3
 800ab06:	d307      	bcc.n	800ab18 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 800ab08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f000 fa04 	bl	800af1a <tcp_segs_free>
      pcb->ooseq = NULL;
 800ab12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab14:	2200      	movs	r2, #0
 800ab16:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800ab18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab1a:	7d1b      	ldrb	r3, [r3, #20]
 800ab1c:	2b03      	cmp	r3, #3
 800ab1e:	d109      	bne.n	800ab34 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ab20:	4b74      	ldr	r3, [pc, #464]	; (800acf4 <tcp_slowtmr+0x4f4>)
 800ab22:	681a      	ldr	r2, [r3, #0]
 800ab24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab26:	6a1b      	ldr	r3, [r3, #32]
 800ab28:	1ad3      	subs	r3, r2, r3
 800ab2a:	2b28      	cmp	r3, #40	; 0x28
 800ab2c:	d902      	bls.n	800ab34 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800ab2e:	7ffb      	ldrb	r3, [r7, #31]
 800ab30:	3301      	adds	r3, #1
 800ab32:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800ab34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab36:	7d1b      	ldrb	r3, [r3, #20]
 800ab38:	2b09      	cmp	r3, #9
 800ab3a:	d109      	bne.n	800ab50 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ab3c:	4b6d      	ldr	r3, [pc, #436]	; (800acf4 <tcp_slowtmr+0x4f4>)
 800ab3e:	681a      	ldr	r2, [r3, #0]
 800ab40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab42:	6a1b      	ldr	r3, [r3, #32]
 800ab44:	1ad3      	subs	r3, r2, r3
 800ab46:	2bf0      	cmp	r3, #240	; 0xf0
 800ab48:	d902      	bls.n	800ab50 <tcp_slowtmr+0x350>
        ++pcb_remove;
 800ab4a:	7ffb      	ldrb	r3, [r7, #31]
 800ab4c:	3301      	adds	r3, #1
 800ab4e:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ab50:	7ffb      	ldrb	r3, [r7, #31]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d05d      	beq.n	800ac12 <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800ab56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab5c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800ab5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ab60:	f000 fb84 	bl	800b26c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800ab64:	6a3b      	ldr	r3, [r7, #32]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d010      	beq.n	800ab8c <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800ab6a:	4b65      	ldr	r3, [pc, #404]	; (800ad00 <tcp_slowtmr+0x500>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab70:	429a      	cmp	r2, r3
 800ab72:	d106      	bne.n	800ab82 <tcp_slowtmr+0x382>
 800ab74:	4b63      	ldr	r3, [pc, #396]	; (800ad04 <tcp_slowtmr+0x504>)
 800ab76:	f240 4289 	movw	r2, #1161	; 0x489
 800ab7a:	4963      	ldr	r1, [pc, #396]	; (800ad08 <tcp_slowtmr+0x508>)
 800ab7c:	4863      	ldr	r0, [pc, #396]	; (800ad0c <tcp_slowtmr+0x50c>)
 800ab7e:	f00d fbd1 	bl	8018324 <iprintf>
        prev->next = pcb->next;
 800ab82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab84:	68da      	ldr	r2, [r3, #12]
 800ab86:	6a3b      	ldr	r3, [r7, #32]
 800ab88:	60da      	str	r2, [r3, #12]
 800ab8a:	e00f      	b.n	800abac <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800ab8c:	4b5c      	ldr	r3, [pc, #368]	; (800ad00 <tcp_slowtmr+0x500>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab92:	429a      	cmp	r2, r3
 800ab94:	d006      	beq.n	800aba4 <tcp_slowtmr+0x3a4>
 800ab96:	4b5b      	ldr	r3, [pc, #364]	; (800ad04 <tcp_slowtmr+0x504>)
 800ab98:	f240 428d 	movw	r2, #1165	; 0x48d
 800ab9c:	495c      	ldr	r1, [pc, #368]	; (800ad10 <tcp_slowtmr+0x510>)
 800ab9e:	485b      	ldr	r0, [pc, #364]	; (800ad0c <tcp_slowtmr+0x50c>)
 800aba0:	f00d fbc0 	bl	8018324 <iprintf>
        tcp_active_pcbs = pcb->next;
 800aba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aba6:	68db      	ldr	r3, [r3, #12]
 800aba8:	4a55      	ldr	r2, [pc, #340]	; (800ad00 <tcp_slowtmr+0x500>)
 800abaa:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800abac:	7fbb      	ldrb	r3, [r7, #30]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d010      	beq.n	800abd4 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800abb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abb4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800abb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abb8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800abba:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800abbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abbe:	1d1d      	adds	r5, r3, #4
 800abc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc2:	8adb      	ldrh	r3, [r3, #22]
 800abc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abc6:	8b12      	ldrh	r2, [r2, #24]
 800abc8:	9201      	str	r2, [sp, #4]
 800abca:	9300      	str	r3, [sp, #0]
 800abcc:	462b      	mov	r3, r5
 800abce:	4622      	mov	r2, r4
 800abd0:	f003 fbe2 	bl	800e398 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800abd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd6:	691b      	ldr	r3, [r3, #16]
 800abd8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800abda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abdc:	7d1b      	ldrb	r3, [r3, #20]
 800abde:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800abe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800abe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe6:	68db      	ldr	r3, [r3, #12]
 800abe8:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800abea:	6839      	ldr	r1, [r7, #0]
 800abec:	2001      	movs	r0, #1
 800abee:	f7fe f995 	bl	8008f1c <memp_free>

      tcp_active_pcbs_changed = 0;
 800abf2:	4b48      	ldr	r3, [pc, #288]	; (800ad14 <tcp_slowtmr+0x514>)
 800abf4:	2200      	movs	r2, #0
 800abf6:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d004      	beq.n	800ac08 <tcp_slowtmr+0x408>
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	f06f 010c 	mvn.w	r1, #12
 800ac04:	68b8      	ldr	r0, [r7, #8]
 800ac06:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800ac08:	4b42      	ldr	r3, [pc, #264]	; (800ad14 <tcp_slowtmr+0x514>)
 800ac0a:	781b      	ldrb	r3, [r3, #0]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d035      	beq.n	800ac7c <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 800ac10:	e606      	b.n	800a820 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800ac12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac14:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800ac16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac18:	68db      	ldr	r3, [r3, #12]
 800ac1a:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800ac1c:	6a3b      	ldr	r3, [r7, #32]
 800ac1e:	7edb      	ldrb	r3, [r3, #27]
 800ac20:	3301      	adds	r3, #1
 800ac22:	b2da      	uxtb	r2, r3
 800ac24:	6a3b      	ldr	r3, [r7, #32]
 800ac26:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800ac28:	6a3b      	ldr	r3, [r7, #32]
 800ac2a:	7eda      	ldrb	r2, [r3, #27]
 800ac2c:	6a3b      	ldr	r3, [r7, #32]
 800ac2e:	7f1b      	ldrb	r3, [r3, #28]
 800ac30:	429a      	cmp	r2, r3
 800ac32:	d323      	bcc.n	800ac7c <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 800ac34:	6a3b      	ldr	r3, [r7, #32]
 800ac36:	2200      	movs	r2, #0
 800ac38:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800ac3a:	4b36      	ldr	r3, [pc, #216]	; (800ad14 <tcp_slowtmr+0x514>)
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800ac40:	6a3b      	ldr	r3, [r7, #32]
 800ac42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d00a      	beq.n	800ac60 <tcp_slowtmr+0x460>
 800ac4a:	6a3b      	ldr	r3, [r7, #32]
 800ac4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac50:	6a3a      	ldr	r2, [r7, #32]
 800ac52:	6912      	ldr	r2, [r2, #16]
 800ac54:	6a39      	ldr	r1, [r7, #32]
 800ac56:	4610      	mov	r0, r2
 800ac58:	4798      	blx	r3
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	777b      	strb	r3, [r7, #29]
 800ac5e:	e001      	b.n	800ac64 <tcp_slowtmr+0x464>
 800ac60:	2300      	movs	r3, #0
 800ac62:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 800ac64:	4b2b      	ldr	r3, [pc, #172]	; (800ad14 <tcp_slowtmr+0x514>)
 800ac66:	781b      	ldrb	r3, [r3, #0]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d000      	beq.n	800ac6e <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 800ac6c:	e5d8      	b.n	800a820 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800ac6e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d102      	bne.n	800ac7c <tcp_slowtmr+0x47c>
          tcp_output(prev);
 800ac76:	6a38      	ldr	r0, [r7, #32]
 800ac78:	f003 f904 	bl	800de84 <tcp_output>
  while (pcb != NULL) {
 800ac7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	f47f add4 	bne.w	800a82c <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800ac84:	2300      	movs	r3, #0
 800ac86:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 800ac88:	4b23      	ldr	r3, [pc, #140]	; (800ad18 <tcp_slowtmr+0x518>)
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800ac8e:	e068      	b.n	800ad62 <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ac90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac92:	7d1b      	ldrb	r3, [r3, #20]
 800ac94:	2b0a      	cmp	r3, #10
 800ac96:	d006      	beq.n	800aca6 <tcp_slowtmr+0x4a6>
 800ac98:	4b1a      	ldr	r3, [pc, #104]	; (800ad04 <tcp_slowtmr+0x504>)
 800ac9a:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800ac9e:	491f      	ldr	r1, [pc, #124]	; (800ad1c <tcp_slowtmr+0x51c>)
 800aca0:	481a      	ldr	r0, [pc, #104]	; (800ad0c <tcp_slowtmr+0x50c>)
 800aca2:	f00d fb3f 	bl	8018324 <iprintf>
    pcb_remove = 0;
 800aca6:	2300      	movs	r3, #0
 800aca8:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800acaa:	4b12      	ldr	r3, [pc, #72]	; (800acf4 <tcp_slowtmr+0x4f4>)
 800acac:	681a      	ldr	r2, [r3, #0]
 800acae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb0:	6a1b      	ldr	r3, [r3, #32]
 800acb2:	1ad3      	subs	r3, r2, r3
 800acb4:	2bf0      	cmp	r3, #240	; 0xf0
 800acb6:	d902      	bls.n	800acbe <tcp_slowtmr+0x4be>
      ++pcb_remove;
 800acb8:	7ffb      	ldrb	r3, [r7, #31]
 800acba:	3301      	adds	r3, #1
 800acbc:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800acbe:	7ffb      	ldrb	r3, [r7, #31]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d049      	beq.n	800ad58 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800acc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800acc6:	f000 fad1 	bl	800b26c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800acca:	6a3b      	ldr	r3, [r7, #32]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d029      	beq.n	800ad24 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800acd0:	4b11      	ldr	r3, [pc, #68]	; (800ad18 <tcp_slowtmr+0x518>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800acd6:	429a      	cmp	r2, r3
 800acd8:	d106      	bne.n	800ace8 <tcp_slowtmr+0x4e8>
 800acda:	4b0a      	ldr	r3, [pc, #40]	; (800ad04 <tcp_slowtmr+0x504>)
 800acdc:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800ace0:	490f      	ldr	r1, [pc, #60]	; (800ad20 <tcp_slowtmr+0x520>)
 800ace2:	480a      	ldr	r0, [pc, #40]	; (800ad0c <tcp_slowtmr+0x50c>)
 800ace4:	f00d fb1e 	bl	8018324 <iprintf>
        prev->next = pcb->next;
 800ace8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acea:	68da      	ldr	r2, [r3, #12]
 800acec:	6a3b      	ldr	r3, [r7, #32]
 800acee:	60da      	str	r2, [r3, #12]
 800acf0:	e028      	b.n	800ad44 <tcp_slowtmr+0x544>
 800acf2:	bf00      	nop
 800acf4:	2000b8c8 	.word	0x2000b8c8
 800acf8:	000124f8 	.word	0x000124f8
 800acfc:	10624dd3 	.word	0x10624dd3
 800ad00:	2000b8c4 	.word	0x2000b8c4
 800ad04:	08019e48 	.word	0x08019e48
 800ad08:	0801a080 	.word	0x0801a080
 800ad0c:	08019e84 	.word	0x08019e84
 800ad10:	0801a0ac 	.word	0x0801a0ac
 800ad14:	2000b8c0 	.word	0x2000b8c0
 800ad18:	2000b8d4 	.word	0x2000b8d4
 800ad1c:	0801a0d8 	.word	0x0801a0d8
 800ad20:	0801a108 	.word	0x0801a108
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800ad24:	4b12      	ldr	r3, [pc, #72]	; (800ad70 <tcp_slowtmr+0x570>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad2a:	429a      	cmp	r2, r3
 800ad2c:	d006      	beq.n	800ad3c <tcp_slowtmr+0x53c>
 800ad2e:	4b11      	ldr	r3, [pc, #68]	; (800ad74 <tcp_slowtmr+0x574>)
 800ad30:	f240 42cf 	movw	r2, #1231	; 0x4cf
 800ad34:	4910      	ldr	r1, [pc, #64]	; (800ad78 <tcp_slowtmr+0x578>)
 800ad36:	4811      	ldr	r0, [pc, #68]	; (800ad7c <tcp_slowtmr+0x57c>)
 800ad38:	f00d faf4 	bl	8018324 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800ad3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad3e:	68db      	ldr	r3, [r3, #12]
 800ad40:	4a0b      	ldr	r2, [pc, #44]	; (800ad70 <tcp_slowtmr+0x570>)
 800ad42:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800ad44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad46:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 800ad48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad4a:	68db      	ldr	r3, [r3, #12]
 800ad4c:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800ad4e:	69b9      	ldr	r1, [r7, #24]
 800ad50:	2001      	movs	r0, #1
 800ad52:	f7fe f8e3 	bl	8008f1c <memp_free>
 800ad56:	e004      	b.n	800ad62 <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 800ad58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad5a:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800ad5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad5e:	68db      	ldr	r3, [r3, #12]
 800ad60:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800ad62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d193      	bne.n	800ac90 <tcp_slowtmr+0x490>
    }
  }
}
 800ad68:	bf00      	nop
 800ad6a:	3728      	adds	r7, #40	; 0x28
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bdb0      	pop	{r4, r5, r7, pc}
 800ad70:	2000b8d4 	.word	0x2000b8d4
 800ad74:	08019e48 	.word	0x08019e48
 800ad78:	0801a130 	.word	0x0801a130
 800ad7c:	08019e84 	.word	0x08019e84

0800ad80 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b082      	sub	sp, #8
 800ad84:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ad86:	4b2d      	ldr	r3, [pc, #180]	; (800ae3c <tcp_fasttmr+0xbc>)
 800ad88:	781b      	ldrb	r3, [r3, #0]
 800ad8a:	3301      	adds	r3, #1
 800ad8c:	b2da      	uxtb	r2, r3
 800ad8e:	4b2b      	ldr	r3, [pc, #172]	; (800ae3c <tcp_fasttmr+0xbc>)
 800ad90:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800ad92:	4b2b      	ldr	r3, [pc, #172]	; (800ae40 <tcp_fasttmr+0xc0>)
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ad98:	e048      	b.n	800ae2c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	7f5a      	ldrb	r2, [r3, #29]
 800ad9e:	4b27      	ldr	r3, [pc, #156]	; (800ae3c <tcp_fasttmr+0xbc>)
 800ada0:	781b      	ldrb	r3, [r3, #0]
 800ada2:	429a      	cmp	r2, r3
 800ada4:	d03f      	beq.n	800ae26 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800ada6:	4b25      	ldr	r3, [pc, #148]	; (800ae3c <tcp_fasttmr+0xbc>)
 800ada8:	781a      	ldrb	r2, [r3, #0]
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	7e9b      	ldrb	r3, [r3, #26]
 800adb2:	f003 0301 	and.w	r3, r3, #1
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d010      	beq.n	800addc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	7e9b      	ldrb	r3, [r3, #26]
 800adbe:	f043 0302 	orr.w	r3, r3, #2
 800adc2:	b2da      	uxtb	r2, r3
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f003 f85b 	bl	800de84 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	7e9b      	ldrb	r3, [r3, #26]
 800add2:	f023 0303 	bic.w	r3, r3, #3
 800add6:	b2da      	uxtb	r2, r3
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	7e9b      	ldrb	r3, [r3, #26]
 800ade0:	f003 0308 	and.w	r3, r3, #8
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d009      	beq.n	800adfc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	7e9b      	ldrb	r3, [r3, #26]
 800adec:	f023 0308 	bic.w	r3, r3, #8
 800adf0:	b2da      	uxtb	r2, r3
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f7ff fb1e 	bl	800a438 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	68db      	ldr	r3, [r3, #12]
 800ae00:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d00a      	beq.n	800ae20 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800ae0a:	4b0e      	ldr	r3, [pc, #56]	; (800ae44 <tcp_fasttmr+0xc4>)
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f000 f819 	bl	800ae48 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800ae16:	4b0b      	ldr	r3, [pc, #44]	; (800ae44 <tcp_fasttmr+0xc4>)
 800ae18:	781b      	ldrb	r3, [r3, #0]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d000      	beq.n	800ae20 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800ae1e:	e7b8      	b.n	800ad92 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	607b      	str	r3, [r7, #4]
 800ae24:	e002      	b.n	800ae2c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	68db      	ldr	r3, [r3, #12]
 800ae2a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d1b3      	bne.n	800ad9a <tcp_fasttmr+0x1a>
    }
  }
}
 800ae32:	bf00      	nop
 800ae34:	3708      	adds	r7, #8
 800ae36:	46bd      	mov	sp, r7
 800ae38:	bd80      	pop	{r7, pc}
 800ae3a:	bf00      	nop
 800ae3c:	20004a8e 	.word	0x20004a8e
 800ae40:	2000b8c4 	.word	0x2000b8c4
 800ae44:	2000b8c0 	.word	0x2000b8c0

0800ae48 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800ae48:	b590      	push	{r4, r7, lr}
 800ae4a:	b085      	sub	sp, #20
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae54:	7b5b      	ldrb	r3, [r3, #13]
 800ae56:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae5c:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2200      	movs	r2, #0
 800ae62:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d00b      	beq.n	800ae86 <tcp_process_refused_data+0x3e>
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6918      	ldr	r0, [r3, #16]
 800ae78:	2300      	movs	r3, #0
 800ae7a:	68ba      	ldr	r2, [r7, #8]
 800ae7c:	6879      	ldr	r1, [r7, #4]
 800ae7e:	47a0      	blx	r4
 800ae80:	4603      	mov	r3, r0
 800ae82:	73fb      	strb	r3, [r7, #15]
 800ae84:	e007      	b.n	800ae96 <tcp_process_refused_data+0x4e>
 800ae86:	2300      	movs	r3, #0
 800ae88:	68ba      	ldr	r2, [r7, #8]
 800ae8a:	6879      	ldr	r1, [r7, #4]
 800ae8c:	2000      	movs	r0, #0
 800ae8e:	f000 f88c 	bl	800afaa <tcp_recv_null>
 800ae92:	4603      	mov	r3, r0
 800ae94:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ae96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d12a      	bne.n	800aef4 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800ae9e:	7bbb      	ldrb	r3, [r7, #14]
 800aea0:	f003 0320 	and.w	r3, r3, #32
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d033      	beq.n	800af10 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aeac:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800aeb0:	d005      	beq.n	800aebe <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aeb6:	3301      	adds	r3, #1
 800aeb8:	b29a      	uxth	r2, r3
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d00b      	beq.n	800aee0 <tcp_process_refused_data+0x98>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6918      	ldr	r0, [r3, #16]
 800aed2:	2300      	movs	r3, #0
 800aed4:	2200      	movs	r2, #0
 800aed6:	6879      	ldr	r1, [r7, #4]
 800aed8:	47a0      	blx	r4
 800aeda:	4603      	mov	r3, r0
 800aedc:	73fb      	strb	r3, [r7, #15]
 800aede:	e001      	b.n	800aee4 <tcp_process_refused_data+0x9c>
 800aee0:	2300      	movs	r3, #0
 800aee2:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800aee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aee8:	f113 0f0d 	cmn.w	r3, #13
 800aeec:	d110      	bne.n	800af10 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 800aeee:	f06f 030c 	mvn.w	r3, #12
 800aef2:	e00e      	b.n	800af12 <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 800aef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aef8:	f113 0f0d 	cmn.w	r3, #13
 800aefc:	d102      	bne.n	800af04 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800aefe:	f06f 030c 	mvn.w	r3, #12
 800af02:	e006      	b.n	800af12 <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	68ba      	ldr	r2, [r7, #8]
 800af08:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 800af0a:	f06f 0304 	mvn.w	r3, #4
 800af0e:	e000      	b.n	800af12 <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 800af10:	2300      	movs	r3, #0
}
 800af12:	4618      	mov	r0, r3
 800af14:	3714      	adds	r7, #20
 800af16:	46bd      	mov	sp, r7
 800af18:	bd90      	pop	{r4, r7, pc}

0800af1a <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800af1a:	b580      	push	{r7, lr}
 800af1c:	b084      	sub	sp, #16
 800af1e:	af00      	add	r7, sp, #0
 800af20:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800af22:	e007      	b.n	800af34 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f000 f809 	bl	800af42 <tcp_seg_free>
    seg = next;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d1f4      	bne.n	800af24 <tcp_segs_free+0xa>
  }
}
 800af3a:	bf00      	nop
 800af3c:	3710      	adds	r7, #16
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}

0800af42 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800af42:	b580      	push	{r7, lr}
 800af44:	b082      	sub	sp, #8
 800af46:	af00      	add	r7, sp, #0
 800af48:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d00c      	beq.n	800af6a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	685b      	ldr	r3, [r3, #4]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d004      	beq.n	800af62 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	685b      	ldr	r3, [r3, #4]
 800af5c:	4618      	mov	r0, r3
 800af5e:	f7fe fd4f 	bl	8009a00 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800af62:	6879      	ldr	r1, [r7, #4]
 800af64:	2003      	movs	r0, #3
 800af66:	f7fd ffd9 	bl	8008f1c <memp_free>
  }
}
 800af6a:	bf00      	nop
 800af6c:	3708      	adds	r7, #8
 800af6e:	46bd      	mov	sp, r7
 800af70:	bd80      	pop	{r7, pc}

0800af72 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800af72:	b580      	push	{r7, lr}
 800af74:	b084      	sub	sp, #16
 800af76:	af00      	add	r7, sp, #0
 800af78:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800af7a:	2003      	movs	r0, #3
 800af7c:	f7fd ff7c 	bl	8008e78 <memp_malloc>
 800af80:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d101      	bne.n	800af8c <tcp_seg_copy+0x1a>
    return NULL;
 800af88:	2300      	movs	r3, #0
 800af8a:	e00a      	b.n	800afa2 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800af8c:	2210      	movs	r2, #16
 800af8e:	6879      	ldr	r1, [r7, #4]
 800af90:	68f8      	ldr	r0, [r7, #12]
 800af92:	f00d f9b4 	bl	80182fe <memcpy>
  pbuf_ref(cseg->p);
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	685b      	ldr	r3, [r3, #4]
 800af9a:	4618      	mov	r0, r3
 800af9c:	f7fe fde0 	bl	8009b60 <pbuf_ref>
  return cseg;
 800afa0:	68fb      	ldr	r3, [r7, #12]
}
 800afa2:	4618      	mov	r0, r3
 800afa4:	3710      	adds	r7, #16
 800afa6:	46bd      	mov	sp, r7
 800afa8:	bd80      	pop	{r7, pc}

0800afaa <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800afaa:	b580      	push	{r7, lr}
 800afac:	b084      	sub	sp, #16
 800afae:	af00      	add	r7, sp, #0
 800afb0:	60f8      	str	r0, [r7, #12]
 800afb2:	60b9      	str	r1, [r7, #8]
 800afb4:	607a      	str	r2, [r7, #4]
 800afb6:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d009      	beq.n	800afd2 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	891b      	ldrh	r3, [r3, #8]
 800afc2:	4619      	mov	r1, r3
 800afc4:	68b8      	ldr	r0, [r7, #8]
 800afc6:	f7ff fbc1 	bl	800a74c <tcp_recved>
    pbuf_free(p);
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f7fe fd18 	bl	8009a00 <pbuf_free>
 800afd0:	e008      	b.n	800afe4 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 800afd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d104      	bne.n	800afe4 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 800afda:	68b8      	ldr	r0, [r7, #8]
 800afdc:	f7ff fa92 	bl	800a504 <tcp_close>
 800afe0:	4603      	mov	r3, r0
 800afe2:	e000      	b.n	800afe6 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 800afe4:	2300      	movs	r3, #0
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	3710      	adds	r7, #16
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}
	...

0800aff0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b086      	sub	sp, #24
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	4603      	mov	r3, r0
 800aff8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800affa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800affe:	2b00      	cmp	r3, #0
 800b000:	db01      	blt.n	800b006 <tcp_kill_prio+0x16>
 800b002:	79fb      	ldrb	r3, [r7, #7]
 800b004:	e000      	b.n	800b008 <tcp_kill_prio+0x18>
 800b006:	237f      	movs	r3, #127	; 0x7f
 800b008:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 800b00a:	2300      	movs	r3, #0
 800b00c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b00e:	2300      	movs	r3, #0
 800b010:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b012:	4b16      	ldr	r3, [pc, #88]	; (800b06c <tcp_kill_prio+0x7c>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	617b      	str	r3, [r7, #20]
 800b018:	e01a      	b.n	800b050 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	7d5b      	ldrb	r3, [r3, #21]
 800b01e:	7afa      	ldrb	r2, [r7, #11]
 800b020:	429a      	cmp	r2, r3
 800b022:	d312      	bcc.n	800b04a <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b024:	4b12      	ldr	r3, [pc, #72]	; (800b070 <tcp_kill_prio+0x80>)
 800b026:	681a      	ldr	r2, [r3, #0]
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	6a1b      	ldr	r3, [r3, #32]
 800b02c:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 800b02e:	68fa      	ldr	r2, [r7, #12]
 800b030:	429a      	cmp	r2, r3
 800b032:	d80a      	bhi.n	800b04a <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 800b034:	4b0e      	ldr	r3, [pc, #56]	; (800b070 <tcp_kill_prio+0x80>)
 800b036:	681a      	ldr	r2, [r3, #0]
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	6a1b      	ldr	r3, [r3, #32]
 800b03c:	1ad3      	subs	r3, r2, r3
 800b03e:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 800b040:	697b      	ldr	r3, [r7, #20]
 800b042:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	7d5b      	ldrb	r3, [r3, #21]
 800b048:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	68db      	ldr	r3, [r3, #12]
 800b04e:	617b      	str	r3, [r7, #20]
 800b050:	697b      	ldr	r3, [r7, #20]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d1e1      	bne.n	800b01a <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 800b056:	693b      	ldr	r3, [r7, #16]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d002      	beq.n	800b062 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800b05c:	6938      	ldr	r0, [r7, #16]
 800b05e:	f7ff fb1b 	bl	800a698 <tcp_abort>
  }
}
 800b062:	bf00      	nop
 800b064:	3718      	adds	r7, #24
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}
 800b06a:	bf00      	nop
 800b06c:	2000b8c4 	.word	0x2000b8c4
 800b070:	2000b8c8 	.word	0x2000b8c8

0800b074 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b086      	sub	sp, #24
 800b078:	af00      	add	r7, sp, #0
 800b07a:	4603      	mov	r3, r0
 800b07c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800b07e:	79fb      	ldrb	r3, [r7, #7]
 800b080:	2b08      	cmp	r3, #8
 800b082:	d009      	beq.n	800b098 <tcp_kill_state+0x24>
 800b084:	79fb      	ldrb	r3, [r7, #7]
 800b086:	2b09      	cmp	r3, #9
 800b088:	d006      	beq.n	800b098 <tcp_kill_state+0x24>
 800b08a:	4b1a      	ldr	r3, [pc, #104]	; (800b0f4 <tcp_kill_state+0x80>)
 800b08c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800b090:	4919      	ldr	r1, [pc, #100]	; (800b0f8 <tcp_kill_state+0x84>)
 800b092:	481a      	ldr	r0, [pc, #104]	; (800b0fc <tcp_kill_state+0x88>)
 800b094:	f00d f946 	bl	8018324 <iprintf>

  inactivity = 0;
 800b098:	2300      	movs	r3, #0
 800b09a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b09c:	2300      	movs	r3, #0
 800b09e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b0a0:	4b17      	ldr	r3, [pc, #92]	; (800b100 <tcp_kill_state+0x8c>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	617b      	str	r3, [r7, #20]
 800b0a6:	e017      	b.n	800b0d8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800b0a8:	697b      	ldr	r3, [r7, #20]
 800b0aa:	7d1b      	ldrb	r3, [r3, #20]
 800b0ac:	79fa      	ldrb	r2, [r7, #7]
 800b0ae:	429a      	cmp	r2, r3
 800b0b0:	d10f      	bne.n	800b0d2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b0b2:	4b14      	ldr	r3, [pc, #80]	; (800b104 <tcp_kill_state+0x90>)
 800b0b4:	681a      	ldr	r2, [r3, #0]
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	6a1b      	ldr	r3, [r3, #32]
 800b0ba:	1ad3      	subs	r3, r2, r3
 800b0bc:	68fa      	ldr	r2, [r7, #12]
 800b0be:	429a      	cmp	r2, r3
 800b0c0:	d807      	bhi.n	800b0d2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800b0c2:	4b10      	ldr	r3, [pc, #64]	; (800b104 <tcp_kill_state+0x90>)
 800b0c4:	681a      	ldr	r2, [r3, #0]
 800b0c6:	697b      	ldr	r3, [r7, #20]
 800b0c8:	6a1b      	ldr	r3, [r3, #32]
 800b0ca:	1ad3      	subs	r3, r2, r3
 800b0cc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	68db      	ldr	r3, [r3, #12]
 800b0d6:	617b      	str	r3, [r7, #20]
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d1e4      	bne.n	800b0a8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800b0de:	693b      	ldr	r3, [r7, #16]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d003      	beq.n	800b0ec <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800b0e4:	2100      	movs	r1, #0
 800b0e6:	6938      	ldr	r0, [r7, #16]
 800b0e8:	f7ff fa24 	bl	800a534 <tcp_abandon>
  }
}
 800b0ec:	bf00      	nop
 800b0ee:	3718      	adds	r7, #24
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}
 800b0f4:	08019e48 	.word	0x08019e48
 800b0f8:	0801a158 	.word	0x0801a158
 800b0fc:	08019e84 	.word	0x08019e84
 800b100:	2000b8c4 	.word	0x2000b8c4
 800b104:	2000b8c8 	.word	0x2000b8c8

0800b108 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b084      	sub	sp, #16
 800b10c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800b10e:	2300      	movs	r3, #0
 800b110:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800b112:	2300      	movs	r3, #0
 800b114:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b116:	4b12      	ldr	r3, [pc, #72]	; (800b160 <tcp_kill_timewait+0x58>)
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	60fb      	str	r3, [r7, #12]
 800b11c:	e012      	b.n	800b144 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b11e:	4b11      	ldr	r3, [pc, #68]	; (800b164 <tcp_kill_timewait+0x5c>)
 800b120:	681a      	ldr	r2, [r3, #0]
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	6a1b      	ldr	r3, [r3, #32]
 800b126:	1ad3      	subs	r3, r2, r3
 800b128:	687a      	ldr	r2, [r7, #4]
 800b12a:	429a      	cmp	r2, r3
 800b12c:	d807      	bhi.n	800b13e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800b12e:	4b0d      	ldr	r3, [pc, #52]	; (800b164 <tcp_kill_timewait+0x5c>)
 800b130:	681a      	ldr	r2, [r3, #0]
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	6a1b      	ldr	r3, [r3, #32]
 800b136:	1ad3      	subs	r3, r2, r3
 800b138:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	68db      	ldr	r3, [r3, #12]
 800b142:	60fb      	str	r3, [r7, #12]
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d1e9      	bne.n	800b11e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d002      	beq.n	800b156 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800b150:	68b8      	ldr	r0, [r7, #8]
 800b152:	f7ff faa1 	bl	800a698 <tcp_abort>
  }
}
 800b156:	bf00      	nop
 800b158:	3710      	adds	r7, #16
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}
 800b15e:	bf00      	nop
 800b160:	2000b8d4 	.word	0x2000b8d4
 800b164:	2000b8c8 	.word	0x2000b8c8

0800b168 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b084      	sub	sp, #16
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	4603      	mov	r3, r0
 800b170:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b172:	2001      	movs	r0, #1
 800b174:	f7fd fe80 	bl	8008e78 <memp_malloc>
 800b178:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d124      	bne.n	800b1ca <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800b180:	f7ff ffc2 	bl	800b108 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b184:	2001      	movs	r0, #1
 800b186:	f7fd fe77 	bl	8008e78 <memp_malloc>
 800b18a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d11b      	bne.n	800b1ca <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800b192:	2009      	movs	r0, #9
 800b194:	f7ff ff6e 	bl	800b074 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b198:	2001      	movs	r0, #1
 800b19a:	f7fd fe6d 	bl	8008e78 <memp_malloc>
 800b19e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d111      	bne.n	800b1ca <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800b1a6:	2008      	movs	r0, #8
 800b1a8:	f7ff ff64 	bl	800b074 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b1ac:	2001      	movs	r0, #1
 800b1ae:	f7fd fe63 	bl	8008e78 <memp_malloc>
 800b1b2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d107      	bne.n	800b1ca <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800b1ba:	79fb      	ldrb	r3, [r7, #7]
 800b1bc:	4618      	mov	r0, r3
 800b1be:	f7ff ff17 	bl	800aff0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b1c2:	2001      	movs	r0, #1
 800b1c4:	f7fd fe58 	bl	8008e78 <memp_malloc>
 800b1c8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d03f      	beq.n	800b250 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800b1d0:	2298      	movs	r2, #152	; 0x98
 800b1d2:	2100      	movs	r1, #0
 800b1d4:	68f8      	ldr	r0, [r7, #12]
 800b1d6:	f00d f89d 	bl	8018314 <memset>
    pcb->prio = prio;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	79fa      	ldrb	r2, [r7, #7]
 800b1de:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800b1e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800b1f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	22ff      	movs	r2, #255	; 0xff
 800b1fe:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b206:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	2206      	movs	r2, #6
 800b20c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	2206      	movs	r2, #6
 800b214:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b21c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	2201      	movs	r2, #1
 800b222:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800b226:	4b0d      	ldr	r3, [pc, #52]	; (800b25c <tcp_alloc+0xf4>)
 800b228:	681a      	ldr	r2, [r3, #0]
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800b22e:	4b0c      	ldr	r3, [pc, #48]	; (800b260 <tcp_alloc+0xf8>)
 800b230:	781a      	ldrb	r2, [r3, #0]
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800b23c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	4a08      	ldr	r2, [pc, #32]	; (800b264 <tcp_alloc+0xfc>)
 800b244:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	4a07      	ldr	r2, [pc, #28]	; (800b268 <tcp_alloc+0x100>)
 800b24c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800b250:	68fb      	ldr	r3, [r7, #12]
}
 800b252:	4618      	mov	r0, r3
 800b254:	3710      	adds	r7, #16
 800b256:	46bd      	mov	sp, r7
 800b258:	bd80      	pop	{r7, pc}
 800b25a:	bf00      	nop
 800b25c:	2000b8c8 	.word	0x2000b8c8
 800b260:	20004a8e 	.word	0x20004a8e
 800b264:	0800afab 	.word	0x0800afab
 800b268:	006ddd00 	.word	0x006ddd00

0800b26c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b082      	sub	sp, #8
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	7d1b      	ldrb	r3, [r3, #20]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d034      	beq.n	800b2e6 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800b280:	2b0a      	cmp	r3, #10
 800b282:	d030      	beq.n	800b2e6 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 800b288:	2b01      	cmp	r3, #1
 800b28a:	d02c      	beq.n	800b2e6 <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b290:	2b00      	cmp	r3, #0
 800b292:	d007      	beq.n	800b2a4 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b298:	4618      	mov	r0, r3
 800b29a:	f7fe fbb1 	bl	8009a00 <pbuf_free>
      pcb->refused_data = NULL;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2200      	movs	r2, #0
 800b2a2:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	f7ff fe36 	bl	800af1a <tcp_segs_free>
    pcb->ooseq = NULL;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b2ba:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f7ff fe2a 	bl	800af1a <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f7ff fe25 	bl	800af1a <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	669a      	str	r2, [r3, #104]	; 0x68
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 800b2e6:	bf00      	nop
 800b2e8:	3708      	adds	r7, #8
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
	...

0800b2f0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b084      	sub	sp, #16
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
 800b2f8:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	683a      	ldr	r2, [r7, #0]
 800b300:	429a      	cmp	r2, r3
 800b302:	d105      	bne.n	800b310 <tcp_pcb_remove+0x20>
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	68da      	ldr	r2, [r3, #12]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	601a      	str	r2, [r3, #0]
 800b30e:	e013      	b.n	800b338 <tcp_pcb_remove+0x48>
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	60fb      	str	r3, [r7, #12]
 800b316:	e00c      	b.n	800b332 <tcp_pcb_remove+0x42>
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	68db      	ldr	r3, [r3, #12]
 800b31c:	683a      	ldr	r2, [r7, #0]
 800b31e:	429a      	cmp	r2, r3
 800b320:	d104      	bne.n	800b32c <tcp_pcb_remove+0x3c>
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	68da      	ldr	r2, [r3, #12]
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	60da      	str	r2, [r3, #12]
 800b32a:	e005      	b.n	800b338 <tcp_pcb_remove+0x48>
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	68db      	ldr	r3, [r3, #12]
 800b330:	60fb      	str	r3, [r7, #12]
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d1ef      	bne.n	800b318 <tcp_pcb_remove+0x28>
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	2200      	movs	r2, #0
 800b33c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800b33e:	6838      	ldr	r0, [r7, #0]
 800b340:	f7ff ff94 	bl	800b26c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	7d1b      	ldrb	r3, [r3, #20]
 800b348:	2b0a      	cmp	r3, #10
 800b34a:	d013      	beq.n	800b374 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 800b350:	2b01      	cmp	r3, #1
 800b352:	d00f      	beq.n	800b374 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	7e9b      	ldrb	r3, [r3, #26]
 800b358:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d009      	beq.n	800b374 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 800b360:	683b      	ldr	r3, [r7, #0]
 800b362:	7e9b      	ldrb	r3, [r3, #26]
 800b364:	f043 0302 	orr.w	r3, r3, #2
 800b368:	b2da      	uxtb	r2, r3
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800b36e:	6838      	ldr	r0, [r7, #0]
 800b370:	f002 fd88 	bl	800de84 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	7d1b      	ldrb	r3, [r3, #20]
 800b378:	2b01      	cmp	r3, #1
 800b37a:	d020      	beq.n	800b3be <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b380:	2b00      	cmp	r3, #0
 800b382:	d006      	beq.n	800b392 <tcp_pcb_remove+0xa2>
 800b384:	4b13      	ldr	r3, [pc, #76]	; (800b3d4 <tcp_pcb_remove+0xe4>)
 800b386:	f240 7253 	movw	r2, #1875	; 0x753
 800b38a:	4913      	ldr	r1, [pc, #76]	; (800b3d8 <tcp_pcb_remove+0xe8>)
 800b38c:	4813      	ldr	r0, [pc, #76]	; (800b3dc <tcp_pcb_remove+0xec>)
 800b38e:	f00c ffc9 	bl	8018324 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b396:	2b00      	cmp	r3, #0
 800b398:	d006      	beq.n	800b3a8 <tcp_pcb_remove+0xb8>
 800b39a:	4b0e      	ldr	r3, [pc, #56]	; (800b3d4 <tcp_pcb_remove+0xe4>)
 800b39c:	f240 7254 	movw	r2, #1876	; 0x754
 800b3a0:	490f      	ldr	r1, [pc, #60]	; (800b3e0 <tcp_pcb_remove+0xf0>)
 800b3a2:	480e      	ldr	r0, [pc, #56]	; (800b3dc <tcp_pcb_remove+0xec>)
 800b3a4:	f00c ffbe 	bl	8018324 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800b3a8:	683b      	ldr	r3, [r7, #0]
 800b3aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d006      	beq.n	800b3be <tcp_pcb_remove+0xce>
 800b3b0:	4b08      	ldr	r3, [pc, #32]	; (800b3d4 <tcp_pcb_remove+0xe4>)
 800b3b2:	f240 7256 	movw	r2, #1878	; 0x756
 800b3b6:	490b      	ldr	r1, [pc, #44]	; (800b3e4 <tcp_pcb_remove+0xf4>)
 800b3b8:	4808      	ldr	r0, [pc, #32]	; (800b3dc <tcp_pcb_remove+0xec>)
 800b3ba:	f00c ffb3 	bl	8018324 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800b3ca:	bf00      	nop
 800b3cc:	3710      	adds	r7, #16
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}
 800b3d2:	bf00      	nop
 800b3d4:	08019e48 	.word	0x08019e48
 800b3d8:	0801a200 	.word	0x0801a200
 800b3dc:	08019e84 	.word	0x08019e84
 800b3e0:	0801a218 	.word	0x0801a218
 800b3e4:	0801a234 	.word	0x0801a234

0800b3e8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800b3e8:	b480      	push	{r7}
 800b3ea:	b083      	sub	sp, #12
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800b3f0:	4b06      	ldr	r3, [pc, #24]	; (800b40c <tcp_next_iss+0x24>)
 800b3f2:	681a      	ldr	r2, [r3, #0]
 800b3f4:	4b06      	ldr	r3, [pc, #24]	; (800b410 <tcp_next_iss+0x28>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	4413      	add	r3, r2
 800b3fa:	4a04      	ldr	r2, [pc, #16]	; (800b40c <tcp_next_iss+0x24>)
 800b3fc:	6013      	str	r3, [r2, #0]
  return iss;
 800b3fe:	4b03      	ldr	r3, [pc, #12]	; (800b40c <tcp_next_iss+0x24>)
 800b400:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800b402:	4618      	mov	r0, r3
 800b404:	370c      	adds	r7, #12
 800b406:	46bd      	mov	sp, r7
 800b408:	bc80      	pop	{r7}
 800b40a:	4770      	bx	lr
 800b40c:	20000010 	.word	0x20000010
 800b410:	2000b8c8 	.word	0x2000b8c8

0800b414 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b084      	sub	sp, #16
 800b418:	af00      	add	r7, sp, #0
 800b41a:	4603      	mov	r3, r0
 800b41c:	6039      	str	r1, [r7, #0]
 800b41e:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 800b420:	6838      	ldr	r0, [r7, #0]
 800b422:	f006 fdd9 	bl	8011fd8 <ip4_route>
 800b426:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d101      	bne.n	800b432 <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 800b42e:	88fb      	ldrh	r3, [r7, #6]
 800b430:	e010      	b.n	800b454 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b436:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800b438:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d008      	beq.n	800b452 <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 800b440:	897b      	ldrh	r3, [r7, #10]
 800b442:	3b28      	subs	r3, #40	; 0x28
 800b444:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800b446:	893a      	ldrh	r2, [r7, #8]
 800b448:	88fb      	ldrh	r3, [r7, #6]
 800b44a:	4293      	cmp	r3, r2
 800b44c:	bf28      	it	cs
 800b44e:	4613      	movcs	r3, r2
 800b450:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 800b452:	88fb      	ldrh	r3, [r7, #6]
}
 800b454:	4618      	mov	r0, r3
 800b456:	3710      	adds	r7, #16
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}

0800b45c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b084      	sub	sp, #16
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
 800b464:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800b46a:	e011      	b.n	800b490 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	681a      	ldr	r2, [r3, #0]
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	429a      	cmp	r2, r3
 800b476:	d108      	bne.n	800b48a <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	68db      	ldr	r3, [r3, #12]
 800b47c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800b47e:	68f8      	ldr	r0, [r7, #12]
 800b480:	f7ff f90a 	bl	800a698 <tcp_abort>
      pcb = next;
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	60fb      	str	r3, [r7, #12]
 800b488:	e002      	b.n	800b490 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	68db      	ldr	r3, [r3, #12]
 800b48e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d1ea      	bne.n	800b46c <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 800b496:	bf00      	nop
 800b498:	3710      	adds	r7, #16
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}
	...

0800b4a0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b084      	sub	sp, #16
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
 800b4a8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d02c      	beq.n	800b50a <tcp_netif_ip_addr_changed+0x6a>
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d028      	beq.n	800b50a <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800b4b8:	4b16      	ldr	r3, [pc, #88]	; (800b514 <tcp_netif_ip_addr_changed+0x74>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	4619      	mov	r1, r3
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f7ff ffcc 	bl	800b45c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800b4c4:	4b14      	ldr	r3, [pc, #80]	; (800b518 <tcp_netif_ip_addr_changed+0x78>)
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	4619      	mov	r1, r3
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f7ff ffc6 	bl	800b45c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d019      	beq.n	800b50a <tcp_netif_ip_addr_changed+0x6a>
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d015      	beq.n	800b50a <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800b4de:	4b0f      	ldr	r3, [pc, #60]	; (800b51c <tcp_netif_ip_addr_changed+0x7c>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	60fb      	str	r3, [r7, #12]
 800b4e4:	e00e      	b.n	800b504 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	68db      	ldr	r3, [r3, #12]
 800b4ea:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	681a      	ldr	r2, [r3, #0]
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	429a      	cmp	r2, r3
 800b4f6:	d103      	bne.n	800b500 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	681a      	ldr	r2, [r3, #0]
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	60fb      	str	r3, [r7, #12]
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d1ed      	bne.n	800b4e6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800b50a:	bf00      	nop
 800b50c:	3710      	adds	r7, #16
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}
 800b512:	bf00      	nop
 800b514:	2000b8c4 	.word	0x2000b8c4
 800b518:	2000b8d0 	.word	0x2000b8d0
 800b51c:	2000b8cc 	.word	0x2000b8cc

0800b520 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800b520:	b590      	push	{r4, r7, lr}
 800b522:	b08b      	sub	sp, #44	; 0x2c
 800b524:	af02      	add	r7, sp, #8
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	685b      	ldr	r3, [r3, #4]
 800b52e:	4a82      	ldr	r2, [pc, #520]	; (800b738 <tcp_input+0x218>)
 800b530:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	895b      	ldrh	r3, [r3, #10]
 800b536:	2b13      	cmp	r3, #19
 800b538:	f240 838a 	bls.w	800bc50 <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b53c:	4b7f      	ldr	r3, [pc, #508]	; (800b73c <tcp_input+0x21c>)
 800b53e:	695a      	ldr	r2, [r3, #20]
 800b540:	4b7e      	ldr	r3, [pc, #504]	; (800b73c <tcp_input+0x21c>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	4619      	mov	r1, r3
 800b546:	4610      	mov	r0, r2
 800b548:	f007 f8ac 	bl	80126a4 <ip4_addr_isbroadcast_u32>
 800b54c:	4603      	mov	r3, r0
 800b54e:	2b00      	cmp	r3, #0
 800b550:	f040 8380 	bne.w	800bc54 <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800b554:	4b79      	ldr	r3, [pc, #484]	; (800b73c <tcp_input+0x21c>)
 800b556:	695b      	ldr	r3, [r3, #20]
 800b558:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b55c:	2be0      	cmp	r3, #224	; 0xe0
 800b55e:	f000 8379 	beq.w	800bc54 <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800b562:	4b75      	ldr	r3, [pc, #468]	; (800b738 <tcp_input+0x218>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	899b      	ldrh	r3, [r3, #12]
 800b568:	b29b      	uxth	r3, r3
 800b56a:	4618      	mov	r0, r3
 800b56c:	f7fc fd86 	bl	800807c <lwip_htons>
 800b570:	4603      	mov	r3, r0
 800b572:	0b1b      	lsrs	r3, r3, #12
 800b574:	b29b      	uxth	r3, r3
 800b576:	b2db      	uxtb	r3, r3
 800b578:	009b      	lsls	r3, r3, #2
 800b57a:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800b57c:	7cbb      	ldrb	r3, [r7, #18]
 800b57e:	2b13      	cmp	r3, #19
 800b580:	f240 8368 	bls.w	800bc54 <tcp_input+0x734>
 800b584:	7cbb      	ldrb	r3, [r7, #18]
 800b586:	b29a      	uxth	r2, r3
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	891b      	ldrh	r3, [r3, #8]
 800b58c:	429a      	cmp	r2, r3
 800b58e:	f200 8361 	bhi.w	800bc54 <tcp_input+0x734>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800b592:	7cbb      	ldrb	r3, [r7, #18]
 800b594:	b29b      	uxth	r3, r3
 800b596:	3b14      	subs	r3, #20
 800b598:	b29a      	uxth	r2, r3
 800b59a:	4b69      	ldr	r3, [pc, #420]	; (800b740 <tcp_input+0x220>)
 800b59c:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800b59e:	4b69      	ldr	r3, [pc, #420]	; (800b744 <tcp_input+0x224>)
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	895a      	ldrh	r2, [r3, #10]
 800b5a8:	7cbb      	ldrb	r3, [r7, #18]
 800b5aa:	b29b      	uxth	r3, r3
 800b5ac:	429a      	cmp	r2, r3
 800b5ae:	d30d      	bcc.n	800b5cc <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800b5b0:	4b63      	ldr	r3, [pc, #396]	; (800b740 <tcp_input+0x220>)
 800b5b2:	881a      	ldrh	r2, [r3, #0]
 800b5b4:	4b64      	ldr	r3, [pc, #400]	; (800b748 <tcp_input+0x228>)
 800b5b6:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800b5b8:	7cbb      	ldrb	r3, [r7, #18]
 800b5ba:	b29b      	uxth	r3, r3
 800b5bc:	425b      	negs	r3, r3
 800b5be:	b29b      	uxth	r3, r3
 800b5c0:	b21b      	sxth	r3, r3
 800b5c2:	4619      	mov	r1, r3
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f7fe f9f7 	bl	80099b8 <pbuf_header>
 800b5ca:	e055      	b.n	800b678 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d105      	bne.n	800b5e0 <tcp_input+0xc0>
 800b5d4:	4b5d      	ldr	r3, [pc, #372]	; (800b74c <tcp_input+0x22c>)
 800b5d6:	22b2      	movs	r2, #178	; 0xb2
 800b5d8:	495d      	ldr	r1, [pc, #372]	; (800b750 <tcp_input+0x230>)
 800b5da:	485e      	ldr	r0, [pc, #376]	; (800b754 <tcp_input+0x234>)
 800b5dc:	f00c fea2 	bl	8018324 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 800b5e0:	f06f 0113 	mvn.w	r1, #19
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f7fe f9e7 	bl	80099b8 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	895a      	ldrh	r2, [r3, #10]
 800b5ee:	4b56      	ldr	r3, [pc, #344]	; (800b748 <tcp_input+0x228>)
 800b5f0:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800b5f2:	4b53      	ldr	r3, [pc, #332]	; (800b740 <tcp_input+0x220>)
 800b5f4:	881a      	ldrh	r2, [r3, #0]
 800b5f6:	4b54      	ldr	r3, [pc, #336]	; (800b748 <tcp_input+0x228>)
 800b5f8:	881b      	ldrh	r3, [r3, #0]
 800b5fa:	1ad3      	subs	r3, r2, r3
 800b5fc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800b5fe:	4b52      	ldr	r3, [pc, #328]	; (800b748 <tcp_input+0x228>)
 800b600:	881b      	ldrh	r3, [r3, #0]
 800b602:	425b      	negs	r3, r3
 800b604:	b29b      	uxth	r3, r3
 800b606:	b21b      	sxth	r3, r3
 800b608:	4619      	mov	r1, r3
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f7fe f9d4 	bl	80099b8 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	895b      	ldrh	r3, [r3, #10]
 800b616:	8a3a      	ldrh	r2, [r7, #16]
 800b618:	429a      	cmp	r2, r3
 800b61a:	f200 831d 	bhi.w	800bc58 <tcp_input+0x738>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	685b      	ldr	r3, [r3, #4]
 800b624:	4a47      	ldr	r2, [pc, #284]	; (800b744 <tcp_input+0x224>)
 800b626:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681a      	ldr	r2, [r3, #0]
 800b62c:	8a3b      	ldrh	r3, [r7, #16]
 800b62e:	425b      	negs	r3, r3
 800b630:	b29b      	uxth	r3, r3
 800b632:	b21b      	sxth	r3, r3
 800b634:	4619      	mov	r1, r3
 800b636:	4610      	mov	r0, r2
 800b638:	f7fe f9be 	bl	80099b8 <pbuf_header>
    p->tot_len -= opt2len;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	891a      	ldrh	r2, [r3, #8]
 800b640:	8a3b      	ldrh	r3, [r7, #16]
 800b642:	1ad3      	subs	r3, r2, r3
 800b644:	b29a      	uxth	r2, r3
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	895b      	ldrh	r3, [r3, #10]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d005      	beq.n	800b65e <tcp_input+0x13e>
 800b652:	4b3e      	ldr	r3, [pc, #248]	; (800b74c <tcp_input+0x22c>)
 800b654:	22cf      	movs	r2, #207	; 0xcf
 800b656:	4940      	ldr	r1, [pc, #256]	; (800b758 <tcp_input+0x238>)
 800b658:	483e      	ldr	r0, [pc, #248]	; (800b754 <tcp_input+0x234>)
 800b65a:	f00c fe63 	bl	8018324 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	891a      	ldrh	r2, [r3, #8]
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	891b      	ldrh	r3, [r3, #8]
 800b668:	429a      	cmp	r2, r3
 800b66a:	d005      	beq.n	800b678 <tcp_input+0x158>
 800b66c:	4b37      	ldr	r3, [pc, #220]	; (800b74c <tcp_input+0x22c>)
 800b66e:	22d0      	movs	r2, #208	; 0xd0
 800b670:	493a      	ldr	r1, [pc, #232]	; (800b75c <tcp_input+0x23c>)
 800b672:	4838      	ldr	r0, [pc, #224]	; (800b754 <tcp_input+0x234>)
 800b674:	f00c fe56 	bl	8018324 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800b678:	4b2f      	ldr	r3, [pc, #188]	; (800b738 <tcp_input+0x218>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	881b      	ldrh	r3, [r3, #0]
 800b67e:	b29a      	uxth	r2, r3
 800b680:	4b2d      	ldr	r3, [pc, #180]	; (800b738 <tcp_input+0x218>)
 800b682:	681c      	ldr	r4, [r3, #0]
 800b684:	4610      	mov	r0, r2
 800b686:	f7fc fcf9 	bl	800807c <lwip_htons>
 800b68a:	4603      	mov	r3, r0
 800b68c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800b68e:	4b2a      	ldr	r3, [pc, #168]	; (800b738 <tcp_input+0x218>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	885b      	ldrh	r3, [r3, #2]
 800b694:	b29a      	uxth	r2, r3
 800b696:	4b28      	ldr	r3, [pc, #160]	; (800b738 <tcp_input+0x218>)
 800b698:	681c      	ldr	r4, [r3, #0]
 800b69a:	4610      	mov	r0, r2
 800b69c:	f7fc fcee 	bl	800807c <lwip_htons>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800b6a4:	4b24      	ldr	r3, [pc, #144]	; (800b738 <tcp_input+0x218>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	685a      	ldr	r2, [r3, #4]
 800b6aa:	4b23      	ldr	r3, [pc, #140]	; (800b738 <tcp_input+0x218>)
 800b6ac:	681c      	ldr	r4, [r3, #0]
 800b6ae:	4610      	mov	r0, r2
 800b6b0:	f7fc fcf1 	bl	8008096 <lwip_htonl>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	6063      	str	r3, [r4, #4]
 800b6b8:	6863      	ldr	r3, [r4, #4]
 800b6ba:	4a29      	ldr	r2, [pc, #164]	; (800b760 <tcp_input+0x240>)
 800b6bc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800b6be:	4b1e      	ldr	r3, [pc, #120]	; (800b738 <tcp_input+0x218>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	689a      	ldr	r2, [r3, #8]
 800b6c4:	4b1c      	ldr	r3, [pc, #112]	; (800b738 <tcp_input+0x218>)
 800b6c6:	681c      	ldr	r4, [r3, #0]
 800b6c8:	4610      	mov	r0, r2
 800b6ca:	f7fc fce4 	bl	8008096 <lwip_htonl>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	60a3      	str	r3, [r4, #8]
 800b6d2:	68a3      	ldr	r3, [r4, #8]
 800b6d4:	4a23      	ldr	r2, [pc, #140]	; (800b764 <tcp_input+0x244>)
 800b6d6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800b6d8:	4b17      	ldr	r3, [pc, #92]	; (800b738 <tcp_input+0x218>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	89db      	ldrh	r3, [r3, #14]
 800b6de:	b29a      	uxth	r2, r3
 800b6e0:	4b15      	ldr	r3, [pc, #84]	; (800b738 <tcp_input+0x218>)
 800b6e2:	681c      	ldr	r4, [r3, #0]
 800b6e4:	4610      	mov	r0, r2
 800b6e6:	f7fc fcc9 	bl	800807c <lwip_htons>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800b6ee:	4b12      	ldr	r3, [pc, #72]	; (800b738 <tcp_input+0x218>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	899b      	ldrh	r3, [r3, #12]
 800b6f4:	b29b      	uxth	r3, r3
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f7fc fcc0 	bl	800807c <lwip_htons>
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	b2db      	uxtb	r3, r3
 800b700:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b704:	b2da      	uxtb	r2, r3
 800b706:	4b18      	ldr	r3, [pc, #96]	; (800b768 <tcp_input+0x248>)
 800b708:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	891a      	ldrh	r2, [r3, #8]
 800b70e:	4b16      	ldr	r3, [pc, #88]	; (800b768 <tcp_input+0x248>)
 800b710:	781b      	ldrb	r3, [r3, #0]
 800b712:	f003 0303 	and.w	r3, r3, #3
 800b716:	2b00      	cmp	r3, #0
 800b718:	bf14      	ite	ne
 800b71a:	2301      	movne	r3, #1
 800b71c:	2300      	moveq	r3, #0
 800b71e:	b2db      	uxtb	r3, r3
 800b720:	b29b      	uxth	r3, r3
 800b722:	4413      	add	r3, r2
 800b724:	b29a      	uxth	r2, r3
 800b726:	4b11      	ldr	r3, [pc, #68]	; (800b76c <tcp_input+0x24c>)
 800b728:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800b72a:	2300      	movs	r3, #0
 800b72c:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b72e:	4b10      	ldr	r3, [pc, #64]	; (800b770 <tcp_input+0x250>)
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	61fb      	str	r3, [r7, #28]
 800b734:	e082      	b.n	800b83c <tcp_input+0x31c>
 800b736:	bf00      	nop
 800b738:	20004aa0 	.word	0x20004aa0
 800b73c:	20007e20 	.word	0x20007e20
 800b740:	20004aa4 	.word	0x20004aa4
 800b744:	20004aa8 	.word	0x20004aa8
 800b748:	20004aa6 	.word	0x20004aa6
 800b74c:	0801a24c 	.word	0x0801a24c
 800b750:	0801a280 	.word	0x0801a280
 800b754:	0801a290 	.word	0x0801a290
 800b758:	0801a2b8 	.word	0x0801a2b8
 800b75c:	0801a2c4 	.word	0x0801a2c4
 800b760:	20004ab0 	.word	0x20004ab0
 800b764:	20004ab4 	.word	0x20004ab4
 800b768:	20004abc 	.word	0x20004abc
 800b76c:	20004aba 	.word	0x20004aba
 800b770:	2000b8c4 	.word	0x2000b8c4
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800b774:	69fb      	ldr	r3, [r7, #28]
 800b776:	7d1b      	ldrb	r3, [r3, #20]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d105      	bne.n	800b788 <tcp_input+0x268>
 800b77c:	4b8f      	ldr	r3, [pc, #572]	; (800b9bc <tcp_input+0x49c>)
 800b77e:	22e2      	movs	r2, #226	; 0xe2
 800b780:	498f      	ldr	r1, [pc, #572]	; (800b9c0 <tcp_input+0x4a0>)
 800b782:	4890      	ldr	r0, [pc, #576]	; (800b9c4 <tcp_input+0x4a4>)
 800b784:	f00c fdce 	bl	8018324 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800b788:	69fb      	ldr	r3, [r7, #28]
 800b78a:	7d1b      	ldrb	r3, [r3, #20]
 800b78c:	2b0a      	cmp	r3, #10
 800b78e:	d105      	bne.n	800b79c <tcp_input+0x27c>
 800b790:	4b8a      	ldr	r3, [pc, #552]	; (800b9bc <tcp_input+0x49c>)
 800b792:	22e3      	movs	r2, #227	; 0xe3
 800b794:	498c      	ldr	r1, [pc, #560]	; (800b9c8 <tcp_input+0x4a8>)
 800b796:	488b      	ldr	r0, [pc, #556]	; (800b9c4 <tcp_input+0x4a4>)
 800b798:	f00c fdc4 	bl	8018324 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800b79c:	69fb      	ldr	r3, [r7, #28]
 800b79e:	7d1b      	ldrb	r3, [r3, #20]
 800b7a0:	2b01      	cmp	r3, #1
 800b7a2:	d105      	bne.n	800b7b0 <tcp_input+0x290>
 800b7a4:	4b85      	ldr	r3, [pc, #532]	; (800b9bc <tcp_input+0x49c>)
 800b7a6:	22e4      	movs	r2, #228	; 0xe4
 800b7a8:	4988      	ldr	r1, [pc, #544]	; (800b9cc <tcp_input+0x4ac>)
 800b7aa:	4886      	ldr	r0, [pc, #536]	; (800b9c4 <tcp_input+0x4a4>)
 800b7ac:	f00c fdba 	bl	8018324 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 800b7b0:	69fb      	ldr	r3, [r7, #28]
 800b7b2:	8b1a      	ldrh	r2, [r3, #24]
 800b7b4:	4b86      	ldr	r3, [pc, #536]	; (800b9d0 <tcp_input+0x4b0>)
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	881b      	ldrh	r3, [r3, #0]
 800b7ba:	b29b      	uxth	r3, r3
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	d138      	bne.n	800b832 <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 800b7c0:	69fb      	ldr	r3, [r7, #28]
 800b7c2:	8ada      	ldrh	r2, [r3, #22]
 800b7c4:	4b82      	ldr	r3, [pc, #520]	; (800b9d0 <tcp_input+0x4b0>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	885b      	ldrh	r3, [r3, #2]
 800b7ca:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	d130      	bne.n	800b832 <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b7d0:	69fb      	ldr	r3, [r7, #28]
 800b7d2:	685a      	ldr	r2, [r3, #4]
 800b7d4:	4b7f      	ldr	r3, [pc, #508]	; (800b9d4 <tcp_input+0x4b4>)
 800b7d6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800b7d8:	429a      	cmp	r2, r3
 800b7da:	d12a      	bne.n	800b832 <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b7dc:	69fb      	ldr	r3, [r7, #28]
 800b7de:	681a      	ldr	r2, [r3, #0]
 800b7e0:	4b7c      	ldr	r3, [pc, #496]	; (800b9d4 <tcp_input+0x4b4>)
 800b7e2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b7e4:	429a      	cmp	r2, r3
 800b7e6:	d124      	bne.n	800b832 <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800b7e8:	69fb      	ldr	r3, [r7, #28]
 800b7ea:	68db      	ldr	r3, [r3, #12]
 800b7ec:	69fa      	ldr	r2, [r7, #28]
 800b7ee:	429a      	cmp	r2, r3
 800b7f0:	d105      	bne.n	800b7fe <tcp_input+0x2de>
 800b7f2:	4b72      	ldr	r3, [pc, #456]	; (800b9bc <tcp_input+0x49c>)
 800b7f4:	22ec      	movs	r2, #236	; 0xec
 800b7f6:	4978      	ldr	r1, [pc, #480]	; (800b9d8 <tcp_input+0x4b8>)
 800b7f8:	4872      	ldr	r0, [pc, #456]	; (800b9c4 <tcp_input+0x4a4>)
 800b7fa:	f00c fd93 	bl	8018324 <iprintf>
      if (prev != NULL) {
 800b7fe:	69bb      	ldr	r3, [r7, #24]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d00a      	beq.n	800b81a <tcp_input+0x2fa>
        prev->next = pcb->next;
 800b804:	69fb      	ldr	r3, [r7, #28]
 800b806:	68da      	ldr	r2, [r3, #12]
 800b808:	69bb      	ldr	r3, [r7, #24]
 800b80a:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800b80c:	4b73      	ldr	r3, [pc, #460]	; (800b9dc <tcp_input+0x4bc>)
 800b80e:	681a      	ldr	r2, [r3, #0]
 800b810:	69fb      	ldr	r3, [r7, #28]
 800b812:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800b814:	4a71      	ldr	r2, [pc, #452]	; (800b9dc <tcp_input+0x4bc>)
 800b816:	69fb      	ldr	r3, [r7, #28]
 800b818:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800b81a:	69fb      	ldr	r3, [r7, #28]
 800b81c:	68db      	ldr	r3, [r3, #12]
 800b81e:	69fa      	ldr	r2, [r7, #28]
 800b820:	429a      	cmp	r2, r3
 800b822:	d10f      	bne.n	800b844 <tcp_input+0x324>
 800b824:	4b65      	ldr	r3, [pc, #404]	; (800b9bc <tcp_input+0x49c>)
 800b826:	22f4      	movs	r2, #244	; 0xf4
 800b828:	496d      	ldr	r1, [pc, #436]	; (800b9e0 <tcp_input+0x4c0>)
 800b82a:	4866      	ldr	r0, [pc, #408]	; (800b9c4 <tcp_input+0x4a4>)
 800b82c:	f00c fd7a 	bl	8018324 <iprintf>
      break;
 800b830:	e008      	b.n	800b844 <tcp_input+0x324>
    }
    prev = pcb;
 800b832:	69fb      	ldr	r3, [r7, #28]
 800b834:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b836:	69fb      	ldr	r3, [r7, #28]
 800b838:	68db      	ldr	r3, [r3, #12]
 800b83a:	61fb      	str	r3, [r7, #28]
 800b83c:	69fb      	ldr	r3, [r7, #28]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d198      	bne.n	800b774 <tcp_input+0x254>
 800b842:	e000      	b.n	800b846 <tcp_input+0x326>
      break;
 800b844:	bf00      	nop
  }

  if (pcb == NULL) {
 800b846:	69fb      	ldr	r3, [r7, #28]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d173      	bne.n	800b934 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b84c:	4b65      	ldr	r3, [pc, #404]	; (800b9e4 <tcp_input+0x4c4>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	61fb      	str	r3, [r7, #28]
 800b852:	e02f      	b.n	800b8b4 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b854:	69fb      	ldr	r3, [r7, #28]
 800b856:	7d1b      	ldrb	r3, [r3, #20]
 800b858:	2b0a      	cmp	r3, #10
 800b85a:	d005      	beq.n	800b868 <tcp_input+0x348>
 800b85c:	4b57      	ldr	r3, [pc, #348]	; (800b9bc <tcp_input+0x49c>)
 800b85e:	22fe      	movs	r2, #254	; 0xfe
 800b860:	4961      	ldr	r1, [pc, #388]	; (800b9e8 <tcp_input+0x4c8>)
 800b862:	4858      	ldr	r0, [pc, #352]	; (800b9c4 <tcp_input+0x4a4>)
 800b864:	f00c fd5e 	bl	8018324 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 800b868:	69fb      	ldr	r3, [r7, #28]
 800b86a:	8b1a      	ldrh	r2, [r3, #24]
 800b86c:	4b58      	ldr	r3, [pc, #352]	; (800b9d0 <tcp_input+0x4b0>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	881b      	ldrh	r3, [r3, #0]
 800b872:	b29b      	uxth	r3, r3
 800b874:	429a      	cmp	r2, r3
 800b876:	d11a      	bne.n	800b8ae <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 800b878:	69fb      	ldr	r3, [r7, #28]
 800b87a:	8ada      	ldrh	r2, [r3, #22]
 800b87c:	4b54      	ldr	r3, [pc, #336]	; (800b9d0 <tcp_input+0x4b0>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	885b      	ldrh	r3, [r3, #2]
 800b882:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800b884:	429a      	cmp	r2, r3
 800b886:	d112      	bne.n	800b8ae <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b888:	69fb      	ldr	r3, [r7, #28]
 800b88a:	685a      	ldr	r2, [r3, #4]
 800b88c:	4b51      	ldr	r3, [pc, #324]	; (800b9d4 <tcp_input+0x4b4>)
 800b88e:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800b890:	429a      	cmp	r2, r3
 800b892:	d10c      	bne.n	800b8ae <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800b894:	69fb      	ldr	r3, [r7, #28]
 800b896:	681a      	ldr	r2, [r3, #0]
 800b898:	4b4e      	ldr	r3, [pc, #312]	; (800b9d4 <tcp_input+0x4b4>)
 800b89a:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800b89c:	429a      	cmp	r2, r3
 800b89e:	d106      	bne.n	800b8ae <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 800b8a0:	69f8      	ldr	r0, [r7, #28]
 800b8a2:	f000 fb15 	bl	800bed0 <tcp_timewait_input>
        pbuf_free(p);
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	f7fe f8aa 	bl	8009a00 <pbuf_free>
        return;
 800b8ac:	e1da      	b.n	800bc64 <tcp_input+0x744>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b8ae:	69fb      	ldr	r3, [r7, #28]
 800b8b0:	68db      	ldr	r3, [r3, #12]
 800b8b2:	61fb      	str	r3, [r7, #28]
 800b8b4:	69fb      	ldr	r3, [r7, #28]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d1cc      	bne.n	800b854 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b8be:	4b4b      	ldr	r3, [pc, #300]	; (800b9ec <tcp_input+0x4cc>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	617b      	str	r3, [r7, #20]
 800b8c4:	e019      	b.n	800b8fa <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 800b8c6:	697b      	ldr	r3, [r7, #20]
 800b8c8:	8ada      	ldrh	r2, [r3, #22]
 800b8ca:	4b41      	ldr	r3, [pc, #260]	; (800b9d0 <tcp_input+0x4b0>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	885b      	ldrh	r3, [r3, #2]
 800b8d0:	b29b      	uxth	r3, r3
 800b8d2:	429a      	cmp	r2, r3
 800b8d4:	d10c      	bne.n	800b8f0 <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	681a      	ldr	r2, [r3, #0]
 800b8da:	4b3e      	ldr	r3, [pc, #248]	; (800b9d4 <tcp_input+0x4b4>)
 800b8dc:	695b      	ldr	r3, [r3, #20]
 800b8de:	429a      	cmp	r2, r3
 800b8e0:	d00f      	beq.n	800b902 <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d00d      	beq.n	800b904 <tcp_input+0x3e4>
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d009      	beq.n	800b904 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800b8f0:	697b      	ldr	r3, [r7, #20]
 800b8f2:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	68db      	ldr	r3, [r3, #12]
 800b8f8:	617b      	str	r3, [r7, #20]
 800b8fa:	697b      	ldr	r3, [r7, #20]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d1e2      	bne.n	800b8c6 <tcp_input+0x3a6>
 800b900:	e000      	b.n	800b904 <tcp_input+0x3e4>
            break;
 800b902:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800b904:	697b      	ldr	r3, [r7, #20]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d014      	beq.n	800b934 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800b90a:	69bb      	ldr	r3, [r7, #24]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d00a      	beq.n	800b926 <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800b910:	697b      	ldr	r3, [r7, #20]
 800b912:	68da      	ldr	r2, [r3, #12]
 800b914:	69bb      	ldr	r3, [r7, #24]
 800b916:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800b918:	4b34      	ldr	r3, [pc, #208]	; (800b9ec <tcp_input+0x4cc>)
 800b91a:	681a      	ldr	r2, [r3, #0]
 800b91c:	697b      	ldr	r3, [r7, #20]
 800b91e:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800b920:	4a32      	ldr	r2, [pc, #200]	; (800b9ec <tcp_input+0x4cc>)
 800b922:	697b      	ldr	r3, [r7, #20]
 800b924:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 800b926:	6978      	ldr	r0, [r7, #20]
 800b928:	f000 f9f0 	bl	800bd0c <tcp_listen_input>
      pbuf_free(p);
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	f7fe f867 	bl	8009a00 <pbuf_free>
      return;
 800b932:	e197      	b.n	800bc64 <tcp_input+0x744>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 800b934:	69fb      	ldr	r3, [r7, #28]
 800b936:	2b00      	cmp	r3, #0
 800b938:	f000 8164 	beq.w	800bc04 <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800b93c:	4b2c      	ldr	r3, [pc, #176]	; (800b9f0 <tcp_input+0x4d0>)
 800b93e:	2200      	movs	r2, #0
 800b940:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	891a      	ldrh	r2, [r3, #8]
 800b946:	4b2a      	ldr	r3, [pc, #168]	; (800b9f0 <tcp_input+0x4d0>)
 800b948:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800b94a:	4a29      	ldr	r2, [pc, #164]	; (800b9f0 <tcp_input+0x4d0>)
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800b950:	4b1f      	ldr	r3, [pc, #124]	; (800b9d0 <tcp_input+0x4b0>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	4a26      	ldr	r2, [pc, #152]	; (800b9f0 <tcp_input+0x4d0>)
 800b956:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800b958:	4b26      	ldr	r3, [pc, #152]	; (800b9f4 <tcp_input+0x4d4>)
 800b95a:	2200      	movs	r2, #0
 800b95c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800b95e:	4b26      	ldr	r3, [pc, #152]	; (800b9f8 <tcp_input+0x4d8>)
 800b960:	2200      	movs	r2, #0
 800b962:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800b964:	4b25      	ldr	r3, [pc, #148]	; (800b9fc <tcp_input+0x4dc>)
 800b966:	2200      	movs	r2, #0
 800b968:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800b96a:	4b25      	ldr	r3, [pc, #148]	; (800ba00 <tcp_input+0x4e0>)
 800b96c:	781b      	ldrb	r3, [r3, #0]
 800b96e:	f003 0308 	and.w	r3, r3, #8
 800b972:	2b00      	cmp	r3, #0
 800b974:	d006      	beq.n	800b984 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	7b5b      	ldrb	r3, [r3, #13]
 800b97a:	f043 0301 	orr.w	r3, r3, #1
 800b97e:	b2da      	uxtb	r2, r3
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800b984:	69fb      	ldr	r3, [r7, #28]
 800b986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d03d      	beq.n	800ba08 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b98c:	69f8      	ldr	r0, [r7, #28]
 800b98e:	f7ff fa5b 	bl	800ae48 <tcp_process_refused_data>
 800b992:	4603      	mov	r3, r0
 800b994:	f113 0f0d 	cmn.w	r3, #13
 800b998:	d007      	beq.n	800b9aa <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b99a:	69fb      	ldr	r3, [r7, #28]
 800b99c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d032      	beq.n	800ba08 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800b9a2:	4b18      	ldr	r3, [pc, #96]	; (800ba04 <tcp_input+0x4e4>)
 800b9a4:	881b      	ldrh	r3, [r3, #0]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d02e      	beq.n	800ba08 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800b9aa:	69fb      	ldr	r3, [r7, #28]
 800b9ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	f040 8108 	bne.w	800bbc4 <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800b9b4:	69f8      	ldr	r0, [r7, #28]
 800b9b6:	f002 fa09 	bl	800ddcc <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800b9ba:	e103      	b.n	800bbc4 <tcp_input+0x6a4>
 800b9bc:	0801a24c 	.word	0x0801a24c
 800b9c0:	0801a2e4 	.word	0x0801a2e4
 800b9c4:	0801a290 	.word	0x0801a290
 800b9c8:	0801a30c 	.word	0x0801a30c
 800b9cc:	0801a338 	.word	0x0801a338
 800b9d0:	20004aa0 	.word	0x20004aa0
 800b9d4:	20007e20 	.word	0x20007e20
 800b9d8:	0801a360 	.word	0x0801a360
 800b9dc:	2000b8c4 	.word	0x2000b8c4
 800b9e0:	0801a38c 	.word	0x0801a38c
 800b9e4:	2000b8d4 	.word	0x2000b8d4
 800b9e8:	0801a3b8 	.word	0x0801a3b8
 800b9ec:	2000b8cc 	.word	0x2000b8cc
 800b9f0:	20004a90 	.word	0x20004a90
 800b9f4:	20004ac0 	.word	0x20004ac0
 800b9f8:	20004abd 	.word	0x20004abd
 800b9fc:	20004ab8 	.word	0x20004ab8
 800ba00:	20004abc 	.word	0x20004abc
 800ba04:	20004aba 	.word	0x20004aba
      }
    }
    tcp_input_pcb = pcb;
 800ba08:	4a98      	ldr	r2, [pc, #608]	; (800bc6c <tcp_input+0x74c>)
 800ba0a:	69fb      	ldr	r3, [r7, #28]
 800ba0c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800ba0e:	69f8      	ldr	r0, [r7, #28]
 800ba10:	f000 fac6 	bl	800bfa0 <tcp_process>
 800ba14:	4603      	mov	r3, r0
 800ba16:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800ba18:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ba1c:	f113 0f0d 	cmn.w	r3, #13
 800ba20:	f000 80d2 	beq.w	800bbc8 <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 800ba24:	4b92      	ldr	r3, [pc, #584]	; (800bc70 <tcp_input+0x750>)
 800ba26:	781b      	ldrb	r3, [r3, #0]
 800ba28:	f003 0308 	and.w	r3, r3, #8
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d016      	beq.n	800ba5e <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800ba30:	69fb      	ldr	r3, [r7, #28]
 800ba32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d008      	beq.n	800ba4c <tcp_input+0x52c>
 800ba3a:	69fb      	ldr	r3, [r7, #28]
 800ba3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ba40:	69fa      	ldr	r2, [r7, #28]
 800ba42:	6912      	ldr	r2, [r2, #16]
 800ba44:	f06f 010d 	mvn.w	r1, #13
 800ba48:	4610      	mov	r0, r2
 800ba4a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ba4c:	69f9      	ldr	r1, [r7, #28]
 800ba4e:	4889      	ldr	r0, [pc, #548]	; (800bc74 <tcp_input+0x754>)
 800ba50:	f7ff fc4e 	bl	800b2f0 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800ba54:	69f9      	ldr	r1, [r7, #28]
 800ba56:	2001      	movs	r0, #1
 800ba58:	f7fd fa60 	bl	8008f1c <memp_free>
 800ba5c:	e0bf      	b.n	800bbde <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800ba62:	4b85      	ldr	r3, [pc, #532]	; (800bc78 <tcp_input+0x758>)
 800ba64:	881b      	ldrh	r3, [r3, #0]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d01b      	beq.n	800baa2 <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800ba6a:	4b83      	ldr	r3, [pc, #524]	; (800bc78 <tcp_input+0x758>)
 800ba6c:	881b      	ldrh	r3, [r3, #0]
 800ba6e:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800ba70:	69fb      	ldr	r3, [r7, #28]
 800ba72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d009      	beq.n	800ba8c <tcp_input+0x56c>
 800ba78:	69fb      	ldr	r3, [r7, #28]
 800ba7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba7c:	69fa      	ldr	r2, [r7, #28]
 800ba7e:	6910      	ldr	r0, [r2, #16]
 800ba80:	89fa      	ldrh	r2, [r7, #14]
 800ba82:	69f9      	ldr	r1, [r7, #28]
 800ba84:	4798      	blx	r3
 800ba86:	4603      	mov	r3, r0
 800ba88:	74fb      	strb	r3, [r7, #19]
 800ba8a:	e001      	b.n	800ba90 <tcp_input+0x570>
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ba90:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ba94:	f113 0f0d 	cmn.w	r3, #13
 800ba98:	f000 8098 	beq.w	800bbcc <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 800ba9c:	4b76      	ldr	r3, [pc, #472]	; (800bc78 <tcp_input+0x758>)
 800ba9e:	2200      	movs	r2, #0
 800baa0:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800baa2:	69f8      	ldr	r0, [r7, #28]
 800baa4:	f000 f900 	bl	800bca8 <tcp_input_delayed_close>
 800baa8:	4603      	mov	r3, r0
 800baaa:	2b00      	cmp	r3, #0
 800baac:	f040 8090 	bne.w	800bbd0 <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800bab0:	4b72      	ldr	r3, [pc, #456]	; (800bc7c <tcp_input+0x75c>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d041      	beq.n	800bb3c <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800bab8:	69fb      	ldr	r3, [r7, #28]
 800baba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800babc:	2b00      	cmp	r3, #0
 800babe:	d006      	beq.n	800bace <tcp_input+0x5ae>
 800bac0:	4b6f      	ldr	r3, [pc, #444]	; (800bc80 <tcp_input+0x760>)
 800bac2:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800bac6:	496f      	ldr	r1, [pc, #444]	; (800bc84 <tcp_input+0x764>)
 800bac8:	486f      	ldr	r0, [pc, #444]	; (800bc88 <tcp_input+0x768>)
 800baca:	f00c fc2b 	bl	8018324 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800bace:	69fb      	ldr	r3, [r7, #28]
 800bad0:	7e9b      	ldrb	r3, [r3, #26]
 800bad2:	f003 0310 	and.w	r3, r3, #16
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d008      	beq.n	800baec <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800bada:	4b68      	ldr	r3, [pc, #416]	; (800bc7c <tcp_input+0x75c>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	4618      	mov	r0, r3
 800bae0:	f7fd ff8e 	bl	8009a00 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800bae4:	69f8      	ldr	r0, [r7, #28]
 800bae6:	f7fe fdd7 	bl	800a698 <tcp_abort>
            goto aborted;
 800baea:	e078      	b.n	800bbde <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800baec:	69fb      	ldr	r3, [r7, #28]
 800baee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d00c      	beq.n	800bb10 <tcp_input+0x5f0>
 800baf6:	69fb      	ldr	r3, [r7, #28]
 800baf8:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800bafc:	69fb      	ldr	r3, [r7, #28]
 800bafe:	6918      	ldr	r0, [r3, #16]
 800bb00:	4b5e      	ldr	r3, [pc, #376]	; (800bc7c <tcp_input+0x75c>)
 800bb02:	681a      	ldr	r2, [r3, #0]
 800bb04:	2300      	movs	r3, #0
 800bb06:	69f9      	ldr	r1, [r7, #28]
 800bb08:	47a0      	blx	r4
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	74fb      	strb	r3, [r7, #19]
 800bb0e:	e008      	b.n	800bb22 <tcp_input+0x602>
 800bb10:	4b5a      	ldr	r3, [pc, #360]	; (800bc7c <tcp_input+0x75c>)
 800bb12:	681a      	ldr	r2, [r3, #0]
 800bb14:	2300      	movs	r3, #0
 800bb16:	69f9      	ldr	r1, [r7, #28]
 800bb18:	2000      	movs	r0, #0
 800bb1a:	f7ff fa46 	bl	800afaa <tcp_recv_null>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800bb22:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bb26:	f113 0f0d 	cmn.w	r3, #13
 800bb2a:	d053      	beq.n	800bbd4 <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800bb2c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d003      	beq.n	800bb3c <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800bb34:	4b51      	ldr	r3, [pc, #324]	; (800bc7c <tcp_input+0x75c>)
 800bb36:	681a      	ldr	r2, [r3, #0]
 800bb38:	69fb      	ldr	r3, [r7, #28]
 800bb3a:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800bb3c:	4b4c      	ldr	r3, [pc, #304]	; (800bc70 <tcp_input+0x750>)
 800bb3e:	781b      	ldrb	r3, [r3, #0]
 800bb40:	f003 0320 	and.w	r3, r3, #32
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d030      	beq.n	800bbaa <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 800bb48:	69fb      	ldr	r3, [r7, #28]
 800bb4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d009      	beq.n	800bb64 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800bb50:	69fb      	ldr	r3, [r7, #28]
 800bb52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb54:	7b5a      	ldrb	r2, [r3, #13]
 800bb56:	69fb      	ldr	r3, [r7, #28]
 800bb58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb5a:	f042 0220 	orr.w	r2, r2, #32
 800bb5e:	b2d2      	uxtb	r2, r2
 800bb60:	735a      	strb	r2, [r3, #13]
 800bb62:	e022      	b.n	800bbaa <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800bb64:	69fb      	ldr	r3, [r7, #28]
 800bb66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb68:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bb6c:	d005      	beq.n	800bb7a <tcp_input+0x65a>
              pcb->rcv_wnd++;
 800bb6e:	69fb      	ldr	r3, [r7, #28]
 800bb70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb72:	3301      	adds	r3, #1
 800bb74:	b29a      	uxth	r2, r3
 800bb76:	69fb      	ldr	r3, [r7, #28]
 800bb78:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800bb7a:	69fb      	ldr	r3, [r7, #28]
 800bb7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d00b      	beq.n	800bb9c <tcp_input+0x67c>
 800bb84:	69fb      	ldr	r3, [r7, #28]
 800bb86:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800bb8a:	69fb      	ldr	r3, [r7, #28]
 800bb8c:	6918      	ldr	r0, [r3, #16]
 800bb8e:	2300      	movs	r3, #0
 800bb90:	2200      	movs	r2, #0
 800bb92:	69f9      	ldr	r1, [r7, #28]
 800bb94:	47a0      	blx	r4
 800bb96:	4603      	mov	r3, r0
 800bb98:	74fb      	strb	r3, [r7, #19]
 800bb9a:	e001      	b.n	800bba0 <tcp_input+0x680>
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800bba0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bba4:	f113 0f0d 	cmn.w	r3, #13
 800bba8:	d016      	beq.n	800bbd8 <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800bbaa:	4b30      	ldr	r3, [pc, #192]	; (800bc6c <tcp_input+0x74c>)
 800bbac:	2200      	movs	r2, #0
 800bbae:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800bbb0:	69f8      	ldr	r0, [r7, #28]
 800bbb2:	f000 f879 	bl	800bca8 <tcp_input_delayed_close>
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d10f      	bne.n	800bbdc <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800bbbc:	69f8      	ldr	r0, [r7, #28]
 800bbbe:	f002 f961 	bl	800de84 <tcp_output>
 800bbc2:	e00c      	b.n	800bbde <tcp_input+0x6be>
        goto aborted;
 800bbc4:	bf00      	nop
 800bbc6:	e00a      	b.n	800bbde <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800bbc8:	bf00      	nop
 800bbca:	e008      	b.n	800bbde <tcp_input+0x6be>
              goto aborted;
 800bbcc:	bf00      	nop
 800bbce:	e006      	b.n	800bbde <tcp_input+0x6be>
          goto aborted;
 800bbd0:	bf00      	nop
 800bbd2:	e004      	b.n	800bbde <tcp_input+0x6be>
            goto aborted;
 800bbd4:	bf00      	nop
 800bbd6:	e002      	b.n	800bbde <tcp_input+0x6be>
              goto aborted;
 800bbd8:	bf00      	nop
 800bbda:	e000      	b.n	800bbde <tcp_input+0x6be>
          goto aborted;
 800bbdc:	bf00      	nop
    tcp_input_pcb = NULL;
 800bbde:	4b23      	ldr	r3, [pc, #140]	; (800bc6c <tcp_input+0x74c>)
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800bbe4:	4b25      	ldr	r3, [pc, #148]	; (800bc7c <tcp_input+0x75c>)
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800bbea:	4b28      	ldr	r3, [pc, #160]	; (800bc8c <tcp_input+0x76c>)
 800bbec:	685b      	ldr	r3, [r3, #4]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d037      	beq.n	800bc62 <tcp_input+0x742>
    {
      pbuf_free(inseg.p);
 800bbf2:	4b26      	ldr	r3, [pc, #152]	; (800bc8c <tcp_input+0x76c>)
 800bbf4:	685b      	ldr	r3, [r3, #4]
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	f7fd ff02 	bl	8009a00 <pbuf_free>
      inseg.p = NULL;
 800bbfc:	4b23      	ldr	r3, [pc, #140]	; (800bc8c <tcp_input+0x76c>)
 800bbfe:	2200      	movs	r2, #0
 800bc00:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800bc02:	e02e      	b.n	800bc62 <tcp_input+0x742>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800bc04:	4b22      	ldr	r3, [pc, #136]	; (800bc90 <tcp_input+0x770>)
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	899b      	ldrh	r3, [r3, #12]
 800bc0a:	b29b      	uxth	r3, r3
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f7fc fa35 	bl	800807c <lwip_htons>
 800bc12:	4603      	mov	r3, r0
 800bc14:	f003 0304 	and.w	r3, r3, #4
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d115      	bne.n	800bc48 <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800bc1c:	4b1d      	ldr	r3, [pc, #116]	; (800bc94 <tcp_input+0x774>)
 800bc1e:	6818      	ldr	r0, [r3, #0]
 800bc20:	4b1d      	ldr	r3, [pc, #116]	; (800bc98 <tcp_input+0x778>)
 800bc22:	881b      	ldrh	r3, [r3, #0]
 800bc24:	461a      	mov	r2, r3
 800bc26:	4b1d      	ldr	r3, [pc, #116]	; (800bc9c <tcp_input+0x77c>)
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bc2c:	4b18      	ldr	r3, [pc, #96]	; (800bc90 <tcp_input+0x770>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800bc30:	885b      	ldrh	r3, [r3, #2]
 800bc32:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bc34:	4a16      	ldr	r2, [pc, #88]	; (800bc90 <tcp_input+0x770>)
 800bc36:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800bc38:	8812      	ldrh	r2, [r2, #0]
 800bc3a:	b292      	uxth	r2, r2
 800bc3c:	9201      	str	r2, [sp, #4]
 800bc3e:	9300      	str	r3, [sp, #0]
 800bc40:	4b17      	ldr	r3, [pc, #92]	; (800bca0 <tcp_input+0x780>)
 800bc42:	4a18      	ldr	r2, [pc, #96]	; (800bca4 <tcp_input+0x784>)
 800bc44:	f002 fba8 	bl	800e398 <tcp_rst>
    pbuf_free(p);
 800bc48:	6878      	ldr	r0, [r7, #4]
 800bc4a:	f7fd fed9 	bl	8009a00 <pbuf_free>
  return;
 800bc4e:	e008      	b.n	800bc62 <tcp_input+0x742>
    goto dropped;
 800bc50:	bf00      	nop
 800bc52:	e002      	b.n	800bc5a <tcp_input+0x73a>
dropped:
 800bc54:	bf00      	nop
 800bc56:	e000      	b.n	800bc5a <tcp_input+0x73a>
      goto dropped;
 800bc58:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	f7fd fed0 	bl	8009a00 <pbuf_free>
 800bc60:	e000      	b.n	800bc64 <tcp_input+0x744>
  return;
 800bc62:	bf00      	nop
}
 800bc64:	3724      	adds	r7, #36	; 0x24
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd90      	pop	{r4, r7, pc}
 800bc6a:	bf00      	nop
 800bc6c:	2000b8d8 	.word	0x2000b8d8
 800bc70:	20004abd 	.word	0x20004abd
 800bc74:	2000b8c4 	.word	0x2000b8c4
 800bc78:	20004ab8 	.word	0x20004ab8
 800bc7c:	20004ac0 	.word	0x20004ac0
 800bc80:	0801a24c 	.word	0x0801a24c
 800bc84:	0801a3e8 	.word	0x0801a3e8
 800bc88:	0801a290 	.word	0x0801a290
 800bc8c:	20004a90 	.word	0x20004a90
 800bc90:	20004aa0 	.word	0x20004aa0
 800bc94:	20004ab4 	.word	0x20004ab4
 800bc98:	20004aba 	.word	0x20004aba
 800bc9c:	20004ab0 	.word	0x20004ab0
 800bca0:	20007e30 	.word	0x20007e30
 800bca4:	20007e34 	.word	0x20007e34

0800bca8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b082      	sub	sp, #8
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 800bcb0:	4b14      	ldr	r3, [pc, #80]	; (800bd04 <tcp_input_delayed_close+0x5c>)
 800bcb2:	781b      	ldrb	r3, [r3, #0]
 800bcb4:	f003 0310 	and.w	r3, r3, #16
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d01d      	beq.n	800bcf8 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	7e9b      	ldrb	r3, [r3, #26]
 800bcc0:	f003 0310 	and.w	r3, r3, #16
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d10d      	bne.n	800bce4 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d008      	beq.n	800bce4 <tcp_input_delayed_close+0x3c>
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bcd8:	687a      	ldr	r2, [r7, #4]
 800bcda:	6912      	ldr	r2, [r2, #16]
 800bcdc:	f06f 010e 	mvn.w	r1, #14
 800bce0:	4610      	mov	r0, r2
 800bce2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800bce4:	6879      	ldr	r1, [r7, #4]
 800bce6:	4808      	ldr	r0, [pc, #32]	; (800bd08 <tcp_input_delayed_close+0x60>)
 800bce8:	f7ff fb02 	bl	800b2f0 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800bcec:	6879      	ldr	r1, [r7, #4]
 800bcee:	2001      	movs	r0, #1
 800bcf0:	f7fd f914 	bl	8008f1c <memp_free>
    return 1;
 800bcf4:	2301      	movs	r3, #1
 800bcf6:	e000      	b.n	800bcfa <tcp_input_delayed_close+0x52>
  }
  return 0;
 800bcf8:	2300      	movs	r3, #0
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	3708      	adds	r7, #8
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}
 800bd02:	bf00      	nop
 800bd04:	20004abd 	.word	0x20004abd
 800bd08:	2000b8c4 	.word	0x2000b8c4

0800bd0c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b088      	sub	sp, #32
 800bd10:	af02      	add	r7, sp, #8
 800bd12:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800bd14:	4b64      	ldr	r3, [pc, #400]	; (800bea8 <tcp_listen_input+0x19c>)
 800bd16:	781b      	ldrb	r3, [r3, #0]
 800bd18:	f003 0304 	and.w	r3, r3, #4
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	f040 80bc 	bne.w	800be9a <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800bd22:	4b61      	ldr	r3, [pc, #388]	; (800bea8 <tcp_listen_input+0x19c>)
 800bd24:	781b      	ldrb	r3, [r3, #0]
 800bd26:	f003 0310 	and.w	r3, r3, #16
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d016      	beq.n	800bd5c <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800bd2e:	4b5f      	ldr	r3, [pc, #380]	; (800beac <tcp_listen_input+0x1a0>)
 800bd30:	6818      	ldr	r0, [r3, #0]
 800bd32:	4b5f      	ldr	r3, [pc, #380]	; (800beb0 <tcp_listen_input+0x1a4>)
 800bd34:	881b      	ldrh	r3, [r3, #0]
 800bd36:	461a      	mov	r2, r3
 800bd38:	4b5e      	ldr	r3, [pc, #376]	; (800beb4 <tcp_listen_input+0x1a8>)
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bd3e:	4b5e      	ldr	r3, [pc, #376]	; (800beb8 <tcp_listen_input+0x1ac>)
 800bd40:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800bd42:	885b      	ldrh	r3, [r3, #2]
 800bd44:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bd46:	4a5c      	ldr	r2, [pc, #368]	; (800beb8 <tcp_listen_input+0x1ac>)
 800bd48:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800bd4a:	8812      	ldrh	r2, [r2, #0]
 800bd4c:	b292      	uxth	r2, r2
 800bd4e:	9201      	str	r2, [sp, #4]
 800bd50:	9300      	str	r3, [sp, #0]
 800bd52:	4b5a      	ldr	r3, [pc, #360]	; (800bebc <tcp_listen_input+0x1b0>)
 800bd54:	4a5a      	ldr	r2, [pc, #360]	; (800bec0 <tcp_listen_input+0x1b4>)
 800bd56:	f002 fb1f 	bl	800e398 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800bd5a:	e0a0      	b.n	800be9e <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 800bd5c:	4b52      	ldr	r3, [pc, #328]	; (800bea8 <tcp_listen_input+0x19c>)
 800bd5e:	781b      	ldrb	r3, [r3, #0]
 800bd60:	f003 0302 	and.w	r3, r3, #2
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	f000 809a 	beq.w	800be9e <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	7d5b      	ldrb	r3, [r3, #21]
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f7ff f9fa 	bl	800b168 <tcp_alloc>
 800bd74:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800bd76:	697b      	ldr	r3, [r7, #20]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d111      	bne.n	800bda0 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	699b      	ldr	r3, [r3, #24]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d00a      	beq.n	800bd9a <tcp_listen_input+0x8e>
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	699b      	ldr	r3, [r3, #24]
 800bd88:	687a      	ldr	r2, [r7, #4]
 800bd8a:	6910      	ldr	r0, [r2, #16]
 800bd8c:	f04f 32ff 	mov.w	r2, #4294967295
 800bd90:	2100      	movs	r1, #0
 800bd92:	4798      	blx	r3
 800bd94:	4603      	mov	r3, r0
 800bd96:	73bb      	strb	r3, [r7, #14]
      return;
 800bd98:	e082      	b.n	800bea0 <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800bd9a:	23f0      	movs	r3, #240	; 0xf0
 800bd9c:	73bb      	strb	r3, [r7, #14]
      return;
 800bd9e:	e07f      	b.n	800bea0 <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800bda0:	4b48      	ldr	r3, [pc, #288]	; (800bec4 <tcp_listen_input+0x1b8>)
 800bda2:	695a      	ldr	r2, [r3, #20]
 800bda4:	697b      	ldr	r3, [r7, #20]
 800bda6:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800bda8:	4b46      	ldr	r3, [pc, #280]	; (800bec4 <tcp_listen_input+0x1b8>)
 800bdaa:	691a      	ldr	r2, [r3, #16]
 800bdac:	697b      	ldr	r3, [r7, #20]
 800bdae:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	8ada      	ldrh	r2, [r3, #22]
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800bdb8:	4b3f      	ldr	r3, [pc, #252]	; (800beb8 <tcp_listen_input+0x1ac>)
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	881b      	ldrh	r3, [r3, #0]
 800bdbe:	b29a      	uxth	r2, r3
 800bdc0:	697b      	ldr	r3, [r7, #20]
 800bdc2:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	2203      	movs	r2, #3
 800bdc8:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800bdca:	4b3a      	ldr	r3, [pc, #232]	; (800beb4 <tcp_listen_input+0x1a8>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	1c5a      	adds	r2, r3, #1
 800bdd0:	697b      	ldr	r3, [r7, #20]
 800bdd2:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800bdd4:	697b      	ldr	r3, [r7, #20]
 800bdd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bdd8:	697b      	ldr	r3, [r7, #20]
 800bdda:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800bddc:	6978      	ldr	r0, [r7, #20]
 800bdde:	f7ff fb03 	bl	800b3e8 <tcp_next_iss>
 800bde2:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800bde4:	697b      	ldr	r3, [r7, #20]
 800bde6:	693a      	ldr	r2, [r7, #16]
 800bde8:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	693a      	ldr	r2, [r7, #16]
 800bdee:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 800bdf0:	697b      	ldr	r3, [r7, #20]
 800bdf2:	693a      	ldr	r2, [r7, #16]
 800bdf4:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800bdf6:	697b      	ldr	r3, [r7, #20]
 800bdf8:	693a      	ldr	r2, [r7, #16]
 800bdfa:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800bdfc:	4b2d      	ldr	r3, [pc, #180]	; (800beb4 <tcp_listen_input+0x1a8>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	1e5a      	subs	r2, r3, #1
 800be02:	697b      	ldr	r3, [r7, #20]
 800be04:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	691a      	ldr	r2, [r3, #16]
 800be0a:	697b      	ldr	r3, [r7, #20]
 800be0c:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800be0e:	697b      	ldr	r3, [r7, #20]
 800be10:	687a      	ldr	r2, [r7, #4]
 800be12:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	7a1b      	ldrb	r3, [r3, #8]
 800be18:	f003 030c 	and.w	r3, r3, #12
 800be1c:	b2da      	uxtb	r2, r3
 800be1e:	697b      	ldr	r3, [r7, #20]
 800be20:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800be22:	4b29      	ldr	r3, [pc, #164]	; (800bec8 <tcp_listen_input+0x1bc>)
 800be24:	681a      	ldr	r2, [r3, #0]
 800be26:	697b      	ldr	r3, [r7, #20]
 800be28:	60da      	str	r2, [r3, #12]
 800be2a:	4a27      	ldr	r2, [pc, #156]	; (800bec8 <tcp_listen_input+0x1bc>)
 800be2c:	697b      	ldr	r3, [r7, #20]
 800be2e:	6013      	str	r3, [r2, #0]
 800be30:	f002 fd02 	bl	800e838 <tcp_timer_needed>
 800be34:	4b25      	ldr	r3, [pc, #148]	; (800becc <tcp_listen_input+0x1c0>)
 800be36:	2201      	movs	r2, #1
 800be38:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800be3a:	6978      	ldr	r0, [r7, #20]
 800be3c:	f001 fd12 	bl	800d864 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800be40:	4b1d      	ldr	r3, [pc, #116]	; (800beb8 <tcp_listen_input+0x1ac>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	89db      	ldrh	r3, [r3, #14]
 800be46:	b29a      	uxth	r2, r3
 800be48:	697b      	ldr	r3, [r7, #20]
 800be4a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800be4e:	697b      	ldr	r3, [r7, #20]
 800be50:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800be54:	697b      	ldr	r3, [r7, #20]
 800be56:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800be5a:	697b      	ldr	r3, [r7, #20]
 800be5c:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800be5e:	697b      	ldr	r3, [r7, #20]
 800be60:	3304      	adds	r3, #4
 800be62:	4619      	mov	r1, r3
 800be64:	4610      	mov	r0, r2
 800be66:	f7ff fad5 	bl	800b414 <tcp_eff_send_mss_impl>
 800be6a:	4603      	mov	r3, r0
 800be6c:	461a      	mov	r2, r3
 800be6e:	697b      	ldr	r3, [r7, #20]
 800be70:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800be72:	2112      	movs	r1, #18
 800be74:	6978      	ldr	r0, [r7, #20]
 800be76:	f001 fead 	bl	800dbd4 <tcp_enqueue_flags>
 800be7a:	4603      	mov	r3, r0
 800be7c:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800be7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d004      	beq.n	800be90 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 800be86:	2100      	movs	r1, #0
 800be88:	6978      	ldr	r0, [r7, #20]
 800be8a:	f7fe fb53 	bl	800a534 <tcp_abandon>
      return;
 800be8e:	e007      	b.n	800bea0 <tcp_listen_input+0x194>
    tcp_output(npcb);
 800be90:	6978      	ldr	r0, [r7, #20]
 800be92:	f001 fff7 	bl	800de84 <tcp_output>
  return;
 800be96:	bf00      	nop
 800be98:	e001      	b.n	800be9e <tcp_listen_input+0x192>
    return;
 800be9a:	bf00      	nop
 800be9c:	e000      	b.n	800bea0 <tcp_listen_input+0x194>
  return;
 800be9e:	bf00      	nop
}
 800bea0:	3718      	adds	r7, #24
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}
 800bea6:	bf00      	nop
 800bea8:	20004abc 	.word	0x20004abc
 800beac:	20004ab4 	.word	0x20004ab4
 800beb0:	20004aba 	.word	0x20004aba
 800beb4:	20004ab0 	.word	0x20004ab0
 800beb8:	20004aa0 	.word	0x20004aa0
 800bebc:	20007e30 	.word	0x20007e30
 800bec0:	20007e34 	.word	0x20007e34
 800bec4:	20007e20 	.word	0x20007e20
 800bec8:	2000b8c4 	.word	0x2000b8c4
 800becc:	2000b8c0 	.word	0x2000b8c0

0800bed0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800bed0:	b580      	push	{r7, lr}
 800bed2:	b084      	sub	sp, #16
 800bed4:	af02      	add	r7, sp, #8
 800bed6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800bed8:	4b29      	ldr	r3, [pc, #164]	; (800bf80 <tcp_timewait_input+0xb0>)
 800beda:	781b      	ldrb	r3, [r3, #0]
 800bedc:	f003 0304 	and.w	r3, r3, #4
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d147      	bne.n	800bf74 <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800bee4:	4b26      	ldr	r3, [pc, #152]	; (800bf80 <tcp_timewait_input+0xb0>)
 800bee6:	781b      	ldrb	r3, [r3, #0]
 800bee8:	f003 0302 	and.w	r3, r3, #2
 800beec:	2b00      	cmp	r3, #0
 800beee:	d027      	beq.n	800bf40 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800bef0:	4b24      	ldr	r3, [pc, #144]	; (800bf84 <tcp_timewait_input+0xb4>)
 800bef2:	681a      	ldr	r2, [r3, #0]
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bef8:	1ad3      	subs	r3, r2, r3
 800befa:	2b00      	cmp	r3, #0
 800befc:	db2a      	blt.n	800bf54 <tcp_timewait_input+0x84>
 800befe:	4b21      	ldr	r3, [pc, #132]	; (800bf84 <tcp_timewait_input+0xb4>)
 800bf00:	681a      	ldr	r2, [r3, #0]
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf06:	6879      	ldr	r1, [r7, #4]
 800bf08:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800bf0a:	440b      	add	r3, r1
 800bf0c:	1ad3      	subs	r3, r2, r3
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	dc20      	bgt.n	800bf54 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800bf12:	4b1d      	ldr	r3, [pc, #116]	; (800bf88 <tcp_timewait_input+0xb8>)
 800bf14:	6818      	ldr	r0, [r3, #0]
 800bf16:	4b1d      	ldr	r3, [pc, #116]	; (800bf8c <tcp_timewait_input+0xbc>)
 800bf18:	881b      	ldrh	r3, [r3, #0]
 800bf1a:	461a      	mov	r2, r3
 800bf1c:	4b19      	ldr	r3, [pc, #100]	; (800bf84 <tcp_timewait_input+0xb4>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bf22:	4b1b      	ldr	r3, [pc, #108]	; (800bf90 <tcp_timewait_input+0xc0>)
 800bf24:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800bf26:	885b      	ldrh	r3, [r3, #2]
 800bf28:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800bf2a:	4a19      	ldr	r2, [pc, #100]	; (800bf90 <tcp_timewait_input+0xc0>)
 800bf2c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800bf2e:	8812      	ldrh	r2, [r2, #0]
 800bf30:	b292      	uxth	r2, r2
 800bf32:	9201      	str	r2, [sp, #4]
 800bf34:	9300      	str	r3, [sp, #0]
 800bf36:	4b17      	ldr	r3, [pc, #92]	; (800bf94 <tcp_timewait_input+0xc4>)
 800bf38:	4a17      	ldr	r2, [pc, #92]	; (800bf98 <tcp_timewait_input+0xc8>)
 800bf3a:	f002 fa2d 	bl	800e398 <tcp_rst>
      return;
 800bf3e:	e01c      	b.n	800bf7a <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 800bf40:	4b0f      	ldr	r3, [pc, #60]	; (800bf80 <tcp_timewait_input+0xb0>)
 800bf42:	781b      	ldrb	r3, [r3, #0]
 800bf44:	f003 0301 	and.w	r3, r3, #1
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d003      	beq.n	800bf54 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800bf4c:	4b13      	ldr	r3, [pc, #76]	; (800bf9c <tcp_timewait_input+0xcc>)
 800bf4e:	681a      	ldr	r2, [r3, #0]
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800bf54:	4b0d      	ldr	r3, [pc, #52]	; (800bf8c <tcp_timewait_input+0xbc>)
 800bf56:	881b      	ldrh	r3, [r3, #0]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d00d      	beq.n	800bf78 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	7e9b      	ldrb	r3, [r3, #26]
 800bf60:	f043 0302 	orr.w	r3, r3, #2
 800bf64:	b2da      	uxtb	r2, r3
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800bf6a:	6878      	ldr	r0, [r7, #4]
 800bf6c:	f001 ff8a 	bl	800de84 <tcp_output>
  }
  return;
 800bf70:	bf00      	nop
 800bf72:	e001      	b.n	800bf78 <tcp_timewait_input+0xa8>
    return;
 800bf74:	bf00      	nop
 800bf76:	e000      	b.n	800bf7a <tcp_timewait_input+0xaa>
  return;
 800bf78:	bf00      	nop
}
 800bf7a:	3708      	adds	r7, #8
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}
 800bf80:	20004abc 	.word	0x20004abc
 800bf84:	20004ab0 	.word	0x20004ab0
 800bf88:	20004ab4 	.word	0x20004ab4
 800bf8c:	20004aba 	.word	0x20004aba
 800bf90:	20004aa0 	.word	0x20004aa0
 800bf94:	20007e30 	.word	0x20007e30
 800bf98:	20007e34 	.word	0x20007e34
 800bf9c:	2000b8c8 	.word	0x2000b8c8

0800bfa0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b08a      	sub	sp, #40	; 0x28
 800bfa4:	af02      	add	r7, sp, #8
 800bfa6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800bfac:	2300      	movs	r3, #0
 800bfae:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800bfb0:	4ba4      	ldr	r3, [pc, #656]	; (800c244 <tcp_process+0x2a4>)
 800bfb2:	781b      	ldrb	r3, [r3, #0]
 800bfb4:	f003 0304 	and.w	r3, r3, #4
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d04e      	beq.n	800c05a <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	7d1b      	ldrb	r3, [r3, #20]
 800bfc0:	2b02      	cmp	r3, #2
 800bfc2:	d108      	bne.n	800bfd6 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bfc8:	4b9f      	ldr	r3, [pc, #636]	; (800c248 <tcp_process+0x2a8>)
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	429a      	cmp	r2, r3
 800bfce:	d123      	bne.n	800c018 <tcp_process+0x78>
        acceptable = 1;
 800bfd0:	2301      	movs	r3, #1
 800bfd2:	76fb      	strb	r3, [r7, #27]
 800bfd4:	e020      	b.n	800c018 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bfda:	4b9c      	ldr	r3, [pc, #624]	; (800c24c <tcp_process+0x2ac>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	d102      	bne.n	800bfe8 <tcp_process+0x48>
        acceptable = 1;
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	76fb      	strb	r3, [r7, #27]
 800bfe6:	e017      	b.n	800c018 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800bfe8:	4b98      	ldr	r3, [pc, #608]	; (800c24c <tcp_process+0x2ac>)
 800bfea:	681a      	ldr	r2, [r3, #0]
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bff0:	1ad3      	subs	r3, r2, r3
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	db10      	blt.n	800c018 <tcp_process+0x78>
 800bff6:	4b95      	ldr	r3, [pc, #596]	; (800c24c <tcp_process+0x2ac>)
 800bff8:	681a      	ldr	r2, [r3, #0]
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bffe:	6879      	ldr	r1, [r7, #4]
 800c000:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c002:	440b      	add	r3, r1
 800c004:	1ad3      	subs	r3, r2, r3
 800c006:	2b00      	cmp	r3, #0
 800c008:	dc06      	bgt.n	800c018 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	7e9b      	ldrb	r3, [r3, #26]
 800c00e:	f043 0302 	orr.w	r3, r3, #2
 800c012:	b2da      	uxtb	r2, r3
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800c018:	7efb      	ldrb	r3, [r7, #27]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d01b      	beq.n	800c056 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	7d1b      	ldrb	r3, [r3, #20]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d106      	bne.n	800c034 <tcp_process+0x94>
 800c026:	4b8a      	ldr	r3, [pc, #552]	; (800c250 <tcp_process+0x2b0>)
 800c028:	f240 22e7 	movw	r2, #743	; 0x2e7
 800c02c:	4989      	ldr	r1, [pc, #548]	; (800c254 <tcp_process+0x2b4>)
 800c02e:	488a      	ldr	r0, [pc, #552]	; (800c258 <tcp_process+0x2b8>)
 800c030:	f00c f978 	bl	8018324 <iprintf>
      recv_flags |= TF_RESET;
 800c034:	4b89      	ldr	r3, [pc, #548]	; (800c25c <tcp_process+0x2bc>)
 800c036:	781b      	ldrb	r3, [r3, #0]
 800c038:	f043 0308 	orr.w	r3, r3, #8
 800c03c:	b2da      	uxtb	r2, r3
 800c03e:	4b87      	ldr	r3, [pc, #540]	; (800c25c <tcp_process+0x2bc>)
 800c040:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	7e9b      	ldrb	r3, [r3, #26]
 800c046:	f023 0301 	bic.w	r3, r3, #1
 800c04a:	b2da      	uxtb	r2, r3
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 800c050:	f06f 030d 	mvn.w	r3, #13
 800c054:	e34d      	b.n	800c6f2 <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 800c056:	2300      	movs	r3, #0
 800c058:	e34b      	b.n	800c6f2 <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800c05a:	4b7a      	ldr	r3, [pc, #488]	; (800c244 <tcp_process+0x2a4>)
 800c05c:	781b      	ldrb	r3, [r3, #0]
 800c05e:	f003 0302 	and.w	r3, r3, #2
 800c062:	2b00      	cmp	r3, #0
 800c064:	d010      	beq.n	800c088 <tcp_process+0xe8>
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	7d1b      	ldrb	r3, [r3, #20]
 800c06a:	2b02      	cmp	r3, #2
 800c06c:	d00c      	beq.n	800c088 <tcp_process+0xe8>
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	7d1b      	ldrb	r3, [r3, #20]
 800c072:	2b03      	cmp	r3, #3
 800c074:	d008      	beq.n	800c088 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	7e9b      	ldrb	r3, [r3, #26]
 800c07a:	f043 0302 	orr.w	r3, r3, #2
 800c07e:	b2da      	uxtb	r2, r3
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 800c084:	2300      	movs	r3, #0
 800c086:	e334      	b.n	800c6f2 <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	7e9b      	ldrb	r3, [r3, #26]
 800c08c:	f003 0310 	and.w	r3, r3, #16
 800c090:	2b00      	cmp	r3, #0
 800c092:	d103      	bne.n	800c09c <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800c094:	4b72      	ldr	r3, [pc, #456]	; (800c260 <tcp_process+0x2c0>)
 800c096:	681a      	ldr	r2, [r3, #0]
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2200      	movs	r2, #0
 800c0a0:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f001 fbdd 	bl	800d864 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	7d1b      	ldrb	r3, [r3, #20]
 800c0ae:	3b02      	subs	r3, #2
 800c0b0:	2b07      	cmp	r3, #7
 800c0b2:	f200 830e 	bhi.w	800c6d2 <tcp_process+0x732>
 800c0b6:	a201      	add	r2, pc, #4	; (adr r2, 800c0bc <tcp_process+0x11c>)
 800c0b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0bc:	0800c0dd 	.word	0x0800c0dd
 800c0c0:	0800c2d5 	.word	0x0800c2d5
 800c0c4:	0800c42d 	.word	0x0800c42d
 800c0c8:	0800c457 	.word	0x0800c457
 800c0cc:	0800c581 	.word	0x0800c581
 800c0d0:	0800c42d 	.word	0x0800c42d
 800c0d4:	0800c60d 	.word	0x0800c60d
 800c0d8:	0800c69d 	.word	0x0800c69d
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800c0dc:	4b59      	ldr	r3, [pc, #356]	; (800c244 <tcp_process+0x2a4>)
 800c0de:	781b      	ldrb	r3, [r3, #0]
 800c0e0:	f003 0310 	and.w	r3, r3, #16
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	f000 80cb 	beq.w	800c280 <tcp_process+0x2e0>
 800c0ea:	4b56      	ldr	r3, [pc, #344]	; (800c244 <tcp_process+0x2a4>)
 800c0ec:	781b      	ldrb	r3, [r3, #0]
 800c0ee:	f003 0302 	and.w	r3, r3, #2
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	f000 80c4 	beq.w	800c280 <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0fc:	1c5a      	adds	r2, r3, #1
 800c0fe:	4b52      	ldr	r3, [pc, #328]	; (800c248 <tcp_process+0x2a8>)
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	429a      	cmp	r2, r3
 800c104:	f040 80bc 	bne.w	800c280 <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 800c108:	4b50      	ldr	r3, [pc, #320]	; (800c24c <tcp_process+0x2ac>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	1c5a      	adds	r2, r3, #1
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 800c11a:	4b4b      	ldr	r3, [pc, #300]	; (800c248 <tcp_process+0x2a8>)
 800c11c:	681a      	ldr	r2, [r3, #0]
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 800c122:	4b50      	ldr	r3, [pc, #320]	; (800c264 <tcp_process+0x2c4>)
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	89db      	ldrh	r3, [r3, #14]
 800c128:	b29a      	uxth	r2, r3
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800c13c:	4b43      	ldr	r3, [pc, #268]	; (800c24c <tcp_process+0x2ac>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	1e5a      	subs	r2, r3, #1
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2204      	movs	r2, #4
 800c14a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	3304      	adds	r3, #4
 800c154:	4619      	mov	r1, r3
 800c156:	4610      	mov	r0, r2
 800c158:	f7ff f95c 	bl	800b414 <tcp_eff_send_mss_impl>
 800c15c:	4603      	mov	r3, r0
 800c15e:	461a      	mov	r2, r3
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c168:	005b      	lsls	r3, r3, #1
 800c16a:	f241 121c 	movw	r2, #4380	; 0x111c
 800c16e:	429a      	cmp	r2, r3
 800c170:	bf38      	it	cc
 800c172:	461a      	movcc	r2, r3
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c178:	009b      	lsls	r3, r3, #2
 800c17a:	4293      	cmp	r3, r2
 800c17c:	bf28      	it	cs
 800c17e:	4613      	movcs	r3, r2
 800c180:	b29a      	uxth	r2, r3
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d106      	bne.n	800c1a0 <tcp_process+0x200>
 800c192:	4b2f      	ldr	r3, [pc, #188]	; (800c250 <tcp_process+0x2b0>)
 800c194:	f240 321a 	movw	r2, #794	; 0x31a
 800c198:	4933      	ldr	r1, [pc, #204]	; (800c268 <tcp_process+0x2c8>)
 800c19a:	482f      	ldr	r0, [pc, #188]	; (800c258 <tcp_process+0x2b8>)
 800c19c:	f00c f8c2 	bl	8018324 <iprintf>
      --pcb->snd_queuelen;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c1a6:	3b01      	subs	r3, #1
 800c1a8:	b29a      	uxth	r2, r3
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1b4:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 800c1b6:	69fb      	ldr	r3, [r7, #28]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d111      	bne.n	800c1e0 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c1c0:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800c1c2:	69fb      	ldr	r3, [r7, #28]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d106      	bne.n	800c1d6 <tcp_process+0x236>
 800c1c8:	4b21      	ldr	r3, [pc, #132]	; (800c250 <tcp_process+0x2b0>)
 800c1ca:	f240 3222 	movw	r2, #802	; 0x322
 800c1ce:	4927      	ldr	r1, [pc, #156]	; (800c26c <tcp_process+0x2cc>)
 800c1d0:	4821      	ldr	r0, [pc, #132]	; (800c258 <tcp_process+0x2b8>)
 800c1d2:	f00c f8a7 	bl	8018324 <iprintf>
        pcb->unsent = rseg->next;
 800c1d6:	69fb      	ldr	r3, [r7, #28]
 800c1d8:	681a      	ldr	r2, [r3, #0]
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	669a      	str	r2, [r3, #104]	; 0x68
 800c1de:	e003      	b.n	800c1e8 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 800c1e0:	69fb      	ldr	r3, [r7, #28]
 800c1e2:	681a      	ldr	r2, [r3, #0]
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 800c1e8:	69f8      	ldr	r0, [r7, #28]
 800c1ea:	f7fe feaa 	bl	800af42 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d104      	bne.n	800c200 <tcp_process+0x260>
        pcb->rtime = -1;
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c1fc:	861a      	strh	r2, [r3, #48]	; 0x30
 800c1fe:	e006      	b.n	800c20e <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2200      	movs	r2, #0
 800c204:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2200      	movs	r2, #0
 800c20a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c214:	2b00      	cmp	r3, #0
 800c216:	d00a      	beq.n	800c22e <tcp_process+0x28e>
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c21e:	687a      	ldr	r2, [r7, #4]
 800c220:	6910      	ldr	r0, [r2, #16]
 800c222:	2200      	movs	r2, #0
 800c224:	6879      	ldr	r1, [r7, #4]
 800c226:	4798      	blx	r3
 800c228:	4603      	mov	r3, r0
 800c22a:	76bb      	strb	r3, [r7, #26]
 800c22c:	e001      	b.n	800c232 <tcp_process+0x292>
 800c22e:	2300      	movs	r3, #0
 800c230:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 800c232:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c236:	f113 0f0d 	cmn.w	r3, #13
 800c23a:	d119      	bne.n	800c270 <tcp_process+0x2d0>
        return ERR_ABRT;
 800c23c:	f06f 030c 	mvn.w	r3, #12
 800c240:	e257      	b.n	800c6f2 <tcp_process+0x752>
 800c242:	bf00      	nop
 800c244:	20004abc 	.word	0x20004abc
 800c248:	20004ab4 	.word	0x20004ab4
 800c24c:	20004ab0 	.word	0x20004ab0
 800c250:	0801a24c 	.word	0x0801a24c
 800c254:	0801a404 	.word	0x0801a404
 800c258:	0801a290 	.word	0x0801a290
 800c25c:	20004abd 	.word	0x20004abd
 800c260:	2000b8c8 	.word	0x2000b8c8
 800c264:	20004aa0 	.word	0x20004aa0
 800c268:	0801a424 	.word	0x0801a424
 800c26c:	0801a43c 	.word	0x0801a43c
      }
      tcp_ack_now(pcb);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	7e9b      	ldrb	r3, [r3, #26]
 800c274:	f043 0302 	orr.w	r3, r3, #2
 800c278:	b2da      	uxtb	r2, r3
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 800c27e:	e22a      	b.n	800c6d6 <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 800c280:	4b9f      	ldr	r3, [pc, #636]	; (800c500 <tcp_process+0x560>)
 800c282:	781b      	ldrb	r3, [r3, #0]
 800c284:	f003 0310 	and.w	r3, r3, #16
 800c288:	2b00      	cmp	r3, #0
 800c28a:	f000 8224 	beq.w	800c6d6 <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c28e:	4b9d      	ldr	r3, [pc, #628]	; (800c504 <tcp_process+0x564>)
 800c290:	6818      	ldr	r0, [r3, #0]
 800c292:	4b9d      	ldr	r3, [pc, #628]	; (800c508 <tcp_process+0x568>)
 800c294:	881b      	ldrh	r3, [r3, #0]
 800c296:	461a      	mov	r2, r3
 800c298:	4b9c      	ldr	r3, [pc, #624]	; (800c50c <tcp_process+0x56c>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c29e:	4b9c      	ldr	r3, [pc, #624]	; (800c510 <tcp_process+0x570>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c2a2:	885b      	ldrh	r3, [r3, #2]
 800c2a4:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c2a6:	4a9a      	ldr	r2, [pc, #616]	; (800c510 <tcp_process+0x570>)
 800c2a8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c2aa:	8812      	ldrh	r2, [r2, #0]
 800c2ac:	b292      	uxth	r2, r2
 800c2ae:	9201      	str	r2, [sp, #4]
 800c2b0:	9300      	str	r3, [sp, #0]
 800c2b2:	4b98      	ldr	r3, [pc, #608]	; (800c514 <tcp_process+0x574>)
 800c2b4:	4a98      	ldr	r2, [pc, #608]	; (800c518 <tcp_process+0x578>)
 800c2b6:	f002 f86f 	bl	800e398 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c2c0:	2b05      	cmp	r3, #5
 800c2c2:	f200 8208 	bhi.w	800c6d6 <tcp_process+0x736>
        pcb->rtime = 0;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800c2cc:	6878      	ldr	r0, [r7, #4]
 800c2ce:	f002 f8d9 	bl	800e484 <tcp_rexmit_rto>
    break;
 800c2d2:	e200      	b.n	800c6d6 <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 800c2d4:	4b8a      	ldr	r3, [pc, #552]	; (800c500 <tcp_process+0x560>)
 800c2d6:	781b      	ldrb	r3, [r3, #0]
 800c2d8:	f003 0310 	and.w	r3, r3, #16
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	f000 8091 	beq.w	800c404 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800c2e2:	4b88      	ldr	r3, [pc, #544]	; (800c504 <tcp_process+0x564>)
 800c2e4:	681a      	ldr	r2, [r3, #0]
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2ea:	1ad3      	subs	r3, r2, r3
 800c2ec:	3b01      	subs	r3, #1
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	db71      	blt.n	800c3d6 <tcp_process+0x436>
 800c2f2:	4b84      	ldr	r3, [pc, #528]	; (800c504 <tcp_process+0x564>)
 800c2f4:	681a      	ldr	r2, [r3, #0]
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2fa:	1ad3      	subs	r3, r2, r3
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	dc6a      	bgt.n	800c3d6 <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	2204      	movs	r2, #4
 800c304:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d00b      	beq.n	800c326 <tcp_process+0x386>
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c312:	699b      	ldr	r3, [r3, #24]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d106      	bne.n	800c326 <tcp_process+0x386>
 800c318:	4b80      	ldr	r3, [pc, #512]	; (800c51c <tcp_process+0x57c>)
 800c31a:	f240 3251 	movw	r2, #849	; 0x351
 800c31e:	4980      	ldr	r1, [pc, #512]	; (800c520 <tcp_process+0x580>)
 800c320:	4880      	ldr	r0, [pc, #512]	; (800c524 <tcp_process+0x584>)
 800c322:	f00b ffff 	bl	8018324 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d102      	bne.n	800c334 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 800c32e:	23fa      	movs	r3, #250	; 0xfa
 800c330:	76bb      	strb	r3, [r7, #26]
 800c332:	e011      	b.n	800c358 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c338:	699b      	ldr	r3, [r3, #24]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d00a      	beq.n	800c354 <tcp_process+0x3b4>
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c342:	699b      	ldr	r3, [r3, #24]
 800c344:	687a      	ldr	r2, [r7, #4]
 800c346:	6910      	ldr	r0, [r2, #16]
 800c348:	2200      	movs	r2, #0
 800c34a:	6879      	ldr	r1, [r7, #4]
 800c34c:	4798      	blx	r3
 800c34e:	4603      	mov	r3, r0
 800c350:	76bb      	strb	r3, [r7, #26]
 800c352:	e001      	b.n	800c358 <tcp_process+0x3b8>
 800c354:	23f0      	movs	r3, #240	; 0xf0
 800c356:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 800c358:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d00a      	beq.n	800c376 <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 800c360:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c364:	f113 0f0d 	cmn.w	r3, #13
 800c368:	d002      	beq.n	800c370 <tcp_process+0x3d0>
            tcp_abort(pcb);
 800c36a:	6878      	ldr	r0, [r7, #4]
 800c36c:	f7fe f994 	bl	800a698 <tcp_abort>
          }
          return ERR_ABRT;
 800c370:	f06f 030c 	mvn.w	r3, #12
 800c374:	e1bd      	b.n	800c6f2 <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 800c376:	6878      	ldr	r0, [r7, #4]
 800c378:	f000 fa42 	bl	800c800 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 800c37c:	4b6a      	ldr	r3, [pc, #424]	; (800c528 <tcp_process+0x588>)
 800c37e:	881b      	ldrh	r3, [r3, #0]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d005      	beq.n	800c390 <tcp_process+0x3f0>
          recv_acked--;
 800c384:	4b68      	ldr	r3, [pc, #416]	; (800c528 <tcp_process+0x588>)
 800c386:	881b      	ldrh	r3, [r3, #0]
 800c388:	3b01      	subs	r3, #1
 800c38a:	b29a      	uxth	r2, r3
 800c38c:	4b66      	ldr	r3, [pc, #408]	; (800c528 <tcp_process+0x588>)
 800c38e:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c394:	005b      	lsls	r3, r3, #1
 800c396:	f241 121c 	movw	r2, #4380	; 0x111c
 800c39a:	429a      	cmp	r2, r3
 800c39c:	bf38      	it	cc
 800c39e:	461a      	movcc	r2, r3
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c3a4:	009b      	lsls	r3, r3, #2
 800c3a6:	4293      	cmp	r3, r2
 800c3a8:	bf28      	it	cs
 800c3aa:	4613      	movcs	r3, r2
 800c3ac:	b29a      	uxth	r2, r3
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 800c3b4:	4b5d      	ldr	r3, [pc, #372]	; (800c52c <tcp_process+0x58c>)
 800c3b6:	781b      	ldrb	r3, [r3, #0]
 800c3b8:	f003 0320 	and.w	r3, r3, #32
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d034      	beq.n	800c42a <tcp_process+0x48a>
          tcp_ack_now(pcb);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	7e9b      	ldrb	r3, [r3, #26]
 800c3c4:	f043 0302 	orr.w	r3, r3, #2
 800c3c8:	b2da      	uxtb	r2, r3
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2207      	movs	r2, #7
 800c3d2:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 800c3d4:	e029      	b.n	800c42a <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c3d6:	4b4b      	ldr	r3, [pc, #300]	; (800c504 <tcp_process+0x564>)
 800c3d8:	6818      	ldr	r0, [r3, #0]
 800c3da:	4b4b      	ldr	r3, [pc, #300]	; (800c508 <tcp_process+0x568>)
 800c3dc:	881b      	ldrh	r3, [r3, #0]
 800c3de:	461a      	mov	r2, r3
 800c3e0:	4b4a      	ldr	r3, [pc, #296]	; (800c50c <tcp_process+0x56c>)
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c3e6:	4b4a      	ldr	r3, [pc, #296]	; (800c510 <tcp_process+0x570>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c3ea:	885b      	ldrh	r3, [r3, #2]
 800c3ec:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c3ee:	4a48      	ldr	r2, [pc, #288]	; (800c510 <tcp_process+0x570>)
 800c3f0:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c3f2:	8812      	ldrh	r2, [r2, #0]
 800c3f4:	b292      	uxth	r2, r2
 800c3f6:	9201      	str	r2, [sp, #4]
 800c3f8:	9300      	str	r3, [sp, #0]
 800c3fa:	4b46      	ldr	r3, [pc, #280]	; (800c514 <tcp_process+0x574>)
 800c3fc:	4a46      	ldr	r2, [pc, #280]	; (800c518 <tcp_process+0x578>)
 800c3fe:	f001 ffcb 	bl	800e398 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 800c402:	e16a      	b.n	800c6da <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800c404:	4b3e      	ldr	r3, [pc, #248]	; (800c500 <tcp_process+0x560>)
 800c406:	781b      	ldrb	r3, [r3, #0]
 800c408:	f003 0302 	and.w	r3, r3, #2
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	f000 8164 	beq.w	800c6da <tcp_process+0x73a>
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c416:	1e5a      	subs	r2, r3, #1
 800c418:	4b3c      	ldr	r3, [pc, #240]	; (800c50c <tcp_process+0x56c>)
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	429a      	cmp	r2, r3
 800c41e:	f040 815c 	bne.w	800c6da <tcp_process+0x73a>
      tcp_rexmit(pcb);
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f002 f864 	bl	800e4f0 <tcp_rexmit>
    break;
 800c428:	e157      	b.n	800c6da <tcp_process+0x73a>
 800c42a:	e156      	b.n	800c6da <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	f000 f9e7 	bl	800c800 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800c432:	4b3e      	ldr	r3, [pc, #248]	; (800c52c <tcp_process+0x58c>)
 800c434:	781b      	ldrb	r3, [r3, #0]
 800c436:	f003 0320 	and.w	r3, r3, #32
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	f000 814f 	beq.w	800c6de <tcp_process+0x73e>
      tcp_ack_now(pcb);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	7e9b      	ldrb	r3, [r3, #26]
 800c444:	f043 0302 	orr.w	r3, r3, #2
 800c448:	b2da      	uxtb	r2, r3
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2207      	movs	r2, #7
 800c452:	751a      	strb	r2, [r3, #20]
    }
    break;
 800c454:	e143      	b.n	800c6de <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f000 f9d2 	bl	800c800 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800c45c:	4b33      	ldr	r3, [pc, #204]	; (800c52c <tcp_process+0x58c>)
 800c45e:	781b      	ldrb	r3, [r3, #0]
 800c460:	f003 0320 	and.w	r3, r3, #32
 800c464:	2b00      	cmp	r3, #0
 800c466:	d074      	beq.n	800c552 <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c468:	4b25      	ldr	r3, [pc, #148]	; (800c500 <tcp_process+0x560>)
 800c46a:	781b      	ldrb	r3, [r3, #0]
 800c46c:	f003 0310 	and.w	r3, r3, #16
 800c470:	2b00      	cmp	r3, #0
 800c472:	d063      	beq.n	800c53c <tcp_process+0x59c>
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c478:	4b22      	ldr	r3, [pc, #136]	; (800c504 <tcp_process+0x564>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	429a      	cmp	r2, r3
 800c47e:	d15d      	bne.n	800c53c <tcp_process+0x59c>
          pcb->unsent == NULL) {
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c484:	2b00      	cmp	r3, #0
 800c486:	d159      	bne.n	800c53c <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	7e9b      	ldrb	r3, [r3, #26]
 800c48c:	f043 0302 	orr.w	r3, r3, #2
 800c490:	b2da      	uxtb	r2, r3
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f7fe fee8 	bl	800b26c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800c49c:	4b24      	ldr	r3, [pc, #144]	; (800c530 <tcp_process+0x590>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	687a      	ldr	r2, [r7, #4]
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	d105      	bne.n	800c4b2 <tcp_process+0x512>
 800c4a6:	4b22      	ldr	r3, [pc, #136]	; (800c530 <tcp_process+0x590>)
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	68db      	ldr	r3, [r3, #12]
 800c4ac:	4a20      	ldr	r2, [pc, #128]	; (800c530 <tcp_process+0x590>)
 800c4ae:	6013      	str	r3, [r2, #0]
 800c4b0:	e013      	b.n	800c4da <tcp_process+0x53a>
 800c4b2:	4b1f      	ldr	r3, [pc, #124]	; (800c530 <tcp_process+0x590>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	617b      	str	r3, [r7, #20]
 800c4b8:	e00c      	b.n	800c4d4 <tcp_process+0x534>
 800c4ba:	697b      	ldr	r3, [r7, #20]
 800c4bc:	68db      	ldr	r3, [r3, #12]
 800c4be:	687a      	ldr	r2, [r7, #4]
 800c4c0:	429a      	cmp	r2, r3
 800c4c2:	d104      	bne.n	800c4ce <tcp_process+0x52e>
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	68da      	ldr	r2, [r3, #12]
 800c4c8:	697b      	ldr	r3, [r7, #20]
 800c4ca:	60da      	str	r2, [r3, #12]
 800c4cc:	e005      	b.n	800c4da <tcp_process+0x53a>
 800c4ce:	697b      	ldr	r3, [r7, #20]
 800c4d0:	68db      	ldr	r3, [r3, #12]
 800c4d2:	617b      	str	r3, [r7, #20]
 800c4d4:	697b      	ldr	r3, [r7, #20]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d1ef      	bne.n	800c4ba <tcp_process+0x51a>
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2200      	movs	r2, #0
 800c4de:	60da      	str	r2, [r3, #12]
 800c4e0:	4b14      	ldr	r3, [pc, #80]	; (800c534 <tcp_process+0x594>)
 800c4e2:	2201      	movs	r2, #1
 800c4e4:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	220a      	movs	r2, #10
 800c4ea:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800c4ec:	4b12      	ldr	r3, [pc, #72]	; (800c538 <tcp_process+0x598>)
 800c4ee:	681a      	ldr	r2, [r3, #0]
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	60da      	str	r2, [r3, #12]
 800c4f4:	4a10      	ldr	r2, [pc, #64]	; (800c538 <tcp_process+0x598>)
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6013      	str	r3, [r2, #0]
 800c4fa:	f002 f99d 	bl	800e838 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 800c4fe:	e0f0      	b.n	800c6e2 <tcp_process+0x742>
 800c500:	20004abc 	.word	0x20004abc
 800c504:	20004ab4 	.word	0x20004ab4
 800c508:	20004aba 	.word	0x20004aba
 800c50c:	20004ab0 	.word	0x20004ab0
 800c510:	20004aa0 	.word	0x20004aa0
 800c514:	20007e30 	.word	0x20007e30
 800c518:	20007e34 	.word	0x20007e34
 800c51c:	0801a24c 	.word	0x0801a24c
 800c520:	0801a450 	.word	0x0801a450
 800c524:	0801a290 	.word	0x0801a290
 800c528:	20004ab8 	.word	0x20004ab8
 800c52c:	20004abd 	.word	0x20004abd
 800c530:	2000b8c4 	.word	0x2000b8c4
 800c534:	2000b8c0 	.word	0x2000b8c0
 800c538:	2000b8d4 	.word	0x2000b8d4
        tcp_ack_now(pcb);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	7e9b      	ldrb	r3, [r3, #26]
 800c540:	f043 0302 	orr.w	r3, r3, #2
 800c544:	b2da      	uxtb	r2, r3
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2208      	movs	r2, #8
 800c54e:	751a      	strb	r2, [r3, #20]
    break;
 800c550:	e0c7      	b.n	800c6e2 <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c552:	4b6a      	ldr	r3, [pc, #424]	; (800c6fc <tcp_process+0x75c>)
 800c554:	781b      	ldrb	r3, [r3, #0]
 800c556:	f003 0310 	and.w	r3, r3, #16
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	f000 80c1 	beq.w	800c6e2 <tcp_process+0x742>
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c564:	4b66      	ldr	r3, [pc, #408]	; (800c700 <tcp_process+0x760>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	429a      	cmp	r2, r3
 800c56a:	f040 80ba 	bne.w	800c6e2 <tcp_process+0x742>
               pcb->unsent == NULL) {
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800c572:	2b00      	cmp	r3, #0
 800c574:	f040 80b5 	bne.w	800c6e2 <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2206      	movs	r2, #6
 800c57c:	751a      	strb	r2, [r3, #20]
    break;
 800c57e:	e0b0      	b.n	800c6e2 <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 800c580:	6878      	ldr	r0, [r7, #4]
 800c582:	f000 f93d 	bl	800c800 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800c586:	4b5f      	ldr	r3, [pc, #380]	; (800c704 <tcp_process+0x764>)
 800c588:	781b      	ldrb	r3, [r3, #0]
 800c58a:	f003 0320 	and.w	r3, r3, #32
 800c58e:	2b00      	cmp	r3, #0
 800c590:	f000 80a9 	beq.w	800c6e6 <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	7e9b      	ldrb	r3, [r3, #26]
 800c598:	f043 0302 	orr.w	r3, r3, #2
 800c59c:	b2da      	uxtb	r2, r3
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 800c5a2:	6878      	ldr	r0, [r7, #4]
 800c5a4:	f7fe fe62 	bl	800b26c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c5a8:	4b57      	ldr	r3, [pc, #348]	; (800c708 <tcp_process+0x768>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	687a      	ldr	r2, [r7, #4]
 800c5ae:	429a      	cmp	r2, r3
 800c5b0:	d105      	bne.n	800c5be <tcp_process+0x61e>
 800c5b2:	4b55      	ldr	r3, [pc, #340]	; (800c708 <tcp_process+0x768>)
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	68db      	ldr	r3, [r3, #12]
 800c5b8:	4a53      	ldr	r2, [pc, #332]	; (800c708 <tcp_process+0x768>)
 800c5ba:	6013      	str	r3, [r2, #0]
 800c5bc:	e013      	b.n	800c5e6 <tcp_process+0x646>
 800c5be:	4b52      	ldr	r3, [pc, #328]	; (800c708 <tcp_process+0x768>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	613b      	str	r3, [r7, #16]
 800c5c4:	e00c      	b.n	800c5e0 <tcp_process+0x640>
 800c5c6:	693b      	ldr	r3, [r7, #16]
 800c5c8:	68db      	ldr	r3, [r3, #12]
 800c5ca:	687a      	ldr	r2, [r7, #4]
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	d104      	bne.n	800c5da <tcp_process+0x63a>
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	68da      	ldr	r2, [r3, #12]
 800c5d4:	693b      	ldr	r3, [r7, #16]
 800c5d6:	60da      	str	r2, [r3, #12]
 800c5d8:	e005      	b.n	800c5e6 <tcp_process+0x646>
 800c5da:	693b      	ldr	r3, [r7, #16]
 800c5dc:	68db      	ldr	r3, [r3, #12]
 800c5de:	613b      	str	r3, [r7, #16]
 800c5e0:	693b      	ldr	r3, [r7, #16]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d1ef      	bne.n	800c5c6 <tcp_process+0x626>
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	60da      	str	r2, [r3, #12]
 800c5ec:	4b47      	ldr	r3, [pc, #284]	; (800c70c <tcp_process+0x76c>)
 800c5ee:	2201      	movs	r2, #1
 800c5f0:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	220a      	movs	r2, #10
 800c5f6:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800c5f8:	4b45      	ldr	r3, [pc, #276]	; (800c710 <tcp_process+0x770>)
 800c5fa:	681a      	ldr	r2, [r3, #0]
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	60da      	str	r2, [r3, #12]
 800c600:	4a43      	ldr	r2, [pc, #268]	; (800c710 <tcp_process+0x770>)
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	6013      	str	r3, [r2, #0]
 800c606:	f002 f917 	bl	800e838 <tcp_timer_needed>
    }
    break;
 800c60a:	e06c      	b.n	800c6e6 <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 800c60c:	6878      	ldr	r0, [r7, #4]
 800c60e:	f000 f8f7 	bl	800c800 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c612:	4b3a      	ldr	r3, [pc, #232]	; (800c6fc <tcp_process+0x75c>)
 800c614:	781b      	ldrb	r3, [r3, #0]
 800c616:	f003 0310 	and.w	r3, r3, #16
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d065      	beq.n	800c6ea <tcp_process+0x74a>
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c622:	4b37      	ldr	r3, [pc, #220]	; (800c700 <tcp_process+0x760>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	429a      	cmp	r2, r3
 800c628:	d15f      	bne.n	800c6ea <tcp_process+0x74a>
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d15b      	bne.n	800c6ea <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f7fe fe1a 	bl	800b26c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c638:	4b33      	ldr	r3, [pc, #204]	; (800c708 <tcp_process+0x768>)
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	687a      	ldr	r2, [r7, #4]
 800c63e:	429a      	cmp	r2, r3
 800c640:	d105      	bne.n	800c64e <tcp_process+0x6ae>
 800c642:	4b31      	ldr	r3, [pc, #196]	; (800c708 <tcp_process+0x768>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	68db      	ldr	r3, [r3, #12]
 800c648:	4a2f      	ldr	r2, [pc, #188]	; (800c708 <tcp_process+0x768>)
 800c64a:	6013      	str	r3, [r2, #0]
 800c64c:	e013      	b.n	800c676 <tcp_process+0x6d6>
 800c64e:	4b2e      	ldr	r3, [pc, #184]	; (800c708 <tcp_process+0x768>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	60fb      	str	r3, [r7, #12]
 800c654:	e00c      	b.n	800c670 <tcp_process+0x6d0>
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	68db      	ldr	r3, [r3, #12]
 800c65a:	687a      	ldr	r2, [r7, #4]
 800c65c:	429a      	cmp	r2, r3
 800c65e:	d104      	bne.n	800c66a <tcp_process+0x6ca>
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	68da      	ldr	r2, [r3, #12]
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	60da      	str	r2, [r3, #12]
 800c668:	e005      	b.n	800c676 <tcp_process+0x6d6>
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	68db      	ldr	r3, [r3, #12]
 800c66e:	60fb      	str	r3, [r7, #12]
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d1ef      	bne.n	800c656 <tcp_process+0x6b6>
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	2200      	movs	r2, #0
 800c67a:	60da      	str	r2, [r3, #12]
 800c67c:	4b23      	ldr	r3, [pc, #140]	; (800c70c <tcp_process+0x76c>)
 800c67e:	2201      	movs	r2, #1
 800c680:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	220a      	movs	r2, #10
 800c686:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800c688:	4b21      	ldr	r3, [pc, #132]	; (800c710 <tcp_process+0x770>)
 800c68a:	681a      	ldr	r2, [r3, #0]
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	60da      	str	r2, [r3, #12]
 800c690:	4a1f      	ldr	r2, [pc, #124]	; (800c710 <tcp_process+0x770>)
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	6013      	str	r3, [r2, #0]
 800c696:	f002 f8cf 	bl	800e838 <tcp_timer_needed>
    }
    break;
 800c69a:	e026      	b.n	800c6ea <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 800c69c:	6878      	ldr	r0, [r7, #4]
 800c69e:	f000 f8af 	bl	800c800 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800c6a2:	4b16      	ldr	r3, [pc, #88]	; (800c6fc <tcp_process+0x75c>)
 800c6a4:	781b      	ldrb	r3, [r3, #0]
 800c6a6:	f003 0310 	and.w	r3, r3, #16
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d01f      	beq.n	800c6ee <tcp_process+0x74e>
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c6b2:	4b13      	ldr	r3, [pc, #76]	; (800c700 <tcp_process+0x760>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	429a      	cmp	r2, r3
 800c6b8:	d119      	bne.n	800c6ee <tcp_process+0x74e>
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d115      	bne.n	800c6ee <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 800c6c2:	4b10      	ldr	r3, [pc, #64]	; (800c704 <tcp_process+0x764>)
 800c6c4:	781b      	ldrb	r3, [r3, #0]
 800c6c6:	f043 0310 	orr.w	r3, r3, #16
 800c6ca:	b2da      	uxtb	r2, r3
 800c6cc:	4b0d      	ldr	r3, [pc, #52]	; (800c704 <tcp_process+0x764>)
 800c6ce:	701a      	strb	r2, [r3, #0]
    }
    break;
 800c6d0:	e00d      	b.n	800c6ee <tcp_process+0x74e>
  default:
    break;
 800c6d2:	bf00      	nop
 800c6d4:	e00c      	b.n	800c6f0 <tcp_process+0x750>
    break;
 800c6d6:	bf00      	nop
 800c6d8:	e00a      	b.n	800c6f0 <tcp_process+0x750>
    break;
 800c6da:	bf00      	nop
 800c6dc:	e008      	b.n	800c6f0 <tcp_process+0x750>
    break;
 800c6de:	bf00      	nop
 800c6e0:	e006      	b.n	800c6f0 <tcp_process+0x750>
    break;
 800c6e2:	bf00      	nop
 800c6e4:	e004      	b.n	800c6f0 <tcp_process+0x750>
    break;
 800c6e6:	bf00      	nop
 800c6e8:	e002      	b.n	800c6f0 <tcp_process+0x750>
    break;
 800c6ea:	bf00      	nop
 800c6ec:	e000      	b.n	800c6f0 <tcp_process+0x750>
    break;
 800c6ee:	bf00      	nop
  }
  return ERR_OK;
 800c6f0:	2300      	movs	r3, #0
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	3720      	adds	r7, #32
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bd80      	pop	{r7, pc}
 800c6fa:	bf00      	nop
 800c6fc:	20004abc 	.word	0x20004abc
 800c700:	20004ab4 	.word	0x20004ab4
 800c704:	20004abd 	.word	0x20004abd
 800c708:	2000b8c4 	.word	0x2000b8c4
 800c70c:	2000b8c0 	.word	0x2000b8c0
 800c710:	2000b8d4 	.word	0x2000b8d4

0800c714 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800c714:	b590      	push	{r4, r7, lr}
 800c716:	b085      	sub	sp, #20
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
 800c71c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	68db      	ldr	r3, [r3, #12]
 800c722:	899b      	ldrh	r3, [r3, #12]
 800c724:	b29b      	uxth	r3, r3
 800c726:	4618      	mov	r0, r3
 800c728:	f7fb fca8 	bl	800807c <lwip_htons>
 800c72c:	4603      	mov	r3, r0
 800c72e:	f003 0301 	and.w	r3, r3, #1
 800c732:	2b00      	cmp	r3, #0
 800c734:	d027      	beq.n	800c786 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800c736:	6838      	ldr	r0, [r7, #0]
 800c738:	f7fe fbef 	bl	800af1a <tcp_segs_free>
    next = NULL;
 800c73c:	2300      	movs	r3, #0
 800c73e:	603b      	str	r3, [r7, #0]
 800c740:	e055      	b.n	800c7ee <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800c742:	683b      	ldr	r3, [r7, #0]
 800c744:	68db      	ldr	r3, [r3, #12]
 800c746:	899b      	ldrh	r3, [r3, #12]
 800c748:	b29b      	uxth	r3, r3
 800c74a:	4618      	mov	r0, r3
 800c74c:	f7fb fc96 	bl	800807c <lwip_htons>
 800c750:	4603      	mov	r3, r0
 800c752:	f003 0301 	and.w	r3, r3, #1
 800c756:	2b00      	cmp	r3, #0
 800c758:	d00d      	beq.n	800c776 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	68db      	ldr	r3, [r3, #12]
 800c75e:	899b      	ldrh	r3, [r3, #12]
 800c760:	b29c      	uxth	r4, r3
 800c762:	2001      	movs	r0, #1
 800c764:	f7fb fc8a 	bl	800807c <lwip_htons>
 800c768:	4603      	mov	r3, r0
 800c76a:	461a      	mov	r2, r3
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	68db      	ldr	r3, [r3, #12]
 800c770:	4322      	orrs	r2, r4
 800c772:	b292      	uxth	r2, r2
 800c774:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800c780:	68f8      	ldr	r0, [r7, #12]
 800c782:	f7fe fbde 	bl	800af42 <tcp_seg_free>
    while (next &&
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d00e      	beq.n	800c7aa <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	891b      	ldrh	r3, [r3, #8]
 800c790:	461a      	mov	r2, r3
 800c792:	4b1a      	ldr	r3, [pc, #104]	; (800c7fc <tcp_oos_insert_segment+0xe8>)
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	441a      	add	r2, r3
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	68db      	ldr	r3, [r3, #12]
 800c79c:	685b      	ldr	r3, [r3, #4]
 800c79e:	6839      	ldr	r1, [r7, #0]
 800c7a0:	8909      	ldrh	r1, [r1, #8]
 800c7a2:	440b      	add	r3, r1
 800c7a4:	1ad3      	subs	r3, r2, r3
    while (next &&
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	dacb      	bge.n	800c742 <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d01e      	beq.n	800c7ee <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	891b      	ldrh	r3, [r3, #8]
 800c7b4:	461a      	mov	r2, r3
 800c7b6:	4b11      	ldr	r3, [pc, #68]	; (800c7fc <tcp_oos_insert_segment+0xe8>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	441a      	add	r2, r3
 800c7bc:	683b      	ldr	r3, [r7, #0]
 800c7be:	68db      	ldr	r3, [r3, #12]
 800c7c0:	685b      	ldr	r3, [r3, #4]
 800c7c2:	1ad3      	subs	r3, r2, r3
    if (next &&
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	dd12      	ble.n	800c7ee <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	68db      	ldr	r3, [r3, #12]
 800c7cc:	685b      	ldr	r3, [r3, #4]
 800c7ce:	b29a      	uxth	r2, r3
 800c7d0:	4b0a      	ldr	r3, [pc, #40]	; (800c7fc <tcp_oos_insert_segment+0xe8>)
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	b29b      	uxth	r3, r3
 800c7d6:	1ad3      	subs	r3, r2, r3
 800c7d8:	b29a      	uxth	r2, r3
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	685a      	ldr	r2, [r3, #4]
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	891b      	ldrh	r3, [r3, #8]
 800c7e6:	4619      	mov	r1, r3
 800c7e8:	4610      	mov	r0, r2
 800c7ea:	f7fc ff95 	bl	8009718 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	683a      	ldr	r2, [r7, #0]
 800c7f2:	601a      	str	r2, [r3, #0]
}
 800c7f4:	bf00      	nop
 800c7f6:	3714      	adds	r7, #20
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	bd90      	pop	{r4, r7, pc}
 800c7fc:	20004ab0 	.word	0x20004ab0

0800c800 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800c800:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c802:	b08d      	sub	sp, #52	; 0x34
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 800c808:	2300      	movs	r3, #0
 800c80a:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	7d1b      	ldrb	r3, [r3, #20]
 800c810:	2b03      	cmp	r3, #3
 800c812:	d806      	bhi.n	800c822 <tcp_receive+0x22>
 800c814:	4ba6      	ldr	r3, [pc, #664]	; (800cab0 <tcp_receive+0x2b0>)
 800c816:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800c81a:	49a6      	ldr	r1, [pc, #664]	; (800cab4 <tcp_receive+0x2b4>)
 800c81c:	48a6      	ldr	r0, [pc, #664]	; (800cab8 <tcp_receive+0x2b8>)
 800c81e:	f00b fd81 	bl	8018324 <iprintf>

  if (flags & TCP_ACK) {
 800c822:	4ba6      	ldr	r3, [pc, #664]	; (800cabc <tcp_receive+0x2bc>)
 800c824:	781b      	ldrb	r3, [r3, #0]
 800c826:	f003 0310 	and.w	r3, r3, #16
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	f000 82bf 	beq.w	800cdae <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c836:	461a      	mov	r2, r3
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c83c:	4413      	add	r3, r2
 800c83e:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c844:	4b9e      	ldr	r3, [pc, #632]	; (800cac0 <tcp_receive+0x2c0>)
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	1ad3      	subs	r3, r2, r3
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	db1b      	blt.n	800c886 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c852:	4b9b      	ldr	r3, [pc, #620]	; (800cac0 <tcp_receive+0x2c0>)
 800c854:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800c856:	429a      	cmp	r2, r3
 800c858:	d106      	bne.n	800c868 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c85e:	4b99      	ldr	r3, [pc, #612]	; (800cac4 <tcp_receive+0x2c4>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	1ad3      	subs	r3, r2, r3
 800c864:	2b00      	cmp	r3, #0
 800c866:	db0e      	blt.n	800c886 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c86c:	4b95      	ldr	r3, [pc, #596]	; (800cac4 <tcp_receive+0x2c4>)
 800c86e:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800c870:	429a      	cmp	r2, r3
 800c872:	d141      	bne.n	800c8f8 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800c874:	4b94      	ldr	r3, [pc, #592]	; (800cac8 <tcp_receive+0x2c8>)
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	89db      	ldrh	r3, [r3, #14]
 800c87a:	b29a      	uxth	r2, r3
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c882:	429a      	cmp	r2, r3
 800c884:	d938      	bls.n	800c8f8 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800c886:	4b90      	ldr	r3, [pc, #576]	; (800cac8 <tcp_receive+0x2c8>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	89db      	ldrh	r3, [r3, #14]
 800c88c:	b29a      	uxth	r2, r3
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c8a0:	429a      	cmp	r2, r3
 800c8a2:	d205      	bcs.n	800c8b0 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 800c8b0:	4b83      	ldr	r3, [pc, #524]	; (800cac0 <tcp_receive+0x2c0>)
 800c8b2:	681a      	ldr	r2, [r3, #0]
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 800c8b8:	4b82      	ldr	r3, [pc, #520]	; (800cac4 <tcp_receive+0x2c4>)
 800c8ba:	681a      	ldr	r2, [r3, #0]
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d10d      	bne.n	800c8e6 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d111      	bne.n	800c8f8 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2201      	movs	r2, #1
 800c8e0:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800c8e4:	e008      	b.n	800c8f8 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d003      	beq.n	800c8f8 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800c8f8:	4b72      	ldr	r3, [pc, #456]	; (800cac4 <tcp_receive+0x2c4>)
 800c8fa:	681a      	ldr	r2, [r3, #0]
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c900:	1ad3      	subs	r3, r2, r3
 800c902:	2b00      	cmp	r3, #0
 800c904:	dc53      	bgt.n	800c9ae <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 800c906:	4b71      	ldr	r3, [pc, #452]	; (800cacc <tcp_receive+0x2cc>)
 800c908:	881b      	ldrh	r3, [r3, #0]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d146      	bne.n	800c99c <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c912:	687a      	ldr	r2, [r7, #4]
 800c914:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800c918:	4413      	add	r3, r2
 800c91a:	697a      	ldr	r2, [r7, #20]
 800c91c:	429a      	cmp	r2, r3
 800c91e:	d13d      	bne.n	800c99c <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c926:	2b00      	cmp	r3, #0
 800c928:	db38      	blt.n	800c99c <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c92e:	4b65      	ldr	r3, [pc, #404]	; (800cac4 <tcp_receive+0x2c4>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	429a      	cmp	r2, r3
 800c934:	d132      	bne.n	800c99c <tcp_receive+0x19c>
              found_dupack = 1;
 800c936:	2301      	movs	r3, #1
 800c938:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c940:	2bff      	cmp	r3, #255	; 0xff
 800c942:	d007      	beq.n	800c954 <tcp_receive+0x154>
                ++pcb->dupacks;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c94a:	3301      	adds	r3, #1
 800c94c:	b2da      	uxtb	r2, r3
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c95a:	2b03      	cmp	r3, #3
 800c95c:	d916      	bls.n	800c98c <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c968:	4413      	add	r3, r2
 800c96a:	b29a      	uxth	r2, r3
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c972:	429a      	cmp	r2, r3
 800c974:	d912      	bls.n	800c99c <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c980:	4413      	add	r3, r2
 800c982:	b29a      	uxth	r2, r3
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800c98a:	e007      	b.n	800c99c <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800c992:	2b03      	cmp	r3, #3
 800c994:	d102      	bne.n	800c99c <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	f001 fdfa 	bl	800e590 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800c99c:	69fb      	ldr	r3, [r7, #28]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	f040 8169 	bne.w	800cc76 <tcp_receive+0x476>
        pcb->dupacks = 0;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c9ac:	e163      	b.n	800cc76 <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800c9ae:	4b45      	ldr	r3, [pc, #276]	; (800cac4 <tcp_receive+0x2c4>)
 800c9b0:	681a      	ldr	r2, [r3, #0]
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9b6:	1ad3      	subs	r3, r2, r3
 800c9b8:	3b01      	subs	r3, #1
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	f2c0 8107 	blt.w	800cbce <tcp_receive+0x3ce>
 800c9c0:	4b40      	ldr	r3, [pc, #256]	; (800cac4 <tcp_receive+0x2c4>)
 800c9c2:	681a      	ldr	r2, [r3, #0]
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c9c8:	1ad3      	subs	r3, r2, r3
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	f300 80ff 	bgt.w	800cbce <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	7e9b      	ldrb	r3, [r3, #26]
 800c9d4:	f003 0304 	and.w	r3, r3, #4
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d00c      	beq.n	800c9f6 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	7e9b      	ldrb	r3, [r3, #26]
 800c9e0:	f023 0304 	bic.w	r3, r3, #4
 800c9e4:	b2da      	uxtb	r2, r3
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ca04:	10db      	asrs	r3, r3, #3
 800ca06:	b21b      	sxth	r3, r3
 800ca08:	b29a      	uxth	r2, r3
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ca10:	b29b      	uxth	r3, r3
 800ca12:	4413      	add	r3, r2
 800ca14:	b29b      	uxth	r3, r3
 800ca16:	b21a      	sxth	r2, r3
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	2200      	movs	r2, #0
 800ca22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800ca26:	4b27      	ldr	r3, [pc, #156]	; (800cac4 <tcp_receive+0x2c4>)
 800ca28:	681a      	ldr	r2, [r3, #0]
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	7d1b      	ldrb	r3, [r3, #20]
 800ca32:	2b03      	cmp	r3, #3
 800ca34:	f240 8094 	bls.w	800cb60 <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ca44:	429a      	cmp	r2, r3
 800ca46:	d216      	bcs.n	800ca76 <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ca52:	4413      	add	r3, r2
 800ca54:	b29a      	uxth	r2, r3
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ca5c:	429a      	cmp	r2, r3
 800ca5e:	d97f      	bls.n	800cb60 <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ca6a:	4413      	add	r3, r2
 800ca6c:	b29a      	uxth	r2, r3
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ca74:	e074      	b.n	800cb60 <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ca80:	4619      	mov	r1, r3
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ca86:	fb03 f301 	mul.w	r3, r3, r1
 800ca8a:	6879      	ldr	r1, [r7, #4]
 800ca8c:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 800ca90:	fb93 f3f1 	sdiv	r3, r3, r1
 800ca94:	b29b      	uxth	r3, r3
 800ca96:	4413      	add	r3, r2
 800ca98:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800caa0:	8a7a      	ldrh	r2, [r7, #18]
 800caa2:	429a      	cmp	r2, r3
 800caa4:	d95c      	bls.n	800cb60 <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	8a7a      	ldrh	r2, [r7, #18]
 800caaa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 800caae:	e057      	b.n	800cb60 <tcp_receive+0x360>
 800cab0:	0801a24c 	.word	0x0801a24c
 800cab4:	0801a470 	.word	0x0801a470
 800cab8:	0801a290 	.word	0x0801a290
 800cabc:	20004abc 	.word	0x20004abc
 800cac0:	20004ab0 	.word	0x20004ab0
 800cac4:	20004ab4 	.word	0x20004ab4
 800cac8:	20004aa0 	.word	0x20004aa0
 800cacc:	20004aba 	.word	0x20004aba
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cad4:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cada:	681a      	ldr	r2, [r3, #0]
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800cae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cae8:	685b      	ldr	r3, [r3, #4]
 800caea:	4618      	mov	r0, r3
 800caec:	f7fd f822 	bl	8009b34 <pbuf_clen>
 800caf0:	4603      	mov	r3, r0
 800caf2:	429c      	cmp	r4, r3
 800caf4:	d206      	bcs.n	800cb04 <tcp_receive+0x304>
 800caf6:	4b70      	ldr	r3, [pc, #448]	; (800ccb8 <tcp_receive+0x4b8>)
 800caf8:	f240 429e 	movw	r2, #1182	; 0x49e
 800cafc:	496f      	ldr	r1, [pc, #444]	; (800ccbc <tcp_receive+0x4bc>)
 800cafe:	4870      	ldr	r0, [pc, #448]	; (800ccc0 <tcp_receive+0x4c0>)
 800cb00:	f00b fc10 	bl	8018324 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 800cb04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb06:	685b      	ldr	r3, [r3, #4]
 800cb08:	4618      	mov	r0, r3
 800cb0a:	f7fd f813 	bl	8009b34 <pbuf_clen>
 800cb0e:	4603      	mov	r3, r0
 800cb10:	461a      	mov	r2, r3
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cb18:	1a9b      	subs	r3, r3, r2
 800cb1a:	b29a      	uxth	r2, r3
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 800cb22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb24:	891a      	ldrh	r2, [r3, #8]
 800cb26:	4b67      	ldr	r3, [pc, #412]	; (800ccc4 <tcp_receive+0x4c4>)
 800cb28:	881b      	ldrh	r3, [r3, #0]
 800cb2a:	4413      	add	r3, r2
 800cb2c:	b29a      	uxth	r2, r3
 800cb2e:	4b65      	ldr	r3, [pc, #404]	; (800ccc4 <tcp_receive+0x4c4>)
 800cb30:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 800cb32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb34:	f7fe fa05 	bl	800af42 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d00e      	beq.n	800cb60 <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d10a      	bne.n	800cb60 <tcp_receive+0x360>
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d106      	bne.n	800cb60 <tcp_receive+0x360>
 800cb52:	4b59      	ldr	r3, [pc, #356]	; (800ccb8 <tcp_receive+0x4b8>)
 800cb54:	f240 42a7 	movw	r2, #1191	; 0x4a7
 800cb58:	495b      	ldr	r1, [pc, #364]	; (800ccc8 <tcp_receive+0x4c8>)
 800cb5a:	4859      	ldr	r0, [pc, #356]	; (800ccc0 <tcp_receive+0x4c0>)
 800cb5c:	f00b fbe2 	bl	8018324 <iprintf>
      while (pcb->unacked != NULL &&
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d022      	beq.n	800cbae <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb6c:	68db      	ldr	r3, [r3, #12]
 800cb6e:	685b      	ldr	r3, [r3, #4]
 800cb70:	4618      	mov	r0, r3
 800cb72:	f7fb fa90 	bl	8008096 <lwip_htonl>
 800cb76:	4604      	mov	r4, r0
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb7c:	891b      	ldrh	r3, [r3, #8]
 800cb7e:	461d      	mov	r5, r3
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb84:	68db      	ldr	r3, [r3, #12]
 800cb86:	899b      	ldrh	r3, [r3, #12]
 800cb88:	b29b      	uxth	r3, r3
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	f7fb fa76 	bl	800807c <lwip_htons>
 800cb90:	4603      	mov	r3, r0
 800cb92:	f003 0303 	and.w	r3, r3, #3
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d001      	beq.n	800cb9e <tcp_receive+0x39e>
 800cb9a:	2301      	movs	r3, #1
 800cb9c:	e000      	b.n	800cba0 <tcp_receive+0x3a0>
 800cb9e:	2300      	movs	r3, #0
 800cba0:	442b      	add	r3, r5
 800cba2:	18e2      	adds	r2, r4, r3
 800cba4:	4b49      	ldr	r3, [pc, #292]	; (800cccc <tcp_receive+0x4cc>)
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	dd90      	ble.n	800cad0 <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d104      	bne.n	800cbc0 <tcp_receive+0x3c0>
        pcb->rtime = -1;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cbbc:	861a      	strh	r2, [r3, #48]	; 0x30
 800cbbe:	e002      	b.n	800cbc6 <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	2200      	movs	r2, #0
 800cbca:	76da      	strb	r2, [r3, #27]
 800cbcc:	e002      	b.n	800cbd4 <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f001 f8fc 	bl	800ddcc <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 800cbd4:	e04f      	b.n	800cc76 <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cbda:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cbe0:	681a      	ldr	r2, [r3, #0]
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d103      	bne.n	800cbf6 <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800cbfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbfe:	685b      	ldr	r3, [r3, #4]
 800cc00:	4618      	mov	r0, r3
 800cc02:	f7fc ff97 	bl	8009b34 <pbuf_clen>
 800cc06:	4603      	mov	r3, r0
 800cc08:	429c      	cmp	r4, r3
 800cc0a:	d206      	bcs.n	800cc1a <tcp_receive+0x41a>
 800cc0c:	4b2a      	ldr	r3, [pc, #168]	; (800ccb8 <tcp_receive+0x4b8>)
 800cc0e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800cc12:	492a      	ldr	r1, [pc, #168]	; (800ccbc <tcp_receive+0x4bc>)
 800cc14:	482a      	ldr	r0, [pc, #168]	; (800ccc0 <tcp_receive+0x4c0>)
 800cc16:	f00b fb85 	bl	8018324 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800cc1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc1c:	685b      	ldr	r3, [r3, #4]
 800cc1e:	4618      	mov	r0, r3
 800cc20:	f7fc ff88 	bl	8009b34 <pbuf_clen>
 800cc24:	4603      	mov	r3, r0
 800cc26:	461a      	mov	r2, r3
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cc2e:	1a9b      	subs	r3, r3, r2
 800cc30:	b29a      	uxth	r2, r3
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 800cc38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc3a:	891a      	ldrh	r2, [r3, #8]
 800cc3c:	4b21      	ldr	r3, [pc, #132]	; (800ccc4 <tcp_receive+0x4c4>)
 800cc3e:	881b      	ldrh	r3, [r3, #0]
 800cc40:	4413      	add	r3, r2
 800cc42:	b29a      	uxth	r2, r3
 800cc44:	4b1f      	ldr	r3, [pc, #124]	; (800ccc4 <tcp_receive+0x4c4>)
 800cc46:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 800cc48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc4a:	f7fe f97a 	bl	800af42 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d00e      	beq.n	800cc76 <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d10a      	bne.n	800cc76 <tcp_receive+0x476>
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d106      	bne.n	800cc76 <tcp_receive+0x476>
 800cc68:	4b13      	ldr	r3, [pc, #76]	; (800ccb8 <tcp_receive+0x4b8>)
 800cc6a:	f240 42dd 	movw	r2, #1245	; 0x4dd
 800cc6e:	4916      	ldr	r1, [pc, #88]	; (800ccc8 <tcp_receive+0x4c8>)
 800cc70:	4813      	ldr	r0, [pc, #76]	; (800ccc0 <tcp_receive+0x4c0>)
 800cc72:	f00b fb57 	bl	8018324 <iprintf>
    while (pcb->unsent != NULL &&
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d036      	beq.n	800ccec <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800cc7e:	4b13      	ldr	r3, [pc, #76]	; (800cccc <tcp_receive+0x4cc>)
 800cc80:	681c      	ldr	r4, [r3, #0]
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cc86:	68db      	ldr	r3, [r3, #12]
 800cc88:	685b      	ldr	r3, [r3, #4]
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	f7fb fa03 	bl	8008096 <lwip_htonl>
 800cc90:	4605      	mov	r5, r0
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cc96:	891b      	ldrh	r3, [r3, #8]
 800cc98:	461e      	mov	r6, r3
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cc9e:	68db      	ldr	r3, [r3, #12]
 800cca0:	899b      	ldrh	r3, [r3, #12]
 800cca2:	b29b      	uxth	r3, r3
 800cca4:	4618      	mov	r0, r3
 800cca6:	f7fb f9e9 	bl	800807c <lwip_htons>
 800ccaa:	4603      	mov	r3, r0
 800ccac:	f003 0303 	and.w	r3, r3, #3
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d00d      	beq.n	800ccd0 <tcp_receive+0x4d0>
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	e00c      	b.n	800ccd2 <tcp_receive+0x4d2>
 800ccb8:	0801a24c 	.word	0x0801a24c
 800ccbc:	0801a48c 	.word	0x0801a48c
 800ccc0:	0801a290 	.word	0x0801a290
 800ccc4:	20004ab8 	.word	0x20004ab8
 800ccc8:	0801a4b4 	.word	0x0801a4b4
 800cccc:	20004ab4 	.word	0x20004ab4
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	4433      	add	r3, r6
 800ccd4:	442b      	add	r3, r5
 800ccd6:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	db07      	blt.n	800ccec <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800ccdc:	4b8d      	ldr	r3, [pc, #564]	; (800cf14 <tcp_receive+0x714>)
 800ccde:	681a      	ldr	r2, [r3, #0]
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cce4:	1ad3      	subs	r3, r2, r3
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	f77f af75 	ble.w	800cbd6 <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ccf2:	4b89      	ldr	r3, [pc, #548]	; (800cf18 <tcp_receive+0x718>)
 800ccf4:	881b      	ldrh	r3, [r3, #0]
 800ccf6:	4413      	add	r3, r2
 800ccf8:	b29a      	uxth	r2, r3
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d052      	beq.n	800cdae <tcp_receive+0x5ae>
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd0c:	4b81      	ldr	r3, [pc, #516]	; (800cf14 <tcp_receive+0x714>)
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	1ad3      	subs	r3, r2, r3
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	da4b      	bge.n	800cdae <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800cd16:	4b81      	ldr	r3, [pc, #516]	; (800cf1c <tcp_receive+0x71c>)
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	b29a      	uxth	r2, r3
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd20:	b29b      	uxth	r3, r3
 800cd22:	1ad3      	subs	r3, r2, r3
 800cd24:	b29b      	uxth	r3, r3
 800cd26:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 800cd28:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cd30:	10db      	asrs	r3, r3, #3
 800cd32:	b21b      	sxth	r3, r3
 800cd34:	b29b      	uxth	r3, r3
 800cd36:	1ad3      	subs	r3, r2, r3
 800cd38:	b29b      	uxth	r3, r3
 800cd3a:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cd42:	b29a      	uxth	r2, r3
 800cd44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cd46:	4413      	add	r3, r2
 800cd48:	b29b      	uxth	r3, r3
 800cd4a:	b21a      	sxth	r2, r3
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800cd50:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	da03      	bge.n	800cd60 <tcp_receive+0x560>
        m = -m;
 800cd58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cd5a:	425b      	negs	r3, r3
 800cd5c:	b29b      	uxth	r3, r3
 800cd5e:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 800cd60:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cd68:	109b      	asrs	r3, r3, #2
 800cd6a:	b21b      	sxth	r3, r3
 800cd6c:	b29b      	uxth	r3, r3
 800cd6e:	1ad3      	subs	r3, r2, r3
 800cd70:	b29b      	uxth	r3, r3
 800cd72:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cd7a:	b29a      	uxth	r2, r3
 800cd7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cd7e:	4413      	add	r3, r2
 800cd80:	b29b      	uxth	r3, r3
 800cd82:	b21a      	sxth	r2, r3
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cd8e:	10db      	asrs	r3, r3, #3
 800cd90:	b21b      	sxth	r3, r3
 800cd92:	b29a      	uxth	r2, r3
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cd9a:	b29b      	uxth	r3, r3
 800cd9c:	4413      	add	r3, r2
 800cd9e:	b29b      	uxth	r3, r3
 800cda0:	b21a      	sxth	r2, r3
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	2200      	movs	r2, #0
 800cdac:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800cdae:	4b5c      	ldr	r3, [pc, #368]	; (800cf20 <tcp_receive+0x720>)
 800cdb0:	881b      	ldrh	r3, [r3, #0]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	f000 84f1 	beq.w	800d79a <tcp_receive+0xf9a>
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	7d1b      	ldrb	r3, [r3, #20]
 800cdbc:	2b06      	cmp	r3, #6
 800cdbe:	f200 84ec 	bhi.w	800d79a <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cdc6:	4b57      	ldr	r3, [pc, #348]	; (800cf24 <tcp_receive+0x724>)
 800cdc8:	681b      	ldr	r3, [r3, #0]
 800cdca:	1ad3      	subs	r3, r2, r3
 800cdcc:	3b01      	subs	r3, #1
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	f2c0 80b8 	blt.w	800cf44 <tcp_receive+0x744>
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cdd8:	4b51      	ldr	r3, [pc, #324]	; (800cf20 <tcp_receive+0x720>)
 800cdda:	881b      	ldrh	r3, [r3, #0]
 800cddc:	4619      	mov	r1, r3
 800cdde:	4b51      	ldr	r3, [pc, #324]	; (800cf24 <tcp_receive+0x724>)
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	440b      	add	r3, r1
 800cde4:	1ad3      	subs	r3, r2, r3
 800cde6:	3301      	adds	r3, #1
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	f300 80ab 	bgt.w	800cf44 <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800cdee:	4b4e      	ldr	r3, [pc, #312]	; (800cf28 <tcp_receive+0x728>)
 800cdf0:	685b      	ldr	r3, [r3, #4]
 800cdf2:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cdf8:	4b4a      	ldr	r3, [pc, #296]	; (800cf24 <tcp_receive+0x724>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	1ad3      	subs	r3, r2, r3
 800cdfe:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800ce00:	4b49      	ldr	r3, [pc, #292]	; (800cf28 <tcp_receive+0x728>)
 800ce02:	685b      	ldr	r3, [r3, #4]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d106      	bne.n	800ce16 <tcp_receive+0x616>
 800ce08:	4b48      	ldr	r3, [pc, #288]	; (800cf2c <tcp_receive+0x72c>)
 800ce0a:	f240 523c 	movw	r2, #1340	; 0x53c
 800ce0e:	4948      	ldr	r1, [pc, #288]	; (800cf30 <tcp_receive+0x730>)
 800ce10:	4848      	ldr	r0, [pc, #288]	; (800cf34 <tcp_receive+0x734>)
 800ce12:	f00b fa87 	bl	8018324 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800ce16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce18:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800ce1c:	4293      	cmp	r3, r2
 800ce1e:	dd06      	ble.n	800ce2e <tcp_receive+0x62e>
 800ce20:	4b42      	ldr	r3, [pc, #264]	; (800cf2c <tcp_receive+0x72c>)
 800ce22:	f240 523d 	movw	r2, #1341	; 0x53d
 800ce26:	4944      	ldr	r1, [pc, #272]	; (800cf38 <tcp_receive+0x738>)
 800ce28:	4842      	ldr	r0, [pc, #264]	; (800cf34 <tcp_receive+0x734>)
 800ce2a:	f00b fa7b 	bl	8018324 <iprintf>
      if (inseg.p->len < off) {
 800ce2e:	4b3e      	ldr	r3, [pc, #248]	; (800cf28 <tcp_receive+0x728>)
 800ce30:	685b      	ldr	r3, [r3, #4]
 800ce32:	895b      	ldrh	r3, [r3, #10]
 800ce34:	461a      	mov	r2, r3
 800ce36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce38:	4293      	cmp	r3, r2
 800ce3a:	dd3e      	ble.n	800ceba <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800ce3c:	4b3a      	ldr	r3, [pc, #232]	; (800cf28 <tcp_receive+0x728>)
 800ce3e:	685b      	ldr	r3, [r3, #4]
 800ce40:	891b      	ldrh	r3, [r3, #8]
 800ce42:	461a      	mov	r2, r3
 800ce44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce46:	4293      	cmp	r3, r2
 800ce48:	dd06      	ble.n	800ce58 <tcp_receive+0x658>
 800ce4a:	4b38      	ldr	r3, [pc, #224]	; (800cf2c <tcp_receive+0x72c>)
 800ce4c:	f240 523f 	movw	r2, #1343	; 0x53f
 800ce50:	493a      	ldr	r1, [pc, #232]	; (800cf3c <tcp_receive+0x73c>)
 800ce52:	4838      	ldr	r0, [pc, #224]	; (800cf34 <tcp_receive+0x734>)
 800ce54:	f00b fa66 	bl	8018324 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800ce58:	4b33      	ldr	r3, [pc, #204]	; (800cf28 <tcp_receive+0x728>)
 800ce5a:	685b      	ldr	r3, [r3, #4]
 800ce5c:	891a      	ldrh	r2, [r3, #8]
 800ce5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce60:	b29b      	uxth	r3, r3
 800ce62:	1ad3      	subs	r3, r2, r3
 800ce64:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 800ce66:	e00e      	b.n	800ce86 <tcp_receive+0x686>
          off -= p->len;
 800ce68:	69bb      	ldr	r3, [r7, #24]
 800ce6a:	895b      	ldrh	r3, [r3, #10]
 800ce6c:	461a      	mov	r2, r3
 800ce6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce70:	1a9b      	subs	r3, r3, r2
 800ce72:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 800ce74:	69bb      	ldr	r3, [r7, #24]
 800ce76:	8a3a      	ldrh	r2, [r7, #16]
 800ce78:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 800ce7a:	69bb      	ldr	r3, [r7, #24]
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	815a      	strh	r2, [r3, #10]
          p = p->next;
 800ce80:	69bb      	ldr	r3, [r7, #24]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 800ce86:	69bb      	ldr	r3, [r7, #24]
 800ce88:	895b      	ldrh	r3, [r3, #10]
 800ce8a:	461a      	mov	r2, r3
 800ce8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce8e:	4293      	cmp	r3, r2
 800ce90:	dcea      	bgt.n	800ce68 <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800ce92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce94:	b29b      	uxth	r3, r3
 800ce96:	425b      	negs	r3, r3
 800ce98:	b29b      	uxth	r3, r3
 800ce9a:	b21b      	sxth	r3, r3
 800ce9c:	4619      	mov	r1, r3
 800ce9e:	69b8      	ldr	r0, [r7, #24]
 800cea0:	f7fc fd8a 	bl	80099b8 <pbuf_header>
 800cea4:	4603      	mov	r3, r0
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d01c      	beq.n	800cee4 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800ceaa:	4b20      	ldr	r3, [pc, #128]	; (800cf2c <tcp_receive+0x72c>)
 800ceac:	f240 524c 	movw	r2, #1356	; 0x54c
 800ceb0:	4923      	ldr	r1, [pc, #140]	; (800cf40 <tcp_receive+0x740>)
 800ceb2:	4820      	ldr	r0, [pc, #128]	; (800cf34 <tcp_receive+0x734>)
 800ceb4:	f00b fa36 	bl	8018324 <iprintf>
 800ceb8:	e014      	b.n	800cee4 <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800ceba:	4b1b      	ldr	r3, [pc, #108]	; (800cf28 <tcp_receive+0x728>)
 800cebc:	685b      	ldr	r3, [r3, #4]
 800cebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cec0:	b292      	uxth	r2, r2
 800cec2:	4252      	negs	r2, r2
 800cec4:	b292      	uxth	r2, r2
 800cec6:	b212      	sxth	r2, r2
 800cec8:	4611      	mov	r1, r2
 800ceca:	4618      	mov	r0, r3
 800cecc:	f7fc fd74 	bl	80099b8 <pbuf_header>
 800ced0:	4603      	mov	r3, r0
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d006      	beq.n	800cee4 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800ced6:	4b15      	ldr	r3, [pc, #84]	; (800cf2c <tcp_receive+0x72c>)
 800ced8:	f240 5251 	movw	r2, #1361	; 0x551
 800cedc:	4918      	ldr	r1, [pc, #96]	; (800cf40 <tcp_receive+0x740>)
 800cede:	4815      	ldr	r0, [pc, #84]	; (800cf34 <tcp_receive+0x734>)
 800cee0:	f00b fa20 	bl	8018324 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800cee4:	4b10      	ldr	r3, [pc, #64]	; (800cf28 <tcp_receive+0x728>)
 800cee6:	891a      	ldrh	r2, [r3, #8]
 800cee8:	4b0e      	ldr	r3, [pc, #56]	; (800cf24 <tcp_receive+0x724>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	b299      	uxth	r1, r3
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cef2:	b29b      	uxth	r3, r3
 800cef4:	1acb      	subs	r3, r1, r3
 800cef6:	b29b      	uxth	r3, r3
 800cef8:	4413      	add	r3, r2
 800cefa:	b29a      	uxth	r2, r3
 800cefc:	4b0a      	ldr	r3, [pc, #40]	; (800cf28 <tcp_receive+0x728>)
 800cefe:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf04:	4a07      	ldr	r2, [pc, #28]	; (800cf24 <tcp_receive+0x724>)
 800cf06:	6013      	str	r3, [r2, #0]
 800cf08:	4b07      	ldr	r3, [pc, #28]	; (800cf28 <tcp_receive+0x728>)
 800cf0a:	68db      	ldr	r3, [r3, #12]
 800cf0c:	4a05      	ldr	r2, [pc, #20]	; (800cf24 <tcp_receive+0x724>)
 800cf0e:	6812      	ldr	r2, [r2, #0]
 800cf10:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800cf12:	e025      	b.n	800cf60 <tcp_receive+0x760>
 800cf14:	20004ab4 	.word	0x20004ab4
 800cf18:	20004ab8 	.word	0x20004ab8
 800cf1c:	2000b8c8 	.word	0x2000b8c8
 800cf20:	20004aba 	.word	0x20004aba
 800cf24:	20004ab0 	.word	0x20004ab0
 800cf28:	20004a90 	.word	0x20004a90
 800cf2c:	0801a24c 	.word	0x0801a24c
 800cf30:	0801a4d4 	.word	0x0801a4d4
 800cf34:	0801a290 	.word	0x0801a290
 800cf38:	0801a4e4 	.word	0x0801a4e4
 800cf3c:	0801a4f4 	.word	0x0801a4f4
 800cf40:	0801a504 	.word	0x0801a504
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800cf44:	4b87      	ldr	r3, [pc, #540]	; (800d164 <tcp_receive+0x964>)
 800cf46:	681a      	ldr	r2, [r3, #0]
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf4c:	1ad3      	subs	r3, r2, r3
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	da06      	bge.n	800cf60 <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	7e9b      	ldrb	r3, [r3, #26]
 800cf56:	f043 0302 	orr.w	r3, r3, #2
 800cf5a:	b2da      	uxtb	r2, r3
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800cf60:	4b80      	ldr	r3, [pc, #512]	; (800d164 <tcp_receive+0x964>)
 800cf62:	681a      	ldr	r2, [r3, #0]
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf68:	1ad3      	subs	r3, r2, r3
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	f2c0 8410 	blt.w	800d790 <tcp_receive+0xf90>
 800cf70:	4b7c      	ldr	r3, [pc, #496]	; (800d164 <tcp_receive+0x964>)
 800cf72:	681a      	ldr	r2, [r3, #0]
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf78:	6879      	ldr	r1, [r7, #4]
 800cf7a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800cf7c:	440b      	add	r3, r1
 800cf7e:	1ad3      	subs	r3, r2, r3
 800cf80:	3301      	adds	r3, #1
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	f300 8404 	bgt.w	800d790 <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cf8c:	4b75      	ldr	r3, [pc, #468]	; (800d164 <tcp_receive+0x964>)
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	429a      	cmp	r2, r3
 800cf92:	f040 8287 	bne.w	800d4a4 <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800cf96:	4b74      	ldr	r3, [pc, #464]	; (800d168 <tcp_receive+0x968>)
 800cf98:	891c      	ldrh	r4, [r3, #8]
 800cf9a:	4b73      	ldr	r3, [pc, #460]	; (800d168 <tcp_receive+0x968>)
 800cf9c:	68db      	ldr	r3, [r3, #12]
 800cf9e:	899b      	ldrh	r3, [r3, #12]
 800cfa0:	b29b      	uxth	r3, r3
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	f7fb f86a 	bl	800807c <lwip_htons>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	f003 0303 	and.w	r3, r3, #3
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d001      	beq.n	800cfb6 <tcp_receive+0x7b6>
 800cfb2:	2301      	movs	r3, #1
 800cfb4:	e000      	b.n	800cfb8 <tcp_receive+0x7b8>
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	4423      	add	r3, r4
 800cfba:	b29a      	uxth	r2, r3
 800cfbc:	4b6b      	ldr	r3, [pc, #428]	; (800d16c <tcp_receive+0x96c>)
 800cfbe:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cfc4:	4b69      	ldr	r3, [pc, #420]	; (800d16c <tcp_receive+0x96c>)
 800cfc6:	881b      	ldrh	r3, [r3, #0]
 800cfc8:	429a      	cmp	r2, r3
 800cfca:	d26e      	bcs.n	800d0aa <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800cfcc:	4b66      	ldr	r3, [pc, #408]	; (800d168 <tcp_receive+0x968>)
 800cfce:	68db      	ldr	r3, [r3, #12]
 800cfd0:	899b      	ldrh	r3, [r3, #12]
 800cfd2:	b29b      	uxth	r3, r3
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	f7fb f851 	bl	800807c <lwip_htons>
 800cfda:	4603      	mov	r3, r0
 800cfdc:	f003 0301 	and.w	r3, r3, #1
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d01b      	beq.n	800d01c <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800cfe4:	4b60      	ldr	r3, [pc, #384]	; (800d168 <tcp_receive+0x968>)
 800cfe6:	68db      	ldr	r3, [r3, #12]
 800cfe8:	899b      	ldrh	r3, [r3, #12]
 800cfea:	b29b      	uxth	r3, r3
 800cfec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cff0:	b29c      	uxth	r4, r3
 800cff2:	4b5d      	ldr	r3, [pc, #372]	; (800d168 <tcp_receive+0x968>)
 800cff4:	68db      	ldr	r3, [r3, #12]
 800cff6:	899b      	ldrh	r3, [r3, #12]
 800cff8:	b29b      	uxth	r3, r3
 800cffa:	4618      	mov	r0, r3
 800cffc:	f7fb f83e 	bl	800807c <lwip_htons>
 800d000:	4603      	mov	r3, r0
 800d002:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800d006:	b29b      	uxth	r3, r3
 800d008:	4618      	mov	r0, r3
 800d00a:	f7fb f837 	bl	800807c <lwip_htons>
 800d00e:	4603      	mov	r3, r0
 800d010:	461a      	mov	r2, r3
 800d012:	4b55      	ldr	r3, [pc, #340]	; (800d168 <tcp_receive+0x968>)
 800d014:	68db      	ldr	r3, [r3, #12]
 800d016:	4322      	orrs	r2, r4
 800d018:	b292      	uxth	r2, r2
 800d01a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d020:	4b51      	ldr	r3, [pc, #324]	; (800d168 <tcp_receive+0x968>)
 800d022:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d024:	4b50      	ldr	r3, [pc, #320]	; (800d168 <tcp_receive+0x968>)
 800d026:	68db      	ldr	r3, [r3, #12]
 800d028:	899b      	ldrh	r3, [r3, #12]
 800d02a:	b29b      	uxth	r3, r3
 800d02c:	4618      	mov	r0, r3
 800d02e:	f7fb f825 	bl	800807c <lwip_htons>
 800d032:	4603      	mov	r3, r0
 800d034:	f003 0302 	and.w	r3, r3, #2
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d005      	beq.n	800d048 <tcp_receive+0x848>
            inseg.len -= 1;
 800d03c:	4b4a      	ldr	r3, [pc, #296]	; (800d168 <tcp_receive+0x968>)
 800d03e:	891b      	ldrh	r3, [r3, #8]
 800d040:	3b01      	subs	r3, #1
 800d042:	b29a      	uxth	r2, r3
 800d044:	4b48      	ldr	r3, [pc, #288]	; (800d168 <tcp_receive+0x968>)
 800d046:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800d048:	4b47      	ldr	r3, [pc, #284]	; (800d168 <tcp_receive+0x968>)
 800d04a:	685a      	ldr	r2, [r3, #4]
 800d04c:	4b46      	ldr	r3, [pc, #280]	; (800d168 <tcp_receive+0x968>)
 800d04e:	891b      	ldrh	r3, [r3, #8]
 800d050:	4619      	mov	r1, r3
 800d052:	4610      	mov	r0, r2
 800d054:	f7fc fb60 	bl	8009718 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800d058:	4b43      	ldr	r3, [pc, #268]	; (800d168 <tcp_receive+0x968>)
 800d05a:	891c      	ldrh	r4, [r3, #8]
 800d05c:	4b42      	ldr	r3, [pc, #264]	; (800d168 <tcp_receive+0x968>)
 800d05e:	68db      	ldr	r3, [r3, #12]
 800d060:	899b      	ldrh	r3, [r3, #12]
 800d062:	b29b      	uxth	r3, r3
 800d064:	4618      	mov	r0, r3
 800d066:	f7fb f809 	bl	800807c <lwip_htons>
 800d06a:	4603      	mov	r3, r0
 800d06c:	f003 0303 	and.w	r3, r3, #3
 800d070:	2b00      	cmp	r3, #0
 800d072:	d001      	beq.n	800d078 <tcp_receive+0x878>
 800d074:	2301      	movs	r3, #1
 800d076:	e000      	b.n	800d07a <tcp_receive+0x87a>
 800d078:	2300      	movs	r3, #0
 800d07a:	4423      	add	r3, r4
 800d07c:	b29a      	uxth	r2, r3
 800d07e:	4b3b      	ldr	r3, [pc, #236]	; (800d16c <tcp_receive+0x96c>)
 800d080:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d082:	4b3a      	ldr	r3, [pc, #232]	; (800d16c <tcp_receive+0x96c>)
 800d084:	881b      	ldrh	r3, [r3, #0]
 800d086:	461a      	mov	r2, r3
 800d088:	4b36      	ldr	r3, [pc, #216]	; (800d164 <tcp_receive+0x964>)
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	441a      	add	r2, r3
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d092:	6879      	ldr	r1, [r7, #4]
 800d094:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d096:	440b      	add	r3, r1
 800d098:	429a      	cmp	r2, r3
 800d09a:	d006      	beq.n	800d0aa <tcp_receive+0x8aa>
 800d09c:	4b34      	ldr	r3, [pc, #208]	; (800d170 <tcp_receive+0x970>)
 800d09e:	f240 527f 	movw	r2, #1407	; 0x57f
 800d0a2:	4934      	ldr	r1, [pc, #208]	; (800d174 <tcp_receive+0x974>)
 800d0a4:	4834      	ldr	r0, [pc, #208]	; (800d178 <tcp_receive+0x978>)
 800d0a6:	f00b f93d 	bl	8018324 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	f000 80e1 	beq.w	800d276 <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d0b4:	4b2c      	ldr	r3, [pc, #176]	; (800d168 <tcp_receive+0x968>)
 800d0b6:	68db      	ldr	r3, [r3, #12]
 800d0b8:	899b      	ldrh	r3, [r3, #12]
 800d0ba:	b29b      	uxth	r3, r3
 800d0bc:	4618      	mov	r0, r3
 800d0be:	f7fa ffdd 	bl	800807c <lwip_htons>
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	f003 0301 	and.w	r3, r3, #1
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d010      	beq.n	800d0ee <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800d0cc:	e00a      	b.n	800d0e4 <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0d2:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0d8:	681a      	ldr	r2, [r3, #0]
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800d0de:	68b8      	ldr	r0, [r7, #8]
 800d0e0:	f7fd ff2f 	bl	800af42 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d1f0      	bne.n	800d0ce <tcp_receive+0x8ce>
 800d0ec:	e0c3      	b.n	800d276 <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0f2:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800d0f4:	e04f      	b.n	800d196 <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0f8:	68db      	ldr	r3, [r3, #12]
 800d0fa:	899b      	ldrh	r3, [r3, #12]
 800d0fc:	b29b      	uxth	r3, r3
 800d0fe:	4618      	mov	r0, r3
 800d100:	f7fa ffbc 	bl	800807c <lwip_htons>
 800d104:	4603      	mov	r3, r0
 800d106:	f003 0301 	and.w	r3, r3, #1
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d03b      	beq.n	800d186 <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800d10e:	4b16      	ldr	r3, [pc, #88]	; (800d168 <tcp_receive+0x968>)
 800d110:	68db      	ldr	r3, [r3, #12]
 800d112:	899b      	ldrh	r3, [r3, #12]
 800d114:	b29b      	uxth	r3, r3
 800d116:	4618      	mov	r0, r3
 800d118:	f7fa ffb0 	bl	800807c <lwip_htons>
 800d11c:	4603      	mov	r3, r0
 800d11e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d122:	2b00      	cmp	r3, #0
 800d124:	d12f      	bne.n	800d186 <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800d126:	4b10      	ldr	r3, [pc, #64]	; (800d168 <tcp_receive+0x968>)
 800d128:	68db      	ldr	r3, [r3, #12]
 800d12a:	899b      	ldrh	r3, [r3, #12]
 800d12c:	b29c      	uxth	r4, r3
 800d12e:	2001      	movs	r0, #1
 800d130:	f7fa ffa4 	bl	800807c <lwip_htons>
 800d134:	4603      	mov	r3, r0
 800d136:	461a      	mov	r2, r3
 800d138:	4b0b      	ldr	r3, [pc, #44]	; (800d168 <tcp_receive+0x968>)
 800d13a:	68db      	ldr	r3, [r3, #12]
 800d13c:	4322      	orrs	r2, r4
 800d13e:	b292      	uxth	r2, r2
 800d140:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800d142:	4b09      	ldr	r3, [pc, #36]	; (800d168 <tcp_receive+0x968>)
 800d144:	891c      	ldrh	r4, [r3, #8]
 800d146:	4b08      	ldr	r3, [pc, #32]	; (800d168 <tcp_receive+0x968>)
 800d148:	68db      	ldr	r3, [r3, #12]
 800d14a:	899b      	ldrh	r3, [r3, #12]
 800d14c:	b29b      	uxth	r3, r3
 800d14e:	4618      	mov	r0, r3
 800d150:	f7fa ff94 	bl	800807c <lwip_htons>
 800d154:	4603      	mov	r3, r0
 800d156:	f003 0303 	and.w	r3, r3, #3
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d00e      	beq.n	800d17c <tcp_receive+0x97c>
 800d15e:	2301      	movs	r3, #1
 800d160:	e00d      	b.n	800d17e <tcp_receive+0x97e>
 800d162:	bf00      	nop
 800d164:	20004ab0 	.word	0x20004ab0
 800d168:	20004a90 	.word	0x20004a90
 800d16c:	20004aba 	.word	0x20004aba
 800d170:	0801a24c 	.word	0x0801a24c
 800d174:	0801a518 	.word	0x0801a518
 800d178:	0801a290 	.word	0x0801a290
 800d17c:	2300      	movs	r3, #0
 800d17e:	4423      	add	r3, r4
 800d180:	b29a      	uxth	r2, r3
 800d182:	4b95      	ldr	r3, [pc, #596]	; (800d3d8 <tcp_receive+0xbd8>)
 800d184:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 800d186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d188:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 800d18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 800d190:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d192:	f7fd fed6 	bl	800af42 <tcp_seg_free>
            while (next &&
 800d196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d00e      	beq.n	800d1ba <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800d19c:	4b8e      	ldr	r3, [pc, #568]	; (800d3d8 <tcp_receive+0xbd8>)
 800d19e:	881b      	ldrh	r3, [r3, #0]
 800d1a0:	461a      	mov	r2, r3
 800d1a2:	4b8e      	ldr	r3, [pc, #568]	; (800d3dc <tcp_receive+0xbdc>)
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	441a      	add	r2, r3
 800d1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1aa:	68db      	ldr	r3, [r3, #12]
 800d1ac:	685b      	ldr	r3, [r3, #4]
 800d1ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d1b0:	8909      	ldrh	r1, [r1, #8]
 800d1b2:	440b      	add	r3, r1
 800d1b4:	1ad3      	subs	r3, r2, r3
            while (next &&
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	da9d      	bge.n	800d0f6 <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800d1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d057      	beq.n	800d270 <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 800d1c0:	4b85      	ldr	r3, [pc, #532]	; (800d3d8 <tcp_receive+0xbd8>)
 800d1c2:	881b      	ldrh	r3, [r3, #0]
 800d1c4:	461a      	mov	r2, r3
 800d1c6:	4b85      	ldr	r3, [pc, #532]	; (800d3dc <tcp_receive+0xbdc>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	441a      	add	r2, r3
 800d1cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ce:	68db      	ldr	r3, [r3, #12]
 800d1d0:	685b      	ldr	r3, [r3, #4]
 800d1d2:	1ad3      	subs	r3, r2, r3
            if (next &&
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	dd4b      	ble.n	800d270 <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800d1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1da:	68db      	ldr	r3, [r3, #12]
 800d1dc:	685b      	ldr	r3, [r3, #4]
 800d1de:	b29a      	uxth	r2, r3
 800d1e0:	4b7e      	ldr	r3, [pc, #504]	; (800d3dc <tcp_receive+0xbdc>)
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	b29b      	uxth	r3, r3
 800d1e6:	1ad3      	subs	r3, r2, r3
 800d1e8:	b29a      	uxth	r2, r3
 800d1ea:	4b7d      	ldr	r3, [pc, #500]	; (800d3e0 <tcp_receive+0xbe0>)
 800d1ec:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d1ee:	4b7c      	ldr	r3, [pc, #496]	; (800d3e0 <tcp_receive+0xbe0>)
 800d1f0:	68db      	ldr	r3, [r3, #12]
 800d1f2:	899b      	ldrh	r3, [r3, #12]
 800d1f4:	b29b      	uxth	r3, r3
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f7fa ff40 	bl	800807c <lwip_htons>
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	f003 0302 	and.w	r3, r3, #2
 800d202:	2b00      	cmp	r3, #0
 800d204:	d005      	beq.n	800d212 <tcp_receive+0xa12>
                inseg.len -= 1;
 800d206:	4b76      	ldr	r3, [pc, #472]	; (800d3e0 <tcp_receive+0xbe0>)
 800d208:	891b      	ldrh	r3, [r3, #8]
 800d20a:	3b01      	subs	r3, #1
 800d20c:	b29a      	uxth	r2, r3
 800d20e:	4b74      	ldr	r3, [pc, #464]	; (800d3e0 <tcp_receive+0xbe0>)
 800d210:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800d212:	4b73      	ldr	r3, [pc, #460]	; (800d3e0 <tcp_receive+0xbe0>)
 800d214:	685a      	ldr	r2, [r3, #4]
 800d216:	4b72      	ldr	r3, [pc, #456]	; (800d3e0 <tcp_receive+0xbe0>)
 800d218:	891b      	ldrh	r3, [r3, #8]
 800d21a:	4619      	mov	r1, r3
 800d21c:	4610      	mov	r0, r2
 800d21e:	f7fc fa7b 	bl	8009718 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800d222:	4b6f      	ldr	r3, [pc, #444]	; (800d3e0 <tcp_receive+0xbe0>)
 800d224:	891c      	ldrh	r4, [r3, #8]
 800d226:	4b6e      	ldr	r3, [pc, #440]	; (800d3e0 <tcp_receive+0xbe0>)
 800d228:	68db      	ldr	r3, [r3, #12]
 800d22a:	899b      	ldrh	r3, [r3, #12]
 800d22c:	b29b      	uxth	r3, r3
 800d22e:	4618      	mov	r0, r3
 800d230:	f7fa ff24 	bl	800807c <lwip_htons>
 800d234:	4603      	mov	r3, r0
 800d236:	f003 0303 	and.w	r3, r3, #3
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d001      	beq.n	800d242 <tcp_receive+0xa42>
 800d23e:	2301      	movs	r3, #1
 800d240:	e000      	b.n	800d244 <tcp_receive+0xa44>
 800d242:	2300      	movs	r3, #0
 800d244:	4423      	add	r3, r4
 800d246:	b29a      	uxth	r2, r3
 800d248:	4b63      	ldr	r3, [pc, #396]	; (800d3d8 <tcp_receive+0xbd8>)
 800d24a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800d24c:	4b62      	ldr	r3, [pc, #392]	; (800d3d8 <tcp_receive+0xbd8>)
 800d24e:	881b      	ldrh	r3, [r3, #0]
 800d250:	461a      	mov	r2, r3
 800d252:	4b62      	ldr	r3, [pc, #392]	; (800d3dc <tcp_receive+0xbdc>)
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	441a      	add	r2, r3
 800d258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d25a:	68db      	ldr	r3, [r3, #12]
 800d25c:	685b      	ldr	r3, [r3, #4]
 800d25e:	429a      	cmp	r2, r3
 800d260:	d006      	beq.n	800d270 <tcp_receive+0xa70>
 800d262:	4b60      	ldr	r3, [pc, #384]	; (800d3e4 <tcp_receive+0xbe4>)
 800d264:	f240 52af 	movw	r2, #1455	; 0x5af
 800d268:	495f      	ldr	r1, [pc, #380]	; (800d3e8 <tcp_receive+0xbe8>)
 800d26a:	4860      	ldr	r0, [pc, #384]	; (800d3ec <tcp_receive+0xbec>)
 800d26c:	f00b f85a 	bl	8018324 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d274:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800d276:	4b58      	ldr	r3, [pc, #352]	; (800d3d8 <tcp_receive+0xbd8>)
 800d278:	881b      	ldrh	r3, [r3, #0]
 800d27a:	461a      	mov	r2, r3
 800d27c:	4b57      	ldr	r3, [pc, #348]	; (800d3dc <tcp_receive+0xbdc>)
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	441a      	add	r2, r3
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d28a:	4b53      	ldr	r3, [pc, #332]	; (800d3d8 <tcp_receive+0xbd8>)
 800d28c:	881b      	ldrh	r3, [r3, #0]
 800d28e:	429a      	cmp	r2, r3
 800d290:	d206      	bcs.n	800d2a0 <tcp_receive+0xaa0>
 800d292:	4b54      	ldr	r3, [pc, #336]	; (800d3e4 <tcp_receive+0xbe4>)
 800d294:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800d298:	4955      	ldr	r1, [pc, #340]	; (800d3f0 <tcp_receive+0xbf0>)
 800d29a:	4854      	ldr	r0, [pc, #336]	; (800d3ec <tcp_receive+0xbec>)
 800d29c:	f00b f842 	bl	8018324 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d2a4:	4b4c      	ldr	r3, [pc, #304]	; (800d3d8 <tcp_receive+0xbd8>)
 800d2a6:	881b      	ldrh	r3, [r3, #0]
 800d2a8:	1ad3      	subs	r3, r2, r3
 800d2aa:	b29a      	uxth	r2, r3
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800d2b0:	6878      	ldr	r0, [r7, #4]
 800d2b2:	f7fd f9fd 	bl	800a6b0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800d2b6:	4b4a      	ldr	r3, [pc, #296]	; (800d3e0 <tcp_receive+0xbe0>)
 800d2b8:	685b      	ldr	r3, [r3, #4]
 800d2ba:	891b      	ldrh	r3, [r3, #8]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d006      	beq.n	800d2ce <tcp_receive+0xace>
          recv_data = inseg.p;
 800d2c0:	4b47      	ldr	r3, [pc, #284]	; (800d3e0 <tcp_receive+0xbe0>)
 800d2c2:	685b      	ldr	r3, [r3, #4]
 800d2c4:	4a4b      	ldr	r2, [pc, #300]	; (800d3f4 <tcp_receive+0xbf4>)
 800d2c6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800d2c8:	4b45      	ldr	r3, [pc, #276]	; (800d3e0 <tcp_receive+0xbe0>)
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d2ce:	4b44      	ldr	r3, [pc, #272]	; (800d3e0 <tcp_receive+0xbe0>)
 800d2d0:	68db      	ldr	r3, [r3, #12]
 800d2d2:	899b      	ldrh	r3, [r3, #12]
 800d2d4:	b29b      	uxth	r3, r3
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	f7fa fed0 	bl	800807c <lwip_htons>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	f003 0301 	and.w	r3, r3, #1
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	f000 80b4 	beq.w	800d450 <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800d2e8:	4b43      	ldr	r3, [pc, #268]	; (800d3f8 <tcp_receive+0xbf8>)
 800d2ea:	781b      	ldrb	r3, [r3, #0]
 800d2ec:	f043 0320 	orr.w	r3, r3, #32
 800d2f0:	b2da      	uxtb	r2, r3
 800d2f2:	4b41      	ldr	r3, [pc, #260]	; (800d3f8 <tcp_receive+0xbf8>)
 800d2f4:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800d2f6:	e0ab      	b.n	800d450 <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2fc:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d302:	68db      	ldr	r3, [r3, #12]
 800d304:	685b      	ldr	r3, [r3, #4]
 800d306:	4a35      	ldr	r2, [pc, #212]	; (800d3dc <tcp_receive+0xbdc>)
 800d308:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	891b      	ldrh	r3, [r3, #8]
 800d30e:	461c      	mov	r4, r3
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	68db      	ldr	r3, [r3, #12]
 800d314:	899b      	ldrh	r3, [r3, #12]
 800d316:	b29b      	uxth	r3, r3
 800d318:	4618      	mov	r0, r3
 800d31a:	f7fa feaf 	bl	800807c <lwip_htons>
 800d31e:	4603      	mov	r3, r0
 800d320:	f003 0303 	and.w	r3, r3, #3
 800d324:	2b00      	cmp	r3, #0
 800d326:	d001      	beq.n	800d32c <tcp_receive+0xb2c>
 800d328:	2301      	movs	r3, #1
 800d32a:	e000      	b.n	800d32e <tcp_receive+0xb2e>
 800d32c:	2300      	movs	r3, #0
 800d32e:	191a      	adds	r2, r3, r4
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d334:	441a      	add	r2, r3
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d33e:	461c      	mov	r4, r3
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	891b      	ldrh	r3, [r3, #8]
 800d344:	461d      	mov	r5, r3
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	68db      	ldr	r3, [r3, #12]
 800d34a:	899b      	ldrh	r3, [r3, #12]
 800d34c:	b29b      	uxth	r3, r3
 800d34e:	4618      	mov	r0, r3
 800d350:	f7fa fe94 	bl	800807c <lwip_htons>
 800d354:	4603      	mov	r3, r0
 800d356:	f003 0303 	and.w	r3, r3, #3
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d001      	beq.n	800d362 <tcp_receive+0xb62>
 800d35e:	2301      	movs	r3, #1
 800d360:	e000      	b.n	800d364 <tcp_receive+0xb64>
 800d362:	2300      	movs	r3, #0
 800d364:	442b      	add	r3, r5
 800d366:	429c      	cmp	r4, r3
 800d368:	d206      	bcs.n	800d378 <tcp_receive+0xb78>
 800d36a:	4b1e      	ldr	r3, [pc, #120]	; (800d3e4 <tcp_receive+0xbe4>)
 800d36c:	f240 52de 	movw	r2, #1502	; 0x5de
 800d370:	4922      	ldr	r1, [pc, #136]	; (800d3fc <tcp_receive+0xbfc>)
 800d372:	481e      	ldr	r0, [pc, #120]	; (800d3ec <tcp_receive+0xbec>)
 800d374:	f00a ffd6 	bl	8018324 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	891b      	ldrh	r3, [r3, #8]
 800d37c:	461c      	mov	r4, r3
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	68db      	ldr	r3, [r3, #12]
 800d382:	899b      	ldrh	r3, [r3, #12]
 800d384:	b29b      	uxth	r3, r3
 800d386:	4618      	mov	r0, r3
 800d388:	f7fa fe78 	bl	800807c <lwip_htons>
 800d38c:	4603      	mov	r3, r0
 800d38e:	f003 0303 	and.w	r3, r3, #3
 800d392:	2b00      	cmp	r3, #0
 800d394:	d001      	beq.n	800d39a <tcp_receive+0xb9a>
 800d396:	2301      	movs	r3, #1
 800d398:	e000      	b.n	800d39c <tcp_receive+0xb9c>
 800d39a:	2300      	movs	r3, #0
 800d39c:	1919      	adds	r1, r3, r4
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d3a2:	b28b      	uxth	r3, r1
 800d3a4:	1ad3      	subs	r3, r2, r3
 800d3a6:	b29a      	uxth	r2, r3
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800d3ac:	6878      	ldr	r0, [r7, #4]
 800d3ae:	f7fd f97f 	bl	800a6b0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	685b      	ldr	r3, [r3, #4]
 800d3b6:	891b      	ldrh	r3, [r3, #8]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d028      	beq.n	800d40e <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800d3bc:	4b0d      	ldr	r3, [pc, #52]	; (800d3f4 <tcp_receive+0xbf4>)
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d01d      	beq.n	800d400 <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 800d3c4:	4b0b      	ldr	r3, [pc, #44]	; (800d3f4 <tcp_receive+0xbf4>)
 800d3c6:	681a      	ldr	r2, [r3, #0]
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	685b      	ldr	r3, [r3, #4]
 800d3cc:	4619      	mov	r1, r3
 800d3ce:	4610      	mov	r0, r2
 800d3d0:	f7fc fbee 	bl	8009bb0 <pbuf_cat>
 800d3d4:	e018      	b.n	800d408 <tcp_receive+0xc08>
 800d3d6:	bf00      	nop
 800d3d8:	20004aba 	.word	0x20004aba
 800d3dc:	20004ab0 	.word	0x20004ab0
 800d3e0:	20004a90 	.word	0x20004a90
 800d3e4:	0801a24c 	.word	0x0801a24c
 800d3e8:	0801a550 	.word	0x0801a550
 800d3ec:	0801a290 	.word	0x0801a290
 800d3f0:	0801a58c 	.word	0x0801a58c
 800d3f4:	20004ac0 	.word	0x20004ac0
 800d3f8:	20004abd 	.word	0x20004abd
 800d3fc:	0801a5ac 	.word	0x0801a5ac
            } else {
              recv_data = cseg->p;
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	685b      	ldr	r3, [r3, #4]
 800d404:	4a71      	ldr	r2, [pc, #452]	; (800d5cc <tcp_receive+0xdcc>)
 800d406:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	2200      	movs	r2, #0
 800d40c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	68db      	ldr	r3, [r3, #12]
 800d412:	899b      	ldrh	r3, [r3, #12]
 800d414:	b29b      	uxth	r3, r3
 800d416:	4618      	mov	r0, r3
 800d418:	f7fa fe30 	bl	800807c <lwip_htons>
 800d41c:	4603      	mov	r3, r0
 800d41e:	f003 0301 	and.w	r3, r3, #1
 800d422:	2b00      	cmp	r3, #0
 800d424:	d00d      	beq.n	800d442 <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800d426:	4b6a      	ldr	r3, [pc, #424]	; (800d5d0 <tcp_receive+0xdd0>)
 800d428:	781b      	ldrb	r3, [r3, #0]
 800d42a:	f043 0320 	orr.w	r3, r3, #32
 800d42e:	b2da      	uxtb	r2, r3
 800d430:	4b67      	ldr	r3, [pc, #412]	; (800d5d0 <tcp_receive+0xdd0>)
 800d432:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	7d1b      	ldrb	r3, [r3, #20]
 800d438:	2b04      	cmp	r3, #4
 800d43a:	d102      	bne.n	800d442 <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	2207      	movs	r2, #7
 800d440:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	681a      	ldr	r2, [r3, #0]
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 800d44a:	68f8      	ldr	r0, [r7, #12]
 800d44c:	f7fd fd79 	bl	800af42 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d454:	2b00      	cmp	r3, #0
 800d456:	d008      	beq.n	800d46a <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d45c:	68db      	ldr	r3, [r3, #12]
 800d45e:	685a      	ldr	r2, [r3, #4]
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800d464:	429a      	cmp	r2, r3
 800d466:	f43f af47 	beq.w	800d2f8 <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	7e9b      	ldrb	r3, [r3, #26]
 800d46e:	f003 0301 	and.w	r3, r3, #1
 800d472:	2b00      	cmp	r3, #0
 800d474:	d00e      	beq.n	800d494 <tcp_receive+0xc94>
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	7e9b      	ldrb	r3, [r3, #26]
 800d47a:	f023 0301 	bic.w	r3, r3, #1
 800d47e:	b2da      	uxtb	r2, r3
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	769a      	strb	r2, [r3, #26]
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	7e9b      	ldrb	r3, [r3, #26]
 800d488:	f043 0302 	orr.w	r3, r3, #2
 800d48c:	b2da      	uxtb	r2, r3
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d492:	e181      	b.n	800d798 <tcp_receive+0xf98>
        tcp_ack(pcb);
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	7e9b      	ldrb	r3, [r3, #26]
 800d498:	f043 0301 	orr.w	r3, r3, #1
 800d49c:	b2da      	uxtb	r2, r3
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800d4a2:	e179      	b.n	800d798 <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 800d4a4:	6878      	ldr	r0, [r7, #4]
 800d4a6:	f000 fc91 	bl	800ddcc <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d106      	bne.n	800d4c0 <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800d4b2:	4848      	ldr	r0, [pc, #288]	; (800d5d4 <tcp_receive+0xdd4>)
 800d4b4:	f7fd fd5d 	bl	800af72 <tcp_seg_copy>
 800d4b8:	4602      	mov	r2, r0
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 800d4be:	e16b      	b.n	800d798 <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d4ca:	e150      	b.n	800d76e <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 800d4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ce:	68db      	ldr	r3, [r3, #12]
 800d4d0:	685a      	ldr	r2, [r3, #4]
 800d4d2:	4b41      	ldr	r3, [pc, #260]	; (800d5d8 <tcp_receive+0xdd8>)
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	429a      	cmp	r2, r3
 800d4d8:	d11d      	bne.n	800d516 <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800d4da:	4b3e      	ldr	r3, [pc, #248]	; (800d5d4 <tcp_receive+0xdd4>)
 800d4dc:	891a      	ldrh	r2, [r3, #8]
 800d4de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4e0:	891b      	ldrh	r3, [r3, #8]
 800d4e2:	429a      	cmp	r2, r3
 800d4e4:	f240 8148 	bls.w	800d778 <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 800d4e8:	483a      	ldr	r0, [pc, #232]	; (800d5d4 <tcp_receive+0xdd4>)
 800d4ea:	f7fd fd42 	bl	800af72 <tcp_seg_copy>
 800d4ee:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	f000 8142 	beq.w	800d77c <tcp_receive+0xf7c>
                  if (prev != NULL) {
 800d4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d003      	beq.n	800d506 <tcp_receive+0xd06>
                    prev->next = cseg;
 800d4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d500:	68fa      	ldr	r2, [r7, #12]
 800d502:	601a      	str	r2, [r3, #0]
 800d504:	e002      	b.n	800d50c <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	68fa      	ldr	r2, [r7, #12]
 800d50a:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 800d50c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d50e:	68f8      	ldr	r0, [r7, #12]
 800d510:	f7ff f900 	bl	800c714 <tcp_oos_insert_segment>
                }
                break;
 800d514:	e132      	b.n	800d77c <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800d516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d117      	bne.n	800d54c <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800d51c:	4b2e      	ldr	r3, [pc, #184]	; (800d5d8 <tcp_receive+0xdd8>)
 800d51e:	681a      	ldr	r2, [r3, #0]
 800d520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d522:	68db      	ldr	r3, [r3, #12]
 800d524:	685b      	ldr	r3, [r3, #4]
 800d526:	1ad3      	subs	r3, r2, r3
 800d528:	2b00      	cmp	r3, #0
 800d52a:	da57      	bge.n	800d5dc <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 800d52c:	4829      	ldr	r0, [pc, #164]	; (800d5d4 <tcp_receive+0xdd4>)
 800d52e:	f7fd fd20 	bl	800af72 <tcp_seg_copy>
 800d532:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	2b00      	cmp	r3, #0
 800d538:	f000 8122 	beq.w	800d780 <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	68fa      	ldr	r2, [r7, #12]
 800d540:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 800d542:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d544:	68f8      	ldr	r0, [r7, #12]
 800d546:	f7ff f8e5 	bl	800c714 <tcp_oos_insert_segment>
                  }
                  break;
 800d54a:	e119      	b.n	800d780 <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 800d54c:	4b22      	ldr	r3, [pc, #136]	; (800d5d8 <tcp_receive+0xdd8>)
 800d54e:	681a      	ldr	r2, [r3, #0]
 800d550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d552:	68db      	ldr	r3, [r3, #12]
 800d554:	685b      	ldr	r3, [r3, #4]
 800d556:	1ad3      	subs	r3, r2, r3
 800d558:	3b01      	subs	r3, #1
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	db3e      	blt.n	800d5dc <tcp_receive+0xddc>
 800d55e:	4b1e      	ldr	r3, [pc, #120]	; (800d5d8 <tcp_receive+0xdd8>)
 800d560:	681a      	ldr	r2, [r3, #0]
 800d562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d564:	68db      	ldr	r3, [r3, #12]
 800d566:	685b      	ldr	r3, [r3, #4]
 800d568:	1ad3      	subs	r3, r2, r3
 800d56a:	3301      	adds	r3, #1
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	dc35      	bgt.n	800d5dc <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 800d570:	4818      	ldr	r0, [pc, #96]	; (800d5d4 <tcp_receive+0xdd4>)
 800d572:	f7fd fcfe 	bl	800af72 <tcp_seg_copy>
 800d576:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	f000 8102 	beq.w	800d784 <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800d580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d582:	68db      	ldr	r3, [r3, #12]
 800d584:	685b      	ldr	r3, [r3, #4]
 800d586:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d588:	8912      	ldrh	r2, [r2, #8]
 800d58a:	441a      	add	r2, r3
 800d58c:	4b12      	ldr	r3, [pc, #72]	; (800d5d8 <tcp_receive+0xdd8>)
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	1ad3      	subs	r3, r2, r3
 800d592:	2b00      	cmp	r3, #0
 800d594:	dd12      	ble.n	800d5bc <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800d596:	4b10      	ldr	r3, [pc, #64]	; (800d5d8 <tcp_receive+0xdd8>)
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	b29a      	uxth	r2, r3
 800d59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d59e:	68db      	ldr	r3, [r3, #12]
 800d5a0:	685b      	ldr	r3, [r3, #4]
 800d5a2:	b29b      	uxth	r3, r3
 800d5a4:	1ad3      	subs	r3, r2, r3
 800d5a6:	b29a      	uxth	r2, r3
 800d5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5aa:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800d5ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ae:	685a      	ldr	r2, [r3, #4]
 800d5b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5b2:	891b      	ldrh	r3, [r3, #8]
 800d5b4:	4619      	mov	r1, r3
 800d5b6:	4610      	mov	r0, r2
 800d5b8:	f7fc f8ae 	bl	8009718 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800d5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5be:	68fa      	ldr	r2, [r7, #12]
 800d5c0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800d5c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d5c4:	68f8      	ldr	r0, [r7, #12]
 800d5c6:	f7ff f8a5 	bl	800c714 <tcp_oos_insert_segment>
                  }
                  break;
 800d5ca:	e0db      	b.n	800d784 <tcp_receive+0xf84>
 800d5cc:	20004ac0 	.word	0x20004ac0
 800d5d0:	20004abd 	.word	0x20004abd
 800d5d4:	20004a90 	.word	0x20004a90
 800d5d8:	20004ab0 	.word	0x20004ab0
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800d5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	f040 80bf 	bne.w	800d764 <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800d5e6:	4b7c      	ldr	r3, [pc, #496]	; (800d7d8 <tcp_receive+0xfd8>)
 800d5e8:	681a      	ldr	r2, [r3, #0]
 800d5ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5ec:	68db      	ldr	r3, [r3, #12]
 800d5ee:	685b      	ldr	r3, [r3, #4]
 800d5f0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	f340 80b6 	ble.w	800d764 <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d5f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5fa:	68db      	ldr	r3, [r3, #12]
 800d5fc:	899b      	ldrh	r3, [r3, #12]
 800d5fe:	b29b      	uxth	r3, r3
 800d600:	4618      	mov	r0, r3
 800d602:	f7fa fd3b 	bl	800807c <lwip_htons>
 800d606:	4603      	mov	r3, r0
 800d608:	f003 0301 	and.w	r3, r3, #1
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	f040 80bb 	bne.w	800d788 <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800d612:	4872      	ldr	r0, [pc, #456]	; (800d7dc <tcp_receive+0xfdc>)
 800d614:	f7fd fcad 	bl	800af72 <tcp_seg_copy>
 800d618:	4602      	mov	r2, r0
 800d61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d61c:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800d61e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	2b00      	cmp	r3, #0
 800d624:	f000 80b2 	beq.w	800d78c <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800d628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d62a:	68db      	ldr	r3, [r3, #12]
 800d62c:	685b      	ldr	r3, [r3, #4]
 800d62e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d630:	8912      	ldrh	r2, [r2, #8]
 800d632:	441a      	add	r2, r3
 800d634:	4b68      	ldr	r3, [pc, #416]	; (800d7d8 <tcp_receive+0xfd8>)
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	1ad3      	subs	r3, r2, r3
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	dd12      	ble.n	800d664 <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800d63e:	4b66      	ldr	r3, [pc, #408]	; (800d7d8 <tcp_receive+0xfd8>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	b29a      	uxth	r2, r3
 800d644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d646:	68db      	ldr	r3, [r3, #12]
 800d648:	685b      	ldr	r3, [r3, #4]
 800d64a:	b29b      	uxth	r3, r3
 800d64c:	1ad3      	subs	r3, r2, r3
 800d64e:	b29a      	uxth	r2, r3
 800d650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d652:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800d654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d656:	685a      	ldr	r2, [r3, #4]
 800d658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d65a:	891b      	ldrh	r3, [r3, #8]
 800d65c:	4619      	mov	r1, r3
 800d65e:	4610      	mov	r0, r2
 800d660:	f7fc f85a 	bl	8009718 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800d664:	4b5e      	ldr	r3, [pc, #376]	; (800d7e0 <tcp_receive+0xfe0>)
 800d666:	881b      	ldrh	r3, [r3, #0]
 800d668:	461a      	mov	r2, r3
 800d66a:	4b5b      	ldr	r3, [pc, #364]	; (800d7d8 <tcp_receive+0xfd8>)
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	441a      	add	r2, r3
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d674:	6879      	ldr	r1, [r7, #4]
 800d676:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d678:	440b      	add	r3, r1
 800d67a:	1ad3      	subs	r3, r2, r3
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	f340 8085 	ble.w	800d78c <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800d682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	68db      	ldr	r3, [r3, #12]
 800d688:	899b      	ldrh	r3, [r3, #12]
 800d68a:	b29b      	uxth	r3, r3
 800d68c:	4618      	mov	r0, r3
 800d68e:	f7fa fcf5 	bl	800807c <lwip_htons>
 800d692:	4603      	mov	r3, r0
 800d694:	f003 0301 	and.w	r3, r3, #1
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d01e      	beq.n	800d6da <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800d69c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	68db      	ldr	r3, [r3, #12]
 800d6a2:	899b      	ldrh	r3, [r3, #12]
 800d6a4:	b29b      	uxth	r3, r3
 800d6a6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d6aa:	b29c      	uxth	r4, r3
 800d6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	68db      	ldr	r3, [r3, #12]
 800d6b2:	899b      	ldrh	r3, [r3, #12]
 800d6b4:	b29b      	uxth	r3, r3
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	f7fa fce0 	bl	800807c <lwip_htons>
 800d6bc:	4603      	mov	r3, r0
 800d6be:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800d6c2:	b29b      	uxth	r3, r3
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	f7fa fcd9 	bl	800807c <lwip_htons>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	461a      	mov	r2, r3
 800d6ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	68db      	ldr	r3, [r3, #12]
 800d6d4:	4322      	orrs	r2, r4
 800d6d6:	b292      	uxth	r2, r2
 800d6d8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6de:	b29a      	uxth	r2, r3
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d6e4:	4413      	add	r3, r2
 800d6e6:	b299      	uxth	r1, r3
 800d6e8:	4b3b      	ldr	r3, [pc, #236]	; (800d7d8 <tcp_receive+0xfd8>)
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	b29a      	uxth	r2, r3
 800d6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	1a8a      	subs	r2, r1, r2
 800d6f4:	b292      	uxth	r2, r2
 800d6f6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800d6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	685a      	ldr	r2, [r3, #4]
 800d6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	891b      	ldrh	r3, [r3, #8]
 800d704:	4619      	mov	r1, r3
 800d706:	4610      	mov	r0, r2
 800d708:	f7fc f806 	bl	8009718 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800d70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	891c      	ldrh	r4, [r3, #8]
 800d712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	68db      	ldr	r3, [r3, #12]
 800d718:	899b      	ldrh	r3, [r3, #12]
 800d71a:	b29b      	uxth	r3, r3
 800d71c:	4618      	mov	r0, r3
 800d71e:	f7fa fcad 	bl	800807c <lwip_htons>
 800d722:	4603      	mov	r3, r0
 800d724:	f003 0303 	and.w	r3, r3, #3
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d001      	beq.n	800d730 <tcp_receive+0xf30>
 800d72c:	2301      	movs	r3, #1
 800d72e:	e000      	b.n	800d732 <tcp_receive+0xf32>
 800d730:	2300      	movs	r3, #0
 800d732:	4423      	add	r3, r4
 800d734:	b29a      	uxth	r2, r3
 800d736:	4b2a      	ldr	r3, [pc, #168]	; (800d7e0 <tcp_receive+0xfe0>)
 800d738:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d73a:	4b29      	ldr	r3, [pc, #164]	; (800d7e0 <tcp_receive+0xfe0>)
 800d73c:	881b      	ldrh	r3, [r3, #0]
 800d73e:	461a      	mov	r2, r3
 800d740:	4b25      	ldr	r3, [pc, #148]	; (800d7d8 <tcp_receive+0xfd8>)
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	441a      	add	r2, r3
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d74a:	6879      	ldr	r1, [r7, #4]
 800d74c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d74e:	440b      	add	r3, r1
 800d750:	429a      	cmp	r2, r3
 800d752:	d01b      	beq.n	800d78c <tcp_receive+0xf8c>
 800d754:	4b23      	ldr	r3, [pc, #140]	; (800d7e4 <tcp_receive+0xfe4>)
 800d756:	f240 627b 	movw	r2, #1659	; 0x67b
 800d75a:	4923      	ldr	r1, [pc, #140]	; (800d7e8 <tcp_receive+0xfe8>)
 800d75c:	4823      	ldr	r0, [pc, #140]	; (800d7ec <tcp_receive+0xfec>)
 800d75e:	f00a fde1 	bl	8018324 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800d762:	e013      	b.n	800d78c <tcp_receive+0xf8c>
              }
            }
            prev = next;
 800d764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d766:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800d768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d770:	2b00      	cmp	r3, #0
 800d772:	f47f aeab 	bne.w	800d4cc <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 800d776:	e00f      	b.n	800d798 <tcp_receive+0xf98>
                break;
 800d778:	bf00      	nop
 800d77a:	e00d      	b.n	800d798 <tcp_receive+0xf98>
                break;
 800d77c:	bf00      	nop
 800d77e:	e00b      	b.n	800d798 <tcp_receive+0xf98>
                  break;
 800d780:	bf00      	nop
 800d782:	e009      	b.n	800d798 <tcp_receive+0xf98>
                  break;
 800d784:	bf00      	nop
 800d786:	e007      	b.n	800d798 <tcp_receive+0xf98>
                  break;
 800d788:	bf00      	nop
 800d78a:	e005      	b.n	800d798 <tcp_receive+0xf98>
                break;
 800d78c:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 800d78e:	e003      	b.n	800d798 <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800d790:	6878      	ldr	r0, [r7, #4]
 800d792:	f000 fb1b 	bl	800ddcc <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d796:	e01a      	b.n	800d7ce <tcp_receive+0xfce>
 800d798:	e019      	b.n	800d7ce <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800d79a:	4b0f      	ldr	r3, [pc, #60]	; (800d7d8 <tcp_receive+0xfd8>)
 800d79c:	681a      	ldr	r2, [r3, #0]
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7a2:	1ad3      	subs	r3, r2, r3
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	db0a      	blt.n	800d7be <tcp_receive+0xfbe>
 800d7a8:	4b0b      	ldr	r3, [pc, #44]	; (800d7d8 <tcp_receive+0xfd8>)
 800d7aa:	681a      	ldr	r2, [r3, #0]
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7b0:	6879      	ldr	r1, [r7, #4]
 800d7b2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d7b4:	440b      	add	r3, r1
 800d7b6:	1ad3      	subs	r3, r2, r3
 800d7b8:	3301      	adds	r3, #1
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	dd07      	ble.n	800d7ce <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	7e9b      	ldrb	r3, [r3, #26]
 800d7c2:	f043 0302 	orr.w	r3, r3, #2
 800d7c6:	b2da      	uxtb	r2, r3
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	769a      	strb	r2, [r3, #26]
    }
  }
}
 800d7cc:	e7ff      	b.n	800d7ce <tcp_receive+0xfce>
 800d7ce:	bf00      	nop
 800d7d0:	3734      	adds	r7, #52	; 0x34
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d7d6:	bf00      	nop
 800d7d8:	20004ab0 	.word	0x20004ab0
 800d7dc:	20004a90 	.word	0x20004a90
 800d7e0:	20004aba 	.word	0x20004aba
 800d7e4:	0801a24c 	.word	0x0801a24c
 800d7e8:	0801a518 	.word	0x0801a518
 800d7ec:	0801a290 	.word	0x0801a290

0800d7f0 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 800d7f0:	b480      	push	{r7}
 800d7f2:	b083      	sub	sp, #12
 800d7f4:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800d7f6:	4b17      	ldr	r3, [pc, #92]	; (800d854 <tcp_getoptbyte+0x64>)
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d005      	beq.n	800d80a <tcp_getoptbyte+0x1a>
 800d7fe:	4b16      	ldr	r3, [pc, #88]	; (800d858 <tcp_getoptbyte+0x68>)
 800d800:	881a      	ldrh	r2, [r3, #0]
 800d802:	4b16      	ldr	r3, [pc, #88]	; (800d85c <tcp_getoptbyte+0x6c>)
 800d804:	881b      	ldrh	r3, [r3, #0]
 800d806:	429a      	cmp	r2, r3
 800d808:	d20e      	bcs.n	800d828 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800d80a:	4b15      	ldr	r3, [pc, #84]	; (800d860 <tcp_getoptbyte+0x70>)
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	3314      	adds	r3, #20
 800d810:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 800d812:	4b11      	ldr	r3, [pc, #68]	; (800d858 <tcp_getoptbyte+0x68>)
 800d814:	881b      	ldrh	r3, [r3, #0]
 800d816:	1c5a      	adds	r2, r3, #1
 800d818:	b291      	uxth	r1, r2
 800d81a:	4a0f      	ldr	r2, [pc, #60]	; (800d858 <tcp_getoptbyte+0x68>)
 800d81c:	8011      	strh	r1, [r2, #0]
 800d81e:	461a      	mov	r2, r3
 800d820:	683b      	ldr	r3, [r7, #0]
 800d822:	4413      	add	r3, r2
 800d824:	781b      	ldrb	r3, [r3, #0]
 800d826:	e010      	b.n	800d84a <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800d828:	4b0b      	ldr	r3, [pc, #44]	; (800d858 <tcp_getoptbyte+0x68>)
 800d82a:	881b      	ldrh	r3, [r3, #0]
 800d82c:	1c5a      	adds	r2, r3, #1
 800d82e:	b291      	uxth	r1, r2
 800d830:	4a09      	ldr	r2, [pc, #36]	; (800d858 <tcp_getoptbyte+0x68>)
 800d832:	8011      	strh	r1, [r2, #0]
 800d834:	b2da      	uxtb	r2, r3
 800d836:	4b09      	ldr	r3, [pc, #36]	; (800d85c <tcp_getoptbyte+0x6c>)
 800d838:	881b      	ldrh	r3, [r3, #0]
 800d83a:	b2db      	uxtb	r3, r3
 800d83c:	1ad3      	subs	r3, r2, r3
 800d83e:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 800d840:	4b04      	ldr	r3, [pc, #16]	; (800d854 <tcp_getoptbyte+0x64>)
 800d842:	681a      	ldr	r2, [r3, #0]
 800d844:	79fb      	ldrb	r3, [r7, #7]
 800d846:	4413      	add	r3, r2
 800d848:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d84a:	4618      	mov	r0, r3
 800d84c:	370c      	adds	r7, #12
 800d84e:	46bd      	mov	sp, r7
 800d850:	bc80      	pop	{r7}
 800d852:	4770      	bx	lr
 800d854:	20004aa8 	.word	0x20004aa8
 800d858:	20004aac 	.word	0x20004aac
 800d85c:	20004aa6 	.word	0x20004aa6
 800d860:	20004aa0 	.word	0x20004aa0

0800d864 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800d864:	b580      	push	{r7, lr}
 800d866:	b084      	sub	sp, #16
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800d86c:	4b2d      	ldr	r3, [pc, #180]	; (800d924 <tcp_parseopt+0xc0>)
 800d86e:	881b      	ldrh	r3, [r3, #0]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d053      	beq.n	800d91c <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d874:	4b2c      	ldr	r3, [pc, #176]	; (800d928 <tcp_parseopt+0xc4>)
 800d876:	2200      	movs	r2, #0
 800d878:	801a      	strh	r2, [r3, #0]
 800d87a:	e043      	b.n	800d904 <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 800d87c:	f7ff ffb8 	bl	800d7f0 <tcp_getoptbyte>
 800d880:	4603      	mov	r3, r0
 800d882:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800d884:	7bfb      	ldrb	r3, [r7, #15]
 800d886:	2b01      	cmp	r3, #1
 800d888:	d03c      	beq.n	800d904 <tcp_parseopt+0xa0>
 800d88a:	2b02      	cmp	r3, #2
 800d88c:	d002      	beq.n	800d894 <tcp_parseopt+0x30>
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d03f      	beq.n	800d912 <tcp_parseopt+0xae>
 800d892:	e026      	b.n	800d8e2 <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800d894:	f7ff ffac 	bl	800d7f0 <tcp_getoptbyte>
 800d898:	4603      	mov	r3, r0
 800d89a:	2b04      	cmp	r3, #4
 800d89c:	d13b      	bne.n	800d916 <tcp_parseopt+0xb2>
 800d89e:	4b22      	ldr	r3, [pc, #136]	; (800d928 <tcp_parseopt+0xc4>)
 800d8a0:	881b      	ldrh	r3, [r3, #0]
 800d8a2:	3302      	adds	r3, #2
 800d8a4:	4a1f      	ldr	r2, [pc, #124]	; (800d924 <tcp_parseopt+0xc0>)
 800d8a6:	8812      	ldrh	r2, [r2, #0]
 800d8a8:	4293      	cmp	r3, r2
 800d8aa:	dc34      	bgt.n	800d916 <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 800d8ac:	f7ff ffa0 	bl	800d7f0 <tcp_getoptbyte>
 800d8b0:	4603      	mov	r3, r0
 800d8b2:	b29b      	uxth	r3, r3
 800d8b4:	021b      	lsls	r3, r3, #8
 800d8b6:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 800d8b8:	f7ff ff9a 	bl	800d7f0 <tcp_getoptbyte>
 800d8bc:	4603      	mov	r3, r0
 800d8be:	b29a      	uxth	r2, r3
 800d8c0:	89bb      	ldrh	r3, [r7, #12]
 800d8c2:	4313      	orrs	r3, r2
 800d8c4:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800d8c6:	89bb      	ldrh	r3, [r7, #12]
 800d8c8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d8cc:	d804      	bhi.n	800d8d8 <tcp_parseopt+0x74>
 800d8ce:	89bb      	ldrh	r3, [r7, #12]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d001      	beq.n	800d8d8 <tcp_parseopt+0x74>
 800d8d4:	89ba      	ldrh	r2, [r7, #12]
 800d8d6:	e001      	b.n	800d8dc <tcp_parseopt+0x78>
 800d8d8:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 800d8e0:	e010      	b.n	800d904 <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 800d8e2:	f7ff ff85 	bl	800d7f0 <tcp_getoptbyte>
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 800d8ea:	7afb      	ldrb	r3, [r7, #11]
 800d8ec:	2b01      	cmp	r3, #1
 800d8ee:	d914      	bls.n	800d91a <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 800d8f0:	7afb      	ldrb	r3, [r7, #11]
 800d8f2:	b29a      	uxth	r2, r3
 800d8f4:	4b0c      	ldr	r3, [pc, #48]	; (800d928 <tcp_parseopt+0xc4>)
 800d8f6:	881b      	ldrh	r3, [r3, #0]
 800d8f8:	4413      	add	r3, r2
 800d8fa:	b29b      	uxth	r3, r3
 800d8fc:	3b02      	subs	r3, #2
 800d8fe:	b29a      	uxth	r2, r3
 800d900:	4b09      	ldr	r3, [pc, #36]	; (800d928 <tcp_parseopt+0xc4>)
 800d902:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800d904:	4b08      	ldr	r3, [pc, #32]	; (800d928 <tcp_parseopt+0xc4>)
 800d906:	881a      	ldrh	r2, [r3, #0]
 800d908:	4b06      	ldr	r3, [pc, #24]	; (800d924 <tcp_parseopt+0xc0>)
 800d90a:	881b      	ldrh	r3, [r3, #0]
 800d90c:	429a      	cmp	r2, r3
 800d90e:	d3b5      	bcc.n	800d87c <tcp_parseopt+0x18>
 800d910:	e004      	b.n	800d91c <tcp_parseopt+0xb8>
        return;
 800d912:	bf00      	nop
 800d914:	e002      	b.n	800d91c <tcp_parseopt+0xb8>
          return;
 800d916:	bf00      	nop
 800d918:	e000      	b.n	800d91c <tcp_parseopt+0xb8>
          return;
 800d91a:	bf00      	nop
      }
    }
  }
}
 800d91c:	3710      	adds	r7, #16
 800d91e:	46bd      	mov	sp, r7
 800d920:	bd80      	pop	{r7, pc}
 800d922:	bf00      	nop
 800d924:	20004aa4 	.word	0x20004aa4
 800d928:	20004aac 	.word	0x20004aac

0800d92c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800d92c:	b480      	push	{r7}
 800d92e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800d930:	4b05      	ldr	r3, [pc, #20]	; (800d948 <tcp_trigger_input_pcb_close+0x1c>)
 800d932:	781b      	ldrb	r3, [r3, #0]
 800d934:	f043 0310 	orr.w	r3, r3, #16
 800d938:	b2da      	uxtb	r2, r3
 800d93a:	4b03      	ldr	r3, [pc, #12]	; (800d948 <tcp_trigger_input_pcb_close+0x1c>)
 800d93c:	701a      	strb	r2, [r3, #0]
}
 800d93e:	bf00      	nop
 800d940:	46bd      	mov	sp, r7
 800d942:	bc80      	pop	{r7}
 800d944:	4770      	bx	lr
 800d946:	bf00      	nop
 800d948:	20004abd 	.word	0x20004abd

0800d94c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b086      	sub	sp, #24
 800d950:	af00      	add	r7, sp, #0
 800d952:	60f8      	str	r0, [r7, #12]
 800d954:	607b      	str	r3, [r7, #4]
 800d956:	460b      	mov	r3, r1
 800d958:	817b      	strh	r3, [r7, #10]
 800d95a:	4613      	mov	r3, r2
 800d95c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800d95e:	897a      	ldrh	r2, [r7, #10]
 800d960:	893b      	ldrh	r3, [r7, #8]
 800d962:	4413      	add	r3, r2
 800d964:	b29b      	uxth	r3, r3
 800d966:	3314      	adds	r3, #20
 800d968:	b29b      	uxth	r3, r3
 800d96a:	2200      	movs	r2, #0
 800d96c:	4619      	mov	r1, r3
 800d96e:	2001      	movs	r0, #1
 800d970:	f7fb fcd4 	bl	800931c <pbuf_alloc>
 800d974:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800d976:	697b      	ldr	r3, [r7, #20]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d057      	beq.n	800da2c <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800d97c:	697b      	ldr	r3, [r7, #20]
 800d97e:	895b      	ldrh	r3, [r3, #10]
 800d980:	461a      	mov	r2, r3
 800d982:	897b      	ldrh	r3, [r7, #10]
 800d984:	3314      	adds	r3, #20
 800d986:	429a      	cmp	r2, r3
 800d988:	da05      	bge.n	800d996 <tcp_output_alloc_header+0x4a>
 800d98a:	4b2b      	ldr	r3, [pc, #172]	; (800da38 <tcp_output_alloc_header+0xec>)
 800d98c:	2273      	movs	r2, #115	; 0x73
 800d98e:	492b      	ldr	r1, [pc, #172]	; (800da3c <tcp_output_alloc_header+0xf0>)
 800d990:	482b      	ldr	r0, [pc, #172]	; (800da40 <tcp_output_alloc_header+0xf4>)
 800d992:	f00a fcc7 	bl	8018324 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800d996:	697b      	ldr	r3, [r7, #20]
 800d998:	685b      	ldr	r3, [r3, #4]
 800d99a:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	8adb      	ldrh	r3, [r3, #22]
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	f7fa fb6b 	bl	800807c <lwip_htons>
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	461a      	mov	r2, r3
 800d9aa:	693b      	ldr	r3, [r7, #16]
 800d9ac:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	8b1b      	ldrh	r3, [r3, #24]
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	f7fa fb62 	bl	800807c <lwip_htons>
 800d9b8:	4603      	mov	r3, r0
 800d9ba:	461a      	mov	r2, r3
 800d9bc:	693b      	ldr	r3, [r7, #16]
 800d9be:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800d9c0:	693b      	ldr	r3, [r7, #16]
 800d9c2:	687a      	ldr	r2, [r7, #4]
 800d9c4:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	f7fa fb63 	bl	8008096 <lwip_htonl>
 800d9d0:	4602      	mov	r2, r0
 800d9d2:	693b      	ldr	r3, [r7, #16]
 800d9d4:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800d9d6:	897b      	ldrh	r3, [r7, #10]
 800d9d8:	089b      	lsrs	r3, r3, #2
 800d9da:	b29b      	uxth	r3, r3
 800d9dc:	3305      	adds	r3, #5
 800d9de:	b29b      	uxth	r3, r3
 800d9e0:	031b      	lsls	r3, r3, #12
 800d9e2:	b29b      	uxth	r3, r3
 800d9e4:	f043 0310 	orr.w	r3, r3, #16
 800d9e8:	b29b      	uxth	r3, r3
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	f7fa fb46 	bl	800807c <lwip_htons>
 800d9f0:	4603      	mov	r3, r0
 800d9f2:	461a      	mov	r2, r3
 800d9f4:	693b      	ldr	r3, [r7, #16]
 800d9f6:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	f7fa fb3d 	bl	800807c <lwip_htons>
 800da02:	4603      	mov	r3, r0
 800da04:	461a      	mov	r2, r3
 800da06:	693b      	ldr	r3, [r7, #16]
 800da08:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800da0a:	693b      	ldr	r3, [r7, #16]
 800da0c:	2200      	movs	r2, #0
 800da0e:	741a      	strb	r2, [r3, #16]
 800da10:	2200      	movs	r2, #0
 800da12:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800da14:	693b      	ldr	r3, [r7, #16]
 800da16:	2200      	movs	r2, #0
 800da18:	749a      	strb	r2, [r3, #18]
 800da1a:	2200      	movs	r2, #0
 800da1c:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da22:	68fa      	ldr	r2, [r7, #12]
 800da24:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800da26:	441a      	add	r2, r3
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800da2c:	697b      	ldr	r3, [r7, #20]
}
 800da2e:	4618      	mov	r0, r3
 800da30:	3718      	adds	r7, #24
 800da32:	46bd      	mov	sp, r7
 800da34:	bd80      	pop	{r7, pc}
 800da36:	bf00      	nop
 800da38:	0801a5d4 	.word	0x0801a5d4
 800da3c:	0801a608 	.word	0x0801a608
 800da40:	0801a638 	.word	0x0801a638

0800da44 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800da44:	b590      	push	{r4, r7, lr}
 800da46:	b085      	sub	sp, #20
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da50:	2b00      	cmp	r3, #0
 800da52:	d02d      	beq.n	800dab0 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da58:	60fb      	str	r3, [r7, #12]
 800da5a:	e002      	b.n	800da62 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d1f8      	bne.n	800da5c <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	68db      	ldr	r3, [r3, #12]
 800da6e:	899b      	ldrh	r3, [r3, #12]
 800da70:	b29b      	uxth	r3, r3
 800da72:	4618      	mov	r0, r3
 800da74:	f7fa fb02 	bl	800807c <lwip_htons>
 800da78:	4603      	mov	r3, r0
 800da7a:	f003 0307 	and.w	r3, r3, #7
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d116      	bne.n	800dab0 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	68db      	ldr	r3, [r3, #12]
 800da86:	899b      	ldrh	r3, [r3, #12]
 800da88:	b29c      	uxth	r4, r3
 800da8a:	2001      	movs	r0, #1
 800da8c:	f7fa faf6 	bl	800807c <lwip_htons>
 800da90:	4603      	mov	r3, r0
 800da92:	461a      	mov	r2, r3
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	68db      	ldr	r3, [r3, #12]
 800da98:	4322      	orrs	r2, r4
 800da9a:	b292      	uxth	r2, r2
 800da9c:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	7e9b      	ldrb	r3, [r3, #26]
 800daa2:	f043 0320 	orr.w	r3, r3, #32
 800daa6:	b2da      	uxtb	r2, r3
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 800daac:	2300      	movs	r3, #0
 800daae:	e004      	b.n	800daba <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800dab0:	2101      	movs	r1, #1
 800dab2:	6878      	ldr	r0, [r7, #4]
 800dab4:	f000 f88e 	bl	800dbd4 <tcp_enqueue_flags>
 800dab8:	4603      	mov	r3, r0
}
 800daba:	4618      	mov	r0, r3
 800dabc:	3714      	adds	r7, #20
 800dabe:	46bd      	mov	sp, r7
 800dac0:	bd90      	pop	{r4, r7, pc}
	...

0800dac4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 800dac4:	b590      	push	{r4, r7, lr}
 800dac6:	b087      	sub	sp, #28
 800dac8:	af00      	add	r7, sp, #0
 800daca:	60f8      	str	r0, [r7, #12]
 800dacc:	60b9      	str	r1, [r7, #8]
 800dace:	603b      	str	r3, [r7, #0]
 800dad0:	4613      	mov	r3, r2
 800dad2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800dad4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800dad8:	009b      	lsls	r3, r3, #2
 800dada:	b2db      	uxtb	r3, r3
 800dadc:	f003 0304 	and.w	r3, r3, #4
 800dae0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800dae2:	2003      	movs	r0, #3
 800dae4:	f7fb f9c8 	bl	8008e78 <memp_malloc>
 800dae8:	6138      	str	r0, [r7, #16]
 800daea:	693b      	ldr	r3, [r7, #16]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d104      	bne.n	800dafa <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800daf0:	68b8      	ldr	r0, [r7, #8]
 800daf2:	f7fb ff85 	bl	8009a00 <pbuf_free>
    return NULL;
 800daf6:	2300      	movs	r3, #0
 800daf8:	e061      	b.n	800dbbe <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 800dafa:	693b      	ldr	r3, [r7, #16]
 800dafc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800db00:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800db02:	693b      	ldr	r3, [r7, #16]
 800db04:	2200      	movs	r2, #0
 800db06:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800db08:	693b      	ldr	r3, [r7, #16]
 800db0a:	68ba      	ldr	r2, [r7, #8]
 800db0c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800db0e:	68bb      	ldr	r3, [r7, #8]
 800db10:	891a      	ldrh	r2, [r3, #8]
 800db12:	7dfb      	ldrb	r3, [r7, #23]
 800db14:	b29b      	uxth	r3, r3
 800db16:	429a      	cmp	r2, r3
 800db18:	d205      	bcs.n	800db26 <tcp_create_segment+0x62>
 800db1a:	4b2b      	ldr	r3, [pc, #172]	; (800dbc8 <tcp_create_segment+0x104>)
 800db1c:	22ba      	movs	r2, #186	; 0xba
 800db1e:	492b      	ldr	r1, [pc, #172]	; (800dbcc <tcp_create_segment+0x108>)
 800db20:	482b      	ldr	r0, [pc, #172]	; (800dbd0 <tcp_create_segment+0x10c>)
 800db22:	f00a fbff 	bl	8018324 <iprintf>
  seg->len = p->tot_len - optlen;
 800db26:	68bb      	ldr	r3, [r7, #8]
 800db28:	891a      	ldrh	r2, [r3, #8]
 800db2a:	7dfb      	ldrb	r3, [r7, #23]
 800db2c:	b29b      	uxth	r3, r3
 800db2e:	1ad3      	subs	r3, r2, r3
 800db30:	b29a      	uxth	r2, r3
 800db32:	693b      	ldr	r3, [r7, #16]
 800db34:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 800db36:	2114      	movs	r1, #20
 800db38:	68b8      	ldr	r0, [r7, #8]
 800db3a:	f7fb ff3d 	bl	80099b8 <pbuf_header>
 800db3e:	4603      	mov	r3, r0
 800db40:	2b00      	cmp	r3, #0
 800db42:	d004      	beq.n	800db4e <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800db44:	6938      	ldr	r0, [r7, #16]
 800db46:	f7fd f9fc 	bl	800af42 <tcp_seg_free>
    return NULL;
 800db4a:	2300      	movs	r3, #0
 800db4c:	e037      	b.n	800dbbe <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800db4e:	693b      	ldr	r3, [r7, #16]
 800db50:	685b      	ldr	r3, [r3, #4]
 800db52:	685a      	ldr	r2, [r3, #4]
 800db54:	693b      	ldr	r3, [r7, #16]
 800db56:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	8ada      	ldrh	r2, [r3, #22]
 800db5c:	693b      	ldr	r3, [r7, #16]
 800db5e:	68dc      	ldr	r4, [r3, #12]
 800db60:	4610      	mov	r0, r2
 800db62:	f7fa fa8b 	bl	800807c <lwip_htons>
 800db66:	4603      	mov	r3, r0
 800db68:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	8b1a      	ldrh	r2, [r3, #24]
 800db6e:	693b      	ldr	r3, [r7, #16]
 800db70:	68dc      	ldr	r4, [r3, #12]
 800db72:	4610      	mov	r0, r2
 800db74:	f7fa fa82 	bl	800807c <lwip_htons>
 800db78:	4603      	mov	r3, r0
 800db7a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800db7c:	693b      	ldr	r3, [r7, #16]
 800db7e:	68dc      	ldr	r4, [r3, #12]
 800db80:	6838      	ldr	r0, [r7, #0]
 800db82:	f7fa fa88 	bl	8008096 <lwip_htonl>
 800db86:	4603      	mov	r3, r0
 800db88:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800db8a:	7dfb      	ldrb	r3, [r7, #23]
 800db8c:	089b      	lsrs	r3, r3, #2
 800db8e:	b2db      	uxtb	r3, r3
 800db90:	b29b      	uxth	r3, r3
 800db92:	3305      	adds	r3, #5
 800db94:	b29b      	uxth	r3, r3
 800db96:	031b      	lsls	r3, r3, #12
 800db98:	b29a      	uxth	r2, r3
 800db9a:	79fb      	ldrb	r3, [r7, #7]
 800db9c:	b29b      	uxth	r3, r3
 800db9e:	4313      	orrs	r3, r2
 800dba0:	b29a      	uxth	r2, r3
 800dba2:	693b      	ldr	r3, [r7, #16]
 800dba4:	68dc      	ldr	r4, [r3, #12]
 800dba6:	4610      	mov	r0, r2
 800dba8:	f7fa fa68 	bl	800807c <lwip_htons>
 800dbac:	4603      	mov	r3, r0
 800dbae:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800dbb0:	693b      	ldr	r3, [r7, #16]
 800dbb2:	68db      	ldr	r3, [r3, #12]
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	749a      	strb	r2, [r3, #18]
 800dbb8:	2200      	movs	r2, #0
 800dbba:	74da      	strb	r2, [r3, #19]
  return seg;
 800dbbc:	693b      	ldr	r3, [r7, #16]
}
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	371c      	adds	r7, #28
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd90      	pop	{r4, r7, pc}
 800dbc6:	bf00      	nop
 800dbc8:	0801a5d4 	.word	0x0801a5d4
 800dbcc:	0801a660 	.word	0x0801a660
 800dbd0:	0801a638 	.word	0x0801a638

0800dbd4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b08a      	sub	sp, #40	; 0x28
 800dbd8:	af02      	add	r7, sp, #8
 800dbda:	6078      	str	r0, [r7, #4]
 800dbdc:	460b      	mov	r3, r1
 800dbde:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800dbe8:	78fb      	ldrb	r3, [r7, #3]
 800dbea:	f003 0303 	and.w	r3, r3, #3
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d106      	bne.n	800dc00 <tcp_enqueue_flags+0x2c>
 800dbf2:	4b6f      	ldr	r3, [pc, #444]	; (800ddb0 <tcp_enqueue_flags+0x1dc>)
 800dbf4:	f240 321b 	movw	r2, #795	; 0x31b
 800dbf8:	496e      	ldr	r1, [pc, #440]	; (800ddb4 <tcp_enqueue_flags+0x1e0>)
 800dbfa:	486f      	ldr	r0, [pc, #444]	; (800ddb8 <tcp_enqueue_flags+0x1e4>)
 800dbfc:	f00a fb92 	bl	8018324 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dc06:	2b08      	cmp	r3, #8
 800dc08:	d806      	bhi.n	800dc18 <tcp_enqueue_flags+0x44>
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dc10:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800dc14:	4293      	cmp	r3, r2
 800dc16:	d90e      	bls.n	800dc36 <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 800dc18:	78fb      	ldrb	r3, [r7, #3]
 800dc1a:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d109      	bne.n	800dc36 <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	7e9b      	ldrb	r3, [r3, #26]
 800dc26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dc2a:	b2da      	uxtb	r2, r3
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800dc30:	f04f 33ff 	mov.w	r3, #4294967295
 800dc34:	e0b7      	b.n	800dda6 <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 800dc36:	78fb      	ldrb	r3, [r7, #3]
 800dc38:	f003 0302 	and.w	r3, r3, #2
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d001      	beq.n	800dc44 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 800dc40:	2301      	movs	r3, #1
 800dc42:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800dc44:	7ffb      	ldrb	r3, [r7, #31]
 800dc46:	009b      	lsls	r3, r3, #2
 800dc48:	b2db      	uxtb	r3, r3
 800dc4a:	f003 0304 	and.w	r3, r3, #4
 800dc4e:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800dc50:	7dfb      	ldrb	r3, [r7, #23]
 800dc52:	b29b      	uxth	r3, r3
 800dc54:	2200      	movs	r2, #0
 800dc56:	4619      	mov	r1, r3
 800dc58:	2000      	movs	r0, #0
 800dc5a:	f7fb fb5f 	bl	800931c <pbuf_alloc>
 800dc5e:	6138      	str	r0, [r7, #16]
 800dc60:	693b      	ldr	r3, [r7, #16]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d109      	bne.n	800dc7a <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	7e9b      	ldrb	r3, [r3, #26]
 800dc6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dc6e:	b2da      	uxtb	r2, r3
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800dc74:	f04f 33ff 	mov.w	r3, #4294967295
 800dc78:	e095      	b.n	800dda6 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800dc7a:	693b      	ldr	r3, [r7, #16]
 800dc7c:	895a      	ldrh	r2, [r3, #10]
 800dc7e:	7dfb      	ldrb	r3, [r7, #23]
 800dc80:	b29b      	uxth	r3, r3
 800dc82:	429a      	cmp	r2, r3
 800dc84:	d206      	bcs.n	800dc94 <tcp_enqueue_flags+0xc0>
 800dc86:	4b4a      	ldr	r3, [pc, #296]	; (800ddb0 <tcp_enqueue_flags+0x1dc>)
 800dc88:	f240 3241 	movw	r2, #833	; 0x341
 800dc8c:	494b      	ldr	r1, [pc, #300]	; (800ddbc <tcp_enqueue_flags+0x1e8>)
 800dc8e:	484a      	ldr	r0, [pc, #296]	; (800ddb8 <tcp_enqueue_flags+0x1e4>)
 800dc90:	f00a fb48 	bl	8018324 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800dc98:	78fa      	ldrb	r2, [r7, #3]
 800dc9a:	7ffb      	ldrb	r3, [r7, #31]
 800dc9c:	9300      	str	r3, [sp, #0]
 800dc9e:	460b      	mov	r3, r1
 800dca0:	6939      	ldr	r1, [r7, #16]
 800dca2:	6878      	ldr	r0, [r7, #4]
 800dca4:	f7ff ff0e 	bl	800dac4 <tcp_create_segment>
 800dca8:	60f8      	str	r0, [r7, #12]
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d109      	bne.n	800dcc4 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	7e9b      	ldrb	r3, [r3, #26]
 800dcb4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dcb8:	b2da      	uxtb	r2, r3
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800dcbe:	f04f 33ff 	mov.w	r3, #4294967295
 800dcc2:	e070      	b.n	800dda6 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	68db      	ldr	r3, [r3, #12]
 800dcc8:	f003 0303 	and.w	r3, r3, #3
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d006      	beq.n	800dcde <tcp_enqueue_flags+0x10a>
 800dcd0:	4b37      	ldr	r3, [pc, #220]	; (800ddb0 <tcp_enqueue_flags+0x1dc>)
 800dcd2:	f240 3249 	movw	r2, #841	; 0x349
 800dcd6:	493a      	ldr	r1, [pc, #232]	; (800ddc0 <tcp_enqueue_flags+0x1ec>)
 800dcd8:	4837      	ldr	r0, [pc, #220]	; (800ddb8 <tcp_enqueue_flags+0x1e4>)
 800dcda:	f00a fb23 	bl	8018324 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	891b      	ldrh	r3, [r3, #8]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d006      	beq.n	800dcf4 <tcp_enqueue_flags+0x120>
 800dce6:	4b32      	ldr	r3, [pc, #200]	; (800ddb0 <tcp_enqueue_flags+0x1dc>)
 800dce8:	f240 324a 	movw	r2, #842	; 0x34a
 800dcec:	4935      	ldr	r1, [pc, #212]	; (800ddc4 <tcp_enqueue_flags+0x1f0>)
 800dcee:	4832      	ldr	r0, [pc, #200]	; (800ddb8 <tcp_enqueue_flags+0x1e4>)
 800dcf0:	f00a fb18 	bl	8018324 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d103      	bne.n	800dd04 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	68fa      	ldr	r2, [r7, #12]
 800dd00:	669a      	str	r2, [r3, #104]	; 0x68
 800dd02:	e00d      	b.n	800dd20 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dd08:	61bb      	str	r3, [r7, #24]
 800dd0a:	e002      	b.n	800dd12 <tcp_enqueue_flags+0x13e>
 800dd0c:	69bb      	ldr	r3, [r7, #24]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	61bb      	str	r3, [r7, #24]
 800dd12:	69bb      	ldr	r3, [r7, #24]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d1f8      	bne.n	800dd0c <tcp_enqueue_flags+0x138>
    useg->next = seg;
 800dd1a:	69bb      	ldr	r3, [r7, #24]
 800dd1c:	68fa      	ldr	r2, [r7, #12]
 800dd1e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	2200      	movs	r2, #0
 800dd24:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800dd28:	78fb      	ldrb	r3, [r7, #3]
 800dd2a:	f003 0302 	and.w	r3, r3, #2
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d104      	bne.n	800dd3c <tcp_enqueue_flags+0x168>
 800dd32:	78fb      	ldrb	r3, [r7, #3]
 800dd34:	f003 0301 	and.w	r3, r3, #1
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d004      	beq.n	800dd46 <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd40:	1c5a      	adds	r2, r3, #1
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800dd46:	78fb      	ldrb	r3, [r7, #3]
 800dd48:	f003 0301 	and.w	r3, r3, #1
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d006      	beq.n	800dd5e <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	7e9b      	ldrb	r3, [r3, #26]
 800dd54:	f043 0320 	orr.w	r3, r3, #32
 800dd58:	b2da      	uxtb	r2, r3
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	685b      	ldr	r3, [r3, #4]
 800dd62:	4618      	mov	r0, r3
 800dd64:	f7fb fee6 	bl	8009b34 <pbuf_clen>
 800dd68:	4603      	mov	r3, r0
 800dd6a:	461a      	mov	r2, r3
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dd72:	4413      	add	r3, r2
 800dd74:	b29a      	uxth	r2, r3
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d00e      	beq.n	800dda4 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d10a      	bne.n	800dda4 <tcp_enqueue_flags+0x1d0>
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d106      	bne.n	800dda4 <tcp_enqueue_flags+0x1d0>
 800dd96:	4b06      	ldr	r3, [pc, #24]	; (800ddb0 <tcp_enqueue_flags+0x1dc>)
 800dd98:	f240 326d 	movw	r2, #877	; 0x36d
 800dd9c:	490a      	ldr	r1, [pc, #40]	; (800ddc8 <tcp_enqueue_flags+0x1f4>)
 800dd9e:	4806      	ldr	r0, [pc, #24]	; (800ddb8 <tcp_enqueue_flags+0x1e4>)
 800dda0:	f00a fac0 	bl	8018324 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800dda4:	2300      	movs	r3, #0
}
 800dda6:	4618      	mov	r0, r3
 800dda8:	3720      	adds	r7, #32
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	bd80      	pop	{r7, pc}
 800ddae:	bf00      	nop
 800ddb0:	0801a5d4 	.word	0x0801a5d4
 800ddb4:	0801a8d8 	.word	0x0801a8d8
 800ddb8:	0801a638 	.word	0x0801a638
 800ddbc:	0801a930 	.word	0x0801a930
 800ddc0:	0801a96c 	.word	0x0801a96c
 800ddc4:	0801a984 	.word	0x0801a984
 800ddc8:	0801a9b0 	.word	0x0801a9b0

0800ddcc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800ddcc:	b590      	push	{r4, r7, lr}
 800ddce:	b08b      	sub	sp, #44	; 0x2c
 800ddd0:	af04      	add	r7, sp, #16
 800ddd2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800ddd8:	7dbb      	ldrb	r3, [r7, #22]
 800ddda:	b29c      	uxth	r4, r3
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dde0:	4618      	mov	r0, r3
 800dde2:	f7fa f958 	bl	8008096 <lwip_htonl>
 800dde6:	4603      	mov	r3, r0
 800dde8:	2200      	movs	r2, #0
 800ddea:	4621      	mov	r1, r4
 800ddec:	6878      	ldr	r0, [r7, #4]
 800ddee:	f7ff fdad 	bl	800d94c <tcp_output_alloc_header>
 800ddf2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ddf4:	693b      	ldr	r3, [r7, #16]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d109      	bne.n	800de0e <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	7e9b      	ldrb	r3, [r3, #26]
 800ddfe:	f043 0303 	orr.w	r3, r3, #3
 800de02:	b2da      	uxtb	r2, r3
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800de08:	f06f 0301 	mvn.w	r3, #1
 800de0c:	e036      	b.n	800de7c <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	3304      	adds	r3, #4
 800de12:	4618      	mov	r0, r3
 800de14:	f004 f8e0 	bl	8011fd8 <ip4_route>
 800de18:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d102      	bne.n	800de26 <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 800de20:	23fc      	movs	r3, #252	; 0xfc
 800de22:	75fb      	strb	r3, [r7, #23]
 800de24:	e012      	b.n	800de4c <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 800de26:	6879      	ldr	r1, [r7, #4]
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	1d18      	adds	r0, r3, #4
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	7a9c      	ldrb	r4, [r3, #10]
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	7a5b      	ldrb	r3, [r3, #9]
 800de34:	68fa      	ldr	r2, [r7, #12]
 800de36:	9202      	str	r2, [sp, #8]
 800de38:	2206      	movs	r2, #6
 800de3a:	9201      	str	r2, [sp, #4]
 800de3c:	9300      	str	r3, [sp, #0]
 800de3e:	4623      	mov	r3, r4
 800de40:	4602      	mov	r2, r0
 800de42:	6938      	ldr	r0, [r7, #16]
 800de44:	f004 fade 	bl	8012404 <ip4_output_if>
 800de48:	4603      	mov	r3, r0
 800de4a:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800de4c:	6938      	ldr	r0, [r7, #16]
 800de4e:	f7fb fdd7 	bl	8009a00 <pbuf_free>

  if (err != ERR_OK) {
 800de52:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d007      	beq.n	800de6a <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	7e9b      	ldrb	r3, [r3, #26]
 800de5e:	f043 0303 	orr.w	r3, r3, #3
 800de62:	b2da      	uxtb	r2, r3
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	769a      	strb	r2, [r3, #26]
 800de68:	e006      	b.n	800de78 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	7e9b      	ldrb	r3, [r3, #26]
 800de6e:	f023 0303 	bic.w	r3, r3, #3
 800de72:	b2da      	uxtb	r2, r3
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	769a      	strb	r2, [r3, #26]
  }

  return err;
 800de78:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800de7c:	4618      	mov	r0, r3
 800de7e:	371c      	adds	r7, #28
 800de80:	46bd      	mov	sp, r7
 800de82:	bd90      	pop	{r4, r7, pc}

0800de84 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800de84:	b5b0      	push	{r4, r5, r7, lr}
 800de86:	b08a      	sub	sp, #40	; 0x28
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	7d1b      	ldrb	r3, [r3, #20]
 800de90:	2b01      	cmp	r3, #1
 800de92:	d106      	bne.n	800dea2 <tcp_output+0x1e>
 800de94:	4b9b      	ldr	r3, [pc, #620]	; (800e104 <tcp_output+0x280>)
 800de96:	f240 32ed 	movw	r2, #1005	; 0x3ed
 800de9a:	499b      	ldr	r1, [pc, #620]	; (800e108 <tcp_output+0x284>)
 800de9c:	489b      	ldr	r0, [pc, #620]	; (800e10c <tcp_output+0x288>)
 800de9e:	f00a fa41 	bl	8018324 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800dea2:	4b9b      	ldr	r3, [pc, #620]	; (800e110 <tcp_output+0x28c>)
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	687a      	ldr	r2, [r7, #4]
 800dea8:	429a      	cmp	r2, r3
 800deaa:	d101      	bne.n	800deb0 <tcp_output+0x2c>
    return ERR_OK;
 800deac:	2300      	movs	r3, #0
 800deae:	e1cf      	b.n	800e250 <tcp_output+0x3cc>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800debc:	429a      	cmp	r2, r3
 800debe:	d203      	bcs.n	800dec8 <tcp_output+0x44>
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dec6:	e002      	b.n	800dece <tcp_output+0x4a>
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800dece:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ded4:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	7e9b      	ldrb	r3, [r3, #26]
 800deda:	f003 0302 	and.w	r3, r3, #2
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d017      	beq.n	800df12 <tcp_output+0x8e>
 800dee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d00f      	beq.n	800df08 <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800dee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deea:	68db      	ldr	r3, [r3, #12]
 800deec:	685b      	ldr	r3, [r3, #4]
 800deee:	4618      	mov	r0, r3
 800def0:	f7fa f8d1 	bl	8008096 <lwip_htonl>
 800def4:	4602      	mov	r2, r0
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800defa:	1ad3      	subs	r3, r2, r3
 800defc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800defe:	8912      	ldrh	r2, [r2, #8]
 800df00:	4413      	add	r3, r2
     (seg == NULL ||
 800df02:	69ba      	ldr	r2, [r7, #24]
 800df04:	429a      	cmp	r2, r3
 800df06:	d204      	bcs.n	800df12 <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 800df08:	6878      	ldr	r0, [r7, #4]
 800df0a:	f7ff ff5f 	bl	800ddcc <tcp_send_empty_ack>
 800df0e:	4603      	mov	r3, r0
 800df10:	e19e      	b.n	800e250 <tcp_output+0x3cc>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df16:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800df18:	6a3b      	ldr	r3, [r7, #32]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d007      	beq.n	800df2e <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 800df1e:	e002      	b.n	800df26 <tcp_output+0xa2>
 800df20:	6a3b      	ldr	r3, [r7, #32]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	623b      	str	r3, [r7, #32]
 800df26:	6a3b      	ldr	r3, [r7, #32]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d1f8      	bne.n	800df20 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	3304      	adds	r3, #4
 800df32:	4618      	mov	r0, r3
 800df34:	f004 f850 	bl	8011fd8 <ip4_route>
 800df38:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800df3a:	697b      	ldr	r3, [r7, #20]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d102      	bne.n	800df46 <tcp_output+0xc2>
    return ERR_RTE;
 800df40:	f06f 0303 	mvn.w	r3, #3
 800df44:	e184      	b.n	800e250 <tcp_output+0x3cc>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d003      	beq.n	800df54 <tcp_output+0xd0>
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d111      	bne.n	800df78 <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800df54:	697b      	ldr	r3, [r7, #20]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d002      	beq.n	800df60 <tcp_output+0xdc>
 800df5a:	697b      	ldr	r3, [r7, #20]
 800df5c:	3304      	adds	r3, #4
 800df5e:	e000      	b.n	800df62 <tcp_output+0xde>
 800df60:	2300      	movs	r3, #0
 800df62:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800df64:	693b      	ldr	r3, [r7, #16]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d102      	bne.n	800df70 <tcp_output+0xec>
      return ERR_RTE;
 800df6a:	f06f 0303 	mvn.w	r3, #3
 800df6e:	e16f      	b.n	800e250 <tcp_output+0x3cc>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800df70:	693b      	ldr	r3, [r7, #16]
 800df72:	681a      	ldr	r2, [r3, #0]
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 800df78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	f000 813e 	beq.w	800e1fc <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800df80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df82:	68db      	ldr	r3, [r3, #12]
 800df84:	685b      	ldr	r3, [r3, #4]
 800df86:	4618      	mov	r0, r3
 800df88:	f7fa f885 	bl	8008096 <lwip_htonl>
 800df8c:	4602      	mov	r2, r0
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df92:	1ad3      	subs	r3, r2, r3
 800df94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df96:	8912      	ldrh	r2, [r2, #8]
 800df98:	4413      	add	r3, r2
  if (seg != NULL &&
 800df9a:	69ba      	ldr	r2, [r7, #24]
 800df9c:	429a      	cmp	r2, r3
 800df9e:	f080 812d 	bcs.w	800e1fc <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800dfa2:	69bb      	ldr	r3, [r7, #24]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	f000 8129 	beq.w	800e1fc <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dfb0:	461a      	mov	r2, r3
 800dfb2:	69bb      	ldr	r3, [r7, #24]
 800dfb4:	4293      	cmp	r3, r2
 800dfb6:	f040 8121 	bne.w	800e1fc <tcp_output+0x378>
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	f040 811c 	bne.w	800e1fc <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	f040 812b 	bne.w	800e226 <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	2201      	movs	r2, #1
 800dfdc:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 800dfe0:	e121      	b.n	800e226 <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800dfe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfe4:	68db      	ldr	r3, [r3, #12]
 800dfe6:	899b      	ldrh	r3, [r3, #12]
 800dfe8:	b29b      	uxth	r3, r3
 800dfea:	4618      	mov	r0, r3
 800dfec:	f7fa f846 	bl	800807c <lwip_htons>
 800dff0:	4603      	mov	r3, r0
 800dff2:	f003 0304 	and.w	r3, r3, #4
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d006      	beq.n	800e008 <tcp_output+0x184>
 800dffa:	4b42      	ldr	r3, [pc, #264]	; (800e104 <tcp_output+0x280>)
 800dffc:	f240 4246 	movw	r2, #1094	; 0x446
 800e000:	4944      	ldr	r1, [pc, #272]	; (800e114 <tcp_output+0x290>)
 800e002:	4842      	ldr	r0, [pc, #264]	; (800e10c <tcp_output+0x288>)
 800e004:	f00a f98e 	bl	8018324 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d01f      	beq.n	800e050 <tcp_output+0x1cc>
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	7e9b      	ldrb	r3, [r3, #26]
 800e014:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d119      	bne.n	800e050 <tcp_output+0x1cc>
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e020:	2b00      	cmp	r3, #0
 800e022:	d00b      	beq.n	800e03c <tcp_output+0x1b8>
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d110      	bne.n	800e050 <tcp_output+0x1cc>
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e032:	891a      	ldrh	r2, [r3, #8]
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e038:	429a      	cmp	r2, r3
 800e03a:	d209      	bcs.n	800e050 <tcp_output+0x1cc>
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e042:	2b00      	cmp	r3, #0
 800e044:	d004      	beq.n	800e050 <tcp_output+0x1cc>
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e04c:	2b08      	cmp	r3, #8
 800e04e:	d901      	bls.n	800e054 <tcp_output+0x1d0>
 800e050:	2301      	movs	r3, #1
 800e052:	e000      	b.n	800e056 <tcp_output+0x1d2>
 800e054:	2300      	movs	r3, #0
 800e056:	2b00      	cmp	r3, #0
 800e058:	d106      	bne.n	800e068 <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	7e9b      	ldrb	r3, [r3, #26]
 800e05e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e062:	2b00      	cmp	r3, #0
 800e064:	f000 80e1 	beq.w	800e22a <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	7d1b      	ldrb	r3, [r3, #20]
 800e06c:	2b02      	cmp	r3, #2
 800e06e:	d00d      	beq.n	800e08c <tcp_output+0x208>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800e070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e072:	68db      	ldr	r3, [r3, #12]
 800e074:	899b      	ldrh	r3, [r3, #12]
 800e076:	b29c      	uxth	r4, r3
 800e078:	2010      	movs	r0, #16
 800e07a:	f7f9 ffff 	bl	800807c <lwip_htons>
 800e07e:	4603      	mov	r3, r0
 800e080:	461a      	mov	r2, r3
 800e082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e084:	68db      	ldr	r3, [r3, #12]
 800e086:	4322      	orrs	r2, r4
 800e088:	b292      	uxth	r2, r2
 800e08a:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 800e08c:	697a      	ldr	r2, [r7, #20]
 800e08e:	6879      	ldr	r1, [r7, #4]
 800e090:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e092:	f000 f8e1 	bl	800e258 <tcp_output_segment>
 800e096:	4603      	mov	r3, r0
 800e098:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800e09a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d009      	beq.n	800e0b6 <tcp_output+0x232>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	7e9b      	ldrb	r3, [r3, #26]
 800e0a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e0aa:	b2da      	uxtb	r2, r3
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	769a      	strb	r2, [r3, #26]
      return err;
 800e0b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0b4:	e0cc      	b.n	800e250 <tcp_output+0x3cc>
    }
    pcb->unsent = seg->next;
 800e0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0b8:	681a      	ldr	r2, [r3, #0]
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	7d1b      	ldrb	r3, [r3, #20]
 800e0c2:	2b02      	cmp	r3, #2
 800e0c4:	d006      	beq.n	800e0d4 <tcp_output+0x250>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	7e9b      	ldrb	r3, [r3, #26]
 800e0ca:	f023 0303 	bic.w	r3, r3, #3
 800e0ce:	b2da      	uxtb	r2, r3
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800e0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0d6:	68db      	ldr	r3, [r3, #12]
 800e0d8:	685b      	ldr	r3, [r3, #4]
 800e0da:	4618      	mov	r0, r3
 800e0dc:	f7f9 ffdb 	bl	8008096 <lwip_htonl>
 800e0e0:	4604      	mov	r4, r0
 800e0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0e4:	891b      	ldrh	r3, [r3, #8]
 800e0e6:	461d      	mov	r5, r3
 800e0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ea:	68db      	ldr	r3, [r3, #12]
 800e0ec:	899b      	ldrh	r3, [r3, #12]
 800e0ee:	b29b      	uxth	r3, r3
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	f7f9 ffc3 	bl	800807c <lwip_htons>
 800e0f6:	4603      	mov	r3, r0
 800e0f8:	f003 0303 	and.w	r3, r3, #3
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d00b      	beq.n	800e118 <tcp_output+0x294>
 800e100:	2301      	movs	r3, #1
 800e102:	e00a      	b.n	800e11a <tcp_output+0x296>
 800e104:	0801a5d4 	.word	0x0801a5d4
 800e108:	0801a9d8 	.word	0x0801a9d8
 800e10c:	0801a638 	.word	0x0801a638
 800e110:	2000b8d8 	.word	0x2000b8d8
 800e114:	0801aa00 	.word	0x0801aa00
 800e118:	2300      	movs	r3, #0
 800e11a:	442b      	add	r3, r5
 800e11c:	4423      	add	r3, r4
 800e11e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e124:	68bb      	ldr	r3, [r7, #8]
 800e126:	1ad3      	subs	r3, r2, r3
 800e128:	2b00      	cmp	r3, #0
 800e12a:	da02      	bge.n	800e132 <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	68ba      	ldr	r2, [r7, #8]
 800e130:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800e132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e134:	891b      	ldrh	r3, [r3, #8]
 800e136:	461c      	mov	r4, r3
 800e138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e13a:	68db      	ldr	r3, [r3, #12]
 800e13c:	899b      	ldrh	r3, [r3, #12]
 800e13e:	b29b      	uxth	r3, r3
 800e140:	4618      	mov	r0, r3
 800e142:	f7f9 ff9b 	bl	800807c <lwip_htons>
 800e146:	4603      	mov	r3, r0
 800e148:	f003 0303 	and.w	r3, r3, #3
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d001      	beq.n	800e154 <tcp_output+0x2d0>
 800e150:	2301      	movs	r3, #1
 800e152:	e000      	b.n	800e156 <tcp_output+0x2d2>
 800e154:	2300      	movs	r3, #0
 800e156:	4423      	add	r3, r4
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d049      	beq.n	800e1f0 <tcp_output+0x36c>
      seg->next = NULL;
 800e15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e15e:	2200      	movs	r2, #0
 800e160:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e166:	2b00      	cmp	r3, #0
 800e168:	d105      	bne.n	800e176 <tcp_output+0x2f2>
        pcb->unacked = seg;
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e16e:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 800e170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e172:	623b      	str	r3, [r7, #32]
 800e174:	e03f      	b.n	800e1f6 <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800e176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e178:	68db      	ldr	r3, [r3, #12]
 800e17a:	685b      	ldr	r3, [r3, #4]
 800e17c:	4618      	mov	r0, r3
 800e17e:	f7f9 ff8a 	bl	8008096 <lwip_htonl>
 800e182:	4604      	mov	r4, r0
 800e184:	6a3b      	ldr	r3, [r7, #32]
 800e186:	68db      	ldr	r3, [r3, #12]
 800e188:	685b      	ldr	r3, [r3, #4]
 800e18a:	4618      	mov	r0, r3
 800e18c:	f7f9 ff83 	bl	8008096 <lwip_htonl>
 800e190:	4603      	mov	r3, r0
 800e192:	1ae3      	subs	r3, r4, r3
 800e194:	2b00      	cmp	r3, #0
 800e196:	da24      	bge.n	800e1e2 <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	336c      	adds	r3, #108	; 0x6c
 800e19c:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e19e:	e002      	b.n	800e1a6 <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 800e1a0:	69fb      	ldr	r3, [r7, #28]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800e1a6:	69fb      	ldr	r3, [r7, #28]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d011      	beq.n	800e1d2 <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e1ae:	69fb      	ldr	r3, [r7, #28]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	68db      	ldr	r3, [r3, #12]
 800e1b4:	685b      	ldr	r3, [r3, #4]
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	f7f9 ff6d 	bl	8008096 <lwip_htonl>
 800e1bc:	4604      	mov	r4, r0
 800e1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1c0:	68db      	ldr	r3, [r3, #12]
 800e1c2:	685b      	ldr	r3, [r3, #4]
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	f7f9 ff66 	bl	8008096 <lwip_htonl>
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	dbe6      	blt.n	800e1a0 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 800e1d2:	69fb      	ldr	r3, [r7, #28]
 800e1d4:	681a      	ldr	r2, [r3, #0]
 800e1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1d8:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800e1da:	69fb      	ldr	r3, [r7, #28]
 800e1dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1de:	601a      	str	r2, [r3, #0]
 800e1e0:	e009      	b.n	800e1f6 <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800e1e2:	6a3b      	ldr	r3, [r7, #32]
 800e1e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1e6:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800e1e8:	6a3b      	ldr	r3, [r7, #32]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	623b      	str	r3, [r7, #32]
 800e1ee:	e002      	b.n	800e1f6 <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800e1f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1f2:	f7fc fea6 	bl	800af42 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e1fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800e1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d015      	beq.n	800e22e <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800e202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e204:	68db      	ldr	r3, [r3, #12]
 800e206:	685b      	ldr	r3, [r3, #4]
 800e208:	4618      	mov	r0, r3
 800e20a:	f7f9 ff44 	bl	8008096 <lwip_htonl>
 800e20e:	4602      	mov	r2, r0
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e214:	1ad3      	subs	r3, r2, r3
 800e216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e218:	8912      	ldrh	r2, [r2, #8]
 800e21a:	4413      	add	r3, r2
  while (seg != NULL &&
 800e21c:	69ba      	ldr	r2, [r7, #24]
 800e21e:	429a      	cmp	r2, r3
 800e220:	f4bf aedf 	bcs.w	800dfe2 <tcp_output+0x15e>
  }
output_done:
 800e224:	e003      	b.n	800e22e <tcp_output+0x3aa>
    goto output_done;
 800e226:	bf00      	nop
 800e228:	e002      	b.n	800e230 <tcp_output+0x3ac>
      break;
 800e22a:	bf00      	nop
 800e22c:	e000      	b.n	800e230 <tcp_output+0x3ac>
output_done:
 800e22e:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e234:	2b00      	cmp	r3, #0
 800e236:	d103      	bne.n	800e240 <tcp_output+0x3bc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	2200      	movs	r2, #0
 800e23c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	7e9b      	ldrb	r3, [r3, #26]
 800e244:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e248:	b2da      	uxtb	r2, r3
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 800e24e:	2300      	movs	r3, #0
}
 800e250:	4618      	mov	r0, r3
 800e252:	3728      	adds	r7, #40	; 0x28
 800e254:	46bd      	mov	sp, r7
 800e256:	bdb0      	pop	{r4, r5, r7, pc}

0800e258 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800e258:	b5b0      	push	{r4, r5, r7, lr}
 800e25a:	b08c      	sub	sp, #48	; 0x30
 800e25c:	af04      	add	r7, sp, #16
 800e25e:	60f8      	str	r0, [r7, #12]
 800e260:	60b9      	str	r1, [r7, #8]
 800e262:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	685b      	ldr	r3, [r3, #4]
 800e268:	89db      	ldrh	r3, [r3, #14]
 800e26a:	2b01      	cmp	r3, #1
 800e26c:	d001      	beq.n	800e272 <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 800e26e:	2300      	movs	r3, #0
 800e270:	e08b      	b.n	800e38a <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800e272:	68bb      	ldr	r3, [r7, #8]
 800e274:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	68dc      	ldr	r4, [r3, #12]
 800e27a:	4610      	mov	r0, r2
 800e27c:	f7f9 ff0b 	bl	8008096 <lwip_htonl>
 800e280:	4603      	mov	r3, r0
 800e282:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e284:	68bb      	ldr	r3, [r7, #8]
 800e286:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	68dc      	ldr	r4, [r3, #12]
 800e28c:	4610      	mov	r0, r2
 800e28e:	f7f9 fef5 	bl	800807c <lwip_htons>
 800e292:	4603      	mov	r3, r0
 800e294:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e296:	68bb      	ldr	r3, [r7, #8]
 800e298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e29a:	68ba      	ldr	r2, [r7, #8]
 800e29c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800e29e:	441a      	add	r2, r3
 800e2a0:	68bb      	ldr	r3, [r7, #8]
 800e2a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	68db      	ldr	r3, [r3, #12]
 800e2a8:	3314      	adds	r3, #20
 800e2aa:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	7a9b      	ldrb	r3, [r3, #10]
 800e2b0:	f003 0301 	and.w	r3, r3, #1
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d014      	beq.n	800e2e2 <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800e2b8:	68bb      	ldr	r3, [r7, #8]
 800e2ba:	3304      	adds	r3, #4
 800e2bc:	4619      	mov	r1, r3
 800e2be:	f44f 7006 	mov.w	r0, #536	; 0x218
 800e2c2:	f7fd f8a7 	bl	800b414 <tcp_eff_send_mss_impl>
 800e2c6:	4603      	mov	r3, r0
 800e2c8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800e2ca:	8b7b      	ldrh	r3, [r7, #26]
 800e2cc:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	f7f9 fee0 	bl	8008096 <lwip_htonl>
 800e2d6:	4602      	mov	r2, r0
 800e2d8:	69fb      	ldr	r3, [r7, #28]
 800e2da:	601a      	str	r2, [r3, #0]
    opts += 1;
 800e2dc:	69fb      	ldr	r3, [r7, #28]
 800e2de:	3304      	adds	r3, #4
 800e2e0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800e2e2:	68bb      	ldr	r3, [r7, #8]
 800e2e4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	da02      	bge.n	800e2f2 <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 800e2ec:	68bb      	ldr	r3, [r7, #8]
 800e2ee:	2200      	movs	r2, #0
 800e2f0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800e2f2:	68bb      	ldr	r3, [r7, #8]
 800e2f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d10c      	bne.n	800e314 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 800e2fa:	4b26      	ldr	r3, [pc, #152]	; (800e394 <tcp_output_segment+0x13c>)
 800e2fc:	681a      	ldr	r2, [r3, #0]
 800e2fe:	68bb      	ldr	r3, [r7, #8]
 800e300:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	68db      	ldr	r3, [r3, #12]
 800e306:	685b      	ldr	r3, [r3, #4]
 800e308:	4618      	mov	r0, r3
 800e30a:	f7f9 fec4 	bl	8008096 <lwip_htonl>
 800e30e:	4602      	mov	r2, r0
 800e310:	68bb      	ldr	r3, [r7, #8]
 800e312:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	68db      	ldr	r3, [r3, #12]
 800e318:	461a      	mov	r2, r3
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	685b      	ldr	r3, [r3, #4]
 800e31e:	685b      	ldr	r3, [r3, #4]
 800e320:	1ad3      	subs	r3, r2, r3
 800e322:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	685b      	ldr	r3, [r3, #4]
 800e328:	8959      	ldrh	r1, [r3, #10]
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	685b      	ldr	r3, [r3, #4]
 800e32e:	8b3a      	ldrh	r2, [r7, #24]
 800e330:	1a8a      	subs	r2, r1, r2
 800e332:	b292      	uxth	r2, r2
 800e334:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	685b      	ldr	r3, [r3, #4]
 800e33a:	8919      	ldrh	r1, [r3, #8]
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	685b      	ldr	r3, [r3, #4]
 800e340:	8b3a      	ldrh	r2, [r7, #24]
 800e342:	1a8a      	subs	r2, r1, r2
 800e344:	b292      	uxth	r2, r2
 800e346:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	685b      	ldr	r3, [r3, #4]
 800e34c:	68fa      	ldr	r2, [r7, #12]
 800e34e:	68d2      	ldr	r2, [r2, #12]
 800e350:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	68db      	ldr	r3, [r3, #12]
 800e356:	2200      	movs	r2, #0
 800e358:	741a      	strb	r2, [r3, #16]
 800e35a:	2200      	movs	r2, #0
 800e35c:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	6858      	ldr	r0, [r3, #4]
 800e362:	68b9      	ldr	r1, [r7, #8]
 800e364:	68bb      	ldr	r3, [r7, #8]
 800e366:	1d1c      	adds	r4, r3, #4
 800e368:	68bb      	ldr	r3, [r7, #8]
 800e36a:	7a9d      	ldrb	r5, [r3, #10]
 800e36c:	68bb      	ldr	r3, [r7, #8]
 800e36e:	7a5b      	ldrb	r3, [r3, #9]
 800e370:	687a      	ldr	r2, [r7, #4]
 800e372:	9202      	str	r2, [sp, #8]
 800e374:	2206      	movs	r2, #6
 800e376:	9201      	str	r2, [sp, #4]
 800e378:	9300      	str	r3, [sp, #0]
 800e37a:	462b      	mov	r3, r5
 800e37c:	4622      	mov	r2, r4
 800e37e:	f004 f841 	bl	8012404 <ip4_output_if>
 800e382:	4603      	mov	r3, r0
 800e384:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 800e386:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e38a:	4618      	mov	r0, r3
 800e38c:	3720      	adds	r7, #32
 800e38e:	46bd      	mov	sp, r7
 800e390:	bdb0      	pop	{r4, r5, r7, pc}
 800e392:	bf00      	nop
 800e394:	2000b8c8 	.word	0x2000b8c8

0800e398 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b08c      	sub	sp, #48	; 0x30
 800e39c:	af04      	add	r7, sp, #16
 800e39e:	60f8      	str	r0, [r7, #12]
 800e3a0:	60b9      	str	r1, [r7, #8]
 800e3a2:	607a      	str	r2, [r7, #4]
 800e3a4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	2114      	movs	r1, #20
 800e3aa:	2001      	movs	r0, #1
 800e3ac:	f7fa ffb6 	bl	800931c <pbuf_alloc>
 800e3b0:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 800e3b2:	69fb      	ldr	r3, [r7, #28]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d05b      	beq.n	800e470 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800e3b8:	69fb      	ldr	r3, [r7, #28]
 800e3ba:	895b      	ldrh	r3, [r3, #10]
 800e3bc:	2b13      	cmp	r3, #19
 800e3be:	d806      	bhi.n	800e3ce <tcp_rst+0x36>
 800e3c0:	4b2d      	ldr	r3, [pc, #180]	; (800e478 <tcp_rst+0xe0>)
 800e3c2:	f240 524d 	movw	r2, #1357	; 0x54d
 800e3c6:	492d      	ldr	r1, [pc, #180]	; (800e47c <tcp_rst+0xe4>)
 800e3c8:	482d      	ldr	r0, [pc, #180]	; (800e480 <tcp_rst+0xe8>)
 800e3ca:	f009 ffab 	bl	8018324 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800e3ce:	69fb      	ldr	r3, [r7, #28]
 800e3d0:	685b      	ldr	r3, [r3, #4]
 800e3d2:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 800e3d4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f7f9 fe50 	bl	800807c <lwip_htons>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	461a      	mov	r2, r3
 800e3e0:	69bb      	ldr	r3, [r7, #24]
 800e3e2:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800e3e4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	f7f9 fe48 	bl	800807c <lwip_htons>
 800e3ec:	4603      	mov	r3, r0
 800e3ee:	461a      	mov	r2, r3
 800e3f0:	69bb      	ldr	r3, [r7, #24]
 800e3f2:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800e3f4:	68f8      	ldr	r0, [r7, #12]
 800e3f6:	f7f9 fe4e 	bl	8008096 <lwip_htonl>
 800e3fa:	4602      	mov	r2, r0
 800e3fc:	69bb      	ldr	r3, [r7, #24]
 800e3fe:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800e400:	68b8      	ldr	r0, [r7, #8]
 800e402:	f7f9 fe48 	bl	8008096 <lwip_htonl>
 800e406:	4602      	mov	r2, r0
 800e408:	69bb      	ldr	r3, [r7, #24]
 800e40a:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800e40c:	f245 0014 	movw	r0, #20500	; 0x5014
 800e410:	f7f9 fe34 	bl	800807c <lwip_htons>
 800e414:	4603      	mov	r3, r0
 800e416:	461a      	mov	r2, r3
 800e418:	69bb      	ldr	r3, [r7, #24]
 800e41a:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800e41c:	69bb      	ldr	r3, [r7, #24]
 800e41e:	2200      	movs	r2, #0
 800e420:	f042 0208 	orr.w	r2, r2, #8
 800e424:	739a      	strb	r2, [r3, #14]
 800e426:	2200      	movs	r2, #0
 800e428:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800e42c:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 800e42e:	69bb      	ldr	r3, [r7, #24]
 800e430:	2200      	movs	r2, #0
 800e432:	741a      	strb	r2, [r3, #16]
 800e434:	2200      	movs	r2, #0
 800e436:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 800e438:	69bb      	ldr	r3, [r7, #24]
 800e43a:	2200      	movs	r2, #0
 800e43c:	749a      	strb	r2, [r3, #18]
 800e43e:	2200      	movs	r2, #0
 800e440:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800e442:	6838      	ldr	r0, [r7, #0]
 800e444:	f003 fdc8 	bl	8011fd8 <ip4_route>
 800e448:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 800e44a:	697b      	ldr	r3, [r7, #20]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d00b      	beq.n	800e468 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800e450:	697b      	ldr	r3, [r7, #20]
 800e452:	9302      	str	r3, [sp, #8]
 800e454:	2306      	movs	r3, #6
 800e456:	9301      	str	r3, [sp, #4]
 800e458:	2300      	movs	r3, #0
 800e45a:	9300      	str	r3, [sp, #0]
 800e45c:	23ff      	movs	r3, #255	; 0xff
 800e45e:	683a      	ldr	r2, [r7, #0]
 800e460:	6879      	ldr	r1, [r7, #4]
 800e462:	69f8      	ldr	r0, [r7, #28]
 800e464:	f003 ffce 	bl	8012404 <ip4_output_if>
  }
  pbuf_free(p);
 800e468:	69f8      	ldr	r0, [r7, #28]
 800e46a:	f7fb fac9 	bl	8009a00 <pbuf_free>
 800e46e:	e000      	b.n	800e472 <tcp_rst+0xda>
    return;
 800e470:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800e472:	3720      	adds	r7, #32
 800e474:	46bd      	mov	sp, r7
 800e476:	bd80      	pop	{r7, pc}
 800e478:	0801a5d4 	.word	0x0801a5d4
 800e47c:	0801a608 	.word	0x0801a608
 800e480:	0801a638 	.word	0x0801a638

0800e484 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800e484:	b580      	push	{r7, lr}
 800e486:	b084      	sub	sp, #16
 800e488:	af00      	add	r7, sp, #0
 800e48a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e490:	2b00      	cmp	r3, #0
 800e492:	d029      	beq.n	800e4e8 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e498:	60fb      	str	r3, [r7, #12]
 800e49a:	e002      	b.n	800e4a2 <tcp_rexmit_rto+0x1e>
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	60fb      	str	r3, [r7, #12]
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d1f8      	bne.n	800e49c <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	2200      	movs	r2, #0
 800e4be:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e4c6:	2bff      	cmp	r3, #255	; 0xff
 800e4c8:	d007      	beq.n	800e4da <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e4d0:	3301      	adds	r3, #1
 800e4d2:	b2da      	uxtb	r2, r3
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	2200      	movs	r2, #0
 800e4de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 800e4e0:	6878      	ldr	r0, [r7, #4]
 800e4e2:	f7ff fccf 	bl	800de84 <tcp_output>
 800e4e6:	e000      	b.n	800e4ea <tcp_rexmit_rto+0x66>
    return;
 800e4e8:	bf00      	nop
}
 800e4ea:	3710      	adds	r7, #16
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	bd80      	pop	{r7, pc}

0800e4f0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800e4f0:	b590      	push	{r4, r7, lr}
 800e4f2:	b085      	sub	sp, #20
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d043      	beq.n	800e588 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e504:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 800e506:	68bb      	ldr	r3, [r7, #8]
 800e508:	681a      	ldr	r2, [r3, #0]
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	3368      	adds	r3, #104	; 0x68
 800e512:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e514:	e002      	b.n	800e51c <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d011      	beq.n	800e548 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	68db      	ldr	r3, [r3, #12]
 800e52a:	685b      	ldr	r3, [r3, #4]
 800e52c:	4618      	mov	r0, r3
 800e52e:	f7f9 fdb2 	bl	8008096 <lwip_htonl>
 800e532:	4604      	mov	r4, r0
 800e534:	68bb      	ldr	r3, [r7, #8]
 800e536:	68db      	ldr	r3, [r3, #12]
 800e538:	685b      	ldr	r3, [r3, #4]
 800e53a:	4618      	mov	r0, r3
 800e53c:	f7f9 fdab 	bl	8008096 <lwip_htonl>
 800e540:	4603      	mov	r3, r0
 800e542:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800e544:	2b00      	cmp	r3, #0
 800e546:	dbe6      	blt.n	800e516 <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	681a      	ldr	r2, [r3, #0]
 800e54c:	68bb      	ldr	r3, [r7, #8]
 800e54e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	68ba      	ldr	r2, [r7, #8]
 800e554:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800e556:	68bb      	ldr	r3, [r7, #8]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d103      	bne.n	800e566 <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	2200      	movs	r2, #0
 800e562:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e56c:	2bff      	cmp	r3, #255	; 0xff
 800e56e:	d007      	beq.n	800e580 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e576:	3301      	adds	r3, #1
 800e578:	b2da      	uxtb	r2, r3
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	2200      	movs	r2, #0
 800e584:	635a      	str	r2, [r3, #52]	; 0x34
 800e586:	e000      	b.n	800e58a <tcp_rexmit+0x9a>
    return;
 800e588:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 800e58a:	3714      	adds	r7, #20
 800e58c:	46bd      	mov	sp, r7
 800e58e:	bd90      	pop	{r4, r7, pc}

0800e590 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800e590:	b580      	push	{r7, lr}
 800e592:	b082      	sub	sp, #8
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d04a      	beq.n	800e636 <tcp_rexmit_fast+0xa6>
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	7e9b      	ldrb	r3, [r3, #26]
 800e5a4:	f003 0304 	and.w	r3, r3, #4
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d144      	bne.n	800e636 <tcp_rexmit_fast+0xa6>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800e5ac:	6878      	ldr	r0, [r7, #4]
 800e5ae:	f7ff ff9f 	bl	800e4f0 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e5be:	429a      	cmp	r2, r3
 800e5c0:	d207      	bcs.n	800e5d2 <tcp_rexmit_fast+0x42>
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e5c8:	0fda      	lsrs	r2, r3, #31
 800e5ca:	4413      	add	r3, r2
 800e5cc:	105b      	asrs	r3, r3, #1
 800e5ce:	b29b      	uxth	r3, r3
 800e5d0:	e006      	b.n	800e5e0 <tcp_rexmit_fast+0x50>
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e5d8:	0fda      	lsrs	r2, r3, #31
 800e5da:	4413      	add	r3, r2
 800e5dc:	105b      	asrs	r3, r3, #1
 800e5de:	b29b      	uxth	r3, r3
 800e5e0:	687a      	ldr	r2, [r7, #4]
 800e5e2:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e5ec:	461a      	mov	r2, r3
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e5f2:	005b      	lsls	r3, r3, #1
 800e5f4:	429a      	cmp	r2, r3
 800e5f6:	d206      	bcs.n	800e606 <tcp_rexmit_fast+0x76>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e5fc:	005b      	lsls	r3, r3, #1
 800e5fe:	b29a      	uxth	r2, r3
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e610:	4619      	mov	r1, r3
 800e612:	0049      	lsls	r1, r1, #1
 800e614:	440b      	add	r3, r1
 800e616:	b29b      	uxth	r3, r3
 800e618:	4413      	add	r3, r2
 800e61a:	b29a      	uxth	r2, r3
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	7e9b      	ldrb	r3, [r3, #26]
 800e626:	f043 0304 	orr.w	r3, r3, #4
 800e62a:	b2da      	uxtb	r2, r3
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	2200      	movs	r2, #0
 800e634:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 800e636:	bf00      	nop
 800e638:	3708      	adds	r7, #8
 800e63a:	46bd      	mov	sp, r7
 800e63c:	bd80      	pop	{r7, pc}

0800e63e <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800e63e:	b580      	push	{r7, lr}
 800e640:	b08a      	sub	sp, #40	; 0x28
 800e642:	af04      	add	r7, sp, #16
 800e644:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e64a:	3b01      	subs	r3, #1
 800e64c:	4618      	mov	r0, r3
 800e64e:	f7f9 fd22 	bl	8008096 <lwip_htonl>
 800e652:	4603      	mov	r3, r0
 800e654:	2200      	movs	r2, #0
 800e656:	2100      	movs	r1, #0
 800e658:	6878      	ldr	r0, [r7, #4]
 800e65a:	f7ff f977 	bl	800d94c <tcp_output_alloc_header>
 800e65e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e660:	693b      	ldr	r3, [r7, #16]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d102      	bne.n	800e66c <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800e666:	f04f 33ff 	mov.w	r3, #4294967295
 800e66a:	e021      	b.n	800e6b0 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	3304      	adds	r3, #4
 800e670:	4618      	mov	r0, r3
 800e672:	f003 fcb1 	bl	8011fd8 <ip4_route>
 800e676:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d102      	bne.n	800e684 <tcp_keepalive+0x46>
    err = ERR_RTE;
 800e67e:	23fc      	movs	r3, #252	; 0xfc
 800e680:	75fb      	strb	r3, [r7, #23]
 800e682:	e010      	b.n	800e6a6 <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800e684:	6879      	ldr	r1, [r7, #4]
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	1d1a      	adds	r2, r3, #4
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	7a98      	ldrb	r0, [r3, #10]
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	9302      	str	r3, [sp, #8]
 800e692:	2306      	movs	r3, #6
 800e694:	9301      	str	r3, [sp, #4]
 800e696:	2300      	movs	r3, #0
 800e698:	9300      	str	r3, [sp, #0]
 800e69a:	4603      	mov	r3, r0
 800e69c:	6938      	ldr	r0, [r7, #16]
 800e69e:	f003 feb1 	bl	8012404 <ip4_output_if>
 800e6a2:	4603      	mov	r3, r0
 800e6a4:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800e6a6:	6938      	ldr	r0, [r7, #16]
 800e6a8:	f7fb f9aa 	bl	8009a00 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e6ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	3718      	adds	r7, #24
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	bd80      	pop	{r7, pc}

0800e6b8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800e6b8:	b590      	push	{r4, r7, lr}
 800e6ba:	b08f      	sub	sp, #60	; 0x3c
 800e6bc:	af04      	add	r7, sp, #16
 800e6be:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e6c4:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 800e6c6:	6a3b      	ldr	r3, [r7, #32]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d102      	bne.n	800e6d2 <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e6d0:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 800e6d2:	6a3b      	ldr	r3, [r7, #32]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d101      	bne.n	800e6dc <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 800e6d8:	2300      	movs	r3, #0
 800e6da:	e085      	b.n	800e7e8 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800e6dc:	6a3b      	ldr	r3, [r7, #32]
 800e6de:	68db      	ldr	r3, [r3, #12]
 800e6e0:	899b      	ldrh	r3, [r3, #12]
 800e6e2:	b29b      	uxth	r3, r3
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	f7f9 fcc9 	bl	800807c <lwip_htons>
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	f003 0301 	and.w	r3, r3, #1
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d005      	beq.n	800e700 <tcp_zero_window_probe+0x48>
 800e6f4:	6a3b      	ldr	r3, [r7, #32]
 800e6f6:	891b      	ldrh	r3, [r3, #8]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d101      	bne.n	800e700 <tcp_zero_window_probe+0x48>
 800e6fc:	2301      	movs	r3, #1
 800e6fe:	e000      	b.n	800e702 <tcp_zero_window_probe+0x4a>
 800e700:	2300      	movs	r3, #0
 800e702:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800e704:	7ffb      	ldrb	r3, [r7, #31]
 800e706:	2b00      	cmp	r3, #0
 800e708:	bf0c      	ite	eq
 800e70a:	2301      	moveq	r3, #1
 800e70c:	2300      	movne	r3, #0
 800e70e:	b2db      	uxtb	r3, r3
 800e710:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800e712:	6a3b      	ldr	r3, [r7, #32]
 800e714:	68db      	ldr	r3, [r3, #12]
 800e716:	685b      	ldr	r3, [r3, #4]
 800e718:	8bba      	ldrh	r2, [r7, #28]
 800e71a:	2100      	movs	r1, #0
 800e71c:	6878      	ldr	r0, [r7, #4]
 800e71e:	f7ff f915 	bl	800d94c <tcp_output_alloc_header>
 800e722:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800e724:	69bb      	ldr	r3, [r7, #24]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d102      	bne.n	800e730 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800e72a:	f04f 33ff 	mov.w	r3, #4294967295
 800e72e:	e05b      	b.n	800e7e8 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800e730:	69bb      	ldr	r3, [r7, #24]
 800e732:	685b      	ldr	r3, [r3, #4]
 800e734:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800e736:	7ffb      	ldrb	r3, [r7, #31]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d00e      	beq.n	800e75a <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800e73c:	697b      	ldr	r3, [r7, #20]
 800e73e:	899b      	ldrh	r3, [r3, #12]
 800e740:	b29b      	uxth	r3, r3
 800e742:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e746:	b29c      	uxth	r4, r3
 800e748:	2011      	movs	r0, #17
 800e74a:	f7f9 fc97 	bl	800807c <lwip_htons>
 800e74e:	4603      	mov	r3, r0
 800e750:	4323      	orrs	r3, r4
 800e752:	b29a      	uxth	r2, r3
 800e754:	697b      	ldr	r3, [r7, #20]
 800e756:	819a      	strh	r2, [r3, #12]
 800e758:	e010      	b.n	800e77c <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800e75a:	69bb      	ldr	r3, [r7, #24]
 800e75c:	685b      	ldr	r3, [r3, #4]
 800e75e:	3314      	adds	r3, #20
 800e760:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800e762:	6a3b      	ldr	r3, [r7, #32]
 800e764:	6858      	ldr	r0, [r3, #4]
 800e766:	6a3b      	ldr	r3, [r7, #32]
 800e768:	685b      	ldr	r3, [r3, #4]
 800e76a:	891a      	ldrh	r2, [r3, #8]
 800e76c:	6a3b      	ldr	r3, [r7, #32]
 800e76e:	891b      	ldrh	r3, [r3, #8]
 800e770:	1ad3      	subs	r3, r2, r3
 800e772:	b29b      	uxth	r3, r3
 800e774:	2201      	movs	r2, #1
 800e776:	6939      	ldr	r1, [r7, #16]
 800e778:	f7fb fb4c 	bl	8009e14 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800e77c:	6a3b      	ldr	r3, [r7, #32]
 800e77e:	68db      	ldr	r3, [r3, #12]
 800e780:	685b      	ldr	r3, [r3, #4]
 800e782:	4618      	mov	r0, r3
 800e784:	f7f9 fc87 	bl	8008096 <lwip_htonl>
 800e788:	4603      	mov	r3, r0
 800e78a:	3301      	adds	r3, #1
 800e78c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	1ad3      	subs	r3, r2, r3
 800e796:	2b00      	cmp	r3, #0
 800e798:	da02      	bge.n	800e7a0 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	68fa      	ldr	r2, [r7, #12]
 800e79e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	3304      	adds	r3, #4
 800e7a4:	4618      	mov	r0, r3
 800e7a6:	f003 fc17 	bl	8011fd8 <ip4_route>
 800e7aa:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 800e7ac:	68bb      	ldr	r3, [r7, #8]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d103      	bne.n	800e7ba <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 800e7b2:	23fc      	movs	r3, #252	; 0xfc
 800e7b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e7b8:	e011      	b.n	800e7de <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800e7ba:	6879      	ldr	r1, [r7, #4]
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	1d1a      	adds	r2, r3, #4
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	7a98      	ldrb	r0, [r3, #10]
 800e7c4:	68bb      	ldr	r3, [r7, #8]
 800e7c6:	9302      	str	r3, [sp, #8]
 800e7c8:	2306      	movs	r3, #6
 800e7ca:	9301      	str	r3, [sp, #4]
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	9300      	str	r3, [sp, #0]
 800e7d0:	4603      	mov	r3, r0
 800e7d2:	69b8      	ldr	r0, [r7, #24]
 800e7d4:	f003 fe16 	bl	8012404 <ip4_output_if>
 800e7d8:	4603      	mov	r3, r0
 800e7da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800e7de:	69b8      	ldr	r0, [r7, #24]
 800e7e0:	f7fb f90e 	bl	8009a00 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800e7e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	372c      	adds	r7, #44	; 0x2c
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	bd90      	pop	{r4, r7, pc}

0800e7f0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b082      	sub	sp, #8
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800e7f8:	f7fb fcce 	bl	800a198 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800e7fc:	4b0a      	ldr	r3, [pc, #40]	; (800e828 <tcpip_tcp_timer+0x38>)
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d103      	bne.n	800e80c <tcpip_tcp_timer+0x1c>
 800e804:	4b09      	ldr	r3, [pc, #36]	; (800e82c <tcpip_tcp_timer+0x3c>)
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d005      	beq.n	800e818 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e80c:	2200      	movs	r2, #0
 800e80e:	4908      	ldr	r1, [pc, #32]	; (800e830 <tcpip_tcp_timer+0x40>)
 800e810:	20fa      	movs	r0, #250	; 0xfa
 800e812:	f000 f86f 	bl	800e8f4 <sys_timeout>
 800e816:	e002      	b.n	800e81e <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800e818:	4b06      	ldr	r3, [pc, #24]	; (800e834 <tcpip_tcp_timer+0x44>)
 800e81a:	2200      	movs	r2, #0
 800e81c:	601a      	str	r2, [r3, #0]
  }
}
 800e81e:	bf00      	nop
 800e820:	3708      	adds	r7, #8
 800e822:	46bd      	mov	sp, r7
 800e824:	bd80      	pop	{r7, pc}
 800e826:	bf00      	nop
 800e828:	2000b8c4 	.word	0x2000b8c4
 800e82c:	2000b8d4 	.word	0x2000b8d4
 800e830:	0800e7f1 	.word	0x0800e7f1
 800e834:	20004acc 	.word	0x20004acc

0800e838 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800e83c:	4b0a      	ldr	r3, [pc, #40]	; (800e868 <tcp_timer_needed+0x30>)
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d10f      	bne.n	800e864 <tcp_timer_needed+0x2c>
 800e844:	4b09      	ldr	r3, [pc, #36]	; (800e86c <tcp_timer_needed+0x34>)
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d103      	bne.n	800e854 <tcp_timer_needed+0x1c>
 800e84c:	4b08      	ldr	r3, [pc, #32]	; (800e870 <tcp_timer_needed+0x38>)
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d007      	beq.n	800e864 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800e854:	4b04      	ldr	r3, [pc, #16]	; (800e868 <tcp_timer_needed+0x30>)
 800e856:	2201      	movs	r2, #1
 800e858:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800e85a:	2200      	movs	r2, #0
 800e85c:	4905      	ldr	r1, [pc, #20]	; (800e874 <tcp_timer_needed+0x3c>)
 800e85e:	20fa      	movs	r0, #250	; 0xfa
 800e860:	f000 f848 	bl	800e8f4 <sys_timeout>
  }
}
 800e864:	bf00      	nop
 800e866:	bd80      	pop	{r7, pc}
 800e868:	20004acc 	.word	0x20004acc
 800e86c:	2000b8c4 	.word	0x2000b8c4
 800e870:	2000b8d4 	.word	0x2000b8d4
 800e874:	0800e7f1 	.word	0x0800e7f1

0800e878 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b084      	sub	sp, #16
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	685b      	ldr	r3, [r3, #4]
 800e888:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	687a      	ldr	r2, [r7, #4]
 800e890:	4903      	ldr	r1, [pc, #12]	; (800e8a0 <cyclic_timer+0x28>)
 800e892:	4618      	mov	r0, r3
 800e894:	f000 f82e 	bl	800e8f4 <sys_timeout>
}
 800e898:	bf00      	nop
 800e89a:	3710      	adds	r7, #16
 800e89c:	46bd      	mov	sp, r7
 800e89e:	bd80      	pop	{r7, pc}
 800e8a0:	0800e879 	.word	0x0800e879

0800e8a4 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800e8a4:	b580      	push	{r7, lr}
 800e8a6:	b082      	sub	sp, #8
 800e8a8:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e8aa:	2301      	movs	r3, #1
 800e8ac:	607b      	str	r3, [r7, #4]
 800e8ae:	e00e      	b.n	800e8ce <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800e8b0:	4a0d      	ldr	r2, [pc, #52]	; (800e8e8 <sys_timeouts_init+0x44>)
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	00db      	lsls	r3, r3, #3
 800e8bc:	4a0a      	ldr	r2, [pc, #40]	; (800e8e8 <sys_timeouts_init+0x44>)
 800e8be:	4413      	add	r3, r2
 800e8c0:	461a      	mov	r2, r3
 800e8c2:	490a      	ldr	r1, [pc, #40]	; (800e8ec <sys_timeouts_init+0x48>)
 800e8c4:	f000 f816 	bl	800e8f4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	3301      	adds	r3, #1
 800e8cc:	607b      	str	r3, [r7, #4]
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	2b06      	cmp	r3, #6
 800e8d2:	d9ed      	bls.n	800e8b0 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 800e8d4:	f7f5 fe2c 	bl	8004530 <sys_now>
 800e8d8:	4602      	mov	r2, r0
 800e8da:	4b05      	ldr	r3, [pc, #20]	; (800e8f0 <sys_timeouts_init+0x4c>)
 800e8dc:	601a      	str	r2, [r3, #0]
}
 800e8de:	bf00      	nop
 800e8e0:	3708      	adds	r7, #8
 800e8e2:	46bd      	mov	sp, r7
 800e8e4:	bd80      	pop	{r7, pc}
 800e8e6:	bf00      	nop
 800e8e8:	0801c8a8 	.word	0x0801c8a8
 800e8ec:	0800e879 	.word	0x0800e879
 800e8f0:	20004ac8 	.word	0x20004ac8

0800e8f4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b088      	sub	sp, #32
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	60f8      	str	r0, [r7, #12]
 800e8fc:	60b9      	str	r1, [r7, #8]
 800e8fe:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800e900:	200b      	movs	r0, #11
 800e902:	f7fa fab9 	bl	8008e78 <memp_malloc>
 800e906:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 800e908:	697b      	ldr	r3, [r7, #20]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d10a      	bne.n	800e924 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800e90e:	697b      	ldr	r3, [r7, #20]
 800e910:	2b00      	cmp	r3, #0
 800e912:	f040 8084 	bne.w	800ea1e <sys_timeout+0x12a>
 800e916:	4b44      	ldr	r3, [pc, #272]	; (800ea28 <sys_timeout+0x134>)
 800e918:	22d4      	movs	r2, #212	; 0xd4
 800e91a:	4944      	ldr	r1, [pc, #272]	; (800ea2c <sys_timeout+0x138>)
 800e91c:	4844      	ldr	r0, [pc, #272]	; (800ea30 <sys_timeout+0x13c>)
 800e91e:	f009 fd01 	bl	8018324 <iprintf>
    return;
 800e922:	e07c      	b.n	800ea1e <sys_timeout+0x12a>
  }

  now = sys_now();
 800e924:	f7f5 fe04 	bl	8004530 <sys_now>
 800e928:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 800e92a:	4b42      	ldr	r3, [pc, #264]	; (800ea34 <sys_timeout+0x140>)
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d105      	bne.n	800e93e <sys_timeout+0x4a>
    diff = 0;
 800e932:	2300      	movs	r3, #0
 800e934:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 800e936:	4a40      	ldr	r2, [pc, #256]	; (800ea38 <sys_timeout+0x144>)
 800e938:	693b      	ldr	r3, [r7, #16]
 800e93a:	6013      	str	r3, [r2, #0]
 800e93c:	e004      	b.n	800e948 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 800e93e:	4b3e      	ldr	r3, [pc, #248]	; (800ea38 <sys_timeout+0x144>)
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	693a      	ldr	r2, [r7, #16]
 800e944:	1ad3      	subs	r3, r2, r3
 800e946:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 800e948:	697b      	ldr	r3, [r7, #20]
 800e94a:	2200      	movs	r2, #0
 800e94c:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800e94e:	697b      	ldr	r3, [r7, #20]
 800e950:	68ba      	ldr	r2, [r7, #8]
 800e952:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800e954:	697b      	ldr	r3, [r7, #20]
 800e956:	687a      	ldr	r2, [r7, #4]
 800e958:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 800e95a:	68fa      	ldr	r2, [r7, #12]
 800e95c:	69bb      	ldr	r3, [r7, #24]
 800e95e:	441a      	add	r2, r3
 800e960:	697b      	ldr	r3, [r7, #20]
 800e962:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800e964:	4b33      	ldr	r3, [pc, #204]	; (800ea34 <sys_timeout+0x140>)
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d103      	bne.n	800e974 <sys_timeout+0x80>
    next_timeout = timeout;
 800e96c:	4a31      	ldr	r2, [pc, #196]	; (800ea34 <sys_timeout+0x140>)
 800e96e:	697b      	ldr	r3, [r7, #20]
 800e970:	6013      	str	r3, [r2, #0]
    return;
 800e972:	e055      	b.n	800ea20 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 800e974:	4b2f      	ldr	r3, [pc, #188]	; (800ea34 <sys_timeout+0x140>)
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	685b      	ldr	r3, [r3, #4]
 800e97a:	68fa      	ldr	r2, [r7, #12]
 800e97c:	429a      	cmp	r2, r3
 800e97e:	d20f      	bcs.n	800e9a0 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 800e980:	4b2c      	ldr	r3, [pc, #176]	; (800ea34 <sys_timeout+0x140>)
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	6859      	ldr	r1, [r3, #4]
 800e986:	4b2b      	ldr	r3, [pc, #172]	; (800ea34 <sys_timeout+0x140>)
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	68fa      	ldr	r2, [r7, #12]
 800e98c:	1a8a      	subs	r2, r1, r2
 800e98e:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 800e990:	4b28      	ldr	r3, [pc, #160]	; (800ea34 <sys_timeout+0x140>)
 800e992:	681a      	ldr	r2, [r3, #0]
 800e994:	697b      	ldr	r3, [r7, #20]
 800e996:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800e998:	4a26      	ldr	r2, [pc, #152]	; (800ea34 <sys_timeout+0x140>)
 800e99a:	697b      	ldr	r3, [r7, #20]
 800e99c:	6013      	str	r3, [r2, #0]
 800e99e:	e03f      	b.n	800ea20 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800e9a0:	4b24      	ldr	r3, [pc, #144]	; (800ea34 <sys_timeout+0x140>)
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	61fb      	str	r3, [r7, #28]
 800e9a6:	e036      	b.n	800ea16 <sys_timeout+0x122>
      timeout->time -= t->time;
 800e9a8:	697b      	ldr	r3, [r7, #20]
 800e9aa:	685a      	ldr	r2, [r3, #4]
 800e9ac:	69fb      	ldr	r3, [r7, #28]
 800e9ae:	685b      	ldr	r3, [r3, #4]
 800e9b0:	1ad2      	subs	r2, r2, r3
 800e9b2:	697b      	ldr	r3, [r7, #20]
 800e9b4:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800e9b6:	69fb      	ldr	r3, [r7, #28]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d006      	beq.n	800e9cc <sys_timeout+0xd8>
 800e9be:	69fb      	ldr	r3, [r7, #28]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	685a      	ldr	r2, [r3, #4]
 800e9c4:	697b      	ldr	r3, [r7, #20]
 800e9c6:	685b      	ldr	r3, [r3, #4]
 800e9c8:	429a      	cmp	r2, r3
 800e9ca:	d921      	bls.n	800ea10 <sys_timeout+0x11c>
        if (t->next != NULL) {
 800e9cc:	69fb      	ldr	r3, [r7, #28]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d009      	beq.n	800e9e8 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 800e9d4:	69fb      	ldr	r3, [r7, #28]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	6859      	ldr	r1, [r3, #4]
 800e9da:	697b      	ldr	r3, [r7, #20]
 800e9dc:	685a      	ldr	r2, [r3, #4]
 800e9de:	69fb      	ldr	r3, [r7, #28]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	1a8a      	subs	r2, r1, r2
 800e9e4:	605a      	str	r2, [r3, #4]
 800e9e6:	e00b      	b.n	800ea00 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 800e9e8:	697b      	ldr	r3, [r7, #20]
 800e9ea:	685b      	ldr	r3, [r3, #4]
 800e9ec:	68fa      	ldr	r2, [r7, #12]
 800e9ee:	429a      	cmp	r2, r3
 800e9f0:	d206      	bcs.n	800ea00 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 800e9f2:	4b10      	ldr	r3, [pc, #64]	; (800ea34 <sys_timeout+0x140>)
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	685a      	ldr	r2, [r3, #4]
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	441a      	add	r2, r3
 800e9fc:	697b      	ldr	r3, [r7, #20]
 800e9fe:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 800ea00:	69fb      	ldr	r3, [r7, #28]
 800ea02:	681a      	ldr	r2, [r3, #0]
 800ea04:	697b      	ldr	r3, [r7, #20]
 800ea06:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800ea08:	69fb      	ldr	r3, [r7, #28]
 800ea0a:	697a      	ldr	r2, [r7, #20]
 800ea0c:	601a      	str	r2, [r3, #0]
        break;
 800ea0e:	e007      	b.n	800ea20 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 800ea10:	69fb      	ldr	r3, [r7, #28]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	61fb      	str	r3, [r7, #28]
 800ea16:	69fb      	ldr	r3, [r7, #28]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d1c5      	bne.n	800e9a8 <sys_timeout+0xb4>
 800ea1c:	e000      	b.n	800ea20 <sys_timeout+0x12c>
    return;
 800ea1e:	bf00      	nop
      }
    }
  }
}
 800ea20:	3720      	adds	r7, #32
 800ea22:	46bd      	mov	sp, r7
 800ea24:	bd80      	pop	{r7, pc}
 800ea26:	bf00      	nop
 800ea28:	0801aa18 	.word	0x0801aa18
 800ea2c:	0801aa4c 	.word	0x0801aa4c
 800ea30:	0801aa8c 	.word	0x0801aa8c
 800ea34:	20004ac4 	.word	0x20004ac4
 800ea38:	20004ac8 	.word	0x20004ac8

0800ea3c <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b086      	sub	sp, #24
 800ea40:	af00      	add	r7, sp, #0
  if (next_timeout) {
 800ea42:	4b24      	ldr	r3, [pc, #144]	; (800ead4 <sys_check_timeouts+0x98>)
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d03f      	beq.n	800eaca <sys_check_timeouts+0x8e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 800ea4a:	f7f5 fd71 	bl	8004530 <sys_now>
 800ea4e:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 800ea50:	4b21      	ldr	r3, [pc, #132]	; (800ead8 <sys_check_timeouts+0x9c>)
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	68fa      	ldr	r2, [r7, #12]
 800ea56:	1ad3      	subs	r3, r2, r3
 800ea58:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 800ea5e:	4b1d      	ldr	r3, [pc, #116]	; (800ead4 <sys_check_timeouts+0x98>)
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800ea64:	68bb      	ldr	r3, [r7, #8]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d02c      	beq.n	800eac4 <sys_check_timeouts+0x88>
 800ea6a:	68bb      	ldr	r3, [r7, #8]
 800ea6c:	685b      	ldr	r3, [r3, #4]
 800ea6e:	697a      	ldr	r2, [r7, #20]
 800ea70:	429a      	cmp	r2, r3
 800ea72:	d327      	bcc.n	800eac4 <sys_check_timeouts+0x88>
        /* timeout has expired */
        had_one = 1;
 800ea74:	2301      	movs	r3, #1
 800ea76:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 800ea78:	68bb      	ldr	r3, [r7, #8]
 800ea7a:	685a      	ldr	r2, [r3, #4]
 800ea7c:	4b16      	ldr	r3, [pc, #88]	; (800ead8 <sys_check_timeouts+0x9c>)
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	4413      	add	r3, r2
 800ea82:	4a15      	ldr	r2, [pc, #84]	; (800ead8 <sys_check_timeouts+0x9c>)
 800ea84:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 800ea86:	68bb      	ldr	r3, [r7, #8]
 800ea88:	685b      	ldr	r3, [r3, #4]
 800ea8a:	697a      	ldr	r2, [r7, #20]
 800ea8c:	1ad3      	subs	r3, r2, r3
 800ea8e:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 800ea90:	68bb      	ldr	r3, [r7, #8]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	4a0f      	ldr	r2, [pc, #60]	; (800ead4 <sys_check_timeouts+0x98>)
 800ea96:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 800ea98:	68bb      	ldr	r3, [r7, #8]
 800ea9a:	689b      	ldr	r3, [r3, #8]
 800ea9c:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 800ea9e:	68bb      	ldr	r3, [r7, #8]
 800eaa0:	68db      	ldr	r3, [r3, #12]
 800eaa2:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800eaa4:	68b9      	ldr	r1, [r7, #8]
 800eaa6:	200b      	movs	r0, #11
 800eaa8:	f7fa fa38 	bl	8008f1c <memp_free>
        if (handler != NULL) {
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d008      	beq.n	800eac4 <sys_check_timeouts+0x88>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
 800eab2:	480a      	ldr	r0, [pc, #40]	; (800eadc <sys_check_timeouts+0xa0>)
 800eab4:	f004 fee8 	bl	8013888 <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	6838      	ldr	r0, [r7, #0]
 800eabc:	4798      	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
 800eabe:	4807      	ldr	r0, [pc, #28]	; (800eadc <sys_check_timeouts+0xa0>)
 800eac0:	f004 fef1 	bl	80138a6 <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 800eac4:	7cfb      	ldrb	r3, [r7, #19]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d1c7      	bne.n	800ea5a <sys_check_timeouts+0x1e>
  }
}
 800eaca:	bf00      	nop
 800eacc:	3718      	adds	r7, #24
 800eace:	46bd      	mov	sp, r7
 800ead0:	bd80      	pop	{r7, pc}
 800ead2:	bf00      	nop
 800ead4:	20004ac4 	.word	0x20004ac4
 800ead8:	20004ac8 	.word	0x20004ac8
 800eadc:	20007e1c 	.word	0x20007e1c

0800eae0 <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b082      	sub	sp, #8
 800eae4:	af00      	add	r7, sp, #0
  u32_t diff;
  if (next_timeout == NULL) {
 800eae6:	4b0f      	ldr	r3, [pc, #60]	; (800eb24 <sys_timeouts_sleeptime+0x44>)
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d102      	bne.n	800eaf4 <sys_timeouts_sleeptime+0x14>
    return 0xffffffff;
 800eaee:	f04f 33ff 	mov.w	r3, #4294967295
 800eaf2:	e013      	b.n	800eb1c <sys_timeouts_sleeptime+0x3c>
  }
  diff = sys_now() - timeouts_last_time;
 800eaf4:	f7f5 fd1c 	bl	8004530 <sys_now>
 800eaf8:	4602      	mov	r2, r0
 800eafa:	4b0b      	ldr	r3, [pc, #44]	; (800eb28 <sys_timeouts_sleeptime+0x48>)
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	1ad3      	subs	r3, r2, r3
 800eb00:	607b      	str	r3, [r7, #4]
  if (diff > next_timeout->time) {
 800eb02:	4b08      	ldr	r3, [pc, #32]	; (800eb24 <sys_timeouts_sleeptime+0x44>)
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	685b      	ldr	r3, [r3, #4]
 800eb08:	687a      	ldr	r2, [r7, #4]
 800eb0a:	429a      	cmp	r2, r3
 800eb0c:	d901      	bls.n	800eb12 <sys_timeouts_sleeptime+0x32>
    return 0;
 800eb0e:	2300      	movs	r3, #0
 800eb10:	e004      	b.n	800eb1c <sys_timeouts_sleeptime+0x3c>
  } else {
    return next_timeout->time - diff;
 800eb12:	4b04      	ldr	r3, [pc, #16]	; (800eb24 <sys_timeouts_sleeptime+0x44>)
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	685a      	ldr	r2, [r3, #4]
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	1ad3      	subs	r3, r2, r3
  }
}
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	3708      	adds	r7, #8
 800eb20:	46bd      	mov	sp, r7
 800eb22:	bd80      	pop	{r7, pc}
 800eb24:	20004ac4 	.word	0x20004ac4
 800eb28:	20004ac8 	.word	0x20004ac8

0800eb2c <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b084      	sub	sp, #16
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
 800eb34:	6039      	str	r1, [r7, #0]
  u32_t sleeptime;

again:
  if (!next_timeout) {
 800eb36:	4b0f      	ldr	r3, [pc, #60]	; (800eb74 <sys_timeouts_mbox_fetch+0x48>)
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d105      	bne.n	800eb4a <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800eb3e:	2200      	movs	r2, #0
 800eb40:	6839      	ldr	r1, [r7, #0]
 800eb42:	6878      	ldr	r0, [r7, #4]
 800eb44:	f004 fe27 	bl	8013796 <sys_arch_mbox_fetch>
    return;
 800eb48:	e011      	b.n	800eb6e <sys_timeouts_mbox_fetch+0x42>
  }

  sleeptime = sys_timeouts_sleeptime();
 800eb4a:	f7ff ffc9 	bl	800eae0 <sys_timeouts_sleeptime>
 800eb4e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d008      	beq.n	800eb68 <sys_timeouts_mbox_fetch+0x3c>
 800eb56:	68fa      	ldr	r2, [r7, #12]
 800eb58:	6839      	ldr	r1, [r7, #0]
 800eb5a:	6878      	ldr	r0, [r7, #4]
 800eb5c:	f004 fe1b 	bl	8013796 <sys_arch_mbox_fetch>
 800eb60:	4603      	mov	r3, r0
 800eb62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb66:	d102      	bne.n	800eb6e <sys_timeouts_mbox_fetch+0x42>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800eb68:	f7ff ff68 	bl	800ea3c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800eb6c:	e7e3      	b.n	800eb36 <sys_timeouts_mbox_fetch+0xa>
  }
}
 800eb6e:	3710      	adds	r7, #16
 800eb70:	46bd      	mov	sp, r7
 800eb72:	bd80      	pop	{r7, pc}
 800eb74:	20004ac4 	.word	0x20004ac4

0800eb78 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800eb78:	b480      	push	{r7}
 800eb7a:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800eb7c:	bf00      	nop
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	bc80      	pop	{r7}
 800eb82:	4770      	bx	lr

0800eb84 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800eb84:	b480      	push	{r7}
 800eb86:	b083      	sub	sp, #12
 800eb88:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800eb8e:	4b17      	ldr	r3, [pc, #92]	; (800ebec <udp_new_port+0x68>)
 800eb90:	881b      	ldrh	r3, [r3, #0]
 800eb92:	1c5a      	adds	r2, r3, #1
 800eb94:	b291      	uxth	r1, r2
 800eb96:	4a15      	ldr	r2, [pc, #84]	; (800ebec <udp_new_port+0x68>)
 800eb98:	8011      	strh	r1, [r2, #0]
 800eb9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eb9e:	4293      	cmp	r3, r2
 800eba0:	d103      	bne.n	800ebaa <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800eba2:	4b12      	ldr	r3, [pc, #72]	; (800ebec <udp_new_port+0x68>)
 800eba4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800eba8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ebaa:	4b11      	ldr	r3, [pc, #68]	; (800ebf0 <udp_new_port+0x6c>)
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	603b      	str	r3, [r7, #0]
 800ebb0:	e011      	b.n	800ebd6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800ebb2:	683b      	ldr	r3, [r7, #0]
 800ebb4:	8a5a      	ldrh	r2, [r3, #18]
 800ebb6:	4b0d      	ldr	r3, [pc, #52]	; (800ebec <udp_new_port+0x68>)
 800ebb8:	881b      	ldrh	r3, [r3, #0]
 800ebba:	429a      	cmp	r2, r3
 800ebbc:	d108      	bne.n	800ebd0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800ebbe:	88fb      	ldrh	r3, [r7, #6]
 800ebc0:	3301      	adds	r3, #1
 800ebc2:	80fb      	strh	r3, [r7, #6]
 800ebc4:	88fb      	ldrh	r3, [r7, #6]
 800ebc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ebca:	d3e0      	bcc.n	800eb8e <udp_new_port+0xa>
        return 0;
 800ebcc:	2300      	movs	r3, #0
 800ebce:	e007      	b.n	800ebe0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ebd0:	683b      	ldr	r3, [r7, #0]
 800ebd2:	68db      	ldr	r3, [r3, #12]
 800ebd4:	603b      	str	r3, [r7, #0]
 800ebd6:	683b      	ldr	r3, [r7, #0]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d1ea      	bne.n	800ebb2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800ebdc:	4b03      	ldr	r3, [pc, #12]	; (800ebec <udp_new_port+0x68>)
 800ebde:	881b      	ldrh	r3, [r3, #0]
}
 800ebe0:	4618      	mov	r0, r3
 800ebe2:	370c      	adds	r7, #12
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	bc80      	pop	{r7}
 800ebe8:	4770      	bx	lr
 800ebea:	bf00      	nop
 800ebec:	20000014 	.word	0x20000014
 800ebf0:	2000b8dc 	.word	0x2000b8dc

0800ebf4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800ebf4:	b480      	push	{r7}
 800ebf6:	b085      	sub	sp, #20
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	60f8      	str	r0, [r7, #12]
 800ebfc:	60b9      	str	r1, [r7, #8]
 800ebfe:	4613      	mov	r3, r2
 800ec00:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800ec02:	79fb      	ldrb	r3, [r7, #7]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d018      	beq.n	800ec3a <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d013      	beq.n	800ec36 <udp_input_local_match+0x42>
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d00f      	beq.n	800ec36 <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ec16:	4b13      	ldr	r3, [pc, #76]	; (800ec64 <udp_input_local_match+0x70>)
 800ec18:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ec1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec1e:	d00a      	beq.n	800ec36 <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	681a      	ldr	r2, [r3, #0]
 800ec24:	4b0f      	ldr	r3, [pc, #60]	; (800ec64 <udp_input_local_match+0x70>)
 800ec26:	695b      	ldr	r3, [r3, #20]
 800ec28:	405a      	eors	r2, r3
 800ec2a:	68bb      	ldr	r3, [r7, #8]
 800ec2c:	3308      	adds	r3, #8
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d110      	bne.n	800ec58 <udp_input_local_match+0x64>
          return 1;
 800ec36:	2301      	movs	r3, #1
 800ec38:	e00f      	b.n	800ec5a <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d009      	beq.n	800ec54 <udp_input_local_match+0x60>
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d005      	beq.n	800ec54 <udp_input_local_match+0x60>
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	681a      	ldr	r2, [r3, #0]
 800ec4c:	4b05      	ldr	r3, [pc, #20]	; (800ec64 <udp_input_local_match+0x70>)
 800ec4e:	695b      	ldr	r3, [r3, #20]
 800ec50:	429a      	cmp	r2, r3
 800ec52:	d101      	bne.n	800ec58 <udp_input_local_match+0x64>
      return 1;
 800ec54:	2301      	movs	r3, #1
 800ec56:	e000      	b.n	800ec5a <udp_input_local_match+0x66>
    }
  }

  return 0;
 800ec58:	2300      	movs	r3, #0
}
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	3714      	adds	r7, #20
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	bc80      	pop	{r7}
 800ec62:	4770      	bx	lr
 800ec64:	20007e20 	.word	0x20007e20

0800ec68 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800ec68:	b590      	push	{r4, r7, lr}
 800ec6a:	b08d      	sub	sp, #52	; 0x34
 800ec6c:	af02      	add	r7, sp, #8
 800ec6e:	6078      	str	r0, [r7, #4]
 800ec70:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800ec72:	2300      	movs	r3, #0
 800ec74:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	895b      	ldrh	r3, [r3, #10]
 800ec7a:	2b07      	cmp	r3, #7
 800ec7c:	d803      	bhi.n	800ec86 <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800ec7e:	6878      	ldr	r0, [r7, #4]
 800ec80:	f7fa febe 	bl	8009a00 <pbuf_free>
    goto end;
 800ec84:	e0c6      	b.n	800ee14 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	685b      	ldr	r3, [r3, #4]
 800ec8a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800ec8c:	4b63      	ldr	r3, [pc, #396]	; (800ee1c <udp_input+0x1b4>)
 800ec8e:	695a      	ldr	r2, [r3, #20]
 800ec90:	4b62      	ldr	r3, [pc, #392]	; (800ee1c <udp_input+0x1b4>)
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	4619      	mov	r1, r3
 800ec96:	4610      	mov	r0, r2
 800ec98:	f003 fd04 	bl	80126a4 <ip4_addr_isbroadcast_u32>
 800ec9c:	4603      	mov	r3, r0
 800ec9e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800eca0:	697b      	ldr	r3, [r7, #20]
 800eca2:	881b      	ldrh	r3, [r3, #0]
 800eca4:	b29b      	uxth	r3, r3
 800eca6:	4618      	mov	r0, r3
 800eca8:	f7f9 f9e8 	bl	800807c <lwip_htons>
 800ecac:	4603      	mov	r3, r0
 800ecae:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800ecb0:	697b      	ldr	r3, [r7, #20]
 800ecb2:	885b      	ldrh	r3, [r3, #2]
 800ecb4:	b29b      	uxth	r3, r3
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	f7f9 f9e0 	bl	800807c <lwip_htons>
 800ecbc:	4603      	mov	r3, r0
 800ecbe:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800ecc8:	2300      	movs	r3, #0
 800ecca:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800eccc:	4b54      	ldr	r3, [pc, #336]	; (800ee20 <udp_input+0x1b8>)
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	627b      	str	r3, [r7, #36]	; 0x24
 800ecd2:	e03b      	b.n	800ed4c <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800ecd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecd6:	8a5b      	ldrh	r3, [r3, #18]
 800ecd8:	89fa      	ldrh	r2, [r7, #14]
 800ecda:	429a      	cmp	r2, r3
 800ecdc:	d131      	bne.n	800ed42 <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800ecde:	7cfb      	ldrb	r3, [r7, #19]
 800ece0:	461a      	mov	r2, r3
 800ece2:	6839      	ldr	r1, [r7, #0]
 800ece4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ece6:	f7ff ff85 	bl	800ebf4 <udp_input_local_match>
 800ecea:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d028      	beq.n	800ed42 <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800ecf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecf2:	7c1b      	ldrb	r3, [r3, #16]
 800ecf4:	f003 0304 	and.w	r3, r3, #4
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d104      	bne.n	800ed06 <udp_input+0x9e>
 800ecfc:	69fb      	ldr	r3, [r7, #28]
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d101      	bne.n	800ed06 <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 800ed02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed04:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800ed06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed08:	8a9b      	ldrh	r3, [r3, #20]
 800ed0a:	8a3a      	ldrh	r2, [r7, #16]
 800ed0c:	429a      	cmp	r2, r3
 800ed0e:	d118      	bne.n	800ed42 <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ed10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed12:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d005      	beq.n	800ed24 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800ed18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed1a:	685a      	ldr	r2, [r3, #4]
 800ed1c:	4b3f      	ldr	r3, [pc, #252]	; (800ee1c <udp_input+0x1b4>)
 800ed1e:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800ed20:	429a      	cmp	r2, r3
 800ed22:	d10e      	bne.n	800ed42 <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800ed24:	6a3b      	ldr	r3, [r7, #32]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d014      	beq.n	800ed54 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800ed2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed2c:	68da      	ldr	r2, [r3, #12]
 800ed2e:	6a3b      	ldr	r3, [r7, #32]
 800ed30:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800ed32:	4b3b      	ldr	r3, [pc, #236]	; (800ee20 <udp_input+0x1b8>)
 800ed34:	681a      	ldr	r2, [r3, #0]
 800ed36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed38:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800ed3a:	4a39      	ldr	r2, [pc, #228]	; (800ee20 <udp_input+0x1b8>)
 800ed3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed3e:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800ed40:	e008      	b.n	800ed54 <udp_input+0xec>
      }
    }

    prev = pcb;
 800ed42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed44:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ed46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed48:	68db      	ldr	r3, [r3, #12]
 800ed4a:	627b      	str	r3, [r7, #36]	; 0x24
 800ed4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d1c0      	bne.n	800ecd4 <udp_input+0x6c>
 800ed52:	e000      	b.n	800ed56 <udp_input+0xee>
        break;
 800ed54:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800ed56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d101      	bne.n	800ed60 <udp_input+0xf8>
    pcb = uncon_pcb;
 800ed5c:	69fb      	ldr	r3, [r7, #28]
 800ed5e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800ed60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d002      	beq.n	800ed6c <udp_input+0x104>
    for_us = 1;
 800ed66:	2301      	movs	r3, #1
 800ed68:	76fb      	strb	r3, [r7, #27]
 800ed6a:	e00a      	b.n	800ed82 <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800ed6c:	683b      	ldr	r3, [r7, #0]
 800ed6e:	3304      	adds	r3, #4
 800ed70:	681a      	ldr	r2, [r3, #0]
 800ed72:	4b2a      	ldr	r3, [pc, #168]	; (800ee1c <udp_input+0x1b4>)
 800ed74:	695b      	ldr	r3, [r3, #20]
 800ed76:	429a      	cmp	r2, r3
 800ed78:	bf0c      	ite	eq
 800ed7a:	2301      	moveq	r3, #1
 800ed7c:	2300      	movne	r3, #0
 800ed7e:	b2db      	uxtb	r3, r3
 800ed80:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800ed82:	7efb      	ldrb	r3, [r7, #27]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d042      	beq.n	800ee0e <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 800ed88:	f06f 0107 	mvn.w	r1, #7
 800ed8c:	6878      	ldr	r0, [r7, #4]
 800ed8e:	f7fa fe13 	bl	80099b8 <pbuf_header>
 800ed92:	4603      	mov	r3, r0
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d00a      	beq.n	800edae <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800ed98:	4b22      	ldr	r3, [pc, #136]	; (800ee24 <udp_input+0x1bc>)
 800ed9a:	f240 1255 	movw	r2, #341	; 0x155
 800ed9e:	4922      	ldr	r1, [pc, #136]	; (800ee28 <udp_input+0x1c0>)
 800eda0:	4822      	ldr	r0, [pc, #136]	; (800ee2c <udp_input+0x1c4>)
 800eda2:	f009 fabf 	bl	8018324 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800eda6:	6878      	ldr	r0, [r7, #4]
 800eda8:	f7fa fe2a 	bl	8009a00 <pbuf_free>
      goto end;
 800edac:	e032      	b.n	800ee14 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 800edae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d012      	beq.n	800edda <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800edb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edb6:	6a1b      	ldr	r3, [r3, #32]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d00a      	beq.n	800edd2 <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800edbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edbe:	6a1c      	ldr	r4, [r3, #32]
 800edc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edc2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800edc4:	8a3b      	ldrh	r3, [r7, #16]
 800edc6:	9300      	str	r3, [sp, #0]
 800edc8:	4b19      	ldr	r3, [pc, #100]	; (800ee30 <udp_input+0x1c8>)
 800edca:	687a      	ldr	r2, [r7, #4]
 800edcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800edce:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800edd0:	e021      	b.n	800ee16 <udp_input+0x1ae>
        pbuf_free(p);
 800edd2:	6878      	ldr	r0, [r7, #4]
 800edd4:	f7fa fe14 	bl	8009a00 <pbuf_free>
        goto end;
 800edd8:	e01c      	b.n	800ee14 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800edda:	7cfb      	ldrb	r3, [r7, #19]
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d112      	bne.n	800ee06 <udp_input+0x19e>
 800ede0:	4b0e      	ldr	r3, [pc, #56]	; (800ee1c <udp_input+0x1b4>)
 800ede2:	695b      	ldr	r3, [r3, #20]
 800ede4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ede8:	2be0      	cmp	r3, #224	; 0xe0
 800edea:	d00c      	beq.n	800ee06 <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800edec:	4b0b      	ldr	r3, [pc, #44]	; (800ee1c <udp_input+0x1b4>)
 800edee:	899b      	ldrh	r3, [r3, #12]
 800edf0:	3308      	adds	r3, #8
 800edf2:	b29b      	uxth	r3, r3
 800edf4:	b21b      	sxth	r3, r3
 800edf6:	4619      	mov	r1, r3
 800edf8:	6878      	ldr	r0, [r7, #4]
 800edfa:	f7fa fdef 	bl	80099dc <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800edfe:	2103      	movs	r1, #3
 800ee00:	6878      	ldr	r0, [r7, #4]
 800ee02:	f002 fbdb 	bl	80115bc <icmp_dest_unreach>
      pbuf_free(p);
 800ee06:	6878      	ldr	r0, [r7, #4]
 800ee08:	f7fa fdfa 	bl	8009a00 <pbuf_free>
  return;
 800ee0c:	e003      	b.n	800ee16 <udp_input+0x1ae>
    pbuf_free(p);
 800ee0e:	6878      	ldr	r0, [r7, #4]
 800ee10:	f7fa fdf6 	bl	8009a00 <pbuf_free>
  return;
 800ee14:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800ee16:	372c      	adds	r7, #44	; 0x2c
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	bd90      	pop	{r4, r7, pc}
 800ee1c:	20007e20 	.word	0x20007e20
 800ee20:	2000b8dc 	.word	0x2000b8dc
 800ee24:	0801aab4 	.word	0x0801aab4
 800ee28:	0801aae4 	.word	0x0801aae4
 800ee2c:	0801aaf8 	.word	0x0801aaf8
 800ee30:	20007e30 	.word	0x20007e30

0800ee34 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port)
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b088      	sub	sp, #32
 800ee38:	af02      	add	r7, sp, #8
 800ee3a:	60f8      	str	r0, [r7, #12]
 800ee3c:	60b9      	str	r1, [r7, #8]
 800ee3e:	607a      	str	r2, [r7, #4]
 800ee40:	807b      	strh	r3, [r7, #2]
udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;
  const ip_addr_t *dst_ip_route = dst_ip;
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	617b      	str	r3, [r7, #20]

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d002      	beq.n	800ee52 <udp_sendto+0x1e>
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d102      	bne.n	800ee58 <udp_sendto+0x24>
    return ERR_VAL;
 800ee52:	f06f 0305 	mvn.w	r3, #5
 800ee56:	e026      	b.n	800eea6 <udp_sendto+0x72>
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

#if LWIP_IPV6 || (LWIP_IPV4 && LWIP_MULTICAST_TX_OPTIONS)
  if (ip_addr_ismulticast(dst_ip_route)) {
 800ee58:	697b      	ldr	r3, [r7, #20]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ee60:	2be0      	cmp	r3, #224	; 0xe0
 800ee62:	d10c      	bne.n	800ee7e <udp_sendto+0x4a>
#if LWIP_IPV4 && LWIP_MULTICAST_TX_OPTIONS
      /* IPv4 does not use source-based routing by default, so we use an
         administratively selected interface for multicast by default.
         However, this can be overridden by setting an interface address
         in pcb->multicast_ip that is used for routing. */
      if (!ip_addr_isany_val(pcb->multicast_ip) &&
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	699b      	ldr	r3, [r3, #24]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d008      	beq.n	800ee7e <udp_sendto+0x4a>
          !ip4_addr_cmp(ip_2_ip4(&pcb->multicast_ip), IP4_ADDR_BROADCAST)) {
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	699a      	ldr	r2, [r3, #24]
 800ee70:	4b0f      	ldr	r3, [pc, #60]	; (800eeb0 <udp_sendto+0x7c>)
 800ee72:	681b      	ldr	r3, [r3, #0]
      if (!ip_addr_isany_val(pcb->multicast_ip) &&
 800ee74:	429a      	cmp	r2, r3
 800ee76:	d002      	beq.n	800ee7e <udp_sendto+0x4a>
        dst_ip_route = &pcb->multicast_ip;
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	3318      	adds	r3, #24
 800ee7c:	617b      	str	r3, [r7, #20]
  /* find the outgoing network interface for this packet */
  if(IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    /* Don't call ip_route() with IP_ANY_TYPE */
    netif = ip_route(IP46_ADDR_ANY(IP_GET_TYPE(dst_ip_route)), dst_ip_route);
  } else {
    netif = ip_route(&pcb->local_ip, dst_ip_route);
 800ee7e:	6978      	ldr	r0, [r7, #20]
 800ee80:	f003 f8aa 	bl	8011fd8 <ip4_route>
 800ee84:	6138      	str	r0, [r7, #16]
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800ee86:	693b      	ldr	r3, [r7, #16]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d102      	bne.n	800ee92 <udp_sendto+0x5e>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800ee8c:	f06f 0303 	mvn.w	r3, #3
 800ee90:	e009      	b.n	800eea6 <udp_sendto+0x72>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800ee92:	887a      	ldrh	r2, [r7, #2]
 800ee94:	693b      	ldr	r3, [r7, #16]
 800ee96:	9300      	str	r3, [sp, #0]
 800ee98:	4613      	mov	r3, r2
 800ee9a:	687a      	ldr	r2, [r7, #4]
 800ee9c:	68b9      	ldr	r1, [r7, #8]
 800ee9e:	68f8      	ldr	r0, [r7, #12]
 800eea0:	f000 f808 	bl	800eeb4 <udp_sendto_if>
 800eea4:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800eea6:	4618      	mov	r0, r3
 800eea8:	3718      	adds	r7, #24
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bd80      	pop	{r7, pc}
 800eeae:	bf00      	nop
 800eeb0:	0801c8e4 	.word	0x0801c8e4

0800eeb4 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b088      	sub	sp, #32
 800eeb8:	af02      	add	r7, sp, #8
 800eeba:	60f8      	str	r0, [r7, #12]
 800eebc:	60b9      	str	r1, [r7, #8]
 800eebe:	607a      	str	r2, [r7, #4]
 800eec0:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d002      	beq.n	800eece <udp_sendto_if+0x1a>
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d102      	bne.n	800eed4 <udp_sendto_if+0x20>
    return ERR_VAL;
 800eece:	f06f 0305 	mvn.w	r3, #5
 800eed2:	e028      	b.n	800ef26 <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d009      	beq.n	800eeee <udp_sendto_if+0x3a>
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d005      	beq.n	800eeee <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800eeea:	2be0      	cmp	r3, #224	; 0xe0
 800eeec:	d103      	bne.n	800eef6 <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 800eeee:	6a3b      	ldr	r3, [r7, #32]
 800eef0:	3304      	adds	r3, #4
 800eef2:	617b      	str	r3, [r7, #20]
 800eef4:	e00b      	b.n	800ef0e <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	681a      	ldr	r2, [r3, #0]
 800eefa:	6a3b      	ldr	r3, [r7, #32]
 800eefc:	3304      	adds	r3, #4
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	429a      	cmp	r2, r3
 800ef02:	d002      	beq.n	800ef0a <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 800ef04:	f06f 0303 	mvn.w	r3, #3
 800ef08:	e00d      	b.n	800ef26 <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800ef0e:	887a      	ldrh	r2, [r7, #2]
 800ef10:	697b      	ldr	r3, [r7, #20]
 800ef12:	9301      	str	r3, [sp, #4]
 800ef14:	6a3b      	ldr	r3, [r7, #32]
 800ef16:	9300      	str	r3, [sp, #0]
 800ef18:	4613      	mov	r3, r2
 800ef1a:	687a      	ldr	r2, [r7, #4]
 800ef1c:	68b9      	ldr	r1, [r7, #8]
 800ef1e:	68f8      	ldr	r0, [r7, #12]
 800ef20:	f000 f806 	bl	800ef30 <udp_sendto_if_src>
 800ef24:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800ef26:	4618      	mov	r0, r3
 800ef28:	3718      	adds	r7, #24
 800ef2a:	46bd      	mov	sp, r7
 800ef2c:	bd80      	pop	{r7, pc}
	...

0800ef30 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b08c      	sub	sp, #48	; 0x30
 800ef34:	af04      	add	r7, sp, #16
 800ef36:	60f8      	str	r0, [r7, #12]
 800ef38:	60b9      	str	r1, [r7, #8]
 800ef3a:	607a      	str	r2, [r7, #4]
 800ef3c:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d002      	beq.n	800ef4a <udp_sendto_if_src+0x1a>
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d102      	bne.n	800ef50 <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 800ef4a:	f06f 0305 	mvn.w	r3, #5
 800ef4e:	e09a      	b.n	800f086 <udp_sendto_if_src+0x156>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	8a5b      	ldrh	r3, [r3, #18]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d10f      	bne.n	800ef78 <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800ef58:	68f9      	ldr	r1, [r7, #12]
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	8a5b      	ldrh	r3, [r3, #18]
 800ef5e:	461a      	mov	r2, r3
 800ef60:	68f8      	ldr	r0, [r7, #12]
 800ef62:	f000 f89b 	bl	800f09c <udp_bind>
 800ef66:	4603      	mov	r3, r0
 800ef68:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800ef6a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	d002      	beq.n	800ef78 <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800ef72:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ef76:	e086      	b.n	800f086 <udp_sendto_if_src+0x156>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 800ef78:	2108      	movs	r1, #8
 800ef7a:	68b8      	ldr	r0, [r7, #8]
 800ef7c:	f7fa fd1c 	bl	80099b8 <pbuf_header>
 800ef80:	4603      	mov	r3, r0
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d014      	beq.n	800efb0 <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800ef86:	2200      	movs	r2, #0
 800ef88:	2108      	movs	r1, #8
 800ef8a:	2001      	movs	r0, #1
 800ef8c:	f7fa f9c6 	bl	800931c <pbuf_alloc>
 800ef90:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800ef92:	69fb      	ldr	r3, [r7, #28]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d102      	bne.n	800ef9e <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800ef98:	f04f 33ff 	mov.w	r3, #4294967295
 800ef9c:	e073      	b.n	800f086 <udp_sendto_if_src+0x156>
    }
    if (p->tot_len != 0) {
 800ef9e:	68bb      	ldr	r3, [r7, #8]
 800efa0:	891b      	ldrh	r3, [r3, #8]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d006      	beq.n	800efb4 <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800efa6:	68b9      	ldr	r1, [r7, #8]
 800efa8:	69f8      	ldr	r0, [r7, #28]
 800efaa:	f7fa fe57 	bl	8009c5c <pbuf_chain>
 800efae:	e001      	b.n	800efb4 <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800efb0:	68bb      	ldr	r3, [r7, #8]
 800efb2:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800efb4:	69fb      	ldr	r3, [r7, #28]
 800efb6:	895b      	ldrh	r3, [r3, #10]
 800efb8:	2b07      	cmp	r3, #7
 800efba:	d806      	bhi.n	800efca <udp_sendto_if_src+0x9a>
 800efbc:	4b34      	ldr	r3, [pc, #208]	; (800f090 <udp_sendto_if_src+0x160>)
 800efbe:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800efc2:	4934      	ldr	r1, [pc, #208]	; (800f094 <udp_sendto_if_src+0x164>)
 800efc4:	4834      	ldr	r0, [pc, #208]	; (800f098 <udp_sendto_if_src+0x168>)
 800efc6:	f009 f9ad 	bl	8018324 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800efca:	69fb      	ldr	r3, [r7, #28]
 800efcc:	685b      	ldr	r3, [r3, #4]
 800efce:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	8a5b      	ldrh	r3, [r3, #18]
 800efd4:	4618      	mov	r0, r3
 800efd6:	f7f9 f851 	bl	800807c <lwip_htons>
 800efda:	4603      	mov	r3, r0
 800efdc:	461a      	mov	r2, r3
 800efde:	697b      	ldr	r3, [r7, #20]
 800efe0:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800efe2:	887b      	ldrh	r3, [r7, #2]
 800efe4:	4618      	mov	r0, r3
 800efe6:	f7f9 f849 	bl	800807c <lwip_htons>
 800efea:	4603      	mov	r3, r0
 800efec:	461a      	mov	r2, r3
 800efee:	697b      	ldr	r3, [r7, #20]
 800eff0:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800eff2:	697b      	ldr	r3, [r7, #20]
 800eff4:	2200      	movs	r2, #0
 800eff6:	719a      	strb	r2, [r3, #6]
 800eff8:	2200      	movs	r2, #0
 800effa:	71da      	strb	r2, [r3, #7]

  /* Multicast Loop? */
#if (LWIP_IPV4 && LWIP_MULTICAST_TX_OPTIONS) || (LWIP_IPV6 && LWIP_IPV6_MLD)
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	7c1b      	ldrb	r3, [r3, #16]
 800f000:	f003 0308 	and.w	r3, r3, #8
 800f004:	2b00      	cmp	r3, #0
 800f006:	d00c      	beq.n	800f022 <udp_sendto_if_src+0xf2>
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f010:	2be0      	cmp	r3, #224	; 0xe0
 800f012:	d106      	bne.n	800f022 <udp_sendto_if_src+0xf2>
    q->flags |= PBUF_FLAG_MCASTLOOP;
 800f014:	69fb      	ldr	r3, [r7, #28]
 800f016:	7b5b      	ldrb	r3, [r3, #13]
 800f018:	f043 0304 	orr.w	r3, r3, #4
 800f01c:	b2da      	uxtb	r2, r3
 800f01e:	69fb      	ldr	r3, [r7, #28]
 800f020:	735a      	strb	r2, [r3, #13]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800f022:	69fb      	ldr	r3, [r7, #28]
 800f024:	891b      	ldrh	r3, [r3, #8]
 800f026:	4618      	mov	r0, r3
 800f028:	f7f9 f828 	bl	800807c <lwip_htons>
 800f02c:	4603      	mov	r3, r0
 800f02e:	461a      	mov	r2, r3
 800f030:	697b      	ldr	r3, [r7, #20]
 800f032:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800f034:	2311      	movs	r3, #17
 800f036:	74fb      	strb	r3, [r7, #19]
  }

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f040:	2be0      	cmp	r3, #224	; 0xe0
 800f042:	d102      	bne.n	800f04a <udp_sendto_if_src+0x11a>
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	7f1b      	ldrb	r3, [r3, #28]
 800f048:	e001      	b.n	800f04e <udp_sendto_if_src+0x11e>
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	7a9b      	ldrb	r3, [r3, #10]
 800f04e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	7a5b      	ldrb	r3, [r3, #9]
 800f054:	7cb9      	ldrb	r1, [r7, #18]
 800f056:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f058:	9202      	str	r2, [sp, #8]
 800f05a:	7cfa      	ldrb	r2, [r7, #19]
 800f05c:	9201      	str	r2, [sp, #4]
 800f05e:	9300      	str	r3, [sp, #0]
 800f060:	460b      	mov	r3, r1
 800f062:	687a      	ldr	r2, [r7, #4]
 800f064:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f066:	69f8      	ldr	r0, [r7, #28]
 800f068:	f003 fa17 	bl	801249a <ip4_output_if_src>
 800f06c:	4603      	mov	r3, r0
 800f06e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800f070:	69fa      	ldr	r2, [r7, #28]
 800f072:	68bb      	ldr	r3, [r7, #8]
 800f074:	429a      	cmp	r2, r3
 800f076:	d004      	beq.n	800f082 <udp_sendto_if_src+0x152>
    /* free the header pbuf */
    pbuf_free(q);
 800f078:	69f8      	ldr	r0, [r7, #28]
 800f07a:	f7fa fcc1 	bl	8009a00 <pbuf_free>
    q = NULL;
 800f07e:	2300      	movs	r3, #0
 800f080:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800f082:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800f086:	4618      	mov	r0, r3
 800f088:	3720      	adds	r7, #32
 800f08a:	46bd      	mov	sp, r7
 800f08c:	bd80      	pop	{r7, pc}
 800f08e:	bf00      	nop
 800f090:	0801aab4 	.word	0x0801aab4
 800f094:	0801ab20 	.word	0x0801ab20
 800f098:	0801aaf8 	.word	0x0801aaf8

0800f09c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b086      	sub	sp, #24
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	60f8      	str	r0, [r7, #12]
 800f0a4:	60b9      	str	r1, [r7, #8]
 800f0a6:	4613      	mov	r3, r2
 800f0a8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f0aa:	68bb      	ldr	r3, [r7, #8]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d101      	bne.n	800f0b4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800f0b0:	4b30      	ldr	r3, [pc, #192]	; (800f174 <udp_bind+0xd8>)
 800f0b2:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d002      	beq.n	800f0c0 <udp_bind+0x24>
 800f0ba:	68bb      	ldr	r3, [r7, #8]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d102      	bne.n	800f0c6 <udp_bind+0x2a>
    return ERR_VAL;
 800f0c0:	f06f 0305 	mvn.w	r3, #5
 800f0c4:	e052      	b.n	800f16c <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f0ca:	4b2b      	ldr	r3, [pc, #172]	; (800f178 <udp_bind+0xdc>)
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	617b      	str	r3, [r7, #20]
 800f0d0:	e009      	b.n	800f0e6 <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800f0d2:	68fa      	ldr	r2, [r7, #12]
 800f0d4:	697b      	ldr	r3, [r7, #20]
 800f0d6:	429a      	cmp	r2, r3
 800f0d8:	d102      	bne.n	800f0e0 <udp_bind+0x44>
      rebind = 1;
 800f0da:	2301      	movs	r3, #1
 800f0dc:	74fb      	strb	r3, [r7, #19]
      break;
 800f0de:	e005      	b.n	800f0ec <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f0e0:	697b      	ldr	r3, [r7, #20]
 800f0e2:	68db      	ldr	r3, [r3, #12]
 800f0e4:	617b      	str	r3, [r7, #20]
 800f0e6:	697b      	ldr	r3, [r7, #20]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d1f2      	bne.n	800f0d2 <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 800f0ec:	88fb      	ldrh	r3, [r7, #6]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d109      	bne.n	800f106 <udp_bind+0x6a>
    port = udp_new_port();
 800f0f2:	f7ff fd47 	bl	800eb84 <udp_new_port>
 800f0f6:	4603      	mov	r3, r0
 800f0f8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800f0fa:	88fb      	ldrh	r3, [r7, #6]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d11e      	bne.n	800f13e <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800f100:	f06f 0307 	mvn.w	r3, #7
 800f104:	e032      	b.n	800f16c <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f106:	4b1c      	ldr	r3, [pc, #112]	; (800f178 <udp_bind+0xdc>)
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	617b      	str	r3, [r7, #20]
 800f10c:	e014      	b.n	800f138 <udp_bind+0x9c>
      if (pcb != ipcb) {
 800f10e:	68fa      	ldr	r2, [r7, #12]
 800f110:	697b      	ldr	r3, [r7, #20]
 800f112:	429a      	cmp	r2, r3
 800f114:	d00d      	beq.n	800f132 <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800f116:	697b      	ldr	r3, [r7, #20]
 800f118:	8a5b      	ldrh	r3, [r3, #18]
 800f11a:	88fa      	ldrh	r2, [r7, #6]
 800f11c:	429a      	cmp	r2, r3
 800f11e:	d108      	bne.n	800f132 <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 800f120:	697b      	ldr	r3, [r7, #20]
 800f122:	681a      	ldr	r2, [r3, #0]
 800f124:	68bb      	ldr	r3, [r7, #8]
 800f126:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800f128:	429a      	cmp	r2, r3
 800f12a:	d102      	bne.n	800f132 <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800f12c:	f06f 0307 	mvn.w	r3, #7
 800f130:	e01c      	b.n	800f16c <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800f132:	697b      	ldr	r3, [r7, #20]
 800f134:	68db      	ldr	r3, [r3, #12]
 800f136:	617b      	str	r3, [r7, #20]
 800f138:	697b      	ldr	r3, [r7, #20]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d1e7      	bne.n	800f10e <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800f13e:	68bb      	ldr	r3, [r7, #8]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d002      	beq.n	800f14a <udp_bind+0xae>
 800f144:	68bb      	ldr	r3, [r7, #8]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	e000      	b.n	800f14c <udp_bind+0xb0>
 800f14a:	2300      	movs	r3, #0
 800f14c:	68fa      	ldr	r2, [r7, #12]
 800f14e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	88fa      	ldrh	r2, [r7, #6]
 800f154:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800f156:	7cfb      	ldrb	r3, [r7, #19]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d106      	bne.n	800f16a <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800f15c:	4b06      	ldr	r3, [pc, #24]	; (800f178 <udp_bind+0xdc>)
 800f15e:	681a      	ldr	r2, [r3, #0]
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800f164:	4a04      	ldr	r2, [pc, #16]	; (800f178 <udp_bind+0xdc>)
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800f16a:	2300      	movs	r3, #0
}
 800f16c:	4618      	mov	r0, r3
 800f16e:	3718      	adds	r7, #24
 800f170:	46bd      	mov	sp, r7
 800f172:	bd80      	pop	{r7, pc}
 800f174:	0801c8e0 	.word	0x0801c8e0
 800f178:	2000b8dc 	.word	0x2000b8dc

0800f17c <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 800f17c:	b480      	push	{r7}
 800f17e:	b083      	sub	sp, #12
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	2200      	movs	r2, #0
 800f188:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	2200      	movs	r2, #0
 800f18e:	829a      	strh	r2, [r3, #20]
  /* mark PCB as unconnected */
  pcb->flags &= ~UDP_FLAGS_CONNECTED;
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	7c1b      	ldrb	r3, [r3, #16]
 800f194:	f023 0304 	bic.w	r3, r3, #4
 800f198:	b2da      	uxtb	r2, r3
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	741a      	strb	r2, [r3, #16]
}
 800f19e:	bf00      	nop
 800f1a0:	370c      	adds	r7, #12
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	bc80      	pop	{r7}
 800f1a6:	4770      	bx	lr

0800f1a8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800f1a8:	b480      	push	{r7}
 800f1aa:	b085      	sub	sp, #20
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	60f8      	str	r0, [r7, #12]
 800f1b0:	60b9      	str	r1, [r7, #8]
 800f1b2:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	68ba      	ldr	r2, [r7, #8]
 800f1b8:	621a      	str	r2, [r3, #32]
  pcb->recv_arg = recv_arg;
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	687a      	ldr	r2, [r7, #4]
 800f1be:	625a      	str	r2, [r3, #36]	; 0x24
}
 800f1c0:	bf00      	nop
 800f1c2:	3714      	adds	r7, #20
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	bc80      	pop	{r7}
 800f1c8:	4770      	bx	lr
	...

0800f1cc <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800f1cc:	b580      	push	{r7, lr}
 800f1ce:	b084      	sub	sp, #16
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800f1d4:	4b15      	ldr	r3, [pc, #84]	; (800f22c <udp_remove+0x60>)
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	687a      	ldr	r2, [r7, #4]
 800f1da:	429a      	cmp	r2, r3
 800f1dc:	d105      	bne.n	800f1ea <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800f1de:	4b13      	ldr	r3, [pc, #76]	; (800f22c <udp_remove+0x60>)
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	68db      	ldr	r3, [r3, #12]
 800f1e4:	4a11      	ldr	r2, [pc, #68]	; (800f22c <udp_remove+0x60>)
 800f1e6:	6013      	str	r3, [r2, #0]
 800f1e8:	e017      	b.n	800f21a <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800f1ea:	4b10      	ldr	r3, [pc, #64]	; (800f22c <udp_remove+0x60>)
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	60fb      	str	r3, [r7, #12]
 800f1f0:	e010      	b.n	800f214 <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	68db      	ldr	r3, [r3, #12]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d009      	beq.n	800f20e <udp_remove+0x42>
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	68db      	ldr	r3, [r3, #12]
 800f1fe:	687a      	ldr	r2, [r7, #4]
 800f200:	429a      	cmp	r2, r3
 800f202:	d104      	bne.n	800f20e <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	68da      	ldr	r2, [r3, #12]
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	60da      	str	r2, [r3, #12]
        break;
 800f20c:	e005      	b.n	800f21a <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	68db      	ldr	r3, [r3, #12]
 800f212:	60fb      	str	r3, [r7, #12]
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d1eb      	bne.n	800f1f2 <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800f21a:	6879      	ldr	r1, [r7, #4]
 800f21c:	2000      	movs	r0, #0
 800f21e:	f7f9 fe7d 	bl	8008f1c <memp_free>
}
 800f222:	bf00      	nop
 800f224:	3710      	adds	r7, #16
 800f226:	46bd      	mov	sp, r7
 800f228:	bd80      	pop	{r7, pc}
 800f22a:	bf00      	nop
 800f22c:	2000b8dc 	.word	0x2000b8dc

0800f230 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800f230:	b580      	push	{r7, lr}
 800f232:	b082      	sub	sp, #8
 800f234:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800f236:	2000      	movs	r0, #0
 800f238:	f7f9 fe1e 	bl	8008e78 <memp_malloc>
 800f23c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d00a      	beq.n	800f25a <udp_new+0x2a>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800f244:	2228      	movs	r2, #40	; 0x28
 800f246:	2100      	movs	r1, #0
 800f248:	6878      	ldr	r0, [r7, #4]
 800f24a:	f009 f863 	bl	8018314 <memset>
    pcb->ttl = UDP_TTL;
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	22ff      	movs	r2, #255	; 0xff
 800f252:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	22ff      	movs	r2, #255	; 0xff
 800f258:	771a      	strb	r2, [r3, #28]
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800f25a:	687b      	ldr	r3, [r7, #4]
}
 800f25c:	4618      	mov	r0, r3
 800f25e:	3708      	adds	r7, #8
 800f260:	46bd      	mov	sp, r7
 800f262:	bd80      	pop	{r7, pc}

0800f264 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800f264:	b480      	push	{r7}
 800f266:	b085      	sub	sp, #20
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
 800f26c:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d01e      	beq.n	800f2b2 <udp_netif_ip_addr_changed+0x4e>
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d01a      	beq.n	800f2b2 <udp_netif_ip_addr_changed+0x4e>
 800f27c:	683b      	ldr	r3, [r7, #0]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d017      	beq.n	800f2b2 <udp_netif_ip_addr_changed+0x4e>
 800f282:	683b      	ldr	r3, [r7, #0]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d013      	beq.n	800f2b2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f28a:	4b0c      	ldr	r3, [pc, #48]	; (800f2bc <udp_netif_ip_addr_changed+0x58>)
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	60fb      	str	r3, [r7, #12]
 800f290:	e00c      	b.n	800f2ac <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	681a      	ldr	r2, [r3, #0]
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	429a      	cmp	r2, r3
 800f29c:	d103      	bne.n	800f2a6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800f29e:	683b      	ldr	r3, [r7, #0]
 800f2a0:	681a      	ldr	r2, [r3, #0]
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	68db      	ldr	r3, [r3, #12]
 800f2aa:	60fb      	str	r3, [r7, #12]
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d1ef      	bne.n	800f292 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800f2b2:	bf00      	nop
 800f2b4:	3714      	adds	r7, #20
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bc80      	pop	{r7}
 800f2ba:	4770      	bx	lr
 800f2bc:	2000b8dc 	.word	0x2000b8dc

0800f2c0 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b084      	sub	sp, #16
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	6a1b      	ldr	r3, [r3, #32]
 800f2cc:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800f2ce:	2108      	movs	r1, #8
 800f2d0:	68f8      	ldr	r0, [r7, #12]
 800f2d2:	f000 fe23 	bl	800ff1c <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	3328      	adds	r3, #40	; 0x28
 800f2da:	2200      	movs	r2, #0
 800f2dc:	4619      	mov	r1, r3
 800f2de:	6878      	ldr	r0, [r7, #4]
 800f2e0:	f001 fe5c 	bl	8010f9c <etharp_query>
 800f2e4:	4603      	mov	r3, r0
 800f2e6:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	7a9b      	ldrb	r3, [r3, #10]
 800f2ec:	2bff      	cmp	r3, #255	; 0xff
 800f2ee:	d005      	beq.n	800f2fc <dhcp_check+0x3c>
    dhcp->tries++;
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	7a9b      	ldrb	r3, [r3, #10]
 800f2f4:	3301      	adds	r3, #1
 800f2f6:	b2da      	uxtb	r2, r3
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	729a      	strb	r2, [r3, #10]
  }
  msecs = 500;
 800f2fc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800f300:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800f302:	893b      	ldrh	r3, [r7, #8]
 800f304:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f308:	4a06      	ldr	r2, [pc, #24]	; (800f324 <dhcp_check+0x64>)
 800f30a:	fb82 1203 	smull	r1, r2, r2, r3
 800f30e:	1152      	asrs	r2, r2, #5
 800f310:	17db      	asrs	r3, r3, #31
 800f312:	1ad3      	subs	r3, r2, r3
 800f314:	b29a      	uxth	r2, r3
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800f31a:	bf00      	nop
 800f31c:	3710      	adds	r7, #16
 800f31e:	46bd      	mov	sp, r7
 800f320:	bd80      	pop	{r7, pc}
 800f322:	bf00      	nop
 800f324:	10624dd3 	.word	0x10624dd3

0800f328 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b088      	sub	sp, #32
 800f32c:	af02      	add	r7, sp, #8
 800f32e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	6a1b      	ldr	r3, [r3, #32]
 800f334:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800f336:	2101      	movs	r1, #1
 800f338:	6938      	ldr	r0, [r7, #16]
 800f33a:	f000 fdef 	bl	800ff1c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800f33e:	2203      	movs	r2, #3
 800f340:	6939      	ldr	r1, [r7, #16]
 800f342:	6878      	ldr	r0, [r7, #4]
 800f344:	f000 fef6 	bl	8010134 <dhcp_create_msg>
 800f348:	4603      	mov	r3, r0
 800f34a:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800f34c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d159      	bne.n	800f408 <dhcp_select+0xe0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f354:	2202      	movs	r2, #2
 800f356:	2139      	movs	r1, #57	; 0x39
 800f358:	6938      	ldr	r0, [r7, #16]
 800f35a:	f000 fdf9 	bl	800ff50 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f362:	4619      	mov	r1, r3
 800f364:	6938      	ldr	r0, [r7, #16]
 800f366:	f000 fe55 	bl	8010014 <dhcp_option_short>

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 800f36a:	2204      	movs	r2, #4
 800f36c:	2132      	movs	r1, #50	; 0x32
 800f36e:	6938      	ldr	r0, [r7, #16]
 800f370:	f000 fdee 	bl	800ff50 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800f374:	693b      	ldr	r3, [r7, #16]
 800f376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f378:	4618      	mov	r0, r3
 800f37a:	f7f8 fe8c 	bl	8008096 <lwip_htonl>
 800f37e:	4603      	mov	r3, r0
 800f380:	4619      	mov	r1, r3
 800f382:	6938      	ldr	r0, [r7, #16]
 800f384:	f000 fe80 	bl	8010088 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 800f388:	2204      	movs	r2, #4
 800f38a:	2136      	movs	r1, #54	; 0x36
 800f38c:	6938      	ldr	r0, [r7, #16]
 800f38e:	f000 fddf 	bl	800ff50 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800f392:	693b      	ldr	r3, [r7, #16]
 800f394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f396:	4618      	mov	r0, r3
 800f398:	f7f8 fe7d 	bl	8008096 <lwip_htonl>
 800f39c:	4603      	mov	r3, r0
 800f39e:	4619      	mov	r1, r3
 800f3a0:	6938      	ldr	r0, [r7, #16]
 800f3a2:	f000 fe71 	bl	8010088 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f3a6:	2204      	movs	r2, #4
 800f3a8:	2137      	movs	r1, #55	; 0x37
 800f3aa:	6938      	ldr	r0, [r7, #16]
 800f3ac:	f000 fdd0 	bl	800ff50 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f3b0:	2300      	movs	r3, #0
 800f3b2:	75fb      	strb	r3, [r7, #23]
 800f3b4:	e009      	b.n	800f3ca <dhcp_select+0xa2>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800f3b6:	7dfb      	ldrb	r3, [r7, #23]
 800f3b8:	4a29      	ldr	r2, [pc, #164]	; (800f460 <dhcp_select+0x138>)
 800f3ba:	5cd3      	ldrb	r3, [r2, r3]
 800f3bc:	4619      	mov	r1, r3
 800f3be:	6938      	ldr	r0, [r7, #16]
 800f3c0:	f000 fe00 	bl	800ffc4 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f3c4:	7dfb      	ldrb	r3, [r7, #23]
 800f3c6:	3301      	adds	r3, #1
 800f3c8:	75fb      	strb	r3, [r7, #23]
 800f3ca:	7dfb      	ldrb	r3, [r7, #23]
 800f3cc:	2b03      	cmp	r3, #3
 800f3ce:	d9f2      	bls.n	800f3b6 <dhcp_select+0x8e>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 800f3d0:	6938      	ldr	r0, [r7, #16]
 800f3d2:	f001 f853 	bl	801047c <dhcp_option_trailer>
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800f3d6:	693b      	ldr	r3, [r7, #16]
 800f3d8:	68da      	ldr	r2, [r3, #12]
 800f3da:	693b      	ldr	r3, [r7, #16]
 800f3dc:	8a9b      	ldrh	r3, [r3, #20]
 800f3de:	33f0      	adds	r3, #240	; 0xf0
 800f3e0:	b29b      	uxth	r3, r3
 800f3e2:	4619      	mov	r1, r3
 800f3e4:	4610      	mov	r0, r2
 800f3e6:	f7fa f997 	bl	8009718 <pbuf_realloc>

    /* send broadcast to any DHCP server */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 800f3ea:	4b1e      	ldr	r3, [pc, #120]	; (800f464 <dhcp_select+0x13c>)
 800f3ec:	6818      	ldr	r0, [r3, #0]
 800f3ee:	693b      	ldr	r3, [r7, #16]
 800f3f0:	68d9      	ldr	r1, [r3, #12]
 800f3f2:	4b1d      	ldr	r3, [pc, #116]	; (800f468 <dhcp_select+0x140>)
 800f3f4:	9301      	str	r3, [sp, #4]
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	9300      	str	r3, [sp, #0]
 800f3fa:	2343      	movs	r3, #67	; 0x43
 800f3fc:	4a1b      	ldr	r2, [pc, #108]	; (800f46c <dhcp_select+0x144>)
 800f3fe:	f7ff fd97 	bl	800ef30 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 800f402:	6938      	ldr	r0, [r7, #16]
 800f404:	f000 fff8 	bl	80103f8 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800f408:	693b      	ldr	r3, [r7, #16]
 800f40a:	7a9b      	ldrb	r3, [r3, #10]
 800f40c:	2bff      	cmp	r3, #255	; 0xff
 800f40e:	d005      	beq.n	800f41c <dhcp_select+0xf4>
    dhcp->tries++;
 800f410:	693b      	ldr	r3, [r7, #16]
 800f412:	7a9b      	ldrb	r3, [r3, #10]
 800f414:	3301      	adds	r3, #1
 800f416:	b2da      	uxtb	r2, r3
 800f418:	693b      	ldr	r3, [r7, #16]
 800f41a:	729a      	strb	r2, [r3, #10]
  }
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 800f41c:	693b      	ldr	r3, [r7, #16]
 800f41e:	7a9b      	ldrb	r3, [r3, #10]
 800f420:	2b05      	cmp	r3, #5
 800f422:	d807      	bhi.n	800f434 <dhcp_select+0x10c>
 800f424:	693b      	ldr	r3, [r7, #16]
 800f426:	7a9b      	ldrb	r3, [r3, #10]
 800f428:	461a      	mov	r2, r3
 800f42a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f42e:	4093      	lsls	r3, r2
 800f430:	b29b      	uxth	r3, r3
 800f432:	e001      	b.n	800f438 <dhcp_select+0x110>
 800f434:	f64e 2360 	movw	r3, #60000	; 0xea60
 800f438:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800f43a:	89bb      	ldrh	r3, [r7, #12]
 800f43c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f440:	4a0b      	ldr	r2, [pc, #44]	; (800f470 <dhcp_select+0x148>)
 800f442:	fb82 1203 	smull	r1, r2, r2, r3
 800f446:	1152      	asrs	r2, r2, #5
 800f448:	17db      	asrs	r3, r3, #31
 800f44a:	1ad3      	subs	r3, r2, r3
 800f44c:	b29a      	uxth	r2, r3
 800f44e:	693b      	ldr	r3, [r7, #16]
 800f450:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f452:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f456:	4618      	mov	r0, r3
 800f458:	3718      	adds	r7, #24
 800f45a:	46bd      	mov	sp, r7
 800f45c:	bd80      	pop	{r7, pc}
 800f45e:	bf00      	nop
 800f460:	20000018 	.word	0x20000018
 800f464:	20004ad0 	.word	0x20004ad0
 800f468:	0801c8e0 	.word	0x0801c8e0
 800f46c:	0801c8e4 	.word	0x0801c8e4
 800f470:	10624dd3 	.word	0x10624dd3

0800f474 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800f474:	b580      	push	{r7, lr}
 800f476:	b082      	sub	sp, #8
 800f478:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 800f47a:	4b27      	ldr	r3, [pc, #156]	; (800f518 <dhcp_coarse_tmr+0xa4>)
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
 800f480:	e042      	b.n	800f508 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	6a1b      	ldr	r3, [r3, #32]
 800f486:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800f488:	683b      	ldr	r3, [r7, #0]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d039      	beq.n	800f502 <dhcp_coarse_tmr+0x8e>
 800f48e:	683b      	ldr	r3, [r7, #0]
 800f490:	7a5b      	ldrb	r3, [r3, #9]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d035      	beq.n	800f502 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800f496:	683b      	ldr	r3, [r7, #0]
 800f498:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d012      	beq.n	800f4c4 <dhcp_coarse_tmr+0x50>
 800f49e:	683b      	ldr	r3, [r7, #0]
 800f4a0:	8c1b      	ldrh	r3, [r3, #32]
 800f4a2:	3301      	adds	r3, #1
 800f4a4:	b29a      	uxth	r2, r3
 800f4a6:	683b      	ldr	r3, [r7, #0]
 800f4a8:	841a      	strh	r2, [r3, #32]
 800f4aa:	683b      	ldr	r3, [r7, #0]
 800f4ac:	8c1a      	ldrh	r2, [r3, #32]
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f4b2:	429a      	cmp	r2, r3
 800f4b4:	d106      	bne.n	800f4c4 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release(netif);
 800f4b6:	6878      	ldr	r0, [r7, #4]
 800f4b8:	f000 fca8 	bl	800fe0c <dhcp_release>
        dhcp_discover(netif);
 800f4bc:	6878      	ldr	r0, [r7, #4]
 800f4be:	f000 f99f 	bl	800f800 <dhcp_discover>
 800f4c2:	e01e      	b.n	800f502 <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800f4c4:	683b      	ldr	r3, [r7, #0]
 800f4c6:	8bdb      	ldrh	r3, [r3, #30]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d00b      	beq.n	800f4e4 <dhcp_coarse_tmr+0x70>
 800f4cc:	683b      	ldr	r3, [r7, #0]
 800f4ce:	8bdb      	ldrh	r3, [r3, #30]
 800f4d0:	1e5a      	subs	r2, r3, #1
 800f4d2:	b291      	uxth	r1, r2
 800f4d4:	683a      	ldr	r2, [r7, #0]
 800f4d6:	83d1      	strh	r1, [r2, #30]
 800f4d8:	2b01      	cmp	r3, #1
 800f4da:	d103      	bne.n	800f4e4 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800f4dc:	6878      	ldr	r0, [r7, #4]
 800f4de:	f000 f8c6 	bl	800f66e <dhcp_t2_timeout>
 800f4e2:	e00e      	b.n	800f502 <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800f4e4:	683b      	ldr	r3, [r7, #0]
 800f4e6:	8b9b      	ldrh	r3, [r3, #28]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d00a      	beq.n	800f502 <dhcp_coarse_tmr+0x8e>
 800f4ec:	683b      	ldr	r3, [r7, #0]
 800f4ee:	8b9b      	ldrh	r3, [r3, #28]
 800f4f0:	1e5a      	subs	r2, r3, #1
 800f4f2:	b291      	uxth	r1, r2
 800f4f4:	683a      	ldr	r2, [r7, #0]
 800f4f6:	8391      	strh	r1, [r2, #28]
 800f4f8:	2b01      	cmp	r3, #1
 800f4fa:	d102      	bne.n	800f502 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800f4fc:	6878      	ldr	r0, [r7, #4]
 800f4fe:	f000 f888 	bl	800f612 <dhcp_t1_timeout>
      }
    }
    /* proceed to next netif */
    netif = netif->next;
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d1b9      	bne.n	800f482 <dhcp_coarse_tmr+0xe>
  }
}
 800f50e:	bf00      	nop
 800f510:	3708      	adds	r7, #8
 800f512:	46bd      	mov	sp, r7
 800f514:	bd80      	pop	{r7, pc}
 800f516:	bf00      	nop
 800f518:	2000b8b4 	.word	0x2000b8b4

0800f51c <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800f51c:	b580      	push	{r7, lr}
 800f51e:	b082      	sub	sp, #8
 800f520:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 800f522:	4b16      	ldr	r3, [pc, #88]	; (800f57c <dhcp_fine_tmr+0x60>)
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	607b      	str	r3, [r7, #4]
  /* loop through netif's */
  while (netif != NULL) {
 800f528:	e020      	b.n	800f56c <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	6a1b      	ldr	r3, [r3, #32]
 800f52e:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800f530:	683b      	ldr	r3, [r7, #0]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d017      	beq.n	800f566 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800f536:	683b      	ldr	r3, [r7, #0]
 800f538:	8adb      	ldrh	r3, [r3, #22]
 800f53a:	2b01      	cmp	r3, #1
 800f53c:	d906      	bls.n	800f54c <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800f53e:	683b      	ldr	r3, [r7, #0]
 800f540:	8adb      	ldrh	r3, [r3, #22]
 800f542:	3b01      	subs	r3, #1
 800f544:	b29a      	uxth	r2, r3
 800f546:	683b      	ldr	r3, [r7, #0]
 800f548:	82da      	strh	r2, [r3, #22]
 800f54a:	e00c      	b.n	800f566 <dhcp_fine_tmr+0x4a>
      }
      else if (dhcp->request_timeout == 1) {
 800f54c:	683b      	ldr	r3, [r7, #0]
 800f54e:	8adb      	ldrh	r3, [r3, #22]
 800f550:	2b01      	cmp	r3, #1
 800f552:	d108      	bne.n	800f566 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800f554:	683b      	ldr	r3, [r7, #0]
 800f556:	8adb      	ldrh	r3, [r3, #22]
 800f558:	3b01      	subs	r3, #1
 800f55a:	b29a      	uxth	r2, r3
 800f55c:	683b      	ldr	r3, [r7, #0]
 800f55e:	82da      	strh	r2, [r3, #22]
        /* { netif->dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800f560:	6878      	ldr	r0, [r7, #4]
 800f562:	f000 f80d 	bl	800f580 <dhcp_timeout>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d1db      	bne.n	800f52a <dhcp_fine_tmr+0xe>
  }
}
 800f572:	bf00      	nop
 800f574:	3708      	adds	r7, #8
 800f576:	46bd      	mov	sp, r7
 800f578:	bd80      	pop	{r7, pc}
 800f57a:	bf00      	nop
 800f57c:	2000b8b4 	.word	0x2000b8b4

0800f580 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800f580:	b580      	push	{r7, lr}
 800f582:	b084      	sub	sp, #16
 800f584:	af00      	add	r7, sp, #0
 800f586:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	6a1b      	ldr	r3, [r3, #32]
 800f58c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	7a5b      	ldrb	r3, [r3, #9]
 800f592:	2b0c      	cmp	r3, #12
 800f594:	d003      	beq.n	800f59e <dhcp_timeout+0x1e>
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	7a5b      	ldrb	r3, [r3, #9]
 800f59a:	2b06      	cmp	r3, #6
 800f59c:	d103      	bne.n	800f5a6 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800f59e:	6878      	ldr	r0, [r7, #4]
 800f5a0:	f000 f92e 	bl	800f800 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800f5a4:	e031      	b.n	800f60a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	7a5b      	ldrb	r3, [r3, #9]
 800f5aa:	2b01      	cmp	r3, #1
 800f5ac:	d10e      	bne.n	800f5cc <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	7a9b      	ldrb	r3, [r3, #10]
 800f5b2:	2b05      	cmp	r3, #5
 800f5b4:	d803      	bhi.n	800f5be <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800f5b6:	6878      	ldr	r0, [r7, #4]
 800f5b8:	f7ff feb6 	bl	800f328 <dhcp_select>
}
 800f5bc:	e025      	b.n	800f60a <dhcp_timeout+0x8a>
      dhcp_release(netif);
 800f5be:	6878      	ldr	r0, [r7, #4]
 800f5c0:	f000 fc24 	bl	800fe0c <dhcp_release>
      dhcp_discover(netif);
 800f5c4:	6878      	ldr	r0, [r7, #4]
 800f5c6:	f000 f91b 	bl	800f800 <dhcp_discover>
}
 800f5ca:	e01e      	b.n	800f60a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	7a5b      	ldrb	r3, [r3, #9]
 800f5d0:	2b08      	cmp	r3, #8
 800f5d2:	d10b      	bne.n	800f5ec <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	7a9b      	ldrb	r3, [r3, #10]
 800f5d8:	2b01      	cmp	r3, #1
 800f5da:	d803      	bhi.n	800f5e4 <dhcp_timeout+0x64>
      dhcp_check(netif);
 800f5dc:	6878      	ldr	r0, [r7, #4]
 800f5de:	f7ff fe6f 	bl	800f2c0 <dhcp_check>
}
 800f5e2:	e012      	b.n	800f60a <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800f5e4:	6878      	ldr	r0, [r7, #4]
 800f5e6:	f000 f997 	bl	800f918 <dhcp_bind>
}
 800f5ea:	e00e      	b.n	800f60a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	7a5b      	ldrb	r3, [r3, #9]
 800f5f0:	2b03      	cmp	r3, #3
 800f5f2:	d10a      	bne.n	800f60a <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800f5f4:	68fb      	ldr	r3, [r7, #12]
 800f5f6:	7a9b      	ldrb	r3, [r3, #10]
 800f5f8:	2b01      	cmp	r3, #1
 800f5fa:	d803      	bhi.n	800f604 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800f5fc:	6878      	ldr	r0, [r7, #4]
 800f5fe:	f000 fb71 	bl	800fce4 <dhcp_reboot>
}
 800f602:	e002      	b.n	800f60a <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800f604:	6878      	ldr	r0, [r7, #4]
 800f606:	f000 f8fb 	bl	800f800 <dhcp_discover>
}
 800f60a:	bf00      	nop
 800f60c:	3710      	adds	r7, #16
 800f60e:	46bd      	mov	sp, r7
 800f610:	bd80      	pop	{r7, pc}

0800f612 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800f612:	b580      	push	{r7, lr}
 800f614:	b084      	sub	sp, #16
 800f616:	af00      	add	r7, sp, #0
 800f618:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	6a1b      	ldr	r3, [r3, #32]
 800f61e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	7a5b      	ldrb	r3, [r3, #9]
 800f624:	2b01      	cmp	r3, #1
 800f626:	d007      	beq.n	800f638 <dhcp_t1_timeout+0x26>
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	7a5b      	ldrb	r3, [r3, #9]
 800f62c:	2b0a      	cmp	r3, #10
 800f62e:	d003      	beq.n	800f638 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800f634:	2b05      	cmp	r3, #5
 800f636:	d116      	bne.n	800f666 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800f638:	6878      	ldr	r0, [r7, #4]
 800f63a:	f000 fa47 	bl	800facc <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	8b5b      	ldrh	r3, [r3, #26]
 800f642:	461a      	mov	r2, r3
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	8c1b      	ldrh	r3, [r3, #32]
 800f648:	1ad3      	subs	r3, r2, r3
 800f64a:	2b01      	cmp	r3, #1
 800f64c:	dd0b      	ble.n	800f666 <dhcp_t1_timeout+0x54>
    {
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	8b5b      	ldrh	r3, [r3, #26]
 800f652:	461a      	mov	r2, r3
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	8c1b      	ldrh	r3, [r3, #32]
 800f658:	1ad3      	subs	r3, r2, r3
 800f65a:	0fda      	lsrs	r2, r3, #31
 800f65c:	4413      	add	r3, r2
 800f65e:	105b      	asrs	r3, r3, #1
 800f660:	b29a      	uxth	r2, r3
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	839a      	strh	r2, [r3, #28]
    }
  }
}
 800f666:	bf00      	nop
 800f668:	3710      	adds	r7, #16
 800f66a:	46bd      	mov	sp, r7
 800f66c:	bd80      	pop	{r7, pc}

0800f66e <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800f66e:	b580      	push	{r7, lr}
 800f670:	b084      	sub	sp, #16
 800f672:	af00      	add	r7, sp, #0
 800f674:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	6a1b      	ldr	r3, [r3, #32]
 800f67a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	7a5b      	ldrb	r3, [r3, #9]
 800f680:	2b01      	cmp	r3, #1
 800f682:	d00b      	beq.n	800f69c <dhcp_t2_timeout+0x2e>
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	7a5b      	ldrb	r3, [r3, #9]
 800f688:	2b0a      	cmp	r3, #10
 800f68a:	d007      	beq.n	800f69c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800f690:	2b05      	cmp	r3, #5
 800f692:	d003      	beq.n	800f69c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	7a5b      	ldrb	r3, [r3, #9]
 800f698:	2b04      	cmp	r3, #4
 800f69a:	d116      	bne.n	800f6ca <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800f69c:	6878      	ldr	r0, [r7, #4]
 800f69e:	f000 fa9b 	bl	800fbd8 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f6a6:	461a      	mov	r2, r3
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	8c1b      	ldrh	r3, [r3, #32]
 800f6ac:	1ad3      	subs	r3, r2, r3
 800f6ae:	2b01      	cmp	r3, #1
 800f6b0:	dd0b      	ble.n	800f6ca <dhcp_t2_timeout+0x5c>
    {
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f6b6:	461a      	mov	r2, r3
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	8c1b      	ldrh	r3, [r3, #32]
 800f6bc:	1ad3      	subs	r3, r2, r3
 800f6be:	0fda      	lsrs	r2, r3, #31
 800f6c0:	4413      	add	r3, r2
 800f6c2:	105b      	asrs	r3, r3, #1
 800f6c4:	b29a      	uxth	r2, r3
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	83da      	strh	r2, [r3, #30]
    }
  }
}
 800f6ca:	bf00      	nop
 800f6cc:	3710      	adds	r7, #16
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	bd80      	pop	{r7, pc}
	...

0800f6d4 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b084      	sub	sp, #16
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
 800f6dc:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d107      	bne.n	800f6f4 <dhcp_arp_reply+0x20>
 800f6e4:	4b0e      	ldr	r3, [pc, #56]	; (800f720 <dhcp_arp_reply+0x4c>)
 800f6e6:	f240 327b 	movw	r2, #891	; 0x37b
 800f6ea:	490e      	ldr	r1, [pc, #56]	; (800f724 <dhcp_arp_reply+0x50>)
 800f6ec:	480e      	ldr	r0, [pc, #56]	; (800f728 <dhcp_arp_reply+0x54>)
 800f6ee:	f008 fe19 	bl	8018324 <iprintf>
 800f6f2:	e012      	b.n	800f71a <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	6a1b      	ldr	r3, [r3, #32]
 800f6f8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d00c      	beq.n	800f71a <dhcp_arp_reply+0x46>
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	7a5b      	ldrb	r3, [r3, #9]
 800f704:	2b08      	cmp	r3, #8
 800f706:	d108      	bne.n	800f71a <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800f708:	683b      	ldr	r3, [r7, #0]
 800f70a:	681a      	ldr	r2, [r3, #0]
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f710:	429a      	cmp	r2, r3
 800f712:	d102      	bne.n	800f71a <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800f714:	6878      	ldr	r0, [r7, #4]
 800f716:	f000 f809 	bl	800f72c <dhcp_decline>
    }
  }
}
 800f71a:	3710      	adds	r7, #16
 800f71c:	46bd      	mov	sp, r7
 800f71e:	bd80      	pop	{r7, pc}
 800f720:	0801ab50 	.word	0x0801ab50
 800f724:	0801abfc 	.word	0x0801abfc
 800f728:	0801abb0 	.word	0x0801abb0

0800f72c <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b086      	sub	sp, #24
 800f730:	af02      	add	r7, sp, #8
 800f732:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	6a1b      	ldr	r3, [r3, #32]
 800f738:	60fb      	str	r3, [r7, #12]
  err_t result = ERR_OK;
 800f73a:	2300      	movs	r3, #0
 800f73c:	72fb      	strb	r3, [r7, #11]
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800f73e:	210c      	movs	r1, #12
 800f740:	68f8      	ldr	r0, [r7, #12]
 800f742:	f000 fbeb 	bl	800ff1c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 800f746:	2204      	movs	r2, #4
 800f748:	68f9      	ldr	r1, [r7, #12]
 800f74a:	6878      	ldr	r0, [r7, #4]
 800f74c:	f000 fcf2 	bl	8010134 <dhcp_create_msg>
 800f750:	4603      	mov	r3, r0
 800f752:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
 800f754:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d12a      	bne.n	800f7b2 <dhcp_decline+0x86>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 800f75c:	2204      	movs	r2, #4
 800f75e:	2132      	movs	r1, #50	; 0x32
 800f760:	68f8      	ldr	r0, [r7, #12]
 800f762:	f000 fbf5 	bl	800ff50 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f76a:	4618      	mov	r0, r3
 800f76c:	f7f8 fc93 	bl	8008096 <lwip_htonl>
 800f770:	4603      	mov	r3, r0
 800f772:	4619      	mov	r1, r3
 800f774:	68f8      	ldr	r0, [r7, #12]
 800f776:	f000 fc87 	bl	8010088 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 800f77a:	68f8      	ldr	r0, [r7, #12]
 800f77c:	f000 fe7e 	bl	801047c <dhcp_option_trailer>
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	68da      	ldr	r2, [r3, #12]
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	8a9b      	ldrh	r3, [r3, #20]
 800f788:	33f0      	adds	r3, #240	; 0xf0
 800f78a:	b29b      	uxth	r3, r3
 800f78c:	4619      	mov	r1, r3
 800f78e:	4610      	mov	r0, r2
 800f790:	f7f9 ffc2 	bl	8009718 <pbuf_realloc>

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 800f794:	4b16      	ldr	r3, [pc, #88]	; (800f7f0 <dhcp_decline+0xc4>)
 800f796:	6818      	ldr	r0, [r3, #0]
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	68d9      	ldr	r1, [r3, #12]
 800f79c:	4b15      	ldr	r3, [pc, #84]	; (800f7f4 <dhcp_decline+0xc8>)
 800f79e:	9301      	str	r3, [sp, #4]
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	9300      	str	r3, [sp, #0]
 800f7a4:	2343      	movs	r3, #67	; 0x43
 800f7a6:	4a14      	ldr	r2, [pc, #80]	; (800f7f8 <dhcp_decline+0xcc>)
 800f7a8:	f7ff fbc2 	bl	800ef30 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 800f7ac:	68f8      	ldr	r0, [r7, #12]
 800f7ae:	f000 fe23 	bl	80103f8 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	7a9b      	ldrb	r3, [r3, #10]
 800f7b6:	2bff      	cmp	r3, #255	; 0xff
 800f7b8:	d005      	beq.n	800f7c6 <dhcp_decline+0x9a>
    dhcp->tries++;
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	7a9b      	ldrb	r3, [r3, #10]
 800f7be:	3301      	adds	r3, #1
 800f7c0:	b2da      	uxtb	r2, r3
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	729a      	strb	r2, [r3, #10]
  }
  msecs = 10*1000;
 800f7c6:	f242 7310 	movw	r3, #10000	; 0x2710
 800f7ca:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800f7cc:	893b      	ldrh	r3, [r7, #8]
 800f7ce:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f7d2:	4a0a      	ldr	r2, [pc, #40]	; (800f7fc <dhcp_decline+0xd0>)
 800f7d4:	fb82 1203 	smull	r1, r2, r2, r3
 800f7d8:	1152      	asrs	r2, r2, #5
 800f7da:	17db      	asrs	r3, r3, #31
 800f7dc:	1ad3      	subs	r3, r2, r3
 800f7de:	b29a      	uxth	r2, r3
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f7e4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	3710      	adds	r7, #16
 800f7ec:	46bd      	mov	sp, r7
 800f7ee:	bd80      	pop	{r7, pc}
 800f7f0:	20004ad0 	.word	0x20004ad0
 800f7f4:	0801c8e0 	.word	0x0801c8e0
 800f7f8:	0801c8e4 	.word	0x0801c8e4
 800f7fc:	10624dd3 	.word	0x10624dd3

0800f800 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800f800:	b580      	push	{r7, lr}
 800f802:	b088      	sub	sp, #32
 800f804:	af02      	add	r7, sp, #8
 800f806:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	6a1b      	ldr	r3, [r3, #32]
 800f80c:	613b      	str	r3, [r7, #16]
  err_t result = ERR_OK;
 800f80e:	2300      	movs	r3, #0
 800f810:	73fb      	strb	r3, [r7, #15]
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800f812:	693b      	ldr	r3, [r7, #16]
 800f814:	2200      	movs	r2, #0
 800f816:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800f818:	2106      	movs	r1, #6
 800f81a:	6938      	ldr	r0, [r7, #16]
 800f81c:	f000 fb7e 	bl	800ff1c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 800f820:	2201      	movs	r2, #1
 800f822:	6939      	ldr	r1, [r7, #16]
 800f824:	6878      	ldr	r0, [r7, #4]
 800f826:	f000 fc85 	bl	8010134 <dhcp_create_msg>
 800f82a:	4603      	mov	r3, r0
 800f82c:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800f82e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d13b      	bne.n	800f8ae <dhcp_discover+0xae>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800f836:	2202      	movs	r2, #2
 800f838:	2139      	movs	r1, #57	; 0x39
 800f83a:	6938      	ldr	r0, [r7, #16]
 800f83c:	f000 fb88 	bl	800ff50 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f844:	4619      	mov	r1, r3
 800f846:	6938      	ldr	r0, [r7, #16]
 800f848:	f000 fbe4 	bl	8010014 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800f84c:	2204      	movs	r2, #4
 800f84e:	2137      	movs	r1, #55	; 0x37
 800f850:	6938      	ldr	r0, [r7, #16]
 800f852:	f000 fb7d 	bl	800ff50 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f856:	2300      	movs	r3, #0
 800f858:	75fb      	strb	r3, [r7, #23]
 800f85a:	e009      	b.n	800f870 <dhcp_discover+0x70>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800f85c:	7dfb      	ldrb	r3, [r7, #23]
 800f85e:	4a29      	ldr	r2, [pc, #164]	; (800f904 <dhcp_discover+0x104>)
 800f860:	5cd3      	ldrb	r3, [r2, r3]
 800f862:	4619      	mov	r1, r3
 800f864:	6938      	ldr	r0, [r7, #16]
 800f866:	f000 fbad 	bl	800ffc4 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800f86a:	7dfb      	ldrb	r3, [r7, #23]
 800f86c:	3301      	adds	r3, #1
 800f86e:	75fb      	strb	r3, [r7, #23]
 800f870:	7dfb      	ldrb	r3, [r7, #23]
 800f872:	2b03      	cmp	r3, #3
 800f874:	d9f2      	bls.n	800f85c <dhcp_discover+0x5c>
    }
    dhcp_option_trailer(dhcp);
 800f876:	6938      	ldr	r0, [r7, #16]
 800f878:	f000 fe00 	bl	801047c <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800f87c:	693b      	ldr	r3, [r7, #16]
 800f87e:	68da      	ldr	r2, [r3, #12]
 800f880:	693b      	ldr	r3, [r7, #16]
 800f882:	8a9b      	ldrh	r3, [r3, #20]
 800f884:	33f0      	adds	r3, #240	; 0xf0
 800f886:	b29b      	uxth	r3, r3
 800f888:	4619      	mov	r1, r3
 800f88a:	4610      	mov	r0, r2
 800f88c:	f7f9 ff44 	bl	8009718 <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 800f890:	4b1d      	ldr	r3, [pc, #116]	; (800f908 <dhcp_discover+0x108>)
 800f892:	6818      	ldr	r0, [r3, #0]
 800f894:	693b      	ldr	r3, [r7, #16]
 800f896:	68d9      	ldr	r1, [r3, #12]
 800f898:	4b1c      	ldr	r3, [pc, #112]	; (800f90c <dhcp_discover+0x10c>)
 800f89a:	9301      	str	r3, [sp, #4]
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	9300      	str	r3, [sp, #0]
 800f8a0:	2343      	movs	r3, #67	; 0x43
 800f8a2:	4a1b      	ldr	r2, [pc, #108]	; (800f910 <dhcp_discover+0x110>)
 800f8a4:	f7ff fb44 	bl	800ef30 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
 800f8a8:	6938      	ldr	r0, [r7, #16]
 800f8aa:	f000 fda5 	bl	80103f8 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800f8ae:	693b      	ldr	r3, [r7, #16]
 800f8b0:	7a9b      	ldrb	r3, [r3, #10]
 800f8b2:	2bff      	cmp	r3, #255	; 0xff
 800f8b4:	d005      	beq.n	800f8c2 <dhcp_discover+0xc2>
    dhcp->tries++;
 800f8b6:	693b      	ldr	r3, [r7, #16]
 800f8b8:	7a9b      	ldrb	r3, [r3, #10]
 800f8ba:	3301      	adds	r3, #1
 800f8bc:	b2da      	uxtb	r2, r3
 800f8be:	693b      	ldr	r3, [r7, #16]
 800f8c0:	729a      	strb	r2, [r3, #10]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 800f8c2:	693b      	ldr	r3, [r7, #16]
 800f8c4:	7a9b      	ldrb	r3, [r3, #10]
 800f8c6:	2b05      	cmp	r3, #5
 800f8c8:	d807      	bhi.n	800f8da <dhcp_discover+0xda>
 800f8ca:	693b      	ldr	r3, [r7, #16]
 800f8cc:	7a9b      	ldrb	r3, [r3, #10]
 800f8ce:	461a      	mov	r2, r3
 800f8d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f8d4:	4093      	lsls	r3, r2
 800f8d6:	b29b      	uxth	r3, r3
 800f8d8:	e001      	b.n	800f8de <dhcp_discover+0xde>
 800f8da:	f64e 2360 	movw	r3, #60000	; 0xea60
 800f8de:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800f8e0:	89bb      	ldrh	r3, [r7, #12]
 800f8e2:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800f8e6:	4a0b      	ldr	r2, [pc, #44]	; (800f914 <dhcp_discover+0x114>)
 800f8e8:	fb82 1203 	smull	r1, r2, r2, r3
 800f8ec:	1152      	asrs	r2, r2, #5
 800f8ee:	17db      	asrs	r3, r3, #31
 800f8f0:	1ad3      	subs	r3, r2, r3
 800f8f2:	b29a      	uxth	r2, r3
 800f8f4:	693b      	ldr	r3, [r7, #16]
 800f8f6:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800f8f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	3718      	adds	r7, #24
 800f900:	46bd      	mov	sp, r7
 800f902:	bd80      	pop	{r7, pc}
 800f904:	20000018 	.word	0x20000018
 800f908:	20004ad0 	.word	0x20004ad0
 800f90c:	0801c8e0 	.word	0x0801c8e0
 800f910:	0801c8e4 	.word	0x0801c8e4
 800f914:	10624dd3 	.word	0x10624dd3

0800f918 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800f918:	b580      	push	{r7, lr}
 800f91a:	b088      	sub	sp, #32
 800f91c:	af00      	add	r7, sp, #0
 800f91e:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	2b00      	cmp	r3, #0
 800f924:	d107      	bne.n	800f936 <dhcp_bind+0x1e>
 800f926:	4b64      	ldr	r3, [pc, #400]	; (800fab8 <dhcp_bind+0x1a0>)
 800f928:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800f92c:	4963      	ldr	r1, [pc, #396]	; (800fabc <dhcp_bind+0x1a4>)
 800f92e:	4864      	ldr	r0, [pc, #400]	; (800fac0 <dhcp_bind+0x1a8>)
 800f930:	f008 fcf8 	bl	8018324 <iprintf>
 800f934:	e0bc      	b.n	800fab0 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	6a1b      	ldr	r3, [r3, #32]
 800f93a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800f93c:	69bb      	ldr	r3, [r7, #24]
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d107      	bne.n	800f952 <dhcp_bind+0x3a>
 800f942:	4b5d      	ldr	r3, [pc, #372]	; (800fab8 <dhcp_bind+0x1a0>)
 800f944:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f948:	495e      	ldr	r1, [pc, #376]	; (800fac4 <dhcp_bind+0x1ac>)
 800f94a:	485d      	ldr	r0, [pc, #372]	; (800fac0 <dhcp_bind+0x1a8>)
 800f94c:	f008 fcea 	bl	8018324 <iprintf>
 800f950:	e0ae      	b.n	800fab0 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800f952:	69bb      	ldr	r3, [r7, #24]
 800f954:	2200      	movs	r2, #0
 800f956:	841a      	strh	r2, [r3, #32]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800f958:	69bb      	ldr	r3, [r7, #24]
 800f95a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f95c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f960:	d019      	beq.n	800f996 <dhcp_bind+0x7e>
     /* set renewal period timer */
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800f962:	69bb      	ldr	r3, [r7, #24]
 800f964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f966:	331e      	adds	r3, #30
 800f968:	4a57      	ldr	r2, [pc, #348]	; (800fac8 <dhcp_bind+0x1b0>)
 800f96a:	fba2 2303 	umull	r2, r3, r2, r3
 800f96e:	095b      	lsrs	r3, r3, #5
 800f970:	61fb      	str	r3, [r7, #28]
     if (timeout > 0xffff) {
 800f972:	69fb      	ldr	r3, [r7, #28]
 800f974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f978:	d302      	bcc.n	800f980 <dhcp_bind+0x68>
       timeout = 0xffff;
 800f97a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f97e:	61fb      	str	r3, [r7, #28]
     }
     dhcp->t0_timeout = (u16_t)timeout;
 800f980:	69fb      	ldr	r3, [r7, #28]
 800f982:	b29a      	uxth	r2, r3
 800f984:	69bb      	ldr	r3, [r7, #24]
 800f986:	845a      	strh	r2, [r3, #34]	; 0x22
     if (dhcp->t0_timeout == 0) {
 800f988:	69bb      	ldr	r3, [r7, #24]
 800f98a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d102      	bne.n	800f996 <dhcp_bind+0x7e>
       dhcp->t0_timeout = 1;
 800f990:	69bb      	ldr	r3, [r7, #24]
 800f992:	2201      	movs	r2, #1
 800f994:	845a      	strh	r2, [r3, #34]	; 0x22
     }
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease*1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800f996:	69bb      	ldr	r3, [r7, #24]
 800f998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f99a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f99e:	d01d      	beq.n	800f9dc <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800f9a0:	69bb      	ldr	r3, [r7, #24]
 800f9a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9a4:	331e      	adds	r3, #30
 800f9a6:	4a48      	ldr	r2, [pc, #288]	; (800fac8 <dhcp_bind+0x1b0>)
 800f9a8:	fba2 2303 	umull	r2, r3, r2, r3
 800f9ac:	095b      	lsrs	r3, r3, #5
 800f9ae:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800f9b0:	69fb      	ldr	r3, [r7, #28]
 800f9b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f9b6:	d302      	bcc.n	800f9be <dhcp_bind+0xa6>
      timeout = 0xffff;
 800f9b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f9bc:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800f9be:	69fb      	ldr	r3, [r7, #28]
 800f9c0:	b29a      	uxth	r2, r3
 800f9c2:	69bb      	ldr	r3, [r7, #24]
 800f9c4:	831a      	strh	r2, [r3, #24]
    if (dhcp->t1_timeout == 0) {
 800f9c6:	69bb      	ldr	r3, [r7, #24]
 800f9c8:	8b1b      	ldrh	r3, [r3, #24]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d102      	bne.n	800f9d4 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800f9ce:	69bb      	ldr	r3, [r7, #24]
 800f9d0:	2201      	movs	r2, #1
 800f9d2:	831a      	strh	r2, [r3, #24]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800f9d4:	69bb      	ldr	r3, [r7, #24]
 800f9d6:	8b1a      	ldrh	r2, [r3, #24]
 800f9d8:	69bb      	ldr	r3, [r7, #24]
 800f9da:	839a      	strh	r2, [r3, #28]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800f9dc:	69bb      	ldr	r3, [r7, #24]
 800f9de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f9e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9e4:	d01d      	beq.n	800fa22 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800f9e6:	69bb      	ldr	r3, [r7, #24]
 800f9e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f9ea:	331e      	adds	r3, #30
 800f9ec:	4a36      	ldr	r2, [pc, #216]	; (800fac8 <dhcp_bind+0x1b0>)
 800f9ee:	fba2 2303 	umull	r2, r3, r2, r3
 800f9f2:	095b      	lsrs	r3, r3, #5
 800f9f4:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800f9f6:	69fb      	ldr	r3, [r7, #28]
 800f9f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f9fc:	d302      	bcc.n	800fa04 <dhcp_bind+0xec>
      timeout = 0xffff;
 800f9fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fa02:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800fa04:	69fb      	ldr	r3, [r7, #28]
 800fa06:	b29a      	uxth	r2, r3
 800fa08:	69bb      	ldr	r3, [r7, #24]
 800fa0a:	835a      	strh	r2, [r3, #26]
    if (dhcp->t2_timeout == 0) {
 800fa0c:	69bb      	ldr	r3, [r7, #24]
 800fa0e:	8b5b      	ldrh	r3, [r3, #26]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d102      	bne.n	800fa1a <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 800fa14:	69bb      	ldr	r3, [r7, #24]
 800fa16:	2201      	movs	r2, #1
 800fa18:	835a      	strh	r2, [r3, #26]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800fa1a:	69bb      	ldr	r3, [r7, #24]
 800fa1c:	8b5a      	ldrh	r2, [r3, #26]
 800fa1e:	69bb      	ldr	r3, [r7, #24]
 800fa20:	83da      	strh	r2, [r3, #30]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800fa22:	69bb      	ldr	r3, [r7, #24]
 800fa24:	8b1a      	ldrh	r2, [r3, #24]
 800fa26:	69bb      	ldr	r3, [r7, #24]
 800fa28:	8b5b      	ldrh	r3, [r3, #26]
 800fa2a:	429a      	cmp	r2, r3
 800fa2c:	d306      	bcc.n	800fa3c <dhcp_bind+0x124>
 800fa2e:	69bb      	ldr	r3, [r7, #24]
 800fa30:	8b5b      	ldrh	r3, [r3, #26]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d002      	beq.n	800fa3c <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 800fa36:	69bb      	ldr	r3, [r7, #24]
 800fa38:	2200      	movs	r2, #0
 800fa3a:	831a      	strh	r2, [r3, #24]
  }

  if (dhcp->subnet_mask_given) {
 800fa3c:	69bb      	ldr	r3, [r7, #24]
 800fa3e:	7adb      	ldrb	r3, [r3, #11]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d003      	beq.n	800fa4c <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800fa44:	69bb      	ldr	r3, [r7, #24]
 800fa46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa48:	613b      	str	r3, [r7, #16]
 800fa4a:	e014      	b.n	800fa76 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800fa4c:	69bb      	ldr	r3, [r7, #24]
 800fa4e:	3328      	adds	r3, #40	; 0x28
 800fa50:	781b      	ldrb	r3, [r3, #0]
 800fa52:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800fa54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	db02      	blt.n	800fa62 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800fa5c:	23ff      	movs	r3, #255	; 0xff
 800fa5e:	613b      	str	r3, [r7, #16]
 800fa60:	e009      	b.n	800fa76 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 800fa62:	7dfb      	ldrb	r3, [r7, #23]
 800fa64:	2bbf      	cmp	r3, #191	; 0xbf
 800fa66:	d903      	bls.n	800fa70 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800fa68:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800fa6c:	613b      	str	r3, [r7, #16]
 800fa6e:	e002      	b.n	800fa76 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800fa70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fa74:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800fa76:	69bb      	ldr	r3, [r7, #24]
 800fa78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa7a:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d108      	bne.n	800fa94 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800fa82:	69bb      	ldr	r3, [r7, #24]
 800fa84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fa86:	693b      	ldr	r3, [r7, #16]
 800fa88:	4013      	ands	r3, r2
 800fa8a:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800fa92:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800fa94:	210a      	movs	r1, #10
 800fa96:	69b8      	ldr	r0, [r7, #24]
 800fa98:	f000 fa40 	bl	800ff1c <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800fa9c:	69bb      	ldr	r3, [r7, #24]
 800fa9e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800faa2:	f107 030c 	add.w	r3, r7, #12
 800faa6:	f107 0210 	add.w	r2, r7, #16
 800faaa:	6878      	ldr	r0, [r7, #4]
 800faac:	f7f9 face 	bl	800904c <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800fab0:	3720      	adds	r7, #32
 800fab2:	46bd      	mov	sp, r7
 800fab4:	bd80      	pop	{r7, pc}
 800fab6:	bf00      	nop
 800fab8:	0801ab50 	.word	0x0801ab50
 800fabc:	0801ac90 	.word	0x0801ac90
 800fac0:	0801abb0 	.word	0x0801abb0
 800fac4:	0801acac 	.word	0x0801acac
 800fac8:	88888889 	.word	0x88888889

0800facc <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800facc:	b580      	push	{r7, lr}
 800face:	b088      	sub	sp, #32
 800fad0:	af02      	add	r7, sp, #8
 800fad2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	6a1b      	ldr	r3, [r3, #32]
 800fad8:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800fada:	2105      	movs	r1, #5
 800fadc:	6938      	ldr	r0, [r7, #16]
 800fade:	f000 fa1d 	bl	800ff1c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800fae2:	2203      	movs	r2, #3
 800fae4:	6939      	ldr	r1, [r7, #16]
 800fae6:	6878      	ldr	r0, [r7, #4]
 800fae8:	f000 fb24 	bl	8010134 <dhcp_create_msg>
 800faec:	4603      	mov	r3, r0
 800faee:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800faf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d13b      	bne.n	800fb70 <dhcp_renew+0xa4>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800faf8:	2202      	movs	r2, #2
 800fafa:	2139      	movs	r1, #57	; 0x39
 800fafc:	6938      	ldr	r0, [r7, #16]
 800fafe:	f000 fa27 	bl	800ff50 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fb06:	4619      	mov	r1, r3
 800fb08:	6938      	ldr	r0, [r7, #16]
 800fb0a:	f000 fa83 	bl	8010014 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800fb0e:	2204      	movs	r2, #4
 800fb10:	2137      	movs	r1, #55	; 0x37
 800fb12:	6938      	ldr	r0, [r7, #16]
 800fb14:	f000 fa1c 	bl	800ff50 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fb18:	2300      	movs	r3, #0
 800fb1a:	75fb      	strb	r3, [r7, #23]
 800fb1c:	e009      	b.n	800fb32 <dhcp_renew+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800fb1e:	7dfb      	ldrb	r3, [r7, #23]
 800fb20:	4a2a      	ldr	r2, [pc, #168]	; (800fbcc <dhcp_renew+0x100>)
 800fb22:	5cd3      	ldrb	r3, [r2, r3]
 800fb24:	4619      	mov	r1, r3
 800fb26:	6938      	ldr	r0, [r7, #16]
 800fb28:	f000 fa4c 	bl	800ffc4 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fb2c:	7dfb      	ldrb	r3, [r7, #23]
 800fb2e:	3301      	adds	r3, #1
 800fb30:	75fb      	strb	r3, [r7, #23]
 800fb32:	7dfb      	ldrb	r3, [r7, #23]
 800fb34:	2b03      	cmp	r3, #3
 800fb36:	d9f2      	bls.n	800fb1e <dhcp_renew+0x52>
#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
 800fb38:	6938      	ldr	r0, [r7, #16]
 800fb3a:	f000 fc9f 	bl	801047c <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800fb3e:	693b      	ldr	r3, [r7, #16]
 800fb40:	68da      	ldr	r2, [r3, #12]
 800fb42:	693b      	ldr	r3, [r7, #16]
 800fb44:	8a9b      	ldrh	r3, [r3, #20]
 800fb46:	33f0      	adds	r3, #240	; 0xf0
 800fb48:	b29b      	uxth	r3, r3
 800fb4a:	4619      	mov	r1, r3
 800fb4c:	4610      	mov	r0, r2
 800fb4e:	f7f9 fde3 	bl	8009718 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 800fb52:	4b1f      	ldr	r3, [pc, #124]	; (800fbd0 <dhcp_renew+0x104>)
 800fb54:	6818      	ldr	r0, [r3, #0]
 800fb56:	693b      	ldr	r3, [r7, #16]
 800fb58:	68d9      	ldr	r1, [r3, #12]
 800fb5a:	693b      	ldr	r3, [r7, #16]
 800fb5c:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	9300      	str	r3, [sp, #0]
 800fb64:	2343      	movs	r3, #67	; 0x43
 800fb66:	f7ff f9a5 	bl	800eeb4 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800fb6a:	6938      	ldr	r0, [r7, #16]
 800fb6c:	f000 fc44 	bl	80103f8 <dhcp_delete_msg>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800fb70:	693b      	ldr	r3, [r7, #16]
 800fb72:	7a9b      	ldrb	r3, [r3, #10]
 800fb74:	2bff      	cmp	r3, #255	; 0xff
 800fb76:	d005      	beq.n	800fb84 <dhcp_renew+0xb8>
    dhcp->tries++;
 800fb78:	693b      	ldr	r3, [r7, #16]
 800fb7a:	7a9b      	ldrb	r3, [r3, #10]
 800fb7c:	3301      	adds	r3, #1
 800fb7e:	b2da      	uxtb	r2, r3
 800fb80:	693b      	ldr	r3, [r7, #16]
 800fb82:	729a      	strb	r2, [r3, #10]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 800fb84:	693b      	ldr	r3, [r7, #16]
 800fb86:	7a9b      	ldrb	r3, [r3, #10]
 800fb88:	2b09      	cmp	r3, #9
 800fb8a:	d80a      	bhi.n	800fba2 <dhcp_renew+0xd6>
 800fb8c:	693b      	ldr	r3, [r7, #16]
 800fb8e:	7a9b      	ldrb	r3, [r3, #10]
 800fb90:	b29b      	uxth	r3, r3
 800fb92:	461a      	mov	r2, r3
 800fb94:	0152      	lsls	r2, r2, #5
 800fb96:	1ad2      	subs	r2, r2, r3
 800fb98:	0092      	lsls	r2, r2, #2
 800fb9a:	4413      	add	r3, r2
 800fb9c:	011b      	lsls	r3, r3, #4
 800fb9e:	b29b      	uxth	r3, r3
 800fba0:	e001      	b.n	800fba6 <dhcp_renew+0xda>
 800fba2:	f644 6320 	movw	r3, #20000	; 0x4e20
 800fba6:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800fba8:	89bb      	ldrh	r3, [r7, #12]
 800fbaa:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800fbae:	4a09      	ldr	r2, [pc, #36]	; (800fbd4 <dhcp_renew+0x108>)
 800fbb0:	fb82 1203 	smull	r1, r2, r2, r3
 800fbb4:	1152      	asrs	r2, r2, #5
 800fbb6:	17db      	asrs	r3, r3, #31
 800fbb8:	1ad3      	subs	r3, r2, r3
 800fbba:	b29a      	uxth	r2, r3
 800fbbc:	693b      	ldr	r3, [r7, #16]
 800fbbe:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800fbc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	3718      	adds	r7, #24
 800fbc8:	46bd      	mov	sp, r7
 800fbca:	bd80      	pop	{r7, pc}
 800fbcc:	20000018 	.word	0x20000018
 800fbd0:	20004ad0 	.word	0x20004ad0
 800fbd4:	10624dd3 	.word	0x10624dd3

0800fbd8 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800fbd8:	b580      	push	{r7, lr}
 800fbda:	b088      	sub	sp, #32
 800fbdc:	af02      	add	r7, sp, #8
 800fbde:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	6a1b      	ldr	r3, [r3, #32]
 800fbe4:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800fbe6:	2104      	movs	r1, #4
 800fbe8:	6938      	ldr	r0, [r7, #16]
 800fbea:	f000 f997 	bl	800ff1c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800fbee:	2203      	movs	r2, #3
 800fbf0:	6939      	ldr	r1, [r7, #16]
 800fbf2:	6878      	ldr	r0, [r7, #4]
 800fbf4:	f000 fa9e 	bl	8010134 <dhcp_create_msg>
 800fbf8:	4603      	mov	r3, r0
 800fbfa:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800fbfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d139      	bne.n	800fc78 <dhcp_rebind+0xa0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800fc04:	2202      	movs	r2, #2
 800fc06:	2139      	movs	r1, #57	; 0x39
 800fc08:	6938      	ldr	r0, [r7, #16]
 800fc0a:	f000 f9a1 	bl	800ff50 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fc12:	4619      	mov	r1, r3
 800fc14:	6938      	ldr	r0, [r7, #16]
 800fc16:	f000 f9fd 	bl	8010014 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800fc1a:	2204      	movs	r2, #4
 800fc1c:	2137      	movs	r1, #55	; 0x37
 800fc1e:	6938      	ldr	r0, [r7, #16]
 800fc20:	f000 f996 	bl	800ff50 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fc24:	2300      	movs	r3, #0
 800fc26:	75fb      	strb	r3, [r7, #23]
 800fc28:	e009      	b.n	800fc3e <dhcp_rebind+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800fc2a:	7dfb      	ldrb	r3, [r7, #23]
 800fc2c:	4a29      	ldr	r2, [pc, #164]	; (800fcd4 <dhcp_rebind+0xfc>)
 800fc2e:	5cd3      	ldrb	r3, [r2, r3]
 800fc30:	4619      	mov	r1, r3
 800fc32:	6938      	ldr	r0, [r7, #16]
 800fc34:	f000 f9c6 	bl	800ffc4 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fc38:	7dfb      	ldrb	r3, [r7, #23]
 800fc3a:	3301      	adds	r3, #1
 800fc3c:	75fb      	strb	r3, [r7, #23]
 800fc3e:	7dfb      	ldrb	r3, [r7, #23]
 800fc40:	2b03      	cmp	r3, #3
 800fc42:	d9f2      	bls.n	800fc2a <dhcp_rebind+0x52>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 800fc44:	6938      	ldr	r0, [r7, #16]
 800fc46:	f000 fc19 	bl	801047c <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800fc4a:	693b      	ldr	r3, [r7, #16]
 800fc4c:	68da      	ldr	r2, [r3, #12]
 800fc4e:	693b      	ldr	r3, [r7, #16]
 800fc50:	8a9b      	ldrh	r3, [r3, #20]
 800fc52:	33f0      	adds	r3, #240	; 0xf0
 800fc54:	b29b      	uxth	r3, r3
 800fc56:	4619      	mov	r1, r3
 800fc58:	4610      	mov	r0, r2
 800fc5a:	f7f9 fd5d 	bl	8009718 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 800fc5e:	4b1e      	ldr	r3, [pc, #120]	; (800fcd8 <dhcp_rebind+0x100>)
 800fc60:	6818      	ldr	r0, [r3, #0]
 800fc62:	693b      	ldr	r3, [r7, #16]
 800fc64:	68d9      	ldr	r1, [r3, #12]
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	9300      	str	r3, [sp, #0]
 800fc6a:	2343      	movs	r3, #67	; 0x43
 800fc6c:	4a1b      	ldr	r2, [pc, #108]	; (800fcdc <dhcp_rebind+0x104>)
 800fc6e:	f7ff f921 	bl	800eeb4 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800fc72:	6938      	ldr	r0, [r7, #16]
 800fc74:	f000 fbc0 	bl	80103f8 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800fc78:	693b      	ldr	r3, [r7, #16]
 800fc7a:	7a9b      	ldrb	r3, [r3, #10]
 800fc7c:	2bff      	cmp	r3, #255	; 0xff
 800fc7e:	d005      	beq.n	800fc8c <dhcp_rebind+0xb4>
    dhcp->tries++;
 800fc80:	693b      	ldr	r3, [r7, #16]
 800fc82:	7a9b      	ldrb	r3, [r3, #10]
 800fc84:	3301      	adds	r3, #1
 800fc86:	b2da      	uxtb	r2, r3
 800fc88:	693b      	ldr	r3, [r7, #16]
 800fc8a:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 800fc8c:	693b      	ldr	r3, [r7, #16]
 800fc8e:	7a9b      	ldrb	r3, [r3, #10]
 800fc90:	2b09      	cmp	r3, #9
 800fc92:	d80a      	bhi.n	800fcaa <dhcp_rebind+0xd2>
 800fc94:	693b      	ldr	r3, [r7, #16]
 800fc96:	7a9b      	ldrb	r3, [r3, #10]
 800fc98:	b29b      	uxth	r3, r3
 800fc9a:	461a      	mov	r2, r3
 800fc9c:	0152      	lsls	r2, r2, #5
 800fc9e:	1ad2      	subs	r2, r2, r3
 800fca0:	0092      	lsls	r2, r2, #2
 800fca2:	4413      	add	r3, r2
 800fca4:	00db      	lsls	r3, r3, #3
 800fca6:	b29b      	uxth	r3, r3
 800fca8:	e001      	b.n	800fcae <dhcp_rebind+0xd6>
 800fcaa:	f242 7310 	movw	r3, #10000	; 0x2710
 800fcae:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800fcb0:	89bb      	ldrh	r3, [r7, #12]
 800fcb2:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800fcb6:	4a0a      	ldr	r2, [pc, #40]	; (800fce0 <dhcp_rebind+0x108>)
 800fcb8:	fb82 1203 	smull	r1, r2, r2, r3
 800fcbc:	1152      	asrs	r2, r2, #5
 800fcbe:	17db      	asrs	r3, r3, #31
 800fcc0:	1ad3      	subs	r3, r2, r3
 800fcc2:	b29a      	uxth	r2, r3
 800fcc4:	693b      	ldr	r3, [r7, #16]
 800fcc6:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800fcc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fccc:	4618      	mov	r0, r3
 800fcce:	3718      	adds	r7, #24
 800fcd0:	46bd      	mov	sp, r7
 800fcd2:	bd80      	pop	{r7, pc}
 800fcd4:	20000018 	.word	0x20000018
 800fcd8:	20004ad0 	.word	0x20004ad0
 800fcdc:	0801c8e4 	.word	0x0801c8e4
 800fce0:	10624dd3 	.word	0x10624dd3

0800fce4 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800fce4:	b580      	push	{r7, lr}
 800fce6:	b088      	sub	sp, #32
 800fce8:	af02      	add	r7, sp, #8
 800fcea:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	6a1b      	ldr	r3, [r3, #32]
 800fcf0:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800fcf2:	2103      	movs	r1, #3
 800fcf4:	6938      	ldr	r0, [r7, #16]
 800fcf6:	f000 f911 	bl	800ff1c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800fcfa:	2203      	movs	r2, #3
 800fcfc:	6939      	ldr	r1, [r7, #16]
 800fcfe:	6878      	ldr	r0, [r7, #4]
 800fd00:	f000 fa18 	bl	8010134 <dhcp_create_msg>
 800fd04:	4603      	mov	r3, r0
 800fd06:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800fd08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d147      	bne.n	800fda0 <dhcp_reboot+0xbc>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800fd10:	2202      	movs	r2, #2
 800fd12:	2139      	movs	r1, #57	; 0x39
 800fd14:	6938      	ldr	r0, [r7, #16]
 800fd16:	f000 f91b 	bl	800ff50 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800fd1a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fd1e:	6938      	ldr	r0, [r7, #16]
 800fd20:	f000 f978 	bl	8010014 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 800fd24:	2204      	movs	r2, #4
 800fd26:	2132      	movs	r1, #50	; 0x32
 800fd28:	6938      	ldr	r0, [r7, #16]
 800fd2a:	f000 f911 	bl	800ff50 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800fd2e:	693b      	ldr	r3, [r7, #16]
 800fd30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd32:	4618      	mov	r0, r3
 800fd34:	f7f8 f9af 	bl	8008096 <lwip_htonl>
 800fd38:	4603      	mov	r3, r0
 800fd3a:	4619      	mov	r1, r3
 800fd3c:	6938      	ldr	r0, [r7, #16]
 800fd3e:	f000 f9a3 	bl	8010088 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800fd42:	2204      	movs	r2, #4
 800fd44:	2137      	movs	r1, #55	; 0x37
 800fd46:	6938      	ldr	r0, [r7, #16]
 800fd48:	f000 f902 	bl	800ff50 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	75fb      	strb	r3, [r7, #23]
 800fd50:	e009      	b.n	800fd66 <dhcp_reboot+0x82>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800fd52:	7dfb      	ldrb	r3, [r7, #23]
 800fd54:	4a29      	ldr	r2, [pc, #164]	; (800fdfc <dhcp_reboot+0x118>)
 800fd56:	5cd3      	ldrb	r3, [r2, r3]
 800fd58:	4619      	mov	r1, r3
 800fd5a:	6938      	ldr	r0, [r7, #16]
 800fd5c:	f000 f932 	bl	800ffc4 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fd60:	7dfb      	ldrb	r3, [r7, #23]
 800fd62:	3301      	adds	r3, #1
 800fd64:	75fb      	strb	r3, [r7, #23]
 800fd66:	7dfb      	ldrb	r3, [r7, #23]
 800fd68:	2b03      	cmp	r3, #3
 800fd6a:	d9f2      	bls.n	800fd52 <dhcp_reboot+0x6e>
    }

    dhcp_option_trailer(dhcp);
 800fd6c:	6938      	ldr	r0, [r7, #16]
 800fd6e:	f000 fb85 	bl	801047c <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800fd72:	693b      	ldr	r3, [r7, #16]
 800fd74:	68da      	ldr	r2, [r3, #12]
 800fd76:	693b      	ldr	r3, [r7, #16]
 800fd78:	8a9b      	ldrh	r3, [r3, #20]
 800fd7a:	33f0      	adds	r3, #240	; 0xf0
 800fd7c:	b29b      	uxth	r3, r3
 800fd7e:	4619      	mov	r1, r3
 800fd80:	4610      	mov	r0, r2
 800fd82:	f7f9 fcc9 	bl	8009718 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 800fd86:	4b1e      	ldr	r3, [pc, #120]	; (800fe00 <dhcp_reboot+0x11c>)
 800fd88:	6818      	ldr	r0, [r3, #0]
 800fd8a:	693b      	ldr	r3, [r7, #16]
 800fd8c:	68d9      	ldr	r1, [r3, #12]
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	9300      	str	r3, [sp, #0]
 800fd92:	2343      	movs	r3, #67	; 0x43
 800fd94:	4a1b      	ldr	r2, [pc, #108]	; (800fe04 <dhcp_reboot+0x120>)
 800fd96:	f7ff f88d 	bl	800eeb4 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800fd9a:	6938      	ldr	r0, [r7, #16]
 800fd9c:	f000 fb2c 	bl	80103f8 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800fda0:	693b      	ldr	r3, [r7, #16]
 800fda2:	7a9b      	ldrb	r3, [r3, #10]
 800fda4:	2bff      	cmp	r3, #255	; 0xff
 800fda6:	d005      	beq.n	800fdb4 <dhcp_reboot+0xd0>
    dhcp->tries++;
 800fda8:	693b      	ldr	r3, [r7, #16]
 800fdaa:	7a9b      	ldrb	r3, [r3, #10]
 800fdac:	3301      	adds	r3, #1
 800fdae:	b2da      	uxtb	r2, r3
 800fdb0:	693b      	ldr	r3, [r7, #16]
 800fdb2:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 800fdb4:	693b      	ldr	r3, [r7, #16]
 800fdb6:	7a9b      	ldrb	r3, [r3, #10]
 800fdb8:	2b09      	cmp	r3, #9
 800fdba:	d80a      	bhi.n	800fdd2 <dhcp_reboot+0xee>
 800fdbc:	693b      	ldr	r3, [r7, #16]
 800fdbe:	7a9b      	ldrb	r3, [r3, #10]
 800fdc0:	b29b      	uxth	r3, r3
 800fdc2:	461a      	mov	r2, r3
 800fdc4:	0152      	lsls	r2, r2, #5
 800fdc6:	1ad2      	subs	r2, r2, r3
 800fdc8:	0092      	lsls	r2, r2, #2
 800fdca:	4413      	add	r3, r2
 800fdcc:	00db      	lsls	r3, r3, #3
 800fdce:	b29b      	uxth	r3, r3
 800fdd0:	e001      	b.n	800fdd6 <dhcp_reboot+0xf2>
 800fdd2:	f242 7310 	movw	r3, #10000	; 0x2710
 800fdd6:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800fdd8:	89bb      	ldrh	r3, [r7, #12]
 800fdda:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800fdde:	4a0a      	ldr	r2, [pc, #40]	; (800fe08 <dhcp_reboot+0x124>)
 800fde0:	fb82 1203 	smull	r1, r2, r2, r3
 800fde4:	1152      	asrs	r2, r2, #5
 800fde6:	17db      	asrs	r3, r3, #31
 800fde8:	1ad3      	subs	r3, r2, r3
 800fdea:	b29a      	uxth	r2, r3
 800fdec:	693b      	ldr	r3, [r7, #16]
 800fdee:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800fdf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	3718      	adds	r7, #24
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	bd80      	pop	{r7, pc}
 800fdfc:	20000018 	.word	0x20000018
 800fe00:	20004ad0 	.word	0x20004ad0
 800fe04:	0801c8e4 	.word	0x0801c8e4
 800fe08:	10624dd3 	.word	0x10624dd3

0800fe0c <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	b088      	sub	sp, #32
 800fe10:	af02      	add	r7, sp, #8
 800fe12:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	6a1b      	ldr	r3, [r3, #32]
 800fe18:	617b      	str	r3, [r7, #20]
  err_t result;
  ip_addr_t server_ip_addr;
  u8_t is_dhcp_supplied_address;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
  if (dhcp == NULL) {
 800fe1a:	697b      	ldr	r3, [r7, #20]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d102      	bne.n	800fe26 <dhcp_release+0x1a>
    return ERR_ARG;
 800fe20:	f06f 030f 	mvn.w	r3, #15
 800fe24:	e072      	b.n	800ff0c <dhcp_release+0x100>
  }
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800fe26:	697b      	ldr	r3, [r7, #20]
 800fe28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe2a:	60fb      	str	r3, [r7, #12]

  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 800fe2c:	6878      	ldr	r0, [r7, #4]
 800fe2e:	f000 fb7f 	bl	8010530 <dhcp_supplied_address>
 800fe32:	4603      	mov	r3, r0
 800fe34:	74fb      	strb	r3, [r7, #19]

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800fe36:	2100      	movs	r1, #0
 800fe38:	6978      	ldr	r0, [r7, #20]
 800fe3a:	f000 f86f 	bl	800ff1c <dhcp_set_state>
  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800fe3e:	697b      	ldr	r3, [r7, #20]
 800fe40:	2200      	movs	r2, #0
 800fe42:	625a      	str	r2, [r3, #36]	; 0x24
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800fe44:	697b      	ldr	r3, [r7, #20]
 800fe46:	2200      	movs	r2, #0
 800fe48:	629a      	str	r2, [r3, #40]	; 0x28
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800fe4a:	697b      	ldr	r3, [r7, #20]
 800fe4c:	2200      	movs	r2, #0
 800fe4e:	62da      	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800fe50:	697b      	ldr	r3, [r7, #20]
 800fe52:	2200      	movs	r2, #0
 800fe54:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800fe56:	697b      	ldr	r3, [r7, #20]
 800fe58:	2200      	movs	r2, #0
 800fe5a:	63da      	str	r2, [r3, #60]	; 0x3c
 800fe5c:	697b      	ldr	r3, [r7, #20]
 800fe5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fe60:	697b      	ldr	r3, [r7, #20]
 800fe62:	639a      	str	r2, [r3, #56]	; 0x38
 800fe64:	697b      	ldr	r3, [r7, #20]
 800fe66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fe68:	697b      	ldr	r3, [r7, #20]
 800fe6a:	635a      	str	r2, [r3, #52]	; 0x34
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800fe6c:	697b      	ldr	r3, [r7, #20]
 800fe6e:	2200      	movs	r2, #0
 800fe70:	845a      	strh	r2, [r3, #34]	; 0x22
 800fe72:	697b      	ldr	r3, [r7, #20]
 800fe74:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800fe76:	697b      	ldr	r3, [r7, #20]
 800fe78:	841a      	strh	r2, [r3, #32]
 800fe7a:	697b      	ldr	r3, [r7, #20]
 800fe7c:	8c1a      	ldrh	r2, [r3, #32]
 800fe7e:	697b      	ldr	r3, [r7, #20]
 800fe80:	83da      	strh	r2, [r3, #30]
 800fe82:	697b      	ldr	r3, [r7, #20]
 800fe84:	8bda      	ldrh	r2, [r3, #30]
 800fe86:	697b      	ldr	r3, [r7, #20]
 800fe88:	839a      	strh	r2, [r3, #28]

  if (!is_dhcp_supplied_address) {
 800fe8a:	7cfb      	ldrb	r3, [r7, #19]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d101      	bne.n	800fe94 <dhcp_release+0x88>
    /* don't issue release message when address is not dhcp-assigned */
    return ERR_OK;
 800fe90:	2300      	movs	r3, #0
 800fe92:	e03b      	b.n	800ff0c <dhcp_release+0x100>
  }

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 800fe94:	2207      	movs	r2, #7
 800fe96:	6979      	ldr	r1, [r7, #20]
 800fe98:	6878      	ldr	r0, [r7, #4]
 800fe9a:	f000 f94b 	bl	8010134 <dhcp_create_msg>
 800fe9e:	4603      	mov	r3, r0
 800fea0:	74bb      	strb	r3, [r7, #18]
  if (result == ERR_OK) {
 800fea2:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d128      	bne.n	800fefc <dhcp_release+0xf0>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 800feaa:	2204      	movs	r2, #4
 800feac:	2136      	movs	r1, #54	; 0x36
 800feae:	6978      	ldr	r0, [r7, #20]
 800feb0:	f000 f84e 	bl	800ff50 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	4618      	mov	r0, r3
 800feb8:	f7f8 f8ed 	bl	8008096 <lwip_htonl>
 800febc:	4603      	mov	r3, r0
 800febe:	4619      	mov	r1, r3
 800fec0:	6978      	ldr	r0, [r7, #20]
 800fec2:	f000 f8e1 	bl	8010088 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 800fec6:	6978      	ldr	r0, [r7, #20]
 800fec8:	f000 fad8 	bl	801047c <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800fecc:	697b      	ldr	r3, [r7, #20]
 800fece:	68da      	ldr	r2, [r3, #12]
 800fed0:	697b      	ldr	r3, [r7, #20]
 800fed2:	8a9b      	ldrh	r3, [r3, #20]
 800fed4:	33f0      	adds	r3, #240	; 0xf0
 800fed6:	b29b      	uxth	r3, r3
 800fed8:	4619      	mov	r1, r3
 800feda:	4610      	mov	r0, r2
 800fedc:	f7f9 fc1c 	bl	8009718 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
 800fee0:	4b0c      	ldr	r3, [pc, #48]	; (800ff14 <dhcp_release+0x108>)
 800fee2:	6818      	ldr	r0, [r3, #0]
 800fee4:	697b      	ldr	r3, [r7, #20]
 800fee6:	68d9      	ldr	r1, [r3, #12]
 800fee8:	f107 020c 	add.w	r2, r7, #12
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	9300      	str	r3, [sp, #0]
 800fef0:	2343      	movs	r3, #67	; 0x43
 800fef2:	f7fe ffdf 	bl	800eeb4 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800fef6:	6978      	ldr	r0, [r7, #20]
 800fef8:	f000 fa7e 	bl	80103f8 <dhcp_delete_msg>
  } else {
    /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800fefc:	4b06      	ldr	r3, [pc, #24]	; (800ff18 <dhcp_release+0x10c>)
 800fefe:	4a06      	ldr	r2, [pc, #24]	; (800ff18 <dhcp_release+0x10c>)
 800ff00:	4905      	ldr	r1, [pc, #20]	; (800ff18 <dhcp_release+0x10c>)
 800ff02:	6878      	ldr	r0, [r7, #4]
 800ff04:	f7f9 f8a2 	bl	800904c <netif_set_addr>

  return result;
 800ff08:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	3718      	adds	r7, #24
 800ff10:	46bd      	mov	sp, r7
 800ff12:	bd80      	pop	{r7, pc}
 800ff14:	20004ad0 	.word	0x20004ad0
 800ff18:	0801c8e0 	.word	0x0801c8e0

0800ff1c <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 800ff1c:	b480      	push	{r7}
 800ff1e:	b083      	sub	sp, #12
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	6078      	str	r0, [r7, #4]
 800ff24:	460b      	mov	r3, r1
 800ff26:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	7a5b      	ldrb	r3, [r3, #9]
 800ff2c:	78fa      	ldrb	r2, [r7, #3]
 800ff2e:	429a      	cmp	r2, r3
 800ff30:	d008      	beq.n	800ff44 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	78fa      	ldrb	r2, [r7, #3]
 800ff36:	725a      	strb	r2, [r3, #9]
    dhcp->tries = 0;
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	729a      	strb	r2, [r3, #10]
    dhcp->request_timeout = 0;
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	2200      	movs	r2, #0
 800ff42:	82da      	strh	r2, [r3, #22]
  }
}
 800ff44:	bf00      	nop
 800ff46:	370c      	adds	r7, #12
 800ff48:	46bd      	mov	sp, r7
 800ff4a:	bc80      	pop	{r7}
 800ff4c:	4770      	bx	lr
	...

0800ff50 <dhcp_option>:
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b082      	sub	sp, #8
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
 800ff58:	460b      	mov	r3, r1
 800ff5a:	70fb      	strb	r3, [r7, #3]
 800ff5c:	4613      	mov	r3, r2
 800ff5e:	70bb      	strb	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	8a9b      	ldrh	r3, [r3, #20]
 800ff64:	461a      	mov	r2, r3
 800ff66:	78bb      	ldrb	r3, [r7, #2]
 800ff68:	4413      	add	r3, r2
 800ff6a:	3302      	adds	r3, #2
 800ff6c:	2b44      	cmp	r3, #68	; 0x44
 800ff6e:	d906      	bls.n	800ff7e <dhcp_option+0x2e>
 800ff70:	4b11      	ldr	r3, [pc, #68]	; (800ffb8 <dhcp_option+0x68>)
 800ff72:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800ff76:	4911      	ldr	r1, [pc, #68]	; (800ffbc <dhcp_option+0x6c>)
 800ff78:	4811      	ldr	r0, [pc, #68]	; (800ffc0 <dhcp_option+0x70>)
 800ff7a:	f008 f9d3 	bl	8018324 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	691a      	ldr	r2, [r3, #16]
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	8a9b      	ldrh	r3, [r3, #20]
 800ff86:	1c59      	adds	r1, r3, #1
 800ff88:	b288      	uxth	r0, r1
 800ff8a:	6879      	ldr	r1, [r7, #4]
 800ff8c:	8288      	strh	r0, [r1, #20]
 800ff8e:	4413      	add	r3, r2
 800ff90:	78fa      	ldrb	r2, [r7, #3]
 800ff92:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	691a      	ldr	r2, [r3, #16]
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	8a9b      	ldrh	r3, [r3, #20]
 800ff9e:	1c59      	adds	r1, r3, #1
 800ffa0:	b288      	uxth	r0, r1
 800ffa2:	6879      	ldr	r1, [r7, #4]
 800ffa4:	8288      	strh	r0, [r1, #20]
 800ffa6:	4413      	add	r3, r2
 800ffa8:	78ba      	ldrb	r2, [r7, #2]
 800ffaa:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 800ffae:	bf00      	nop
 800ffb0:	3708      	adds	r7, #8
 800ffb2:	46bd      	mov	sp, r7
 800ffb4:	bd80      	pop	{r7, pc}
 800ffb6:	bf00      	nop
 800ffb8:	0801ab50 	.word	0x0801ab50
 800ffbc:	0801ace0 	.word	0x0801ace0
 800ffc0:	0801abb0 	.word	0x0801abb0

0800ffc4 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b082      	sub	sp, #8
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	6078      	str	r0, [r7, #4]
 800ffcc:	460b      	mov	r3, r1
 800ffce:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	8a9b      	ldrh	r3, [r3, #20]
 800ffd4:	2b43      	cmp	r3, #67	; 0x43
 800ffd6:	d906      	bls.n	800ffe6 <dhcp_option_byte+0x22>
 800ffd8:	4b0b      	ldr	r3, [pc, #44]	; (8010008 <dhcp_option_byte+0x44>)
 800ffda:	f240 527b 	movw	r2, #1403	; 0x57b
 800ffde:	490b      	ldr	r1, [pc, #44]	; (801000c <dhcp_option_byte+0x48>)
 800ffe0:	480b      	ldr	r0, [pc, #44]	; (8010010 <dhcp_option_byte+0x4c>)
 800ffe2:	f008 f99f 	bl	8018324 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	691a      	ldr	r2, [r3, #16]
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	8a9b      	ldrh	r3, [r3, #20]
 800ffee:	1c59      	adds	r1, r3, #1
 800fff0:	b288      	uxth	r0, r1
 800fff2:	6879      	ldr	r1, [r7, #4]
 800fff4:	8288      	strh	r0, [r1, #20]
 800fff6:	4413      	add	r3, r2
 800fff8:	78fa      	ldrb	r2, [r7, #3]
 800fffa:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 800fffe:	bf00      	nop
 8010000:	3708      	adds	r7, #8
 8010002:	46bd      	mov	sp, r7
 8010004:	bd80      	pop	{r7, pc}
 8010006:	bf00      	nop
 8010008:	0801ab50 	.word	0x0801ab50
 801000c:	0801ad28 	.word	0x0801ad28
 8010010:	0801abb0 	.word	0x0801abb0

08010014 <dhcp_option_short>:

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
 8010014:	b590      	push	{r4, r7, lr}
 8010016:	b083      	sub	sp, #12
 8010018:	af00      	add	r7, sp, #0
 801001a:	6078      	str	r0, [r7, #4]
 801001c:	460b      	mov	r3, r1
 801001e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	8a9b      	ldrh	r3, [r3, #20]
 8010024:	3302      	adds	r3, #2
 8010026:	2b44      	cmp	r3, #68	; 0x44
 8010028:	d906      	bls.n	8010038 <dhcp_option_short+0x24>
 801002a:	4b14      	ldr	r3, [pc, #80]	; (801007c <dhcp_option_short+0x68>)
 801002c:	f240 5282 	movw	r2, #1410	; 0x582
 8010030:	4913      	ldr	r1, [pc, #76]	; (8010080 <dhcp_option_short+0x6c>)
 8010032:	4814      	ldr	r0, [pc, #80]	; (8010084 <dhcp_option_short+0x70>)
 8010034:	f008 f976 	bl	8018324 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8010038:	887b      	ldrh	r3, [r7, #2]
 801003a:	0a1b      	lsrs	r3, r3, #8
 801003c:	b298      	uxth	r0, r3
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	691a      	ldr	r2, [r3, #16]
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	8a9b      	ldrh	r3, [r3, #20]
 8010046:	1c59      	adds	r1, r3, #1
 8010048:	b28c      	uxth	r4, r1
 801004a:	6879      	ldr	r1, [r7, #4]
 801004c:	828c      	strh	r4, [r1, #20]
 801004e:	b2c1      	uxtb	r1, r0
 8010050:	4413      	add	r3, r2
 8010052:	460a      	mov	r2, r1
 8010054:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	691a      	ldr	r2, [r3, #16]
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	8a9b      	ldrh	r3, [r3, #20]
 8010060:	1c59      	adds	r1, r3, #1
 8010062:	b288      	uxth	r0, r1
 8010064:	6879      	ldr	r1, [r7, #4]
 8010066:	8288      	strh	r0, [r1, #20]
 8010068:	8879      	ldrh	r1, [r7, #2]
 801006a:	b2c9      	uxtb	r1, r1
 801006c:	4413      	add	r3, r2
 801006e:	460a      	mov	r2, r1
 8010070:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 8010074:	bf00      	nop
 8010076:	370c      	adds	r7, #12
 8010078:	46bd      	mov	sp, r7
 801007a:	bd90      	pop	{r4, r7, pc}
 801007c:	0801ab50 	.word	0x0801ab50
 8010080:	0801ad64 	.word	0x0801ad64
 8010084:	0801abb0 	.word	0x0801abb0

08010088 <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
 8010088:	b590      	push	{r4, r7, lr}
 801008a:	b083      	sub	sp, #12
 801008c:	af00      	add	r7, sp, #0
 801008e:	6078      	str	r0, [r7, #4]
 8010090:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	8a9b      	ldrh	r3, [r3, #20]
 8010096:	3304      	adds	r3, #4
 8010098:	2b44      	cmp	r3, #68	; 0x44
 801009a:	d906      	bls.n	80100aa <dhcp_option_long+0x22>
 801009c:	4b22      	ldr	r3, [pc, #136]	; (8010128 <dhcp_option_long+0xa0>)
 801009e:	f240 528a 	movw	r2, #1418	; 0x58a
 80100a2:	4922      	ldr	r1, [pc, #136]	; (801012c <dhcp_option_long+0xa4>)
 80100a4:	4822      	ldr	r0, [pc, #136]	; (8010130 <dhcp_option_long+0xa8>)
 80100a6:	f008 f93d 	bl	8018324 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80100aa:	683b      	ldr	r3, [r7, #0]
 80100ac:	0e18      	lsrs	r0, r3, #24
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	691a      	ldr	r2, [r3, #16]
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	8a9b      	ldrh	r3, [r3, #20]
 80100b6:	1c59      	adds	r1, r3, #1
 80100b8:	b28c      	uxth	r4, r1
 80100ba:	6879      	ldr	r1, [r7, #4]
 80100bc:	828c      	strh	r4, [r1, #20]
 80100be:	b2c1      	uxtb	r1, r0
 80100c0:	4413      	add	r3, r2
 80100c2:	460a      	mov	r2, r1
 80100c4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80100c8:	683b      	ldr	r3, [r7, #0]
 80100ca:	0c18      	lsrs	r0, r3, #16
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	691a      	ldr	r2, [r3, #16]
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	8a9b      	ldrh	r3, [r3, #20]
 80100d4:	1c59      	adds	r1, r3, #1
 80100d6:	b28c      	uxth	r4, r1
 80100d8:	6879      	ldr	r1, [r7, #4]
 80100da:	828c      	strh	r4, [r1, #20]
 80100dc:	b2c1      	uxtb	r1, r0
 80100de:	4413      	add	r3, r2
 80100e0:	460a      	mov	r2, r1
 80100e2:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80100e6:	683b      	ldr	r3, [r7, #0]
 80100e8:	0a18      	lsrs	r0, r3, #8
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	691a      	ldr	r2, [r3, #16]
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	8a9b      	ldrh	r3, [r3, #20]
 80100f2:	1c59      	adds	r1, r3, #1
 80100f4:	b28c      	uxth	r4, r1
 80100f6:	6879      	ldr	r1, [r7, #4]
 80100f8:	828c      	strh	r4, [r1, #20]
 80100fa:	b2c1      	uxtb	r1, r0
 80100fc:	4413      	add	r3, r2
 80100fe:	460a      	mov	r2, r1
 8010100:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	691a      	ldr	r2, [r3, #16]
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	8a9b      	ldrh	r3, [r3, #20]
 801010c:	1c59      	adds	r1, r3, #1
 801010e:	b288      	uxth	r0, r1
 8010110:	6879      	ldr	r1, [r7, #4]
 8010112:	8288      	strh	r0, [r1, #20]
 8010114:	6839      	ldr	r1, [r7, #0]
 8010116:	b2c9      	uxtb	r1, r1
 8010118:	4413      	add	r3, r2
 801011a:	460a      	mov	r2, r1
 801011c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 8010120:	bf00      	nop
 8010122:	370c      	adds	r7, #12
 8010124:	46bd      	mov	sp, r7
 8010126:	bd90      	pop	{r4, r7, pc}
 8010128:	0801ab50 	.word	0x0801ab50
 801012c:	0801ada8 	.word	0x0801ada8
 8010130:	0801abb0 	.word	0x0801abb0

08010134 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
 8010134:	b590      	push	{r4, r7, lr}
 8010136:	b087      	sub	sp, #28
 8010138:	af00      	add	r7, sp, #0
 801013a:	60f8      	str	r0, [r7, #12]
 801013c:	60b9      	str	r1, [r7, #8]
 801013e:	4613      	mov	r3, r2
 8010140:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	2b00      	cmp	r3, #0
 8010146:	d109      	bne.n	801015c <dhcp_create_msg+0x28>
 8010148:	4ba3      	ldr	r3, [pc, #652]	; (80103d8 <dhcp_create_msg+0x2a4>)
 801014a:	f240 721d 	movw	r2, #1821	; 0x71d
 801014e:	49a3      	ldr	r1, [pc, #652]	; (80103dc <dhcp_create_msg+0x2a8>)
 8010150:	48a3      	ldr	r0, [pc, #652]	; (80103e0 <dhcp_create_msg+0x2ac>)
 8010152:	f008 f8e7 	bl	8018324 <iprintf>
 8010156:	f06f 030f 	mvn.w	r3, #15
 801015a:	e138      	b.n	80103ce <dhcp_create_msg+0x29a>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801015c:	68bb      	ldr	r3, [r7, #8]
 801015e:	2b00      	cmp	r3, #0
 8010160:	d109      	bne.n	8010176 <dhcp_create_msg+0x42>
 8010162:	4b9d      	ldr	r3, [pc, #628]	; (80103d8 <dhcp_create_msg+0x2a4>)
 8010164:	f240 721e 	movw	r2, #1822	; 0x71e
 8010168:	499e      	ldr	r1, [pc, #632]	; (80103e4 <dhcp_create_msg+0x2b0>)
 801016a:	489d      	ldr	r0, [pc, #628]	; (80103e0 <dhcp_create_msg+0x2ac>)
 801016c:	f008 f8da 	bl	8018324 <iprintf>
 8010170:	f06f 0305 	mvn.w	r3, #5
 8010174:	e12b      	b.n	80103ce <dhcp_create_msg+0x29a>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
 8010176:	68bb      	ldr	r3, [r7, #8]
 8010178:	68db      	ldr	r3, [r3, #12]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d006      	beq.n	801018c <dhcp_create_msg+0x58>
 801017e:	4b96      	ldr	r3, [pc, #600]	; (80103d8 <dhcp_create_msg+0x2a4>)
 8010180:	f240 721f 	movw	r2, #1823	; 0x71f
 8010184:	4998      	ldr	r1, [pc, #608]	; (80103e8 <dhcp_create_msg+0x2b4>)
 8010186:	4896      	ldr	r0, [pc, #600]	; (80103e0 <dhcp_create_msg+0x2ac>)
 8010188:	f008 f8cc 	bl	8018324 <iprintf>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
 801018c:	68bb      	ldr	r3, [r7, #8]
 801018e:	691b      	ldr	r3, [r3, #16]
 8010190:	2b00      	cmp	r3, #0
 8010192:	d006      	beq.n	80101a2 <dhcp_create_msg+0x6e>
 8010194:	4b90      	ldr	r3, [pc, #576]	; (80103d8 <dhcp_create_msg+0x2a4>)
 8010196:	f44f 62e4 	mov.w	r2, #1824	; 0x720
 801019a:	4994      	ldr	r1, [pc, #592]	; (80103ec <dhcp_create_msg+0x2b8>)
 801019c:	4890      	ldr	r0, [pc, #576]	; (80103e0 <dhcp_create_msg+0x2ac>)
 801019e:	f008 f8c1 	bl	8018324 <iprintf>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80101a2:	2200      	movs	r2, #0
 80101a4:	f44f 719a 	mov.w	r1, #308	; 0x134
 80101a8:	2000      	movs	r0, #0
 80101aa:	f7f9 f8b7 	bl	800931c <pbuf_alloc>
 80101ae:	4602      	mov	r2, r0
 80101b0:	68bb      	ldr	r3, [r7, #8]
 80101b2:	60da      	str	r2, [r3, #12]
  if (dhcp->p_out == NULL) {
 80101b4:	68bb      	ldr	r3, [r7, #8]
 80101b6:	68db      	ldr	r3, [r3, #12]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d102      	bne.n	80101c2 <dhcp_create_msg+0x8e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
 80101bc:	f04f 33ff 	mov.w	r3, #4294967295
 80101c0:	e105      	b.n	80103ce <dhcp_create_msg+0x29a>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80101c2:	68bb      	ldr	r3, [r7, #8]
 80101c4:	68db      	ldr	r3, [r3, #12]
 80101c6:	895b      	ldrh	r3, [r3, #10]
 80101c8:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80101cc:	d206      	bcs.n	80101dc <dhcp_create_msg+0xa8>
 80101ce:	4b82      	ldr	r3, [pc, #520]	; (80103d8 <dhcp_create_msg+0x2a4>)
 80101d0:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 80101d4:	4986      	ldr	r1, [pc, #536]	; (80103f0 <dhcp_create_msg+0x2bc>)
 80101d6:	4882      	ldr	r0, [pc, #520]	; (80103e0 <dhcp_create_msg+0x2ac>)
 80101d8:	f008 f8a4 	bl	8018324 <iprintf>
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80101dc:	79fb      	ldrb	r3, [r7, #7]
 80101de:	2b03      	cmp	r3, #3
 80101e0:	d103      	bne.n	80101ea <dhcp_create_msg+0xb6>
 80101e2:	68bb      	ldr	r3, [r7, #8]
 80101e4:	7a5b      	ldrb	r3, [r3, #9]
 80101e6:	2b03      	cmp	r3, #3
 80101e8:	d10d      	bne.n	8010206 <dhcp_create_msg+0xd2>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80101ea:	68bb      	ldr	r3, [r7, #8]
 80101ec:	7a9b      	ldrb	r3, [r3, #10]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d105      	bne.n	80101fe <dhcp_create_msg+0xca>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80101f2:	f008 f913 	bl	801841c <rand>
 80101f6:	4603      	mov	r3, r0
 80101f8:	461a      	mov	r2, r3
 80101fa:	4b7e      	ldr	r3, [pc, #504]	; (80103f4 <dhcp_create_msg+0x2c0>)
 80101fc:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80101fe:	4b7d      	ldr	r3, [pc, #500]	; (80103f4 <dhcp_create_msg+0x2c0>)
 8010200:	681a      	ldr	r2, [r3, #0]
 8010202:	68bb      	ldr	r3, [r7, #8]
 8010204:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 8010206:	68bb      	ldr	r3, [r7, #8]
 8010208:	68db      	ldr	r3, [r3, #12]
 801020a:	685a      	ldr	r2, [r3, #4]
 801020c:	68bb      	ldr	r3, [r7, #8]
 801020e:	611a      	str	r2, [r3, #16]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 8010210:	68bb      	ldr	r3, [r7, #8]
 8010212:	691b      	ldr	r3, [r3, #16]
 8010214:	2201      	movs	r2, #1
 8010216:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 8010218:	68bb      	ldr	r3, [r7, #8]
 801021a:	691b      	ldr	r3, [r3, #16]
 801021c:	2201      	movs	r2, #1
 801021e:	705a      	strb	r2, [r3, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 8010220:	68bb      	ldr	r3, [r7, #8]
 8010222:	691b      	ldr	r3, [r3, #16]
 8010224:	68fa      	ldr	r2, [r7, #12]
 8010226:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 801022a:	709a      	strb	r2, [r3, #2]
  dhcp->msg_out->hops = 0;
 801022c:	68bb      	ldr	r3, [r7, #8]
 801022e:	691b      	ldr	r3, [r3, #16]
 8010230:	2200      	movs	r2, #0
 8010232:	70da      	strb	r2, [r3, #3]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 8010234:	68bb      	ldr	r3, [r7, #8]
 8010236:	681a      	ldr	r2, [r3, #0]
 8010238:	68bb      	ldr	r3, [r7, #8]
 801023a:	691c      	ldr	r4, [r3, #16]
 801023c:	4610      	mov	r0, r2
 801023e:	f7f7 ff2a 	bl	8008096 <lwip_htonl>
 8010242:	4603      	mov	r3, r0
 8010244:	6063      	str	r3, [r4, #4]
  dhcp->msg_out->secs = 0;
 8010246:	68bb      	ldr	r3, [r7, #8]
 8010248:	691b      	ldr	r3, [r3, #16]
 801024a:	2200      	movs	r2, #0
 801024c:	721a      	strb	r2, [r3, #8]
 801024e:	2200      	movs	r2, #0
 8010250:	725a      	strb	r2, [r3, #9]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
 8010252:	68bb      	ldr	r3, [r7, #8]
 8010254:	691b      	ldr	r3, [r3, #16]
 8010256:	2200      	movs	r2, #0
 8010258:	729a      	strb	r2, [r3, #10]
 801025a:	2200      	movs	r2, #0
 801025c:	72da      	strb	r2, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
 801025e:	68bb      	ldr	r3, [r7, #8]
 8010260:	691b      	ldr	r3, [r3, #16]
 8010262:	2200      	movs	r2, #0
 8010264:	731a      	strb	r2, [r3, #12]
 8010266:	2200      	movs	r2, #0
 8010268:	735a      	strb	r2, [r3, #13]
 801026a:	2200      	movs	r2, #0
 801026c:	739a      	strb	r2, [r3, #14]
 801026e:	2200      	movs	r2, #0
 8010270:	73da      	strb	r2, [r3, #15]
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8010272:	79fb      	ldrb	r3, [r7, #7]
 8010274:	2b08      	cmp	r3, #8
 8010276:	d010      	beq.n	801029a <dhcp_create_msg+0x166>
 8010278:	79fb      	ldrb	r3, [r7, #7]
 801027a:	2b04      	cmp	r3, #4
 801027c:	d00d      	beq.n	801029a <dhcp_create_msg+0x166>
 801027e:	79fb      	ldrb	r3, [r7, #7]
 8010280:	2b07      	cmp	r3, #7
 8010282:	d00a      	beq.n	801029a <dhcp_create_msg+0x166>
 8010284:	79fb      	ldrb	r3, [r7, #7]
 8010286:	2b03      	cmp	r3, #3
 8010288:	d10d      	bne.n	80102a6 <dhcp_create_msg+0x172>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 801028a:	68bb      	ldr	r3, [r7, #8]
 801028c:	7a5b      	ldrb	r3, [r3, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801028e:	2b05      	cmp	r3, #5
 8010290:	d003      	beq.n	801029a <dhcp_create_msg+0x166>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 8010292:	68bb      	ldr	r3, [r7, #8]
 8010294:	7a5b      	ldrb	r3, [r3, #9]
 8010296:	2b04      	cmp	r3, #4
 8010298:	d105      	bne.n	80102a6 <dhcp_create_msg+0x172>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	1d1a      	adds	r2, r3, #4
 801029e:	68bb      	ldr	r3, [r7, #8]
 80102a0:	691b      	ldr	r3, [r3, #16]
 80102a2:	6812      	ldr	r2, [r2, #0]
 80102a4:	60da      	str	r2, [r3, #12]
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 80102a6:	68bb      	ldr	r3, [r7, #8]
 80102a8:	691b      	ldr	r3, [r3, #16]
 80102aa:	2200      	movs	r2, #0
 80102ac:	741a      	strb	r2, [r3, #16]
 80102ae:	2200      	movs	r2, #0
 80102b0:	745a      	strb	r2, [r3, #17]
 80102b2:	2200      	movs	r2, #0
 80102b4:	749a      	strb	r2, [r3, #18]
 80102b6:	2200      	movs	r2, #0
 80102b8:	74da      	strb	r2, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
 80102ba:	68bb      	ldr	r3, [r7, #8]
 80102bc:	691b      	ldr	r3, [r3, #16]
 80102be:	2200      	movs	r2, #0
 80102c0:	751a      	strb	r2, [r3, #20]
 80102c2:	2200      	movs	r2, #0
 80102c4:	755a      	strb	r2, [r3, #21]
 80102c6:	2200      	movs	r2, #0
 80102c8:	759a      	strb	r2, [r3, #22]
 80102ca:	2200      	movs	r2, #0
 80102cc:	75da      	strb	r2, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
 80102ce:	68bb      	ldr	r3, [r7, #8]
 80102d0:	691b      	ldr	r3, [r3, #16]
 80102d2:	2200      	movs	r2, #0
 80102d4:	761a      	strb	r2, [r3, #24]
 80102d6:	2200      	movs	r2, #0
 80102d8:	765a      	strb	r2, [r3, #25]
 80102da:	2200      	movs	r2, #0
 80102dc:	769a      	strb	r2, [r3, #26]
 80102de:	2200      	movs	r2, #0
 80102e0:	76da      	strb	r2, [r3, #27]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 80102e2:	2300      	movs	r3, #0
 80102e4:	82fb      	strh	r3, [r7, #22]
 80102e6:	e019      	b.n	801031c <dhcp_create_msg+0x1e8>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80102ee:	b29b      	uxth	r3, r3
 80102f0:	8afa      	ldrh	r2, [r7, #22]
 80102f2:	429a      	cmp	r2, r3
 80102f4:	d208      	bcs.n	8010308 <dhcp_create_msg+0x1d4>
 80102f6:	8afb      	ldrh	r3, [r7, #22]
 80102f8:	2b05      	cmp	r3, #5
 80102fa:	d805      	bhi.n	8010308 <dhcp_create_msg+0x1d4>
 80102fc:	8afb      	ldrh	r3, [r7, #22]
 80102fe:	68fa      	ldr	r2, [r7, #12]
 8010300:	4413      	add	r3, r2
 8010302:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 8010306:	e000      	b.n	801030a <dhcp_create_msg+0x1d6>
 8010308:	2100      	movs	r1, #0
 801030a:	68bb      	ldr	r3, [r7, #8]
 801030c:	691a      	ldr	r2, [r3, #16]
 801030e:	8afb      	ldrh	r3, [r7, #22]
 8010310:	4413      	add	r3, r2
 8010312:	460a      	mov	r2, r1
 8010314:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 8010316:	8afb      	ldrh	r3, [r7, #22]
 8010318:	3301      	adds	r3, #1
 801031a:	82fb      	strh	r3, [r7, #22]
 801031c:	8afb      	ldrh	r3, [r7, #22]
 801031e:	2b0f      	cmp	r3, #15
 8010320:	d9e2      	bls.n	80102e8 <dhcp_create_msg+0x1b4>
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 8010322:	2300      	movs	r3, #0
 8010324:	82fb      	strh	r3, [r7, #22]
 8010326:	e009      	b.n	801033c <dhcp_create_msg+0x208>
    dhcp->msg_out->sname[i] = 0;
 8010328:	68bb      	ldr	r3, [r7, #8]
 801032a:	691a      	ldr	r2, [r3, #16]
 801032c:	8afb      	ldrh	r3, [r7, #22]
 801032e:	4413      	add	r3, r2
 8010330:	2200      	movs	r2, #0
 8010332:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 8010336:	8afb      	ldrh	r3, [r7, #22]
 8010338:	3301      	adds	r3, #1
 801033a:	82fb      	strh	r3, [r7, #22]
 801033c:	8afb      	ldrh	r3, [r7, #22]
 801033e:	2b3f      	cmp	r3, #63	; 0x3f
 8010340:	d9f2      	bls.n	8010328 <dhcp_create_msg+0x1f4>
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 8010342:	2300      	movs	r3, #0
 8010344:	82fb      	strh	r3, [r7, #22]
 8010346:	e009      	b.n	801035c <dhcp_create_msg+0x228>
    dhcp->msg_out->file[i] = 0;
 8010348:	68bb      	ldr	r3, [r7, #8]
 801034a:	691a      	ldr	r2, [r3, #16]
 801034c:	8afb      	ldrh	r3, [r7, #22]
 801034e:	4413      	add	r3, r2
 8010350:	2200      	movs	r2, #0
 8010352:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 8010356:	8afb      	ldrh	r3, [r7, #22]
 8010358:	3301      	adds	r3, #1
 801035a:	82fb      	strh	r3, [r7, #22]
 801035c:	8afb      	ldrh	r3, [r7, #22]
 801035e:	2b7f      	cmp	r3, #127	; 0x7f
 8010360:	d9f2      	bls.n	8010348 <dhcp_create_msg+0x214>
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8010362:	68bb      	ldr	r3, [r7, #8]
 8010364:	691b      	ldr	r3, [r3, #16]
 8010366:	2200      	movs	r2, #0
 8010368:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801036c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8010370:	2200      	movs	r2, #0
 8010372:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8010376:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801037a:	2200      	movs	r2, #0
 801037c:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8010380:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8010384:	2200      	movs	r2, #0
 8010386:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801038a:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  dhcp->options_out_len = 0;
 801038e:	68bb      	ldr	r3, [r7, #8]
 8010390:	2200      	movs	r2, #0
 8010392:	829a      	strh	r2, [r3, #20]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 8010394:	2300      	movs	r3, #0
 8010396:	82fb      	strh	r3, [r7, #22]
 8010398:	e00b      	b.n	80103b2 <dhcp_create_msg+0x27e>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 801039a:	68bb      	ldr	r3, [r7, #8]
 801039c:	691a      	ldr	r2, [r3, #16]
 801039e:	8afb      	ldrh	r3, [r7, #22]
 80103a0:	8af9      	ldrh	r1, [r7, #22]
 80103a2:	b2c9      	uxtb	r1, r1
 80103a4:	4413      	add	r3, r2
 80103a6:	460a      	mov	r2, r1
 80103a8:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 80103ac:	8afb      	ldrh	r3, [r7, #22]
 80103ae:	3301      	adds	r3, #1
 80103b0:	82fb      	strh	r3, [r7, #22]
 80103b2:	8afb      	ldrh	r3, [r7, #22]
 80103b4:	2b43      	cmp	r3, #67	; 0x43
 80103b6:	d9f0      	bls.n	801039a <dhcp_create_msg+0x266>
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80103b8:	2201      	movs	r2, #1
 80103ba:	2135      	movs	r1, #53	; 0x35
 80103bc:	68b8      	ldr	r0, [r7, #8]
 80103be:	f7ff fdc7 	bl	800ff50 <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
 80103c2:	79fb      	ldrb	r3, [r7, #7]
 80103c4:	4619      	mov	r1, r3
 80103c6:	68b8      	ldr	r0, [r7, #8]
 80103c8:	f7ff fdfc 	bl	800ffc4 <dhcp_option_byte>
  return ERR_OK;
 80103cc:	2300      	movs	r3, #0
}
 80103ce:	4618      	mov	r0, r3
 80103d0:	371c      	adds	r7, #28
 80103d2:	46bd      	mov	sp, r7
 80103d4:	bd90      	pop	{r4, r7, pc}
 80103d6:	bf00      	nop
 80103d8:	0801ab50 	.word	0x0801ab50
 80103dc:	0801ae90 	.word	0x0801ae90
 80103e0:	0801abb0 	.word	0x0801abb0
 80103e4:	0801aeb0 	.word	0x0801aeb0
 80103e8:	0801aed0 	.word	0x0801aed0
 80103ec:	0801aef8 	.word	0x0801aef8
 80103f0:	0801af20 	.word	0x0801af20
 80103f4:	20004ad4 	.word	0x20004ad4

080103f8 <dhcp_delete_msg>:
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b082      	sub	sp, #8
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	2b00      	cmp	r3, #0
 8010404:	d107      	bne.n	8010416 <dhcp_delete_msg+0x1e>
 8010406:	4b18      	ldr	r3, [pc, #96]	; (8010468 <dhcp_delete_msg+0x70>)
 8010408:	f240 726d 	movw	r2, #1901	; 0x76d
 801040c:	4917      	ldr	r1, [pc, #92]	; (801046c <dhcp_delete_msg+0x74>)
 801040e:	4818      	ldr	r0, [pc, #96]	; (8010470 <dhcp_delete_msg+0x78>)
 8010410:	f007 ff88 	bl	8018324 <iprintf>
 8010414:	e024      	b.n	8010460 <dhcp_delete_msg+0x68>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	68db      	ldr	r3, [r3, #12]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d106      	bne.n	801042c <dhcp_delete_msg+0x34>
 801041e:	4b12      	ldr	r3, [pc, #72]	; (8010468 <dhcp_delete_msg+0x70>)
 8010420:	f240 726e 	movw	r2, #1902	; 0x76e
 8010424:	4913      	ldr	r1, [pc, #76]	; (8010474 <dhcp_delete_msg+0x7c>)
 8010426:	4812      	ldr	r0, [pc, #72]	; (8010470 <dhcp_delete_msg+0x78>)
 8010428:	f007 ff7c 	bl	8018324 <iprintf>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	691b      	ldr	r3, [r3, #16]
 8010430:	2b00      	cmp	r3, #0
 8010432:	d106      	bne.n	8010442 <dhcp_delete_msg+0x4a>
 8010434:	4b0c      	ldr	r3, [pc, #48]	; (8010468 <dhcp_delete_msg+0x70>)
 8010436:	f240 726f 	movw	r2, #1903	; 0x76f
 801043a:	490f      	ldr	r1, [pc, #60]	; (8010478 <dhcp_delete_msg+0x80>)
 801043c:	480c      	ldr	r0, [pc, #48]	; (8010470 <dhcp_delete_msg+0x78>)
 801043e:	f007 ff71 	bl	8018324 <iprintf>
  if (dhcp->p_out != NULL) {
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	68db      	ldr	r3, [r3, #12]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d004      	beq.n	8010454 <dhcp_delete_msg+0x5c>
    pbuf_free(dhcp->p_out);
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	68db      	ldr	r3, [r3, #12]
 801044e:	4618      	mov	r0, r3
 8010450:	f7f9 fad6 	bl	8009a00 <pbuf_free>
  }
  dhcp->p_out = NULL;
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	2200      	movs	r2, #0
 8010458:	60da      	str	r2, [r3, #12]
  dhcp->msg_out = NULL;
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	2200      	movs	r2, #0
 801045e:	611a      	str	r2, [r3, #16]
}
 8010460:	3708      	adds	r7, #8
 8010462:	46bd      	mov	sp, r7
 8010464:	bd80      	pop	{r7, pc}
 8010466:	bf00      	nop
 8010468:	0801ab50 	.word	0x0801ab50
 801046c:	0801af60 	.word	0x0801af60
 8010470:	0801abb0 	.word	0x0801abb0
 8010474:	0801af80 	.word	0x0801af80
 8010478:	0801afa8 	.word	0x0801afa8

0801047c <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
 801047c:	b580      	push	{r7, lr}
 801047e:	b082      	sub	sp, #8
 8010480:	af00      	add	r7, sp, #0
 8010482:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	2b00      	cmp	r3, #0
 8010488:	d107      	bne.n	801049a <dhcp_option_trailer+0x1e>
 801048a:	4b24      	ldr	r3, [pc, #144]	; (801051c <dhcp_option_trailer+0xa0>)
 801048c:	f240 7282 	movw	r2, #1922	; 0x782
 8010490:	4923      	ldr	r1, [pc, #140]	; (8010520 <dhcp_option_trailer+0xa4>)
 8010492:	4824      	ldr	r0, [pc, #144]	; (8010524 <dhcp_option_trailer+0xa8>)
 8010494:	f007 ff46 	bl	8018324 <iprintf>
 8010498:	e03c      	b.n	8010514 <dhcp_option_trailer+0x98>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	691b      	ldr	r3, [r3, #16]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d106      	bne.n	80104b0 <dhcp_option_trailer+0x34>
 80104a2:	4b1e      	ldr	r3, [pc, #120]	; (801051c <dhcp_option_trailer+0xa0>)
 80104a4:	f240 7283 	movw	r2, #1923	; 0x783
 80104a8:	491f      	ldr	r1, [pc, #124]	; (8010528 <dhcp_option_trailer+0xac>)
 80104aa:	481e      	ldr	r0, [pc, #120]	; (8010524 <dhcp_option_trailer+0xa8>)
 80104ac:	f007 ff3a 	bl	8018324 <iprintf>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	8a9b      	ldrh	r3, [r3, #20]
 80104b4:	2b43      	cmp	r3, #67	; 0x43
 80104b6:	d906      	bls.n	80104c6 <dhcp_option_trailer+0x4a>
 80104b8:	4b18      	ldr	r3, [pc, #96]	; (801051c <dhcp_option_trailer+0xa0>)
 80104ba:	f240 7284 	movw	r2, #1924	; 0x784
 80104be:	491b      	ldr	r1, [pc, #108]	; (801052c <dhcp_option_trailer+0xb0>)
 80104c0:	4818      	ldr	r0, [pc, #96]	; (8010524 <dhcp_option_trailer+0xa8>)
 80104c2:	f007 ff2f 	bl	8018324 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	691a      	ldr	r2, [r3, #16]
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	8a9b      	ldrh	r3, [r3, #20]
 80104ce:	1c59      	adds	r1, r3, #1
 80104d0:	b288      	uxth	r0, r1
 80104d2:	6879      	ldr	r1, [r7, #4]
 80104d4:	8288      	strh	r0, [r1, #20]
 80104d6:	4413      	add	r3, r2
 80104d8:	22ff      	movs	r2, #255	; 0xff
 80104da:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 80104de:	e00b      	b.n	80104f8 <dhcp_option_trailer+0x7c>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	691a      	ldr	r2, [r3, #16]
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	8a9b      	ldrh	r3, [r3, #20]
 80104e8:	1c59      	adds	r1, r3, #1
 80104ea:	b288      	uxth	r0, r1
 80104ec:	6879      	ldr	r1, [r7, #4]
 80104ee:	8288      	strh	r0, [r1, #20]
 80104f0:	4413      	add	r3, r2
 80104f2:	2200      	movs	r2, #0
 80104f4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	8a9b      	ldrh	r3, [r3, #20]
 80104fc:	2b43      	cmp	r3, #67	; 0x43
 80104fe:	d905      	bls.n	801050c <dhcp_option_trailer+0x90>
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	8a9b      	ldrh	r3, [r3, #20]
 8010504:	f003 0303 	and.w	r3, r3, #3
 8010508:	2b00      	cmp	r3, #0
 801050a:	d003      	beq.n	8010514 <dhcp_option_trailer+0x98>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	8a9b      	ldrh	r3, [r3, #20]
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 8010510:	2b43      	cmp	r3, #67	; 0x43
 8010512:	d9e5      	bls.n	80104e0 <dhcp_option_trailer+0x64>
  }
}
 8010514:	3708      	adds	r7, #8
 8010516:	46bd      	mov	sp, r7
 8010518:	bd80      	pop	{r7, pc}
 801051a:	bf00      	nop
 801051c:	0801ab50 	.word	0x0801ab50
 8010520:	0801afd0 	.word	0x0801afd0
 8010524:	0801abb0 	.word	0x0801abb0
 8010528:	0801aff4 	.word	0x0801aff4
 801052c:	0801b020 	.word	0x0801b020

08010530 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8010530:	b480      	push	{r7}
 8010532:	b085      	sub	sp, #20
 8010534:	af00      	add	r7, sp, #0
 8010536:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d017      	beq.n	801056e <dhcp_supplied_address+0x3e>
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	6a1b      	ldr	r3, [r3, #32]
 8010542:	2b00      	cmp	r3, #0
 8010544:	d013      	beq.n	801056e <dhcp_supplied_address+0x3e>
    struct dhcp* dhcp = netif_dhcp_data(netif);
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	6a1b      	ldr	r3, [r3, #32]
 801054a:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	7a5b      	ldrb	r3, [r3, #9]
 8010550:	2b0a      	cmp	r3, #10
 8010552:	d007      	beq.n	8010564 <dhcp_supplied_address+0x34>
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	7a5b      	ldrb	r3, [r3, #9]
 8010558:	2b05      	cmp	r3, #5
 801055a:	d003      	beq.n	8010564 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	7a5b      	ldrb	r3, [r3, #9]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8010560:	2b04      	cmp	r3, #4
 8010562:	d101      	bne.n	8010568 <dhcp_supplied_address+0x38>
 8010564:	2301      	movs	r3, #1
 8010566:	e000      	b.n	801056a <dhcp_supplied_address+0x3a>
 8010568:	2300      	movs	r3, #0
 801056a:	b2db      	uxtb	r3, r3
 801056c:	e000      	b.n	8010570 <dhcp_supplied_address+0x40>
  }
  return 0;
 801056e:	2300      	movs	r3, #0
}
 8010570:	4618      	mov	r0, r3
 8010572:	3714      	adds	r7, #20
 8010574:	46bd      	mov	sp, r7
 8010576:	bc80      	pop	{r7}
 8010578:	4770      	bx	lr
	...

0801057c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801057c:	b580      	push	{r7, lr}
 801057e:	b082      	sub	sp, #8
 8010580:	af00      	add	r7, sp, #0
 8010582:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8010584:	4915      	ldr	r1, [pc, #84]	; (80105dc <etharp_free_entry+0x60>)
 8010586:	687a      	ldr	r2, [r7, #4]
 8010588:	4613      	mov	r3, r2
 801058a:	005b      	lsls	r3, r3, #1
 801058c:	4413      	add	r3, r2
 801058e:	00db      	lsls	r3, r3, #3
 8010590:	440b      	add	r3, r1
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d013      	beq.n	80105c0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8010598:	4910      	ldr	r1, [pc, #64]	; (80105dc <etharp_free_entry+0x60>)
 801059a:	687a      	ldr	r2, [r7, #4]
 801059c:	4613      	mov	r3, r2
 801059e:	005b      	lsls	r3, r3, #1
 80105a0:	4413      	add	r3, r2
 80105a2:	00db      	lsls	r3, r3, #3
 80105a4:	440b      	add	r3, r1
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	4618      	mov	r0, r3
 80105aa:	f7f9 fa29 	bl	8009a00 <pbuf_free>
    arp_table[i].q = NULL;
 80105ae:	490b      	ldr	r1, [pc, #44]	; (80105dc <etharp_free_entry+0x60>)
 80105b0:	687a      	ldr	r2, [r7, #4]
 80105b2:	4613      	mov	r3, r2
 80105b4:	005b      	lsls	r3, r3, #1
 80105b6:	4413      	add	r3, r2
 80105b8:	00db      	lsls	r3, r3, #3
 80105ba:	440b      	add	r3, r1
 80105bc:	2200      	movs	r2, #0
 80105be:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80105c0:	4906      	ldr	r1, [pc, #24]	; (80105dc <etharp_free_entry+0x60>)
 80105c2:	687a      	ldr	r2, [r7, #4]
 80105c4:	4613      	mov	r3, r2
 80105c6:	005b      	lsls	r3, r3, #1
 80105c8:	4413      	add	r3, r2
 80105ca:	00db      	lsls	r3, r3, #3
 80105cc:	440b      	add	r3, r1
 80105ce:	3314      	adds	r3, #20
 80105d0:	2200      	movs	r2, #0
 80105d2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80105d4:	bf00      	nop
 80105d6:	3708      	adds	r7, #8
 80105d8:	46bd      	mov	sp, r7
 80105da:	bd80      	pop	{r7, pc}
 80105dc:	20004ad8 	.word	0x20004ad8

080105e0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80105e0:	b580      	push	{r7, lr}
 80105e2:	b082      	sub	sp, #8
 80105e4:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80105e6:	2300      	movs	r3, #0
 80105e8:	71fb      	strb	r3, [r7, #7]
 80105ea:	e096      	b.n	801071a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80105ec:	79fa      	ldrb	r2, [r7, #7]
 80105ee:	494f      	ldr	r1, [pc, #316]	; (801072c <etharp_tmr+0x14c>)
 80105f0:	4613      	mov	r3, r2
 80105f2:	005b      	lsls	r3, r3, #1
 80105f4:	4413      	add	r3, r2
 80105f6:	00db      	lsls	r3, r3, #3
 80105f8:	440b      	add	r3, r1
 80105fa:	3314      	adds	r3, #20
 80105fc:	781b      	ldrb	r3, [r3, #0]
 80105fe:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 8010600:	79bb      	ldrb	r3, [r7, #6]
 8010602:	2b00      	cmp	r3, #0
 8010604:	f000 8086 	beq.w	8010714 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 8010608:	79fa      	ldrb	r2, [r7, #7]
 801060a:	4948      	ldr	r1, [pc, #288]	; (801072c <etharp_tmr+0x14c>)
 801060c:	4613      	mov	r3, r2
 801060e:	005b      	lsls	r3, r3, #1
 8010610:	4413      	add	r3, r2
 8010612:	00db      	lsls	r3, r3, #3
 8010614:	440b      	add	r3, r1
 8010616:	3312      	adds	r3, #18
 8010618:	881b      	ldrh	r3, [r3, #0]
 801061a:	3301      	adds	r3, #1
 801061c:	b298      	uxth	r0, r3
 801061e:	4943      	ldr	r1, [pc, #268]	; (801072c <etharp_tmr+0x14c>)
 8010620:	4613      	mov	r3, r2
 8010622:	005b      	lsls	r3, r3, #1
 8010624:	4413      	add	r3, r2
 8010626:	00db      	lsls	r3, r3, #3
 8010628:	440b      	add	r3, r1
 801062a:	3312      	adds	r3, #18
 801062c:	4602      	mov	r2, r0
 801062e:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8010630:	79fa      	ldrb	r2, [r7, #7]
 8010632:	493e      	ldr	r1, [pc, #248]	; (801072c <etharp_tmr+0x14c>)
 8010634:	4613      	mov	r3, r2
 8010636:	005b      	lsls	r3, r3, #1
 8010638:	4413      	add	r3, r2
 801063a:	00db      	lsls	r3, r3, #3
 801063c:	440b      	add	r3, r1
 801063e:	3312      	adds	r3, #18
 8010640:	881b      	ldrh	r3, [r3, #0]
 8010642:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8010646:	d215      	bcs.n	8010674 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010648:	79fa      	ldrb	r2, [r7, #7]
 801064a:	4938      	ldr	r1, [pc, #224]	; (801072c <etharp_tmr+0x14c>)
 801064c:	4613      	mov	r3, r2
 801064e:	005b      	lsls	r3, r3, #1
 8010650:	4413      	add	r3, r2
 8010652:	00db      	lsls	r3, r3, #3
 8010654:	440b      	add	r3, r1
 8010656:	3314      	adds	r3, #20
 8010658:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801065a:	2b01      	cmp	r3, #1
 801065c:	d10f      	bne.n	801067e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801065e:	79fa      	ldrb	r2, [r7, #7]
 8010660:	4932      	ldr	r1, [pc, #200]	; (801072c <etharp_tmr+0x14c>)
 8010662:	4613      	mov	r3, r2
 8010664:	005b      	lsls	r3, r3, #1
 8010666:	4413      	add	r3, r2
 8010668:	00db      	lsls	r3, r3, #3
 801066a:	440b      	add	r3, r1
 801066c:	3312      	adds	r3, #18
 801066e:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8010670:	2b04      	cmp	r3, #4
 8010672:	d904      	bls.n	801067e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8010674:	79fb      	ldrb	r3, [r7, #7]
 8010676:	4618      	mov	r0, r3
 8010678:	f7ff ff80 	bl	801057c <etharp_free_entry>
 801067c:	e04a      	b.n	8010714 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801067e:	79fa      	ldrb	r2, [r7, #7]
 8010680:	492a      	ldr	r1, [pc, #168]	; (801072c <etharp_tmr+0x14c>)
 8010682:	4613      	mov	r3, r2
 8010684:	005b      	lsls	r3, r3, #1
 8010686:	4413      	add	r3, r2
 8010688:	00db      	lsls	r3, r3, #3
 801068a:	440b      	add	r3, r1
 801068c:	3314      	adds	r3, #20
 801068e:	781b      	ldrb	r3, [r3, #0]
 8010690:	2b03      	cmp	r3, #3
 8010692:	d10a      	bne.n	80106aa <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8010694:	79fa      	ldrb	r2, [r7, #7]
 8010696:	4925      	ldr	r1, [pc, #148]	; (801072c <etharp_tmr+0x14c>)
 8010698:	4613      	mov	r3, r2
 801069a:	005b      	lsls	r3, r3, #1
 801069c:	4413      	add	r3, r2
 801069e:	00db      	lsls	r3, r3, #3
 80106a0:	440b      	add	r3, r1
 80106a2:	3314      	adds	r3, #20
 80106a4:	2204      	movs	r2, #4
 80106a6:	701a      	strb	r2, [r3, #0]
 80106a8:	e034      	b.n	8010714 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80106aa:	79fa      	ldrb	r2, [r7, #7]
 80106ac:	491f      	ldr	r1, [pc, #124]	; (801072c <etharp_tmr+0x14c>)
 80106ae:	4613      	mov	r3, r2
 80106b0:	005b      	lsls	r3, r3, #1
 80106b2:	4413      	add	r3, r2
 80106b4:	00db      	lsls	r3, r3, #3
 80106b6:	440b      	add	r3, r1
 80106b8:	3314      	adds	r3, #20
 80106ba:	781b      	ldrb	r3, [r3, #0]
 80106bc:	2b04      	cmp	r3, #4
 80106be:	d10a      	bne.n	80106d6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80106c0:	79fa      	ldrb	r2, [r7, #7]
 80106c2:	491a      	ldr	r1, [pc, #104]	; (801072c <etharp_tmr+0x14c>)
 80106c4:	4613      	mov	r3, r2
 80106c6:	005b      	lsls	r3, r3, #1
 80106c8:	4413      	add	r3, r2
 80106ca:	00db      	lsls	r3, r3, #3
 80106cc:	440b      	add	r3, r1
 80106ce:	3314      	adds	r3, #20
 80106d0:	2202      	movs	r2, #2
 80106d2:	701a      	strb	r2, [r3, #0]
 80106d4:	e01e      	b.n	8010714 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80106d6:	79fa      	ldrb	r2, [r7, #7]
 80106d8:	4914      	ldr	r1, [pc, #80]	; (801072c <etharp_tmr+0x14c>)
 80106da:	4613      	mov	r3, r2
 80106dc:	005b      	lsls	r3, r3, #1
 80106de:	4413      	add	r3, r2
 80106e0:	00db      	lsls	r3, r3, #3
 80106e2:	440b      	add	r3, r1
 80106e4:	3314      	adds	r3, #20
 80106e6:	781b      	ldrb	r3, [r3, #0]
 80106e8:	2b01      	cmp	r3, #1
 80106ea:	d113      	bne.n	8010714 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80106ec:	79fa      	ldrb	r2, [r7, #7]
 80106ee:	490f      	ldr	r1, [pc, #60]	; (801072c <etharp_tmr+0x14c>)
 80106f0:	4613      	mov	r3, r2
 80106f2:	005b      	lsls	r3, r3, #1
 80106f4:	4413      	add	r3, r2
 80106f6:	00db      	lsls	r3, r3, #3
 80106f8:	440b      	add	r3, r1
 80106fa:	3308      	adds	r3, #8
 80106fc:	6818      	ldr	r0, [r3, #0]
 80106fe:	79fa      	ldrb	r2, [r7, #7]
 8010700:	4613      	mov	r3, r2
 8010702:	005b      	lsls	r3, r3, #1
 8010704:	4413      	add	r3, r2
 8010706:	00db      	lsls	r3, r3, #3
 8010708:	4a08      	ldr	r2, [pc, #32]	; (801072c <etharp_tmr+0x14c>)
 801070a:	4413      	add	r3, r2
 801070c:	3304      	adds	r3, #4
 801070e:	4619      	mov	r1, r3
 8010710:	f000 fe3c 	bl	801138c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010714:	79fb      	ldrb	r3, [r7, #7]
 8010716:	3301      	adds	r3, #1
 8010718:	71fb      	strb	r3, [r7, #7]
 801071a:	79fb      	ldrb	r3, [r7, #7]
 801071c:	2b09      	cmp	r3, #9
 801071e:	f67f af65 	bls.w	80105ec <etharp_tmr+0xc>
      }
    }
  }
}
 8010722:	bf00      	nop
 8010724:	3708      	adds	r7, #8
 8010726:	46bd      	mov	sp, r7
 8010728:	bd80      	pop	{r7, pc}
 801072a:	bf00      	nop
 801072c:	20004ad8 	.word	0x20004ad8

08010730 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 8010730:	b580      	push	{r7, lr}
 8010732:	b088      	sub	sp, #32
 8010734:	af00      	add	r7, sp, #0
 8010736:	60f8      	str	r0, [r7, #12]
 8010738:	460b      	mov	r3, r1
 801073a:	607a      	str	r2, [r7, #4]
 801073c:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801073e:	230a      	movs	r3, #10
 8010740:	77fb      	strb	r3, [r7, #31]
 8010742:	230a      	movs	r3, #10
 8010744:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 8010746:	230a      	movs	r3, #10
 8010748:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 801074a:	2300      	movs	r3, #0
 801074c:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 801074e:	230a      	movs	r3, #10
 8010750:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8010752:	2300      	movs	r3, #0
 8010754:	833b      	strh	r3, [r7, #24]
 8010756:	2300      	movs	r3, #0
 8010758:	82fb      	strh	r3, [r7, #22]
 801075a:	2300      	movs	r3, #0
 801075c:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801075e:	2300      	movs	r3, #0
 8010760:	773b      	strb	r3, [r7, #28]
 8010762:	e093      	b.n	801088c <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 8010764:	7f3a      	ldrb	r2, [r7, #28]
 8010766:	4990      	ldr	r1, [pc, #576]	; (80109a8 <etharp_find_entry+0x278>)
 8010768:	4613      	mov	r3, r2
 801076a:	005b      	lsls	r3, r3, #1
 801076c:	4413      	add	r3, r2
 801076e:	00db      	lsls	r3, r3, #3
 8010770:	440b      	add	r3, r1
 8010772:	3314      	adds	r3, #20
 8010774:	781b      	ldrb	r3, [r3, #0]
 8010776:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8010778:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801077c:	2b0a      	cmp	r3, #10
 801077e:	d105      	bne.n	801078c <etharp_find_entry+0x5c>
 8010780:	7cfb      	ldrb	r3, [r7, #19]
 8010782:	2b00      	cmp	r3, #0
 8010784:	d102      	bne.n	801078c <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 8010786:	7f3b      	ldrb	r3, [r7, #28]
 8010788:	777b      	strb	r3, [r7, #29]
 801078a:	e07c      	b.n	8010886 <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 801078c:	7cfb      	ldrb	r3, [r7, #19]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d079      	beq.n	8010886 <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8010792:	7cfb      	ldrb	r3, [r7, #19]
 8010794:	2b01      	cmp	r3, #1
 8010796:	d009      	beq.n	80107ac <etharp_find_entry+0x7c>
 8010798:	7cfb      	ldrb	r3, [r7, #19]
 801079a:	2b01      	cmp	r3, #1
 801079c:	d806      	bhi.n	80107ac <etharp_find_entry+0x7c>
 801079e:	4b83      	ldr	r3, [pc, #524]	; (80109ac <etharp_find_entry+0x27c>)
 80107a0:	f44f 7293 	mov.w	r2, #294	; 0x126
 80107a4:	4982      	ldr	r1, [pc, #520]	; (80109b0 <etharp_find_entry+0x280>)
 80107a6:	4883      	ldr	r0, [pc, #524]	; (80109b4 <etharp_find_entry+0x284>)
 80107a8:	f007 fdbc 	bl	8018324 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d00f      	beq.n	80107d2 <etharp_find_entry+0xa2>
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	6819      	ldr	r1, [r3, #0]
 80107b6:	7f3a      	ldrb	r2, [r7, #28]
 80107b8:	487b      	ldr	r0, [pc, #492]	; (80109a8 <etharp_find_entry+0x278>)
 80107ba:	4613      	mov	r3, r2
 80107bc:	005b      	lsls	r3, r3, #1
 80107be:	4413      	add	r3, r2
 80107c0:	00db      	lsls	r3, r3, #3
 80107c2:	4403      	add	r3, r0
 80107c4:	3304      	adds	r3, #4
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	4299      	cmp	r1, r3
 80107ca:	d102      	bne.n	80107d2 <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 80107cc:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80107d0:	e0e5      	b.n	801099e <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80107d2:	7cfb      	ldrb	r3, [r7, #19]
 80107d4:	2b01      	cmp	r3, #1
 80107d6:	d13b      	bne.n	8010850 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80107d8:	7f3a      	ldrb	r2, [r7, #28]
 80107da:	4973      	ldr	r1, [pc, #460]	; (80109a8 <etharp_find_entry+0x278>)
 80107dc:	4613      	mov	r3, r2
 80107de:	005b      	lsls	r3, r3, #1
 80107e0:	4413      	add	r3, r2
 80107e2:	00db      	lsls	r3, r3, #3
 80107e4:	440b      	add	r3, r1
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d018      	beq.n	801081e <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 80107ec:	7f3a      	ldrb	r2, [r7, #28]
 80107ee:	496e      	ldr	r1, [pc, #440]	; (80109a8 <etharp_find_entry+0x278>)
 80107f0:	4613      	mov	r3, r2
 80107f2:	005b      	lsls	r3, r3, #1
 80107f4:	4413      	add	r3, r2
 80107f6:	00db      	lsls	r3, r3, #3
 80107f8:	440b      	add	r3, r1
 80107fa:	3312      	adds	r3, #18
 80107fc:	881b      	ldrh	r3, [r3, #0]
 80107fe:	8b3a      	ldrh	r2, [r7, #24]
 8010800:	429a      	cmp	r2, r3
 8010802:	d840      	bhi.n	8010886 <etharp_find_entry+0x156>
            old_queue = i;
 8010804:	7f3b      	ldrb	r3, [r7, #28]
 8010806:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 8010808:	7f3a      	ldrb	r2, [r7, #28]
 801080a:	4967      	ldr	r1, [pc, #412]	; (80109a8 <etharp_find_entry+0x278>)
 801080c:	4613      	mov	r3, r2
 801080e:	005b      	lsls	r3, r3, #1
 8010810:	4413      	add	r3, r2
 8010812:	00db      	lsls	r3, r3, #3
 8010814:	440b      	add	r3, r1
 8010816:	3312      	adds	r3, #18
 8010818:	881b      	ldrh	r3, [r3, #0]
 801081a:	833b      	strh	r3, [r7, #24]
 801081c:	e033      	b.n	8010886 <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801081e:	7f3a      	ldrb	r2, [r7, #28]
 8010820:	4961      	ldr	r1, [pc, #388]	; (80109a8 <etharp_find_entry+0x278>)
 8010822:	4613      	mov	r3, r2
 8010824:	005b      	lsls	r3, r3, #1
 8010826:	4413      	add	r3, r2
 8010828:	00db      	lsls	r3, r3, #3
 801082a:	440b      	add	r3, r1
 801082c:	3312      	adds	r3, #18
 801082e:	881b      	ldrh	r3, [r3, #0]
 8010830:	8afa      	ldrh	r2, [r7, #22]
 8010832:	429a      	cmp	r2, r3
 8010834:	d827      	bhi.n	8010886 <etharp_find_entry+0x156>
            old_pending = i;
 8010836:	7f3b      	ldrb	r3, [r7, #28]
 8010838:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 801083a:	7f3a      	ldrb	r2, [r7, #28]
 801083c:	495a      	ldr	r1, [pc, #360]	; (80109a8 <etharp_find_entry+0x278>)
 801083e:	4613      	mov	r3, r2
 8010840:	005b      	lsls	r3, r3, #1
 8010842:	4413      	add	r3, r2
 8010844:	00db      	lsls	r3, r3, #3
 8010846:	440b      	add	r3, r1
 8010848:	3312      	adds	r3, #18
 801084a:	881b      	ldrh	r3, [r3, #0]
 801084c:	82fb      	strh	r3, [r7, #22]
 801084e:	e01a      	b.n	8010886 <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8010850:	7cfb      	ldrb	r3, [r7, #19]
 8010852:	2b01      	cmp	r3, #1
 8010854:	d917      	bls.n	8010886 <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8010856:	7f3a      	ldrb	r2, [r7, #28]
 8010858:	4953      	ldr	r1, [pc, #332]	; (80109a8 <etharp_find_entry+0x278>)
 801085a:	4613      	mov	r3, r2
 801085c:	005b      	lsls	r3, r3, #1
 801085e:	4413      	add	r3, r2
 8010860:	00db      	lsls	r3, r3, #3
 8010862:	440b      	add	r3, r1
 8010864:	3312      	adds	r3, #18
 8010866:	881b      	ldrh	r3, [r3, #0]
 8010868:	8aba      	ldrh	r2, [r7, #20]
 801086a:	429a      	cmp	r2, r3
 801086c:	d80b      	bhi.n	8010886 <etharp_find_entry+0x156>
            old_stable = i;
 801086e:	7f3b      	ldrb	r3, [r7, #28]
 8010870:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 8010872:	7f3a      	ldrb	r2, [r7, #28]
 8010874:	494c      	ldr	r1, [pc, #304]	; (80109a8 <etharp_find_entry+0x278>)
 8010876:	4613      	mov	r3, r2
 8010878:	005b      	lsls	r3, r3, #1
 801087a:	4413      	add	r3, r2
 801087c:	00db      	lsls	r3, r3, #3
 801087e:	440b      	add	r3, r1
 8010880:	3312      	adds	r3, #18
 8010882:	881b      	ldrh	r3, [r3, #0]
 8010884:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010886:	7f3b      	ldrb	r3, [r7, #28]
 8010888:	3301      	adds	r3, #1
 801088a:	773b      	strb	r3, [r7, #28]
 801088c:	7f3b      	ldrb	r3, [r7, #28]
 801088e:	2b09      	cmp	r3, #9
 8010890:	f67f af68 	bls.w	8010764 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8010894:	7afb      	ldrb	r3, [r7, #11]
 8010896:	f003 0302 	and.w	r3, r3, #2
 801089a:	2b00      	cmp	r3, #0
 801089c:	d108      	bne.n	80108b0 <etharp_find_entry+0x180>
 801089e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80108a2:	2b0a      	cmp	r3, #10
 80108a4:	d107      	bne.n	80108b6 <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80108a6:	7afb      	ldrb	r3, [r7, #11]
 80108a8:	f003 0301 	and.w	r3, r3, #1
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d102      	bne.n	80108b6 <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 80108b0:	f04f 33ff 	mov.w	r3, #4294967295
 80108b4:	e073      	b.n	801099e <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80108b6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80108ba:	2b09      	cmp	r3, #9
 80108bc:	dc02      	bgt.n	80108c4 <etharp_find_entry+0x194>
    i = empty;
 80108be:	7f7b      	ldrb	r3, [r7, #29]
 80108c0:	773b      	strb	r3, [r7, #28]
 80108c2:	e036      	b.n	8010932 <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80108c4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80108c8:	2b09      	cmp	r3, #9
 80108ca:	dc13      	bgt.n	80108f4 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 80108cc:	7fbb      	ldrb	r3, [r7, #30]
 80108ce:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80108d0:	7f3a      	ldrb	r2, [r7, #28]
 80108d2:	4935      	ldr	r1, [pc, #212]	; (80109a8 <etharp_find_entry+0x278>)
 80108d4:	4613      	mov	r3, r2
 80108d6:	005b      	lsls	r3, r3, #1
 80108d8:	4413      	add	r3, r2
 80108da:	00db      	lsls	r3, r3, #3
 80108dc:	440b      	add	r3, r1
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d018      	beq.n	8010916 <etharp_find_entry+0x1e6>
 80108e4:	4b31      	ldr	r3, [pc, #196]	; (80109ac <etharp_find_entry+0x27c>)
 80108e6:	f240 126f 	movw	r2, #367	; 0x16f
 80108ea:	4933      	ldr	r1, [pc, #204]	; (80109b8 <etharp_find_entry+0x288>)
 80108ec:	4831      	ldr	r0, [pc, #196]	; (80109b4 <etharp_find_entry+0x284>)
 80108ee:	f007 fd19 	bl	8018324 <iprintf>
 80108f2:	e010      	b.n	8010916 <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80108f4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80108f8:	2b09      	cmp	r3, #9
 80108fa:	dc02      	bgt.n	8010902 <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 80108fc:	7ffb      	ldrb	r3, [r7, #31]
 80108fe:	773b      	strb	r3, [r7, #28]
 8010900:	e009      	b.n	8010916 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8010902:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010906:	2b09      	cmp	r3, #9
 8010908:	dc02      	bgt.n	8010910 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801090a:	7efb      	ldrb	r3, [r7, #27]
 801090c:	773b      	strb	r3, [r7, #28]
 801090e:	e002      	b.n	8010916 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 8010910:	f04f 33ff 	mov.w	r3, #4294967295
 8010914:	e043      	b.n	801099e <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010916:	7f3b      	ldrb	r3, [r7, #28]
 8010918:	2b09      	cmp	r3, #9
 801091a:	d906      	bls.n	801092a <etharp_find_entry+0x1fa>
 801091c:	4b23      	ldr	r3, [pc, #140]	; (80109ac <etharp_find_entry+0x27c>)
 801091e:	f240 1281 	movw	r2, #385	; 0x181
 8010922:	4926      	ldr	r1, [pc, #152]	; (80109bc <etharp_find_entry+0x28c>)
 8010924:	4823      	ldr	r0, [pc, #140]	; (80109b4 <etharp_find_entry+0x284>)
 8010926:	f007 fcfd 	bl	8018324 <iprintf>
    etharp_free_entry(i);
 801092a:	7f3b      	ldrb	r3, [r7, #28]
 801092c:	4618      	mov	r0, r3
 801092e:	f7ff fe25 	bl	801057c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8010932:	7f3b      	ldrb	r3, [r7, #28]
 8010934:	2b09      	cmp	r3, #9
 8010936:	d906      	bls.n	8010946 <etharp_find_entry+0x216>
 8010938:	4b1c      	ldr	r3, [pc, #112]	; (80109ac <etharp_find_entry+0x27c>)
 801093a:	f240 1285 	movw	r2, #389	; 0x185
 801093e:	491f      	ldr	r1, [pc, #124]	; (80109bc <etharp_find_entry+0x28c>)
 8010940:	481c      	ldr	r0, [pc, #112]	; (80109b4 <etharp_find_entry+0x284>)
 8010942:	f007 fcef 	bl	8018324 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8010946:	7f3a      	ldrb	r2, [r7, #28]
 8010948:	4917      	ldr	r1, [pc, #92]	; (80109a8 <etharp_find_entry+0x278>)
 801094a:	4613      	mov	r3, r2
 801094c:	005b      	lsls	r3, r3, #1
 801094e:	4413      	add	r3, r2
 8010950:	00db      	lsls	r3, r3, #3
 8010952:	440b      	add	r3, r1
 8010954:	3314      	adds	r3, #20
 8010956:	781b      	ldrb	r3, [r3, #0]
 8010958:	2b00      	cmp	r3, #0
 801095a:	d006      	beq.n	801096a <etharp_find_entry+0x23a>
 801095c:	4b13      	ldr	r3, [pc, #76]	; (80109ac <etharp_find_entry+0x27c>)
 801095e:	f240 1287 	movw	r2, #391	; 0x187
 8010962:	4917      	ldr	r1, [pc, #92]	; (80109c0 <etharp_find_entry+0x290>)
 8010964:	4813      	ldr	r0, [pc, #76]	; (80109b4 <etharp_find_entry+0x284>)
 8010966:	f007 fcdd 	bl	8018324 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	2b00      	cmp	r3, #0
 801096e:	d00a      	beq.n	8010986 <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8010970:	7f3a      	ldrb	r2, [r7, #28]
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	6819      	ldr	r1, [r3, #0]
 8010976:	480c      	ldr	r0, [pc, #48]	; (80109a8 <etharp_find_entry+0x278>)
 8010978:	4613      	mov	r3, r2
 801097a:	005b      	lsls	r3, r3, #1
 801097c:	4413      	add	r3, r2
 801097e:	00db      	lsls	r3, r3, #3
 8010980:	4403      	add	r3, r0
 8010982:	3304      	adds	r3, #4
 8010984:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8010986:	7f3a      	ldrb	r2, [r7, #28]
 8010988:	4907      	ldr	r1, [pc, #28]	; (80109a8 <etharp_find_entry+0x278>)
 801098a:	4613      	mov	r3, r2
 801098c:	005b      	lsls	r3, r3, #1
 801098e:	4413      	add	r3, r2
 8010990:	00db      	lsls	r3, r3, #3
 8010992:	440b      	add	r3, r1
 8010994:	3312      	adds	r3, #18
 8010996:	2200      	movs	r2, #0
 8010998:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 801099a:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 801099e:	4618      	mov	r0, r3
 80109a0:	3720      	adds	r7, #32
 80109a2:	46bd      	mov	sp, r7
 80109a4:	bd80      	pop	{r7, pc}
 80109a6:	bf00      	nop
 80109a8:	20004ad8 	.word	0x20004ad8
 80109ac:	0801b060 	.word	0x0801b060
 80109b0:	0801b098 	.word	0x0801b098
 80109b4:	0801b0d8 	.word	0x0801b0d8
 80109b8:	0801b100 	.word	0x0801b100
 80109bc:	0801b118 	.word	0x0801b118
 80109c0:	0801b12c 	.word	0x0801b12c

080109c4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80109c4:	b580      	push	{r7, lr}
 80109c6:	b088      	sub	sp, #32
 80109c8:	af02      	add	r7, sp, #8
 80109ca:	60f8      	str	r0, [r7, #12]
 80109cc:	60b9      	str	r1, [r7, #8]
 80109ce:	607a      	str	r2, [r7, #4]
 80109d0:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80109d8:	2b06      	cmp	r3, #6
 80109da:	d006      	beq.n	80109ea <etharp_update_arp_entry+0x26>
 80109dc:	4b48      	ldr	r3, [pc, #288]	; (8010b00 <etharp_update_arp_entry+0x13c>)
 80109de:	f240 12ab 	movw	r2, #427	; 0x1ab
 80109e2:	4948      	ldr	r1, [pc, #288]	; (8010b04 <etharp_update_arp_entry+0x140>)
 80109e4:	4848      	ldr	r0, [pc, #288]	; (8010b08 <etharp_update_arp_entry+0x144>)
 80109e6:	f007 fc9d 	bl	8018324 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80109ea:	68bb      	ldr	r3, [r7, #8]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d012      	beq.n	8010a16 <etharp_update_arp_entry+0x52>
 80109f0:	68bb      	ldr	r3, [r7, #8]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d00e      	beq.n	8010a16 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80109f8:	68bb      	ldr	r3, [r7, #8]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	68f9      	ldr	r1, [r7, #12]
 80109fe:	4618      	mov	r0, r3
 8010a00:	f001 fe50 	bl	80126a4 <ip4_addr_isbroadcast_u32>
 8010a04:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d105      	bne.n	8010a16 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8010a0a:	68bb      	ldr	r3, [r7, #8]
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8010a12:	2be0      	cmp	r3, #224	; 0xe0
 8010a14:	d102      	bne.n	8010a1c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010a16:	f06f 030f 	mvn.w	r3, #15
 8010a1a:	e06c      	b.n	8010af6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8010a1c:	78fb      	ldrb	r3, [r7, #3]
 8010a1e:	68fa      	ldr	r2, [r7, #12]
 8010a20:	4619      	mov	r1, r3
 8010a22:	68b8      	ldr	r0, [r7, #8]
 8010a24:	f7ff fe84 	bl	8010730 <etharp_find_entry>
 8010a28:	4603      	mov	r3, r0
 8010a2a:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 8010a2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	da02      	bge.n	8010a3a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8010a34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010a38:	e05d      	b.n	8010af6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8010a3a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010a3e:	4933      	ldr	r1, [pc, #204]	; (8010b0c <etharp_update_arp_entry+0x148>)
 8010a40:	4613      	mov	r3, r2
 8010a42:	005b      	lsls	r3, r3, #1
 8010a44:	4413      	add	r3, r2
 8010a46:	00db      	lsls	r3, r3, #3
 8010a48:	440b      	add	r3, r1
 8010a4a:	3314      	adds	r3, #20
 8010a4c:	2202      	movs	r2, #2
 8010a4e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8010a50:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010a54:	492d      	ldr	r1, [pc, #180]	; (8010b0c <etharp_update_arp_entry+0x148>)
 8010a56:	4613      	mov	r3, r2
 8010a58:	005b      	lsls	r3, r3, #1
 8010a5a:	4413      	add	r3, r2
 8010a5c:	00db      	lsls	r3, r3, #3
 8010a5e:	440b      	add	r3, r1
 8010a60:	3308      	adds	r3, #8
 8010a62:	68fa      	ldr	r2, [r7, #12]
 8010a64:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8010a66:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010a6a:	4613      	mov	r3, r2
 8010a6c:	005b      	lsls	r3, r3, #1
 8010a6e:	4413      	add	r3, r2
 8010a70:	00db      	lsls	r3, r3, #3
 8010a72:	3308      	adds	r3, #8
 8010a74:	4a25      	ldr	r2, [pc, #148]	; (8010b0c <etharp_update_arp_entry+0x148>)
 8010a76:	4413      	add	r3, r2
 8010a78:	3304      	adds	r3, #4
 8010a7a:	2206      	movs	r2, #6
 8010a7c:	6879      	ldr	r1, [r7, #4]
 8010a7e:	4618      	mov	r0, r3
 8010a80:	f007 fc3d 	bl	80182fe <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8010a84:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010a88:	4920      	ldr	r1, [pc, #128]	; (8010b0c <etharp_update_arp_entry+0x148>)
 8010a8a:	4613      	mov	r3, r2
 8010a8c:	005b      	lsls	r3, r3, #1
 8010a8e:	4413      	add	r3, r2
 8010a90:	00db      	lsls	r3, r3, #3
 8010a92:	440b      	add	r3, r1
 8010a94:	3312      	adds	r3, #18
 8010a96:	2200      	movs	r2, #0
 8010a98:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8010a9a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010a9e:	491b      	ldr	r1, [pc, #108]	; (8010b0c <etharp_update_arp_entry+0x148>)
 8010aa0:	4613      	mov	r3, r2
 8010aa2:	005b      	lsls	r3, r3, #1
 8010aa4:	4413      	add	r3, r2
 8010aa6:	00db      	lsls	r3, r3, #3
 8010aa8:	440b      	add	r3, r1
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d021      	beq.n	8010af4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8010ab0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010ab4:	4915      	ldr	r1, [pc, #84]	; (8010b0c <etharp_update_arp_entry+0x148>)
 8010ab6:	4613      	mov	r3, r2
 8010ab8:	005b      	lsls	r3, r3, #1
 8010aba:	4413      	add	r3, r2
 8010abc:	00db      	lsls	r3, r3, #3
 8010abe:	440b      	add	r3, r1
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8010ac4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010ac8:	4910      	ldr	r1, [pc, #64]	; (8010b0c <etharp_update_arp_entry+0x148>)
 8010aca:	4613      	mov	r3, r2
 8010acc:	005b      	lsls	r3, r3, #1
 8010ace:	4413      	add	r3, r2
 8010ad0:	00db      	lsls	r3, r3, #3
 8010ad2:	440b      	add	r3, r1
 8010ad4:	2200      	movs	r2, #0
 8010ad6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	f103 022d 	add.w	r2, r3, #45	; 0x2d
 8010ade:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010ae2:	9300      	str	r3, [sp, #0]
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	6939      	ldr	r1, [r7, #16]
 8010ae8:	68f8      	ldr	r0, [r7, #12]
 8010aea:	f002 fdbb 	bl	8013664 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8010aee:	6938      	ldr	r0, [r7, #16]
 8010af0:	f7f8 ff86 	bl	8009a00 <pbuf_free>
  }
  return ERR_OK;
 8010af4:	2300      	movs	r3, #0
}
 8010af6:	4618      	mov	r0, r3
 8010af8:	3718      	adds	r7, #24
 8010afa:	46bd      	mov	sp, r7
 8010afc:	bd80      	pop	{r7, pc}
 8010afe:	bf00      	nop
 8010b00:	0801b060 	.word	0x0801b060
 8010b04:	0801b158 	.word	0x0801b158
 8010b08:	0801b0d8 	.word	0x0801b0d8
 8010b0c:	20004ad8 	.word	0x20004ad8

08010b10 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8010b10:	b580      	push	{r7, lr}
 8010b12:	b084      	sub	sp, #16
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010b18:	2300      	movs	r3, #0
 8010b1a:	73fb      	strb	r3, [r7, #15]
 8010b1c:	e01f      	b.n	8010b5e <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 8010b1e:	7bfa      	ldrb	r2, [r7, #15]
 8010b20:	4912      	ldr	r1, [pc, #72]	; (8010b6c <etharp_cleanup_netif+0x5c>)
 8010b22:	4613      	mov	r3, r2
 8010b24:	005b      	lsls	r3, r3, #1
 8010b26:	4413      	add	r3, r2
 8010b28:	00db      	lsls	r3, r3, #3
 8010b2a:	440b      	add	r3, r1
 8010b2c:	3314      	adds	r3, #20
 8010b2e:	781b      	ldrb	r3, [r3, #0]
 8010b30:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8010b32:	7bbb      	ldrb	r3, [r7, #14]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d00f      	beq.n	8010b58 <etharp_cleanup_netif+0x48>
 8010b38:	7bfa      	ldrb	r2, [r7, #15]
 8010b3a:	490c      	ldr	r1, [pc, #48]	; (8010b6c <etharp_cleanup_netif+0x5c>)
 8010b3c:	4613      	mov	r3, r2
 8010b3e:	005b      	lsls	r3, r3, #1
 8010b40:	4413      	add	r3, r2
 8010b42:	00db      	lsls	r3, r3, #3
 8010b44:	440b      	add	r3, r1
 8010b46:	3308      	adds	r3, #8
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	687a      	ldr	r2, [r7, #4]
 8010b4c:	429a      	cmp	r2, r3
 8010b4e:	d103      	bne.n	8010b58 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 8010b50:	7bfb      	ldrb	r3, [r7, #15]
 8010b52:	4618      	mov	r0, r3
 8010b54:	f7ff fd12 	bl	801057c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8010b58:	7bfb      	ldrb	r3, [r7, #15]
 8010b5a:	3301      	adds	r3, #1
 8010b5c:	73fb      	strb	r3, [r7, #15]
 8010b5e:	7bfb      	ldrb	r3, [r7, #15]
 8010b60:	2b09      	cmp	r3, #9
 8010b62:	d9dc      	bls.n	8010b1e <etharp_cleanup_netif+0xe>
    }
  }
}
 8010b64:	bf00      	nop
 8010b66:	3710      	adds	r7, #16
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	bd80      	pop	{r7, pc}
 8010b6c:	20004ad8 	.word	0x20004ad8

08010b70 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8010b70:	b5b0      	push	{r4, r5, r7, lr}
 8010b72:	b08a      	sub	sp, #40	; 0x28
 8010b74:	af04      	add	r7, sp, #16
 8010b76:	6078      	str	r0, [r7, #4]
 8010b78:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8010b7a:	683b      	ldr	r3, [r7, #0]
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d107      	bne.n	8010b90 <etharp_input+0x20>
 8010b80:	4b3f      	ldr	r3, [pc, #252]	; (8010c80 <etharp_input+0x110>)
 8010b82:	f44f 7222 	mov.w	r2, #648	; 0x288
 8010b86:	493f      	ldr	r1, [pc, #252]	; (8010c84 <etharp_input+0x114>)
 8010b88:	483f      	ldr	r0, [pc, #252]	; (8010c88 <etharp_input+0x118>)
 8010b8a:	f007 fbcb 	bl	8018324 <iprintf>
 8010b8e:	e074      	b.n	8010c7a <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	685b      	ldr	r3, [r3, #4]
 8010b94:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8010b96:	693b      	ldr	r3, [r7, #16]
 8010b98:	881b      	ldrh	r3, [r3, #0]
 8010b9a:	b29b      	uxth	r3, r3
 8010b9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010ba0:	d10c      	bne.n	8010bbc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010ba2:	693b      	ldr	r3, [r7, #16]
 8010ba4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8010ba6:	2b06      	cmp	r3, #6
 8010ba8:	d108      	bne.n	8010bbc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010baa:	693b      	ldr	r3, [r7, #16]
 8010bac:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8010bae:	2b04      	cmp	r3, #4
 8010bb0:	d104      	bne.n	8010bbc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8010bb2:	693b      	ldr	r3, [r7, #16]
 8010bb4:	885b      	ldrh	r3, [r3, #2]
 8010bb6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8010bb8:	2b08      	cmp	r3, #8
 8010bba:	d003      	beq.n	8010bc4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8010bbc:	6878      	ldr	r0, [r7, #4]
 8010bbe:	f7f8 ff1f 	bl	8009a00 <pbuf_free>
    return;
 8010bc2:	e05a      	b.n	8010c7a <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8010bc4:	693b      	ldr	r3, [r7, #16]
 8010bc6:	330e      	adds	r3, #14
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8010bcc:	693b      	ldr	r3, [r7, #16]
 8010bce:	3318      	adds	r3, #24
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010bd4:	683b      	ldr	r3, [r7, #0]
 8010bd6:	3304      	adds	r3, #4
 8010bd8:	681b      	ldr	r3, [r3, #0]
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d102      	bne.n	8010be4 <etharp_input+0x74>
    for_us = 0;
 8010bde:	2300      	movs	r3, #0
 8010be0:	75fb      	strb	r3, [r7, #23]
 8010be2:	e009      	b.n	8010bf8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8010be4:	68ba      	ldr	r2, [r7, #8]
 8010be6:	683b      	ldr	r3, [r7, #0]
 8010be8:	3304      	adds	r3, #4
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	429a      	cmp	r2, r3
 8010bee:	bf0c      	ite	eq
 8010bf0:	2301      	moveq	r3, #1
 8010bf2:	2300      	movne	r3, #0
 8010bf4:	b2db      	uxtb	r3, r3
 8010bf6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8010bf8:	693b      	ldr	r3, [r7, #16]
 8010bfa:	f103 0208 	add.w	r2, r3, #8
 8010bfe:	7dfb      	ldrb	r3, [r7, #23]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d001      	beq.n	8010c08 <etharp_input+0x98>
 8010c04:	2301      	movs	r3, #1
 8010c06:	e000      	b.n	8010c0a <etharp_input+0x9a>
 8010c08:	2302      	movs	r3, #2
 8010c0a:	f107 010c 	add.w	r1, r7, #12
 8010c0e:	6838      	ldr	r0, [r7, #0]
 8010c10:	f7ff fed8 	bl	80109c4 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8010c14:	693b      	ldr	r3, [r7, #16]
 8010c16:	88db      	ldrh	r3, [r3, #6]
 8010c18:	b29b      	uxth	r3, r3
 8010c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010c1e:	d003      	beq.n	8010c28 <etharp_input+0xb8>
 8010c20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010c24:	d01e      	beq.n	8010c64 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 8010c26:	e025      	b.n	8010c74 <etharp_input+0x104>
    if (for_us) {
 8010c28:	7dfb      	ldrb	r3, [r7, #23]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d021      	beq.n	8010c72 <etharp_input+0x102>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8010c2e:	683b      	ldr	r3, [r7, #0]
 8010c30:	f103 002d 	add.w	r0, r3, #45	; 0x2d
 8010c34:	693b      	ldr	r3, [r7, #16]
 8010c36:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8010c3a:	683b      	ldr	r3, [r7, #0]
 8010c3c:	f103 052d 	add.w	r5, r3, #45	; 0x2d
 8010c40:	683b      	ldr	r3, [r7, #0]
 8010c42:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 8010c44:	693a      	ldr	r2, [r7, #16]
 8010c46:	3208      	adds	r2, #8
      etharp_raw(netif,
 8010c48:	2102      	movs	r1, #2
 8010c4a:	9103      	str	r1, [sp, #12]
 8010c4c:	f107 010c 	add.w	r1, r7, #12
 8010c50:	9102      	str	r1, [sp, #8]
 8010c52:	9201      	str	r2, [sp, #4]
 8010c54:	9300      	str	r3, [sp, #0]
 8010c56:	462b      	mov	r3, r5
 8010c58:	4622      	mov	r2, r4
 8010c5a:	4601      	mov	r1, r0
 8010c5c:	6838      	ldr	r0, [r7, #0]
 8010c5e:	f000 fae7 	bl	8011230 <etharp_raw>
    break;
 8010c62:	e006      	b.n	8010c72 <etharp_input+0x102>
    dhcp_arp_reply(netif, &sipaddr);
 8010c64:	f107 030c 	add.w	r3, r7, #12
 8010c68:	4619      	mov	r1, r3
 8010c6a:	6838      	ldr	r0, [r7, #0]
 8010c6c:	f7fe fd32 	bl	800f6d4 <dhcp_arp_reply>
    break;
 8010c70:	e000      	b.n	8010c74 <etharp_input+0x104>
    break;
 8010c72:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8010c74:	6878      	ldr	r0, [r7, #4]
 8010c76:	f7f8 fec3 	bl	8009a00 <pbuf_free>
}
 8010c7a:	3718      	adds	r7, #24
 8010c7c:	46bd      	mov	sp, r7
 8010c7e:	bdb0      	pop	{r4, r5, r7, pc}
 8010c80:	0801b060 	.word	0x0801b060
 8010c84:	0801b1b0 	.word	0x0801b1b0
 8010c88:	0801b0d8 	.word	0x0801b0d8

08010c8c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 8010c8c:	b580      	push	{r7, lr}
 8010c8e:	b086      	sub	sp, #24
 8010c90:	af02      	add	r7, sp, #8
 8010c92:	60f8      	str	r0, [r7, #12]
 8010c94:	60b9      	str	r1, [r7, #8]
 8010c96:	4613      	mov	r3, r2
 8010c98:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8010c9a:	79fa      	ldrb	r2, [r7, #7]
 8010c9c:	4944      	ldr	r1, [pc, #272]	; (8010db0 <etharp_output_to_arp_index+0x124>)
 8010c9e:	4613      	mov	r3, r2
 8010ca0:	005b      	lsls	r3, r3, #1
 8010ca2:	4413      	add	r3, r2
 8010ca4:	00db      	lsls	r3, r3, #3
 8010ca6:	440b      	add	r3, r1
 8010ca8:	3314      	adds	r3, #20
 8010caa:	781b      	ldrb	r3, [r3, #0]
 8010cac:	2b01      	cmp	r3, #1
 8010cae:	d806      	bhi.n	8010cbe <etharp_output_to_arp_index+0x32>
 8010cb0:	4b40      	ldr	r3, [pc, #256]	; (8010db4 <etharp_output_to_arp_index+0x128>)
 8010cb2:	f240 22ed 	movw	r2, #749	; 0x2ed
 8010cb6:	4940      	ldr	r1, [pc, #256]	; (8010db8 <etharp_output_to_arp_index+0x12c>)
 8010cb8:	4840      	ldr	r0, [pc, #256]	; (8010dbc <etharp_output_to_arp_index+0x130>)
 8010cba:	f007 fb33 	bl	8018324 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8010cbe:	79fa      	ldrb	r2, [r7, #7]
 8010cc0:	493b      	ldr	r1, [pc, #236]	; (8010db0 <etharp_output_to_arp_index+0x124>)
 8010cc2:	4613      	mov	r3, r2
 8010cc4:	005b      	lsls	r3, r3, #1
 8010cc6:	4413      	add	r3, r2
 8010cc8:	00db      	lsls	r3, r3, #3
 8010cca:	440b      	add	r3, r1
 8010ccc:	3314      	adds	r3, #20
 8010cce:	781b      	ldrb	r3, [r3, #0]
 8010cd0:	2b02      	cmp	r3, #2
 8010cd2:	d153      	bne.n	8010d7c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8010cd4:	79fa      	ldrb	r2, [r7, #7]
 8010cd6:	4936      	ldr	r1, [pc, #216]	; (8010db0 <etharp_output_to_arp_index+0x124>)
 8010cd8:	4613      	mov	r3, r2
 8010cda:	005b      	lsls	r3, r3, #1
 8010cdc:	4413      	add	r3, r2
 8010cde:	00db      	lsls	r3, r3, #3
 8010ce0:	440b      	add	r3, r1
 8010ce2:	3312      	adds	r3, #18
 8010ce4:	881b      	ldrh	r3, [r3, #0]
 8010ce6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8010cea:	d919      	bls.n	8010d20 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8010cec:	79fa      	ldrb	r2, [r7, #7]
 8010cee:	4613      	mov	r3, r2
 8010cf0:	005b      	lsls	r3, r3, #1
 8010cf2:	4413      	add	r3, r2
 8010cf4:	00db      	lsls	r3, r3, #3
 8010cf6:	4a2e      	ldr	r2, [pc, #184]	; (8010db0 <etharp_output_to_arp_index+0x124>)
 8010cf8:	4413      	add	r3, r2
 8010cfa:	3304      	adds	r3, #4
 8010cfc:	4619      	mov	r1, r3
 8010cfe:	68f8      	ldr	r0, [r7, #12]
 8010d00:	f000 fb44 	bl	801138c <etharp_request>
 8010d04:	4603      	mov	r3, r0
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d138      	bne.n	8010d7c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010d0a:	79fa      	ldrb	r2, [r7, #7]
 8010d0c:	4928      	ldr	r1, [pc, #160]	; (8010db0 <etharp_output_to_arp_index+0x124>)
 8010d0e:	4613      	mov	r3, r2
 8010d10:	005b      	lsls	r3, r3, #1
 8010d12:	4413      	add	r3, r2
 8010d14:	00db      	lsls	r3, r3, #3
 8010d16:	440b      	add	r3, r1
 8010d18:	3314      	adds	r3, #20
 8010d1a:	2203      	movs	r2, #3
 8010d1c:	701a      	strb	r2, [r3, #0]
 8010d1e:	e02d      	b.n	8010d7c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8010d20:	79fa      	ldrb	r2, [r7, #7]
 8010d22:	4923      	ldr	r1, [pc, #140]	; (8010db0 <etharp_output_to_arp_index+0x124>)
 8010d24:	4613      	mov	r3, r2
 8010d26:	005b      	lsls	r3, r3, #1
 8010d28:	4413      	add	r3, r2
 8010d2a:	00db      	lsls	r3, r3, #3
 8010d2c:	440b      	add	r3, r1
 8010d2e:	3312      	adds	r3, #18
 8010d30:	881b      	ldrh	r3, [r3, #0]
 8010d32:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8010d36:	d321      	bcc.n	8010d7c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8010d38:	79fa      	ldrb	r2, [r7, #7]
 8010d3a:	4613      	mov	r3, r2
 8010d3c:	005b      	lsls	r3, r3, #1
 8010d3e:	4413      	add	r3, r2
 8010d40:	00db      	lsls	r3, r3, #3
 8010d42:	4a1b      	ldr	r2, [pc, #108]	; (8010db0 <etharp_output_to_arp_index+0x124>)
 8010d44:	4413      	add	r3, r2
 8010d46:	1d19      	adds	r1, r3, #4
 8010d48:	79fa      	ldrb	r2, [r7, #7]
 8010d4a:	4613      	mov	r3, r2
 8010d4c:	005b      	lsls	r3, r3, #1
 8010d4e:	4413      	add	r3, r2
 8010d50:	00db      	lsls	r3, r3, #3
 8010d52:	3308      	adds	r3, #8
 8010d54:	4a16      	ldr	r2, [pc, #88]	; (8010db0 <etharp_output_to_arp_index+0x124>)
 8010d56:	4413      	add	r3, r2
 8010d58:	3304      	adds	r3, #4
 8010d5a:	461a      	mov	r2, r3
 8010d5c:	68f8      	ldr	r0, [r7, #12]
 8010d5e:	f000 faf3 	bl	8011348 <etharp_request_dst>
 8010d62:	4603      	mov	r3, r0
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d109      	bne.n	8010d7c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8010d68:	79fa      	ldrb	r2, [r7, #7]
 8010d6a:	4911      	ldr	r1, [pc, #68]	; (8010db0 <etharp_output_to_arp_index+0x124>)
 8010d6c:	4613      	mov	r3, r2
 8010d6e:	005b      	lsls	r3, r3, #1
 8010d70:	4413      	add	r3, r2
 8010d72:	00db      	lsls	r3, r3, #3
 8010d74:	440b      	add	r3, r1
 8010d76:	3314      	adds	r3, #20
 8010d78:	2203      	movs	r2, #3
 8010d7a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	f103 012d 	add.w	r1, r3, #45	; 0x2d
 8010d82:	79fa      	ldrb	r2, [r7, #7]
 8010d84:	4613      	mov	r3, r2
 8010d86:	005b      	lsls	r3, r3, #1
 8010d88:	4413      	add	r3, r2
 8010d8a:	00db      	lsls	r3, r3, #3
 8010d8c:	3308      	adds	r3, #8
 8010d8e:	4a08      	ldr	r2, [pc, #32]	; (8010db0 <etharp_output_to_arp_index+0x124>)
 8010d90:	4413      	add	r3, r2
 8010d92:	1d1a      	adds	r2, r3, #4
 8010d94:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010d98:	9300      	str	r3, [sp, #0]
 8010d9a:	4613      	mov	r3, r2
 8010d9c:	460a      	mov	r2, r1
 8010d9e:	68b9      	ldr	r1, [r7, #8]
 8010da0:	68f8      	ldr	r0, [r7, #12]
 8010da2:	f002 fc5f 	bl	8013664 <ethernet_output>
 8010da6:	4603      	mov	r3, r0
}
 8010da8:	4618      	mov	r0, r3
 8010daa:	3710      	adds	r7, #16
 8010dac:	46bd      	mov	sp, r7
 8010dae:	bd80      	pop	{r7, pc}
 8010db0:	20004ad8 	.word	0x20004ad8
 8010db4:	0801b060 	.word	0x0801b060
 8010db8:	0801b1d0 	.word	0x0801b1d0
 8010dbc:	0801b0d8 	.word	0x0801b0d8

08010dc0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8010dc0:	b580      	push	{r7, lr}
 8010dc2:	b08a      	sub	sp, #40	; 0x28
 8010dc4:	af02      	add	r7, sp, #8
 8010dc6:	60f8      	str	r0, [r7, #12]
 8010dc8:	60b9      	str	r1, [r7, #8]
 8010dca:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d106      	bne.n	8010de4 <etharp_output+0x24>
 8010dd6:	4b69      	ldr	r3, [pc, #420]	; (8010f7c <etharp_output+0x1bc>)
 8010dd8:	f240 321b 	movw	r2, #795	; 0x31b
 8010ddc:	4968      	ldr	r1, [pc, #416]	; (8010f80 <etharp_output+0x1c0>)
 8010dde:	4869      	ldr	r0, [pc, #420]	; (8010f84 <etharp_output+0x1c4>)
 8010de0:	f007 faa0 	bl	8018324 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8010de4:	68bb      	ldr	r3, [r7, #8]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d106      	bne.n	8010df8 <etharp_output+0x38>
 8010dea:	4b64      	ldr	r3, [pc, #400]	; (8010f7c <etharp_output+0x1bc>)
 8010dec:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8010df0:	4965      	ldr	r1, [pc, #404]	; (8010f88 <etharp_output+0x1c8>)
 8010df2:	4864      	ldr	r0, [pc, #400]	; (8010f84 <etharp_output+0x1c4>)
 8010df4:	f007 fa96 	bl	8018324 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d106      	bne.n	8010e0c <etharp_output+0x4c>
 8010dfe:	4b5f      	ldr	r3, [pc, #380]	; (8010f7c <etharp_output+0x1bc>)
 8010e00:	f240 321d 	movw	r2, #797	; 0x31d
 8010e04:	4961      	ldr	r1, [pc, #388]	; (8010f8c <etharp_output+0x1cc>)
 8010e06:	485f      	ldr	r0, [pc, #380]	; (8010f84 <etharp_output+0x1c4>)
 8010e08:	f007 fa8c 	bl	8018324 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	68f9      	ldr	r1, [r7, #12]
 8010e12:	4618      	mov	r0, r3
 8010e14:	f001 fc46 	bl	80126a4 <ip4_addr_isbroadcast_u32>
 8010e18:	4603      	mov	r3, r0
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d002      	beq.n	8010e24 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8010e1e:	4b5c      	ldr	r3, [pc, #368]	; (8010f90 <etharp_output+0x1d0>)
 8010e20:	61fb      	str	r3, [r7, #28]
 8010e22:	e09b      	b.n	8010f5c <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010e2c:	2be0      	cmp	r3, #224	; 0xe0
 8010e2e:	d118      	bne.n	8010e62 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8010e30:	2301      	movs	r3, #1
 8010e32:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8010e34:	2300      	movs	r3, #0
 8010e36:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8010e38:	235e      	movs	r3, #94	; 0x5e
 8010e3a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	3301      	adds	r3, #1
 8010e40:	781b      	ldrb	r3, [r3, #0]
 8010e42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010e46:	b2db      	uxtb	r3, r3
 8010e48:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	3302      	adds	r3, #2
 8010e4e:	781b      	ldrb	r3, [r3, #0]
 8010e50:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	3303      	adds	r3, #3
 8010e56:	781b      	ldrb	r3, [r3, #0]
 8010e58:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8010e5a:	f107 0310 	add.w	r3, r7, #16
 8010e5e:	61fb      	str	r3, [r7, #28]
 8010e60:	e07c      	b.n	8010f5c <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	681a      	ldr	r2, [r3, #0]
 8010e66:	68fb      	ldr	r3, [r7, #12]
 8010e68:	3304      	adds	r3, #4
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	405a      	eors	r2, r3
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	3308      	adds	r3, #8
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	4013      	ands	r3, r2
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d012      	beq.n	8010ea0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8010e80:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8010e84:	4293      	cmp	r3, r2
 8010e86:	d00b      	beq.n	8010ea0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	330c      	adds	r3, #12
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d003      	beq.n	8010e9a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	330c      	adds	r3, #12
 8010e96:	61bb      	str	r3, [r7, #24]
 8010e98:	e002      	b.n	8010ea0 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8010e9a:	f06f 0303 	mvn.w	r3, #3
 8010e9e:	e069      	b.n	8010f74 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010ea0:	4b3c      	ldr	r3, [pc, #240]	; (8010f94 <etharp_output+0x1d4>)
 8010ea2:	781b      	ldrb	r3, [r3, #0]
 8010ea4:	4619      	mov	r1, r3
 8010ea6:	4a3c      	ldr	r2, [pc, #240]	; (8010f98 <etharp_output+0x1d8>)
 8010ea8:	460b      	mov	r3, r1
 8010eaa:	005b      	lsls	r3, r3, #1
 8010eac:	440b      	add	r3, r1
 8010eae:	00db      	lsls	r3, r3, #3
 8010eb0:	4413      	add	r3, r2
 8010eb2:	3314      	adds	r3, #20
 8010eb4:	781b      	ldrb	r3, [r3, #0]
 8010eb6:	2b01      	cmp	r3, #1
 8010eb8:	d917      	bls.n	8010eea <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8010eba:	69bb      	ldr	r3, [r7, #24]
 8010ebc:	681a      	ldr	r2, [r3, #0]
 8010ebe:	4b35      	ldr	r3, [pc, #212]	; (8010f94 <etharp_output+0x1d4>)
 8010ec0:	781b      	ldrb	r3, [r3, #0]
 8010ec2:	4618      	mov	r0, r3
 8010ec4:	4934      	ldr	r1, [pc, #208]	; (8010f98 <etharp_output+0x1d8>)
 8010ec6:	4603      	mov	r3, r0
 8010ec8:	005b      	lsls	r3, r3, #1
 8010eca:	4403      	add	r3, r0
 8010ecc:	00db      	lsls	r3, r3, #3
 8010ece:	440b      	add	r3, r1
 8010ed0:	3304      	adds	r3, #4
 8010ed2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8010ed4:	429a      	cmp	r2, r3
 8010ed6:	d108      	bne.n	8010eea <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8010ed8:	4b2e      	ldr	r3, [pc, #184]	; (8010f94 <etharp_output+0x1d4>)
 8010eda:	781b      	ldrb	r3, [r3, #0]
 8010edc:	461a      	mov	r2, r3
 8010ede:	68b9      	ldr	r1, [r7, #8]
 8010ee0:	68f8      	ldr	r0, [r7, #12]
 8010ee2:	f7ff fed3 	bl	8010c8c <etharp_output_to_arp_index>
 8010ee6:	4603      	mov	r3, r0
 8010ee8:	e044      	b.n	8010f74 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010eea:	2300      	movs	r3, #0
 8010eec:	75fb      	strb	r3, [r7, #23]
 8010eee:	e02a      	b.n	8010f46 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010ef0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010ef4:	4928      	ldr	r1, [pc, #160]	; (8010f98 <etharp_output+0x1d8>)
 8010ef6:	4613      	mov	r3, r2
 8010ef8:	005b      	lsls	r3, r3, #1
 8010efa:	4413      	add	r3, r2
 8010efc:	00db      	lsls	r3, r3, #3
 8010efe:	440b      	add	r3, r1
 8010f00:	3314      	adds	r3, #20
 8010f02:	781b      	ldrb	r3, [r3, #0]
 8010f04:	2b01      	cmp	r3, #1
 8010f06:	d918      	bls.n	8010f3a <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8010f08:	69bb      	ldr	r3, [r7, #24]
 8010f0a:	6819      	ldr	r1, [r3, #0]
 8010f0c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8010f10:	4821      	ldr	r0, [pc, #132]	; (8010f98 <etharp_output+0x1d8>)
 8010f12:	4613      	mov	r3, r2
 8010f14:	005b      	lsls	r3, r3, #1
 8010f16:	4413      	add	r3, r2
 8010f18:	00db      	lsls	r3, r3, #3
 8010f1a:	4403      	add	r3, r0
 8010f1c:	3304      	adds	r3, #4
 8010f1e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8010f20:	4299      	cmp	r1, r3
 8010f22:	d10a      	bne.n	8010f3a <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 8010f24:	7dfa      	ldrb	r2, [r7, #23]
 8010f26:	4b1b      	ldr	r3, [pc, #108]	; (8010f94 <etharp_output+0x1d4>)
 8010f28:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8010f2a:	7dfb      	ldrb	r3, [r7, #23]
 8010f2c:	461a      	mov	r2, r3
 8010f2e:	68b9      	ldr	r1, [r7, #8]
 8010f30:	68f8      	ldr	r0, [r7, #12]
 8010f32:	f7ff feab 	bl	8010c8c <etharp_output_to_arp_index>
 8010f36:	4603      	mov	r3, r0
 8010f38:	e01c      	b.n	8010f74 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8010f3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010f3e:	b2db      	uxtb	r3, r3
 8010f40:	3301      	adds	r3, #1
 8010f42:	b2db      	uxtb	r3, r3
 8010f44:	75fb      	strb	r3, [r7, #23]
 8010f46:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010f4a:	2b09      	cmp	r3, #9
 8010f4c:	ddd0      	ble.n	8010ef0 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8010f4e:	68ba      	ldr	r2, [r7, #8]
 8010f50:	69b9      	ldr	r1, [r7, #24]
 8010f52:	68f8      	ldr	r0, [r7, #12]
 8010f54:	f000 f822 	bl	8010f9c <etharp_query>
 8010f58:	4603      	mov	r3, r0
 8010f5a:	e00b      	b.n	8010f74 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	f103 022d 	add.w	r2, r3, #45	; 0x2d
 8010f62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010f66:	9300      	str	r3, [sp, #0]
 8010f68:	69fb      	ldr	r3, [r7, #28]
 8010f6a:	68b9      	ldr	r1, [r7, #8]
 8010f6c:	68f8      	ldr	r0, [r7, #12]
 8010f6e:	f002 fb79 	bl	8013664 <ethernet_output>
 8010f72:	4603      	mov	r3, r0
}
 8010f74:	4618      	mov	r0, r3
 8010f76:	3720      	adds	r7, #32
 8010f78:	46bd      	mov	sp, r7
 8010f7a:	bd80      	pop	{r7, pc}
 8010f7c:	0801b060 	.word	0x0801b060
 8010f80:	0801b1b0 	.word	0x0801b1b0
 8010f84:	0801b0d8 	.word	0x0801b0d8
 8010f88:	0801b200 	.word	0x0801b200
 8010f8c:	0801b1a0 	.word	0x0801b1a0
 8010f90:	0801c8e8 	.word	0x0801c8e8
 8010f94:	20004bc8 	.word	0x20004bc8
 8010f98:	20004ad8 	.word	0x20004ad8

08010f9c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8010f9c:	b580      	push	{r7, lr}
 8010f9e:	b08c      	sub	sp, #48	; 0x30
 8010fa0:	af02      	add	r7, sp, #8
 8010fa2:	60f8      	str	r0, [r7, #12]
 8010fa4:	60b9      	str	r1, [r7, #8]
 8010fa6:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	332d      	adds	r3, #45	; 0x2d
 8010fac:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8010fae:	23ff      	movs	r3, #255	; 0xff
 8010fb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8010fb4:	2300      	movs	r3, #0
 8010fb6:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010fb8:	68bb      	ldr	r3, [r7, #8]
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	68f9      	ldr	r1, [r7, #12]
 8010fbe:	4618      	mov	r0, r3
 8010fc0:	f001 fb70 	bl	80126a4 <ip4_addr_isbroadcast_u32>
 8010fc4:	4603      	mov	r3, r0
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d10c      	bne.n	8010fe4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010fca:	68bb      	ldr	r3, [r7, #8]
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8010fd2:	2be0      	cmp	r3, #224	; 0xe0
 8010fd4:	d006      	beq.n	8010fe4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8010fd6:	68bb      	ldr	r3, [r7, #8]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d003      	beq.n	8010fe4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8010fdc:	68bb      	ldr	r3, [r7, #8]
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d102      	bne.n	8010fea <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8010fe4:	f06f 030f 	mvn.w	r3, #15
 8010fe8:	e10f      	b.n	801120a <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8010fea:	68fa      	ldr	r2, [r7, #12]
 8010fec:	2101      	movs	r1, #1
 8010fee:	68b8      	ldr	r0, [r7, #8]
 8010ff0:	f7ff fb9e 	bl	8010730 <etharp_find_entry>
 8010ff4:	4603      	mov	r3, r0
 8010ff6:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 8010ff8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	da02      	bge.n	8011006 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 8011000:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011004:	e101      	b.n	801120a <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8011006:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801100a:	4982      	ldr	r1, [pc, #520]	; (8011214 <etharp_query+0x278>)
 801100c:	4613      	mov	r3, r2
 801100e:	005b      	lsls	r3, r3, #1
 8011010:	4413      	add	r3, r2
 8011012:	00db      	lsls	r3, r3, #3
 8011014:	440b      	add	r3, r1
 8011016:	3314      	adds	r3, #20
 8011018:	781b      	ldrb	r3, [r3, #0]
 801101a:	2b00      	cmp	r3, #0
 801101c:	d117      	bne.n	801104e <etharp_query+0xb2>
    is_new_entry = 1;
 801101e:	2301      	movs	r3, #1
 8011020:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8011022:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8011026:	497b      	ldr	r1, [pc, #492]	; (8011214 <etharp_query+0x278>)
 8011028:	4613      	mov	r3, r2
 801102a:	005b      	lsls	r3, r3, #1
 801102c:	4413      	add	r3, r2
 801102e:	00db      	lsls	r3, r3, #3
 8011030:	440b      	add	r3, r1
 8011032:	3314      	adds	r3, #20
 8011034:	2201      	movs	r2, #1
 8011036:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8011038:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801103c:	4975      	ldr	r1, [pc, #468]	; (8011214 <etharp_query+0x278>)
 801103e:	4613      	mov	r3, r2
 8011040:	005b      	lsls	r3, r3, #1
 8011042:	4413      	add	r3, r2
 8011044:	00db      	lsls	r3, r3, #3
 8011046:	440b      	add	r3, r1
 8011048:	3308      	adds	r3, #8
 801104a:	68fa      	ldr	r2, [r7, #12]
 801104c:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801104e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8011052:	4970      	ldr	r1, [pc, #448]	; (8011214 <etharp_query+0x278>)
 8011054:	4613      	mov	r3, r2
 8011056:	005b      	lsls	r3, r3, #1
 8011058:	4413      	add	r3, r2
 801105a:	00db      	lsls	r3, r3, #3
 801105c:	440b      	add	r3, r1
 801105e:	3314      	adds	r3, #20
 8011060:	781b      	ldrb	r3, [r3, #0]
 8011062:	2b01      	cmp	r3, #1
 8011064:	d012      	beq.n	801108c <etharp_query+0xf0>
 8011066:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801106a:	496a      	ldr	r1, [pc, #424]	; (8011214 <etharp_query+0x278>)
 801106c:	4613      	mov	r3, r2
 801106e:	005b      	lsls	r3, r3, #1
 8011070:	4413      	add	r3, r2
 8011072:	00db      	lsls	r3, r3, #3
 8011074:	440b      	add	r3, r1
 8011076:	3314      	adds	r3, #20
 8011078:	781b      	ldrb	r3, [r3, #0]
 801107a:	2b01      	cmp	r3, #1
 801107c:	d806      	bhi.n	801108c <etharp_query+0xf0>
 801107e:	4b66      	ldr	r3, [pc, #408]	; (8011218 <etharp_query+0x27c>)
 8011080:	f240 32c9 	movw	r2, #969	; 0x3c9
 8011084:	4965      	ldr	r1, [pc, #404]	; (801121c <etharp_query+0x280>)
 8011086:	4866      	ldr	r0, [pc, #408]	; (8011220 <etharp_query+0x284>)
 8011088:	f007 f94c 	bl	8018324 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801108c:	6a3b      	ldr	r3, [r7, #32]
 801108e:	2b00      	cmp	r3, #0
 8011090:	d102      	bne.n	8011098 <etharp_query+0xfc>
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	2b00      	cmp	r3, #0
 8011096:	d10c      	bne.n	80110b2 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8011098:	68b9      	ldr	r1, [r7, #8]
 801109a:	68f8      	ldr	r0, [r7, #12]
 801109c:	f000 f976 	bl	801138c <etharp_request>
 80110a0:	4603      	mov	r3, r0
 80110a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d102      	bne.n	80110b2 <etharp_query+0x116>
      return result;
 80110ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80110b0:	e0ab      	b.n	801120a <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d106      	bne.n	80110c6 <etharp_query+0x12a>
 80110b8:	4b57      	ldr	r3, [pc, #348]	; (8011218 <etharp_query+0x27c>)
 80110ba:	f240 32db 	movw	r2, #987	; 0x3db
 80110be:	4959      	ldr	r1, [pc, #356]	; (8011224 <etharp_query+0x288>)
 80110c0:	4857      	ldr	r0, [pc, #348]	; (8011220 <etharp_query+0x284>)
 80110c2:	f007 f92f 	bl	8018324 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80110c6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80110ca:	4952      	ldr	r1, [pc, #328]	; (8011214 <etharp_query+0x278>)
 80110cc:	4613      	mov	r3, r2
 80110ce:	005b      	lsls	r3, r3, #1
 80110d0:	4413      	add	r3, r2
 80110d2:	00db      	lsls	r3, r3, #3
 80110d4:	440b      	add	r3, r1
 80110d6:	3314      	adds	r3, #20
 80110d8:	781b      	ldrb	r3, [r3, #0]
 80110da:	2b01      	cmp	r3, #1
 80110dc:	d919      	bls.n	8011112 <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 80110de:	7cfa      	ldrb	r2, [r7, #19]
 80110e0:	4b51      	ldr	r3, [pc, #324]	; (8011228 <etharp_query+0x28c>)
 80110e2:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80110e4:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80110e8:	4613      	mov	r3, r2
 80110ea:	005b      	lsls	r3, r3, #1
 80110ec:	4413      	add	r3, r2
 80110ee:	00db      	lsls	r3, r3, #3
 80110f0:	3308      	adds	r3, #8
 80110f2:	4a48      	ldr	r2, [pc, #288]	; (8011214 <etharp_query+0x278>)
 80110f4:	4413      	add	r3, r2
 80110f6:	1d1a      	adds	r2, r3, #4
 80110f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80110fc:	9300      	str	r3, [sp, #0]
 80110fe:	4613      	mov	r3, r2
 8011100:	697a      	ldr	r2, [r7, #20]
 8011102:	6879      	ldr	r1, [r7, #4]
 8011104:	68f8      	ldr	r0, [r7, #12]
 8011106:	f002 faad 	bl	8013664 <ethernet_output>
 801110a:	4603      	mov	r3, r0
 801110c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011110:	e079      	b.n	8011206 <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011112:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8011116:	493f      	ldr	r1, [pc, #252]	; (8011214 <etharp_query+0x278>)
 8011118:	4613      	mov	r3, r2
 801111a:	005b      	lsls	r3, r3, #1
 801111c:	4413      	add	r3, r2
 801111e:	00db      	lsls	r3, r3, #3
 8011120:	440b      	add	r3, r1
 8011122:	3314      	adds	r3, #20
 8011124:	781b      	ldrb	r3, [r3, #0]
 8011126:	2b01      	cmp	r3, #1
 8011128:	d16d      	bne.n	8011206 <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801112a:	2300      	movs	r3, #0
 801112c:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	61fb      	str	r3, [r7, #28]
    while (p) {
 8011132:	e01a      	b.n	801116a <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8011134:	69fb      	ldr	r3, [r7, #28]
 8011136:	895a      	ldrh	r2, [r3, #10]
 8011138:	69fb      	ldr	r3, [r7, #28]
 801113a:	891b      	ldrh	r3, [r3, #8]
 801113c:	429a      	cmp	r2, r3
 801113e:	d10a      	bne.n	8011156 <etharp_query+0x1ba>
 8011140:	69fb      	ldr	r3, [r7, #28]
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	2b00      	cmp	r3, #0
 8011146:	d006      	beq.n	8011156 <etharp_query+0x1ba>
 8011148:	4b33      	ldr	r3, [pc, #204]	; (8011218 <etharp_query+0x27c>)
 801114a:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 801114e:	4937      	ldr	r1, [pc, #220]	; (801122c <etharp_query+0x290>)
 8011150:	4833      	ldr	r0, [pc, #204]	; (8011220 <etharp_query+0x284>)
 8011152:	f007 f8e7 	bl	8018324 <iprintf>
      if (p->type != PBUF_ROM) {
 8011156:	69fb      	ldr	r3, [r7, #28]
 8011158:	7b1b      	ldrb	r3, [r3, #12]
 801115a:	2b01      	cmp	r3, #1
 801115c:	d002      	beq.n	8011164 <etharp_query+0x1c8>
        copy_needed = 1;
 801115e:	2301      	movs	r3, #1
 8011160:	61bb      	str	r3, [r7, #24]
        break;
 8011162:	e005      	b.n	8011170 <etharp_query+0x1d4>
      }
      p = p->next;
 8011164:	69fb      	ldr	r3, [r7, #28]
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	61fb      	str	r3, [r7, #28]
    while (p) {
 801116a:	69fb      	ldr	r3, [r7, #28]
 801116c:	2b00      	cmp	r3, #0
 801116e:	d1e1      	bne.n	8011134 <etharp_query+0x198>
    }
    if (copy_needed) {
 8011170:	69bb      	ldr	r3, [r7, #24]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d017      	beq.n	80111a6 <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8011176:	69fb      	ldr	r3, [r7, #28]
 8011178:	891b      	ldrh	r3, [r3, #8]
 801117a:	2200      	movs	r2, #0
 801117c:	4619      	mov	r1, r3
 801117e:	2002      	movs	r0, #2
 8011180:	f7f8 f8cc 	bl	800931c <pbuf_alloc>
 8011184:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 8011186:	69fb      	ldr	r3, [r7, #28]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d011      	beq.n	80111b0 <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 801118c:	6879      	ldr	r1, [r7, #4]
 801118e:	69f8      	ldr	r0, [r7, #28]
 8011190:	f7f8 fd74 	bl	8009c7c <pbuf_copy>
 8011194:	4603      	mov	r3, r0
 8011196:	2b00      	cmp	r3, #0
 8011198:	d00a      	beq.n	80111b0 <etharp_query+0x214>
          pbuf_free(p);
 801119a:	69f8      	ldr	r0, [r7, #28]
 801119c:	f7f8 fc30 	bl	8009a00 <pbuf_free>
          p = NULL;
 80111a0:	2300      	movs	r3, #0
 80111a2:	61fb      	str	r3, [r7, #28]
 80111a4:	e004      	b.n	80111b0 <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80111aa:	69f8      	ldr	r0, [r7, #28]
 80111ac:	f7f8 fcd8 	bl	8009b60 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80111b0:	69fb      	ldr	r3, [r7, #28]
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d024      	beq.n	8011200 <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80111b6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80111ba:	4916      	ldr	r1, [pc, #88]	; (8011214 <etharp_query+0x278>)
 80111bc:	4613      	mov	r3, r2
 80111be:	005b      	lsls	r3, r3, #1
 80111c0:	4413      	add	r3, r2
 80111c2:	00db      	lsls	r3, r3, #3
 80111c4:	440b      	add	r3, r1
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d00b      	beq.n	80111e4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 80111cc:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80111d0:	4910      	ldr	r1, [pc, #64]	; (8011214 <etharp_query+0x278>)
 80111d2:	4613      	mov	r3, r2
 80111d4:	005b      	lsls	r3, r3, #1
 80111d6:	4413      	add	r3, r2
 80111d8:	00db      	lsls	r3, r3, #3
 80111da:	440b      	add	r3, r1
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	4618      	mov	r0, r3
 80111e0:	f7f8 fc0e 	bl	8009a00 <pbuf_free>
      }
      arp_table[i].q = p;
 80111e4:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80111e8:	490a      	ldr	r1, [pc, #40]	; (8011214 <etharp_query+0x278>)
 80111ea:	4613      	mov	r3, r2
 80111ec:	005b      	lsls	r3, r3, #1
 80111ee:	4413      	add	r3, r2
 80111f0:	00db      	lsls	r3, r3, #3
 80111f2:	440b      	add	r3, r1
 80111f4:	69fa      	ldr	r2, [r7, #28]
 80111f6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80111f8:	2300      	movs	r3, #0
 80111fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80111fe:	e002      	b.n	8011206 <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8011200:	23ff      	movs	r3, #255	; 0xff
 8011202:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8011206:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801120a:	4618      	mov	r0, r3
 801120c:	3728      	adds	r7, #40	; 0x28
 801120e:	46bd      	mov	sp, r7
 8011210:	bd80      	pop	{r7, pc}
 8011212:	bf00      	nop
 8011214:	20004ad8 	.word	0x20004ad8
 8011218:	0801b060 	.word	0x0801b060
 801121c:	0801b20c 	.word	0x0801b20c
 8011220:	0801b0d8 	.word	0x0801b0d8
 8011224:	0801b200 	.word	0x0801b200
 8011228:	20004bc8 	.word	0x20004bc8
 801122c:	0801b234 	.word	0x0801b234

08011230 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8011230:	b580      	push	{r7, lr}
 8011232:	b08a      	sub	sp, #40	; 0x28
 8011234:	af02      	add	r7, sp, #8
 8011236:	60f8      	str	r0, [r7, #12]
 8011238:	60b9      	str	r1, [r7, #8]
 801123a:	607a      	str	r2, [r7, #4]
 801123c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801123e:	2300      	movs	r3, #0
 8011240:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	2b00      	cmp	r3, #0
 8011246:	d106      	bne.n	8011256 <etharp_raw+0x26>
 8011248:	4b3a      	ldr	r3, [pc, #232]	; (8011334 <etharp_raw+0x104>)
 801124a:	f44f 628b 	mov.w	r2, #1112	; 0x458
 801124e:	493a      	ldr	r1, [pc, #232]	; (8011338 <etharp_raw+0x108>)
 8011250:	483a      	ldr	r0, [pc, #232]	; (801133c <etharp_raw+0x10c>)
 8011252:	f007 f867 	bl	8018324 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8011256:	2200      	movs	r2, #0
 8011258:	211c      	movs	r1, #28
 801125a:	2002      	movs	r0, #2
 801125c:	f7f8 f85e 	bl	800931c <pbuf_alloc>
 8011260:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8011262:	69bb      	ldr	r3, [r7, #24]
 8011264:	2b00      	cmp	r3, #0
 8011266:	d102      	bne.n	801126e <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8011268:	f04f 33ff 	mov.w	r3, #4294967295
 801126c:	e05d      	b.n	801132a <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801126e:	69bb      	ldr	r3, [r7, #24]
 8011270:	895b      	ldrh	r3, [r3, #10]
 8011272:	2b1b      	cmp	r3, #27
 8011274:	d806      	bhi.n	8011284 <etharp_raw+0x54>
 8011276:	4b2f      	ldr	r3, [pc, #188]	; (8011334 <etharp_raw+0x104>)
 8011278:	f240 4264 	movw	r2, #1124	; 0x464
 801127c:	4930      	ldr	r1, [pc, #192]	; (8011340 <etharp_raw+0x110>)
 801127e:	482f      	ldr	r0, [pc, #188]	; (801133c <etharp_raw+0x10c>)
 8011280:	f007 f850 	bl	8018324 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8011284:	69bb      	ldr	r3, [r7, #24]
 8011286:	685b      	ldr	r3, [r3, #4]
 8011288:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801128a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801128c:	4618      	mov	r0, r3
 801128e:	f7f6 fef5 	bl	800807c <lwip_htons>
 8011292:	4603      	mov	r3, r0
 8011294:	461a      	mov	r2, r3
 8011296:	697b      	ldr	r3, [r7, #20]
 8011298:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80112a0:	2b06      	cmp	r3, #6
 80112a2:	d006      	beq.n	80112b2 <etharp_raw+0x82>
 80112a4:	4b23      	ldr	r3, [pc, #140]	; (8011334 <etharp_raw+0x104>)
 80112a6:	f240 426b 	movw	r2, #1131	; 0x46b
 80112aa:	4926      	ldr	r1, [pc, #152]	; (8011344 <etharp_raw+0x114>)
 80112ac:	4823      	ldr	r0, [pc, #140]	; (801133c <etharp_raw+0x10c>)
 80112ae:	f007 f839 	bl	8018324 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 80112b2:	697b      	ldr	r3, [r7, #20]
 80112b4:	3308      	adds	r3, #8
 80112b6:	2206      	movs	r2, #6
 80112b8:	6839      	ldr	r1, [r7, #0]
 80112ba:	4618      	mov	r0, r3
 80112bc:	f007 f81f 	bl	80182fe <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 80112c0:	697b      	ldr	r3, [r7, #20]
 80112c2:	3312      	adds	r3, #18
 80112c4:	2206      	movs	r2, #6
 80112c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80112c8:	4618      	mov	r0, r3
 80112ca:	f007 f818 	bl	80182fe <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 80112ce:	697b      	ldr	r3, [r7, #20]
 80112d0:	330e      	adds	r3, #14
 80112d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80112d4:	6812      	ldr	r2, [r2, #0]
 80112d6:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 80112d8:	697b      	ldr	r3, [r7, #20]
 80112da:	3318      	adds	r3, #24
 80112dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80112de:	6812      	ldr	r2, [r2, #0]
 80112e0:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 80112e2:	697b      	ldr	r3, [r7, #20]
 80112e4:	2200      	movs	r2, #0
 80112e6:	701a      	strb	r2, [r3, #0]
 80112e8:	2200      	movs	r2, #0
 80112ea:	f042 0201 	orr.w	r2, r2, #1
 80112ee:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80112f0:	697b      	ldr	r3, [r7, #20]
 80112f2:	2200      	movs	r2, #0
 80112f4:	f042 0208 	orr.w	r2, r2, #8
 80112f8:	709a      	strb	r2, [r3, #2]
 80112fa:	2200      	movs	r2, #0
 80112fc:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80112fe:	697b      	ldr	r3, [r7, #20]
 8011300:	2206      	movs	r2, #6
 8011302:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8011304:	697b      	ldr	r3, [r7, #20]
 8011306:	2204      	movs	r2, #4
 8011308:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801130a:	f640 0306 	movw	r3, #2054	; 0x806
 801130e:	9300      	str	r3, [sp, #0]
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	68ba      	ldr	r2, [r7, #8]
 8011314:	69b9      	ldr	r1, [r7, #24]
 8011316:	68f8      	ldr	r0, [r7, #12]
 8011318:	f002 f9a4 	bl	8013664 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801131c:	69b8      	ldr	r0, [r7, #24]
 801131e:	f7f8 fb6f 	bl	8009a00 <pbuf_free>
  p = NULL;
 8011322:	2300      	movs	r3, #0
 8011324:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8011326:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801132a:	4618      	mov	r0, r3
 801132c:	3720      	adds	r7, #32
 801132e:	46bd      	mov	sp, r7
 8011330:	bd80      	pop	{r7, pc}
 8011332:	bf00      	nop
 8011334:	0801b060 	.word	0x0801b060
 8011338:	0801b1b0 	.word	0x0801b1b0
 801133c:	0801b0d8 	.word	0x0801b0d8
 8011340:	0801b250 	.word	0x0801b250
 8011344:	0801b284 	.word	0x0801b284

08011348 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 8011348:	b580      	push	{r7, lr}
 801134a:	b088      	sub	sp, #32
 801134c:	af04      	add	r7, sp, #16
 801134e:	60f8      	str	r0, [r7, #12]
 8011350:	60b9      	str	r1, [r7, #8]
 8011352:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011354:	68fb      	ldr	r3, [r7, #12]
 8011356:	f103 012d 	add.w	r1, r3, #45	; 0x2d
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	f103 002d 	add.w	r0, r3, #45	; 0x2d
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8011364:	2201      	movs	r2, #1
 8011366:	9203      	str	r2, [sp, #12]
 8011368:	68ba      	ldr	r2, [r7, #8]
 801136a:	9202      	str	r2, [sp, #8]
 801136c:	4a06      	ldr	r2, [pc, #24]	; (8011388 <etharp_request_dst+0x40>)
 801136e:	9201      	str	r2, [sp, #4]
 8011370:	9300      	str	r3, [sp, #0]
 8011372:	4603      	mov	r3, r0
 8011374:	687a      	ldr	r2, [r7, #4]
 8011376:	68f8      	ldr	r0, [r7, #12]
 8011378:	f7ff ff5a 	bl	8011230 <etharp_raw>
 801137c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801137e:	4618      	mov	r0, r3
 8011380:	3710      	adds	r7, #16
 8011382:	46bd      	mov	sp, r7
 8011384:	bd80      	pop	{r7, pc}
 8011386:	bf00      	nop
 8011388:	0801c8f0 	.word	0x0801c8f0

0801138c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801138c:	b580      	push	{r7, lr}
 801138e:	b082      	sub	sp, #8
 8011390:	af00      	add	r7, sp, #0
 8011392:	6078      	str	r0, [r7, #4]
 8011394:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8011396:	4a05      	ldr	r2, [pc, #20]	; (80113ac <etharp_request+0x20>)
 8011398:	6839      	ldr	r1, [r7, #0]
 801139a:	6878      	ldr	r0, [r7, #4]
 801139c:	f7ff ffd4 	bl	8011348 <etharp_request_dst>
 80113a0:	4603      	mov	r3, r0
}
 80113a2:	4618      	mov	r0, r3
 80113a4:	3708      	adds	r7, #8
 80113a6:	46bd      	mov	sp, r7
 80113a8:	bd80      	pop	{r7, pc}
 80113aa:	bf00      	nop
 80113ac:	0801c8e8 	.word	0x0801c8e8

080113b0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80113b0:	b580      	push	{r7, lr}
 80113b2:	b08e      	sub	sp, #56	; 0x38
 80113b4:	af04      	add	r7, sp, #16
 80113b6:	6078      	str	r0, [r7, #4]
 80113b8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80113ba:	4b7a      	ldr	r3, [pc, #488]	; (80115a4 <icmp_input+0x1f4>)
 80113bc:	689b      	ldr	r3, [r3, #8]
 80113be:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 80113c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113c2:	781b      	ldrb	r3, [r3, #0]
 80113c4:	b29b      	uxth	r3, r3
 80113c6:	f003 030f 	and.w	r3, r3, #15
 80113ca:	b29b      	uxth	r3, r3
 80113cc:	009b      	lsls	r3, r3, #2
 80113ce:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80113d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80113d2:	2b13      	cmp	r3, #19
 80113d4:	f240 80d1 	bls.w	801157a <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	895b      	ldrh	r3, [r3, #10]
 80113dc:	2b03      	cmp	r3, #3
 80113de:	f240 80ce 	bls.w	801157e <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	685b      	ldr	r3, [r3, #4]
 80113e6:	781b      	ldrb	r3, [r3, #0]
 80113e8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 80113ec:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	f000 80bb 	beq.w	801156c <icmp_input+0x1bc>
 80113f6:	2b08      	cmp	r3, #8
 80113f8:	f040 80bb 	bne.w	8011572 <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 80113fc:	4b6a      	ldr	r3, [pc, #424]	; (80115a8 <icmp_input+0x1f8>)
 80113fe:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8011400:	4b68      	ldr	r3, [pc, #416]	; (80115a4 <icmp_input+0x1f4>)
 8011402:	695b      	ldr	r3, [r3, #20]
 8011404:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011408:	2be0      	cmp	r3, #224	; 0xe0
 801140a:	f000 80bf 	beq.w	801158c <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801140e:	4b65      	ldr	r3, [pc, #404]	; (80115a4 <icmp_input+0x1f4>)
 8011410:	695a      	ldr	r2, [r3, #20]
 8011412:	4b64      	ldr	r3, [pc, #400]	; (80115a4 <icmp_input+0x1f4>)
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	4619      	mov	r1, r3
 8011418:	4610      	mov	r0, r2
 801141a:	f001 f943 	bl	80126a4 <ip4_addr_isbroadcast_u32>
 801141e:	4603      	mov	r3, r0
 8011420:	2b00      	cmp	r3, #0
 8011422:	f040 80b5 	bne.w	8011590 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	891b      	ldrh	r3, [r3, #8]
 801142a:	2b07      	cmp	r3, #7
 801142c:	f240 80a9 	bls.w	8011582 <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8011430:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011432:	330e      	adds	r3, #14
 8011434:	b29b      	uxth	r3, r3
 8011436:	b21b      	sxth	r3, r3
 8011438:	4619      	mov	r1, r3
 801143a:	6878      	ldr	r0, [r7, #4]
 801143c:	f7f8 fabc 	bl	80099b8 <pbuf_header>
 8011440:	4603      	mov	r3, r0
 8011442:	2b00      	cmp	r3, #0
 8011444:	d046      	beq.n	80114d4 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	891a      	ldrh	r2, [r3, #8]
 801144a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801144c:	4413      	add	r3, r2
 801144e:	b29b      	uxth	r3, r3
 8011450:	2200      	movs	r2, #0
 8011452:	4619      	mov	r1, r3
 8011454:	2002      	movs	r0, #2
 8011456:	f7f7 ff61 	bl	800931c <pbuf_alloc>
 801145a:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 801145c:	69bb      	ldr	r3, [r7, #24]
 801145e:	2b00      	cmp	r3, #0
 8011460:	f000 8098 	beq.w	8011594 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8011464:	69bb      	ldr	r3, [r7, #24]
 8011466:	895b      	ldrh	r3, [r3, #10]
 8011468:	461a      	mov	r2, r3
 801146a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801146c:	3308      	adds	r3, #8
 801146e:	429a      	cmp	r2, r3
 8011470:	d203      	bcs.n	801147a <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 8011472:	69b8      	ldr	r0, [r7, #24]
 8011474:	f7f8 fac4 	bl	8009a00 <pbuf_free>
        goto icmperr;
 8011478:	e08d      	b.n	8011596 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 801147a:	69bb      	ldr	r3, [r7, #24]
 801147c:	685b      	ldr	r3, [r3, #4]
 801147e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011480:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011482:	4618      	mov	r0, r3
 8011484:	f006 ff3b 	bl	80182fe <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 8011488:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801148a:	425b      	negs	r3, r3
 801148c:	b29b      	uxth	r3, r3
 801148e:	b21b      	sxth	r3, r3
 8011490:	4619      	mov	r1, r3
 8011492:	69b8      	ldr	r0, [r7, #24]
 8011494:	f7f8 fa90 	bl	80099b8 <pbuf_header>
 8011498:	4603      	mov	r3, r0
 801149a:	2b00      	cmp	r3, #0
 801149c:	d009      	beq.n	80114b2 <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801149e:	4b43      	ldr	r3, [pc, #268]	; (80115ac <icmp_input+0x1fc>)
 80114a0:	22af      	movs	r2, #175	; 0xaf
 80114a2:	4943      	ldr	r1, [pc, #268]	; (80115b0 <icmp_input+0x200>)
 80114a4:	4843      	ldr	r0, [pc, #268]	; (80115b4 <icmp_input+0x204>)
 80114a6:	f006 ff3d 	bl	8018324 <iprintf>
        pbuf_free(r);
 80114aa:	69b8      	ldr	r0, [r7, #24]
 80114ac:	f7f8 faa8 	bl	8009a00 <pbuf_free>
        goto icmperr;
 80114b0:	e071      	b.n	8011596 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 80114b2:	6879      	ldr	r1, [r7, #4]
 80114b4:	69b8      	ldr	r0, [r7, #24]
 80114b6:	f7f8 fbe1 	bl	8009c7c <pbuf_copy>
 80114ba:	4603      	mov	r3, r0
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d003      	beq.n	80114c8 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 80114c0:	69b8      	ldr	r0, [r7, #24]
 80114c2:	f7f8 fa9d 	bl	8009a00 <pbuf_free>
        goto icmperr;
 80114c6:	e066      	b.n	8011596 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 80114c8:	6878      	ldr	r0, [r7, #4]
 80114ca:	f7f8 fa99 	bl	8009a00 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 80114ce:	69bb      	ldr	r3, [r7, #24]
 80114d0:	607b      	str	r3, [r7, #4]
 80114d2:	e015      	b.n	8011500 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 80114d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80114d6:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 80114da:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80114de:	33f2      	adds	r3, #242	; 0xf2
 80114e0:	b29b      	uxth	r3, r3
 80114e2:	b21b      	sxth	r3, r3
 80114e4:	4619      	mov	r1, r3
 80114e6:	6878      	ldr	r0, [r7, #4]
 80114e8:	f7f8 fa66 	bl	80099b8 <pbuf_header>
 80114ec:	4603      	mov	r3, r0
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d006      	beq.n	8011500 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80114f2:	4b2e      	ldr	r3, [pc, #184]	; (80115ac <icmp_input+0x1fc>)
 80114f4:	22c0      	movs	r2, #192	; 0xc0
 80114f6:	4930      	ldr	r1, [pc, #192]	; (80115b8 <icmp_input+0x208>)
 80114f8:	482e      	ldr	r0, [pc, #184]	; (80115b4 <icmp_input+0x204>)
 80114fa:	f006 ff13 	bl	8018324 <iprintf>
        goto icmperr;
 80114fe:	e04a      	b.n	8011596 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	685b      	ldr	r3, [r3, #4]
 8011504:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 8011506:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801150a:	4619      	mov	r1, r3
 801150c:	6878      	ldr	r0, [r7, #4]
 801150e:	f7f8 fa53 	bl	80099b8 <pbuf_header>
 8011512:	4603      	mov	r3, r0
 8011514:	2b00      	cmp	r3, #0
 8011516:	d12b      	bne.n	8011570 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	685b      	ldr	r3, [r3, #4]
 801151c:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 801151e:	69fb      	ldr	r3, [r7, #28]
 8011520:	681a      	ldr	r2, [r3, #0]
 8011522:	693b      	ldr	r3, [r7, #16]
 8011524:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8011526:	4b1f      	ldr	r3, [pc, #124]	; (80115a4 <icmp_input+0x1f4>)
 8011528:	691a      	ldr	r2, [r3, #16]
 801152a:	693b      	ldr	r3, [r7, #16]
 801152c:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 801152e:	697b      	ldr	r3, [r7, #20]
 8011530:	2200      	movs	r2, #0
 8011532:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 8011534:	697b      	ldr	r3, [r7, #20]
 8011536:	2200      	movs	r2, #0
 8011538:	709a      	strb	r2, [r3, #2]
 801153a:	2200      	movs	r2, #0
 801153c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 801153e:	693b      	ldr	r3, [r7, #16]
 8011540:	22ff      	movs	r2, #255	; 0xff
 8011542:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8011544:	693b      	ldr	r3, [r7, #16]
 8011546:	2200      	movs	r2, #0
 8011548:	729a      	strb	r2, [r3, #10]
 801154a:	2200      	movs	r2, #0
 801154c:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801154e:	683b      	ldr	r3, [r7, #0]
 8011550:	9302      	str	r3, [sp, #8]
 8011552:	2301      	movs	r3, #1
 8011554:	9301      	str	r3, [sp, #4]
 8011556:	2300      	movs	r3, #0
 8011558:	9300      	str	r3, [sp, #0]
 801155a:	23ff      	movs	r3, #255	; 0xff
 801155c:	2200      	movs	r2, #0
 801155e:	69f9      	ldr	r1, [r7, #28]
 8011560:	6878      	ldr	r0, [r7, #4]
 8011562:	f000 ff4f 	bl	8012404 <ip4_output_if>
 8011566:	4603      	mov	r3, r0
 8011568:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 801156a:	e001      	b.n	8011570 <icmp_input+0x1c0>
    break;
 801156c:	bf00      	nop
 801156e:	e000      	b.n	8011572 <icmp_input+0x1c2>
    break;
 8011570:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8011572:	6878      	ldr	r0, [r7, #4]
 8011574:	f7f8 fa44 	bl	8009a00 <pbuf_free>
  return;
 8011578:	e011      	b.n	801159e <icmp_input+0x1ee>
    goto lenerr;
 801157a:	bf00      	nop
 801157c:	e002      	b.n	8011584 <icmp_input+0x1d4>
    goto lenerr;
 801157e:	bf00      	nop
 8011580:	e000      	b.n	8011584 <icmp_input+0x1d4>
      goto lenerr;
 8011582:	bf00      	nop
lenerr:
  pbuf_free(p);
 8011584:	6878      	ldr	r0, [r7, #4]
 8011586:	f7f8 fa3b 	bl	8009a00 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801158a:	e008      	b.n	801159e <icmp_input+0x1ee>
      goto icmperr;
 801158c:	bf00      	nop
 801158e:	e002      	b.n	8011596 <icmp_input+0x1e6>
      goto icmperr;
 8011590:	bf00      	nop
 8011592:	e000      	b.n	8011596 <icmp_input+0x1e6>
        goto icmperr;
 8011594:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8011596:	6878      	ldr	r0, [r7, #4]
 8011598:	f7f8 fa32 	bl	8009a00 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801159c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801159e:	3728      	adds	r7, #40	; 0x28
 80115a0:	46bd      	mov	sp, r7
 80115a2:	bd80      	pop	{r7, pc}
 80115a4:	20007e20 	.word	0x20007e20
 80115a8:	20007e34 	.word	0x20007e34
 80115ac:	0801b2c8 	.word	0x0801b2c8
 80115b0:	0801b300 	.word	0x0801b300
 80115b4:	0801b338 	.word	0x0801b338
 80115b8:	0801b360 	.word	0x0801b360

080115bc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80115bc:	b580      	push	{r7, lr}
 80115be:	b082      	sub	sp, #8
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	6078      	str	r0, [r7, #4]
 80115c4:	460b      	mov	r3, r1
 80115c6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80115c8:	78fb      	ldrb	r3, [r7, #3]
 80115ca:	461a      	mov	r2, r3
 80115cc:	2103      	movs	r1, #3
 80115ce:	6878      	ldr	r0, [r7, #4]
 80115d0:	f000 f814 	bl	80115fc <icmp_send_response>
}
 80115d4:	bf00      	nop
 80115d6:	3708      	adds	r7, #8
 80115d8:	46bd      	mov	sp, r7
 80115da:	bd80      	pop	{r7, pc}

080115dc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80115dc:	b580      	push	{r7, lr}
 80115de:	b082      	sub	sp, #8
 80115e0:	af00      	add	r7, sp, #0
 80115e2:	6078      	str	r0, [r7, #4]
 80115e4:	460b      	mov	r3, r1
 80115e6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80115e8:	78fb      	ldrb	r3, [r7, #3]
 80115ea:	461a      	mov	r2, r3
 80115ec:	210b      	movs	r1, #11
 80115ee:	6878      	ldr	r0, [r7, #4]
 80115f0:	f000 f804 	bl	80115fc <icmp_send_response>
}
 80115f4:	bf00      	nop
 80115f6:	3708      	adds	r7, #8
 80115f8:	46bd      	mov	sp, r7
 80115fa:	bd80      	pop	{r7, pc}

080115fc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80115fc:	b580      	push	{r7, lr}
 80115fe:	b08c      	sub	sp, #48	; 0x30
 8011600:	af04      	add	r7, sp, #16
 8011602:	6078      	str	r0, [r7, #4]
 8011604:	460b      	mov	r3, r1
 8011606:	70fb      	strb	r3, [r7, #3]
 8011608:	4613      	mov	r3, r2
 801160a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801160c:	2200      	movs	r2, #0
 801160e:	2124      	movs	r1, #36	; 0x24
 8011610:	2001      	movs	r0, #1
 8011612:	f7f7 fe83 	bl	800931c <pbuf_alloc>
 8011616:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8011618:	69fb      	ldr	r3, [r7, #28]
 801161a:	2b00      	cmp	r3, #0
 801161c:	d04c      	beq.n	80116b8 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801161e:	69fb      	ldr	r3, [r7, #28]
 8011620:	895b      	ldrh	r3, [r3, #10]
 8011622:	2b23      	cmp	r3, #35	; 0x23
 8011624:	d806      	bhi.n	8011634 <icmp_send_response+0x38>
 8011626:	4b26      	ldr	r3, [pc, #152]	; (80116c0 <icmp_send_response+0xc4>)
 8011628:	f44f 72b1 	mov.w	r2, #354	; 0x162
 801162c:	4925      	ldr	r1, [pc, #148]	; (80116c4 <icmp_send_response+0xc8>)
 801162e:	4826      	ldr	r0, [pc, #152]	; (80116c8 <icmp_send_response+0xcc>)
 8011630:	f006 fe78 	bl	8018324 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	685b      	ldr	r3, [r3, #4]
 8011638:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801163a:	69fb      	ldr	r3, [r7, #28]
 801163c:	685b      	ldr	r3, [r3, #4]
 801163e:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8011640:	697b      	ldr	r3, [r7, #20]
 8011642:	78fa      	ldrb	r2, [r7, #3]
 8011644:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8011646:	697b      	ldr	r3, [r7, #20]
 8011648:	78ba      	ldrb	r2, [r7, #2]
 801164a:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801164c:	697b      	ldr	r3, [r7, #20]
 801164e:	2200      	movs	r2, #0
 8011650:	711a      	strb	r2, [r3, #4]
 8011652:	2200      	movs	r2, #0
 8011654:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8011656:	697b      	ldr	r3, [r7, #20]
 8011658:	2200      	movs	r2, #0
 801165a:	719a      	strb	r2, [r3, #6]
 801165c:	2200      	movs	r2, #0
 801165e:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8011660:	69fb      	ldr	r3, [r7, #28]
 8011662:	685b      	ldr	r3, [r3, #4]
 8011664:	f103 0008 	add.w	r0, r3, #8
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	685b      	ldr	r3, [r3, #4]
 801166c:	221c      	movs	r2, #28
 801166e:	4619      	mov	r1, r3
 8011670:	f006 fe45 	bl	80182fe <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8011674:	69bb      	ldr	r3, [r7, #24]
 8011676:	68db      	ldr	r3, [r3, #12]
 8011678:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 801167a:	f107 030c 	add.w	r3, r7, #12
 801167e:	4618      	mov	r0, r3
 8011680:	f000 fcaa 	bl	8011fd8 <ip4_route>
 8011684:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8011686:	693b      	ldr	r3, [r7, #16]
 8011688:	2b00      	cmp	r3, #0
 801168a:	d011      	beq.n	80116b0 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801168c:	697b      	ldr	r3, [r7, #20]
 801168e:	2200      	movs	r2, #0
 8011690:	709a      	strb	r2, [r3, #2]
 8011692:	2200      	movs	r2, #0
 8011694:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8011696:	f107 020c 	add.w	r2, r7, #12
 801169a:	693b      	ldr	r3, [r7, #16]
 801169c:	9302      	str	r3, [sp, #8]
 801169e:	2301      	movs	r3, #1
 80116a0:	9301      	str	r3, [sp, #4]
 80116a2:	2300      	movs	r3, #0
 80116a4:	9300      	str	r3, [sp, #0]
 80116a6:	23ff      	movs	r3, #255	; 0xff
 80116a8:	2100      	movs	r1, #0
 80116aa:	69f8      	ldr	r0, [r7, #28]
 80116ac:	f000 feaa 	bl	8012404 <ip4_output_if>
  }
  pbuf_free(q);
 80116b0:	69f8      	ldr	r0, [r7, #28]
 80116b2:	f7f8 f9a5 	bl	8009a00 <pbuf_free>
 80116b6:	e000      	b.n	80116ba <icmp_send_response+0xbe>
    return;
 80116b8:	bf00      	nop
}
 80116ba:	3720      	adds	r7, #32
 80116bc:	46bd      	mov	sp, r7
 80116be:	bd80      	pop	{r7, pc}
 80116c0:	0801b2c8 	.word	0x0801b2c8
 80116c4:	0801b394 	.word	0x0801b394
 80116c8:	0801b338 	.word	0x0801b338

080116cc <igmp_init>:
/**
 * Initialize the IGMP module
 */
void
igmp_init(void)
{
 80116cc:	b480      	push	{r7}
 80116ce:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_init: initializing\n"));

  IP4_ADDR(&allsystems, 224, 0, 0, 1);
 80116d0:	4b04      	ldr	r3, [pc, #16]	; (80116e4 <igmp_init+0x18>)
 80116d2:	4a05      	ldr	r2, [pc, #20]	; (80116e8 <igmp_init+0x1c>)
 80116d4:	601a      	str	r2, [r3, #0]
  IP4_ADDR(&allrouters, 224, 0, 0, 2);
 80116d6:	4b05      	ldr	r3, [pc, #20]	; (80116ec <igmp_init+0x20>)
 80116d8:	4a05      	ldr	r2, [pc, #20]	; (80116f0 <igmp_init+0x24>)
 80116da:	601a      	str	r2, [r3, #0]
}
 80116dc:	bf00      	nop
 80116de:	46bd      	mov	sp, r7
 80116e0:	bc80      	pop	{r7}
 80116e2:	4770      	bx	lr
 80116e4:	20004bcc 	.word	0x20004bcc
 80116e8:	010000e0 	.word	0x010000e0
 80116ec:	20004bd0 	.word	0x20004bd0
 80116f0:	020000e0 	.word	0x020000e0

080116f4 <igmp_start>:
 *
 * @param netif network interface on which start IGMP processing
 */
err_t
igmp_start(struct netif *netif)
{
 80116f4:	b580      	push	{r7, lr}
 80116f6:	b084      	sub	sp, #16
 80116f8:	af00      	add	r7, sp, #0
 80116fa:	6078      	str	r0, [r7, #4]
  struct igmp_group* group;

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: starting IGMP processing on if %p\n", (void*)netif));

  group = igmp_lookup_group(netif, &allsystems);
 80116fc:	4911      	ldr	r1, [pc, #68]	; (8011744 <igmp_start+0x50>)
 80116fe:	6878      	ldr	r0, [r7, #4]
 8011700:	f000 f85c 	bl	80117bc <igmp_lookup_group>
 8011704:	60f8      	str	r0, [r7, #12]

  if (group != NULL) {
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	2b00      	cmp	r3, #0
 801170a:	d014      	beq.n	8011736 <igmp_start+0x42>
    group->group_state = IGMP_GROUP_IDLE_MEMBER;
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	2202      	movs	r2, #2
 8011710:	725a      	strb	r2, [r3, #9]
    group->use++;
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	7b1b      	ldrb	r3, [r3, #12]
 8011716:	3301      	adds	r3, #1
 8011718:	b2da      	uxtb	r2, r3
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	731a      	strb	r2, [r3, #12]

    /* Allow the igmp messages at the MAC level */
    if (netif->igmp_mac_filter != NULL) {
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011722:	2b00      	cmp	r3, #0
 8011724:	d005      	beq.n	8011732 <igmp_start+0x3e>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_start: igmp_mac_filter(ADD "));
      ip4_addr_debug_print_val(IGMP_DEBUG, allsystems);
      LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void*)netif));
      netif->igmp_mac_filter(netif, &allsystems, NETIF_ADD_MAC_FILTER);
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801172a:	2201      	movs	r2, #1
 801172c:	4905      	ldr	r1, [pc, #20]	; (8011744 <igmp_start+0x50>)
 801172e:	6878      	ldr	r0, [r7, #4]
 8011730:	4798      	blx	r3
    }

    return ERR_OK;
 8011732:	2300      	movs	r3, #0
 8011734:	e001      	b.n	801173a <igmp_start+0x46>
  }

  return ERR_MEM;
 8011736:	f04f 33ff 	mov.w	r3, #4294967295
}
 801173a:	4618      	mov	r0, r3
 801173c:	3710      	adds	r7, #16
 801173e:	46bd      	mov	sp, r7
 8011740:	bd80      	pop	{r7, pc}
 8011742:	bf00      	nop
 8011744:	20004bcc 	.word	0x20004bcc

08011748 <igmp_report_groups>:
 *
 * @param netif network interface on which report IGMP memberships
 */
void
igmp_report_groups(struct netif *netif)
{
 8011748:	b580      	push	{r7, lr}
 801174a:	b084      	sub	sp, #16
 801174c:	af00      	add	r7, sp, #0
 801174e:	6078      	str	r0, [r7, #4]
  struct igmp_group *group = netif_igmp_data(netif);
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011754:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_report_groups: sending IGMP reports on if %p\n", (void*)netif));

  /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
  if(group != NULL) {
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	2b00      	cmp	r3, #0
 801175a:	d00a      	beq.n	8011772 <igmp_report_groups+0x2a>
    group = group->next;
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	60fb      	str	r3, [r7, #12]
  }
  
  while (group != NULL) {
 8011762:	e006      	b.n	8011772 <igmp_report_groups+0x2a>
    igmp_delaying_member(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
 8011764:	2105      	movs	r1, #5
 8011766:	68f8      	ldr	r0, [r7, #12]
 8011768:	f000 fb7b 	bl	8011e62 <igmp_delaying_member>
    group = group->next;
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	60fb      	str	r3, [r7, #12]
  while (group != NULL) {
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	2b00      	cmp	r3, #0
 8011776:	d1f5      	bne.n	8011764 <igmp_report_groups+0x1c>
  }
}
 8011778:	bf00      	nop
 801177a:	3710      	adds	r7, #16
 801177c:	46bd      	mov	sp, r7
 801177e:	bd80      	pop	{r7, pc}

08011780 <igmp_lookfor_group>:
 * @return a struct igmp_group* if the group has been found,
 *         NULL if the group wasn't found.
 */
struct igmp_group *
igmp_lookfor_group(struct netif *ifp, const ip4_addr_t *addr)
{
 8011780:	b480      	push	{r7}
 8011782:	b085      	sub	sp, #20
 8011784:	af00      	add	r7, sp, #0
 8011786:	6078      	str	r0, [r7, #4]
 8011788:	6039      	str	r1, [r7, #0]
  struct igmp_group *group = netif_igmp_data(ifp);
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801178e:	60fb      	str	r3, [r7, #12]

  while (group != NULL) {
 8011790:	e00a      	b.n	80117a8 <igmp_lookfor_group+0x28>
    if (ip4_addr_cmp(&(group->group_address), addr)) {
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	685a      	ldr	r2, [r3, #4]
 8011796:	683b      	ldr	r3, [r7, #0]
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	429a      	cmp	r2, r3
 801179c:	d101      	bne.n	80117a2 <igmp_lookfor_group+0x22>
      return group;
 801179e:	68fb      	ldr	r3, [r7, #12]
 80117a0:	e006      	b.n	80117b0 <igmp_lookfor_group+0x30>
    }
    group = group->next;
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	60fb      	str	r3, [r7, #12]
  while (group != NULL) {
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d1f1      	bne.n	8011792 <igmp_lookfor_group+0x12>
  }

  /* to be clearer, we return NULL here instead of
   * 'group' (which is also NULL at this point).
   */
  return NULL;
 80117ae:	2300      	movs	r3, #0
}
 80117b0:	4618      	mov	r0, r3
 80117b2:	3714      	adds	r7, #20
 80117b4:	46bd      	mov	sp, r7
 80117b6:	bc80      	pop	{r7}
 80117b8:	4770      	bx	lr
	...

080117bc <igmp_lookup_group>:
 * @return a struct igmp_group*,
 *         NULL on memory error.
 */
static struct igmp_group *
igmp_lookup_group(struct netif *ifp, const ip4_addr_t *addr)
{
 80117bc:	b580      	push	{r7, lr}
 80117be:	b084      	sub	sp, #16
 80117c0:	af00      	add	r7, sp, #0
 80117c2:	6078      	str	r0, [r7, #4]
 80117c4:	6039      	str	r1, [r7, #0]
  struct igmp_group *group;
  struct igmp_group *list_head = netif_igmp_data(ifp);
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117ca:	60fb      	str	r3, [r7, #12]

  /* Search if the group already exists */
  group = igmp_lookfor_group(ifp, addr);
 80117cc:	6839      	ldr	r1, [r7, #0]
 80117ce:	6878      	ldr	r0, [r7, #4]
 80117d0:	f7ff ffd6 	bl	8011780 <igmp_lookfor_group>
 80117d4:	60b8      	str	r0, [r7, #8]
  if (group != NULL) {
 80117d6:	68bb      	ldr	r3, [r7, #8]
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d001      	beq.n	80117e0 <igmp_lookup_group+0x24>
    /* Group already exists. */
    return group;
 80117dc:	68bb      	ldr	r3, [r7, #8]
 80117de:	e047      	b.n	8011870 <igmp_lookup_group+0xb4>
  }
  
  /* Group doesn't exist yet, create a new one */
  group = (struct igmp_group *)memp_malloc(MEMP_IGMP_GROUP);
 80117e0:	200a      	movs	r0, #10
 80117e2:	f7f7 fb49 	bl	8008e78 <memp_malloc>
 80117e6:	60b8      	str	r0, [r7, #8]
  if (group != NULL) {
 80117e8:	68bb      	ldr	r3, [r7, #8]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d03f      	beq.n	801186e <igmp_lookup_group+0xb2>
    ip4_addr_set(&(group->group_address), addr);
 80117ee:	683b      	ldr	r3, [r7, #0]
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d002      	beq.n	80117fa <igmp_lookup_group+0x3e>
 80117f4:	683b      	ldr	r3, [r7, #0]
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	e000      	b.n	80117fc <igmp_lookup_group+0x40>
 80117fa:	2300      	movs	r3, #0
 80117fc:	68ba      	ldr	r2, [r7, #8]
 80117fe:	6053      	str	r3, [r2, #4]
    group->timer              = 0; /* Not running */
 8011800:	68bb      	ldr	r3, [r7, #8]
 8011802:	2200      	movs	r2, #0
 8011804:	815a      	strh	r2, [r3, #10]
    group->group_state        = IGMP_GROUP_NON_MEMBER;
 8011806:	68bb      	ldr	r3, [r7, #8]
 8011808:	2200      	movs	r2, #0
 801180a:	725a      	strb	r2, [r3, #9]
    group->last_reporter_flag = 0;
 801180c:	68bb      	ldr	r3, [r7, #8]
 801180e:	2200      	movs	r2, #0
 8011810:	721a      	strb	r2, [r3, #8]
    group->use                = 0;
 8011812:	68bb      	ldr	r3, [r7, #8]
 8011814:	2200      	movs	r2, #0
 8011816:	731a      	strb	r2, [r3, #12]

    /* Ensure allsystems group is always first in list */    
    if (list_head == NULL) {
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	2b00      	cmp	r3, #0
 801181c:	d113      	bne.n	8011846 <igmp_lookup_group+0x8a>
      /* this is the first entry in linked list */
      LWIP_ASSERT("igmp_lookup_group: first group must be allsystems",
 801181e:	683b      	ldr	r3, [r7, #0]
 8011820:	681a      	ldr	r2, [r3, #0]
 8011822:	4b15      	ldr	r3, [pc, #84]	; (8011878 <igmp_lookup_group+0xbc>)
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	429a      	cmp	r2, r3
 8011828:	d006      	beq.n	8011838 <igmp_lookup_group+0x7c>
 801182a:	4b14      	ldr	r3, [pc, #80]	; (801187c <igmp_lookup_group+0xc0>)
 801182c:	f240 120d 	movw	r2, #269	; 0x10d
 8011830:	4913      	ldr	r1, [pc, #76]	; (8011880 <igmp_lookup_group+0xc4>)
 8011832:	4814      	ldr	r0, [pc, #80]	; (8011884 <igmp_lookup_group+0xc8>)
 8011834:	f006 fd76 	bl	8018324 <iprintf>
        (ip4_addr_cmp(addr, &allsystems) != 0));
      group->next = NULL;
 8011838:	68bb      	ldr	r3, [r7, #8]
 801183a:	2200      	movs	r2, #0
 801183c:	601a      	str	r2, [r3, #0]
      netif_set_client_data(ifp, LWIP_NETIF_CLIENT_DATA_INDEX_IGMP, group);
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	68ba      	ldr	r2, [r7, #8]
 8011842:	625a      	str	r2, [r3, #36]	; 0x24
 8011844:	e013      	b.n	801186e <igmp_lookup_group+0xb2>
    } else {
      /* append _after_ first entry */
      LWIP_ASSERT("igmp_lookup_group: all except first group must not be allsystems",
 8011846:	683b      	ldr	r3, [r7, #0]
 8011848:	681a      	ldr	r2, [r3, #0]
 801184a:	4b0b      	ldr	r3, [pc, #44]	; (8011878 <igmp_lookup_group+0xbc>)
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	429a      	cmp	r2, r3
 8011850:	d106      	bne.n	8011860 <igmp_lookup_group+0xa4>
 8011852:	4b0a      	ldr	r3, [pc, #40]	; (801187c <igmp_lookup_group+0xc0>)
 8011854:	f240 1213 	movw	r2, #275	; 0x113
 8011858:	490b      	ldr	r1, [pc, #44]	; (8011888 <igmp_lookup_group+0xcc>)
 801185a:	480a      	ldr	r0, [pc, #40]	; (8011884 <igmp_lookup_group+0xc8>)
 801185c:	f006 fd62 	bl	8018324 <iprintf>
        (ip4_addr_cmp(addr, &allsystems) == 0));
      group->next = list_head->next;
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	681a      	ldr	r2, [r3, #0]
 8011864:	68bb      	ldr	r3, [r7, #8]
 8011866:	601a      	str	r2, [r3, #0]
      list_head->next = group;
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	68ba      	ldr	r2, [r7, #8]
 801186c:	601a      	str	r2, [r3, #0]

  LWIP_DEBUGF(IGMP_DEBUG, ("igmp_lookup_group: %sallocated a new group with address ", (group?"":"impossible to ")));
  ip4_addr_debug_print(IGMP_DEBUG, addr);
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void*)ifp));

  return group;
 801186e:	68bb      	ldr	r3, [r7, #8]
}
 8011870:	4618      	mov	r0, r3
 8011872:	3710      	adds	r7, #16
 8011874:	46bd      	mov	sp, r7
 8011876:	bd80      	pop	{r7, pc}
 8011878:	20004bcc 	.word	0x20004bcc
 801187c:	0801b3c0 	.word	0x0801b3c0
 8011880:	0801b3f8 	.word	0x0801b3f8
 8011884:	0801b42c 	.word	0x0801b42c
 8011888:	0801b454 	.word	0x0801b454

0801188c <igmp_remove_group>:
 * @param group the group to remove from the global igmp_group_list
 * @return ERR_OK if group was removed from the list, an err_t otherwise
 */
static err_t
igmp_remove_group(struct netif* netif, struct igmp_group *group)
{
 801188c:	b480      	push	{r7}
 801188e:	b085      	sub	sp, #20
 8011890:	af00      	add	r7, sp, #0
 8011892:	6078      	str	r0, [r7, #4]
 8011894:	6039      	str	r1, [r7, #0]
  err_t err = ERR_OK;
 8011896:	2300      	movs	r3, #0
 8011898:	73fb      	strb	r3, [r7, #15]
  struct igmp_group *tmp_group;

  /* Skip the first group in the list, it is always the allsystems group added in igmp_start() */
  for (tmp_group = netif_igmp_data(netif); tmp_group != NULL; tmp_group = tmp_group->next) {
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801189e:	60bb      	str	r3, [r7, #8]
 80118a0:	e00c      	b.n	80118bc <igmp_remove_group+0x30>
    if (tmp_group->next == group) {
 80118a2:	68bb      	ldr	r3, [r7, #8]
 80118a4:	681b      	ldr	r3, [r3, #0]
 80118a6:	683a      	ldr	r2, [r7, #0]
 80118a8:	429a      	cmp	r2, r3
 80118aa:	d104      	bne.n	80118b6 <igmp_remove_group+0x2a>
      tmp_group->next = group->next;
 80118ac:	683b      	ldr	r3, [r7, #0]
 80118ae:	681a      	ldr	r2, [r3, #0]
 80118b0:	68bb      	ldr	r3, [r7, #8]
 80118b2:	601a      	str	r2, [r3, #0]
      break;
 80118b4:	e005      	b.n	80118c2 <igmp_remove_group+0x36>
  for (tmp_group = netif_igmp_data(netif); tmp_group != NULL; tmp_group = tmp_group->next) {
 80118b6:	68bb      	ldr	r3, [r7, #8]
 80118b8:	681b      	ldr	r3, [r3, #0]
 80118ba:	60bb      	str	r3, [r7, #8]
 80118bc:	68bb      	ldr	r3, [r7, #8]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d1ef      	bne.n	80118a2 <igmp_remove_group+0x16>
    }
  }
  /* Group not found in the global igmp_group_list */
  if (tmp_group == NULL) {
 80118c2:	68bb      	ldr	r3, [r7, #8]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d101      	bne.n	80118cc <igmp_remove_group+0x40>
    err = ERR_ARG;
 80118c8:	23f0      	movs	r3, #240	; 0xf0
 80118ca:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80118cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80118d0:	4618      	mov	r0, r3
 80118d2:	3714      	adds	r7, #20
 80118d4:	46bd      	mov	sp, r7
 80118d6:	bc80      	pop	{r7}
 80118d8:	4770      	bx	lr
	...

080118dc <igmp_input>:
 * @param inp network interface on which the packet was received
 * @param dest destination ip address of the igmp packet
 */
void
igmp_input(struct pbuf *p, struct netif *inp, const ip4_addr_t *dest)
{
 80118dc:	b580      	push	{r7, lr}
 80118de:	b088      	sub	sp, #32
 80118e0:	af00      	add	r7, sp, #0
 80118e2:	60f8      	str	r0, [r7, #12]
 80118e4:	60b9      	str	r1, [r7, #8]
 80118e6:	607a      	str	r2, [r7, #4]
  struct igmp_group* groupref;

  IGMP_STATS_INC(igmp.recv);

  /* Note that the length CAN be greater than 8 but only 8 are used - All are included in the checksum */
  if (p->len < IGMP_MINLEN) {
 80118e8:	68fb      	ldr	r3, [r7, #12]
 80118ea:	895b      	ldrh	r3, [r3, #10]
 80118ec:	2b07      	cmp	r3, #7
 80118ee:	d803      	bhi.n	80118f8 <igmp_input+0x1c>
    pbuf_free(p);
 80118f0:	68f8      	ldr	r0, [r7, #12]
 80118f2:	f7f8 f885 	bl	8009a00 <pbuf_free>
    IGMP_STATS_INC(igmp.lenerr);
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: length error\n"));
    return;
 80118f6:	e086      	b.n	8011a06 <igmp_input+0x12a>
  LWIP_DEBUGF(IGMP_DEBUG, (" to address "));
  ip4_addr_debug_print(IGMP_DEBUG, &(ip4_current_header()->dest));
  LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void*)inp));

  /* Now calculate and check the checksum */
  igmp = (struct igmp_msg *)p->payload;
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	685b      	ldr	r3, [r3, #4]
 80118fc:	617b      	str	r3, [r7, #20]
  if (inet_chksum(igmp, p->len)) {
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	895b      	ldrh	r3, [r3, #10]
 8011902:	4619      	mov	r1, r3
 8011904:	6978      	ldr	r0, [r7, #20]
 8011906:	f7f6 fedb 	bl	80086c0 <inet_chksum>
 801190a:	4603      	mov	r3, r0
 801190c:	2b00      	cmp	r3, #0
 801190e:	d003      	beq.n	8011918 <igmp_input+0x3c>
    pbuf_free(p);
 8011910:	68f8      	ldr	r0, [r7, #12]
 8011912:	f7f8 f875 	bl	8009a00 <pbuf_free>
    IGMP_STATS_INC(igmp.chkerr);
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: checksum error\n"));
    return;
 8011916:	e076      	b.n	8011a06 <igmp_input+0x12a>
  }

  /* Packet is ok so find an existing group */
  group = igmp_lookfor_group(inp, dest); /* use the destination IP address of incoming packet */
 8011918:	6879      	ldr	r1, [r7, #4]
 801191a:	68b8      	ldr	r0, [r7, #8]
 801191c:	f7ff ff30 	bl	8011780 <igmp_lookfor_group>
 8011920:	61f8      	str	r0, [r7, #28]

  /* If group can be found or create... */
  if (!group) {
 8011922:	69fb      	ldr	r3, [r7, #28]
 8011924:	2b00      	cmp	r3, #0
 8011926:	d103      	bne.n	8011930 <igmp_input+0x54>
    pbuf_free(p);
 8011928:	68f8      	ldr	r0, [r7, #12]
 801192a:	f7f8 f869 	bl	8009a00 <pbuf_free>
    IGMP_STATS_INC(igmp.drop);
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: IGMP frame not for us\n"));
    return;
 801192e:	e06a      	b.n	8011a06 <igmp_input+0x12a>
  }

  /* NOW ACT ON THE INCOMING MESSAGE TYPE... */
  switch (igmp->igmp_msgtype) {
 8011930:	697b      	ldr	r3, [r7, #20]
 8011932:	781b      	ldrb	r3, [r3, #0]
 8011934:	2b11      	cmp	r3, #17
 8011936:	d002      	beq.n	801193e <igmp_input+0x62>
 8011938:	2b16      	cmp	r3, #22
 801193a:	d04f      	beq.n	80119dc <igmp_input+0x100>
    break;
  default:
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_input: unexpected msg %d in state %d on group %p on if %p\n",
      igmp->igmp_msgtype, group->group_state, (void*)&group, (void*)inp));
    IGMP_STATS_INC(igmp.proterr);
    break;
 801193c:	e05f      	b.n	80119fe <igmp_input+0x122>
    if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	681a      	ldr	r2, [r3, #0]
 8011942:	4b32      	ldr	r3, [pc, #200]	; (8011a0c <igmp_input+0x130>)
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	429a      	cmp	r2, r3
 8011948:	d125      	bne.n	8011996 <igmp_input+0xba>
 801194a:	697b      	ldr	r3, [r7, #20]
 801194c:	3304      	adds	r3, #4
 801194e:	2b00      	cmp	r3, #0
 8011950:	d003      	beq.n	801195a <igmp_input+0x7e>
 8011952:	697b      	ldr	r3, [r7, #20]
 8011954:	685b      	ldr	r3, [r3, #4]
 8011956:	2b00      	cmp	r3, #0
 8011958:	d11d      	bne.n	8011996 <igmp_input+0xba>
      if (igmp->igmp_maxresp == 0) {
 801195a:	697b      	ldr	r3, [r7, #20]
 801195c:	785b      	ldrb	r3, [r3, #1]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d102      	bne.n	8011968 <igmp_input+0x8c>
        igmp->igmp_maxresp = IGMP_V1_DELAYING_MEMBER_TMR;
 8011962:	697b      	ldr	r3, [r7, #20]
 8011964:	220a      	movs	r2, #10
 8011966:	705a      	strb	r2, [r3, #1]
      groupref = netif_igmp_data(inp);
 8011968:	68bb      	ldr	r3, [r7, #8]
 801196a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801196c:	61bb      	str	r3, [r7, #24]
      if(groupref != NULL) {
 801196e:	69bb      	ldr	r3, [r7, #24]
 8011970:	2b00      	cmp	r3, #0
 8011972:	d00c      	beq.n	801198e <igmp_input+0xb2>
        groupref = groupref->next;
 8011974:	69bb      	ldr	r3, [r7, #24]
 8011976:	681b      	ldr	r3, [r3, #0]
 8011978:	61bb      	str	r3, [r7, #24]
      while (groupref) {
 801197a:	e008      	b.n	801198e <igmp_input+0xb2>
        igmp_delaying_member(groupref, igmp->igmp_maxresp);
 801197c:	697b      	ldr	r3, [r7, #20]
 801197e:	785b      	ldrb	r3, [r3, #1]
 8011980:	4619      	mov	r1, r3
 8011982:	69b8      	ldr	r0, [r7, #24]
 8011984:	f000 fa6d 	bl	8011e62 <igmp_delaying_member>
        groupref = groupref->next;
 8011988:	69bb      	ldr	r3, [r7, #24]
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	61bb      	str	r3, [r7, #24]
      while (groupref) {
 801198e:	69bb      	ldr	r3, [r7, #24]
 8011990:	2b00      	cmp	r3, #0
 8011992:	d1f3      	bne.n	801197c <igmp_input+0xa0>
    if ((ip4_addr_cmp(dest, &allsystems)) && ip4_addr_isany(&igmp->igmp_group_address)) {
 8011994:	e021      	b.n	80119da <igmp_input+0xfe>
      if (!ip4_addr_isany(&igmp->igmp_group_address)) {
 8011996:	697b      	ldr	r3, [r7, #20]
 8011998:	3304      	adds	r3, #4
 801199a:	2b00      	cmp	r3, #0
 801199c:	d02c      	beq.n	80119f8 <igmp_input+0x11c>
 801199e:	697b      	ldr	r3, [r7, #20]
 80119a0:	685b      	ldr	r3, [r3, #4]
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d028      	beq.n	80119f8 <igmp_input+0x11c>
        if (ip4_addr_cmp(dest, &allsystems)) {
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	681a      	ldr	r2, [r3, #0]
 80119aa:	4b18      	ldr	r3, [pc, #96]	; (8011a0c <igmp_input+0x130>)
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	429a      	cmp	r2, r3
 80119b0:	d109      	bne.n	80119c6 <igmp_input+0xea>
          ip4_addr_copy(groupaddr, igmp->igmp_group_address);
 80119b2:	697b      	ldr	r3, [r7, #20]
 80119b4:	685b      	ldr	r3, [r3, #4]
 80119b6:	613b      	str	r3, [r7, #16]
          group = igmp_lookfor_group(inp, &groupaddr);
 80119b8:	f107 0310 	add.w	r3, r7, #16
 80119bc:	4619      	mov	r1, r3
 80119be:	68b8      	ldr	r0, [r7, #8]
 80119c0:	f7ff fede 	bl	8011780 <igmp_lookfor_group>
 80119c4:	61f8      	str	r0, [r7, #28]
        if (group != NULL) {
 80119c6:	69fb      	ldr	r3, [r7, #28]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d015      	beq.n	80119f8 <igmp_input+0x11c>
          igmp_delaying_member(group, igmp->igmp_maxresp);
 80119cc:	697b      	ldr	r3, [r7, #20]
 80119ce:	785b      	ldrb	r3, [r3, #1]
 80119d0:	4619      	mov	r1, r3
 80119d2:	69f8      	ldr	r0, [r7, #28]
 80119d4:	f000 fa45 	bl	8011e62 <igmp_delaying_member>
    break;
 80119d8:	e00e      	b.n	80119f8 <igmp_input+0x11c>
 80119da:	e00d      	b.n	80119f8 <igmp_input+0x11c>
    if (group->group_state == IGMP_GROUP_DELAYING_MEMBER) {
 80119dc:	69fb      	ldr	r3, [r7, #28]
 80119de:	7a5b      	ldrb	r3, [r3, #9]
 80119e0:	2b01      	cmp	r3, #1
 80119e2:	d10b      	bne.n	80119fc <igmp_input+0x120>
      group->timer = 0; /* stopped */
 80119e4:	69fb      	ldr	r3, [r7, #28]
 80119e6:	2200      	movs	r2, #0
 80119e8:	815a      	strh	r2, [r3, #10]
      group->group_state = IGMP_GROUP_IDLE_MEMBER;
 80119ea:	69fb      	ldr	r3, [r7, #28]
 80119ec:	2202      	movs	r2, #2
 80119ee:	725a      	strb	r2, [r3, #9]
      group->last_reporter_flag = 0;
 80119f0:	69fb      	ldr	r3, [r7, #28]
 80119f2:	2200      	movs	r2, #0
 80119f4:	721a      	strb	r2, [r3, #8]
    break;
 80119f6:	e001      	b.n	80119fc <igmp_input+0x120>
    break;
 80119f8:	bf00      	nop
 80119fa:	e000      	b.n	80119fe <igmp_input+0x122>
    break;
 80119fc:	bf00      	nop
  }

  pbuf_free(p);
 80119fe:	68f8      	ldr	r0, [r7, #12]
 8011a00:	f7f7 fffe 	bl	8009a00 <pbuf_free>
  return;
 8011a04:	bf00      	nop
}
 8011a06:	3720      	adds	r7, #32
 8011a08:	46bd      	mov	sp, r7
 8011a0a:	bd80      	pop	{r7, pc}
 8011a0c:	20004bcc 	.word	0x20004bcc

08011a10 <igmp_joingroup>:
 * @param groupaddr the ip address of the group which to join
 * @return ERR_OK if group was joined on the netif(s), an err_t otherwise
 */
err_t
igmp_joingroup(const ip4_addr_t *ifaddr, const ip4_addr_t *groupaddr)
{
 8011a10:	b580      	push	{r7, lr}
 8011a12:	b084      	sub	sp, #16
 8011a14:	af00      	add	r7, sp, #0
 8011a16:	6078      	str	r0, [r7, #4]
 8011a18:	6039      	str	r1, [r7, #0]
  err_t err = ERR_VAL; /* no matching interface */
 8011a1a:	23fa      	movs	r3, #250	; 0xfa
 8011a1c:	73fb      	strb	r3, [r7, #15]
  struct netif *netif;

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_joingroup: attempt to join non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
 8011a1e:	683b      	ldr	r3, [r7, #0]
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011a26:	2be0      	cmp	r3, #224	; 0xe0
 8011a28:	d009      	beq.n	8011a3e <igmp_joingroup+0x2e>
 8011a2a:	4b26      	ldr	r3, [pc, #152]	; (8011ac4 <igmp_joingroup+0xb4>)
 8011a2c:	f240 12c7 	movw	r2, #455	; 0x1c7
 8011a30:	4925      	ldr	r1, [pc, #148]	; (8011ac8 <igmp_joingroup+0xb8>)
 8011a32:	4826      	ldr	r0, [pc, #152]	; (8011acc <igmp_joingroup+0xbc>)
 8011a34:	f006 fc76 	bl	8018324 <iprintf>
 8011a38:	f06f 0305 	mvn.w	r3, #5
 8011a3c:	e03d      	b.n	8011aba <igmp_joingroup+0xaa>
  LWIP_ERROR("igmp_joingroup: attempt to join allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
 8011a3e:	683b      	ldr	r3, [r7, #0]
 8011a40:	681a      	ldr	r2, [r3, #0]
 8011a42:	4b23      	ldr	r3, [pc, #140]	; (8011ad0 <igmp_joingroup+0xc0>)
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	429a      	cmp	r2, r3
 8011a48:	d109      	bne.n	8011a5e <igmp_joingroup+0x4e>
 8011a4a:	4b1e      	ldr	r3, [pc, #120]	; (8011ac4 <igmp_joingroup+0xb4>)
 8011a4c:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
 8011a50:	4920      	ldr	r1, [pc, #128]	; (8011ad4 <igmp_joingroup+0xc4>)
 8011a52:	481e      	ldr	r0, [pc, #120]	; (8011acc <igmp_joingroup+0xbc>)
 8011a54:	f006 fc66 	bl	8018324 <iprintf>
 8011a58:	f06f 0305 	mvn.w	r3, #5
 8011a5c:	e02d      	b.n	8011aba <igmp_joingroup+0xaa>

  /* loop through netif's */
  netif = netif_list;
 8011a5e:	4b1e      	ldr	r3, [pc, #120]	; (8011ad8 <igmp_joingroup+0xc8>)
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	60bb      	str	r3, [r7, #8]
  while (netif != NULL) {
 8011a64:	e024      	b.n	8011ab0 <igmp_joingroup+0xa0>
    /* Should we join this interface ? */
    if ((netif->flags & NETIF_FLAG_IGMP) && ((ip4_addr_isany(ifaddr) || ip4_addr_cmp(netif_ip4_addr(netif), ifaddr)))) {
 8011a66:	68bb      	ldr	r3, [r7, #8]
 8011a68:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8011a6c:	f003 0320 	and.w	r3, r3, #32
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d01a      	beq.n	8011aaa <igmp_joingroup+0x9a>
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d00a      	beq.n	8011a90 <igmp_joingroup+0x80>
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d006      	beq.n	8011a90 <igmp_joingroup+0x80>
 8011a82:	68bb      	ldr	r3, [r7, #8]
 8011a84:	3304      	adds	r3, #4
 8011a86:	681a      	ldr	r2, [r3, #0]
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	429a      	cmp	r2, r3
 8011a8e:	d10c      	bne.n	8011aaa <igmp_joingroup+0x9a>
      err = igmp_joingroup_netif(netif, groupaddr);
 8011a90:	6839      	ldr	r1, [r7, #0]
 8011a92:	68b8      	ldr	r0, [r7, #8]
 8011a94:	f000 f822 	bl	8011adc <igmp_joingroup_netif>
 8011a98:	4603      	mov	r3, r0
 8011a9a:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8011a9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d002      	beq.n	8011aaa <igmp_joingroup+0x9a>
        /* Return an error even if some network interfaces are joined */
        /** @todo undo any other netif already joined */
        return err;
 8011aa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011aa8:	e007      	b.n	8011aba <igmp_joingroup+0xaa>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
 8011aaa:	68bb      	ldr	r3, [r7, #8]
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	60bb      	str	r3, [r7, #8]
  while (netif != NULL) {
 8011ab0:	68bb      	ldr	r3, [r7, #8]
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d1d7      	bne.n	8011a66 <igmp_joingroup+0x56>
  }

  return err;
 8011ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011aba:	4618      	mov	r0, r3
 8011abc:	3710      	adds	r7, #16
 8011abe:	46bd      	mov	sp, r7
 8011ac0:	bd80      	pop	{r7, pc}
 8011ac2:	bf00      	nop
 8011ac4:	0801b3c0 	.word	0x0801b3c0
 8011ac8:	0801b498 	.word	0x0801b498
 8011acc:	0801b42c 	.word	0x0801b42c
 8011ad0:	20004bcc 	.word	0x20004bcc
 8011ad4:	0801b4d0 	.word	0x0801b4d0
 8011ad8:	2000b8b4 	.word	0x2000b8b4

08011adc <igmp_joingroup_netif>:
 * @param groupaddr the ip address of the group which to join
 * @return ERR_OK if group was joined on the netif, an err_t otherwise
 */
err_t
igmp_joingroup_netif(struct netif *netif, const ip4_addr_t *groupaddr)
{
 8011adc:	b580      	push	{r7, lr}
 8011ade:	b084      	sub	sp, #16
 8011ae0:	af00      	add	r7, sp, #0
 8011ae2:	6078      	str	r0, [r7, #4]
 8011ae4:	6039      	str	r1, [r7, #0]
  struct igmp_group *group;

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_joingroup_netif: attempt to join non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
 8011ae6:	683b      	ldr	r3, [r7, #0]
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011aee:	2be0      	cmp	r3, #224	; 0xe0
 8011af0:	d009      	beq.n	8011b06 <igmp_joingroup_netif+0x2a>
 8011af2:	4b2f      	ldr	r3, [pc, #188]	; (8011bb0 <igmp_joingroup_netif+0xd4>)
 8011af4:	f240 12eb 	movw	r2, #491	; 0x1eb
 8011af8:	492e      	ldr	r1, [pc, #184]	; (8011bb4 <igmp_joingroup_netif+0xd8>)
 8011afa:	482f      	ldr	r0, [pc, #188]	; (8011bb8 <igmp_joingroup_netif+0xdc>)
 8011afc:	f006 fc12 	bl	8018324 <iprintf>
 8011b00:	f06f 0305 	mvn.w	r3, #5
 8011b04:	e050      	b.n	8011ba8 <igmp_joingroup_netif+0xcc>
  LWIP_ERROR("igmp_joingroup_netif: attempt to join allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
 8011b06:	683b      	ldr	r3, [r7, #0]
 8011b08:	681a      	ldr	r2, [r3, #0]
 8011b0a:	4b2c      	ldr	r3, [pc, #176]	; (8011bbc <igmp_joingroup_netif+0xe0>)
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	429a      	cmp	r2, r3
 8011b10:	d109      	bne.n	8011b26 <igmp_joingroup_netif+0x4a>
 8011b12:	4b27      	ldr	r3, [pc, #156]	; (8011bb0 <igmp_joingroup_netif+0xd4>)
 8011b14:	f44f 72f6 	mov.w	r2, #492	; 0x1ec
 8011b18:	4929      	ldr	r1, [pc, #164]	; (8011bc0 <igmp_joingroup_netif+0xe4>)
 8011b1a:	4827      	ldr	r0, [pc, #156]	; (8011bb8 <igmp_joingroup_netif+0xdc>)
 8011b1c:	f006 fc02 	bl	8018324 <iprintf>
 8011b20:	f06f 0305 	mvn.w	r3, #5
 8011b24:	e040      	b.n	8011ba8 <igmp_joingroup_netif+0xcc>

  /* make sure it is an igmp-enabled netif */
  LWIP_ERROR("igmp_joingroup_netif: attempt to join on non-IGMP netif", netif->flags & NETIF_FLAG_IGMP, return ERR_VAL;);
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8011b2c:	f003 0320 	and.w	r3, r3, #32
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d109      	bne.n	8011b48 <igmp_joingroup_netif+0x6c>
 8011b34:	4b1e      	ldr	r3, [pc, #120]	; (8011bb0 <igmp_joingroup_netif+0xd4>)
 8011b36:	f240 12ef 	movw	r2, #495	; 0x1ef
 8011b3a:	4922      	ldr	r1, [pc, #136]	; (8011bc4 <igmp_joingroup_netif+0xe8>)
 8011b3c:	481e      	ldr	r0, [pc, #120]	; (8011bb8 <igmp_joingroup_netif+0xdc>)
 8011b3e:	f006 fbf1 	bl	8018324 <iprintf>
 8011b42:	f06f 0305 	mvn.w	r3, #5
 8011b46:	e02f      	b.n	8011ba8 <igmp_joingroup_netif+0xcc>

  /* find group or create a new one if not found */
  group = igmp_lookup_group(netif, groupaddr);
 8011b48:	6839      	ldr	r1, [r7, #0]
 8011b4a:	6878      	ldr	r0, [r7, #4]
 8011b4c:	f7ff fe36 	bl	80117bc <igmp_lookup_group>
 8011b50:	60f8      	str	r0, [r7, #12]

  if (group != NULL) {
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d025      	beq.n	8011ba4 <igmp_joingroup_netif+0xc8>
    /* This should create a new group, check the state to make sure */
    if (group->group_state != IGMP_GROUP_NON_MEMBER) {
 8011b58:	68fb      	ldr	r3, [r7, #12]
 8011b5a:	7a5b      	ldrb	r3, [r3, #9]
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d119      	bne.n	8011b94 <igmp_joingroup_netif+0xb8>
      LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: join to new group: "));
      ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
      LWIP_DEBUGF(IGMP_DEBUG, ("\n"));

      /* If first use of the group, allow the group at the MAC level */
      if ((group->use==0) && (netif->igmp_mac_filter != NULL)) {
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	7b1b      	ldrb	r3, [r3, #12]
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d109      	bne.n	8011b7c <igmp_joingroup_netif+0xa0>
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b6c:	2b00      	cmp	r3, #0
 8011b6e:	d005      	beq.n	8011b7c <igmp_joingroup_netif+0xa0>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: igmp_mac_filter(ADD "));
        ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
        LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void*)netif));
        netif->igmp_mac_filter(netif, groupaddr, NETIF_ADD_MAC_FILTER);
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b74:	2201      	movs	r2, #1
 8011b76:	6839      	ldr	r1, [r7, #0]
 8011b78:	6878      	ldr	r0, [r7, #4]
 8011b7a:	4798      	blx	r3
      }

      IGMP_STATS_INC(igmp.tx_join);
      igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
 8011b7c:	2216      	movs	r2, #22
 8011b7e:	68f9      	ldr	r1, [r7, #12]
 8011b80:	6878      	ldr	r0, [r7, #4]
 8011b82:	f000 f9b5 	bl	8011ef0 <igmp_send>

      igmp_start_timer(group, IGMP_JOIN_DELAYING_MEMBER_TMR);
 8011b86:	2105      	movs	r1, #5
 8011b88:	68f8      	ldr	r0, [r7, #12]
 8011b8a:	f000 f947 	bl	8011e1c <igmp_start_timer>

      /* Need to work out where this timer comes from */
      group->group_state = IGMP_GROUP_DELAYING_MEMBER;
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	2201      	movs	r2, #1
 8011b92:	725a      	strb	r2, [r3, #9]
    }
    /* Increment group use */
    group->use++;
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	7b1b      	ldrb	r3, [r3, #12]
 8011b98:	3301      	adds	r3, #1
 8011b9a:	b2da      	uxtb	r2, r3
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	731a      	strb	r2, [r3, #12]
    /* Join on this interface */
    return ERR_OK;
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	e001      	b.n	8011ba8 <igmp_joingroup_netif+0xcc>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_joingroup_netif: Not enough memory to join to group\n"));
    return ERR_MEM;
 8011ba4:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8011ba8:	4618      	mov	r0, r3
 8011baa:	3710      	adds	r7, #16
 8011bac:	46bd      	mov	sp, r7
 8011bae:	bd80      	pop	{r7, pc}
 8011bb0:	0801b3c0 	.word	0x0801b3c0
 8011bb4:	0801b504 	.word	0x0801b504
 8011bb8:	0801b42c 	.word	0x0801b42c
 8011bbc:	20004bcc 	.word	0x20004bcc
 8011bc0:	0801b540 	.word	0x0801b540
 8011bc4:	0801b57c 	.word	0x0801b57c

08011bc8 <igmp_leavegroup>:
 * @param groupaddr the ip address of the group which to leave
 * @return ERR_OK if group was left on the netif(s), an err_t otherwise
 */
err_t
igmp_leavegroup(const ip4_addr_t *ifaddr, const ip4_addr_t *groupaddr)
{
 8011bc8:	b580      	push	{r7, lr}
 8011bca:	b086      	sub	sp, #24
 8011bcc:	af00      	add	r7, sp, #0
 8011bce:	6078      	str	r0, [r7, #4]
 8011bd0:	6039      	str	r1, [r7, #0]
  err_t err = ERR_VAL; /* no matching interface */
 8011bd2:	23fa      	movs	r3, #250	; 0xfa
 8011bd4:	75fb      	strb	r3, [r7, #23]
  struct netif *netif;

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_leavegroup: attempt to leave non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
 8011bd6:	683b      	ldr	r3, [r7, #0]
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011bde:	2be0      	cmp	r3, #224	; 0xe0
 8011be0:	d009      	beq.n	8011bf6 <igmp_leavegroup+0x2e>
 8011be2:	4b25      	ldr	r3, [pc, #148]	; (8011c78 <igmp_leavegroup+0xb0>)
 8011be4:	f240 2227 	movw	r2, #551	; 0x227
 8011be8:	4924      	ldr	r1, [pc, #144]	; (8011c7c <igmp_leavegroup+0xb4>)
 8011bea:	4825      	ldr	r0, [pc, #148]	; (8011c80 <igmp_leavegroup+0xb8>)
 8011bec:	f006 fb9a 	bl	8018324 <iprintf>
 8011bf0:	f06f 0305 	mvn.w	r3, #5
 8011bf4:	e03c      	b.n	8011c70 <igmp_leavegroup+0xa8>
  LWIP_ERROR("igmp_leavegroup: attempt to leave allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
 8011bf6:	683b      	ldr	r3, [r7, #0]
 8011bf8:	681a      	ldr	r2, [r3, #0]
 8011bfa:	4b22      	ldr	r3, [pc, #136]	; (8011c84 <igmp_leavegroup+0xbc>)
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	429a      	cmp	r2, r3
 8011c00:	d109      	bne.n	8011c16 <igmp_leavegroup+0x4e>
 8011c02:	4b1d      	ldr	r3, [pc, #116]	; (8011c78 <igmp_leavegroup+0xb0>)
 8011c04:	f44f 720a 	mov.w	r2, #552	; 0x228
 8011c08:	491f      	ldr	r1, [pc, #124]	; (8011c88 <igmp_leavegroup+0xc0>)
 8011c0a:	481d      	ldr	r0, [pc, #116]	; (8011c80 <igmp_leavegroup+0xb8>)
 8011c0c:	f006 fb8a 	bl	8018324 <iprintf>
 8011c10:	f06f 0305 	mvn.w	r3, #5
 8011c14:	e02c      	b.n	8011c70 <igmp_leavegroup+0xa8>

  /* loop through netif's */
  netif = netif_list;
 8011c16:	4b1d      	ldr	r3, [pc, #116]	; (8011c8c <igmp_leavegroup+0xc4>)
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	613b      	str	r3, [r7, #16]
  while (netif != NULL) {
 8011c1c:	e023      	b.n	8011c66 <igmp_leavegroup+0x9e>
    /* Should we leave this interface ? */
    if ((netif->flags & NETIF_FLAG_IGMP) && ((ip4_addr_isany(ifaddr) || ip4_addr_cmp(netif_ip4_addr(netif), ifaddr)))) {
 8011c1e:	693b      	ldr	r3, [r7, #16]
 8011c20:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8011c24:	f003 0320 	and.w	r3, r3, #32
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d019      	beq.n	8011c60 <igmp_leavegroup+0x98>
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d00a      	beq.n	8011c48 <igmp_leavegroup+0x80>
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d006      	beq.n	8011c48 <igmp_leavegroup+0x80>
 8011c3a:	693b      	ldr	r3, [r7, #16]
 8011c3c:	3304      	adds	r3, #4
 8011c3e:	681a      	ldr	r2, [r3, #0]
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	429a      	cmp	r2, r3
 8011c46:	d10b      	bne.n	8011c60 <igmp_leavegroup+0x98>
      err_t res = igmp_leavegroup_netif(netif, groupaddr);
 8011c48:	6839      	ldr	r1, [r7, #0]
 8011c4a:	6938      	ldr	r0, [r7, #16]
 8011c4c:	f000 f820 	bl	8011c90 <igmp_leavegroup_netif>
 8011c50:	4603      	mov	r3, r0
 8011c52:	73fb      	strb	r3, [r7, #15]
      if (err != ERR_OK) {
 8011c54:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d001      	beq.n	8011c60 <igmp_leavegroup+0x98>
        /* Store this result if we have not yet gotten a success */
        err = res;
 8011c5c:	7bfb      	ldrb	r3, [r7, #15]
 8011c5e:	75fb      	strb	r3, [r7, #23]
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
 8011c60:	693b      	ldr	r3, [r7, #16]
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	613b      	str	r3, [r7, #16]
  while (netif != NULL) {
 8011c66:	693b      	ldr	r3, [r7, #16]
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d1d8      	bne.n	8011c1e <igmp_leavegroup+0x56>
  }

  return err;
 8011c6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011c70:	4618      	mov	r0, r3
 8011c72:	3718      	adds	r7, #24
 8011c74:	46bd      	mov	sp, r7
 8011c76:	bd80      	pop	{r7, pc}
 8011c78:	0801b3c0 	.word	0x0801b3c0
 8011c7c:	0801b5b4 	.word	0x0801b5b4
 8011c80:	0801b42c 	.word	0x0801b42c
 8011c84:	20004bcc 	.word	0x20004bcc
 8011c88:	0801b5ec 	.word	0x0801b5ec
 8011c8c:	2000b8b4 	.word	0x2000b8b4

08011c90 <igmp_leavegroup_netif>:
 * @param groupaddr the ip address of the group which to leave
 * @return ERR_OK if group was left on the netif, an err_t otherwise
 */
err_t
igmp_leavegroup_netif(struct netif *netif, const ip4_addr_t *groupaddr)
{
 8011c90:	b580      	push	{r7, lr}
 8011c92:	b084      	sub	sp, #16
 8011c94:	af00      	add	r7, sp, #0
 8011c96:	6078      	str	r0, [r7, #4]
 8011c98:	6039      	str	r1, [r7, #0]
  struct igmp_group *group;

  /* make sure it is multicast address */
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave non-multicast address", ip4_addr_ismulticast(groupaddr), return ERR_VAL;);
 8011c9a:	683b      	ldr	r3, [r7, #0]
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011ca2:	2be0      	cmp	r3, #224	; 0xe0
 8011ca4:	d009      	beq.n	8011cba <igmp_leavegroup_netif+0x2a>
 8011ca6:	4b30      	ldr	r3, [pc, #192]	; (8011d68 <igmp_leavegroup_netif+0xd8>)
 8011ca8:	f240 224a 	movw	r2, #586	; 0x24a
 8011cac:	492f      	ldr	r1, [pc, #188]	; (8011d6c <igmp_leavegroup_netif+0xdc>)
 8011cae:	4830      	ldr	r0, [pc, #192]	; (8011d70 <igmp_leavegroup_netif+0xe0>)
 8011cb0:	f006 fb38 	bl	8018324 <iprintf>
 8011cb4:	f06f 0305 	mvn.w	r3, #5
 8011cb8:	e052      	b.n	8011d60 <igmp_leavegroup_netif+0xd0>
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave allsystems address", (!ip4_addr_cmp(groupaddr, &allsystems)), return ERR_VAL;);
 8011cba:	683b      	ldr	r3, [r7, #0]
 8011cbc:	681a      	ldr	r2, [r3, #0]
 8011cbe:	4b2d      	ldr	r3, [pc, #180]	; (8011d74 <igmp_leavegroup_netif+0xe4>)
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	429a      	cmp	r2, r3
 8011cc4:	d109      	bne.n	8011cda <igmp_leavegroup_netif+0x4a>
 8011cc6:	4b28      	ldr	r3, [pc, #160]	; (8011d68 <igmp_leavegroup_netif+0xd8>)
 8011cc8:	f240 224b 	movw	r2, #587	; 0x24b
 8011ccc:	492a      	ldr	r1, [pc, #168]	; (8011d78 <igmp_leavegroup_netif+0xe8>)
 8011cce:	4828      	ldr	r0, [pc, #160]	; (8011d70 <igmp_leavegroup_netif+0xe0>)
 8011cd0:	f006 fb28 	bl	8018324 <iprintf>
 8011cd4:	f06f 0305 	mvn.w	r3, #5
 8011cd8:	e042      	b.n	8011d60 <igmp_leavegroup_netif+0xd0>

  /* make sure it is an igmp-enabled netif */
  LWIP_ERROR("igmp_leavegroup_netif: attempt to leave on non-IGMP netif", netif->flags & NETIF_FLAG_IGMP, return ERR_VAL;);
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8011ce0:	f003 0320 	and.w	r3, r3, #32
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d109      	bne.n	8011cfc <igmp_leavegroup_netif+0x6c>
 8011ce8:	4b1f      	ldr	r3, [pc, #124]	; (8011d68 <igmp_leavegroup_netif+0xd8>)
 8011cea:	f240 224e 	movw	r2, #590	; 0x24e
 8011cee:	4923      	ldr	r1, [pc, #140]	; (8011d7c <igmp_leavegroup_netif+0xec>)
 8011cf0:	481f      	ldr	r0, [pc, #124]	; (8011d70 <igmp_leavegroup_netif+0xe0>)
 8011cf2:	f006 fb17 	bl	8018324 <iprintf>
 8011cf6:	f06f 0305 	mvn.w	r3, #5
 8011cfa:	e031      	b.n	8011d60 <igmp_leavegroup_netif+0xd0>

  /* find group */
  group = igmp_lookfor_group(netif, groupaddr);
 8011cfc:	6839      	ldr	r1, [r7, #0]
 8011cfe:	6878      	ldr	r0, [r7, #4]
 8011d00:	f7ff fd3e 	bl	8011780 <igmp_lookfor_group>
 8011d04:	60f8      	str	r0, [r7, #12]

  if (group != NULL) {
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d027      	beq.n	8011d5c <igmp_leavegroup_netif+0xcc>
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: Leaving group: "));
    ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
    LWIP_DEBUGF(IGMP_DEBUG, ("\n"));

    /* If there is no other use of the group */
    if (group->use <= 1) {
 8011d0c:	68fb      	ldr	r3, [r7, #12]
 8011d0e:	7b1b      	ldrb	r3, [r3, #12]
 8011d10:	2b01      	cmp	r3, #1
 8011d12:	d81b      	bhi.n	8011d4c <igmp_leavegroup_netif+0xbc>
      /* Remove the group from the list */
      igmp_remove_group(netif, group);
 8011d14:	68f9      	ldr	r1, [r7, #12]
 8011d16:	6878      	ldr	r0, [r7, #4]
 8011d18:	f7ff fdb8 	bl	801188c <igmp_remove_group>

      /* If we are the last reporter for this group */
      if (group->last_reporter_flag) {
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	7a1b      	ldrb	r3, [r3, #8]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d004      	beq.n	8011d2e <igmp_leavegroup_netif+0x9e>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: sending leaving group\n"));
        IGMP_STATS_INC(igmp.tx_leave);
        igmp_send(netif, group, IGMP_LEAVE_GROUP);
 8011d24:	2217      	movs	r2, #23
 8011d26:	68f9      	ldr	r1, [r7, #12]
 8011d28:	6878      	ldr	r0, [r7, #4]
 8011d2a:	f000 f8e1 	bl	8011ef0 <igmp_send>
      }

      /* Disable the group at the MAC level */
      if (netif->igmp_mac_filter != NULL) {
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d005      	beq.n	8011d42 <igmp_leavegroup_netif+0xb2>
        LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: igmp_mac_filter(DEL "));
        ip4_addr_debug_print(IGMP_DEBUG, groupaddr);
        LWIP_DEBUGF(IGMP_DEBUG, (") on if %p\n", (void*)netif));
        netif->igmp_mac_filter(netif, groupaddr, NETIF_DEL_MAC_FILTER);
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d3a:	2200      	movs	r2, #0
 8011d3c:	6839      	ldr	r1, [r7, #0]
 8011d3e:	6878      	ldr	r0, [r7, #4]
 8011d40:	4798      	blx	r3
      }

      /* Free group struct */
      memp_free(MEMP_IGMP_GROUP, group);
 8011d42:	68f9      	ldr	r1, [r7, #12]
 8011d44:	200a      	movs	r0, #10
 8011d46:	f7f7 f8e9 	bl	8008f1c <memp_free>
 8011d4a:	e005      	b.n	8011d58 <igmp_leavegroup_netif+0xc8>
    } else {
      /* Decrement group use */
      group->use--;
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	7b1b      	ldrb	r3, [r3, #12]
 8011d50:	3b01      	subs	r3, #1
 8011d52:	b2da      	uxtb	r2, r3
 8011d54:	68fb      	ldr	r3, [r7, #12]
 8011d56:	731a      	strb	r2, [r3, #12]
    }
    return ERR_OK;
 8011d58:	2300      	movs	r3, #0
 8011d5a:	e001      	b.n	8011d60 <igmp_leavegroup_netif+0xd0>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_leavegroup_netif: not member of group\n"));
    return ERR_VAL;
 8011d5c:	f06f 0305 	mvn.w	r3, #5
  }
}
 8011d60:	4618      	mov	r0, r3
 8011d62:	3710      	adds	r7, #16
 8011d64:	46bd      	mov	sp, r7
 8011d66:	bd80      	pop	{r7, pc}
 8011d68:	0801b3c0 	.word	0x0801b3c0
 8011d6c:	0801b624 	.word	0x0801b624
 8011d70:	0801b42c 	.word	0x0801b42c
 8011d74:	20004bcc 	.word	0x20004bcc
 8011d78:	0801b664 	.word	0x0801b664
 8011d7c:	0801b6a0 	.word	0x0801b6a0

08011d80 <igmp_tmr>:
 * The igmp timer function (both for NO_SYS=1 and =0)
 * Should be called every IGMP_TMR_INTERVAL milliseconds (100 ms is default).
 */
void
igmp_tmr(void)
{
 8011d80:	b580      	push	{r7, lr}
 8011d82:	b082      	sub	sp, #8
 8011d84:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 8011d86:	4b15      	ldr	r3, [pc, #84]	; (8011ddc <igmp_tmr+0x5c>)
 8011d88:	681b      	ldr	r3, [r3, #0]
 8011d8a:	607b      	str	r3, [r7, #4]

  while (netif != NULL) {
 8011d8c:	e01e      	b.n	8011dcc <igmp_tmr+0x4c>
    struct igmp_group *group = netif_igmp_data(netif);
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d92:	603b      	str	r3, [r7, #0]

    while (group != NULL) {
 8011d94:	e014      	b.n	8011dc0 <igmp_tmr+0x40>
      if (group->timer > 0) {
 8011d96:	683b      	ldr	r3, [r7, #0]
 8011d98:	895b      	ldrh	r3, [r3, #10]
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d00d      	beq.n	8011dba <igmp_tmr+0x3a>
        group->timer--;
 8011d9e:	683b      	ldr	r3, [r7, #0]
 8011da0:	895b      	ldrh	r3, [r3, #10]
 8011da2:	3b01      	subs	r3, #1
 8011da4:	b29a      	uxth	r2, r3
 8011da6:	683b      	ldr	r3, [r7, #0]
 8011da8:	815a      	strh	r2, [r3, #10]
        if (group->timer == 0) {
 8011daa:	683b      	ldr	r3, [r7, #0]
 8011dac:	895b      	ldrh	r3, [r3, #10]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d103      	bne.n	8011dba <igmp_tmr+0x3a>
          igmp_timeout(netif, group);
 8011db2:	6839      	ldr	r1, [r7, #0]
 8011db4:	6878      	ldr	r0, [r7, #4]
 8011db6:	f000 f813 	bl	8011de0 <igmp_timeout>
        }
      }
      group = group->next;
 8011dba:	683b      	ldr	r3, [r7, #0]
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	603b      	str	r3, [r7, #0]
    while (group != NULL) {
 8011dc0:	683b      	ldr	r3, [r7, #0]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d1e7      	bne.n	8011d96 <igmp_tmr+0x16>
    }
    netif = netif->next;
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d1dd      	bne.n	8011d8e <igmp_tmr+0xe>
  }
}
 8011dd2:	bf00      	nop
 8011dd4:	3708      	adds	r7, #8
 8011dd6:	46bd      	mov	sp, r7
 8011dd8:	bd80      	pop	{r7, pc}
 8011dda:	bf00      	nop
 8011ddc:	2000b8b4 	.word	0x2000b8b4

08011de0 <igmp_timeout>:
 *
 * @param group an igmp_group for which a timeout is reached
 */
static void
igmp_timeout(struct netif *netif, struct igmp_group *group)
{
 8011de0:	b580      	push	{r7, lr}
 8011de2:	b082      	sub	sp, #8
 8011de4:	af00      	add	r7, sp, #0
 8011de6:	6078      	str	r0, [r7, #4]
 8011de8:	6039      	str	r1, [r7, #0]
  /* If the state is IGMP_GROUP_DELAYING_MEMBER then we send a report for this group
     (unless it is the allsystems group) */
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 8011dea:	683b      	ldr	r3, [r7, #0]
 8011dec:	7a5b      	ldrb	r3, [r3, #9]
 8011dee:	2b01      	cmp	r3, #1
 8011df0:	d10d      	bne.n	8011e0e <igmp_timeout+0x2e>
      (!(ip4_addr_cmp(&(group->group_address), &allsystems)))) {
 8011df2:	683b      	ldr	r3, [r7, #0]
 8011df4:	685a      	ldr	r2, [r3, #4]
 8011df6:	4b08      	ldr	r3, [pc, #32]	; (8011e18 <igmp_timeout+0x38>)
 8011df8:	681b      	ldr	r3, [r3, #0]
  if ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 8011dfa:	429a      	cmp	r2, r3
 8011dfc:	d007      	beq.n	8011e0e <igmp_timeout+0x2e>
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_timeout: report membership for group with address "));
    ip4_addr_debug_print(IGMP_DEBUG, &(group->group_address));
    LWIP_DEBUGF(IGMP_DEBUG, (" on if %p\n", (void*)netif));

    group->group_state = IGMP_GROUP_IDLE_MEMBER;
 8011dfe:	683b      	ldr	r3, [r7, #0]
 8011e00:	2202      	movs	r2, #2
 8011e02:	725a      	strb	r2, [r3, #9]
    
    IGMP_STATS_INC(igmp.tx_report);
    igmp_send(netif, group, IGMP_V2_MEMB_REPORT);
 8011e04:	2216      	movs	r2, #22
 8011e06:	6839      	ldr	r1, [r7, #0]
 8011e08:	6878      	ldr	r0, [r7, #4]
 8011e0a:	f000 f871 	bl	8011ef0 <igmp_send>
  }
}
 8011e0e:	bf00      	nop
 8011e10:	3708      	adds	r7, #8
 8011e12:	46bd      	mov	sp, r7
 8011e14:	bd80      	pop	{r7, pc}
 8011e16:	bf00      	nop
 8011e18:	20004bcc 	.word	0x20004bcc

08011e1c <igmp_start_timer>:
 * @param max_time the time in multiples of IGMP_TMR_INTERVAL (decrease with
 *        every call to igmp_tmr())
 */
static void
igmp_start_timer(struct igmp_group *group, u8_t max_time)
{
 8011e1c:	b580      	push	{r7, lr}
 8011e1e:	b082      	sub	sp, #8
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	6078      	str	r0, [r7, #4]
 8011e24:	460b      	mov	r3, r1
 8011e26:	70fb      	strb	r3, [r7, #3]
#ifdef LWIP_RAND
  group->timer = max_time > 2 ? (LWIP_RAND() % max_time) : 1;
 8011e28:	78fb      	ldrb	r3, [r7, #3]
 8011e2a:	2b02      	cmp	r3, #2
 8011e2c:	d90b      	bls.n	8011e46 <igmp_start_timer+0x2a>
 8011e2e:	f006 faf5 	bl	801841c <rand>
 8011e32:	4603      	mov	r3, r0
 8011e34:	461a      	mov	r2, r3
 8011e36:	78fb      	ldrb	r3, [r7, #3]
 8011e38:	fbb2 f1f3 	udiv	r1, r2, r3
 8011e3c:	fb03 f301 	mul.w	r3, r3, r1
 8011e40:	1ad3      	subs	r3, r2, r3
 8011e42:	b29a      	uxth	r2, r3
 8011e44:	e000      	b.n	8011e48 <igmp_start_timer+0x2c>
 8011e46:	2201      	movs	r2, #1
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	815a      	strh	r2, [r3, #10]
#else /* LWIP_RAND */
  /* ATTENTION: use this only if absolutely necessary! */
  group->timer = max_time / 2;
#endif /* LWIP_RAND */

  if (group->timer == 0) {
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	895b      	ldrh	r3, [r3, #10]
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d102      	bne.n	8011e5a <igmp_start_timer+0x3e>
    group->timer = 1;
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	2201      	movs	r2, #1
 8011e58:	815a      	strh	r2, [r3, #10]
  }
}
 8011e5a:	bf00      	nop
 8011e5c:	3708      	adds	r7, #8
 8011e5e:	46bd      	mov	sp, r7
 8011e60:	bd80      	pop	{r7, pc}

08011e62 <igmp_delaying_member>:
 * @param group the igmp_group for which "delaying" membership report
 * @param maxresp query delay
 */
static void
igmp_delaying_member(struct igmp_group *group, u8_t maxresp)
{
 8011e62:	b580      	push	{r7, lr}
 8011e64:	b082      	sub	sp, #8
 8011e66:	af00      	add	r7, sp, #0
 8011e68:	6078      	str	r0, [r7, #4]
 8011e6a:	460b      	mov	r3, r1
 8011e6c:	70fb      	strb	r3, [r7, #3]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	7a5b      	ldrb	r3, [r3, #9]
 8011e72:	2b02      	cmp	r3, #2
 8011e74:	d00d      	beq.n	8011e92 <igmp_delaying_member+0x30>
     ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	7a5b      	ldrb	r3, [r3, #9]
  if ((group->group_state == IGMP_GROUP_IDLE_MEMBER) ||
 8011e7a:	2b01      	cmp	r3, #1
 8011e7c:	d111      	bne.n	8011ea2 <igmp_delaying_member+0x40>
      ((group->timer == 0) || (maxresp < group->timer)))) {
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	895b      	ldrh	r3, [r3, #10]
     ((group->group_state == IGMP_GROUP_DELAYING_MEMBER) &&
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d005      	beq.n	8011e92 <igmp_delaying_member+0x30>
      ((group->timer == 0) || (maxresp < group->timer)))) {
 8011e86:	78fb      	ldrb	r3, [r7, #3]
 8011e88:	b29a      	uxth	r2, r3
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	895b      	ldrh	r3, [r3, #10]
 8011e8e:	429a      	cmp	r2, r3
 8011e90:	d207      	bcs.n	8011ea2 <igmp_delaying_member+0x40>
    igmp_start_timer(group, maxresp);
 8011e92:	78fb      	ldrb	r3, [r7, #3]
 8011e94:	4619      	mov	r1, r3
 8011e96:	6878      	ldr	r0, [r7, #4]
 8011e98:	f7ff ffc0 	bl	8011e1c <igmp_start_timer>
    group->group_state = IGMP_GROUP_DELAYING_MEMBER;
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	2201      	movs	r2, #1
 8011ea0:	725a      	strb	r2, [r3, #9]
  }
}
 8011ea2:	bf00      	nop
 8011ea4:	3708      	adds	r7, #8
 8011ea6:	46bd      	mov	sp, r7
 8011ea8:	bd80      	pop	{r7, pc}

08011eaa <igmp_ip_output_if>:
 *         ERR_BUF if p doesn't have enough space for IP/LINK headers
 *         returns errors returned by netif->output
 */
static err_t
igmp_ip_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest, struct netif *netif)
{
 8011eaa:	b580      	push	{r7, lr}
 8011eac:	b08c      	sub	sp, #48	; 0x30
 8011eae:	af06      	add	r7, sp, #24
 8011eb0:	60f8      	str	r0, [r7, #12]
 8011eb2:	60b9      	str	r1, [r7, #8]
 8011eb4:	607a      	str	r2, [r7, #4]
 8011eb6:	603b      	str	r3, [r7, #0]
  /* This is the "router alert" option */
  u16_t ra[2];
  ra[0] = PP_HTONS(ROUTER_ALERT);
 8011eb8:	f240 4394 	movw	r3, #1172	; 0x494
 8011ebc:	82bb      	strh	r3, [r7, #20]
  ra[1] = 0x0000; /* Router shall examine packet */
 8011ebe:	2300      	movs	r3, #0
 8011ec0:	82fb      	strh	r3, [r7, #22]
  IGMP_STATS_INC(igmp.xmit);
  return ip4_output_if_opt(p, src, dest, IGMP_TTL, 0, IP_PROTO_IGMP, netif, ra, ROUTER_ALERTLEN);
 8011ec2:	2304      	movs	r3, #4
 8011ec4:	9304      	str	r3, [sp, #16]
 8011ec6:	f107 0314 	add.w	r3, r7, #20
 8011eca:	9303      	str	r3, [sp, #12]
 8011ecc:	683b      	ldr	r3, [r7, #0]
 8011ece:	9302      	str	r3, [sp, #8]
 8011ed0:	2302      	movs	r3, #2
 8011ed2:	9301      	str	r3, [sp, #4]
 8011ed4:	2300      	movs	r3, #0
 8011ed6:	9300      	str	r3, [sp, #0]
 8011ed8:	2301      	movs	r3, #1
 8011eda:	687a      	ldr	r2, [r7, #4]
 8011edc:	68b9      	ldr	r1, [r7, #8]
 8011ede:	68f8      	ldr	r0, [r7, #12]
 8011ee0:	f000 faad 	bl	801243e <ip4_output_if_opt>
 8011ee4:	4603      	mov	r3, r0
}
 8011ee6:	4618      	mov	r0, r3
 8011ee8:	3718      	adds	r7, #24
 8011eea:	46bd      	mov	sp, r7
 8011eec:	bd80      	pop	{r7, pc}
	...

08011ef0 <igmp_send>:
 * @param group the group to which to send the packet
 * @param type the type of igmp packet to send
 */
static void
igmp_send(struct netif *netif, struct igmp_group *group, u8_t type)
{
 8011ef0:	b580      	push	{r7, lr}
 8011ef2:	b088      	sub	sp, #32
 8011ef4:	af00      	add	r7, sp, #0
 8011ef6:	60f8      	str	r0, [r7, #12]
 8011ef8:	60b9      	str	r1, [r7, #8]
 8011efa:	4613      	mov	r3, r2
 8011efc:	71fb      	strb	r3, [r7, #7]
  struct pbuf*     p    = NULL;
 8011efe:	2300      	movs	r3, #0
 8011f00:	61bb      	str	r3, [r7, #24]
  struct igmp_msg* igmp = NULL;
 8011f02:	2300      	movs	r3, #0
 8011f04:	617b      	str	r3, [r7, #20]
  ip4_addr_t   src  = *IP4_ADDR_ANY4;
 8011f06:	4b2f      	ldr	r3, [pc, #188]	; (8011fc4 <igmp_send+0xd4>)
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	613b      	str	r3, [r7, #16]
  ip4_addr_t*  dest = NULL;
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	61fb      	str	r3, [r7, #28]

  /* IP header + "router alert" option + IGMP header */
  p = pbuf_alloc(PBUF_TRANSPORT, IGMP_MINLEN, PBUF_RAM);
 8011f10:	2200      	movs	r2, #0
 8011f12:	2108      	movs	r1, #8
 8011f14:	2000      	movs	r0, #0
 8011f16:	f7f7 fa01 	bl	800931c <pbuf_alloc>
 8011f1a:	61b8      	str	r0, [r7, #24]

  if (p) {
 8011f1c:	69bb      	ldr	r3, [r7, #24]
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d04b      	beq.n	8011fba <igmp_send+0xca>
    igmp = (struct igmp_msg *)p->payload;
 8011f22:	69bb      	ldr	r3, [r7, #24]
 8011f24:	685b      	ldr	r3, [r3, #4]
 8011f26:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("igmp_send: check that first pbuf can hold struct igmp_msg",
 8011f28:	69bb      	ldr	r3, [r7, #24]
 8011f2a:	895b      	ldrh	r3, [r3, #10]
 8011f2c:	2b07      	cmp	r3, #7
 8011f2e:	d806      	bhi.n	8011f3e <igmp_send+0x4e>
 8011f30:	4b25      	ldr	r3, [pc, #148]	; (8011fc8 <igmp_send+0xd8>)
 8011f32:	f240 3202 	movw	r2, #770	; 0x302
 8011f36:	4925      	ldr	r1, [pc, #148]	; (8011fcc <igmp_send+0xdc>)
 8011f38:	4825      	ldr	r0, [pc, #148]	; (8011fd0 <igmp_send+0xe0>)
 8011f3a:	f006 f9f3 	bl	8018324 <iprintf>
               (p->len >= sizeof(struct igmp_msg)));
    ip4_addr_copy(src, *netif_ip4_addr(netif));
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	3304      	adds	r3, #4
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	613b      	str	r3, [r7, #16]

    if (type == IGMP_V2_MEMB_REPORT) {
 8011f46:	79fb      	ldrb	r3, [r7, #7]
 8011f48:	2b16      	cmp	r3, #22
 8011f4a:	d10a      	bne.n	8011f62 <igmp_send+0x72>
      dest = &(group->group_address);
 8011f4c:	68bb      	ldr	r3, [r7, #8]
 8011f4e:	3304      	adds	r3, #4
 8011f50:	61fb      	str	r3, [r7, #28]
      ip4_addr_copy(igmp->igmp_group_address, group->group_address);
 8011f52:	68bb      	ldr	r3, [r7, #8]
 8011f54:	685a      	ldr	r2, [r3, #4]
 8011f56:	697b      	ldr	r3, [r7, #20]
 8011f58:	605a      	str	r2, [r3, #4]
      group->last_reporter_flag = 1; /* Remember we were the last to report */
 8011f5a:	68bb      	ldr	r3, [r7, #8]
 8011f5c:	2201      	movs	r2, #1
 8011f5e:	721a      	strb	r2, [r3, #8]
 8011f60:	e008      	b.n	8011f74 <igmp_send+0x84>
    } else {
      if (type == IGMP_LEAVE_GROUP) {
 8011f62:	79fb      	ldrb	r3, [r7, #7]
 8011f64:	2b17      	cmp	r3, #23
 8011f66:	d105      	bne.n	8011f74 <igmp_send+0x84>
        dest = &allrouters;
 8011f68:	4b1a      	ldr	r3, [pc, #104]	; (8011fd4 <igmp_send+0xe4>)
 8011f6a:	61fb      	str	r3, [r7, #28]
        ip4_addr_copy(igmp->igmp_group_address, group->group_address);
 8011f6c:	68bb      	ldr	r3, [r7, #8]
 8011f6e:	685a      	ldr	r2, [r3, #4]
 8011f70:	697b      	ldr	r3, [r7, #20]
 8011f72:	605a      	str	r2, [r3, #4]
      }
    }

    if ((type == IGMP_V2_MEMB_REPORT) || (type == IGMP_LEAVE_GROUP)) {
 8011f74:	79fb      	ldrb	r3, [r7, #7]
 8011f76:	2b16      	cmp	r3, #22
 8011f78:	d002      	beq.n	8011f80 <igmp_send+0x90>
 8011f7a:	79fb      	ldrb	r3, [r7, #7]
 8011f7c:	2b17      	cmp	r3, #23
 8011f7e:	d119      	bne.n	8011fb4 <igmp_send+0xc4>
      igmp->igmp_msgtype  = type;
 8011f80:	697b      	ldr	r3, [r7, #20]
 8011f82:	79fa      	ldrb	r2, [r7, #7]
 8011f84:	701a      	strb	r2, [r3, #0]
      igmp->igmp_maxresp  = 0;
 8011f86:	697b      	ldr	r3, [r7, #20]
 8011f88:	2200      	movs	r2, #0
 8011f8a:	705a      	strb	r2, [r3, #1]
      igmp->igmp_checksum = 0;
 8011f8c:	697b      	ldr	r3, [r7, #20]
 8011f8e:	2200      	movs	r2, #0
 8011f90:	709a      	strb	r2, [r3, #2]
 8011f92:	2200      	movs	r2, #0
 8011f94:	70da      	strb	r2, [r3, #3]
      igmp->igmp_checksum = inet_chksum(igmp, IGMP_MINLEN);
 8011f96:	2108      	movs	r1, #8
 8011f98:	6978      	ldr	r0, [r7, #20]
 8011f9a:	f7f6 fb91 	bl	80086c0 <inet_chksum>
 8011f9e:	4603      	mov	r3, r0
 8011fa0:	461a      	mov	r2, r3
 8011fa2:	697b      	ldr	r3, [r7, #20]
 8011fa4:	805a      	strh	r2, [r3, #2]

      igmp_ip_output_if(p, &src, dest, netif);
 8011fa6:	f107 0110 	add.w	r1, r7, #16
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	69fa      	ldr	r2, [r7, #28]
 8011fae:	69b8      	ldr	r0, [r7, #24]
 8011fb0:	f7ff ff7b 	bl	8011eaa <igmp_ip_output_if>
    }

    pbuf_free(p);
 8011fb4:	69b8      	ldr	r0, [r7, #24]
 8011fb6:	f7f7 fd23 	bl	8009a00 <pbuf_free>
  } else {
    LWIP_DEBUGF(IGMP_DEBUG, ("igmp_send: not enough memory for igmp_send\n"));
    IGMP_STATS_INC(igmp.memerr);
  }
}
 8011fba:	bf00      	nop
 8011fbc:	3720      	adds	r7, #32
 8011fbe:	46bd      	mov	sp, r7
 8011fc0:	bd80      	pop	{r7, pc}
 8011fc2:	bf00      	nop
 8011fc4:	0801c8e0 	.word	0x0801c8e0
 8011fc8:	0801b3c0 	.word	0x0801b3c0
 8011fcc:	0801b6dc 	.word	0x0801b6dc
 8011fd0:	0801b42c 	.word	0x0801b42c
 8011fd4:	20004bd0 	.word	0x20004bd0

08011fd8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8011fd8:	b480      	push	{r7}
 8011fda:	b085      	sub	sp, #20
 8011fdc:	af00      	add	r7, sp, #0
 8011fde:	6078      	str	r0, [r7, #4]
  struct netif *netif;

#if LWIP_MULTICAST_TX_OPTIONS
  /* Use administratively selected interface for multicast by default */
  if (ip4_addr_ismulticast(dest) && ip4_default_multicast_netif) {
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011fe8:	2be0      	cmp	r3, #224	; 0xe0
 8011fea:	d106      	bne.n	8011ffa <ip4_route+0x22>
 8011fec:	4b33      	ldr	r3, [pc, #204]	; (80120bc <ip4_route+0xe4>)
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d002      	beq.n	8011ffa <ip4_route+0x22>
    return ip4_default_multicast_netif;
 8011ff4:	4b31      	ldr	r3, [pc, #196]	; (80120bc <ip4_route+0xe4>)
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	e05b      	b.n	80120b2 <ip4_route+0xda>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8011ffa:	4b31      	ldr	r3, [pc, #196]	; (80120c0 <ip4_route+0xe8>)
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	60fb      	str	r3, [r7, #12]
 8012000:	e036      	b.n	8012070 <ip4_route+0x98>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8012008:	f003 0301 	and.w	r3, r3, #1
 801200c:	b2db      	uxtb	r3, r3
 801200e:	2b00      	cmp	r3, #0
 8012010:	d02b      	beq.n	801206a <ip4_route+0x92>
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8012018:	089b      	lsrs	r3, r3, #2
 801201a:	f003 0301 	and.w	r3, r3, #1
 801201e:	b2db      	uxtb	r3, r3
 8012020:	2b00      	cmp	r3, #0
 8012022:	d022      	beq.n	801206a <ip4_route+0x92>
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	3304      	adds	r3, #4
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	2b00      	cmp	r3, #0
 801202c:	d01d      	beq.n	801206a <ip4_route+0x92>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	681a      	ldr	r2, [r3, #0]
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	3304      	adds	r3, #4
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	405a      	eors	r2, r3
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	3308      	adds	r3, #8
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	4013      	ands	r3, r2
 8012042:	2b00      	cmp	r3, #0
 8012044:	d101      	bne.n	801204a <ip4_route+0x72>
        /* return netif on which to forward IP packet */
        return netif;
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	e033      	b.n	80120b2 <ip4_route+0xda>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8012050:	f003 0302 	and.w	r3, r3, #2
 8012054:	2b00      	cmp	r3, #0
 8012056:	d108      	bne.n	801206a <ip4_route+0x92>
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	681a      	ldr	r2, [r3, #0]
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	330c      	adds	r3, #12
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	429a      	cmp	r2, r3
 8012064:	d101      	bne.n	801206a <ip4_route+0x92>
        /* return netif on which to forward IP packet */
        return netif;
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	e023      	b.n	80120b2 <ip4_route+0xda>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	60fb      	str	r3, [r7, #12]
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	2b00      	cmp	r3, #0
 8012074:	d1c5      	bne.n	8012002 <ip4_route+0x2a>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012076:	4b13      	ldr	r3, [pc, #76]	; (80120c4 <ip4_route+0xec>)
 8012078:	681b      	ldr	r3, [r3, #0]
 801207a:	2b00      	cmp	r3, #0
 801207c:	d015      	beq.n	80120aa <ip4_route+0xd2>
 801207e:	4b11      	ldr	r3, [pc, #68]	; (80120c4 <ip4_route+0xec>)
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8012086:	f003 0301 	and.w	r3, r3, #1
 801208a:	2b00      	cmp	r3, #0
 801208c:	d00d      	beq.n	80120aa <ip4_route+0xd2>
 801208e:	4b0d      	ldr	r3, [pc, #52]	; (80120c4 <ip4_route+0xec>)
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8012096:	f003 0304 	and.w	r3, r3, #4
 801209a:	2b00      	cmp	r3, #0
 801209c:	d005      	beq.n	80120aa <ip4_route+0xd2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 801209e:	4b09      	ldr	r3, [pc, #36]	; (80120c4 <ip4_route+0xec>)
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	3304      	adds	r3, #4
 80120a4:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d101      	bne.n	80120ae <ip4_route+0xd6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80120aa:	2300      	movs	r3, #0
 80120ac:	e001      	b.n	80120b2 <ip4_route+0xda>
  }

  return netif_default;
 80120ae:	4b05      	ldr	r3, [pc, #20]	; (80120c4 <ip4_route+0xec>)
 80120b0:	681b      	ldr	r3, [r3, #0]
}
 80120b2:	4618      	mov	r0, r3
 80120b4:	3714      	adds	r7, #20
 80120b6:	46bd      	mov	sp, r7
 80120b8:	bc80      	pop	{r7}
 80120ba:	4770      	bx	lr
 80120bc:	20004bd8 	.word	0x20004bd8
 80120c0:	2000b8b4 	.word	0x2000b8b4
 80120c4:	2000b8b8 	.word	0x2000b8b8

080120c8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80120c8:	b580      	push	{r7, lr}
 80120ca:	b08a      	sub	sp, #40	; 0x28
 80120cc:	af00      	add	r7, sp, #0
 80120ce:	6078      	str	r0, [r7, #4]
 80120d0:	6039      	str	r1, [r7, #0]
  struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 80120d2:	2301      	movs	r3, #1
 80120d4:	61fb      	str	r3, [r7, #28]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	685b      	ldr	r3, [r3, #4]
 80120da:	627b      	str	r3, [r7, #36]	; 0x24
  if (IPH_V(iphdr) != 4) {
 80120dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120de:	781b      	ldrb	r3, [r3, #0]
 80120e0:	091b      	lsrs	r3, r3, #4
 80120e2:	b2db      	uxtb	r3, r3
 80120e4:	2b04      	cmp	r3, #4
 80120e6:	d007      	beq.n	80120f8 <ip4_input+0x30>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
 80120e8:	6878      	ldr	r0, [r7, #4]
 80120ea:	f000 facf 	bl	801268c <ip4_debug_print>
    pbuf_free(p);
 80120ee:	6878      	ldr	r0, [r7, #4]
 80120f0:	f7f7 fc86 	bl	8009a00 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80120f4:	2300      	movs	r3, #0
 80120f6:	e17f      	b.n	80123f8 <ip4_input+0x330>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 80120f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120fa:	781b      	ldrb	r3, [r3, #0]
 80120fc:	b29b      	uxth	r3, r3
 80120fe:	f003 030f 	and.w	r3, r3, #15
 8012102:	82fb      	strh	r3, [r7, #22]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 8012104:	8afb      	ldrh	r3, [r7, #22]
 8012106:	009b      	lsls	r3, r3, #2
 8012108:	82fb      	strh	r3, [r7, #22]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801210a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801210c:	885b      	ldrh	r3, [r3, #2]
 801210e:	b29b      	uxth	r3, r3
 8012110:	4618      	mov	r0, r3
 8012112:	f7f5 ffb3 	bl	800807c <lwip_htons>
 8012116:	4603      	mov	r3, r0
 8012118:	82bb      	strh	r3, [r7, #20]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	891b      	ldrh	r3, [r3, #8]
 801211e:	8aba      	ldrh	r2, [r7, #20]
 8012120:	429a      	cmp	r2, r3
 8012122:	d204      	bcs.n	801212e <ip4_input+0x66>
    pbuf_realloc(p, iphdr_len);
 8012124:	8abb      	ldrh	r3, [r7, #20]
 8012126:	4619      	mov	r1, r3
 8012128:	6878      	ldr	r0, [r7, #4]
 801212a:	f7f7 faf5 	bl	8009718 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	895b      	ldrh	r3, [r3, #10]
 8012132:	8afa      	ldrh	r2, [r7, #22]
 8012134:	429a      	cmp	r2, r3
 8012136:	d807      	bhi.n	8012148 <ip4_input+0x80>
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	891b      	ldrh	r3, [r3, #8]
 801213c:	8aba      	ldrh	r2, [r7, #20]
 801213e:	429a      	cmp	r2, r3
 8012140:	d802      	bhi.n	8012148 <ip4_input+0x80>
 8012142:	8afb      	ldrh	r3, [r7, #22]
 8012144:	2b13      	cmp	r3, #19
 8012146:	d804      	bhi.n	8012152 <ip4_input+0x8a>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8012148:	6878      	ldr	r0, [r7, #4]
 801214a:	f7f7 fc59 	bl	8009a00 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801214e:	2300      	movs	r3, #0
 8012150:	e152      	b.n	80123f8 <ip4_input+0x330>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8012152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012154:	691b      	ldr	r3, [r3, #16]
 8012156:	4a8b      	ldr	r2, [pc, #556]	; (8012384 <ip4_input+0x2bc>)
 8012158:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801215c:	68db      	ldr	r3, [r3, #12]
 801215e:	4a89      	ldr	r2, [pc, #548]	; (8012384 <ip4_input+0x2bc>)
 8012160:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012162:	4b88      	ldr	r3, [pc, #544]	; (8012384 <ip4_input+0x2bc>)
 8012164:	695b      	ldr	r3, [r3, #20]
 8012166:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801216a:	2be0      	cmp	r3, #224	; 0xe0
 801216c:	d120      	bne.n	80121b0 <ip4_input+0xe8>
#if LWIP_IGMP
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
 801216e:	683b      	ldr	r3, [r7, #0]
 8012170:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8012174:	f003 0320 	and.w	r3, r3, #32
 8012178:	2b00      	cmp	r3, #0
 801217a:	d016      	beq.n	80121aa <ip4_input+0xe2>
 801217c:	4982      	ldr	r1, [pc, #520]	; (8012388 <ip4_input+0x2c0>)
 801217e:	6838      	ldr	r0, [r7, #0]
 8012180:	f7ff fafe 	bl	8011780 <igmp_lookfor_group>
 8012184:	4603      	mov	r3, r0
 8012186:	2b00      	cmp	r3, #0
 8012188:	d00f      	beq.n	80121aa <ip4_input+0xe2>
      /* IGMP snooping switches need 0.0.0.0 to be allowed as source address (RFC 4541) */
      ip4_addr_t allsystems;
      IP4_ADDR(&allsystems, 224, 0, 0, 1);
 801218a:	4b80      	ldr	r3, [pc, #512]	; (801238c <ip4_input+0x2c4>)
 801218c:	60fb      	str	r3, [r7, #12]
      if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
 801218e:	4b7d      	ldr	r3, [pc, #500]	; (8012384 <ip4_input+0x2bc>)
 8012190:	695a      	ldr	r2, [r3, #20]
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	429a      	cmp	r2, r3
 8012196:	d105      	bne.n	80121a4 <ip4_input+0xdc>
          ip4_addr_isany(ip4_current_src_addr())) {
 8012198:	4b7a      	ldr	r3, [pc, #488]	; (8012384 <ip4_input+0x2bc>)
 801219a:	691b      	ldr	r3, [r3, #16]
      if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
 801219c:	2b00      	cmp	r3, #0
 801219e:	d101      	bne.n	80121a4 <ip4_input+0xdc>
        check_ip_src = 0;
 80121a0:	2300      	movs	r3, #0
 80121a2:	61fb      	str	r3, [r7, #28]
      }
      netif = inp;
 80121a4:	683b      	ldr	r3, [r7, #0]
 80121a6:	623b      	str	r3, [r7, #32]
    if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
 80121a8:	e041      	b.n	801222e <ip4_input+0x166>
    } else {
      netif = NULL;
 80121aa:	2300      	movs	r3, #0
 80121ac:	623b      	str	r3, [r7, #32]
 80121ae:	e03e      	b.n	801222e <ip4_input+0x166>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 80121b0:	2301      	movs	r3, #1
 80121b2:	61bb      	str	r3, [r7, #24]
    netif = inp;
 80121b4:	683b      	ldr	r3, [r7, #0]
 80121b6:	623b      	str	r3, [r7, #32]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80121b8:	6a3b      	ldr	r3, [r7, #32]
 80121ba:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80121be:	f003 0301 	and.w	r3, r3, #1
 80121c2:	b2db      	uxtb	r3, r3
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d014      	beq.n	80121f2 <ip4_input+0x12a>
 80121c8:	6a3b      	ldr	r3, [r7, #32]
 80121ca:	3304      	adds	r3, #4
 80121cc:	681b      	ldr	r3, [r3, #0]
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d00f      	beq.n	80121f2 <ip4_input+0x12a>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80121d2:	4b6c      	ldr	r3, [pc, #432]	; (8012384 <ip4_input+0x2bc>)
 80121d4:	695a      	ldr	r2, [r3, #20]
 80121d6:	6a3b      	ldr	r3, [r7, #32]
 80121d8:	3304      	adds	r3, #4
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	429a      	cmp	r2, r3
 80121de:	d026      	beq.n	801222e <ip4_input+0x166>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80121e0:	4b68      	ldr	r3, [pc, #416]	; (8012384 <ip4_input+0x2bc>)
 80121e2:	695b      	ldr	r3, [r3, #20]
 80121e4:	6a39      	ldr	r1, [r7, #32]
 80121e6:	4618      	mov	r0, r3
 80121e8:	f000 fa5c 	bl	80126a4 <ip4_addr_isbroadcast_u32>
 80121ec:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d11d      	bne.n	801222e <ip4_input+0x166>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 80121f2:	69bb      	ldr	r3, [r7, #24]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d00d      	beq.n	8012214 <ip4_input+0x14c>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 80121f8:	4b62      	ldr	r3, [pc, #392]	; (8012384 <ip4_input+0x2bc>)
 80121fa:	695b      	ldr	r3, [r3, #20]
 80121fc:	b2db      	uxtb	r3, r3
 80121fe:	2b7f      	cmp	r3, #127	; 0x7f
 8012200:	d102      	bne.n	8012208 <ip4_input+0x140>
          netif = NULL;
 8012202:	2300      	movs	r3, #0
 8012204:	623b      	str	r3, [r7, #32]
          break;
 8012206:	e012      	b.n	801222e <ip4_input+0x166>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 8012208:	2300      	movs	r3, #0
 801220a:	61bb      	str	r3, [r7, #24]
        netif = netif_list;
 801220c:	4b60      	ldr	r3, [pc, #384]	; (8012390 <ip4_input+0x2c8>)
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	623b      	str	r3, [r7, #32]
 8012212:	e002      	b.n	801221a <ip4_input+0x152>
      } else {
        netif = netif->next;
 8012214:	6a3b      	ldr	r3, [r7, #32]
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	623b      	str	r3, [r7, #32]
      }
      if (netif == inp) {
 801221a:	6a3a      	ldr	r2, [r7, #32]
 801221c:	683b      	ldr	r3, [r7, #0]
 801221e:	429a      	cmp	r2, r3
 8012220:	d102      	bne.n	8012228 <ip4_input+0x160>
        netif = netif->next;
 8012222:	6a3b      	ldr	r3, [r7, #32]
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	623b      	str	r3, [r7, #32]
      }
    } while (netif != NULL);
 8012228:	6a3b      	ldr	r3, [r7, #32]
 801222a:	2b00      	cmp	r3, #0
 801222c:	d1c4      	bne.n	80121b8 <ip4_input+0xf0>
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801222e:	6a3b      	ldr	r3, [r7, #32]
 8012230:	2b00      	cmp	r3, #0
 8012232:	d111      	bne.n	8012258 <ip4_input+0x190>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8012234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012236:	7a5b      	ldrb	r3, [r3, #9]
 8012238:	2b11      	cmp	r3, #17
 801223a:	d10d      	bne.n	8012258 <ip4_input+0x190>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
 801223c:	8afb      	ldrh	r3, [r7, #22]
 801223e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012240:	4413      	add	r3, r2
 8012242:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
        lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8012244:	693b      	ldr	r3, [r7, #16]
 8012246:	885b      	ldrh	r3, [r3, #2]
 8012248:	b29b      	uxth	r3, r3
 801224a:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801224e:	d103      	bne.n	8012258 <ip4_input+0x190>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8012250:	683b      	ldr	r3, [r7, #0]
 8012252:	623b      	str	r3, [r7, #32]
        check_ip_src = 0;
 8012254:	2300      	movs	r3, #0
 8012256:	61fb      	str	r3, [r7, #28]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8012258:	69fb      	ldr	r3, [r7, #28]
 801225a:	2b00      	cmp	r3, #0
 801225c:	d017      	beq.n	801228e <ip4_input+0x1c6>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801225e:	4b49      	ldr	r3, [pc, #292]	; (8012384 <ip4_input+0x2bc>)
 8012260:	691b      	ldr	r3, [r3, #16]
 8012262:	2b00      	cmp	r3, #0
 8012264:	d013      	beq.n	801228e <ip4_input+0x1c6>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012266:	4b47      	ldr	r3, [pc, #284]	; (8012384 <ip4_input+0x2bc>)
 8012268:	691b      	ldr	r3, [r3, #16]
 801226a:	6839      	ldr	r1, [r7, #0]
 801226c:	4618      	mov	r0, r3
 801226e:	f000 fa19 	bl	80126a4 <ip4_addr_isbroadcast_u32>
 8012272:	4603      	mov	r3, r0
 8012274:	2b00      	cmp	r3, #0
 8012276:	d105      	bne.n	8012284 <ip4_input+0x1bc>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8012278:	4b42      	ldr	r3, [pc, #264]	; (8012384 <ip4_input+0x2bc>)
 801227a:	691b      	ldr	r3, [r3, #16]
 801227c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012280:	2be0      	cmp	r3, #224	; 0xe0
 8012282:	d104      	bne.n	801228e <ip4_input+0x1c6>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8012284:	6878      	ldr	r0, [r7, #4]
 8012286:	f7f7 fbbb 	bl	8009a00 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801228a:	2300      	movs	r3, #0
 801228c:	e0b4      	b.n	80123f8 <ip4_input+0x330>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801228e:	6a3b      	ldr	r3, [r7, #32]
 8012290:	2b00      	cmp	r3, #0
 8012292:	d104      	bne.n	801229e <ip4_input+0x1d6>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8012294:	6878      	ldr	r0, [r7, #4]
 8012296:	f7f7 fbb3 	bl	8009a00 <pbuf_free>
    return ERR_OK;
 801229a:	2300      	movs	r3, #0
 801229c:	e0ac      	b.n	80123f8 <ip4_input+0x330>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801229e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122a0:	88db      	ldrh	r3, [r3, #6]
 80122a2:	b29b      	uxth	r3, r3
 80122a4:	461a      	mov	r2, r3
 80122a6:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80122aa:	4013      	ands	r3, r2
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d00b      	beq.n	80122c8 <ip4_input+0x200>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80122b0:	6878      	ldr	r0, [r7, #4]
 80122b2:	f000 fe7b 	bl	8012fac <ip4_reass>
 80122b6:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d101      	bne.n	80122c2 <ip4_input+0x1fa>
      return ERR_OK;
 80122be:	2300      	movs	r3, #0
 80122c0:	e09a      	b.n	80123f8 <ip4_input+0x330>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	685b      	ldr	r3, [r3, #4]
 80122c6:	627b      	str	r3, [r7, #36]	; 0x24
  }
#endif /* IP_OPTIONS_ALLOWED == 0 */

  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
 80122c8:	6878      	ldr	r0, [r7, #4]
 80122ca:	f000 f9df 	bl	801268c <ip4_debug_print>
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80122ce:	4a2d      	ldr	r2, [pc, #180]	; (8012384 <ip4_input+0x2bc>)
 80122d0:	6a3b      	ldr	r3, [r7, #32]
 80122d2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80122d4:	4a2b      	ldr	r2, [pc, #172]	; (8012384 <ip4_input+0x2bc>)
 80122d6:	683b      	ldr	r3, [r7, #0]
 80122d8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80122da:	4a2a      	ldr	r2, [pc, #168]	; (8012384 <ip4_input+0x2bc>)
 80122dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122de:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 80122e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122e2:	781b      	ldrb	r3, [r3, #0]
 80122e4:	b29b      	uxth	r3, r3
 80122e6:	f003 030f 	and.w	r3, r3, #15
 80122ea:	b29b      	uxth	r3, r3
 80122ec:	009b      	lsls	r3, r3, #2
 80122ee:	b29a      	uxth	r2, r3
 80122f0:	4b24      	ldr	r3, [pc, #144]	; (8012384 <ip4_input+0x2bc>)
 80122f2:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 80122f4:	8afb      	ldrh	r3, [r7, #22]
 80122f6:	425b      	negs	r3, r3
 80122f8:	b29b      	uxth	r3, r3
 80122fa:	b21b      	sxth	r3, r3
 80122fc:	4619      	mov	r1, r3
 80122fe:	6878      	ldr	r0, [r7, #4]
 8012300:	f7f7 fb5a 	bl	80099b8 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 8012304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012306:	7a5b      	ldrb	r3, [r3, #9]
 8012308:	3b01      	subs	r3, #1
 801230a:	2b10      	cmp	r3, #16
 801230c:	d842      	bhi.n	8012394 <ip4_input+0x2cc>
 801230e:	a201      	add	r2, pc, #4	; (adr r2, 8012314 <ip4_input+0x24c>)
 8012310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012314:	0801236d 	.word	0x0801236d
 8012318:	08012377 	.word	0x08012377
 801231c:	08012395 	.word	0x08012395
 8012320:	08012395 	.word	0x08012395
 8012324:	08012395 	.word	0x08012395
 8012328:	08012363 	.word	0x08012363
 801232c:	08012395 	.word	0x08012395
 8012330:	08012395 	.word	0x08012395
 8012334:	08012395 	.word	0x08012395
 8012338:	08012395 	.word	0x08012395
 801233c:	08012395 	.word	0x08012395
 8012340:	08012395 	.word	0x08012395
 8012344:	08012395 	.word	0x08012395
 8012348:	08012395 	.word	0x08012395
 801234c:	08012395 	.word	0x08012395
 8012350:	08012395 	.word	0x08012395
 8012354:	08012359 	.word	0x08012359
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 8012358:	6839      	ldr	r1, [r7, #0]
 801235a:	6878      	ldr	r0, [r7, #4]
 801235c:	f7fc fc84 	bl	800ec68 <udp_input>
      break;
 8012360:	e037      	b.n	80123d2 <ip4_input+0x30a>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 8012362:	6839      	ldr	r1, [r7, #0]
 8012364:	6878      	ldr	r0, [r7, #4]
 8012366:	f7f9 f8db 	bl	800b520 <tcp_input>
      break;
 801236a:	e032      	b.n	80123d2 <ip4_input+0x30a>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 801236c:	6839      	ldr	r1, [r7, #0]
 801236e:	6878      	ldr	r0, [r7, #4]
 8012370:	f7ff f81e 	bl	80113b0 <icmp_input>
      break;
 8012374:	e02d      	b.n	80123d2 <ip4_input+0x30a>
#endif /* LWIP_ICMP */
#if LWIP_IGMP
    case IP_PROTO_IGMP:
      igmp_input(p, inp, ip4_current_dest_addr());
 8012376:	4a04      	ldr	r2, [pc, #16]	; (8012388 <ip4_input+0x2c0>)
 8012378:	6839      	ldr	r1, [r7, #0]
 801237a:	6878      	ldr	r0, [r7, #4]
 801237c:	f7ff faae 	bl	80118dc <igmp_input>
      break;
 8012380:	e027      	b.n	80123d2 <ip4_input+0x30a>
 8012382:	bf00      	nop
 8012384:	20007e20 	.word	0x20007e20
 8012388:	20007e34 	.word	0x20007e34
 801238c:	010000e0 	.word	0x010000e0
 8012390:	2000b8b4 	.word	0x2000b8b4
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012394:	4b1a      	ldr	r3, [pc, #104]	; (8012400 <ip4_input+0x338>)
 8012396:	695b      	ldr	r3, [r3, #20]
 8012398:	6a39      	ldr	r1, [r7, #32]
 801239a:	4618      	mov	r0, r3
 801239c:	f000 f982 	bl	80126a4 <ip4_addr_isbroadcast_u32>
 80123a0:	4603      	mov	r3, r0
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d112      	bne.n	80123cc <ip4_input+0x304>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80123a6:	4b16      	ldr	r3, [pc, #88]	; (8012400 <ip4_input+0x338>)
 80123a8:	695b      	ldr	r3, [r3, #20]
 80123aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80123ae:	2be0      	cmp	r3, #224	; 0xe0
 80123b0:	d00c      	beq.n	80123cc <ip4_input+0x304>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 80123b2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80123b6:	4619      	mov	r1, r3
 80123b8:	6878      	ldr	r0, [r7, #4]
 80123ba:	f7f7 fb0f 	bl	80099dc <pbuf_header_force>
        p->payload = iphdr;
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80123c2:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80123c4:	2102      	movs	r1, #2
 80123c6:	6878      	ldr	r0, [r7, #4]
 80123c8:	f7ff f8f8 	bl	80115bc <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 80123cc:	6878      	ldr	r0, [r7, #4]
 80123ce:	f7f7 fb17 	bl	8009a00 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80123d2:	4b0b      	ldr	r3, [pc, #44]	; (8012400 <ip4_input+0x338>)
 80123d4:	2200      	movs	r2, #0
 80123d6:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80123d8:	4b09      	ldr	r3, [pc, #36]	; (8012400 <ip4_input+0x338>)
 80123da:	2200      	movs	r2, #0
 80123dc:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80123de:	4b08      	ldr	r3, [pc, #32]	; (8012400 <ip4_input+0x338>)
 80123e0:	2200      	movs	r2, #0
 80123e2:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80123e4:	4b06      	ldr	r3, [pc, #24]	; (8012400 <ip4_input+0x338>)
 80123e6:	2200      	movs	r2, #0
 80123e8:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80123ea:	4b05      	ldr	r3, [pc, #20]	; (8012400 <ip4_input+0x338>)
 80123ec:	2200      	movs	r2, #0
 80123ee:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80123f0:	4b03      	ldr	r3, [pc, #12]	; (8012400 <ip4_input+0x338>)
 80123f2:	2200      	movs	r2, #0
 80123f4:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80123f6:	2300      	movs	r3, #0
}
 80123f8:	4618      	mov	r0, r3
 80123fa:	3728      	adds	r7, #40	; 0x28
 80123fc:	46bd      	mov	sp, r7
 80123fe:	bd80      	pop	{r7, pc}
 8012400:	20007e20 	.word	0x20007e20

08012404 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8012404:	b580      	push	{r7, lr}
 8012406:	b08a      	sub	sp, #40	; 0x28
 8012408:	af06      	add	r7, sp, #24
 801240a:	60f8      	str	r0, [r7, #12]
 801240c:	60b9      	str	r1, [r7, #8]
 801240e:	607a      	str	r2, [r7, #4]
 8012410:	70fb      	strb	r3, [r7, #3]
#if IP_OPTIONS_SEND
  return ip4_output_if_opt(p, src, dest, ttl, tos, proto, netif, NULL, 0);
 8012412:	78fa      	ldrb	r2, [r7, #3]
 8012414:	2300      	movs	r3, #0
 8012416:	9304      	str	r3, [sp, #16]
 8012418:	2300      	movs	r3, #0
 801241a:	9303      	str	r3, [sp, #12]
 801241c:	6a3b      	ldr	r3, [r7, #32]
 801241e:	9302      	str	r3, [sp, #8]
 8012420:	7f3b      	ldrb	r3, [r7, #28]
 8012422:	9301      	str	r3, [sp, #4]
 8012424:	7e3b      	ldrb	r3, [r7, #24]
 8012426:	9300      	str	r3, [sp, #0]
 8012428:	4613      	mov	r3, r2
 801242a:	687a      	ldr	r2, [r7, #4]
 801242c:	68b9      	ldr	r1, [r7, #8]
 801242e:	68f8      	ldr	r0, [r7, #12]
 8012430:	f000 f805 	bl	801243e <ip4_output_if_opt>
 8012434:	4603      	mov	r3, r0
}
 8012436:	4618      	mov	r0, r3
 8012438:	3710      	adds	r7, #16
 801243a:	46bd      	mov	sp, r7
 801243c:	bd80      	pop	{r7, pc}

0801243e <ip4_output_if_opt>:
 */
err_t
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
 801243e:	b580      	push	{r7, lr}
 8012440:	b08c      	sub	sp, #48	; 0x30
 8012442:	af06      	add	r7, sp, #24
 8012444:	60f8      	str	r0, [r7, #12]
 8012446:	60b9      	str	r1, [r7, #8]
 8012448:	607a      	str	r2, [r7, #4]
 801244a:	70fb      	strb	r3, [r7, #3]
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801244c:	68bb      	ldr	r3, [r7, #8]
 801244e:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	2b00      	cmp	r3, #0
 8012454:	d009      	beq.n	801246a <ip4_output_if_opt+0x2c>
    if (ip4_addr_isany(src)) {
 8012456:	68bb      	ldr	r3, [r7, #8]
 8012458:	2b00      	cmp	r3, #0
 801245a:	d003      	beq.n	8012464 <ip4_output_if_opt+0x26>
 801245c:	68bb      	ldr	r3, [r7, #8]
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	2b00      	cmp	r3, #0
 8012462:	d102      	bne.n	801246a <ip4_output_if_opt+0x2c>
      src_used = netif_ip4_addr(netif);
 8012464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012466:	3304      	adds	r3, #4
 8012468:	617b      	str	r3, [r7, #20]
    }
  }

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
 801246a:	78fa      	ldrb	r2, [r7, #3]
 801246c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801246e:	9304      	str	r3, [sp, #16]
 8012470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012472:	9303      	str	r3, [sp, #12]
 8012474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012476:	9302      	str	r3, [sp, #8]
 8012478:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801247c:	9301      	str	r3, [sp, #4]
 801247e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012482:	9300      	str	r3, [sp, #0]
 8012484:	4613      	mov	r3, r2
 8012486:	687a      	ldr	r2, [r7, #4]
 8012488:	6979      	ldr	r1, [r7, #20]
 801248a:	68f8      	ldr	r0, [r7, #12]
 801248c:	f000 f822 	bl	80124d4 <ip4_output_if_opt_src>
 8012490:	4603      	mov	r3, r0
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
#endif /* IP_OPTIONS_SEND */
}
 8012492:	4618      	mov	r0, r3
 8012494:	3718      	adds	r7, #24
 8012496:	46bd      	mov	sp, r7
 8012498:	bd80      	pop	{r7, pc}

0801249a <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 801249a:	b580      	push	{r7, lr}
 801249c:	b08a      	sub	sp, #40	; 0x28
 801249e:	af06      	add	r7, sp, #24
 80124a0:	60f8      	str	r0, [r7, #12]
 80124a2:	60b9      	str	r1, [r7, #8]
 80124a4:	607a      	str	r2, [r7, #4]
 80124a6:	70fb      	strb	r3, [r7, #3]
#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src, dest, ttl, tos, proto, netif, NULL, 0);
 80124a8:	78fa      	ldrb	r2, [r7, #3]
 80124aa:	2300      	movs	r3, #0
 80124ac:	9304      	str	r3, [sp, #16]
 80124ae:	2300      	movs	r3, #0
 80124b0:	9303      	str	r3, [sp, #12]
 80124b2:	6a3b      	ldr	r3, [r7, #32]
 80124b4:	9302      	str	r3, [sp, #8]
 80124b6:	7f3b      	ldrb	r3, [r7, #28]
 80124b8:	9301      	str	r3, [sp, #4]
 80124ba:	7e3b      	ldrb	r3, [r7, #24]
 80124bc:	9300      	str	r3, [sp, #0]
 80124be:	4613      	mov	r3, r2
 80124c0:	687a      	ldr	r2, [r7, #4]
 80124c2:	68b9      	ldr	r1, [r7, #8]
 80124c4:	68f8      	ldr	r0, [r7, #12]
 80124c6:	f000 f805 	bl	80124d4 <ip4_output_if_opt_src>
 80124ca:	4603      	mov	r3, r0
}
 80124cc:	4618      	mov	r0, r3
 80124ce:	3710      	adds	r7, #16
 80124d0:	46bd      	mov	sp, r7
 80124d2:	bd80      	pop	{r7, pc}

080124d4 <ip4_output_if_opt_src>:
 */
err_t
ip4_output_if_opt_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
 80124d4:	b580      	push	{r7, lr}
 80124d6:	b088      	sub	sp, #32
 80124d8:	af00      	add	r7, sp, #0
 80124da:	60f8      	str	r0, [r7, #12]
 80124dc:	60b9      	str	r1, [r7, #8]
 80124de:	607a      	str	r2, [r7, #4]
 80124e0:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	89db      	ldrh	r3, [r3, #14]
 80124e6:	2b01      	cmp	r3, #1
 80124e8:	d006      	beq.n	80124f8 <ip4_output_if_opt_src+0x24>
 80124ea:	4b62      	ldr	r3, [pc, #392]	; (8012674 <ip4_output_if_opt_src+0x1a0>)
 80124ec:	f240 3233 	movw	r2, #819	; 0x333
 80124f0:	4961      	ldr	r1, [pc, #388]	; (8012678 <ip4_output_if_opt_src+0x1a4>)
 80124f2:	4862      	ldr	r0, [pc, #392]	; (801267c <ip4_output_if_opt_src+0x1a8>)
 80124f4:	f005 ff16 	bl	8018324 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	f000 8092 	beq.w	8012624 <ip4_output_if_opt_src+0x150>
    u16_t ip_hlen = IP_HLEN;
 8012500:	2314      	movs	r3, #20
 8012502:	83fb      	strh	r3, [r7, #30]
#if IP_OPTIONS_SEND
    u16_t optlen_aligned = 0;
 8012504:	2300      	movs	r3, #0
 8012506:	82fb      	strh	r3, [r7, #22]
    if (optlen != 0) {
 8012508:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801250a:	2b00      	cmp	r3, #0
 801250c:	d02b      	beq.n	8012566 <ip4_output_if_opt_src+0x92>
#if CHECKSUM_GEN_IP_INLINE
      int i;
#endif /* CHECKSUM_GEN_IP_INLINE */
      /* round up to a multiple of 4 */
      optlen_aligned = ((optlen + 3) & ~3);
 801250e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8012510:	3303      	adds	r3, #3
 8012512:	b29b      	uxth	r3, r3
 8012514:	f023 0303 	bic.w	r3, r3, #3
 8012518:	82fb      	strh	r3, [r7, #22]
      ip_hlen += optlen_aligned;
 801251a:	8bfa      	ldrh	r2, [r7, #30]
 801251c:	8afb      	ldrh	r3, [r7, #22]
 801251e:	4413      	add	r3, r2
 8012520:	83fb      	strh	r3, [r7, #30]
      /* First write in the IP options */
      if (pbuf_header(p, optlen_aligned)) {
 8012522:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012526:	4619      	mov	r1, r3
 8012528:	68f8      	ldr	r0, [r7, #12]
 801252a:	f7f7 fa45 	bl	80099b8 <pbuf_header>
 801252e:	4603      	mov	r3, r0
 8012530:	2b00      	cmp	r3, #0
 8012532:	d002      	beq.n	801253a <ip4_output_if_opt_src+0x66>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output_if_opt: not enough room for IP options in pbuf\n"));
        IP_STATS_INC(ip.err);
        MIB2_STATS_INC(mib2.ipoutdiscards);
        return ERR_BUF;
 8012534:	f06f 0301 	mvn.w	r3, #1
 8012538:	e098      	b.n	801266c <ip4_output_if_opt_src+0x198>
      }
      MEMCPY(p->payload, ip_options, optlen);
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	685b      	ldr	r3, [r3, #4]
 801253e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8012540:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012542:	4618      	mov	r0, r3
 8012544:	f005 fedb 	bl	80182fe <memcpy>
      if (optlen < optlen_aligned) {
 8012548:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801254a:	8afb      	ldrh	r3, [r7, #22]
 801254c:	429a      	cmp	r2, r3
 801254e:	d20a      	bcs.n	8012566 <ip4_output_if_opt_src+0x92>
        /* zero the remaining bytes */
        memset(((char*)p->payload) + optlen, 0, optlen_aligned - optlen);
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	685a      	ldr	r2, [r3, #4]
 8012554:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8012556:	18d0      	adds	r0, r2, r3
 8012558:	8afa      	ldrh	r2, [r7, #22]
 801255a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801255c:	1ad3      	subs	r3, r2, r3
 801255e:	461a      	mov	r2, r3
 8012560:	2100      	movs	r1, #0
 8012562:	f005 fed7 	bl	8018314 <memset>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8012566:	2114      	movs	r1, #20
 8012568:	68f8      	ldr	r0, [r7, #12]
 801256a:	f7f7 fa25 	bl	80099b8 <pbuf_header>
 801256e:	4603      	mov	r3, r0
 8012570:	2b00      	cmp	r3, #0
 8012572:	d002      	beq.n	801257a <ip4_output_if_opt_src+0xa6>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012574:	f06f 0301 	mvn.w	r3, #1
 8012578:	e078      	b.n	801266c <ip4_output_if_opt_src+0x198>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801257a:	68fb      	ldr	r3, [r7, #12]
 801257c:	685b      	ldr	r3, [r3, #4]
 801257e:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	895b      	ldrh	r3, [r3, #10]
 8012584:	2b13      	cmp	r3, #19
 8012586:	d806      	bhi.n	8012596 <ip4_output_if_opt_src+0xc2>
 8012588:	4b3a      	ldr	r3, [pc, #232]	; (8012674 <ip4_output_if_opt_src+0x1a0>)
 801258a:	f240 3261 	movw	r2, #865	; 0x361
 801258e:	493c      	ldr	r1, [pc, #240]	; (8012680 <ip4_output_if_opt_src+0x1ac>)
 8012590:	483a      	ldr	r0, [pc, #232]	; (801267c <ip4_output_if_opt_src+0x1a8>)
 8012592:	f005 fec7 	bl	8018324 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8012596:	69bb      	ldr	r3, [r7, #24]
 8012598:	78fa      	ldrb	r2, [r7, #3]
 801259a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801259c:	69bb      	ldr	r3, [r7, #24]
 801259e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80125a2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	681a      	ldr	r2, [r3, #0]
 80125a8:	69bb      	ldr	r3, [r7, #24]
 80125aa:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80125ac:	8bfb      	ldrh	r3, [r7, #30]
 80125ae:	089b      	lsrs	r3, r3, #2
 80125b0:	b29b      	uxth	r3, r3
 80125b2:	b2db      	uxtb	r3, r3
 80125b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80125b8:	b2da      	uxtb	r2, r3
 80125ba:	69bb      	ldr	r3, [r7, #24]
 80125bc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80125be:	69bb      	ldr	r3, [r7, #24]
 80125c0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80125c4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80125c6:	68fb      	ldr	r3, [r7, #12]
 80125c8:	891b      	ldrh	r3, [r3, #8]
 80125ca:	4618      	mov	r0, r3
 80125cc:	f7f5 fd56 	bl	800807c <lwip_htons>
 80125d0:	4603      	mov	r3, r0
 80125d2:	461a      	mov	r2, r3
 80125d4:	69bb      	ldr	r3, [r7, #24]
 80125d6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80125d8:	69bb      	ldr	r3, [r7, #24]
 80125da:	2200      	movs	r2, #0
 80125dc:	719a      	strb	r2, [r3, #6]
 80125de:	2200      	movs	r2, #0
 80125e0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80125e2:	4b28      	ldr	r3, [pc, #160]	; (8012684 <ip4_output_if_opt_src+0x1b0>)
 80125e4:	881b      	ldrh	r3, [r3, #0]
 80125e6:	4618      	mov	r0, r3
 80125e8:	f7f5 fd48 	bl	800807c <lwip_htons>
 80125ec:	4603      	mov	r3, r0
 80125ee:	461a      	mov	r2, r3
 80125f0:	69bb      	ldr	r3, [r7, #24]
 80125f2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80125f4:	4b23      	ldr	r3, [pc, #140]	; (8012684 <ip4_output_if_opt_src+0x1b0>)
 80125f6:	881b      	ldrh	r3, [r3, #0]
 80125f8:	3301      	adds	r3, #1
 80125fa:	b29a      	uxth	r2, r3
 80125fc:	4b21      	ldr	r3, [pc, #132]	; (8012684 <ip4_output_if_opt_src+0x1b0>)
 80125fe:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8012600:	68bb      	ldr	r3, [r7, #8]
 8012602:	2b00      	cmp	r3, #0
 8012604:	d104      	bne.n	8012610 <ip4_output_if_opt_src+0x13c>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8012606:	4b20      	ldr	r3, [pc, #128]	; (8012688 <ip4_output_if_opt_src+0x1b4>)
 8012608:	681a      	ldr	r2, [r3, #0]
 801260a:	69bb      	ldr	r3, [r7, #24]
 801260c:	60da      	str	r2, [r3, #12]
 801260e:	e003      	b.n	8012618 <ip4_output_if_opt_src+0x144>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8012610:	68bb      	ldr	r3, [r7, #8]
 8012612:	681a      	ldr	r2, [r3, #0]
 8012614:	69bb      	ldr	r3, [r7, #24]
 8012616:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8012618:	69bb      	ldr	r3, [r7, #24]
 801261a:	2200      	movs	r2, #0
 801261c:	729a      	strb	r2, [r3, #10]
 801261e:	2200      	movs	r2, #0
 8012620:	72da      	strb	r2, [r3, #11]
 8012622:	e008      	b.n	8012636 <ip4_output_if_opt_src+0x162>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	685b      	ldr	r3, [r3, #4]
 8012628:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801262a:	69bb      	ldr	r3, [r7, #24]
 801262c:	691b      	ldr	r3, [r3, #16]
 801262e:	613b      	str	r3, [r7, #16]
    dest = &dest_addr;
 8012630:	f107 0310 	add.w	r3, r7, #16
 8012634:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], (u16_t)netif->num));
  ip4_debug_print(p);
 8012636:	68f8      	ldr	r0, [r7, #12]
 8012638:	f000 f828 	bl	801268c <ip4_debug_print>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801263c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801263e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012640:	2b00      	cmp	r3, #0
 8012642:	d00c      	beq.n	801265e <ip4_output_if_opt_src+0x18a>
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	891a      	ldrh	r2, [r3, #8]
 8012648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801264a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801264c:	429a      	cmp	r2, r3
 801264e:	d906      	bls.n	801265e <ip4_output_if_opt_src+0x18a>
    return ip4_frag(p, netif, dest);
 8012650:	687a      	ldr	r2, [r7, #4]
 8012652:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012654:	68f8      	ldr	r0, [r7, #12]
 8012656:	f000 fe53 	bl	8013300 <ip4_frag>
 801265a:	4603      	mov	r3, r0
 801265c:	e006      	b.n	801266c <ip4_output_if_opt_src+0x198>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801265e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012660:	695b      	ldr	r3, [r3, #20]
 8012662:	687a      	ldr	r2, [r7, #4]
 8012664:	68f9      	ldr	r1, [r7, #12]
 8012666:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012668:	4798      	blx	r3
 801266a:	4603      	mov	r3, r0
}
 801266c:	4618      	mov	r0, r3
 801266e:	3720      	adds	r7, #32
 8012670:	46bd      	mov	sp, r7
 8012672:	bd80      	pop	{r7, pc}
 8012674:	0801b718 	.word	0x0801b718
 8012678:	0801b74c 	.word	0x0801b74c
 801267c:	0801b758 	.word	0x0801b758
 8012680:	0801b780 	.word	0x0801b780
 8012684:	20004bd4 	.word	0x20004bd4
 8012688:	0801c8e0 	.word	0x0801c8e0

0801268c <ip4_debug_print>:
/* Print an IP header by using LWIP_DEBUGF
 * @param p an IP packet, p->payload pointing to the IP header
 */
void
ip4_debug_print(struct pbuf *p)
{
 801268c:	b480      	push	{r7}
 801268e:	b085      	sub	sp, #20
 8012690:	af00      	add	r7, sp, #0
 8012692:	6078      	str	r0, [r7, #4]
  struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	685b      	ldr	r3, [r3, #4]
 8012698:	60fb      	str	r3, [r7, #12]
                    ip4_addr1_16(&iphdr->dest),
                    ip4_addr2_16(&iphdr->dest),
                    ip4_addr3_16(&iphdr->dest),
                    ip4_addr4_16(&iphdr->dest)));
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
}
 801269a:	bf00      	nop
 801269c:	3714      	adds	r7, #20
 801269e:	46bd      	mov	sp, r7
 80126a0:	bc80      	pop	{r7}
 80126a2:	4770      	bx	lr

080126a4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80126a4:	b480      	push	{r7}
 80126a6:	b085      	sub	sp, #20
 80126a8:	af00      	add	r7, sp, #0
 80126aa:	6078      	str	r0, [r7, #4]
 80126ac:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126b8:	d002      	beq.n	80126c0 <ip4_addr_isbroadcast_u32+0x1c>
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d101      	bne.n	80126c4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80126c0:	2301      	movs	r3, #1
 80126c2:	e02a      	b.n	801271a <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80126c4:	683b      	ldr	r3, [r7, #0]
 80126c6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80126ca:	f003 0302 	and.w	r3, r3, #2
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d101      	bne.n	80126d6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80126d2:	2300      	movs	r3, #0
 80126d4:	e021      	b.n	801271a <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80126d6:	683b      	ldr	r3, [r7, #0]
 80126d8:	3304      	adds	r3, #4
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	687a      	ldr	r2, [r7, #4]
 80126de:	429a      	cmp	r2, r3
 80126e0:	d101      	bne.n	80126e6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80126e2:	2300      	movs	r3, #0
 80126e4:	e019      	b.n	801271a <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80126e6:	68fa      	ldr	r2, [r7, #12]
 80126e8:	683b      	ldr	r3, [r7, #0]
 80126ea:	3304      	adds	r3, #4
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	405a      	eors	r2, r3
 80126f0:	683b      	ldr	r3, [r7, #0]
 80126f2:	3308      	adds	r3, #8
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	4013      	ands	r3, r2
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d10d      	bne.n	8012718 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80126fc:	683b      	ldr	r3, [r7, #0]
 80126fe:	3308      	adds	r3, #8
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	43da      	mvns	r2, r3
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8012708:	683b      	ldr	r3, [r7, #0]
 801270a:	3308      	adds	r3, #8
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012710:	429a      	cmp	r2, r3
 8012712:	d101      	bne.n	8012718 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8012714:	2301      	movs	r3, #1
 8012716:	e000      	b.n	801271a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8012718:	2300      	movs	r3, #0
  }
}
 801271a:	4618      	mov	r0, r3
 801271c:	3714      	adds	r7, #20
 801271e:	46bd      	mov	sp, r7
 8012720:	bc80      	pop	{r7}
 8012722:	4770      	bx	lr

08012724 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8012724:	b580      	push	{r7, lr}
 8012726:	b08a      	sub	sp, #40	; 0x28
 8012728:	af00      	add	r7, sp, #0
 801272a:	6078      	str	r0, [r7, #4]
 801272c:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 801272e:	f107 030c 	add.w	r3, r7, #12
 8012732:	61fb      	str	r3, [r7, #28]

  c = *cp;
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	781b      	ldrb	r3, [r3, #0]
 8012738:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!isdigit(c)) {
 801273c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012740:	2b2f      	cmp	r3, #47	; 0x2f
 8012742:	d903      	bls.n	801274c <ip4addr_aton+0x28>
 8012744:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012748:	2b39      	cmp	r3, #57	; 0x39
 801274a:	d901      	bls.n	8012750 <ip4addr_aton+0x2c>
      return 0;
 801274c:	2300      	movs	r3, #0
 801274e:	e11e      	b.n	801298e <ip4addr_aton+0x26a>
    }
    val = 0;
 8012750:	2300      	movs	r3, #0
 8012752:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 8012754:	230a      	movs	r3, #10
 8012756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 801275a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801275e:	2b30      	cmp	r3, #48	; 0x30
 8012760:	d11c      	bne.n	801279c <ip4addr_aton+0x78>
      c = *++cp;
 8012762:	687b      	ldr	r3, [r7, #4]
 8012764:	3301      	adds	r3, #1
 8012766:	607b      	str	r3, [r7, #4]
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	781b      	ldrb	r3, [r3, #0]
 801276c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 8012770:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012774:	2b78      	cmp	r3, #120	; 0x78
 8012776:	d003      	beq.n	8012780 <ip4addr_aton+0x5c>
 8012778:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801277c:	2b58      	cmp	r3, #88	; 0x58
 801277e:	d10a      	bne.n	8012796 <ip4addr_aton+0x72>
        base = 16;
 8012780:	2310      	movs	r3, #16
 8012782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	3301      	adds	r3, #1
 801278a:	607b      	str	r3, [r7, #4]
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	781b      	ldrb	r3, [r3, #0]
 8012790:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8012794:	e002      	b.n	801279c <ip4addr_aton+0x78>
      } else {
        base = 8;
 8012796:	2308      	movs	r3, #8
 8012798:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (isdigit(c)) {
 801279c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80127a0:	2b2f      	cmp	r3, #47	; 0x2f
 80127a2:	d915      	bls.n	80127d0 <ip4addr_aton+0xac>
 80127a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80127a8:	2b39      	cmp	r3, #57	; 0x39
 80127aa:	d811      	bhi.n	80127d0 <ip4addr_aton+0xac>
        val = (val * base) + (u32_t)(c - '0');
 80127ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80127b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80127b2:	fb02 f203 	mul.w	r2, r2, r3
 80127b6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80127ba:	4413      	add	r3, r2
 80127bc:	3b30      	subs	r3, #48	; 0x30
 80127be:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	3301      	adds	r3, #1
 80127c4:	607b      	str	r3, [r7, #4]
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	781b      	ldrb	r3, [r3, #0]
 80127ca:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80127ce:	e036      	b.n	801283e <ip4addr_aton+0x11a>
      } else if (base == 16 && isxdigit(c)) {
 80127d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80127d4:	2b10      	cmp	r3, #16
 80127d6:	d133      	bne.n	8012840 <ip4addr_aton+0x11c>
 80127d8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80127dc:	2b2f      	cmp	r3, #47	; 0x2f
 80127de:	d903      	bls.n	80127e8 <ip4addr_aton+0xc4>
 80127e0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80127e4:	2b39      	cmp	r3, #57	; 0x39
 80127e6:	d90f      	bls.n	8012808 <ip4addr_aton+0xe4>
 80127e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80127ec:	2b60      	cmp	r3, #96	; 0x60
 80127ee:	d903      	bls.n	80127f8 <ip4addr_aton+0xd4>
 80127f0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80127f4:	2b66      	cmp	r3, #102	; 0x66
 80127f6:	d907      	bls.n	8012808 <ip4addr_aton+0xe4>
 80127f8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80127fc:	2b40      	cmp	r3, #64	; 0x40
 80127fe:	d91f      	bls.n	8012840 <ip4addr_aton+0x11c>
 8012800:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012804:	2b46      	cmp	r3, #70	; 0x46
 8012806:	d81b      	bhi.n	8012840 <ip4addr_aton+0x11c>
        val = (val << 4) | (u32_t)(c + 10 - (islower(c) ? 'a' : 'A'));
 8012808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801280a:	011b      	lsls	r3, r3, #4
 801280c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8012810:	f102 010a 	add.w	r1, r2, #10
 8012814:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8012818:	2a60      	cmp	r2, #96	; 0x60
 801281a:	d905      	bls.n	8012828 <ip4addr_aton+0x104>
 801281c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8012820:	2a7a      	cmp	r2, #122	; 0x7a
 8012822:	d801      	bhi.n	8012828 <ip4addr_aton+0x104>
 8012824:	2261      	movs	r2, #97	; 0x61
 8012826:	e000      	b.n	801282a <ip4addr_aton+0x106>
 8012828:	2241      	movs	r2, #65	; 0x41
 801282a:	1a8a      	subs	r2, r1, r2
 801282c:	4313      	orrs	r3, r2
 801282e:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	3301      	adds	r3, #1
 8012834:	607b      	str	r3, [r7, #4]
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	781b      	ldrb	r3, [r3, #0]
 801283a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (isdigit(c)) {
 801283e:	e7ad      	b.n	801279c <ip4addr_aton+0x78>
      } else {
        break;
      }
    }
    if (c == '.') {
 8012840:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012844:	2b2e      	cmp	r3, #46	; 0x2e
 8012846:	d114      	bne.n	8012872 <ip4addr_aton+0x14e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8012848:	f107 030c 	add.w	r3, r7, #12
 801284c:	330c      	adds	r3, #12
 801284e:	69fa      	ldr	r2, [r7, #28]
 8012850:	429a      	cmp	r2, r3
 8012852:	d301      	bcc.n	8012858 <ip4addr_aton+0x134>
        return 0;
 8012854:	2300      	movs	r3, #0
 8012856:	e09a      	b.n	801298e <ip4addr_aton+0x26a>
      }
      *pp++ = val;
 8012858:	69fb      	ldr	r3, [r7, #28]
 801285a:	1d1a      	adds	r2, r3, #4
 801285c:	61fa      	str	r2, [r7, #28]
 801285e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012860:	601a      	str	r2, [r3, #0]
      c = *++cp;
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	3301      	adds	r3, #1
 8012866:	607b      	str	r3, [r7, #4]
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	781b      	ldrb	r3, [r3, #0]
 801286c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!isdigit(c)) {
 8012870:	e764      	b.n	801273c <ip4addr_aton+0x18>
    } else {
      break;
 8012872:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !isspace(c)) {
 8012874:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012878:	2b00      	cmp	r3, #0
 801287a:	d019      	beq.n	80128b0 <ip4addr_aton+0x18c>
 801287c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012880:	2b20      	cmp	r3, #32
 8012882:	d015      	beq.n	80128b0 <ip4addr_aton+0x18c>
 8012884:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012888:	2b0c      	cmp	r3, #12
 801288a:	d011      	beq.n	80128b0 <ip4addr_aton+0x18c>
 801288c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012890:	2b0a      	cmp	r3, #10
 8012892:	d00d      	beq.n	80128b0 <ip4addr_aton+0x18c>
 8012894:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012898:	2b0d      	cmp	r3, #13
 801289a:	d009      	beq.n	80128b0 <ip4addr_aton+0x18c>
 801289c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80128a0:	2b09      	cmp	r3, #9
 80128a2:	d005      	beq.n	80128b0 <ip4addr_aton+0x18c>
 80128a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80128a8:	2b0b      	cmp	r3, #11
 80128aa:	d001      	beq.n	80128b0 <ip4addr_aton+0x18c>
    return 0;
 80128ac:	2300      	movs	r3, #0
 80128ae:	e06e      	b.n	801298e <ip4addr_aton+0x26a>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 80128b0:	69fa      	ldr	r2, [r7, #28]
 80128b2:	f107 030c 	add.w	r3, r7, #12
 80128b6:	1ad3      	subs	r3, r2, r3
 80128b8:	109b      	asrs	r3, r3, #2
 80128ba:	3301      	adds	r3, #1
 80128bc:	2b04      	cmp	r3, #4
 80128be:	d853      	bhi.n	8012968 <ip4addr_aton+0x244>
 80128c0:	a201      	add	r2, pc, #4	; (adr r2, 80128c8 <ip4addr_aton+0x1a4>)
 80128c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80128c6:	bf00      	nop
 80128c8:	080128dd 	.word	0x080128dd
 80128cc:	08012979 	.word	0x08012979
 80128d0:	080128e1 	.word	0x080128e1
 80128d4:	08012903 	.word	0x08012903
 80128d8:	08012931 	.word	0x08012931

  case 0:
    return 0;       /* initial nondigit */
 80128dc:	2300      	movs	r3, #0
 80128de:	e056      	b.n	801298e <ip4addr_aton+0x26a>

  case 1:             /* a -- 32 bits */
    break;

  case 2:             /* a.b -- 8.24 bits */
    if (val > 0xffffffUL) {
 80128e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80128e6:	d301      	bcc.n	80128ec <ip4addr_aton+0x1c8>
      return 0;
 80128e8:	2300      	movs	r3, #0
 80128ea:	e050      	b.n	801298e <ip4addr_aton+0x26a>
    }
    if (parts[0] > 0xff) {
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	2bff      	cmp	r3, #255	; 0xff
 80128f0:	d901      	bls.n	80128f6 <ip4addr_aton+0x1d2>
      return 0;
 80128f2:	2300      	movs	r3, #0
 80128f4:	e04b      	b.n	801298e <ip4addr_aton+0x26a>
    }
    val |= parts[0] << 24;
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	061b      	lsls	r3, r3, #24
 80128fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80128fc:	4313      	orrs	r3, r2
 80128fe:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8012900:	e03b      	b.n	801297a <ip4addr_aton+0x256>

  case 3:             /* a.b.c -- 8.8.16 bits */
    if (val > 0xffff) {
 8012902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012908:	d301      	bcc.n	801290e <ip4addr_aton+0x1ea>
      return 0;
 801290a:	2300      	movs	r3, #0
 801290c:	e03f      	b.n	801298e <ip4addr_aton+0x26a>
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 801290e:	68fb      	ldr	r3, [r7, #12]
 8012910:	2bff      	cmp	r3, #255	; 0xff
 8012912:	d802      	bhi.n	801291a <ip4addr_aton+0x1f6>
 8012914:	693b      	ldr	r3, [r7, #16]
 8012916:	2bff      	cmp	r3, #255	; 0xff
 8012918:	d901      	bls.n	801291e <ip4addr_aton+0x1fa>
      return 0;
 801291a:	2300      	movs	r3, #0
 801291c:	e037      	b.n	801298e <ip4addr_aton+0x26a>
    }
    val |= (parts[0] << 24) | (parts[1] << 16);
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	061a      	lsls	r2, r3, #24
 8012922:	693b      	ldr	r3, [r7, #16]
 8012924:	041b      	lsls	r3, r3, #16
 8012926:	4313      	orrs	r3, r2
 8012928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801292a:	4313      	orrs	r3, r2
 801292c:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 801292e:	e024      	b.n	801297a <ip4addr_aton+0x256>

  case 4:             /* a.b.c.d -- 8.8.8.8 bits */
    if (val > 0xff) {
 8012930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012932:	2bff      	cmp	r3, #255	; 0xff
 8012934:	d901      	bls.n	801293a <ip4addr_aton+0x216>
      return 0;
 8012936:	2300      	movs	r3, #0
 8012938:	e029      	b.n	801298e <ip4addr_aton+0x26a>
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	2bff      	cmp	r3, #255	; 0xff
 801293e:	d805      	bhi.n	801294c <ip4addr_aton+0x228>
 8012940:	693b      	ldr	r3, [r7, #16]
 8012942:	2bff      	cmp	r3, #255	; 0xff
 8012944:	d802      	bhi.n	801294c <ip4addr_aton+0x228>
 8012946:	697b      	ldr	r3, [r7, #20]
 8012948:	2bff      	cmp	r3, #255	; 0xff
 801294a:	d901      	bls.n	8012950 <ip4addr_aton+0x22c>
      return 0;
 801294c:	2300      	movs	r3, #0
 801294e:	e01e      	b.n	801298e <ip4addr_aton+0x26a>
    }
    val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8012950:	68fb      	ldr	r3, [r7, #12]
 8012952:	061a      	lsls	r2, r3, #24
 8012954:	693b      	ldr	r3, [r7, #16]
 8012956:	041b      	lsls	r3, r3, #16
 8012958:	431a      	orrs	r2, r3
 801295a:	697b      	ldr	r3, [r7, #20]
 801295c:	021b      	lsls	r3, r3, #8
 801295e:	4313      	orrs	r3, r2
 8012960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012962:	4313      	orrs	r3, r2
 8012964:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8012966:	e008      	b.n	801297a <ip4addr_aton+0x256>
  default:
    LWIP_ASSERT("unhandled", 0);
 8012968:	4b0b      	ldr	r3, [pc, #44]	; (8012998 <ip4addr_aton+0x274>)
 801296a:	f240 1203 	movw	r2, #259	; 0x103
 801296e:	490b      	ldr	r1, [pc, #44]	; (801299c <ip4addr_aton+0x278>)
 8012970:	480b      	ldr	r0, [pc, #44]	; (80129a0 <ip4addr_aton+0x27c>)
 8012972:	f005 fcd7 	bl	8018324 <iprintf>
    break;
 8012976:	e000      	b.n	801297a <ip4addr_aton+0x256>
    break;
 8012978:	bf00      	nop
  }
  if (addr) {
 801297a:	683b      	ldr	r3, [r7, #0]
 801297c:	2b00      	cmp	r3, #0
 801297e:	d005      	beq.n	801298c <ip4addr_aton+0x268>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8012980:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012982:	f7f5 fb88 	bl	8008096 <lwip_htonl>
 8012986:	4602      	mov	r2, r0
 8012988:	683b      	ldr	r3, [r7, #0]
 801298a:	601a      	str	r2, [r3, #0]
  }
  return 1;
 801298c:	2301      	movs	r3, #1
}
 801298e:	4618      	mov	r0, r3
 8012990:	3728      	adds	r7, #40	; 0x28
 8012992:	46bd      	mov	sp, r7
 8012994:	bd80      	pop	{r7, pc}
 8012996:	bf00      	nop
 8012998:	0801b7b0 	.word	0x0801b7b0
 801299c:	0801b7ec 	.word	0x0801b7ec
 80129a0:	0801b7f8 	.word	0x0801b7f8

080129a4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80129a4:	b580      	push	{r7, lr}
 80129a6:	b084      	sub	sp, #16
 80129a8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80129aa:	2300      	movs	r3, #0
 80129ac:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80129ae:	4b12      	ldr	r3, [pc, #72]	; (80129f8 <ip_reass_tmr+0x54>)
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80129b4:	e018      	b.n	80129e8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80129b6:	68fb      	ldr	r3, [r7, #12]
 80129b8:	7fdb      	ldrb	r3, [r3, #31]
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d00b      	beq.n	80129d6 <ip_reass_tmr+0x32>
      r->timer--;
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	7fdb      	ldrb	r3, [r3, #31]
 80129c2:	3b01      	subs	r3, #1
 80129c4:	b2da      	uxtb	r2, r3
 80129c6:	68fb      	ldr	r3, [r7, #12]
 80129c8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	60fb      	str	r3, [r7, #12]
 80129d4:	e008      	b.n	80129e8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80129d6:	68fb      	ldr	r3, [r7, #12]
 80129d8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	681b      	ldr	r3, [r3, #0]
 80129de:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80129e0:	68b9      	ldr	r1, [r7, #8]
 80129e2:	6878      	ldr	r0, [r7, #4]
 80129e4:	f000 f80a 	bl	80129fc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d1e3      	bne.n	80129b6 <ip_reass_tmr+0x12>
     }
   }
}
 80129ee:	bf00      	nop
 80129f0:	3710      	adds	r7, #16
 80129f2:	46bd      	mov	sp, r7
 80129f4:	bd80      	pop	{r7, pc}
 80129f6:	bf00      	nop
 80129f8:	20004bdc 	.word	0x20004bdc

080129fc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80129fc:	b580      	push	{r7, lr}
 80129fe:	b088      	sub	sp, #32
 8012a00:	af00      	add	r7, sp, #0
 8012a02:	6078      	str	r0, [r7, #4]
 8012a04:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8012a06:	2300      	movs	r3, #0
 8012a08:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8012a0a:	683a      	ldr	r2, [r7, #0]
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	429a      	cmp	r2, r3
 8012a10:	d105      	bne.n	8012a1e <ip_reass_free_complete_datagram+0x22>
 8012a12:	4b45      	ldr	r3, [pc, #276]	; (8012b28 <ip_reass_free_complete_datagram+0x12c>)
 8012a14:	22ab      	movs	r2, #171	; 0xab
 8012a16:	4945      	ldr	r1, [pc, #276]	; (8012b2c <ip_reass_free_complete_datagram+0x130>)
 8012a18:	4845      	ldr	r0, [pc, #276]	; (8012b30 <ip_reass_free_complete_datagram+0x134>)
 8012a1a:	f005 fc83 	bl	8018324 <iprintf>
  if (prev != NULL) {
 8012a1e:	683b      	ldr	r3, [r7, #0]
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d00a      	beq.n	8012a3a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8012a24:	683b      	ldr	r3, [r7, #0]
 8012a26:	681b      	ldr	r3, [r3, #0]
 8012a28:	687a      	ldr	r2, [r7, #4]
 8012a2a:	429a      	cmp	r2, r3
 8012a2c:	d005      	beq.n	8012a3a <ip_reass_free_complete_datagram+0x3e>
 8012a2e:	4b3e      	ldr	r3, [pc, #248]	; (8012b28 <ip_reass_free_complete_datagram+0x12c>)
 8012a30:	22ad      	movs	r2, #173	; 0xad
 8012a32:	4940      	ldr	r1, [pc, #256]	; (8012b34 <ip_reass_free_complete_datagram+0x138>)
 8012a34:	483e      	ldr	r0, [pc, #248]	; (8012b30 <ip_reass_free_complete_datagram+0x134>)
 8012a36:	f005 fc75 	bl	8018324 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	685b      	ldr	r3, [r3, #4]
 8012a3e:	685b      	ldr	r3, [r3, #4]
 8012a40:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8012a42:	697b      	ldr	r3, [r7, #20]
 8012a44:	889b      	ldrh	r3, [r3, #4]
 8012a46:	b29b      	uxth	r3, r3
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d12a      	bne.n	8012aa2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	685b      	ldr	r3, [r3, #4]
 8012a50:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8012a52:	697b      	ldr	r3, [r7, #20]
 8012a54:	681a      	ldr	r2, [r3, #0]
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8012a5a:	69bb      	ldr	r3, [r7, #24]
 8012a5c:	6858      	ldr	r0, [r3, #4]
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	3308      	adds	r3, #8
 8012a62:	2214      	movs	r2, #20
 8012a64:	4619      	mov	r1, r3
 8012a66:	f005 fc4a 	bl	80182fe <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8012a6a:	2101      	movs	r1, #1
 8012a6c:	69b8      	ldr	r0, [r7, #24]
 8012a6e:	f7fe fdb5 	bl	80115dc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8012a72:	69b8      	ldr	r0, [r7, #24]
 8012a74:	f7f7 f85e 	bl	8009b34 <pbuf_clen>
 8012a78:	4603      	mov	r3, r0
 8012a7a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012a7c:	8bfa      	ldrh	r2, [r7, #30]
 8012a7e:	8a7b      	ldrh	r3, [r7, #18]
 8012a80:	4413      	add	r3, r2
 8012a82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012a86:	db05      	blt.n	8012a94 <ip_reass_free_complete_datagram+0x98>
 8012a88:	4b27      	ldr	r3, [pc, #156]	; (8012b28 <ip_reass_free_complete_datagram+0x12c>)
 8012a8a:	22bc      	movs	r2, #188	; 0xbc
 8012a8c:	492a      	ldr	r1, [pc, #168]	; (8012b38 <ip_reass_free_complete_datagram+0x13c>)
 8012a8e:	4828      	ldr	r0, [pc, #160]	; (8012b30 <ip_reass_free_complete_datagram+0x134>)
 8012a90:	f005 fc48 	bl	8018324 <iprintf>
    pbufs_freed += clen;
 8012a94:	8bfa      	ldrh	r2, [r7, #30]
 8012a96:	8a7b      	ldrh	r3, [r7, #18]
 8012a98:	4413      	add	r3, r2
 8012a9a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8012a9c:	69b8      	ldr	r0, [r7, #24]
 8012a9e:	f7f6 ffaf 	bl	8009a00 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	685b      	ldr	r3, [r3, #4]
 8012aa6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8012aa8:	e01f      	b.n	8012aea <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8012aaa:	69bb      	ldr	r3, [r7, #24]
 8012aac:	685b      	ldr	r3, [r3, #4]
 8012aae:	617b      	str	r3, [r7, #20]
    pcur = p;
 8012ab0:	69bb      	ldr	r3, [r7, #24]
 8012ab2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8012ab4:	697b      	ldr	r3, [r7, #20]
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8012aba:	68f8      	ldr	r0, [r7, #12]
 8012abc:	f7f7 f83a 	bl	8009b34 <pbuf_clen>
 8012ac0:	4603      	mov	r3, r0
 8012ac2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012ac4:	8bfa      	ldrh	r2, [r7, #30]
 8012ac6:	8a7b      	ldrh	r3, [r7, #18]
 8012ac8:	4413      	add	r3, r2
 8012aca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012ace:	db05      	blt.n	8012adc <ip_reass_free_complete_datagram+0xe0>
 8012ad0:	4b15      	ldr	r3, [pc, #84]	; (8012b28 <ip_reass_free_complete_datagram+0x12c>)
 8012ad2:	22cc      	movs	r2, #204	; 0xcc
 8012ad4:	4918      	ldr	r1, [pc, #96]	; (8012b38 <ip_reass_free_complete_datagram+0x13c>)
 8012ad6:	4816      	ldr	r0, [pc, #88]	; (8012b30 <ip_reass_free_complete_datagram+0x134>)
 8012ad8:	f005 fc24 	bl	8018324 <iprintf>
    pbufs_freed += clen;
 8012adc:	8bfa      	ldrh	r2, [r7, #30]
 8012ade:	8a7b      	ldrh	r3, [r7, #18]
 8012ae0:	4413      	add	r3, r2
 8012ae2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8012ae4:	68f8      	ldr	r0, [r7, #12]
 8012ae6:	f7f6 ff8b 	bl	8009a00 <pbuf_free>
  while (p != NULL) {
 8012aea:	69bb      	ldr	r3, [r7, #24]
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d1dc      	bne.n	8012aaa <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8012af0:	6839      	ldr	r1, [r7, #0]
 8012af2:	6878      	ldr	r0, [r7, #4]
 8012af4:	f000 f8c2 	bl	8012c7c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8012af8:	4b10      	ldr	r3, [pc, #64]	; (8012b3c <ip_reass_free_complete_datagram+0x140>)
 8012afa:	881b      	ldrh	r3, [r3, #0]
 8012afc:	8bfa      	ldrh	r2, [r7, #30]
 8012afe:	429a      	cmp	r2, r3
 8012b00:	d905      	bls.n	8012b0e <ip_reass_free_complete_datagram+0x112>
 8012b02:	4b09      	ldr	r3, [pc, #36]	; (8012b28 <ip_reass_free_complete_datagram+0x12c>)
 8012b04:	22d2      	movs	r2, #210	; 0xd2
 8012b06:	490e      	ldr	r1, [pc, #56]	; (8012b40 <ip_reass_free_complete_datagram+0x144>)
 8012b08:	4809      	ldr	r0, [pc, #36]	; (8012b30 <ip_reass_free_complete_datagram+0x134>)
 8012b0a:	f005 fc0b 	bl	8018324 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 8012b0e:	4b0b      	ldr	r3, [pc, #44]	; (8012b3c <ip_reass_free_complete_datagram+0x140>)
 8012b10:	881a      	ldrh	r2, [r3, #0]
 8012b12:	8bfb      	ldrh	r3, [r7, #30]
 8012b14:	1ad3      	subs	r3, r2, r3
 8012b16:	b29a      	uxth	r2, r3
 8012b18:	4b08      	ldr	r3, [pc, #32]	; (8012b3c <ip_reass_free_complete_datagram+0x140>)
 8012b1a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8012b1c:	8bfb      	ldrh	r3, [r7, #30]
}
 8012b1e:	4618      	mov	r0, r3
 8012b20:	3720      	adds	r7, #32
 8012b22:	46bd      	mov	sp, r7
 8012b24:	bd80      	pop	{r7, pc}
 8012b26:	bf00      	nop
 8012b28:	0801b820 	.word	0x0801b820
 8012b2c:	0801b85c 	.word	0x0801b85c
 8012b30:	0801b868 	.word	0x0801b868
 8012b34:	0801b890 	.word	0x0801b890
 8012b38:	0801b8a4 	.word	0x0801b8a4
 8012b3c:	20004be0 	.word	0x20004be0
 8012b40:	0801b8c4 	.word	0x0801b8c4

08012b44 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8012b44:	b580      	push	{r7, lr}
 8012b46:	b08a      	sub	sp, #40	; 0x28
 8012b48:	af00      	add	r7, sp, #0
 8012b4a:	6078      	str	r0, [r7, #4]
 8012b4c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8012b4e:	2300      	movs	r3, #0
 8012b50:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8012b52:	2300      	movs	r3, #0
 8012b54:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8012b56:	2300      	movs	r3, #0
 8012b58:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8012b5a:	2300      	movs	r3, #0
 8012b5c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8012b5e:	2300      	movs	r3, #0
 8012b60:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8012b62:	4b28      	ldr	r3, [pc, #160]	; (8012c04 <ip_reass_remove_oldest_datagram+0xc0>)
 8012b64:	681b      	ldr	r3, [r3, #0]
 8012b66:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012b68:	e030      	b.n	8012bcc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8012b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b6c:	695a      	ldr	r2, [r3, #20]
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	68db      	ldr	r3, [r3, #12]
 8012b72:	429a      	cmp	r2, r3
 8012b74:	d10c      	bne.n	8012b90 <ip_reass_remove_oldest_datagram+0x4c>
 8012b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b78:	699a      	ldr	r2, [r3, #24]
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	691b      	ldr	r3, [r3, #16]
 8012b7e:	429a      	cmp	r2, r3
 8012b80:	d106      	bne.n	8012b90 <ip_reass_remove_oldest_datagram+0x4c>
 8012b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b84:	899a      	ldrh	r2, [r3, #12]
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	889b      	ldrh	r3, [r3, #4]
 8012b8a:	b29b      	uxth	r3, r3
 8012b8c:	429a      	cmp	r2, r3
 8012b8e:	d014      	beq.n	8012bba <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8012b90:	693b      	ldr	r3, [r7, #16]
 8012b92:	3301      	adds	r3, #1
 8012b94:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8012b96:	6a3b      	ldr	r3, [r7, #32]
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d104      	bne.n	8012ba6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8012b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b9e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8012ba0:	69fb      	ldr	r3, [r7, #28]
 8012ba2:	61bb      	str	r3, [r7, #24]
 8012ba4:	e009      	b.n	8012bba <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8012ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ba8:	7fda      	ldrb	r2, [r3, #31]
 8012baa:	6a3b      	ldr	r3, [r7, #32]
 8012bac:	7fdb      	ldrb	r3, [r3, #31]
 8012bae:	429a      	cmp	r2, r3
 8012bb0:	d803      	bhi.n	8012bba <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8012bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bb4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8012bb6:	69fb      	ldr	r3, [r7, #28]
 8012bb8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8012bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bbc:	681b      	ldr	r3, [r3, #0]
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d001      	beq.n	8012bc6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8012bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bc4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8012bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8012bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d1cb      	bne.n	8012b6a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8012bd2:	6a3b      	ldr	r3, [r7, #32]
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d008      	beq.n	8012bea <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8012bd8:	69b9      	ldr	r1, [r7, #24]
 8012bda:	6a38      	ldr	r0, [r7, #32]
 8012bdc:	f7ff ff0e 	bl	80129fc <ip_reass_free_complete_datagram>
 8012be0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8012be2:	697a      	ldr	r2, [r7, #20]
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	4413      	add	r3, r2
 8012be8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8012bea:	697a      	ldr	r2, [r7, #20]
 8012bec:	683b      	ldr	r3, [r7, #0]
 8012bee:	429a      	cmp	r2, r3
 8012bf0:	da02      	bge.n	8012bf8 <ip_reass_remove_oldest_datagram+0xb4>
 8012bf2:	693b      	ldr	r3, [r7, #16]
 8012bf4:	2b01      	cmp	r3, #1
 8012bf6:	dcac      	bgt.n	8012b52 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8012bf8:	697b      	ldr	r3, [r7, #20]
}
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	3728      	adds	r7, #40	; 0x28
 8012bfe:	46bd      	mov	sp, r7
 8012c00:	bd80      	pop	{r7, pc}
 8012c02:	bf00      	nop
 8012c04:	20004bdc 	.word	0x20004bdc

08012c08 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8012c08:	b580      	push	{r7, lr}
 8012c0a:	b084      	sub	sp, #16
 8012c0c:	af00      	add	r7, sp, #0
 8012c0e:	6078      	str	r0, [r7, #4]
 8012c10:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012c12:	2004      	movs	r0, #4
 8012c14:	f7f6 f930 	bl	8008e78 <memp_malloc>
 8012c18:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8012c1a:	68fb      	ldr	r3, [r7, #12]
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d110      	bne.n	8012c42 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8012c20:	6839      	ldr	r1, [r7, #0]
 8012c22:	6878      	ldr	r0, [r7, #4]
 8012c24:	f7ff ff8e 	bl	8012b44 <ip_reass_remove_oldest_datagram>
 8012c28:	4602      	mov	r2, r0
 8012c2a:	683b      	ldr	r3, [r7, #0]
 8012c2c:	4293      	cmp	r3, r2
 8012c2e:	dc03      	bgt.n	8012c38 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012c30:	2004      	movs	r0, #4
 8012c32:	f7f6 f921 	bl	8008e78 <memp_malloc>
 8012c36:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d101      	bne.n	8012c42 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 8012c3e:	2300      	movs	r3, #0
 8012c40:	e016      	b.n	8012c70 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8012c42:	2220      	movs	r2, #32
 8012c44:	2100      	movs	r1, #0
 8012c46:	68f8      	ldr	r0, [r7, #12]
 8012c48:	f005 fb64 	bl	8018314 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	2203      	movs	r2, #3
 8012c50:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8012c52:	4b09      	ldr	r3, [pc, #36]	; (8012c78 <ip_reass_enqueue_new_datagram+0x70>)
 8012c54:	681a      	ldr	r2, [r3, #0]
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8012c5a:	4a07      	ldr	r2, [pc, #28]	; (8012c78 <ip_reass_enqueue_new_datagram+0x70>)
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8012c60:	68fb      	ldr	r3, [r7, #12]
 8012c62:	3308      	adds	r3, #8
 8012c64:	2214      	movs	r2, #20
 8012c66:	6879      	ldr	r1, [r7, #4]
 8012c68:	4618      	mov	r0, r3
 8012c6a:	f005 fb48 	bl	80182fe <memcpy>
  return ipr;
 8012c6e:	68fb      	ldr	r3, [r7, #12]
}
 8012c70:	4618      	mov	r0, r3
 8012c72:	3710      	adds	r7, #16
 8012c74:	46bd      	mov	sp, r7
 8012c76:	bd80      	pop	{r7, pc}
 8012c78:	20004bdc 	.word	0x20004bdc

08012c7c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012c7c:	b580      	push	{r7, lr}
 8012c7e:	b082      	sub	sp, #8
 8012c80:	af00      	add	r7, sp, #0
 8012c82:	6078      	str	r0, [r7, #4]
 8012c84:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8012c86:	4b10      	ldr	r3, [pc, #64]	; (8012cc8 <ip_reass_dequeue_datagram+0x4c>)
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	687a      	ldr	r2, [r7, #4]
 8012c8c:	429a      	cmp	r2, r3
 8012c8e:	d104      	bne.n	8012c9a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	681b      	ldr	r3, [r3, #0]
 8012c94:	4a0c      	ldr	r2, [pc, #48]	; (8012cc8 <ip_reass_dequeue_datagram+0x4c>)
 8012c96:	6013      	str	r3, [r2, #0]
 8012c98:	e00d      	b.n	8012cb6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8012c9a:	683b      	ldr	r3, [r7, #0]
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d106      	bne.n	8012cae <ip_reass_dequeue_datagram+0x32>
 8012ca0:	4b0a      	ldr	r3, [pc, #40]	; (8012ccc <ip_reass_dequeue_datagram+0x50>)
 8012ca2:	f240 1245 	movw	r2, #325	; 0x145
 8012ca6:	490a      	ldr	r1, [pc, #40]	; (8012cd0 <ip_reass_dequeue_datagram+0x54>)
 8012ca8:	480a      	ldr	r0, [pc, #40]	; (8012cd4 <ip_reass_dequeue_datagram+0x58>)
 8012caa:	f005 fb3b 	bl	8018324 <iprintf>
    prev->next = ipr->next;
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	681a      	ldr	r2, [r3, #0]
 8012cb2:	683b      	ldr	r3, [r7, #0]
 8012cb4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8012cb6:	6879      	ldr	r1, [r7, #4]
 8012cb8:	2004      	movs	r0, #4
 8012cba:	f7f6 f92f 	bl	8008f1c <memp_free>
}
 8012cbe:	bf00      	nop
 8012cc0:	3708      	adds	r7, #8
 8012cc2:	46bd      	mov	sp, r7
 8012cc4:	bd80      	pop	{r7, pc}
 8012cc6:	bf00      	nop
 8012cc8:	20004bdc 	.word	0x20004bdc
 8012ccc:	0801b820 	.word	0x0801b820
 8012cd0:	0801b8e0 	.word	0x0801b8e0
 8012cd4:	0801b868 	.word	0x0801b868

08012cd8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8012cd8:	b580      	push	{r7, lr}
 8012cda:	b08c      	sub	sp, #48	; 0x30
 8012cdc:	af00      	add	r7, sp, #0
 8012cde:	60f8      	str	r0, [r7, #12]
 8012ce0:	60b9      	str	r1, [r7, #8]
 8012ce2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 8012ce4:	2300      	movs	r3, #0
 8012ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8012ce8:	2301      	movs	r3, #1
 8012cea:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 8012cec:	68bb      	ldr	r3, [r7, #8]
 8012cee:	685b      	ldr	r3, [r3, #4]
 8012cf0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8012cf2:	69fb      	ldr	r3, [r7, #28]
 8012cf4:	885b      	ldrh	r3, [r3, #2]
 8012cf6:	b29b      	uxth	r3, r3
 8012cf8:	4618      	mov	r0, r3
 8012cfa:	f7f5 f9bf 	bl	800807c <lwip_htons>
 8012cfe:	4603      	mov	r3, r0
 8012d00:	461a      	mov	r2, r3
 8012d02:	69fb      	ldr	r3, [r7, #28]
 8012d04:	781b      	ldrb	r3, [r3, #0]
 8012d06:	b29b      	uxth	r3, r3
 8012d08:	f003 030f 	and.w	r3, r3, #15
 8012d0c:	b29b      	uxth	r3, r3
 8012d0e:	009b      	lsls	r3, r3, #2
 8012d10:	b29b      	uxth	r3, r3
 8012d12:	1ad3      	subs	r3, r2, r3
 8012d14:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8012d16:	69fb      	ldr	r3, [r7, #28]
 8012d18:	88db      	ldrh	r3, [r3, #6]
 8012d1a:	b29b      	uxth	r3, r3
 8012d1c:	4618      	mov	r0, r3
 8012d1e:	f7f5 f9ad 	bl	800807c <lwip_htons>
 8012d22:	4603      	mov	r3, r0
 8012d24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012d28:	b29b      	uxth	r3, r3
 8012d2a:	00db      	lsls	r3, r3, #3
 8012d2c:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 8012d2e:	68bb      	ldr	r3, [r7, #8]
 8012d30:	685b      	ldr	r3, [r3, #4]
 8012d32:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8012d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d36:	2200      	movs	r2, #0
 8012d38:	701a      	strb	r2, [r3, #0]
 8012d3a:	2200      	movs	r2, #0
 8012d3c:	705a      	strb	r2, [r3, #1]
 8012d3e:	2200      	movs	r2, #0
 8012d40:	709a      	strb	r2, [r3, #2]
 8012d42:	2200      	movs	r2, #0
 8012d44:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8012d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d48:	8b3a      	ldrh	r2, [r7, #24]
 8012d4a:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 8012d4c:	8b3a      	ldrh	r2, [r7, #24]
 8012d4e:	8b7b      	ldrh	r3, [r7, #26]
 8012d50:	4413      	add	r3, r2
 8012d52:	b29a      	uxth	r2, r3
 8012d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d56:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8012d58:	68fb      	ldr	r3, [r7, #12]
 8012d5a:	685b      	ldr	r3, [r3, #4]
 8012d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8012d5e:	e061      	b.n	8012e24 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8012d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d62:	685b      	ldr	r3, [r3, #4]
 8012d64:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 8012d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d68:	889b      	ldrh	r3, [r3, #4]
 8012d6a:	b29a      	uxth	r2, r3
 8012d6c:	697b      	ldr	r3, [r7, #20]
 8012d6e:	889b      	ldrh	r3, [r3, #4]
 8012d70:	b29b      	uxth	r3, r3
 8012d72:	429a      	cmp	r2, r3
 8012d74:	d232      	bcs.n	8012ddc <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8012d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d7a:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8012d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d01f      	beq.n	8012dc2 <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8012d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d84:	889b      	ldrh	r3, [r3, #4]
 8012d86:	b29a      	uxth	r2, r3
 8012d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d8a:	88db      	ldrh	r3, [r3, #6]
 8012d8c:	b29b      	uxth	r3, r3
 8012d8e:	429a      	cmp	r2, r3
 8012d90:	f0c0 80e3 	bcc.w	8012f5a <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 8012d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d96:	88db      	ldrh	r3, [r3, #6]
 8012d98:	b29a      	uxth	r2, r3
 8012d9a:	697b      	ldr	r3, [r7, #20]
 8012d9c:	889b      	ldrh	r3, [r3, #4]
 8012d9e:	b29b      	uxth	r3, r3
 8012da0:	429a      	cmp	r2, r3
 8012da2:	f200 80da 	bhi.w	8012f5a <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8012da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012da8:	68ba      	ldr	r2, [r7, #8]
 8012daa:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8012dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012dae:	88db      	ldrh	r3, [r3, #6]
 8012db0:	b29a      	uxth	r2, r3
 8012db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012db4:	889b      	ldrh	r3, [r3, #4]
 8012db6:	b29b      	uxth	r3, r3
 8012db8:	429a      	cmp	r2, r3
 8012dba:	d037      	beq.n	8012e2c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012dbc:	2300      	movs	r3, #0
 8012dbe:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8012dc0:	e034      	b.n	8012e2c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 8012dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dc4:	88db      	ldrh	r3, [r3, #6]
 8012dc6:	b29a      	uxth	r2, r3
 8012dc8:	697b      	ldr	r3, [r7, #20]
 8012dca:	889b      	ldrh	r3, [r3, #4]
 8012dcc:	b29b      	uxth	r3, r3
 8012dce:	429a      	cmp	r2, r3
 8012dd0:	f200 80c5 	bhi.w	8012f5e <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	68ba      	ldr	r2, [r7, #8]
 8012dd8:	605a      	str	r2, [r3, #4]
      break;
 8012dda:	e027      	b.n	8012e2c <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 8012ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dde:	889b      	ldrh	r3, [r3, #4]
 8012de0:	b29a      	uxth	r2, r3
 8012de2:	697b      	ldr	r3, [r7, #20]
 8012de4:	889b      	ldrh	r3, [r3, #4]
 8012de6:	b29b      	uxth	r3, r3
 8012de8:	429a      	cmp	r2, r3
 8012dea:	f000 80ba 	beq.w	8012f62 <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8012dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012df0:	889b      	ldrh	r3, [r3, #4]
 8012df2:	b29a      	uxth	r2, r3
 8012df4:	697b      	ldr	r3, [r7, #20]
 8012df6:	88db      	ldrh	r3, [r3, #6]
 8012df8:	b29b      	uxth	r3, r3
 8012dfa:	429a      	cmp	r2, r3
 8012dfc:	f0c0 80b3 	bcc.w	8012f66 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8012e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d009      	beq.n	8012e1a <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 8012e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e08:	88db      	ldrh	r3, [r3, #6]
 8012e0a:	b29a      	uxth	r2, r3
 8012e0c:	697b      	ldr	r3, [r7, #20]
 8012e0e:	889b      	ldrh	r3, [r3, #4]
 8012e10:	b29b      	uxth	r3, r3
 8012e12:	429a      	cmp	r2, r3
 8012e14:	d001      	beq.n	8012e1a <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8012e16:	2300      	movs	r3, #0
 8012e18:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8012e1a:	697b      	ldr	r3, [r7, #20]
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8012e20:	697b      	ldr	r3, [r7, #20]
 8012e22:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8012e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d19a      	bne.n	8012d60 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 8012e2a:	e000      	b.n	8012e2e <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 8012e2c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8012e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d12d      	bne.n	8012e90 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 8012e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d01c      	beq.n	8012e74 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8012e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e3c:	88db      	ldrh	r3, [r3, #6]
 8012e3e:	b29a      	uxth	r2, r3
 8012e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e42:	889b      	ldrh	r3, [r3, #4]
 8012e44:	b29b      	uxth	r3, r3
 8012e46:	429a      	cmp	r2, r3
 8012e48:	d906      	bls.n	8012e58 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 8012e4a:	4b51      	ldr	r3, [pc, #324]	; (8012f90 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8012e4c:	f240 12ab 	movw	r2, #427	; 0x1ab
 8012e50:	4950      	ldr	r1, [pc, #320]	; (8012f94 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8012e52:	4851      	ldr	r0, [pc, #324]	; (8012f98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8012e54:	f005 fa66 	bl	8018324 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8012e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e5a:	68ba      	ldr	r2, [r7, #8]
 8012e5c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8012e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e60:	88db      	ldrh	r3, [r3, #6]
 8012e62:	b29a      	uxth	r2, r3
 8012e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e66:	889b      	ldrh	r3, [r3, #4]
 8012e68:	b29b      	uxth	r3, r3
 8012e6a:	429a      	cmp	r2, r3
 8012e6c:	d010      	beq.n	8012e90 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 8012e6e:	2300      	movs	r3, #0
 8012e70:	623b      	str	r3, [r7, #32]
 8012e72:	e00d      	b.n	8012e90 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	685b      	ldr	r3, [r3, #4]
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d006      	beq.n	8012e8a <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 8012e7c:	4b44      	ldr	r3, [pc, #272]	; (8012f90 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8012e7e:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 8012e82:	4946      	ldr	r1, [pc, #280]	; (8012f9c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8012e84:	4844      	ldr	r0, [pc, #272]	; (8012f98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8012e86:	f005 fa4d 	bl	8018324 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	68ba      	ldr	r2, [r7, #8]
 8012e8e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d105      	bne.n	8012ea2 <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	7f9b      	ldrb	r3, [r3, #30]
 8012e9a:	f003 0301 	and.w	r3, r3, #1
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d059      	beq.n	8012f56 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 8012ea2:	6a3b      	ldr	r3, [r7, #32]
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d04f      	beq.n	8012f48 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	685b      	ldr	r3, [r3, #4]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d006      	beq.n	8012ebe <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	685b      	ldr	r3, [r3, #4]
 8012eb4:	685b      	ldr	r3, [r3, #4]
 8012eb6:	889b      	ldrh	r3, [r3, #4]
 8012eb8:	b29b      	uxth	r3, r3
 8012eba:	2b00      	cmp	r3, #0
 8012ebc:	d002      	beq.n	8012ec4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8012ebe:	2300      	movs	r3, #0
 8012ec0:	623b      	str	r3, [r7, #32]
 8012ec2:	e041      	b.n	8012f48 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8012ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ec6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8012ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012eca:	681b      	ldr	r3, [r3, #0]
 8012ecc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012ece:	e012      	b.n	8012ef6 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 8012ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ed2:	685b      	ldr	r3, [r3, #4]
 8012ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8012ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ed8:	88db      	ldrh	r3, [r3, #6]
 8012eda:	b29a      	uxth	r2, r3
 8012edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ede:	889b      	ldrh	r3, [r3, #4]
 8012ee0:	b29b      	uxth	r3, r3
 8012ee2:	429a      	cmp	r2, r3
 8012ee4:	d002      	beq.n	8012eec <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 8012ee6:	2300      	movs	r3, #0
 8012ee8:	623b      	str	r3, [r7, #32]
            break;
 8012eea:	e007      	b.n	8012efc <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 8012eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012eee:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8012ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8012ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d1e9      	bne.n	8012ed0 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8012efc:	6a3b      	ldr	r3, [r7, #32]
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d022      	beq.n	8012f48 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	685b      	ldr	r3, [r3, #4]
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d106      	bne.n	8012f18 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 8012f0a:	4b21      	ldr	r3, [pc, #132]	; (8012f90 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8012f0c:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8012f10:	4923      	ldr	r1, [pc, #140]	; (8012fa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8012f12:	4821      	ldr	r0, [pc, #132]	; (8012f98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8012f14:	f005 fa06 	bl	8018324 <iprintf>
          LWIP_ASSERT("sanity check",
 8012f18:	68fb      	ldr	r3, [r7, #12]
 8012f1a:	685b      	ldr	r3, [r3, #4]
 8012f1c:	685b      	ldr	r3, [r3, #4]
 8012f1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012f20:	429a      	cmp	r2, r3
 8012f22:	d106      	bne.n	8012f32 <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 8012f24:	4b1a      	ldr	r3, [pc, #104]	; (8012f90 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8012f26:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8012f2a:	491d      	ldr	r1, [pc, #116]	; (8012fa0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8012f2c:	481a      	ldr	r0, [pc, #104]	; (8012f98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8012f2e:	f005 f9f9 	bl	8018324 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8012f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f34:	681b      	ldr	r3, [r3, #0]
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d006      	beq.n	8012f48 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 8012f3a:	4b15      	ldr	r3, [pc, #84]	; (8012f90 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8012f3c:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8012f40:	4918      	ldr	r1, [pc, #96]	; (8012fa4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8012f42:	4815      	ldr	r0, [pc, #84]	; (8012f98 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8012f44:	f005 f9ee 	bl	8018324 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8012f48:	6a3b      	ldr	r3, [r7, #32]
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	bf14      	ite	ne
 8012f4e:	2301      	movne	r3, #1
 8012f50:	2300      	moveq	r3, #0
 8012f52:	b2db      	uxtb	r3, r3
 8012f54:	e018      	b.n	8012f88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8012f56:	2300      	movs	r3, #0
 8012f58:	e016      	b.n	8012f88 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 8012f5a:	bf00      	nop
 8012f5c:	e004      	b.n	8012f68 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 8012f5e:	bf00      	nop
 8012f60:	e002      	b.n	8012f68 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8012f62:	bf00      	nop
 8012f64:	e000      	b.n	8012f68 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8012f66:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8012f68:	68b8      	ldr	r0, [r7, #8]
 8012f6a:	f7f6 fde3 	bl	8009b34 <pbuf_clen>
 8012f6e:	4603      	mov	r3, r0
 8012f70:	461a      	mov	r2, r3
 8012f72:	4b0d      	ldr	r3, [pc, #52]	; (8012fa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8012f74:	881b      	ldrh	r3, [r3, #0]
 8012f76:	1a9b      	subs	r3, r3, r2
 8012f78:	b29a      	uxth	r2, r3
 8012f7a:	4b0b      	ldr	r3, [pc, #44]	; (8012fa8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8012f7c:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 8012f7e:	68b8      	ldr	r0, [r7, #8]
 8012f80:	f7f6 fd3e 	bl	8009a00 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 8012f84:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 8012f88:	4618      	mov	r0, r3
 8012f8a:	3730      	adds	r7, #48	; 0x30
 8012f8c:	46bd      	mov	sp, r7
 8012f8e:	bd80      	pop	{r7, pc}
 8012f90:	0801b820 	.word	0x0801b820
 8012f94:	0801b8fc 	.word	0x0801b8fc
 8012f98:	0801b868 	.word	0x0801b868
 8012f9c:	0801b91c 	.word	0x0801b91c
 8012fa0:	0801b954 	.word	0x0801b954
 8012fa4:	0801b964 	.word	0x0801b964
 8012fa8:	20004be0 	.word	0x20004be0

08012fac <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8012fac:	b580      	push	{r7, lr}
 8012fae:	b08e      	sub	sp, #56	; 0x38
 8012fb0:	af00      	add	r7, sp, #0
 8012fb2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 8012fb4:	687b      	ldr	r3, [r7, #4]
 8012fb6:	685b      	ldr	r3, [r3, #4]
 8012fb8:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8012fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fbc:	781b      	ldrb	r3, [r3, #0]
 8012fbe:	f003 030f 	and.w	r3, r3, #15
 8012fc2:	009b      	lsls	r3, r3, #2
 8012fc4:	2b14      	cmp	r3, #20
 8012fc6:	f040 8131 	bne.w	801322c <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8012fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fcc:	88db      	ldrh	r3, [r3, #6]
 8012fce:	b29b      	uxth	r3, r3
 8012fd0:	4618      	mov	r0, r3
 8012fd2:	f7f5 f853 	bl	800807c <lwip_htons>
 8012fd6:	4603      	mov	r3, r0
 8012fd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012fdc:	b29b      	uxth	r3, r3
 8012fde:	00db      	lsls	r3, r3, #3
 8012fe0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8012fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fe4:	885b      	ldrh	r3, [r3, #2]
 8012fe6:	b29b      	uxth	r3, r3
 8012fe8:	4618      	mov	r0, r3
 8012fea:	f7f5 f847 	bl	800807c <lwip_htons>
 8012fee:	4603      	mov	r3, r0
 8012ff0:	461a      	mov	r2, r3
 8012ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ff4:	781b      	ldrb	r3, [r3, #0]
 8012ff6:	b29b      	uxth	r3, r3
 8012ff8:	f003 030f 	and.w	r3, r3, #15
 8012ffc:	b29b      	uxth	r3, r3
 8012ffe:	009b      	lsls	r3, r3, #2
 8013000:	b29b      	uxth	r3, r3
 8013002:	1ad3      	subs	r3, r2, r3
 8013004:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8013006:	6878      	ldr	r0, [r7, #4]
 8013008:	f7f6 fd94 	bl	8009b34 <pbuf_clen>
 801300c:	4603      	mov	r3, r0
 801300e:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8013010:	4b8d      	ldr	r3, [pc, #564]	; (8013248 <ip4_reass+0x29c>)
 8013012:	881b      	ldrh	r3, [r3, #0]
 8013014:	461a      	mov	r2, r3
 8013016:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013018:	4413      	add	r3, r2
 801301a:	2b0a      	cmp	r3, #10
 801301c:	dd10      	ble.n	8013040 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801301e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013020:	4619      	mov	r1, r3
 8013022:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013024:	f7ff fd8e 	bl	8012b44 <ip_reass_remove_oldest_datagram>
 8013028:	4603      	mov	r3, r0
 801302a:	2b00      	cmp	r3, #0
 801302c:	f000 8100 	beq.w	8013230 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8013030:	4b85      	ldr	r3, [pc, #532]	; (8013248 <ip4_reass+0x29c>)
 8013032:	881b      	ldrh	r3, [r3, #0]
 8013034:	461a      	mov	r2, r3
 8013036:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013038:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801303a:	2b0a      	cmp	r3, #10
 801303c:	f300 80f8 	bgt.w	8013230 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013040:	4b82      	ldr	r3, [pc, #520]	; (801324c <ip4_reass+0x2a0>)
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	633b      	str	r3, [r7, #48]	; 0x30
 8013046:	e015      	b.n	8013074 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8013048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801304a:	695a      	ldr	r2, [r3, #20]
 801304c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801304e:	68db      	ldr	r3, [r3, #12]
 8013050:	429a      	cmp	r2, r3
 8013052:	d10c      	bne.n	801306e <ip4_reass+0xc2>
 8013054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013056:	699a      	ldr	r2, [r3, #24]
 8013058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801305a:	691b      	ldr	r3, [r3, #16]
 801305c:	429a      	cmp	r2, r3
 801305e:	d106      	bne.n	801306e <ip4_reass+0xc2>
 8013060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013062:	899a      	ldrh	r2, [r3, #12]
 8013064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013066:	889b      	ldrh	r3, [r3, #4]
 8013068:	b29b      	uxth	r3, r3
 801306a:	429a      	cmp	r2, r3
 801306c:	d006      	beq.n	801307c <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801306e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	633b      	str	r3, [r7, #48]	; 0x30
 8013074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013076:	2b00      	cmp	r3, #0
 8013078:	d1e6      	bne.n	8013048 <ip4_reass+0x9c>
 801307a:	e000      	b.n	801307e <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801307c:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801307e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013080:	2b00      	cmp	r3, #0
 8013082:	d109      	bne.n	8013098 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8013084:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013086:	4619      	mov	r1, r3
 8013088:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801308a:	f7ff fdbd 	bl	8012c08 <ip_reass_enqueue_new_datagram>
 801308e:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8013090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013092:	2b00      	cmp	r3, #0
 8013094:	d11c      	bne.n	80130d0 <ip4_reass+0x124>
      goto nullreturn;
 8013096:	e0ce      	b.n	8013236 <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801309a:	88db      	ldrh	r3, [r3, #6]
 801309c:	b29b      	uxth	r3, r3
 801309e:	4618      	mov	r0, r3
 80130a0:	f7f4 ffec 	bl	800807c <lwip_htons>
 80130a4:	4603      	mov	r3, r0
 80130a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d110      	bne.n	80130d0 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80130ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130b0:	89db      	ldrh	r3, [r3, #14]
 80130b2:	4618      	mov	r0, r3
 80130b4:	f7f4 ffe2 	bl	800807c <lwip_htons>
 80130b8:	4603      	mov	r3, r0
 80130ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d006      	beq.n	80130d0 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80130c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130c4:	3308      	adds	r3, #8
 80130c6:	2214      	movs	r2, #20
 80130c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80130ca:	4618      	mov	r0, r3
 80130cc:	f005 f917 	bl	80182fe <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80130d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130d2:	88db      	ldrh	r3, [r3, #6]
 80130d4:	b29b      	uxth	r3, r3
 80130d6:	f003 0320 	and.w	r3, r3, #32
 80130da:	2b00      	cmp	r3, #0
 80130dc:	bf0c      	ite	eq
 80130de:	2301      	moveq	r3, #1
 80130e0:	2300      	movne	r3, #0
 80130e2:	b2db      	uxtb	r3, r3
 80130e4:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80130e6:	69fb      	ldr	r3, [r7, #28]
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d00e      	beq.n	801310a <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 80130ec:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80130ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80130f0:	4413      	add	r3, r2
 80130f2:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80130f4:	8b7a      	ldrh	r2, [r7, #26]
 80130f6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80130f8:	429a      	cmp	r2, r3
 80130fa:	f0c0 8099 	bcc.w	8013230 <ip4_reass+0x284>
 80130fe:	8b7b      	ldrh	r3, [r7, #26]
 8013100:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8013104:	4293      	cmp	r3, r2
 8013106:	f200 8093 	bhi.w	8013230 <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801310a:	69fa      	ldr	r2, [r7, #28]
 801310c:	6879      	ldr	r1, [r7, #4]
 801310e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013110:	f7ff fde2 	bl	8012cd8 <ip_reass_chain_frag_into_datagram_and_validate>
 8013114:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8013116:	697b      	ldr	r3, [r7, #20]
 8013118:	f1b3 3fff 	cmp.w	r3, #4294967295
 801311c:	f000 808a 	beq.w	8013234 <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8013120:	4b49      	ldr	r3, [pc, #292]	; (8013248 <ip4_reass+0x29c>)
 8013122:	881a      	ldrh	r2, [r3, #0]
 8013124:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013126:	4413      	add	r3, r2
 8013128:	b29a      	uxth	r2, r3
 801312a:	4b47      	ldr	r3, [pc, #284]	; (8013248 <ip4_reass+0x29c>)
 801312c:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801312e:	69fb      	ldr	r3, [r7, #28]
 8013130:	2b00      	cmp	r3, #0
 8013132:	d00d      	beq.n	8013150 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 8013134:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013136:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013138:	4413      	add	r3, r2
 801313a:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801313c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801313e:	8a7a      	ldrh	r2, [r7, #18]
 8013140:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8013142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013144:	7f9b      	ldrb	r3, [r3, #30]
 8013146:	f043 0301 	orr.w	r3, r3, #1
 801314a:	b2da      	uxtb	r2, r3
 801314c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801314e:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8013150:	697b      	ldr	r3, [r7, #20]
 8013152:	2b01      	cmp	r3, #1
 8013154:	d168      	bne.n	8013228 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 8013156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013158:	8b9b      	ldrh	r3, [r3, #28]
 801315a:	3314      	adds	r3, #20
 801315c:	b29a      	uxth	r2, r3
 801315e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013160:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8013162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013164:	685b      	ldr	r3, [r3, #4]
 8013166:	685b      	ldr	r3, [r3, #4]
 8013168:	681b      	ldr	r3, [r3, #0]
 801316a:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 801316c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801316e:	685b      	ldr	r3, [r3, #4]
 8013170:	685b      	ldr	r3, [r3, #4]
 8013172:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8013174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013176:	3308      	adds	r3, #8
 8013178:	2214      	movs	r2, #20
 801317a:	4619      	mov	r1, r3
 801317c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801317e:	f005 f8be 	bl	80182fe <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8013182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013184:	8b9b      	ldrh	r3, [r3, #28]
 8013186:	4618      	mov	r0, r3
 8013188:	f7f4 ff78 	bl	800807c <lwip_htons>
 801318c:	4603      	mov	r3, r0
 801318e:	461a      	mov	r2, r3
 8013190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013192:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8013194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013196:	2200      	movs	r2, #0
 8013198:	719a      	strb	r2, [r3, #6]
 801319a:	2200      	movs	r2, #0
 801319c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801319e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131a0:	2200      	movs	r2, #0
 80131a2:	729a      	strb	r2, [r3, #10]
 80131a4:	2200      	movs	r2, #0
 80131a6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80131a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131aa:	685b      	ldr	r3, [r3, #4]
 80131ac:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80131ae:	e00e      	b.n	80131ce <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 80131b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131b2:	685b      	ldr	r3, [r3, #4]
 80131b4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 80131b6:	f06f 0113 	mvn.w	r1, #19
 80131ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80131bc:	f7f6 fbfc 	bl	80099b8 <pbuf_header>
      pbuf_cat(p, r);
 80131c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80131c2:	6878      	ldr	r0, [r7, #4]
 80131c4:	f7f6 fcf4 	bl	8009bb0 <pbuf_cat>
      r = iprh->next_pbuf;
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80131ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d1ed      	bne.n	80131b0 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80131d4:	4b1d      	ldr	r3, [pc, #116]	; (801324c <ip4_reass+0x2a0>)
 80131d6:	681b      	ldr	r3, [r3, #0]
 80131d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80131da:	429a      	cmp	r2, r3
 80131dc:	d102      	bne.n	80131e4 <ip4_reass+0x238>
      ipr_prev = NULL;
 80131de:	2300      	movs	r3, #0
 80131e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80131e2:	e010      	b.n	8013206 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80131e4:	4b19      	ldr	r3, [pc, #100]	; (801324c <ip4_reass+0x2a0>)
 80131e6:	681b      	ldr	r3, [r3, #0]
 80131e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80131ea:	e007      	b.n	80131fc <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 80131ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80131f2:	429a      	cmp	r2, r3
 80131f4:	d006      	beq.n	8013204 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80131f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80131fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d1f4      	bne.n	80131ec <ip4_reass+0x240>
 8013202:	e000      	b.n	8013206 <ip4_reass+0x25a>
          break;
 8013204:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8013206:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013208:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801320a:	f7ff fd37 	bl	8012c7c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 801320e:	6878      	ldr	r0, [r7, #4]
 8013210:	f7f6 fc90 	bl	8009b34 <pbuf_clen>
 8013214:	4603      	mov	r3, r0
 8013216:	461a      	mov	r2, r3
 8013218:	4b0b      	ldr	r3, [pc, #44]	; (8013248 <ip4_reass+0x29c>)
 801321a:	881b      	ldrh	r3, [r3, #0]
 801321c:	1a9b      	subs	r3, r3, r2
 801321e:	b29a      	uxth	r2, r3
 8013220:	4b09      	ldr	r3, [pc, #36]	; (8013248 <ip4_reass+0x29c>)
 8013222:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	e00a      	b.n	801323e <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8013228:	2300      	movs	r3, #0
 801322a:	e008      	b.n	801323e <ip4_reass+0x292>
    goto nullreturn;
 801322c:	bf00      	nop
 801322e:	e002      	b.n	8013236 <ip4_reass+0x28a>

nullreturn:
 8013230:	bf00      	nop
 8013232:	e000      	b.n	8013236 <ip4_reass+0x28a>
    goto nullreturn;
 8013234:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8013236:	6878      	ldr	r0, [r7, #4]
 8013238:	f7f6 fbe2 	bl	8009a00 <pbuf_free>
  return NULL;
 801323c:	2300      	movs	r3, #0
}
 801323e:	4618      	mov	r0, r3
 8013240:	3738      	adds	r7, #56	; 0x38
 8013242:	46bd      	mov	sp, r7
 8013244:	bd80      	pop	{r7, pc}
 8013246:	bf00      	nop
 8013248:	20004be0 	.word	0x20004be0
 801324c:	20004bdc 	.word	0x20004bdc

08013250 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 8013250:	b580      	push	{r7, lr}
 8013252:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8013254:	2005      	movs	r0, #5
 8013256:	f7f5 fe0f 	bl	8008e78 <memp_malloc>
 801325a:	4603      	mov	r3, r0
}
 801325c:	4618      	mov	r0, r3
 801325e:	bd80      	pop	{r7, pc}

08013260 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8013260:	b580      	push	{r7, lr}
 8013262:	b082      	sub	sp, #8
 8013264:	af00      	add	r7, sp, #0
 8013266:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	2b00      	cmp	r3, #0
 801326c:	d106      	bne.n	801327c <ip_frag_free_pbuf_custom_ref+0x1c>
 801326e:	4b07      	ldr	r3, [pc, #28]	; (801328c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8013270:	f240 22ae 	movw	r2, #686	; 0x2ae
 8013274:	4906      	ldr	r1, [pc, #24]	; (8013290 <ip_frag_free_pbuf_custom_ref+0x30>)
 8013276:	4807      	ldr	r0, [pc, #28]	; (8013294 <ip_frag_free_pbuf_custom_ref+0x34>)
 8013278:	f005 f854 	bl	8018324 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801327c:	6879      	ldr	r1, [r7, #4]
 801327e:	2005      	movs	r0, #5
 8013280:	f7f5 fe4c 	bl	8008f1c <memp_free>
}
 8013284:	bf00      	nop
 8013286:	3708      	adds	r7, #8
 8013288:	46bd      	mov	sp, r7
 801328a:	bd80      	pop	{r7, pc}
 801328c:	0801b820 	.word	0x0801b820
 8013290:	0801b988 	.word	0x0801b988
 8013294:	0801b868 	.word	0x0801b868

08013298 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8013298:	b580      	push	{r7, lr}
 801329a:	b084      	sub	sp, #16
 801329c:	af00      	add	r7, sp, #0
 801329e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d106      	bne.n	80132b8 <ipfrag_free_pbuf_custom+0x20>
 80132aa:	4b11      	ldr	r3, [pc, #68]	; (80132f0 <ipfrag_free_pbuf_custom+0x58>)
 80132ac:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 80132b0:	4910      	ldr	r1, [pc, #64]	; (80132f4 <ipfrag_free_pbuf_custom+0x5c>)
 80132b2:	4811      	ldr	r0, [pc, #68]	; (80132f8 <ipfrag_free_pbuf_custom+0x60>)
 80132b4:	f005 f836 	bl	8018324 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 80132b8:	68fa      	ldr	r2, [r7, #12]
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	429a      	cmp	r2, r3
 80132be:	d006      	beq.n	80132ce <ipfrag_free_pbuf_custom+0x36>
 80132c0:	4b0b      	ldr	r3, [pc, #44]	; (80132f0 <ipfrag_free_pbuf_custom+0x58>)
 80132c2:	f240 22b9 	movw	r2, #697	; 0x2b9
 80132c6:	490d      	ldr	r1, [pc, #52]	; (80132fc <ipfrag_free_pbuf_custom+0x64>)
 80132c8:	480b      	ldr	r0, [pc, #44]	; (80132f8 <ipfrag_free_pbuf_custom+0x60>)
 80132ca:	f005 f82b 	bl	8018324 <iprintf>
  if (pcr->original != NULL) {
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	69db      	ldr	r3, [r3, #28]
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d004      	beq.n	80132e0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	69db      	ldr	r3, [r3, #28]
 80132da:	4618      	mov	r0, r3
 80132dc:	f7f6 fb90 	bl	8009a00 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80132e0:	68f8      	ldr	r0, [r7, #12]
 80132e2:	f7ff ffbd 	bl	8013260 <ip_frag_free_pbuf_custom_ref>
}
 80132e6:	bf00      	nop
 80132e8:	3710      	adds	r7, #16
 80132ea:	46bd      	mov	sp, r7
 80132ec:	bd80      	pop	{r7, pc}
 80132ee:	bf00      	nop
 80132f0:	0801b820 	.word	0x0801b820
 80132f4:	0801b994 	.word	0x0801b994
 80132f8:	0801b868 	.word	0x0801b868
 80132fc:	0801b9a0 	.word	0x0801b9a0

08013300 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8013300:	b580      	push	{r7, lr}
 8013302:	b092      	sub	sp, #72	; 0x48
 8013304:	af02      	add	r7, sp, #8
 8013306:	60f8      	str	r0, [r7, #12]
 8013308:	60b9      	str	r1, [r7, #8]
 801330a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801330c:	2300      	movs	r3, #0
 801330e:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8013310:	68bb      	ldr	r3, [r7, #8]
 8013312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013314:	3b14      	subs	r3, #20
 8013316:	2b00      	cmp	r3, #0
 8013318:	da00      	bge.n	801331c <ip4_frag+0x1c>
 801331a:	3307      	adds	r3, #7
 801331c:	10db      	asrs	r3, r3, #3
 801331e:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8013320:	2314      	movs	r3, #20
 8013322:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	685b      	ldr	r3, [r3, #4]
 8013328:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 801332a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801332c:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 801332e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013330:	781b      	ldrb	r3, [r3, #0]
 8013332:	f003 030f 	and.w	r3, r3, #15
 8013336:	009b      	lsls	r3, r3, #2
 8013338:	2b14      	cmp	r3, #20
 801333a:	d009      	beq.n	8013350 <ip4_frag+0x50>
 801333c:	4b79      	ldr	r3, [pc, #484]	; (8013524 <ip4_frag+0x224>)
 801333e:	f240 22e1 	movw	r2, #737	; 0x2e1
 8013342:	4979      	ldr	r1, [pc, #484]	; (8013528 <ip4_frag+0x228>)
 8013344:	4879      	ldr	r0, [pc, #484]	; (801352c <ip4_frag+0x22c>)
 8013346:	f004 ffed 	bl	8018324 <iprintf>
 801334a:	f06f 0305 	mvn.w	r3, #5
 801334e:	e0e5      	b.n	801351c <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8013350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013352:	88db      	ldrh	r3, [r3, #6]
 8013354:	b29b      	uxth	r3, r3
 8013356:	4618      	mov	r0, r3
 8013358:	f7f4 fe90 	bl	800807c <lwip_htons>
 801335c:	4603      	mov	r3, r0
 801335e:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 8013360:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013362:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013366:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8013368:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801336a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801336e:	2b00      	cmp	r3, #0
 8013370:	d009      	beq.n	8013386 <ip4_frag+0x86>
 8013372:	4b6c      	ldr	r3, [pc, #432]	; (8013524 <ip4_frag+0x224>)
 8013374:	f240 22e6 	movw	r2, #742	; 0x2e6
 8013378:	496d      	ldr	r1, [pc, #436]	; (8013530 <ip4_frag+0x230>)
 801337a:	486c      	ldr	r0, [pc, #432]	; (801352c <ip4_frag+0x22c>)
 801337c:	f004 ffd2 	bl	8018324 <iprintf>
 8013380:	f06f 0305 	mvn.w	r3, #5
 8013384:	e0ca      	b.n	801351c <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 8013386:	68fb      	ldr	r3, [r7, #12]
 8013388:	891b      	ldrh	r3, [r3, #8]
 801338a:	3b14      	subs	r3, #20
 801338c:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 801338e:	e0bc      	b.n	801350a <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 8013390:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8013392:	00da      	lsls	r2, r3, #3
 8013394:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013396:	4293      	cmp	r3, r2
 8013398:	bfa8      	it	ge
 801339a:	4613      	movge	r3, r2
 801339c:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801339e:	2200      	movs	r2, #0
 80133a0:	2114      	movs	r1, #20
 80133a2:	2002      	movs	r0, #2
 80133a4:	f7f5 ffba 	bl	800931c <pbuf_alloc>
 80133a8:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 80133aa:	6a3b      	ldr	r3, [r7, #32]
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	f000 80b2 	beq.w	8013516 <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80133b2:	68fb      	ldr	r3, [r7, #12]
 80133b4:	895b      	ldrh	r3, [r3, #10]
 80133b6:	2b13      	cmp	r3, #19
 80133b8:	d806      	bhi.n	80133c8 <ip4_frag+0xc8>
 80133ba:	4b5a      	ldr	r3, [pc, #360]	; (8013524 <ip4_frag+0x224>)
 80133bc:	f240 3209 	movw	r2, #777	; 0x309
 80133c0:	495c      	ldr	r1, [pc, #368]	; (8013534 <ip4_frag+0x234>)
 80133c2:	485a      	ldr	r0, [pc, #360]	; (801352c <ip4_frag+0x22c>)
 80133c4:	f004 ffae 	bl	8018324 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80133c8:	6a3b      	ldr	r3, [r7, #32]
 80133ca:	685b      	ldr	r3, [r3, #4]
 80133cc:	2214      	movs	r2, #20
 80133ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80133d0:	4618      	mov	r0, r3
 80133d2:	f004 ff94 	bl	80182fe <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80133d6:	6a3b      	ldr	r3, [r7, #32]
 80133d8:	685b      	ldr	r3, [r3, #4]
 80133da:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 80133dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80133de:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 80133e0:	e04f      	b.n	8013482 <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 80133e2:	68fb      	ldr	r3, [r7, #12]
 80133e4:	895a      	ldrh	r2, [r3, #10]
 80133e6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80133e8:	1ad3      	subs	r3, r2, r3
 80133ea:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80133ec:	8b7a      	ldrh	r2, [r7, #26]
 80133ee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80133f0:	4293      	cmp	r3, r2
 80133f2:	bf28      	it	cs
 80133f4:	4613      	movcs	r3, r2
 80133f6:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80133f8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d105      	bne.n	801340a <ip4_frag+0x10a>
        poff = 0;
 80133fe:	2300      	movs	r3, #0
 8013400:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8013402:	68fb      	ldr	r3, [r7, #12]
 8013404:	681b      	ldr	r3, [r3, #0]
 8013406:	60fb      	str	r3, [r7, #12]
        continue;
 8013408:	e03b      	b.n	8013482 <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801340a:	f7ff ff21 	bl	8013250 <ip_frag_alloc_pbuf_custom_ref>
 801340e:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 8013410:	697b      	ldr	r3, [r7, #20]
 8013412:	2b00      	cmp	r3, #0
 8013414:	d103      	bne.n	801341e <ip4_frag+0x11e>
        pbuf_free(rambuf);
 8013416:	6a38      	ldr	r0, [r7, #32]
 8013418:	f7f6 faf2 	bl	8009a00 <pbuf_free>
        goto memerr;
 801341c:	e07c      	b.n	8013518 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801341e:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013424:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013426:	4413      	add	r3, r2
 8013428:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 801342a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801342c:	9201      	str	r2, [sp, #4]
 801342e:	9300      	str	r3, [sp, #0]
 8013430:	4603      	mov	r3, r0
 8013432:	2202      	movs	r2, #2
 8013434:	2004      	movs	r0, #4
 8013436:	f7f6 f905 	bl	8009644 <pbuf_alloced_custom>
 801343a:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 801343c:	693b      	ldr	r3, [r7, #16]
 801343e:	2b00      	cmp	r3, #0
 8013440:	d106      	bne.n	8013450 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 8013442:	6978      	ldr	r0, [r7, #20]
 8013444:	f7ff ff0c 	bl	8013260 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8013448:	6a38      	ldr	r0, [r7, #32]
 801344a:	f7f6 fad9 	bl	8009a00 <pbuf_free>
        goto memerr;
 801344e:	e063      	b.n	8013518 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 8013450:	68f8      	ldr	r0, [r7, #12]
 8013452:	f7f6 fb85 	bl	8009b60 <pbuf_ref>
      pcr->original = p;
 8013456:	697b      	ldr	r3, [r7, #20]
 8013458:	68fa      	ldr	r2, [r7, #12]
 801345a:	61da      	str	r2, [r3, #28]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801345c:	697b      	ldr	r3, [r7, #20]
 801345e:	4a36      	ldr	r2, [pc, #216]	; (8013538 <ip4_frag+0x238>)
 8013460:	619a      	str	r2, [r3, #24]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8013462:	6939      	ldr	r1, [r7, #16]
 8013464:	6a38      	ldr	r0, [r7, #32]
 8013466:	f7f6 fba3 	bl	8009bb0 <pbuf_cat>
      left_to_copy -= newpbuflen;
 801346a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 801346c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801346e:	1ad3      	subs	r3, r2, r3
 8013470:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 8013472:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013474:	2b00      	cmp	r3, #0
 8013476:	d004      	beq.n	8013482 <ip4_frag+0x182>
        poff = 0;
 8013478:	2300      	movs	r3, #0
 801347a:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8013482:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013484:	2b00      	cmp	r3, #0
 8013486:	d1ac      	bne.n	80133e2 <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 8013488:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801348a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801348c:	4413      	add	r3, r2
 801348e:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8013490:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013492:	68bb      	ldr	r3, [r7, #8]
 8013494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013496:	3b14      	subs	r3, #20
 8013498:	429a      	cmp	r2, r3
 801349a:	bfd4      	ite	le
 801349c:	2301      	movle	r3, #1
 801349e:	2300      	movgt	r3, #0
 80134a0:	b2db      	uxtb	r3, r3
 80134a2:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80134a4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80134a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80134aa:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 80134ac:	69fb      	ldr	r3, [r7, #28]
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d103      	bne.n	80134ba <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 80134b2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80134b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80134b8:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80134ba:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80134bc:	4618      	mov	r0, r3
 80134be:	f7f4 fddd 	bl	800807c <lwip_htons>
 80134c2:	4603      	mov	r3, r0
 80134c4:	461a      	mov	r2, r3
 80134c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134c8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 80134ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80134cc:	3314      	adds	r3, #20
 80134ce:	b29b      	uxth	r3, r3
 80134d0:	4618      	mov	r0, r3
 80134d2:	f7f4 fdd3 	bl	800807c <lwip_htons>
 80134d6:	4603      	mov	r3, r0
 80134d8:	461a      	mov	r2, r3
 80134da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134dc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80134de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134e0:	2200      	movs	r2, #0
 80134e2:	729a      	strb	r2, [r3, #10]
 80134e4:	2200      	movs	r2, #0
 80134e6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80134e8:	68bb      	ldr	r3, [r7, #8]
 80134ea:	695b      	ldr	r3, [r3, #20]
 80134ec:	687a      	ldr	r2, [r7, #4]
 80134ee:	6a39      	ldr	r1, [r7, #32]
 80134f0:	68b8      	ldr	r0, [r7, #8]
 80134f2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80134f4:	6a38      	ldr	r0, [r7, #32]
 80134f6:	f7f6 fa83 	bl	8009a00 <pbuf_free>
    left -= fragsize;
 80134fa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80134fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80134fe:	1ad3      	subs	r3, r2, r3
 8013500:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 8013502:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8013504:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8013506:	4413      	add	r3, r2
 8013508:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 801350a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801350c:	2b00      	cmp	r3, #0
 801350e:	f47f af3f 	bne.w	8013390 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8013512:	2300      	movs	r3, #0
 8013514:	e002      	b.n	801351c <ip4_frag+0x21c>
      goto memerr;
 8013516:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8013518:	f04f 33ff 	mov.w	r3, #4294967295
}
 801351c:	4618      	mov	r0, r3
 801351e:	3740      	adds	r7, #64	; 0x40
 8013520:	46bd      	mov	sp, r7
 8013522:	bd80      	pop	{r7, pc}
 8013524:	0801b820 	.word	0x0801b820
 8013528:	0801b9ac 	.word	0x0801b9ac
 801352c:	0801b868 	.word	0x0801b868
 8013530:	0801b9d4 	.word	0x0801b9d4
 8013534:	0801b9f0 	.word	0x0801b9f0
 8013538:	08013299 	.word	0x08013299

0801353c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801353c:	b580      	push	{r7, lr}
 801353e:	b086      	sub	sp, #24
 8013540:	af00      	add	r7, sp, #0
 8013542:	6078      	str	r0, [r7, #4]
 8013544:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 8013546:	230e      	movs	r3, #14
 8013548:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	895b      	ldrh	r3, [r3, #10]
 801354e:	2b0e      	cmp	r3, #14
 8013550:	d977      	bls.n	8013642 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	685b      	ldr	r3, [r3, #4]
 8013556:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8013558:	693b      	ldr	r3, [r7, #16]
 801355a:	7b1a      	ldrb	r2, [r3, #12]
 801355c:	7b5b      	ldrb	r3, [r3, #13]
 801355e:	021b      	lsls	r3, r3, #8
 8013560:	4313      	orrs	r3, r2
 8013562:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8013564:	693b      	ldr	r3, [r7, #16]
 8013566:	781b      	ldrb	r3, [r3, #0]
 8013568:	f003 0301 	and.w	r3, r3, #1
 801356c:	2b00      	cmp	r3, #0
 801356e:	d023      	beq.n	80135b8 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8013570:	693b      	ldr	r3, [r7, #16]
 8013572:	781b      	ldrb	r3, [r3, #0]
 8013574:	2b01      	cmp	r3, #1
 8013576:	d10f      	bne.n	8013598 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013578:	693b      	ldr	r3, [r7, #16]
 801357a:	785b      	ldrb	r3, [r3, #1]
 801357c:	2b00      	cmp	r3, #0
 801357e:	d11b      	bne.n	80135b8 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8013580:	693b      	ldr	r3, [r7, #16]
 8013582:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013584:	2b5e      	cmp	r3, #94	; 0x5e
 8013586:	d117      	bne.n	80135b8 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	7b5b      	ldrb	r3, [r3, #13]
 801358c:	f043 0310 	orr.w	r3, r3, #16
 8013590:	b2da      	uxtb	r2, r3
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	735a      	strb	r2, [r3, #13]
 8013596:	e00f      	b.n	80135b8 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8013598:	693b      	ldr	r3, [r7, #16]
 801359a:	2206      	movs	r2, #6
 801359c:	4930      	ldr	r1, [pc, #192]	; (8013660 <ethernet_input+0x124>)
 801359e:	4618      	mov	r0, r3
 80135a0:	f004 fe9e 	bl	80182e0 <memcmp>
 80135a4:	4603      	mov	r3, r0
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d106      	bne.n	80135b8 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	7b5b      	ldrb	r3, [r3, #13]
 80135ae:	f043 0308 	orr.w	r3, r3, #8
 80135b2:	b2da      	uxtb	r2, r3
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80135b8:	89fb      	ldrh	r3, [r7, #14]
 80135ba:	2b08      	cmp	r3, #8
 80135bc:	d003      	beq.n	80135c6 <ethernet_input+0x8a>
 80135be:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80135c2:	d01e      	beq.n	8013602 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80135c4:	e044      	b.n	8013650 <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80135c6:	683b      	ldr	r3, [r7, #0]
 80135c8:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80135cc:	f003 0308 	and.w	r3, r3, #8
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d038      	beq.n	8013646 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	895b      	ldrh	r3, [r3, #10]
 80135d8:	461a      	mov	r2, r3
 80135da:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80135de:	429a      	cmp	r2, r3
 80135e0:	db33      	blt.n	801364a <ethernet_input+0x10e>
 80135e2:	8afb      	ldrh	r3, [r7, #22]
 80135e4:	425b      	negs	r3, r3
 80135e6:	b29b      	uxth	r3, r3
 80135e8:	b21b      	sxth	r3, r3
 80135ea:	4619      	mov	r1, r3
 80135ec:	6878      	ldr	r0, [r7, #4]
 80135ee:	f7f6 f9e3 	bl	80099b8 <pbuf_header>
 80135f2:	4603      	mov	r3, r0
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d128      	bne.n	801364a <ethernet_input+0x10e>
        ip4_input(p, netif);
 80135f8:	6839      	ldr	r1, [r7, #0]
 80135fa:	6878      	ldr	r0, [r7, #4]
 80135fc:	f7fe fd64 	bl	80120c8 <ip4_input>
      break;
 8013600:	e01d      	b.n	801363e <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013602:	683b      	ldr	r3, [r7, #0]
 8013604:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8013608:	f003 0308 	and.w	r3, r3, #8
 801360c:	2b00      	cmp	r3, #0
 801360e:	d01e      	beq.n	801364e <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	895b      	ldrh	r3, [r3, #10]
 8013614:	461a      	mov	r2, r3
 8013616:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801361a:	429a      	cmp	r2, r3
 801361c:	db15      	blt.n	801364a <ethernet_input+0x10e>
 801361e:	8afb      	ldrh	r3, [r7, #22]
 8013620:	425b      	negs	r3, r3
 8013622:	b29b      	uxth	r3, r3
 8013624:	b21b      	sxth	r3, r3
 8013626:	4619      	mov	r1, r3
 8013628:	6878      	ldr	r0, [r7, #4]
 801362a:	f7f6 f9c5 	bl	80099b8 <pbuf_header>
 801362e:	4603      	mov	r3, r0
 8013630:	2b00      	cmp	r3, #0
 8013632:	d10a      	bne.n	801364a <ethernet_input+0x10e>
        etharp_input(p, netif);
 8013634:	6839      	ldr	r1, [r7, #0]
 8013636:	6878      	ldr	r0, [r7, #4]
 8013638:	f7fd fa9a 	bl	8010b70 <etharp_input>
      break;
 801363c:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801363e:	2300      	movs	r3, #0
 8013640:	e00a      	b.n	8013658 <ethernet_input+0x11c>
    goto free_and_return;
 8013642:	bf00      	nop
 8013644:	e004      	b.n	8013650 <ethernet_input+0x114>
        goto free_and_return;
 8013646:	bf00      	nop
 8013648:	e002      	b.n	8013650 <ethernet_input+0x114>

free_and_return:
 801364a:	bf00      	nop
 801364c:	e000      	b.n	8013650 <ethernet_input+0x114>
        goto free_and_return;
 801364e:	bf00      	nop
  pbuf_free(p);
 8013650:	6878      	ldr	r0, [r7, #4]
 8013652:	f7f6 f9d5 	bl	8009a00 <pbuf_free>
  return ERR_OK;
 8013656:	2300      	movs	r3, #0
}
 8013658:	4618      	mov	r0, r3
 801365a:	3718      	adds	r7, #24
 801365c:	46bd      	mov	sp, r7
 801365e:	bd80      	pop	{r7, pc}
 8013660:	0801c8e8 	.word	0x0801c8e8

08013664 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 8013664:	b580      	push	{r7, lr}
 8013666:	b086      	sub	sp, #24
 8013668:	af00      	add	r7, sp, #0
 801366a:	60f8      	str	r0, [r7, #12]
 801366c:	60b9      	str	r1, [r7, #8]
 801366e:	607a      	str	r2, [r7, #4]
 8013670:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8013672:	8c3b      	ldrh	r3, [r7, #32]
 8013674:	4618      	mov	r0, r3
 8013676:	f7f4 fd01 	bl	800807c <lwip_htons>
 801367a:	4603      	mov	r3, r0
 801367c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 801367e:	210e      	movs	r1, #14
 8013680:	68b8      	ldr	r0, [r7, #8]
 8013682:	f7f6 f999 	bl	80099b8 <pbuf_header>
 8013686:	4603      	mov	r3, r0
 8013688:	2b00      	cmp	r3, #0
 801368a:	d125      	bne.n	80136d8 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 801368c:	68bb      	ldr	r3, [r7, #8]
 801368e:	685b      	ldr	r3, [r3, #4]
 8013690:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8013692:	693b      	ldr	r3, [r7, #16]
 8013694:	8afa      	ldrh	r2, [r7, #22]
 8013696:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8013698:	693b      	ldr	r3, [r7, #16]
 801369a:	2206      	movs	r2, #6
 801369c:	6839      	ldr	r1, [r7, #0]
 801369e:	4618      	mov	r0, r3
 80136a0:	f004 fe2d 	bl	80182fe <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 80136a4:	693b      	ldr	r3, [r7, #16]
 80136a6:	3306      	adds	r3, #6
 80136a8:	2206      	movs	r2, #6
 80136aa:	6879      	ldr	r1, [r7, #4]
 80136ac:	4618      	mov	r0, r3
 80136ae:	f004 fe26 	bl	80182fe <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80136b8:	2b06      	cmp	r3, #6
 80136ba:	d006      	beq.n	80136ca <ethernet_output+0x66>
 80136bc:	4b0a      	ldr	r3, [pc, #40]	; (80136e8 <ethernet_output+0x84>)
 80136be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80136c2:	490a      	ldr	r1, [pc, #40]	; (80136ec <ethernet_output+0x88>)
 80136c4:	480a      	ldr	r0, [pc, #40]	; (80136f0 <ethernet_output+0x8c>)
 80136c6:	f004 fe2d 	bl	8018324 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80136ca:	68fb      	ldr	r3, [r7, #12]
 80136cc:	699b      	ldr	r3, [r3, #24]
 80136ce:	68b9      	ldr	r1, [r7, #8]
 80136d0:	68f8      	ldr	r0, [r7, #12]
 80136d2:	4798      	blx	r3
 80136d4:	4603      	mov	r3, r0
 80136d6:	e002      	b.n	80136de <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80136d8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80136da:	f06f 0301 	mvn.w	r3, #1
}
 80136de:	4618      	mov	r0, r3
 80136e0:	3718      	adds	r7, #24
 80136e2:	46bd      	mov	sp, r7
 80136e4:	bd80      	pop	{r7, pc}
 80136e6:	bf00      	nop
 80136e8:	0801ba10 	.word	0x0801ba10
 80136ec:	0801ba48 	.word	0x0801ba48
 80136f0:	0801ba7c 	.word	0x0801ba7c

080136f4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80136f4:	b580      	push	{r7, lr}
 80136f6:	b086      	sub	sp, #24
 80136f8:	af00      	add	r7, sp, #0
 80136fa:	6078      	str	r0, [r7, #4]
 80136fc:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80136fe:	683b      	ldr	r3, [r7, #0]
 8013700:	60bb      	str	r3, [r7, #8]
 8013702:	2304      	movs	r3, #4
 8013704:	60fb      	str	r3, [r7, #12]
 8013706:	2300      	movs	r3, #0
 8013708:	613b      	str	r3, [r7, #16]
 801370a:	2300      	movs	r3, #0
 801370c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801370e:	f107 0308 	add.w	r3, r7, #8
 8013712:	2100      	movs	r1, #0
 8013714:	4618      	mov	r0, r3
 8013716:	f7f1 faa9 	bl	8004c6c <osMessageCreate>
 801371a:	4602      	mov	r2, r0
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	681b      	ldr	r3, [r3, #0]
 8013724:	2b00      	cmp	r3, #0
 8013726:	d102      	bne.n	801372e <sys_mbox_new+0x3a>
    return ERR_MEM;
 8013728:	f04f 33ff 	mov.w	r3, #4294967295
 801372c:	e000      	b.n	8013730 <sys_mbox_new+0x3c>

  return ERR_OK;
 801372e:	2300      	movs	r3, #0
}
 8013730:	4618      	mov	r0, r3
 8013732:	3718      	adds	r7, #24
 8013734:	46bd      	mov	sp, r7
 8013736:	bd80      	pop	{r7, pc}

08013738 <sys_mbox_post>:
}

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 8013738:	b580      	push	{r7, lr}
 801373a:	b082      	sub	sp, #8
 801373c:	af00      	add	r7, sp, #0
 801373e:	6078      	str	r0, [r7, #4]
 8013740:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 8013742:	bf00      	nop
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	6839      	ldr	r1, [r7, #0]
 801374a:	f04f 32ff 	mov.w	r2, #4294967295
 801374e:	4618      	mov	r0, r3
 8013750:	f7f1 fab6 	bl	8004cc0 <osMessagePut>
 8013754:	4603      	mov	r3, r0
 8013756:	2b00      	cmp	r3, #0
 8013758:	d1f4      	bne.n	8013744 <sys_mbox_post+0xc>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 801375a:	bf00      	nop
 801375c:	3708      	adds	r7, #8
 801375e:	46bd      	mov	sp, r7
 8013760:	bd80      	pop	{r7, pc}

08013762 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8013762:	b580      	push	{r7, lr}
 8013764:	b084      	sub	sp, #16
 8013766:	af00      	add	r7, sp, #0
 8013768:	6078      	str	r0, [r7, #4]
 801376a:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	681b      	ldr	r3, [r3, #0]
 8013770:	6839      	ldr	r1, [r7, #0]
 8013772:	2200      	movs	r2, #0
 8013774:	4618      	mov	r0, r3
 8013776:	f7f1 faa3 	bl	8004cc0 <osMessagePut>
 801377a:	4603      	mov	r3, r0
 801377c:	2b00      	cmp	r3, #0
 801377e:	d102      	bne.n	8013786 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8013780:	2300      	movs	r3, #0
 8013782:	73fb      	strb	r3, [r7, #15]
 8013784:	e001      	b.n	801378a <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8013786:	23ff      	movs	r3, #255	; 0xff
 8013788:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801378a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801378e:	4618      	mov	r0, r3
 8013790:	3710      	adds	r7, #16
 8013792:	46bd      	mov	sp, r7
 8013794:	bd80      	pop	{r7, pc}

08013796 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8013796:	b580      	push	{r7, lr}
 8013798:	b08c      	sub	sp, #48	; 0x30
 801379a:	af00      	add	r7, sp, #0
 801379c:	61f8      	str	r0, [r7, #28]
 801379e:	61b9      	str	r1, [r7, #24]
 80137a0:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80137a2:	f7f0 ffe8 	bl	8004776 <osKernelSysTick>
 80137a6:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80137a8:	697b      	ldr	r3, [r7, #20]
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d017      	beq.n	80137de <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80137ae:	69fb      	ldr	r3, [r7, #28]
 80137b0:	6819      	ldr	r1, [r3, #0]
 80137b2:	f107 0320 	add.w	r3, r7, #32
 80137b6:	697a      	ldr	r2, [r7, #20]
 80137b8:	4618      	mov	r0, r3
 80137ba:	f7f1 fac1 	bl	8004d40 <osMessageGet>

    if(event.status == osEventMessage)
 80137be:	6a3b      	ldr	r3, [r7, #32]
 80137c0:	2b10      	cmp	r3, #16
 80137c2:	d109      	bne.n	80137d8 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 80137c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137c6:	461a      	mov	r2, r3
 80137c8:	69bb      	ldr	r3, [r7, #24]
 80137ca:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80137cc:	f7f0 ffd3 	bl	8004776 <osKernelSysTick>
 80137d0:	4602      	mov	r2, r0
 80137d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137d4:	1ad3      	subs	r3, r2, r3
 80137d6:	e019      	b.n	801380c <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80137d8:	f04f 33ff 	mov.w	r3, #4294967295
 80137dc:	e016      	b.n	801380c <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 80137de:	69fb      	ldr	r3, [r7, #28]
 80137e0:	6819      	ldr	r1, [r3, #0]
 80137e2:	463b      	mov	r3, r7
 80137e4:	f04f 32ff 	mov.w	r2, #4294967295
 80137e8:	4618      	mov	r0, r3
 80137ea:	f7f1 faa9 	bl	8004d40 <osMessageGet>
 80137ee:	f107 0320 	add.w	r3, r7, #32
 80137f2:	463a      	mov	r2, r7
 80137f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80137f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80137fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137fc:	461a      	mov	r2, r3
 80137fe:	69bb      	ldr	r3, [r7, #24]
 8013800:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8013802:	f7f0 ffb8 	bl	8004776 <osKernelSysTick>
 8013806:	4602      	mov	r2, r0
 8013808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801380a:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801380c:	4618      	mov	r0, r3
 801380e:	3730      	adds	r7, #48	; 0x30
 8013810:	46bd      	mov	sp, r7
 8013812:	bd80      	pop	{r7, pc}

08013814 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8013814:	b480      	push	{r7}
 8013816:	b083      	sub	sp, #12
 8013818:	af00      	add	r7, sp, #0
 801381a:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	2b00      	cmp	r3, #0
 8013822:	d101      	bne.n	8013828 <sys_mbox_valid+0x14>
    return 0;
 8013824:	2300      	movs	r3, #0
 8013826:	e000      	b.n	801382a <sys_mbox_valid+0x16>
  else
    return 1;
 8013828:	2301      	movs	r3, #1
}
 801382a:	4618      	mov	r0, r3
 801382c:	370c      	adds	r7, #12
 801382e:	46bd      	mov	sp, r7
 8013830:	bc80      	pop	{r7}
 8013832:	4770      	bx	lr

08013834 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8013834:	b580      	push	{r7, lr}
 8013836:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8013838:	4803      	ldr	r0, [pc, #12]	; (8013848 <sys_init+0x14>)
 801383a:	f7f1 f8c3 	bl	80049c4 <osMutexCreate>
 801383e:	4602      	mov	r2, r0
 8013840:	4b02      	ldr	r3, [pc, #8]	; (801384c <sys_init+0x18>)
 8013842:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8013844:	bf00      	nop
 8013846:	bd80      	pop	{r7, pc}
 8013848:	0801c8f8 	.word	0x0801c8f8
 801384c:	2000b8e4 	.word	0x2000b8e4

08013850 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8013850:	b580      	push	{r7, lr}
 8013852:	b084      	sub	sp, #16
 8013854:	af00      	add	r7, sp, #0
 8013856:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8013858:	2300      	movs	r3, #0
 801385a:	60bb      	str	r3, [r7, #8]
 801385c:	2300      	movs	r3, #0
 801385e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8013860:	f107 0308 	add.w	r3, r7, #8
 8013864:	4618      	mov	r0, r3
 8013866:	f7f1 f8ad 	bl	80049c4 <osMutexCreate>
 801386a:	4602      	mov	r2, r0
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	2b00      	cmp	r3, #0
 8013876:	d102      	bne.n	801387e <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8013878:	f04f 33ff 	mov.w	r3, #4294967295
 801387c:	e000      	b.n	8013880 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801387e:	2300      	movs	r3, #0
}
 8013880:	4618      	mov	r0, r3
 8013882:	3710      	adds	r7, #16
 8013884:	46bd      	mov	sp, r7
 8013886:	bd80      	pop	{r7, pc}

08013888 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8013888:	b580      	push	{r7, lr}
 801388a:	b082      	sub	sp, #8
 801388c:	af00      	add	r7, sp, #0
 801388e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	681b      	ldr	r3, [r3, #0]
 8013894:	f04f 31ff 	mov.w	r1, #4294967295
 8013898:	4618      	mov	r0, r3
 801389a:	f7f1 f8ab 	bl	80049f4 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801389e:	bf00      	nop
 80138a0:	3708      	adds	r7, #8
 80138a2:	46bd      	mov	sp, r7
 80138a4:	bd80      	pop	{r7, pc}

080138a6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80138a6:	b580      	push	{r7, lr}
 80138a8:	b082      	sub	sp, #8
 80138aa:	af00      	add	r7, sp, #0
 80138ac:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	681b      	ldr	r3, [r3, #0]
 80138b2:	4618      	mov	r0, r3
 80138b4:	f7f1 f8ec 	bl	8004a90 <osMutexRelease>
}
 80138b8:	bf00      	nop
 80138ba:	3708      	adds	r7, #8
 80138bc:	46bd      	mov	sp, r7
 80138be:	bd80      	pop	{r7, pc}

080138c0 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80138c0:	b580      	push	{r7, lr}
 80138c2:	b08c      	sub	sp, #48	; 0x30
 80138c4:	af00      	add	r7, sp, #0
 80138c6:	60f8      	str	r0, [r7, #12]
 80138c8:	60b9      	str	r1, [r7, #8]
 80138ca:	607a      	str	r2, [r7, #4]
 80138cc:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80138ce:	f107 0314 	add.w	r3, r7, #20
 80138d2:	2200      	movs	r2, #0
 80138d4:	601a      	str	r2, [r3, #0]
 80138d6:	605a      	str	r2, [r3, #4]
 80138d8:	609a      	str	r2, [r3, #8]
 80138da:	60da      	str	r2, [r3, #12]
 80138dc:	611a      	str	r2, [r3, #16]
 80138de:	615a      	str	r2, [r3, #20]
 80138e0:	619a      	str	r2, [r3, #24]
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	617b      	str	r3, [r7, #20]
 80138e6:	68bb      	ldr	r3, [r7, #8]
 80138e8:	61bb      	str	r3, [r7, #24]
 80138ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138ec:	b21b      	sxth	r3, r3
 80138ee:	83bb      	strh	r3, [r7, #28]
 80138f0:	683b      	ldr	r3, [r7, #0]
 80138f2:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 80138f4:	f107 0314 	add.w	r3, r7, #20
 80138f8:	6879      	ldr	r1, [r7, #4]
 80138fa:	4618      	mov	r0, r3
 80138fc:	f7f0 ff4b 	bl	8004796 <osThreadCreate>
 8013900:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8013902:	4618      	mov	r0, r3
 8013904:	3730      	adds	r7, #48	; 0x30
 8013906:	46bd      	mov	sp, r7
 8013908:	bd80      	pop	{r7, pc}
	...

0801390c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801390c:	b580      	push	{r7, lr}
 801390e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8013910:	4b04      	ldr	r3, [pc, #16]	; (8013924 <sys_arch_protect+0x18>)
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	f04f 31ff 	mov.w	r1, #4294967295
 8013918:	4618      	mov	r0, r3
 801391a:	f7f1 f86b 	bl	80049f4 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801391e:	2301      	movs	r3, #1
}
 8013920:	4618      	mov	r0, r3
 8013922:	bd80      	pop	{r7, pc}
 8013924:	2000b8e4 	.word	0x2000b8e4

08013928 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8013928:	b580      	push	{r7, lr}
 801392a:	b082      	sub	sp, #8
 801392c:	af00      	add	r7, sp, #0
 801392e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8013930:	4b04      	ldr	r3, [pc, #16]	; (8013944 <sys_arch_unprotect+0x1c>)
 8013932:	681b      	ldr	r3, [r3, #0]
 8013934:	4618      	mov	r0, r3
 8013936:	f7f1 f8ab 	bl	8004a90 <osMutexRelease>
}
 801393a:	bf00      	nop
 801393c:	3708      	adds	r7, #8
 801393e:	46bd      	mov	sp, r7
 8013940:	bd80      	pop	{r7, pc}
 8013942:	bf00      	nop
 8013944:	2000b8e4 	.word	0x2000b8e4

08013948 <scaledNanosecondsToInternalTime>:
/* arith.c */

#include "ptpd.h"

void scaledNanosecondsToInternalTime(const int64_t *scaledNanoseconds, TimeInternal *internal)
{
 8013948:	b590      	push	{r4, r7, lr}
 801394a:	b087      	sub	sp, #28
 801394c:	af00      	add	r7, sp, #0
 801394e:	6078      	str	r0, [r7, #4]
 8013950:	6039      	str	r1, [r7, #0]
	int sign;
	int64_t nanoseconds = *scaledNanoseconds;
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	cb18      	ldmia	r3, {r3, r4}
 8013956:	e9c7 3402 	strd	r3, r4, [r7, #8]

	/* Determine sign of result big integer number */
	if (nanoseconds < 0)
 801395a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801395e:	2b00      	cmp	r3, #0
 8013960:	f174 0300 	sbcs.w	r3, r4, #0
 8013964:	da0a      	bge.n	801397c <scaledNanosecondsToInternalTime+0x34>
	{
		nanoseconds = -nanoseconds;
 8013966:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 801396a:	425b      	negs	r3, r3
 801396c:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
 8013970:	e9c7 3402 	strd	r3, r4, [r7, #8]
		sign = -1;
 8013974:	f04f 33ff 	mov.w	r3, #4294967295
 8013978:	617b      	str	r3, [r7, #20]
 801397a:	e001      	b.n	8013980 <scaledNanosecondsToInternalTime+0x38>
	}
	else
	{
		sign = 1;
 801397c:	2301      	movs	r3, #1
 801397e:	617b      	str	r3, [r7, #20]
	}

	/* fractional nanoseconds are excluded (see 5.3.2) */
	nanoseconds >>= 16;
 8013980:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8013984:	f04f 0300 	mov.w	r3, #0
 8013988:	f04f 0400 	mov.w	r4, #0
 801398c:	0c0b      	lsrs	r3, r1, #16
 801398e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013992:	1414      	asrs	r4, r2, #16
 8013994:	e9c7 3402 	strd	r3, r4, [r7, #8]
	internal->seconds = sign * (nanoseconds / 1000000000);
 8013998:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801399c:	a310      	add	r3, pc, #64	; (adr r3, 80139e0 <scaledNanosecondsToInternalTime+0x98>)
 801399e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139a2:	f7ec ff17 	bl	80007d4 <__aeabi_ldivmod>
 80139a6:	4603      	mov	r3, r0
 80139a8:	460c      	mov	r4, r1
 80139aa:	461a      	mov	r2, r3
 80139ac:	697b      	ldr	r3, [r7, #20]
 80139ae:	fb03 f302 	mul.w	r3, r3, r2
 80139b2:	461a      	mov	r2, r3
 80139b4:	683b      	ldr	r3, [r7, #0]
 80139b6:	601a      	str	r2, [r3, #0]
	internal->nanoseconds = sign * (nanoseconds % 1000000000);
 80139b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80139bc:	a308      	add	r3, pc, #32	; (adr r3, 80139e0 <scaledNanosecondsToInternalTime+0x98>)
 80139be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139c2:	f7ec ff07 	bl	80007d4 <__aeabi_ldivmod>
 80139c6:	461c      	mov	r4, r3
 80139c8:	4613      	mov	r3, r2
 80139ca:	461a      	mov	r2, r3
 80139cc:	697b      	ldr	r3, [r7, #20]
 80139ce:	fb03 f302 	mul.w	r3, r3, r2
 80139d2:	461a      	mov	r2, r3
 80139d4:	683b      	ldr	r3, [r7, #0]
 80139d6:	605a      	str	r2, [r3, #4]
}
 80139d8:	bf00      	nop
 80139da:	371c      	adds	r7, #28
 80139dc:	46bd      	mov	sp, r7
 80139de:	bd90      	pop	{r4, r7, pc}
 80139e0:	3b9aca00 	.word	0x3b9aca00
 80139e4:	00000000 	.word	0x00000000

080139e8 <fromInternalTime>:

void fromInternalTime(const TimeInternal *internal, Timestamp *external)
{
 80139e8:	b580      	push	{r7, lr}
 80139ea:	b084      	sub	sp, #16
 80139ec:	af00      	add	r7, sp, #0
 80139ee:	6078      	str	r0, [r7, #4]
 80139f0:	6039      	str	r1, [r7, #0]
	/* fromInternalTime is only used to convert time given by the system to a timestamp
	 * As a consequence, no negative value can normally be found in (internal)
	 * Note that offsets are also represented with TimeInternal structure, and can be negative,
	 * but offset are never convert into Timestamp so there is no problem here.*/
	if ((internal->seconds & ~INT_MAX) || (internal->nanoseconds & ~INT_MAX))
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	db03      	blt.n	8013a02 <fromInternalTime+0x1a>
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	685b      	ldr	r3, [r3, #4]
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	da0e      	bge.n	8013a20 <fromInternalTime+0x38>
	{
		DBG("Negative value canno't be converted into timestamp \n");
 8013a02:	f107 0308 	add.w	r3, r7, #8
 8013a06:	4618      	mov	r0, r3
 8013a08:	f004 fb12 	bl	8018030 <getTime>
 8013a0c:	68bb      	ldr	r3, [r7, #8]
 8013a0e:	68fa      	ldr	r2, [r7, #12]
 8013a10:	4619      	mov	r1, r3
 8013a12:	480b      	ldr	r0, [pc, #44]	; (8013a40 <fromInternalTime+0x58>)
 8013a14:	f004 fc86 	bl	8018324 <iprintf>
 8013a18:	480a      	ldr	r0, [pc, #40]	; (8013a44 <fromInternalTime+0x5c>)
 8013a1a:	f004 fcf7 	bl	801840c <puts>
		return;
 8013a1e:	e00c      	b.n	8013a3a <fromInternalTime+0x52>
	}
	else
	{
		external->secondsField.lsb = internal->seconds;
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	681b      	ldr	r3, [r3, #0]
 8013a24:	461a      	mov	r2, r3
 8013a26:	683b      	ldr	r3, [r7, #0]
 8013a28:	601a      	str	r2, [r3, #0]
		external->nanosecondsField = internal->nanoseconds;
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	685b      	ldr	r3, [r3, #4]
 8013a2e:	461a      	mov	r2, r3
 8013a30:	683b      	ldr	r3, [r7, #0]
 8013a32:	609a      	str	r2, [r3, #8]
		external->secondsField.msb = 0;
 8013a34:	683b      	ldr	r3, [r7, #0]
 8013a36:	2200      	movs	r2, #0
 8013a38:	809a      	strh	r2, [r3, #4]
	}
}
 8013a3a:	3710      	adds	r7, #16
 8013a3c:	46bd      	mov	sp, r7
 8013a3e:	bd80      	pop	{r7, pc}
 8013a40:	0801baa4 	.word	0x0801baa4
 8013a44:	0801bab4 	.word	0x0801bab4

08013a48 <toInternalTime>:

void toInternalTime(TimeInternal *internal, const Timestamp *external)
{
 8013a48:	b580      	push	{r7, lr}
 8013a4a:	b084      	sub	sp, #16
 8013a4c:	af00      	add	r7, sp, #0
 8013a4e:	6078      	str	r0, [r7, #4]
 8013a50:	6039      	str	r1, [r7, #0]
	/* Program will not run after 2038... */
	if (external->secondsField.lsb < INT_MAX)
 8013a52:	683b      	ldr	r3, [r7, #0]
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	4a10      	ldr	r2, [pc, #64]	; (8013a98 <toInternalTime+0x50>)
 8013a58:	4293      	cmp	r3, r2
 8013a5a:	d80a      	bhi.n	8013a72 <toInternalTime+0x2a>
	{
		internal->seconds = external->secondsField.lsb;
 8013a5c:	683b      	ldr	r3, [r7, #0]
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	461a      	mov	r2, r3
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	601a      	str	r2, [r3, #0]
		internal->nanoseconds = external->nanosecondsField;
 8013a66:	683b      	ldr	r3, [r7, #0]
 8013a68:	689b      	ldr	r3, [r3, #8]
 8013a6a:	461a      	mov	r2, r3
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	605a      	str	r2, [r3, #4]
 8013a70:	e00e      	b.n	8013a90 <toInternalTime+0x48>
	}
	else
	{
		DBG("Clock servo canno't be executed : seconds field is higher than signed integer (32bits)\n");
 8013a72:	f107 0308 	add.w	r3, r7, #8
 8013a76:	4618      	mov	r0, r3
 8013a78:	f004 fada 	bl	8018030 <getTime>
 8013a7c:	68bb      	ldr	r3, [r7, #8]
 8013a7e:	68fa      	ldr	r2, [r7, #12]
 8013a80:	4619      	mov	r1, r3
 8013a82:	4806      	ldr	r0, [pc, #24]	; (8013a9c <toInternalTime+0x54>)
 8013a84:	f004 fc4e 	bl	8018324 <iprintf>
 8013a88:	4805      	ldr	r0, [pc, #20]	; (8013aa0 <toInternalTime+0x58>)
 8013a8a:	f004 fcbf 	bl	801840c <puts>
		return;
 8013a8e:	bf00      	nop
	}
}
 8013a90:	3710      	adds	r7, #16
 8013a92:	46bd      	mov	sp, r7
 8013a94:	bd80      	pop	{r7, pc}
 8013a96:	bf00      	nop
 8013a98:	7ffffffe 	.word	0x7ffffffe
 8013a9c:	0801baa4 	.word	0x0801baa4
 8013aa0:	0801bae8 	.word	0x0801bae8

08013aa4 <normalizeTime>:

void normalizeTime(TimeInternal *r)
{
 8013aa4:	b480      	push	{r7}
 8013aa6:	b083      	sub	sp, #12
 8013aa8:	af00      	add	r7, sp, #0
 8013aaa:	6078      	str	r0, [r7, #4]
	r->seconds += r->nanoseconds / 1000000000;
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	681a      	ldr	r2, [r3, #0]
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	685b      	ldr	r3, [r3, #4]
 8013ab4:	4921      	ldr	r1, [pc, #132]	; (8013b3c <normalizeTime+0x98>)
 8013ab6:	fb81 0103 	smull	r0, r1, r1, r3
 8013aba:	1709      	asrs	r1, r1, #28
 8013abc:	17db      	asrs	r3, r3, #31
 8013abe:	1acb      	subs	r3, r1, r3
 8013ac0:	441a      	add	r2, r3
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	601a      	str	r2, [r3, #0]
	r->nanoseconds -= r->nanoseconds / 1000000000 * 1000000000;
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	685a      	ldr	r2, [r3, #4]
 8013aca:	4b1c      	ldr	r3, [pc, #112]	; (8013b3c <normalizeTime+0x98>)
 8013acc:	fb83 1302 	smull	r1, r3, r3, r2
 8013ad0:	1719      	asrs	r1, r3, #28
 8013ad2:	17d3      	asrs	r3, r2, #31
 8013ad4:	1acb      	subs	r3, r1, r3
 8013ad6:	491a      	ldr	r1, [pc, #104]	; (8013b40 <normalizeTime+0x9c>)
 8013ad8:	fb01 f303 	mul.w	r3, r1, r3
 8013adc:	1ad3      	subs	r3, r2, r3
 8013ade:	687a      	ldr	r2, [r7, #4]
 8013ae0:	6053      	str	r3, [r2, #4]

	if (r->seconds > 0 && r->nanoseconds < 0)
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	dd0f      	ble.n	8013b0a <normalizeTime+0x66>
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	685b      	ldr	r3, [r3, #4]
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	da0b      	bge.n	8013b0a <normalizeTime+0x66>
	{
		r->seconds -= 1;
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	1e5a      	subs	r2, r3, #1
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	601a      	str	r2, [r3, #0]
		r->nanoseconds += 1000000000;
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	685a      	ldr	r2, [r3, #4]
 8013b00:	4b0f      	ldr	r3, [pc, #60]	; (8013b40 <normalizeTime+0x9c>)
 8013b02:	4413      	add	r3, r2
 8013b04:	687a      	ldr	r2, [r7, #4]
 8013b06:	6053      	str	r3, [r2, #4]
	else if (r->seconds < 0 && r->nanoseconds > 0)
	{
		r->seconds += 1;
		r->nanoseconds -= 1000000000;
	}
}
 8013b08:	e012      	b.n	8013b30 <normalizeTime+0x8c>
	else if (r->seconds < 0 && r->nanoseconds > 0)
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	681b      	ldr	r3, [r3, #0]
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	da0e      	bge.n	8013b30 <normalizeTime+0x8c>
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	685b      	ldr	r3, [r3, #4]
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	dd0a      	ble.n	8013b30 <normalizeTime+0x8c>
		r->seconds += 1;
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	1c5a      	adds	r2, r3, #1
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	601a      	str	r2, [r3, #0]
		r->nanoseconds -= 1000000000;
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	685a      	ldr	r2, [r3, #4]
 8013b28:	4b06      	ldr	r3, [pc, #24]	; (8013b44 <normalizeTime+0xa0>)
 8013b2a:	4413      	add	r3, r2
 8013b2c:	687a      	ldr	r2, [r7, #4]
 8013b2e:	6053      	str	r3, [r2, #4]
}
 8013b30:	bf00      	nop
 8013b32:	370c      	adds	r7, #12
 8013b34:	46bd      	mov	sp, r7
 8013b36:	bc80      	pop	{r7}
 8013b38:	4770      	bx	lr
 8013b3a:	bf00      	nop
 8013b3c:	44b82fa1 	.word	0x44b82fa1
 8013b40:	3b9aca00 	.word	0x3b9aca00
 8013b44:	c4653600 	.word	0xc4653600

08013b48 <addTime>:

void addTime(TimeInternal *r, const TimeInternal *x, const TimeInternal *y)
{
 8013b48:	b580      	push	{r7, lr}
 8013b4a:	b084      	sub	sp, #16
 8013b4c:	af00      	add	r7, sp, #0
 8013b4e:	60f8      	str	r0, [r7, #12]
 8013b50:	60b9      	str	r1, [r7, #8]
 8013b52:	607a      	str	r2, [r7, #4]
	r->seconds = x->seconds + y->seconds;
 8013b54:	68bb      	ldr	r3, [r7, #8]
 8013b56:	681a      	ldr	r2, [r3, #0]
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	681b      	ldr	r3, [r3, #0]
 8013b5c:	441a      	add	r2, r3
 8013b5e:	68fb      	ldr	r3, [r7, #12]
 8013b60:	601a      	str	r2, [r3, #0]
	r->nanoseconds = x->nanoseconds + y->nanoseconds;
 8013b62:	68bb      	ldr	r3, [r7, #8]
 8013b64:	685a      	ldr	r2, [r3, #4]
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	685b      	ldr	r3, [r3, #4]
 8013b6a:	441a      	add	r2, r3
 8013b6c:	68fb      	ldr	r3, [r7, #12]
 8013b6e:	605a      	str	r2, [r3, #4]

	normalizeTime(r);
 8013b70:	68f8      	ldr	r0, [r7, #12]
 8013b72:	f7ff ff97 	bl	8013aa4 <normalizeTime>
}
 8013b76:	bf00      	nop
 8013b78:	3710      	adds	r7, #16
 8013b7a:	46bd      	mov	sp, r7
 8013b7c:	bd80      	pop	{r7, pc}

08013b7e <subTime>:

void subTime(TimeInternal *r, const TimeInternal *x, const TimeInternal *y)
{
 8013b7e:	b580      	push	{r7, lr}
 8013b80:	b084      	sub	sp, #16
 8013b82:	af00      	add	r7, sp, #0
 8013b84:	60f8      	str	r0, [r7, #12]
 8013b86:	60b9      	str	r1, [r7, #8]
 8013b88:	607a      	str	r2, [r7, #4]
	r->seconds = x->seconds - y->seconds;
 8013b8a:	68bb      	ldr	r3, [r7, #8]
 8013b8c:	681a      	ldr	r2, [r3, #0]
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	681b      	ldr	r3, [r3, #0]
 8013b92:	1ad2      	subs	r2, r2, r3
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	601a      	str	r2, [r3, #0]
	r->nanoseconds = x->nanoseconds - y->nanoseconds;
 8013b98:	68bb      	ldr	r3, [r7, #8]
 8013b9a:	685a      	ldr	r2, [r3, #4]
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	685b      	ldr	r3, [r3, #4]
 8013ba0:	1ad2      	subs	r2, r2, r3
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	605a      	str	r2, [r3, #4]

	normalizeTime(r);
 8013ba6:	68f8      	ldr	r0, [r7, #12]
 8013ba8:	f7ff ff7c 	bl	8013aa4 <normalizeTime>
}
 8013bac:	bf00      	nop
 8013bae:	3710      	adds	r7, #16
 8013bb0:	46bd      	mov	sp, r7
 8013bb2:	bd80      	pop	{r7, pc}

08013bb4 <div2Time>:

void div2Time(TimeInternal *r)
{
 8013bb4:	b580      	push	{r7, lr}
 8013bb6:	b082      	sub	sp, #8
 8013bb8:	af00      	add	r7, sp, #0
 8013bba:	6078      	str	r0, [r7, #4]
	r->nanoseconds += r->seconds % 2 * 1000000000;
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	685a      	ldr	r2, [r3, #4]
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	f003 0301 	and.w	r3, r3, #1
 8013bca:	bfb8      	it	lt
 8013bcc:	425b      	neglt	r3, r3
 8013bce:	490e      	ldr	r1, [pc, #56]	; (8013c08 <div2Time+0x54>)
 8013bd0:	fb01 f303 	mul.w	r3, r1, r3
 8013bd4:	441a      	add	r2, r3
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	605a      	str	r2, [r3, #4]
	r->seconds /= 2;
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	681b      	ldr	r3, [r3, #0]
 8013bde:	0fda      	lsrs	r2, r3, #31
 8013be0:	4413      	add	r3, r2
 8013be2:	105b      	asrs	r3, r3, #1
 8013be4:	461a      	mov	r2, r3
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	601a      	str	r2, [r3, #0]
	r->nanoseconds /= 2;
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	685b      	ldr	r3, [r3, #4]
 8013bee:	0fda      	lsrs	r2, r3, #31
 8013bf0:	4413      	add	r3, r2
 8013bf2:	105b      	asrs	r3, r3, #1
 8013bf4:	461a      	mov	r2, r3
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	605a      	str	r2, [r3, #4]

	normalizeTime(r);
 8013bfa:	6878      	ldr	r0, [r7, #4]
 8013bfc:	f7ff ff52 	bl	8013aa4 <normalizeTime>
}
 8013c00:	bf00      	nop
 8013c02:	3708      	adds	r7, #8
 8013c04:	46bd      	mov	sp, r7
 8013c06:	bd80      	pop	{r7, pc}
 8013c08:	3b9aca00 	.word	0x3b9aca00

08013c0c <EUI48toEUI64>:

#include "ptpd.h"

/* Convert EUI48 format to EUI64 */
void EUI48toEUI64(const octet_t * eui48, octet_t * eui64)
{
 8013c0c:	b480      	push	{r7}
 8013c0e:	b083      	sub	sp, #12
 8013c10:	af00      	add	r7, sp, #0
 8013c12:	6078      	str	r0, [r7, #4]
 8013c14:	6039      	str	r1, [r7, #0]
	eui64[0] = eui48[0];
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	781a      	ldrb	r2, [r3, #0]
 8013c1a:	683b      	ldr	r3, [r7, #0]
 8013c1c:	701a      	strb	r2, [r3, #0]
	eui64[1] = eui48[1];
 8013c1e:	683b      	ldr	r3, [r7, #0]
 8013c20:	3301      	adds	r3, #1
 8013c22:	687a      	ldr	r2, [r7, #4]
 8013c24:	7852      	ldrb	r2, [r2, #1]
 8013c26:	701a      	strb	r2, [r3, #0]
	eui64[2] = eui48[2];
 8013c28:	683b      	ldr	r3, [r7, #0]
 8013c2a:	3302      	adds	r3, #2
 8013c2c:	687a      	ldr	r2, [r7, #4]
 8013c2e:	7892      	ldrb	r2, [r2, #2]
 8013c30:	701a      	strb	r2, [r3, #0]
	eui64[3] = 0xff;
 8013c32:	683b      	ldr	r3, [r7, #0]
 8013c34:	3303      	adds	r3, #3
 8013c36:	22ff      	movs	r2, #255	; 0xff
 8013c38:	701a      	strb	r2, [r3, #0]
	eui64[4] = 0xfe;
 8013c3a:	683b      	ldr	r3, [r7, #0]
 8013c3c:	3304      	adds	r3, #4
 8013c3e:	22fe      	movs	r2, #254	; 0xfe
 8013c40:	701a      	strb	r2, [r3, #0]
	eui64[5] = eui48[3];
 8013c42:	683b      	ldr	r3, [r7, #0]
 8013c44:	3305      	adds	r3, #5
 8013c46:	687a      	ldr	r2, [r7, #4]
 8013c48:	78d2      	ldrb	r2, [r2, #3]
 8013c4a:	701a      	strb	r2, [r3, #0]
	eui64[6] = eui48[4];
 8013c4c:	683b      	ldr	r3, [r7, #0]
 8013c4e:	3306      	adds	r3, #6
 8013c50:	687a      	ldr	r2, [r7, #4]
 8013c52:	7912      	ldrb	r2, [r2, #4]
 8013c54:	701a      	strb	r2, [r3, #0]
	eui64[7] = eui48[5];
 8013c56:	683b      	ldr	r3, [r7, #0]
 8013c58:	3307      	adds	r3, #7
 8013c5a:	687a      	ldr	r2, [r7, #4]
 8013c5c:	7952      	ldrb	r2, [r2, #5]
 8013c5e:	701a      	strb	r2, [r3, #0]
}
 8013c60:	bf00      	nop
 8013c62:	370c      	adds	r7, #12
 8013c64:	46bd      	mov	sp, r7
 8013c66:	bc80      	pop	{r7}
 8013c68:	4770      	bx	lr
	...

08013c6c <initData>:

/* Init ptpClock with run time values (initialization constants are in constants.h) */
void initData(PtpClock *ptpClock)
{
 8013c6c:	b580      	push	{r7, lr}
 8013c6e:	b088      	sub	sp, #32
 8013c70:	af00      	add	r7, sp, #0
 8013c72:	6078      	str	r0, [r7, #4]
	RunTimeOpts * rtOpts;

	DBG("initData\r\n");
 8013c74:	f107 0314 	add.w	r3, r7, #20
 8013c78:	4618      	mov	r0, r3
 8013c7a:	f004 f9d9 	bl	8018030 <getTime>
 8013c7e:	697b      	ldr	r3, [r7, #20]
 8013c80:	69ba      	ldr	r2, [r7, #24]
 8013c82:	4619      	mov	r1, r3
 8013c84:	4859      	ldr	r0, [pc, #356]	; (8013dec <initData+0x180>)
 8013c86:	f004 fb4d 	bl	8018324 <iprintf>
 8013c8a:	4859      	ldr	r0, [pc, #356]	; (8013df0 <initData+0x184>)
 8013c8c:	f004 fbbe 	bl	801840c <puts>
	rtOpts = ptpClock->rtOpts;
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	f8d3 3440 	ldr.w	r3, [r3, #1088]	; 0x440
 8013c96:	61fb      	str	r3, [r7, #28]

	/* Default data set */
	ptpClock->defaultDS.twoStepFlag = DEFAULT_TWO_STEP_FLAG;
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	2201      	movs	r2, #1
 8013c9c:	701a      	strb	r2, [r3, #0]

	/* Init clockIdentity with MAC address and 0xFF and 0xFE. see spec 7.5.2.2.2 */
	if ((CLOCK_IDENTITY_LENGTH == 8) && (PTP_UUID_LENGTH == 6))
	{
			DBGVV("initData: EUI48toEUI64\r\n");
			EUI48toEUI64(ptpClock->portUuidField, ptpClock->defaultDS.clockIdentity);
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	f203 4211 	addw	r2, r3, #1041	; 0x411
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	3301      	adds	r3, #1
 8013ca8:	4619      	mov	r1, r3
 8013caa:	4610      	mov	r0, r2
 8013cac:	f7ff ffae 	bl	8013c0c <EUI48toEUI64>
	else
	{
			ERROR("initData: UUID length is not valid");
	}

	ptpClock->defaultDS.numberPorts = NUMBER_PORTS;
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	2201      	movs	r2, #1
 8013cb4:	815a      	strh	r2, [r3, #10]

	ptpClock->defaultDS.clockQuality.clockAccuracy = rtOpts->clockQuality.clockAccuracy;
 8013cb6:	69fb      	ldr	r3, [r7, #28]
 8013cb8:	78da      	ldrb	r2, [r3, #3]
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	735a      	strb	r2, [r3, #13]
	ptpClock->defaultDS.clockQuality.clockClass = rtOpts->clockQuality.clockClass;
 8013cbe:	69fb      	ldr	r3, [r7, #28]
 8013cc0:	789a      	ldrb	r2, [r3, #2]
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	731a      	strb	r2, [r3, #12]
	ptpClock->defaultDS.clockQuality.offsetScaledLogVariance = rtOpts->clockQuality.offsetScaledLogVariance;
 8013cc6:	69fb      	ldr	r3, [r7, #28]
 8013cc8:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	81da      	strh	r2, [r3, #14]

	ptpClock->defaultDS.priority1 = rtOpts->priority1;
 8013cd0:	69fb      	ldr	r3, [r7, #28]
 8013cd2:	799a      	ldrb	r2, [r3, #6]
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	741a      	strb	r2, [r3, #16]
	ptpClock->defaultDS.priority2 = rtOpts->priority2;
 8013cd8:	69fb      	ldr	r3, [r7, #28]
 8013cda:	79da      	ldrb	r2, [r3, #7]
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	745a      	strb	r2, [r3, #17]

	ptpClock->defaultDS.domainNumber = rtOpts->domainNumber;
 8013ce0:	69fb      	ldr	r3, [r7, #28]
 8013ce2:	7a1a      	ldrb	r2, [r3, #8]
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	749a      	strb	r2, [r3, #18]
	ptpClock->defaultDS.slaveOnly = rtOpts->slaveOnly;
 8013ce8:	69fb      	ldr	r3, [r7, #28]
 8013cea:	7a5a      	ldrb	r2, [r3, #9]
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	74da      	strb	r2, [r3, #19]

	/* Port configuration data set */

	/* PortIdentity Init (portNumber = 1 for an ardinary clock spec 7.5.2.3)*/
	memcpy(ptpClock->portDS.portIdentity.clockIdentity, ptpClock->defaultDS.clockIdentity, CLOCK_IDENTITY_LENGTH);
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	f103 0058 	add.w	r0, r3, #88	; 0x58
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	3301      	adds	r3, #1
 8013cfa:	2208      	movs	r2, #8
 8013cfc:	4619      	mov	r1, r3
 8013cfe:	f004 fafe 	bl	80182fe <memcpy>
	ptpClock->portDS.portIdentity.portNumber = NUMBER_PORTS;
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	2201      	movs	r2, #1
 8013d06:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	ptpClock->portDS.logMinDelayReqInterval = DEFAULT_DELAYREQ_INTERVAL;
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	2202      	movs	r2, #2
 8013d0e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	ptpClock->portDS.peerMeanPathDelay.seconds = ptpClock->portDS.peerMeanPathDelay.nanoseconds = 0;
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	2200      	movs	r2, #0
 8013d16:	669a      	str	r2, [r3, #104]	; 0x68
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	665a      	str	r2, [r3, #100]	; 0x64
	ptpClock->portDS.logAnnounceInterval = rtOpts->announceInterval;
 8013d20:	69fb      	ldr	r3, [r7, #28]
 8013d22:	f993 2000 	ldrsb.w	r2, [r3]
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	ptpClock->portDS.announceReceiptTimeout = DEFAULT_ANNOUNCE_RECEIPT_TIMEOUT;
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	2206      	movs	r2, #6
 8013d30:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	ptpClock->portDS.logSyncInterval = rtOpts->syncInterval;
 8013d34:	69fb      	ldr	r3, [r7, #28]
 8013d36:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	ptpClock->portDS.delayMechanism = rtOpts->delayMechanism;
 8013d40:	69fb      	ldr	r3, [r7, #28]
 8013d42:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	ptpClock->portDS.logMinPdelayReqInterval = DEFAULT_PDELAYREQ_INTERVAL;
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	2201      	movs	r2, #1
 8013d50:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	ptpClock->portDS.versionNumber = VERSION_PTP;
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	2202      	movs	r2, #2
 8013d58:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

	/* Init other stuff */
	ptpClock->foreignMasterDS.count = 0;
 8013d5c:	687b      	ldr	r3, [r7, #4]
 8013d5e:	2200      	movs	r2, #0
 8013d60:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	ptpClock->foreignMasterDS.capacity = rtOpts->maxForeignRecords;
 8013d64:	69fb      	ldr	r3, [r7, #28]
 8013d66:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

	ptpClock->inboundLatency = rtOpts->inboundLatency;
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	69fa      	ldr	r2, [r7, #28]
 8013d74:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8013d78:	3220      	adds	r2, #32
 8013d7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013d7e:	e883 0003 	stmia.w	r3, {r0, r1}
	ptpClock->outboundLatency = rtOpts->outboundLatency;
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	69fa      	ldr	r2, [r7, #28]
 8013d86:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8013d8a:	3228      	adds	r2, #40	; 0x28
 8013d8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013d90:	e883 0003 	stmia.w	r3, {r0, r1}

	ptpClock->servo.sDelay = rtOpts->servo.sDelay;
 8013d94:	69fb      	ldr	r3, [r7, #28]
 8013d96:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	f8a3 2434 	strh.w	r2, [r3, #1076]	; 0x434
	ptpClock->servo.sOffset = rtOpts->servo.sOffset;
 8013da0:	69fb      	ldr	r3, [r7, #28]
 8013da2:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	f8a3 2436 	strh.w	r2, [r3, #1078]	; 0x436
	ptpClock->servo.ai = rtOpts->servo.ai;
 8013dac:	69fb      	ldr	r3, [r7, #28]
 8013dae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
	ptpClock->servo.ap = rtOpts->servo.ap;
 8013db6:	69fb      	ldr	r3, [r7, #28]
 8013db8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
	ptpClock->servo.noAdjust = rtOpts->servo.noAdjust;
 8013dc0:	69fb      	ldr	r3, [r7, #28]
 8013dc2:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
	ptpClock->servo.noResetClock = rtOpts->servo.noResetClock;
 8013dcc:	69fb      	ldr	r3, [r7, #28]
 8013dce:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

	ptpClock->stats = rtOpts->stats;
 8013dd8:	69fb      	ldr	r3, [r7, #28]
 8013dda:	7b9a      	ldrb	r2, [r3, #14]
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
}
 8013de2:	bf00      	nop
 8013de4:	3720      	adds	r7, #32
 8013de6:	46bd      	mov	sp, r7
 8013de8:	bd80      	pop	{r7, pc}
 8013dea:	bf00      	nop
 8013dec:	0801bb40 	.word	0x0801bb40
 8013df0:	0801bb50 	.word	0x0801bb50

08013df4 <isSamePortIdentity>:

bool isSamePortIdentity(const PortIdentity * A, const PortIdentity * B)
{
 8013df4:	b580      	push	{r7, lr}
 8013df6:	b082      	sub	sp, #8
 8013df8:	af00      	add	r7, sp, #0
 8013dfa:	6078      	str	r0, [r7, #4]
 8013dfc:	6039      	str	r1, [r7, #0]
	return (bool)(0 == memcmp(A->clockIdentity, B->clockIdentity, CLOCK_IDENTITY_LENGTH) && (A->portNumber == B->portNumber));
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	6839      	ldr	r1, [r7, #0]
 8013e02:	2208      	movs	r2, #8
 8013e04:	4618      	mov	r0, r3
 8013e06:	f004 fa6b 	bl	80182e0 <memcmp>
 8013e0a:	4603      	mov	r3, r0
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d109      	bne.n	8013e24 <isSamePortIdentity+0x30>
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8013e16:	683b      	ldr	r3, [r7, #0]
 8013e18:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8013e1c:	429a      	cmp	r2, r3
 8013e1e:	d101      	bne.n	8013e24 <isSamePortIdentity+0x30>
 8013e20:	2301      	movs	r3, #1
 8013e22:	e000      	b.n	8013e26 <isSamePortIdentity+0x32>
 8013e24:	2300      	movs	r3, #0
 8013e26:	f003 0301 	and.w	r3, r3, #1
 8013e2a:	b2db      	uxtb	r3, r3
}
 8013e2c:	4618      	mov	r0, r3
 8013e2e:	3708      	adds	r7, #8
 8013e30:	46bd      	mov	sp, r7
 8013e32:	bd80      	pop	{r7, pc}

08013e34 <addForeign>:

void addForeign(PtpClock *ptpClock, const MsgHeader *header, const MsgAnnounce * announce)
{
 8013e34:	b5b0      	push	{r4, r5, r7, lr}
 8013e36:	b088      	sub	sp, #32
 8013e38:	af00      	add	r7, sp, #0
 8013e3a:	60f8      	str	r0, [r7, #12]
 8013e3c:	60b9      	str	r1, [r7, #8]
 8013e3e:	607a      	str	r2, [r7, #4]
	int i, j;
	bool found = FALSE;
 8013e40:	2300      	movs	r3, #0
 8013e42:	75fb      	strb	r3, [r7, #23]

	j = ptpClock->foreignMasterDS.best;
 8013e44:	68fb      	ldr	r3, [r7, #12]
 8013e46:	f9b3 307e 	ldrsh.w	r3, [r3, #126]	; 0x7e
 8013e4a:	61bb      	str	r3, [r7, #24]

	/* Check if Foreign master is already known */
	for (i = 0; i < ptpClock->foreignMasterDS.count; i++)
 8013e4c:	2300      	movs	r3, #0
 8013e4e:	61fb      	str	r3, [r7, #28]
 8013e50:	e052      	b.n	8013ef8 <addForeign+0xc4>
	{
		if (isSamePortIdentity(&header->sourcePortIdentity, &ptpClock->foreignMasterDS.records[j].foreignMasterPortIdentity))
 8013e52:	68bb      	ldr	r3, [r7, #8]
 8013e54:	f103 0018 	add.w	r0, r3, #24
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8013e5c:	69bb      	ldr	r3, [r7, #24]
 8013e5e:	2158      	movs	r1, #88	; 0x58
 8013e60:	fb01 f303 	mul.w	r3, r1, r3
 8013e64:	4413      	add	r3, r2
 8013e66:	4619      	mov	r1, r3
 8013e68:	f7ff ffc4 	bl	8013df4 <isSamePortIdentity>
 8013e6c:	4603      	mov	r3, r0
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d034      	beq.n	8013edc <addForeign+0xa8>
		{
			/* Foreign Master is already in Foreignmaster data set */
			ptpClock->foreignMasterDS.records[j].foreignMasterAnnounceMessages++;
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8013e76:	69bb      	ldr	r3, [r7, #24]
 8013e78:	2158      	movs	r1, #88	; 0x58
 8013e7a:	fb01 f303 	mul.w	r3, r1, r3
 8013e7e:	4413      	add	r3, r2
 8013e80:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8013e84:	b292      	uxth	r2, r2
 8013e86:	3201      	adds	r2, #1
 8013e88:	b292      	uxth	r2, r2
 8013e8a:	b212      	sxth	r2, r2
 8013e8c:	815a      	strh	r2, [r3, #10]
			found = TRUE;
 8013e8e:	2301      	movs	r3, #1
 8013e90:	75fb      	strb	r3, [r7, #23]
			DBGV("addForeign: AnnounceMessage incremented \r\n");
			ptpClock->foreignMasterDS.records[j].header = *header;
 8013e92:	68fb      	ldr	r3, [r7, #12]
 8013e94:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8013e96:	69bb      	ldr	r3, [r7, #24]
 8013e98:	2158      	movs	r1, #88	; 0x58
 8013e9a:	fb01 f303 	mul.w	r3, r1, r3
 8013e9e:	4413      	add	r3, r2
 8013ea0:	68ba      	ldr	r2, [r7, #8]
 8013ea2:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8013ea6:	4615      	mov	r5, r2
 8013ea8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013eaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013eac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013eae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013eb0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013eb4:	e884 0003 	stmia.w	r4, {r0, r1}
			ptpClock->foreignMasterDS.records[j].announce = *announce;
 8013eb8:	68fb      	ldr	r3, [r7, #12]
 8013eba:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8013ebc:	69bb      	ldr	r3, [r7, #24]
 8013ebe:	2158      	movs	r1, #88	; 0x58
 8013ec0:	fb01 f303 	mul.w	r3, r1, r3
 8013ec4:	4413      	add	r3, r2
 8013ec6:	687a      	ldr	r2, [r7, #4]
 8013ec8:	f103 040c 	add.w	r4, r3, #12
 8013ecc:	4615      	mov	r5, r2
 8013ece:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013ed0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013ed2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013ed4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013ed6:	682b      	ldr	r3, [r5, #0]
 8013ed8:	6023      	str	r3, [r4, #0]
			break;
 8013eda:	e014      	b.n	8013f06 <addForeign+0xd2>
		}

		j = (j + 1) % ptpClock->foreignMasterDS.count;
 8013edc:	69bb      	ldr	r3, [r7, #24]
 8013ede:	3301      	adds	r3, #1
 8013ee0:	68fa      	ldr	r2, [r7, #12]
 8013ee2:	f9b2 2078 	ldrsh.w	r2, [r2, #120]	; 0x78
 8013ee6:	fb93 f1f2 	sdiv	r1, r3, r2
 8013eea:	fb02 f201 	mul.w	r2, r2, r1
 8013eee:	1a9b      	subs	r3, r3, r2
 8013ef0:	61bb      	str	r3, [r7, #24]
	for (i = 0; i < ptpClock->foreignMasterDS.count; i++)
 8013ef2:	69fb      	ldr	r3, [r7, #28]
 8013ef4:	3301      	adds	r3, #1
 8013ef6:	61fb      	str	r3, [r7, #28]
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	f9b3 3078 	ldrsh.w	r3, [r3, #120]	; 0x78
 8013efe:	461a      	mov	r2, r3
 8013f00:	69fb      	ldr	r3, [r7, #28]
 8013f02:	4293      	cmp	r3, r2
 8013f04:	dba5      	blt.n	8013e52 <addForeign+0x1e>
	}

	/* New Foreign Master */
	if (!found)
 8013f06:	7dfb      	ldrb	r3, [r7, #23]
 8013f08:	f083 0301 	eor.w	r3, r3, #1
 8013f0c:	b2db      	uxtb	r3, r3
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d06b      	beq.n	8013fea <addForeign+0x1b6>
	{
		if (ptpClock->foreignMasterDS.count < ptpClock->foreignMasterDS.capacity)
 8013f12:	68fb      	ldr	r3, [r7, #12]
 8013f14:	f9b3 2078 	ldrsh.w	r2, [r3, #120]	; 0x78
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	f9b3 307a 	ldrsh.w	r3, [r3, #122]	; 0x7a
 8013f1e:	429a      	cmp	r2, r3
 8013f20:	da09      	bge.n	8013f36 <addForeign+0x102>
		{
			ptpClock->foreignMasterDS.count++;
 8013f22:	68fb      	ldr	r3, [r7, #12]
 8013f24:	f9b3 3078 	ldrsh.w	r3, [r3, #120]	; 0x78
 8013f28:	b29b      	uxth	r3, r3
 8013f2a:	3301      	adds	r3, #1
 8013f2c:	b29b      	uxth	r3, r3
 8013f2e:	b21a      	sxth	r2, r3
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
		}

		j = ptpClock->foreignMasterDS.i;
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8013f3c:	61bb      	str	r3, [r7, #24]

		/* Copy new foreign master data set from Announce message */
		memcpy(ptpClock->foreignMasterDS.records[j].foreignMasterPortIdentity.clockIdentity, header->sourcePortIdentity.clockIdentity, CLOCK_IDENTITY_LENGTH);
 8013f3e:	68fb      	ldr	r3, [r7, #12]
 8013f40:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8013f42:	69bb      	ldr	r3, [r7, #24]
 8013f44:	2158      	movs	r1, #88	; 0x58
 8013f46:	fb01 f303 	mul.w	r3, r1, r3
 8013f4a:	4413      	add	r3, r2
 8013f4c:	4618      	mov	r0, r3
 8013f4e:	68bb      	ldr	r3, [r7, #8]
 8013f50:	3318      	adds	r3, #24
 8013f52:	2208      	movs	r2, #8
 8013f54:	4619      	mov	r1, r3
 8013f56:	f004 f9d2 	bl	80182fe <memcpy>
		ptpClock->foreignMasterDS.records[j].foreignMasterPortIdentity.portNumber = header->sourcePortIdentity.portNumber;
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8013f5e:	69bb      	ldr	r3, [r7, #24]
 8013f60:	2158      	movs	r1, #88	; 0x58
 8013f62:	fb01 f303 	mul.w	r3, r1, r3
 8013f66:	4413      	add	r3, r2
 8013f68:	68ba      	ldr	r2, [r7, #8]
 8013f6a:	f9b2 2020 	ldrsh.w	r2, [r2, #32]
 8013f6e:	811a      	strh	r2, [r3, #8]
		ptpClock->foreignMasterDS.records[j].foreignMasterAnnounceMessages = 0;
 8013f70:	68fb      	ldr	r3, [r7, #12]
 8013f72:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8013f74:	69bb      	ldr	r3, [r7, #24]
 8013f76:	2158      	movs	r1, #88	; 0x58
 8013f78:	fb01 f303 	mul.w	r3, r1, r3
 8013f7c:	4413      	add	r3, r2
 8013f7e:	2200      	movs	r2, #0
 8013f80:	815a      	strh	r2, [r3, #10]

		/* Header and announce field of each Foreign Master are usefull to run Best Master Clock Algorithm */
		ptpClock->foreignMasterDS.records[j].header = *header;
 8013f82:	68fb      	ldr	r3, [r7, #12]
 8013f84:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8013f86:	69bb      	ldr	r3, [r7, #24]
 8013f88:	2158      	movs	r1, #88	; 0x58
 8013f8a:	fb01 f303 	mul.w	r3, r1, r3
 8013f8e:	4413      	add	r3, r2
 8013f90:	68ba      	ldr	r2, [r7, #8]
 8013f92:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8013f96:	4615      	mov	r5, r2
 8013f98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013f9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013f9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013f9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013fa0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8013fa4:	e884 0003 	stmia.w	r4, {r0, r1}
		ptpClock->foreignMasterDS.records[j].announce = *announce;
 8013fa8:	68fb      	ldr	r3, [r7, #12]
 8013faa:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8013fac:	69bb      	ldr	r3, [r7, #24]
 8013fae:	2158      	movs	r1, #88	; 0x58
 8013fb0:	fb01 f303 	mul.w	r3, r1, r3
 8013fb4:	4413      	add	r3, r2
 8013fb6:	687a      	ldr	r2, [r7, #4]
 8013fb8:	f103 040c 	add.w	r4, r3, #12
 8013fbc:	4615      	mov	r5, r2
 8013fbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013fc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013fc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013fc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013fc6:	682b      	ldr	r3, [r5, #0]
 8013fc8:	6023      	str	r3, [r4, #0]
		DBGV("addForeign: New foreign Master added \r\n");

		ptpClock->foreignMasterDS.i = (ptpClock->foreignMasterDS.i + 1) % ptpClock->foreignMasterDS.capacity;
 8013fca:	68fb      	ldr	r3, [r7, #12]
 8013fcc:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8013fd0:	3301      	adds	r3, #1
 8013fd2:	68fa      	ldr	r2, [r7, #12]
 8013fd4:	f9b2 207a 	ldrsh.w	r2, [r2, #122]	; 0x7a
 8013fd8:	fb93 f1f2 	sdiv	r1, r3, r2
 8013fdc:	fb02 f201 	mul.w	r2, r2, r1
 8013fe0:	1a9b      	subs	r3, r3, r2
 8013fe2:	b21a      	sxth	r2, r3
 8013fe4:	68fb      	ldr	r3, [r7, #12]
 8013fe6:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	}
}
 8013fea:	bf00      	nop
 8013fec:	3720      	adds	r7, #32
 8013fee:	46bd      	mov	sp, r7
 8013ff0:	bdb0      	pop	{r4, r5, r7, pc}

08013ff2 <m1>:

#define m2 m1

/* Local clock is becoming Master. Table 13 (9.3.5) of the spec.*/
void m1(PtpClock *ptpClock)
{
 8013ff2:	b580      	push	{r7, lr}
 8013ff4:	b082      	sub	sp, #8
 8013ff6:	af00      	add	r7, sp, #0
 8013ff8:	6078      	str	r0, [r7, #4]
	DBGV("bmc: m1\r\n");

	/* Current data set update */
	ptpClock->currentDS.stepsRemoved = 0;
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	2200      	movs	r2, #0
 8013ffe:	829a      	strh	r2, [r3, #20]
	ptpClock->currentDS.offsetFromMaster.seconds = ptpClock->currentDS.offsetFromMaster.nanoseconds = 0;
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	2200      	movs	r2, #0
 8014004:	61da      	str	r2, [r3, #28]
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	69da      	ldr	r2, [r3, #28]
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	619a      	str	r2, [r3, #24]
	ptpClock->currentDS.meanPathDelay.seconds = ptpClock->currentDS.meanPathDelay.nanoseconds = 0;
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	2200      	movs	r2, #0
 8014012:	625a      	str	r2, [r3, #36]	; 0x24
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	621a      	str	r2, [r3, #32]

	/* Parent data set */
	memcpy(ptpClock->parentDS.parentPortIdentity.clockIdentity, ptpClock->defaultDS.clockIdentity, CLOCK_IDENTITY_LENGTH);
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	3301      	adds	r3, #1
 8014026:	2208      	movs	r2, #8
 8014028:	4619      	mov	r1, r3
 801402a:	f004 f968 	bl	80182fe <memcpy>
	ptpClock->parentDS.parentPortIdentity.portNumber = 0;
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	2200      	movs	r2, #0
 8014032:	861a      	strh	r2, [r3, #48]	; 0x30
	memcpy(ptpClock->parentDS.grandmasterIdentity, ptpClock->defaultDS.clockIdentity, CLOCK_IDENTITY_LENGTH);
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	3301      	adds	r3, #1
 801403e:	2208      	movs	r2, #8
 8014040:	4619      	mov	r1, r3
 8014042:	f004 f95c 	bl	80182fe <memcpy>
	ptpClock->parentDS.grandmasterClockQuality.clockAccuracy = ptpClock->defaultDS.clockQuality.clockAccuracy;
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	7b5a      	ldrb	r2, [r3, #13]
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	ptpClock->parentDS.grandmasterClockQuality.clockClass = ptpClock->defaultDS.clockQuality.clockClass;
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	7b1a      	ldrb	r2, [r3, #12]
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	ptpClock->parentDS.grandmasterClockQuality.offsetScaledLogVariance = ptpClock->defaultDS.clockQuality.offsetScaledLogVariance;
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	ptpClock->parentDS.grandmasterPriority1 = ptpClock->defaultDS.priority1;
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	7c1a      	ldrb	r2, [r3, #16]
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	ptpClock->parentDS.grandmasterPriority2 = ptpClock->defaultDS.priority2;
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	7c5a      	ldrb	r2, [r3, #17]
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

	/* Time Properties data set */
	ptpClock->timePropertiesDS.currentUtcOffset = ptpClock->rtOpts->currentUtcOffset;
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	f8d3 3440 	ldr.w	r3, [r3, #1088]	; 0x440
 8014080:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	ptpClock->timePropertiesDS.currentUtcOffsetValid = DEFAULT_UTC_VALID;
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	2200      	movs	r2, #0
 801408e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	ptpClock->timePropertiesDS.leap59 = FALSE;
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	2200      	movs	r2, #0
 8014096:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	ptpClock->timePropertiesDS.leap61 = FALSE;
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	2200      	movs	r2, #0
 801409e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	ptpClock->timePropertiesDS.timeTraceable = DEFAULT_TIME_TRACEABLE;
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	2200      	movs	r2, #0
 80140a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	ptpClock->timePropertiesDS.frequencyTraceable = DEFAULT_FREQUENCY_TRACEABLE;
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	2200      	movs	r2, #0
 80140ae:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	ptpClock->timePropertiesDS.ptpTimescale = (bool)(DEFAULT_TIMESCALE == PTP_TIMESCALE);
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	2200      	movs	r2, #0
 80140b6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	ptpClock->timePropertiesDS.timeSource = DEFAULT_TIME_SOURCE;
 80140ba:	687b      	ldr	r3, [r7, #4]
 80140bc:	22a0      	movs	r2, #160	; 0xa0
 80140be:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
}
 80140c2:	bf00      	nop
 80140c4:	3708      	adds	r7, #8
 80140c6:	46bd      	mov	sp, r7
 80140c8:	bd80      	pop	{r7, pc}

080140ca <p1>:

void p1(PtpClock *ptpClock)
{
 80140ca:	b480      	push	{r7}
 80140cc:	b083      	sub	sp, #12
 80140ce:	af00      	add	r7, sp, #0
 80140d0:	6078      	str	r0, [r7, #4]
	DBGV("bmc: p1\r\n");
}
 80140d2:	bf00      	nop
 80140d4:	370c      	adds	r7, #12
 80140d6:	46bd      	mov	sp, r7
 80140d8:	bc80      	pop	{r7}
 80140da:	4770      	bx	lr

080140dc <s1>:

/* Local clock is synchronized to Ebest Table 16 (9.3.5) of the spec */
void s1(PtpClock *ptpClock, const MsgHeader *header, const MsgAnnounce *announce)
{
 80140dc:	b580      	push	{r7, lr}
 80140de:	b086      	sub	sp, #24
 80140e0:	af00      	add	r7, sp, #0
 80140e2:	60f8      	str	r0, [r7, #12]
 80140e4:	60b9      	str	r1, [r7, #8]
 80140e6:	607a      	str	r2, [r7, #4]
	bool isFromCurrentParent;

	DBGV("bmc: s1\r\n");

	/* Current DS */
	ptpClock->currentDS.stepsRemoved = announce->stepsRemoved + 1;
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80140ee:	b29b      	uxth	r3, r3
 80140f0:	3301      	adds	r3, #1
 80140f2:	b29b      	uxth	r3, r3
 80140f4:	b21a      	sxth	r2, r3
 80140f6:	68fb      	ldr	r3, [r7, #12]
 80140f8:	829a      	strh	r2, [r3, #20]

	isFromCurrentParent = isSamePortIdentity(&ptpClock->parentDS.parentPortIdentity, &header->sourcePortIdentity);
 80140fa:	68fb      	ldr	r3, [r7, #12]
 80140fc:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8014100:	68bb      	ldr	r3, [r7, #8]
 8014102:	3318      	adds	r3, #24
 8014104:	4619      	mov	r1, r3
 8014106:	4610      	mov	r0, r2
 8014108:	f7ff fe74 	bl	8013df4 <isSamePortIdentity>
 801410c:	4603      	mov	r3, r0
 801410e:	75fb      	strb	r3, [r7, #23]

	if (!isFromCurrentParent)
 8014110:	7dfb      	ldrb	r3, [r7, #23]
 8014112:	f083 0301 	eor.w	r3, r3, #1
 8014116:	b2db      	uxtb	r3, r3
 8014118:	2b00      	cmp	r3, #0
 801411a:	d007      	beq.n	801412c <s1+0x50>
	{
			setFlag(ptpClock->events, MASTER_CLOCK_CHANGED);
 801411c:	68fb      	ldr	r3, [r7, #12]
 801411e:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
 8014122:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8014126:	68fb      	ldr	r3, [r7, #12]
 8014128:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
	}

	/* Parent DS */
	memcpy(ptpClock->parentDS.parentPortIdentity.clockIdentity, header->sourcePortIdentity.clockIdentity, CLOCK_IDENTITY_LENGTH);
 801412c:	68fb      	ldr	r3, [r7, #12]
 801412e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8014132:	68bb      	ldr	r3, [r7, #8]
 8014134:	3318      	adds	r3, #24
 8014136:	2208      	movs	r2, #8
 8014138:	4619      	mov	r1, r3
 801413a:	f004 f8e0 	bl	80182fe <memcpy>
	ptpClock->parentDS.parentPortIdentity.portNumber = header->sourcePortIdentity.portNumber;
 801413e:	68bb      	ldr	r3, [r7, #8]
 8014140:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8014144:	68fb      	ldr	r3, [r7, #12]
 8014146:	861a      	strh	r2, [r3, #48]	; 0x30
	memcpy(ptpClock->parentDS.grandmasterIdentity, announce->grandmasterIdentity, CLOCK_IDENTITY_LENGTH);
 8014148:	68fb      	ldr	r3, [r7, #12]
 801414a:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	3315      	adds	r3, #21
 8014152:	2208      	movs	r2, #8
 8014154:	4619      	mov	r1, r3
 8014156:	f004 f8d2 	bl	80182fe <memcpy>
	ptpClock->parentDS.grandmasterClockQuality.clockAccuracy = announce->grandmasterClockQuality.clockAccuracy;
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	7c5a      	ldrb	r2, [r3, #17]
 801415e:	68fb      	ldr	r3, [r7, #12]
 8014160:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	ptpClock->parentDS.grandmasterClockQuality.clockClass = announce->grandmasterClockQuality.clockClass;
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	7c1a      	ldrb	r2, [r3, #16]
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	ptpClock->parentDS.grandmasterClockQuality.offsetScaledLogVariance = announce->grandmasterClockQuality.offsetScaledLogVariance;
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8014174:	68fb      	ldr	r3, [r7, #12]
 8014176:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	ptpClock->parentDS.grandmasterPriority1 = announce->grandmasterPriority1;
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	7b9a      	ldrb	r2, [r3, #14]
 801417e:	68fb      	ldr	r3, [r7, #12]
 8014180:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	ptpClock->parentDS.grandmasterPriority2 = announce->grandmasterPriority2;
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	7d1a      	ldrb	r2, [r3, #20]
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

	/* Timeproperties DS */
	ptpClock->timePropertiesDS.currentUtcOffset = announce->currentUtcOffset;
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8014194:	68fb      	ldr	r3, [r7, #12]
 8014196:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	ptpClock->timePropertiesDS.currentUtcOffsetValid = getFlag(header->flagField[1], FLAG1_UTC_OFFSET_VALID);
 801419a:	68bb      	ldr	r3, [r7, #8]
 801419c:	7a1b      	ldrb	r3, [r3, #8]
 801419e:	f003 0304 	and.w	r3, r3, #4
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	bf14      	ite	ne
 80141a6:	2301      	movne	r3, #1
 80141a8:	2300      	moveq	r3, #0
 80141aa:	b2da      	uxtb	r2, r3
 80141ac:	68fb      	ldr	r3, [r7, #12]
 80141ae:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	ptpClock->timePropertiesDS.leap59 = getFlag(header->flagField[1], FLAG1_LEAP59);
 80141b2:	68bb      	ldr	r3, [r7, #8]
 80141b4:	7a1b      	ldrb	r3, [r3, #8]
 80141b6:	f003 0302 	and.w	r3, r3, #2
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	bf14      	ite	ne
 80141be:	2301      	movne	r3, #1
 80141c0:	2300      	moveq	r3, #0
 80141c2:	b2da      	uxtb	r2, r3
 80141c4:	68fb      	ldr	r3, [r7, #12]
 80141c6:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	ptpClock->timePropertiesDS.leap61 = getFlag(header->flagField[1], FLAG1_LEAP61);
 80141ca:	68bb      	ldr	r3, [r7, #8]
 80141cc:	7a1b      	ldrb	r3, [r3, #8]
 80141ce:	f003 0301 	and.w	r3, r3, #1
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	bf14      	ite	ne
 80141d6:	2301      	movne	r3, #1
 80141d8:	2300      	moveq	r3, #0
 80141da:	b2da      	uxtb	r2, r3
 80141dc:	68fb      	ldr	r3, [r7, #12]
 80141de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	ptpClock->timePropertiesDS.timeTraceable = getFlag(header->flagField[1], FLAG1_TIME_TRACEABLE);
 80141e2:	68bb      	ldr	r3, [r7, #8]
 80141e4:	7a1b      	ldrb	r3, [r3, #8]
 80141e6:	f003 0310 	and.w	r3, r3, #16
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	bf14      	ite	ne
 80141ee:	2301      	movne	r3, #1
 80141f0:	2300      	moveq	r3, #0
 80141f2:	b2da      	uxtb	r2, r3
 80141f4:	68fb      	ldr	r3, [r7, #12]
 80141f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	ptpClock->timePropertiesDS.frequencyTraceable = getFlag(header->flagField[1], FLAG1_FREQUENCY_TRACEABLE);
 80141fa:	68bb      	ldr	r3, [r7, #8]
 80141fc:	7a1b      	ldrb	r3, [r3, #8]
 80141fe:	f003 0320 	and.w	r3, r3, #32
 8014202:	2b00      	cmp	r3, #0
 8014204:	bf14      	ite	ne
 8014206:	2301      	movne	r3, #1
 8014208:	2300      	moveq	r3, #0
 801420a:	b2da      	uxtb	r2, r3
 801420c:	68fb      	ldr	r3, [r7, #12]
 801420e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	ptpClock->timePropertiesDS.ptpTimescale = getFlag(header->flagField[1], FLAG1_PTP_TIMESCALE);
 8014212:	68bb      	ldr	r3, [r7, #8]
 8014214:	7a1b      	ldrb	r3, [r3, #8]
 8014216:	f003 0308 	and.w	r3, r3, #8
 801421a:	2b00      	cmp	r3, #0
 801421c:	bf14      	ite	ne
 801421e:	2301      	movne	r3, #1
 8014220:	2300      	moveq	r3, #0
 8014222:	b2da      	uxtb	r2, r3
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	ptpClock->timePropertiesDS.timeSource = announce->timeSource;
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	f893 2020 	ldrb.w	r2, [r3, #32]
 8014230:	68fb      	ldr	r3, [r7, #12]
 8014232:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
}
 8014236:	bf00      	nop
 8014238:	3718      	adds	r7, #24
 801423a:	46bd      	mov	sp, r7
 801423c:	bd80      	pop	{r7, pc}

0801423e <copyD0>:

/**
 * \brief Copy local data set into header and announce message. 9.3.4 table 12
 */
void copyD0(MsgHeader *header, MsgAnnounce *announce, PtpClock *ptpClock)
{
 801423e:	b580      	push	{r7, lr}
 8014240:	b084      	sub	sp, #16
 8014242:	af00      	add	r7, sp, #0
 8014244:	60f8      	str	r0, [r7, #12]
 8014246:	60b9      	str	r1, [r7, #8]
 8014248:	607a      	str	r2, [r7, #4]
	announce->grandmasterPriority1 = ptpClock->defaultDS.priority1;
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	7c1a      	ldrb	r2, [r3, #16]
 801424e:	68bb      	ldr	r3, [r7, #8]
 8014250:	739a      	strb	r2, [r3, #14]
	memcpy(announce->grandmasterIdentity, ptpClock->defaultDS.clockIdentity, CLOCK_IDENTITY_LENGTH);
 8014252:	68bb      	ldr	r3, [r7, #8]
 8014254:	f103 0015 	add.w	r0, r3, #21
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	3301      	adds	r3, #1
 801425c:	2208      	movs	r2, #8
 801425e:	4619      	mov	r1, r3
 8014260:	f004 f84d 	bl	80182fe <memcpy>
	announce->grandmasterClockQuality.clockClass = ptpClock->defaultDS.clockQuality.clockClass;
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	7b1a      	ldrb	r2, [r3, #12]
 8014268:	68bb      	ldr	r3, [r7, #8]
 801426a:	741a      	strb	r2, [r3, #16]
	announce->grandmasterClockQuality.clockAccuracy = ptpClock->defaultDS.clockQuality.clockAccuracy;
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	7b5a      	ldrb	r2, [r3, #13]
 8014270:	68bb      	ldr	r3, [r7, #8]
 8014272:	745a      	strb	r2, [r3, #17]
	announce->grandmasterClockQuality.offsetScaledLogVariance = ptpClock->defaultDS.clockQuality.offsetScaledLogVariance;
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 801427a:	68bb      	ldr	r3, [r7, #8]
 801427c:	825a      	strh	r2, [r3, #18]
	announce->grandmasterPriority2 = ptpClock->defaultDS.priority2;
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	7c5a      	ldrb	r2, [r3, #17]
 8014282:	68bb      	ldr	r3, [r7, #8]
 8014284:	751a      	strb	r2, [r3, #20]
	announce->stepsRemoved = 0;
 8014286:	68bb      	ldr	r3, [r7, #8]
 8014288:	2200      	movs	r2, #0
 801428a:	83da      	strh	r2, [r3, #30]
	memcpy(header->sourcePortIdentity.clockIdentity, ptpClock->defaultDS.clockIdentity, CLOCK_IDENTITY_LENGTH);
 801428c:	68fb      	ldr	r3, [r7, #12]
 801428e:	f103 0018 	add.w	r0, r3, #24
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	3301      	adds	r3, #1
 8014296:	2208      	movs	r2, #8
 8014298:	4619      	mov	r1, r3
 801429a:	f004 f830 	bl	80182fe <memcpy>
}
 801429e:	bf00      	nop
 80142a0:	3710      	adds	r7, #16
 80142a2:	46bd      	mov	sp, r7
 80142a4:	bd80      	pop	{r7, pc}

080142a6 <bmcDataSetComparison>:
	}                                                                     \

/* Data set comparison bewteen two foreign masters (9.3.4 fig 27) return similar to memcmp() */
int8_t bmcDataSetComparison(MsgHeader *headerA, MsgAnnounce *announceA,
															MsgHeader *headerB, MsgAnnounce *announceB, PtpClock *ptpClock)
{
 80142a6:	b580      	push	{r7, lr}
 80142a8:	b086      	sub	sp, #24
 80142aa:	af00      	add	r7, sp, #0
 80142ac:	60f8      	str	r0, [r7, #12]
 80142ae:	60b9      	str	r1, [r7, #8]
 80142b0:	607a      	str	r2, [r7, #4]
 80142b2:	603b      	str	r3, [r7, #0]
	int grandmasterIdentityComp;
	short comp = 0;
 80142b4:	2300      	movs	r3, #0
 80142b6:	82fb      	strh	r3, [r7, #22]
	DBGV("bmcDataSetComparison\r\n");
	/* Identity comparison */

	/* GM identity of A == GM identity of B */
	/* TODO: zkontrolovat memcmp, co vraci za vysledky !*/
	grandmasterIdentityComp = memcmp(announceA->grandmasterIdentity, announceB->grandmasterIdentity, CLOCK_IDENTITY_LENGTH);
 80142b8:	68bb      	ldr	r3, [r7, #8]
 80142ba:	f103 0015 	add.w	r0, r3, #21
 80142be:	683b      	ldr	r3, [r7, #0]
 80142c0:	3315      	adds	r3, #21
 80142c2:	2208      	movs	r2, #8
 80142c4:	4619      	mov	r1, r3
 80142c6:	f004 f80b 	bl	80182e0 <memcmp>
 80142ca:	6138      	str	r0, [r7, #16]

	if (0 != grandmasterIdentityComp)
 80142cc:	693b      	ldr	r3, [r7, #16]
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d063      	beq.n	801439a <bmcDataSetComparison+0xf4>
	{
		/* Algoritgm part 1 - Figure 27 */
		COMPARE_AB_RETURN_BETTER(grandmasterPriority1,"grandmaster.Priority1");
 80142d2:	68bb      	ldr	r3, [r7, #8]
 80142d4:	7b9a      	ldrb	r2, [r3, #14]
 80142d6:	683b      	ldr	r3, [r7, #0]
 80142d8:	7b9b      	ldrb	r3, [r3, #14]
 80142da:	429a      	cmp	r2, r3
 80142dc:	d902      	bls.n	80142e4 <bmcDataSetComparison+0x3e>
 80142de:	f04f 33ff 	mov.w	r3, #4294967295
 80142e2:	e0d0      	b.n	8014486 <bmcDataSetComparison+0x1e0>
 80142e4:	683b      	ldr	r3, [r7, #0]
 80142e6:	7b9a      	ldrb	r2, [r3, #14]
 80142e8:	68bb      	ldr	r3, [r7, #8]
 80142ea:	7b9b      	ldrb	r3, [r3, #14]
 80142ec:	429a      	cmp	r2, r3
 80142ee:	d901      	bls.n	80142f4 <bmcDataSetComparison+0x4e>
 80142f0:	2301      	movs	r3, #1
 80142f2:	e0c8      	b.n	8014486 <bmcDataSetComparison+0x1e0>
		COMPARE_AB_RETURN_BETTER(grandmasterClockQuality.clockClass,"grandmaster.clockClass");
 80142f4:	68bb      	ldr	r3, [r7, #8]
 80142f6:	7c1a      	ldrb	r2, [r3, #16]
 80142f8:	683b      	ldr	r3, [r7, #0]
 80142fa:	7c1b      	ldrb	r3, [r3, #16]
 80142fc:	429a      	cmp	r2, r3
 80142fe:	d902      	bls.n	8014306 <bmcDataSetComparison+0x60>
 8014300:	f04f 33ff 	mov.w	r3, #4294967295
 8014304:	e0bf      	b.n	8014486 <bmcDataSetComparison+0x1e0>
 8014306:	683b      	ldr	r3, [r7, #0]
 8014308:	7c1a      	ldrb	r2, [r3, #16]
 801430a:	68bb      	ldr	r3, [r7, #8]
 801430c:	7c1b      	ldrb	r3, [r3, #16]
 801430e:	429a      	cmp	r2, r3
 8014310:	d901      	bls.n	8014316 <bmcDataSetComparison+0x70>
 8014312:	2301      	movs	r3, #1
 8014314:	e0b7      	b.n	8014486 <bmcDataSetComparison+0x1e0>
		COMPARE_AB_RETURN_BETTER(grandmasterClockQuality.clockAccuracy,"grandmaster.clockAccuracy");
 8014316:	68bb      	ldr	r3, [r7, #8]
 8014318:	7c5a      	ldrb	r2, [r3, #17]
 801431a:	683b      	ldr	r3, [r7, #0]
 801431c:	7c5b      	ldrb	r3, [r3, #17]
 801431e:	429a      	cmp	r2, r3
 8014320:	d902      	bls.n	8014328 <bmcDataSetComparison+0x82>
 8014322:	f04f 33ff 	mov.w	r3, #4294967295
 8014326:	e0ae      	b.n	8014486 <bmcDataSetComparison+0x1e0>
 8014328:	683b      	ldr	r3, [r7, #0]
 801432a:	7c5a      	ldrb	r2, [r3, #17]
 801432c:	68bb      	ldr	r3, [r7, #8]
 801432e:	7c5b      	ldrb	r3, [r3, #17]
 8014330:	429a      	cmp	r2, r3
 8014332:	d901      	bls.n	8014338 <bmcDataSetComparison+0x92>
 8014334:	2301      	movs	r3, #1
 8014336:	e0a6      	b.n	8014486 <bmcDataSetComparison+0x1e0>
		COMPARE_AB_RETURN_BETTER(grandmasterClockQuality.offsetScaledLogVariance,"grandmaster.Variance");
 8014338:	68bb      	ldr	r3, [r7, #8]
 801433a:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 801433e:	683b      	ldr	r3, [r7, #0]
 8014340:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8014344:	429a      	cmp	r2, r3
 8014346:	dd02      	ble.n	801434e <bmcDataSetComparison+0xa8>
 8014348:	f04f 33ff 	mov.w	r3, #4294967295
 801434c:	e09b      	b.n	8014486 <bmcDataSetComparison+0x1e0>
 801434e:	683b      	ldr	r3, [r7, #0]
 8014350:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8014354:	68bb      	ldr	r3, [r7, #8]
 8014356:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 801435a:	429a      	cmp	r2, r3
 801435c:	dd01      	ble.n	8014362 <bmcDataSetComparison+0xbc>
 801435e:	2301      	movs	r3, #1
 8014360:	e091      	b.n	8014486 <bmcDataSetComparison+0x1e0>
		COMPARE_AB_RETURN_BETTER(grandmasterPriority2,"grandmaster.Priority2");
 8014362:	68bb      	ldr	r3, [r7, #8]
 8014364:	7d1a      	ldrb	r2, [r3, #20]
 8014366:	683b      	ldr	r3, [r7, #0]
 8014368:	7d1b      	ldrb	r3, [r3, #20]
 801436a:	429a      	cmp	r2, r3
 801436c:	d902      	bls.n	8014374 <bmcDataSetComparison+0xce>
 801436e:	f04f 33ff 	mov.w	r3, #4294967295
 8014372:	e088      	b.n	8014486 <bmcDataSetComparison+0x1e0>
 8014374:	683b      	ldr	r3, [r7, #0]
 8014376:	7d1a      	ldrb	r2, [r3, #20]
 8014378:	68bb      	ldr	r3, [r7, #8]
 801437a:	7d1b      	ldrb	r3, [r3, #20]
 801437c:	429a      	cmp	r2, r3
 801437e:	d901      	bls.n	8014384 <bmcDataSetComparison+0xde>
 8014380:	2301      	movs	r3, #1
 8014382:	e080      	b.n	8014486 <bmcDataSetComparison+0x1e0>

		if (grandmasterIdentityComp > 0)
 8014384:	693b      	ldr	r3, [r7, #16]
 8014386:	2b00      	cmp	r3, #0
 8014388:	dd02      	ble.n	8014390 <bmcDataSetComparison+0xea>
		{
			DBGVV("bmcDataSetComparison: grandmaster.Identity: B better then A\r\n");
			return B_better_then_A;
 801438a:	f04f 33ff 	mov.w	r3, #4294967295
 801438e:	e07a      	b.n	8014486 <bmcDataSetComparison+0x1e0>
		}
		else if (grandmasterIdentityComp < 0)
 8014390:	693b      	ldr	r3, [r7, #16]
 8014392:	2b00      	cmp	r3, #0
 8014394:	da01      	bge.n	801439a <bmcDataSetComparison+0xf4>
		{
			DBGVV("bmcDataSetComparison: grandmaster.Identity: A better then B\r\n");
			return A_better_then_B;
 8014396:	2301      	movs	r3, #1
 8014398:	e075      	b.n	8014486 <bmcDataSetComparison+0x1e0>
		}
	}

	/* Algoritgm part 2 - Figure 28 */
	if ((announceA->stepsRemoved) > (announceB->stepsRemoved + 1))
 801439a:	68bb      	ldr	r3, [r7, #8]
 801439c:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80143a0:	461a      	mov	r2, r3
 80143a2:	683b      	ldr	r3, [r7, #0]
 80143a4:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80143a8:	3301      	adds	r3, #1
 80143aa:	429a      	cmp	r2, r3
 80143ac:	dd02      	ble.n	80143b4 <bmcDataSetComparison+0x10e>
	{
		DBGVV("bmcDataSetComparison: stepsRemoved: B better then A\r\n");
		return B_better_then_A;
 80143ae:	f04f 33ff 	mov.w	r3, #4294967295
 80143b2:	e068      	b.n	8014486 <bmcDataSetComparison+0x1e0>
	}

	if ((announceB->stepsRemoved) > (announceA->stepsRemoved + 1))
 80143b4:	683b      	ldr	r3, [r7, #0]
 80143b6:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80143ba:	461a      	mov	r2, r3
 80143bc:	68bb      	ldr	r3, [r7, #8]
 80143be:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80143c2:	3301      	adds	r3, #1
 80143c4:	429a      	cmp	r2, r3
 80143c6:	dd01      	ble.n	80143cc <bmcDataSetComparison+0x126>
	{
		DBGVV("bmcDataSetComparison: stepsRemoved: A better then B\r\n");
		return A_better_then_B;
 80143c8:	2301      	movs	r3, #1
 80143ca:	e05c      	b.n	8014486 <bmcDataSetComparison+0x1e0>
	}

	if ((announceA->stepsRemoved) > (announceB->stepsRemoved))
 80143cc:	68bb      	ldr	r3, [r7, #8]
 80143ce:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 80143d2:	683b      	ldr	r3, [r7, #0]
 80143d4:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80143d8:	429a      	cmp	r2, r3
 80143da:	dd1a      	ble.n	8014412 <bmcDataSetComparison+0x16c>
	{
		comp = memcmp(headerA->sourcePortIdentity.clockIdentity, ptpClock->portDS.portIdentity.clockIdentity, CLOCK_IDENTITY_LENGTH);
 80143dc:	68fb      	ldr	r3, [r7, #12]
 80143de:	f103 0018 	add.w	r0, r3, #24
 80143e2:	6a3b      	ldr	r3, [r7, #32]
 80143e4:	3358      	adds	r3, #88	; 0x58
 80143e6:	2208      	movs	r2, #8
 80143e8:	4619      	mov	r1, r3
 80143ea:	f003 ff79 	bl	80182e0 <memcmp>
 80143ee:	4603      	mov	r3, r0
 80143f0:	82fb      	strh	r3, [r7, #22]

		if (comp > 0)
 80143f2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	dd02      	ble.n	8014400 <bmcDataSetComparison+0x15a>
		{
			/* reciever < sender */
			DBGVV("bmcDataSetComparison: PortIdentity: B better then A\r\n");
			return B_better_then_A;
 80143fa:	f04f 33ff 	mov.w	r3, #4294967295
 80143fe:	e042      	b.n	8014486 <bmcDataSetComparison+0x1e0>
		}
		else if (comp < 0)
 8014400:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014404:	2b00      	cmp	r3, #0
 8014406:	da02      	bge.n	801440e <bmcDataSetComparison+0x168>
		{
			/* reciever > sender */
			DBGVV("bmcDataSetComparison: PortIdentity: B better by topology then A\r\n");
			return B_better_by_topology_then_A;
 8014408:	f04f 33ff 	mov.w	r3, #4294967295
 801440c:	e03b      	b.n	8014486 <bmcDataSetComparison+0x1e0>
		}
		else
		{
			DBGVV("bmcDataSetComparison: ERROR 1\r\n");
			return ERROR_1;
 801440e:	2300      	movs	r3, #0
 8014410:	e039      	b.n	8014486 <bmcDataSetComparison+0x1e0>
		}
	}
	else if ((announceA->stepsRemoved) < (announceB->stepsRemoved))
 8014412:	68bb      	ldr	r3, [r7, #8]
 8014414:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 8014418:	683b      	ldr	r3, [r7, #0]
 801441a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801441e:	429a      	cmp	r2, r3
 8014420:	da18      	bge.n	8014454 <bmcDataSetComparison+0x1ae>
	{
		comp = memcmp(headerB->sourcePortIdentity.clockIdentity, ptpClock->portDS.portIdentity.clockIdentity, CLOCK_IDENTITY_LENGTH);
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	f103 0018 	add.w	r0, r3, #24
 8014428:	6a3b      	ldr	r3, [r7, #32]
 801442a:	3358      	adds	r3, #88	; 0x58
 801442c:	2208      	movs	r2, #8
 801442e:	4619      	mov	r1, r3
 8014430:	f003 ff56 	bl	80182e0 <memcmp>
 8014434:	4603      	mov	r3, r0
 8014436:	82fb      	strh	r3, [r7, #22]
		if (comp > 0)
 8014438:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801443c:	2b00      	cmp	r3, #0
 801443e:	dd01      	ble.n	8014444 <bmcDataSetComparison+0x19e>
		{
			/* reciever < sender */
			DBGVV("bmcDataSetComparison: PortIdentity: A better then B\r\n");
			return A_better_then_B;
 8014440:	2301      	movs	r3, #1
 8014442:	e020      	b.n	8014486 <bmcDataSetComparison+0x1e0>
		}
		else if (comp < 0)
 8014444:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014448:	2b00      	cmp	r3, #0
 801444a:	da01      	bge.n	8014450 <bmcDataSetComparison+0x1aa>
		{
			/* reciever > sender */
			DBGVV("bmcDataSetComparison: PortIdentity: A better by topology then B\r\n");
			return A_better_by_topology_then_B;
 801444c:	2301      	movs	r3, #1
 801444e:	e01a      	b.n	8014486 <bmcDataSetComparison+0x1e0>
		}
		else
		{
			DBGV("bmcDataSetComparison: ERROR 1\r\n");
			return ERROR_1;
 8014450:	2300      	movs	r3, #0
 8014452:	e018      	b.n	8014486 <bmcDataSetComparison+0x1e0>
		}
	}

	comp = memcmp(headerA->sourcePortIdentity.clockIdentity, headerB->sourcePortIdentity.clockIdentity, CLOCK_IDENTITY_LENGTH);
 8014454:	68fb      	ldr	r3, [r7, #12]
 8014456:	f103 0018 	add.w	r0, r3, #24
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	3318      	adds	r3, #24
 801445e:	2208      	movs	r2, #8
 8014460:	4619      	mov	r1, r3
 8014462:	f003 ff3d 	bl	80182e0 <memcmp>
 8014466:	4603      	mov	r3, r0
 8014468:	82fb      	strh	r3, [r7, #22]
	if (comp > 0)
 801446a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801446e:	2b00      	cmp	r3, #0
 8014470:	dd02      	ble.n	8014478 <bmcDataSetComparison+0x1d2>
	{
		/* A > B */
		DBGVV("bmcDataSetComparison: sourcePortIdentity: B better by topology then A\r\n");
		return B_better_by_topology_then_A;
 8014472:	f04f 33ff 	mov.w	r3, #4294967295
 8014476:	e006      	b.n	8014486 <bmcDataSetComparison+0x1e0>
	}
	else if (comp < 0)
 8014478:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801447c:	2b00      	cmp	r3, #0
 801447e:	da01      	bge.n	8014484 <bmcDataSetComparison+0x1de>
	{
		/* B > A */
		DBGVV("bmcDataSetComparison: sourcePortIdentity: A better by topology then B\r\n");
		return A_better_by_topology_then_B;
 8014480:	2301      	movs	r3, #1
 8014482:	e000      	b.n	8014486 <bmcDataSetComparison+0x1e0>
	}

	/* compare port numbers of recievers of A and B - same as we have only one port */
	DBGV("bmcDataSetComparison: ERROR 2\r\n");
	return ERROR_2;
 8014484:	2300      	movs	r3, #0
}
 8014486:	4618      	mov	r0, r3
 8014488:	3718      	adds	r7, #24
 801448a:	46bd      	mov	sp, r7
 801448c:	bd80      	pop	{r7, pc}

0801448e <bmcStateDecision>:

/* State decision algorithm 9.3.3 Fig 26 */
uint8_t bmcStateDecision(MsgHeader *header, MsgAnnounce *announce, PtpClock *ptpClock)
{
 801448e:	b580      	push	{r7, lr}
 8014490:	b088      	sub	sp, #32
 8014492:	af02      	add	r7, sp, #8
 8014494:	60f8      	str	r0, [r7, #12]
 8014496:	60b9      	str	r1, [r7, #8]
 8014498:	607a      	str	r2, [r7, #4]
	int comp;

	if ((!ptpClock->foreignMasterDS.count) && (ptpClock->portDS.portState == PTP_LISTENING))
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	f9b3 3078 	ldrsh.w	r3, [r3, #120]	; 0x78
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d106      	bne.n	80144b2 <bmcStateDecision+0x24>
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80144aa:	2b03      	cmp	r3, #3
 80144ac:	d101      	bne.n	80144b2 <bmcStateDecision+0x24>
	{
		return PTP_LISTENING;
 80144ae:	2303      	movs	r3, #3
 80144b0:	e036      	b.n	8014520 <bmcStateDecision+0x92>
	}

	copyD0(&ptpClock->msgTmpHeader, &ptpClock->msgTmp.announce, ptpClock);
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	f103 0080 	add.w	r0, r3, #128	; 0x80
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	33a8      	adds	r3, #168	; 0xa8
 80144bc:	687a      	ldr	r2, [r7, #4]
 80144be:	4619      	mov	r1, r3
 80144c0:	f7ff febd 	bl	801423e <copyD0>

	comp = bmcDataSetComparison(&ptpClock->msgTmpHeader, &ptpClock->msgTmp.announce, header, announce, ptpClock);
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	f103 0080 	add.w	r0, r3, #128	; 0x80
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	f103 01a8 	add.w	r1, r3, #168	; 0xa8
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	9300      	str	r3, [sp, #0]
 80144d4:	68bb      	ldr	r3, [r7, #8]
 80144d6:	68fa      	ldr	r2, [r7, #12]
 80144d8:	f7ff fee5 	bl	80142a6 <bmcDataSetComparison>
 80144dc:	4603      	mov	r3, r0
 80144de:	617b      	str	r3, [r7, #20]

	DBGV("bmcStateDecision: %d\r\n", comp);

	if (ptpClock->defaultDS.clockQuality.clockClass < 128)
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	7b1b      	ldrb	r3, [r3, #12]
 80144e4:	b25b      	sxtb	r3, r3
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	db0c      	blt.n	8014504 <bmcStateDecision+0x76>
	{
		if (A_better_then_B == comp)
 80144ea:	697b      	ldr	r3, [r7, #20]
 80144ec:	2b01      	cmp	r3, #1
 80144ee:	d104      	bne.n	80144fa <bmcStateDecision+0x6c>
		{
			m1(ptpClock);  /* M1 */
 80144f0:	6878      	ldr	r0, [r7, #4]
 80144f2:	f7ff fd7e 	bl	8013ff2 <m1>
			return PTP_MASTER;
 80144f6:	2305      	movs	r3, #5
 80144f8:	e012      	b.n	8014520 <bmcStateDecision+0x92>
		}
		else
		{
			p1(ptpClock);
 80144fa:	6878      	ldr	r0, [r7, #4]
 80144fc:	f7ff fde5 	bl	80140ca <p1>
			return PTP_PASSIVE;
 8014500:	2306      	movs	r3, #6
 8014502:	e00d      	b.n	8014520 <bmcStateDecision+0x92>
		}
	}
	else
	{
		if (A_better_then_B == comp)
 8014504:	697b      	ldr	r3, [r7, #20]
 8014506:	2b01      	cmp	r3, #1
 8014508:	d104      	bne.n	8014514 <bmcStateDecision+0x86>
		{
			m2(ptpClock); /* M2 */
 801450a:	6878      	ldr	r0, [r7, #4]
 801450c:	f7ff fd71 	bl	8013ff2 <m1>
			return PTP_MASTER;
 8014510:	2305      	movs	r3, #5
 8014512:	e005      	b.n	8014520 <bmcStateDecision+0x92>
		}
		else
		{
			s1(ptpClock, header, announce);
 8014514:	68ba      	ldr	r2, [r7, #8]
 8014516:	68f9      	ldr	r1, [r7, #12]
 8014518:	6878      	ldr	r0, [r7, #4]
 801451a:	f7ff fddf 	bl	80140dc <s1>
			return PTP_SLAVE;
 801451e:	2308      	movs	r3, #8
		}
	}
}
 8014520:	4618      	mov	r0, r3
 8014522:	3718      	adds	r7, #24
 8014524:	46bd      	mov	sp, r7
 8014526:	bd80      	pop	{r7, pc}

08014528 <bmc>:



uint8_t bmc(PtpClock *ptpClock)
{
 8014528:	b5b0      	push	{r4, r5, r7, lr}
 801452a:	b086      	sub	sp, #24
 801452c:	af02      	add	r7, sp, #8
 801452e:	6078      	str	r0, [r7, #4]
	int16_t i, best;

	/* Starting from i = 1, not necessery to test record[i = 0] against record[best = 0] -> they are the same */
	for (i = 1, best = 0; i < ptpClock->foreignMasterDS.count; i++)
 8014530:	2301      	movs	r3, #1
 8014532:	81fb      	strh	r3, [r7, #14]
 8014534:	2300      	movs	r3, #0
 8014536:	81bb      	strh	r3, [r7, #12]
 8014538:	e039      	b.n	80145ae <bmc+0x86>
	{
		if ((bmcDataSetComparison(&ptpClock->foreignMasterDS.records[i].header, &ptpClock->foreignMasterDS.records[i].announce,
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 801453e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014542:	2158      	movs	r1, #88	; 0x58
 8014544:	fb01 f303 	mul.w	r3, r1, r3
 8014548:	4413      	add	r3, r2
 801454a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8014552:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014556:	2158      	movs	r1, #88	; 0x58
 8014558:	fb01 f303 	mul.w	r3, r1, r3
 801455c:	4413      	add	r3, r2
 801455e:	f103 040c 	add.w	r4, r3, #12
															&ptpClock->foreignMasterDS.records[best].header, &ptpClock->foreignMasterDS.records[best].announce, ptpClock)) < 0)
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8014566:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801456a:	2158      	movs	r1, #88	; 0x58
 801456c:	fb01 f303 	mul.w	r3, r1, r3
 8014570:	4413      	add	r3, r2
		if ((bmcDataSetComparison(&ptpClock->foreignMasterDS.records[i].header, &ptpClock->foreignMasterDS.records[i].announce,
 8014572:	f103 0530 	add.w	r5, r3, #48	; 0x30
															&ptpClock->foreignMasterDS.records[best].header, &ptpClock->foreignMasterDS.records[best].announce, ptpClock)) < 0)
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 801457a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 801457e:	2158      	movs	r1, #88	; 0x58
 8014580:	fb01 f303 	mul.w	r3, r1, r3
 8014584:	4413      	add	r3, r2
		if ((bmcDataSetComparison(&ptpClock->foreignMasterDS.records[i].header, &ptpClock->foreignMasterDS.records[i].announce,
 8014586:	f103 020c 	add.w	r2, r3, #12
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	9300      	str	r3, [sp, #0]
 801458e:	4613      	mov	r3, r2
 8014590:	462a      	mov	r2, r5
 8014592:	4621      	mov	r1, r4
 8014594:	f7ff fe87 	bl	80142a6 <bmcDataSetComparison>
 8014598:	4603      	mov	r3, r0
 801459a:	2b00      	cmp	r3, #0
 801459c:	da01      	bge.n	80145a2 <bmc+0x7a>
		{
			best = i;
 801459e:	89fb      	ldrh	r3, [r7, #14]
 80145a0:	81bb      	strh	r3, [r7, #12]
	for (i = 1, best = 0; i < ptpClock->foreignMasterDS.count; i++)
 80145a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80145a6:	b29b      	uxth	r3, r3
 80145a8:	3301      	adds	r3, #1
 80145aa:	b29b      	uxth	r3, r3
 80145ac:	81fb      	strh	r3, [r7, #14]
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	f9b3 3078 	ldrsh.w	r3, [r3, #120]	; 0x78
 80145b4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80145b8:	429a      	cmp	r2, r3
 80145ba:	dbbe      	blt.n	801453a <bmc+0x12>
		}
	}

	DBGV("bmc: best record %d\r\n", best);
	ptpClock->foreignMasterDS.best = best;
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	89ba      	ldrh	r2, [r7, #12]
 80145c0:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

	return bmcStateDecision(&ptpClock->foreignMasterDS.records[best].header, &ptpClock->foreignMasterDS.records[best].announce, ptpClock);
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80145c8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80145cc:	2158      	movs	r1, #88	; 0x58
 80145ce:	fb01 f303 	mul.w	r3, r1, r3
 80145d2:	4413      	add	r3, r2
 80145d4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80145dc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80145e0:	2158      	movs	r1, #88	; 0x58
 80145e2:	fb01 f303 	mul.w	r3, r1, r3
 80145e6:	4413      	add	r3, r2
 80145e8:	330c      	adds	r3, #12
 80145ea:	687a      	ldr	r2, [r7, #4]
 80145ec:	4619      	mov	r1, r3
 80145ee:	f7ff ff4e 	bl	801448e <bmcStateDecision>
 80145f2:	4603      	mov	r3, r0
}
 80145f4:	4618      	mov	r0, r3
 80145f6:	3710      	adds	r7, #16
 80145f8:	46bd      	mov	sp, r7
 80145fa:	bdb0      	pop	{r4, r5, r7, pc}

080145fc <stateString>:

static bool doInit(PtpClock*);

#ifdef PTPD_DBG
static char* stateString(uint8_t state)
{
 80145fc:	b480      	push	{r7}
 80145fe:	b083      	sub	sp, #12
 8014600:	af00      	add	r7, sp, #0
 8014602:	4603      	mov	r3, r0
 8014604:	71fb      	strb	r3, [r7, #7]
	switch (state)
 8014606:	79fb      	ldrb	r3, [r7, #7]
 8014608:	2b08      	cmp	r3, #8
 801460a:	d827      	bhi.n	801465c <stateString+0x60>
 801460c:	a201      	add	r2, pc, #4	; (adr r2, 8014614 <stateString+0x18>)
 801460e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014612:	bf00      	nop
 8014614:	08014639 	.word	0x08014639
 8014618:	0801463d 	.word	0x0801463d
 801461c:	08014641 	.word	0x08014641
 8014620:	08014645 	.word	0x08014645
 8014624:	08014649 	.word	0x08014649
 8014628:	0801464d 	.word	0x0801464d
 801462c:	08014651 	.word	0x08014651
 8014630:	08014655 	.word	0x08014655
 8014634:	08014659 	.word	0x08014659
	{
	case PTP_INITIALIZING:
		return (char*) "PTP_INITIALIZING\r\n";
 8014638:	4b0c      	ldr	r3, [pc, #48]	; (801466c <stateString+0x70>)
 801463a:	e011      	b.n	8014660 <stateString+0x64>
	case PTP_FAULTY:
		return (char*) "PTP_FAULTY\r\n";
 801463c:	4b0c      	ldr	r3, [pc, #48]	; (8014670 <stateString+0x74>)
 801463e:	e00f      	b.n	8014660 <stateString+0x64>
	case PTP_DISABLED:
		return (char*) "PTP_DISABLED\r\n";
 8014640:	4b0c      	ldr	r3, [pc, #48]	; (8014674 <stateString+0x78>)
 8014642:	e00d      	b.n	8014660 <stateString+0x64>
	case PTP_LISTENING:
		return (char*) "PTP_LISTENING\r\n";
 8014644:	4b0c      	ldr	r3, [pc, #48]	; (8014678 <stateString+0x7c>)
 8014646:	e00b      	b.n	8014660 <stateString+0x64>
	case PTP_PRE_MASTER:
		return (char*) "PTP_PRE_MASTER\r\n";
 8014648:	4b0c      	ldr	r3, [pc, #48]	; (801467c <stateString+0x80>)
 801464a:	e009      	b.n	8014660 <stateString+0x64>
	case PTP_MASTER:
		return (char*) "PTP_MASTER\r\n";
 801464c:	4b0c      	ldr	r3, [pc, #48]	; (8014680 <stateString+0x84>)
 801464e:	e007      	b.n	8014660 <stateString+0x64>
	case PTP_PASSIVE:
		return (char*) "PTP_PASSIVE\r\n";
 8014650:	4b0c      	ldr	r3, [pc, #48]	; (8014684 <stateString+0x88>)
 8014652:	e005      	b.n	8014660 <stateString+0x64>
	case PTP_UNCALIBRATED:
		return (char*) "PTP_UNCALIRATED\r\n";
 8014654:	4b0c      	ldr	r3, [pc, #48]	; (8014688 <stateString+0x8c>)
 8014656:	e003      	b.n	8014660 <stateString+0x64>
	case PTP_SLAVE:
		return (char*) "PTP_SLAVE\r\n";
 8014658:	4b0c      	ldr	r3, [pc, #48]	; (801468c <stateString+0x90>)
 801465a:	e001      	b.n	8014660 <stateString+0x64>
	default:
		break;
 801465c:	bf00      	nop
	}
	return (char*) "UNKNOWN";
 801465e:	4b0c      	ldr	r3, [pc, #48]	; (8014690 <stateString+0x94>)
}
 8014660:	4618      	mov	r0, r3
 8014662:	370c      	adds	r7, #12
 8014664:	46bd      	mov	sp, r7
 8014666:	bc80      	pop	{r7}
 8014668:	4770      	bx	lr
 801466a:	bf00      	nop
 801466c:	0801bb5c 	.word	0x0801bb5c
 8014670:	0801bb70 	.word	0x0801bb70
 8014674:	0801bb80 	.word	0x0801bb80
 8014678:	0801bb90 	.word	0x0801bb90
 801467c:	0801bba0 	.word	0x0801bba0
 8014680:	0801bbb4 	.word	0x0801bbb4
 8014684:	0801bbc4 	.word	0x0801bbc4
 8014688:	0801bbd4 	.word	0x0801bbd4
 801468c:	0801bbe8 	.word	0x0801bbe8
 8014690:	0801bbf4 	.word	0x0801bbf4

08014694 <toState>:
#endif

/* Perform actions required when leaving 'port_state' and entering 'state' */
void toState(PtpClock *ptpClock, uint8_t state)
{
 8014694:	b580      	push	{r7, lr}
 8014696:	b088      	sub	sp, #32
 8014698:	af00      	add	r7, sp, #0
 801469a:	6078      	str	r0, [r7, #4]
 801469c:	460b      	mov	r3, r1
 801469e:	70fb      	strb	r3, [r7, #3]
	ptpClock->messageActivity = TRUE;
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	2201      	movs	r2, #1
 80146a4:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8

	DBG("leaving state %s\r\n", stateString(ptpClock->portDS.portState));
 80146a8:	f107 0318 	add.w	r3, r7, #24
 80146ac:	4618      	mov	r0, r3
 80146ae:	f003 fcbf 	bl	8018030 <getTime>
 80146b2:	69bb      	ldr	r3, [r7, #24]
 80146b4:	69fa      	ldr	r2, [r7, #28]
 80146b6:	4619      	mov	r1, r3
 80146b8:	48c5      	ldr	r0, [pc, #788]	; (80149d0 <toState+0x33c>)
 80146ba:	f003 fe33 	bl	8018324 <iprintf>
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80146c4:	4618      	mov	r0, r3
 80146c6:	f7ff ff99 	bl	80145fc <stateString>
 80146ca:	4603      	mov	r3, r0
 80146cc:	4619      	mov	r1, r3
 80146ce:	48c1      	ldr	r0, [pc, #772]	; (80149d4 <toState+0x340>)
 80146d0:	f003 fe28 	bl	8018324 <iprintf>

	/* leaving state tasks */
	switch (ptpClock->portDS.portState)
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80146da:	3b03      	subs	r3, #3
 80146dc:	2b05      	cmp	r3, #5
 80146de:	d851      	bhi.n	8014784 <toState+0xf0>
 80146e0:	a201      	add	r2, pc, #4	; (adr r2, 80146e8 <toState+0x54>)
 80146e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80146e6:	bf00      	nop
 80146e8:	08014769 	.word	0x08014769
 80146ec:	08014777 	.word	0x08014777
 80146f0:	08014701 	.word	0x08014701
 80146f4:	08014755 	.word	0x08014755
 80146f8:	0801471b 	.word	0x0801471b
 80146fc:	0801471b 	.word	0x0801471b
	{
	case PTP_MASTER:

		initClock(ptpClock);
 8014700:	6878      	ldr	r0, [r7, #4]
 8014702:	f003 f941 	bl	8017988 <initClock>
		timerStop(SYNC_INTERVAL_TIMER);
 8014706:	2002      	movs	r0, #2
 8014708:	f003 fd6a 	bl	80181e0 <timerStop>
		timerStop(ANNOUNCE_INTERVAL_TIMER);
 801470c:	2004      	movs	r0, #4
 801470e:	f003 fd67 	bl	80181e0 <timerStop>
		timerStop(PDELAYREQ_INTERVAL_TIMER);
 8014712:	2000      	movs	r0, #0
 8014714:	f003 fd64 	bl	80181e0 <timerStop>
		break;
 8014718:	e037      	b.n	801478a <toState+0xf6>

	case PTP_UNCALIBRATED:
	case PTP_SLAVE:

		if (state == PTP_UNCALIBRATED || state == PTP_SLAVE)
 801471a:	78fb      	ldrb	r3, [r7, #3]
 801471c:	2b07      	cmp	r3, #7
 801471e:	d033      	beq.n	8014788 <toState+0xf4>
 8014720:	78fb      	ldrb	r3, [r7, #3]
 8014722:	2b08      	cmp	r3, #8
 8014724:	d030      	beq.n	8014788 <toState+0xf4>
		{
			break;
		}
		timerStop(ANNOUNCE_RECEIPT_TIMER);
 8014726:	2003      	movs	r0, #3
 8014728:	f003 fd5a 	bl	80181e0 <timerStop>
		switch (ptpClock->portDS.delayMechanism)
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8014732:	2b01      	cmp	r3, #1
 8014734:	d002      	beq.n	801473c <toState+0xa8>
 8014736:	2b02      	cmp	r3, #2
 8014738:	d004      	beq.n	8014744 <toState+0xb0>
		case P2P:
			timerStop(PDELAYREQ_INTERVAL_TIMER);
			break;
		default:
			/* none */
			break;
 801473a:	e007      	b.n	801474c <toState+0xb8>
			timerStop(DELAYREQ_INTERVAL_TIMER);
 801473c:	2001      	movs	r0, #1
 801473e:	f003 fd4f 	bl	80181e0 <timerStop>
			break;
 8014742:	e003      	b.n	801474c <toState+0xb8>
			timerStop(PDELAYREQ_INTERVAL_TIMER);
 8014744:	2000      	movs	r0, #0
 8014746:	f003 fd4b 	bl	80181e0 <timerStop>
			break;
 801474a:	bf00      	nop
		}
		initClock(ptpClock);
 801474c:	6878      	ldr	r0, [r7, #4]
 801474e:	f003 f91b 	bl	8017988 <initClock>

		break;
 8014752:	e01a      	b.n	801478a <toState+0xf6>

	case PTP_PASSIVE:

		initClock(ptpClock);
 8014754:	6878      	ldr	r0, [r7, #4]
 8014756:	f003 f917 	bl	8017988 <initClock>
		timerStop(PDELAYREQ_INTERVAL_TIMER);
 801475a:	2000      	movs	r0, #0
 801475c:	f003 fd40 	bl	80181e0 <timerStop>
		timerStop(ANNOUNCE_RECEIPT_TIMER);
 8014760:	2003      	movs	r0, #3
 8014762:	f003 fd3d 	bl	80181e0 <timerStop>
		break;
 8014766:	e010      	b.n	801478a <toState+0xf6>

	case PTP_LISTENING:

		initClock(ptpClock);
 8014768:	6878      	ldr	r0, [r7, #4]
 801476a:	f003 f90d 	bl	8017988 <initClock>
		timerStop(ANNOUNCE_RECEIPT_TIMER);
 801476e:	2003      	movs	r0, #3
 8014770:	f003 fd36 	bl	80181e0 <timerStop>
		break;
 8014774:	e009      	b.n	801478a <toState+0xf6>

	case PTP_PRE_MASTER:

		initClock(ptpClock);
 8014776:	6878      	ldr	r0, [r7, #4]
 8014778:	f003 f906 	bl	8017988 <initClock>
		timerStop(QUALIFICATION_TIMEOUT);
 801477c:	2005      	movs	r0, #5
 801477e:	f003 fd2f 	bl	80181e0 <timerStop>
		break;
 8014782:	e002      	b.n	801478a <toState+0xf6>

	default:
		break;
 8014784:	bf00      	nop
 8014786:	e000      	b.n	801478a <toState+0xf6>
	}

	DBG("entering state %s\r\n", stateString(state));
 8014788:	bf00      	nop
 801478a:	f107 0310 	add.w	r3, r7, #16
 801478e:	4618      	mov	r0, r3
 8014790:	f003 fc4e 	bl	8018030 <getTime>
 8014794:	693b      	ldr	r3, [r7, #16]
 8014796:	697a      	ldr	r2, [r7, #20]
 8014798:	4619      	mov	r1, r3
 801479a:	488d      	ldr	r0, [pc, #564]	; (80149d0 <toState+0x33c>)
 801479c:	f003 fdc2 	bl	8018324 <iprintf>
 80147a0:	78fb      	ldrb	r3, [r7, #3]
 80147a2:	4618      	mov	r0, r3
 80147a4:	f7ff ff2a 	bl	80145fc <stateString>
 80147a8:	4603      	mov	r3, r0
 80147aa:	4619      	mov	r1, r3
 80147ac:	488a      	ldr	r0, [pc, #552]	; (80149d8 <toState+0x344>)
 80147ae:	f003 fdb9 	bl	8018324 <iprintf>

	/* Entering state tasks */
	switch (state)
 80147b2:	78fb      	ldrb	r3, [r7, #3]
 80147b4:	2b08      	cmp	r3, #8
 80147b6:	f200 8199 	bhi.w	8014aec <toState+0x458>
 80147ba:	a201      	add	r2, pc, #4	; (adr r2, 80147c0 <toState+0x12c>)
 80147bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147c0:	080147e5 	.word	0x080147e5
 80147c4:	080147f7 	.word	0x080147f7
 80147c8:	08014801 	.word	0x08014801
 80147cc:	0801480b 	.word	0x0801480b
 80147d0:	0801485b 	.word	0x0801485b
 80147d4:	0801485b 	.word	0x0801485b
 80147d8:	0801496b 	.word	0x0801496b
 80147dc:	08014a0b 	.word	0x08014a0b
 80147e0:	08014ae3 	.word	0x08014ae3
	{
	case PTP_INITIALIZING:

		ptpClock->portDS.portState = PTP_INITIALIZING;
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	2200      	movs	r2, #0
 80147e8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
		ptpClock->recommendedState = PTP_INITIALIZING;
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	2200      	movs	r2, #0
 80147f0:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
		break;
 80147f4:	e17b      	b.n	8014aee <toState+0x45a>

	case PTP_FAULTY:

		ptpClock->portDS.portState = PTP_FAULTY;
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	2201      	movs	r2, #1
 80147fa:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
		break;
 80147fe:	e176      	b.n	8014aee <toState+0x45a>

	case PTP_DISABLED:

		ptpClock->portDS.portState = PTP_DISABLED;
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	2202      	movs	r2, #2
 8014804:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
		break;
 8014808:	e171      	b.n	8014aee <toState+0x45a>

	case PTP_LISTENING:

		timerStart(ANNOUNCE_RECEIPT_TIMER,
				(ptpClock->portDS.announceReceiptTimeout)
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8014810:	4619      	mov	r1, r3
						* (pow2ms(ptpClock->portDS.logAnnounceInterval)));
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 8014818:	2b00      	cmp	r3, #0
 801481a:	dd07      	ble.n	801482c <toState+0x198>
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 8014822:	461a      	mov	r2, r3
 8014824:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014828:	4093      	lsls	r3, r2
 801482a:	e007      	b.n	801483c <toState+0x1a8>
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 8014832:	425b      	negs	r3, r3
 8014834:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014838:	fa42 f303 	asr.w	r3, r2, r3
 801483c:	fb01 f303 	mul.w	r3, r1, r3
		timerStart(ANNOUNCE_RECEIPT_TIMER,
 8014840:	4619      	mov	r1, r3
 8014842:	2003      	movs	r0, #3
 8014844:	f003 fce8 	bl	8018218 <timerStart>
		ptpClock->portDS.portState = PTP_LISTENING;
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	2203      	movs	r2, #3
 801484c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
		ptpClock->recommendedState = PTP_LISTENING;
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	2203      	movs	r2, #3
 8014854:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
		break;
 8014858:	e149      	b.n	8014aee <toState+0x45a>
		 break;
		 */

	case PTP_MASTER:

		ptpClock->portDS.logMinDelayReqInterval = DEFAULT_DELAYREQ_INTERVAL; /* it may change during slave state */
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	2202      	movs	r2, #2
 801485e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
		timerStart(SYNC_INTERVAL_TIMER,
				pow2ms(ptpClock->portDS.logSyncInterval));
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
		timerStart(SYNC_INTERVAL_TIMER,
 8014868:	2b00      	cmp	r3, #0
 801486a:	dd07      	ble.n	801487c <toState+0x1e8>
				pow2ms(ptpClock->portDS.logSyncInterval));
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 8014872:	461a      	mov	r2, r3
 8014874:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014878:	4093      	lsls	r3, r2
 801487a:	e007      	b.n	801488c <toState+0x1f8>
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 8014882:	425b      	negs	r3, r3
 8014884:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014888:	fa42 f303 	asr.w	r3, r2, r3
		timerStart(SYNC_INTERVAL_TIMER,
 801488c:	4619      	mov	r1, r3
 801488e:	2002      	movs	r0, #2
 8014890:	f003 fcc2 	bl	8018218 <timerStart>
		DBG("SYNC INTERVAL TIMER : %d \r\n",
 8014894:	f107 0308 	add.w	r3, r7, #8
 8014898:	4618      	mov	r0, r3
 801489a:	f003 fbc9 	bl	8018030 <getTime>
 801489e:	68bb      	ldr	r3, [r7, #8]
 80148a0:	68fa      	ldr	r2, [r7, #12]
 80148a2:	4619      	mov	r1, r3
 80148a4:	484a      	ldr	r0, [pc, #296]	; (80149d0 <toState+0x33c>)
 80148a6:	f003 fd3d 	bl	8018324 <iprintf>
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	dd07      	ble.n	80148c4 <toState+0x230>
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 80148ba:	461a      	mov	r2, r3
 80148bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80148c0:	4093      	lsls	r3, r2
 80148c2:	e007      	b.n	80148d4 <toState+0x240>
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 80148ca:	425b      	negs	r3, r3
 80148cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80148d0:	fa42 f303 	asr.w	r3, r2, r3
 80148d4:	4619      	mov	r1, r3
 80148d6:	4841      	ldr	r0, [pc, #260]	; (80149dc <toState+0x348>)
 80148d8:	f003 fd24 	bl	8018324 <iprintf>
				pow2ms(ptpClock->portDS.logSyncInterval))
		;
		timerStart(ANNOUNCE_INTERVAL_TIMER,
				pow2ms(ptpClock->portDS.logAnnounceInterval));
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
		timerStart(ANNOUNCE_INTERVAL_TIMER,
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	dd07      	ble.n	80148f6 <toState+0x262>
				pow2ms(ptpClock->portDS.logAnnounceInterval));
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 80148ec:	461a      	mov	r2, r3
 80148ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80148f2:	4093      	lsls	r3, r2
 80148f4:	e007      	b.n	8014906 <toState+0x272>
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 80148fc:	425b      	negs	r3, r3
 80148fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014902:	fa42 f303 	asr.w	r3, r2, r3
		timerStart(ANNOUNCE_INTERVAL_TIMER,
 8014906:	4619      	mov	r1, r3
 8014908:	2004      	movs	r0, #4
 801490a:	f003 fc85 	bl	8018218 <timerStart>

		switch (ptpClock->portDS.delayMechanism)
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8014914:	2b01      	cmp	r3, #1
 8014916:	d022      	beq.n	801495e <toState+0x2ca>
 8014918:	2b02      	cmp	r3, #2
 801491a:	d000      	beq.n	801491e <toState+0x28a>
					getRand(
							pow2ms(ptpClock->portDS.logMinPdelayReqInterval)
									+ 1));
			break;
		default:
			break;
 801491c:	e020      	b.n	8014960 <toState+0x2cc>
							pow2ms(ptpClock->portDS.logMinPdelayReqInterval)
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
			timerStart(PDELAYREQ_INTERVAL_TIMER,
 8014924:	2b00      	cmp	r3, #0
 8014926:	dd08      	ble.n	801493a <toState+0x2a6>
							pow2ms(ptpClock->portDS.logMinPdelayReqInterval)
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 801492e:	461a      	mov	r2, r3
 8014930:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014934:	4093      	lsls	r3, r2
									+ 1));
 8014936:	3301      	adds	r3, #1
 8014938:	e008      	b.n	801494c <toState+0x2b8>
							pow2ms(ptpClock->portDS.logMinPdelayReqInterval)
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8014940:	425b      	negs	r3, r3
 8014942:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014946:	fa42 f303 	asr.w	r3, r2, r3
									+ 1));
 801494a:	3301      	adds	r3, #1
			timerStart(PDELAYREQ_INTERVAL_TIMER,
 801494c:	4618      	mov	r0, r3
 801494e:	f003 fbad 	bl	80180ac <getRand>
 8014952:	4603      	mov	r3, r0
 8014954:	4619      	mov	r1, r3
 8014956:	2000      	movs	r0, #0
 8014958:	f003 fc5e 	bl	8018218 <timerStart>
			break;
 801495c:	e000      	b.n	8014960 <toState+0x2cc>
			break;
 801495e:	bf00      	nop
		}

		ptpClock->portDS.portState = PTP_MASTER;
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	2205      	movs	r2, #5
 8014964:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

		break;
 8014968:	e0c1      	b.n	8014aee <toState+0x45a>

	case PTP_PASSIVE:

		timerStart(ANNOUNCE_RECEIPT_TIMER,
				(ptpClock->portDS.announceReceiptTimeout)
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8014970:	4619      	mov	r1, r3
						* (pow2ms(ptpClock->portDS.logAnnounceInterval)));
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 8014978:	2b00      	cmp	r3, #0
 801497a:	dd07      	ble.n	801498c <toState+0x2f8>
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 8014982:	461a      	mov	r2, r3
 8014984:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014988:	4093      	lsls	r3, r2
 801498a:	e007      	b.n	801499c <toState+0x308>
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 8014992:	425b      	negs	r3, r3
 8014994:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014998:	fa42 f303 	asr.w	r3, r2, r3
 801499c:	fb01 f303 	mul.w	r3, r1, r3
		timerStart(ANNOUNCE_RECEIPT_TIMER,
 80149a0:	4619      	mov	r1, r3
 80149a2:	2003      	movs	r0, #3
 80149a4:	f003 fc38 	bl	8018218 <timerStart>
		if (ptpClock->portDS.delayMechanism == P2P)
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 80149ae:	2b02      	cmp	r3, #2
 80149b0:	d126      	bne.n	8014a00 <toState+0x36c>
		{
			timerStart(PDELAYREQ_INTERVAL_TIMER,
					getRand(
							pow2ms(
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 80149b8:	3301      	adds	r3, #1
			timerStart(PDELAYREQ_INTERVAL_TIMER,
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	dd10      	ble.n	80149e0 <toState+0x34c>
							pow2ms(
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 80149c4:	3301      	adds	r3, #1
 80149c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80149ca:	fa02 f303 	lsl.w	r3, r2, r3
 80149ce:	e00f      	b.n	80149f0 <toState+0x35c>
 80149d0:	0801bbfc 	.word	0x0801bbfc
 80149d4:	0801bc0c 	.word	0x0801bc0c
 80149d8:	0801bc20 	.word	0x0801bc20
 80149dc:	0801bc34 	.word	0x0801bc34
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 80149e6:	43db      	mvns	r3, r3
 80149e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80149ec:	fa42 f303 	asr.w	r3, r2, r3
			timerStart(PDELAYREQ_INTERVAL_TIMER,
 80149f0:	4618      	mov	r0, r3
 80149f2:	f003 fb5b 	bl	80180ac <getRand>
 80149f6:	4603      	mov	r3, r0
 80149f8:	4619      	mov	r1, r3
 80149fa:	2000      	movs	r0, #0
 80149fc:	f003 fc0c 	bl	8018218 <timerStart>
									ptpClock->portDS.logMinPdelayReqInterval
											+ 1)));
		}
		ptpClock->portDS.portState = PTP_PASSIVE;
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	2206      	movs	r2, #6
 8014a04:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

		break;
 8014a08:	e071      	b.n	8014aee <toState+0x45a>

	case PTP_UNCALIBRATED:

		timerStart(ANNOUNCE_RECEIPT_TIMER,
				(ptpClock->portDS.announceReceiptTimeout)
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8014a10:	4619      	mov	r1, r3
						* (pow2ms(ptpClock->portDS.logAnnounceInterval)));
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	dd07      	ble.n	8014a2c <toState+0x398>
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 8014a22:	461a      	mov	r2, r3
 8014a24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014a28:	4093      	lsls	r3, r2
 8014a2a:	e007      	b.n	8014a3c <toState+0x3a8>
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 8014a32:	425b      	negs	r3, r3
 8014a34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014a38:	fa42 f303 	asr.w	r3, r2, r3
 8014a3c:	fb01 f303 	mul.w	r3, r1, r3
		timerStart(ANNOUNCE_RECEIPT_TIMER,
 8014a40:	4619      	mov	r1, r3
 8014a42:	2003      	movs	r0, #3
 8014a44:	f003 fbe8 	bl	8018218 <timerStart>
		switch (ptpClock->portDS.delayMechanism)
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8014a4e:	2b01      	cmp	r3, #1
 8014a50:	d002      	beq.n	8014a58 <toState+0x3c4>
 8014a52:	2b02      	cmp	r3, #2
 8014a54:	d020      	beq.n	8014a98 <toState+0x404>
									ptpClock->portDS.logMinPdelayReqInterval
											+ 1)));
			break;
		default:
			/* none */
			break;
 8014a56:	e03f      	b.n	8014ad8 <toState+0x444>
							pow2ms(
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	f993 3063 	ldrsb.w	r3, [r3, #99]	; 0x63
 8014a5e:	3301      	adds	r3, #1
			timerStart(DELAYREQ_INTERVAL_TIMER,
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	dd08      	ble.n	8014a76 <toState+0x3e2>
							pow2ms(
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	f993 3063 	ldrsb.w	r3, [r3, #99]	; 0x63
 8014a6a:	3301      	adds	r3, #1
 8014a6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014a70:	fa02 f303 	lsl.w	r3, r2, r3
 8014a74:	e007      	b.n	8014a86 <toState+0x3f2>
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	f993 3063 	ldrsb.w	r3, [r3, #99]	; 0x63
 8014a7c:	43db      	mvns	r3, r3
 8014a7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014a82:	fa42 f303 	asr.w	r3, r2, r3
			timerStart(DELAYREQ_INTERVAL_TIMER,
 8014a86:	4618      	mov	r0, r3
 8014a88:	f003 fb10 	bl	80180ac <getRand>
 8014a8c:	4603      	mov	r3, r0
 8014a8e:	4619      	mov	r1, r3
 8014a90:	2001      	movs	r0, #1
 8014a92:	f003 fbc1 	bl	8018218 <timerStart>
			break;
 8014a96:	e01f      	b.n	8014ad8 <toState+0x444>
							pow2ms(
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8014a9e:	3301      	adds	r3, #1
			timerStart(PDELAYREQ_INTERVAL_TIMER,
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	dd08      	ble.n	8014ab6 <toState+0x422>
							pow2ms(
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8014aaa:	3301      	adds	r3, #1
 8014aac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8014ab4:	e007      	b.n	8014ac6 <toState+0x432>
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8014abc:	43db      	mvns	r3, r3
 8014abe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8014ac2:	fa42 f303 	asr.w	r3, r2, r3
			timerStart(PDELAYREQ_INTERVAL_TIMER,
 8014ac6:	4618      	mov	r0, r3
 8014ac8:	f003 faf0 	bl	80180ac <getRand>
 8014acc:	4603      	mov	r3, r0
 8014ace:	4619      	mov	r1, r3
 8014ad0:	2000      	movs	r0, #0
 8014ad2:	f003 fba1 	bl	8018218 <timerStart>
			break;
 8014ad6:	bf00      	nop
		}
		ptpClock->portDS.portState = PTP_UNCALIBRATED;
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	2207      	movs	r2, #7
 8014adc:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

		break;
 8014ae0:	e005      	b.n	8014aee <toState+0x45a>

	case PTP_SLAVE:

		ptpClock->portDS.portState = PTP_SLAVE;
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	2208      	movs	r2, #8
 8014ae6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

		break;
 8014aea:	e000      	b.n	8014aee <toState+0x45a>

	default:

		break;
 8014aec:	bf00      	nop
	}
}
 8014aee:	bf00      	nop
 8014af0:	3720      	adds	r7, #32
 8014af2:	46bd      	mov	sp, r7
 8014af4:	bd80      	pop	{r7, pc}
 8014af6:	bf00      	nop

08014af8 <doInit>:

static bool doInit(PtpClock *ptpClock)
{
 8014af8:	b580      	push	{r7, lr}
 8014afa:	b086      	sub	sp, #24
 8014afc:	af00      	add	r7, sp, #0
 8014afe:	6078      	str	r0, [r7, #4]
	DBG("manufacturerIdentity: %s\r\n", MANUFACTURER_ID);
 8014b00:	f107 0310 	add.w	r3, r7, #16
 8014b04:	4618      	mov	r0, r3
 8014b06:	f003 fa93 	bl	8018030 <getTime>
 8014b0a:	693b      	ldr	r3, [r7, #16]
 8014b0c:	697a      	ldr	r2, [r7, #20]
 8014b0e:	4619      	mov	r1, r3
 8014b10:	481f      	ldr	r0, [pc, #124]	; (8014b90 <doInit+0x98>)
 8014b12:	f003 fc07 	bl	8018324 <iprintf>
 8014b16:	491f      	ldr	r1, [pc, #124]	; (8014b94 <doInit+0x9c>)
 8014b18:	481f      	ldr	r0, [pc, #124]	; (8014b98 <doInit+0xa0>)
 8014b1a:	f003 fc03 	bl	8018324 <iprintf>

	/* initialize networking */
	netShutdown(&ptpClock->netPath);
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	f503 7373 	add.w	r3, r3, #972	; 0x3cc
 8014b24:	4618      	mov	r0, r3
 8014b26:	f002 fb87 	bl	8017238 <netShutdown>

	if (!netInit(&ptpClock->netPath, ptpClock))
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	f503 7373 	add.w	r3, r3, #972	; 0x3cc
 8014b30:	6879      	ldr	r1, [r7, #4]
 8014b32:	4618      	mov	r0, r3
 8014b34:	f002 fc4a 	bl	80173cc <netInit>
 8014b38:	4603      	mov	r3, r0
 8014b3a:	f083 0301 	eor.w	r3, r3, #1
 8014b3e:	b2db      	uxtb	r3, r3
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d00f      	beq.n	8014b64 <doInit+0x6c>
	{
		ERROR("doInit: failed to initialize network\r\n");
 8014b44:	f107 0308 	add.w	r3, r7, #8
 8014b48:	4618      	mov	r0, r3
 8014b4a:	f003 fa71 	bl	8018030 <getTime>
 8014b4e:	68bb      	ldr	r3, [r7, #8]
 8014b50:	68fa      	ldr	r2, [r7, #12]
 8014b52:	4619      	mov	r1, r3
 8014b54:	4811      	ldr	r0, [pc, #68]	; (8014b9c <doInit+0xa4>)
 8014b56:	f003 fbe5 	bl	8018324 <iprintf>
 8014b5a:	4811      	ldr	r0, [pc, #68]	; (8014ba0 <doInit+0xa8>)
 8014b5c:	f003 fc56 	bl	801840c <puts>
		return FALSE;
 8014b60:	2300      	movs	r3, #0
 8014b62:	e011      	b.n	8014b88 <doInit+0x90>
	}
	else
	{
		/* initialize other stuff */
		initData(ptpClock);
 8014b64:	6878      	ldr	r0, [r7, #4]
 8014b66:	f7ff f881 	bl	8013c6c <initData>
		initTimer();
 8014b6a:	f003 fae9 	bl	8018140 <initTimer>
		initClock(ptpClock);
 8014b6e:	6878      	ldr	r0, [r7, #4]
 8014b70:	f002 ff0a 	bl	8017988 <initClock>
		m1(ptpClock);
 8014b74:	6878      	ldr	r0, [r7, #4]
 8014b76:	f7ff fa3c 	bl	8013ff2 <m1>
		msgPackHeader(ptpClock, ptpClock->msgObuf);
 8014b7a:	687b      	ldr	r3, [r7, #4]
 8014b7c:	33cc      	adds	r3, #204	; 0xcc
 8014b7e:	4619      	mov	r1, r3
 8014b80:	6878      	ldr	r0, [r7, #4]
 8014b82:	f001 fd54 	bl	801662e <msgPackHeader>
		return TRUE;
 8014b86:	2301      	movs	r3, #1
	}
}
 8014b88:	4618      	mov	r0, r3
 8014b8a:	3718      	adds	r7, #24
 8014b8c:	46bd      	mov	sp, r7
 8014b8e:	bd80      	pop	{r7, pc}
 8014b90:	0801bbfc 	.word	0x0801bbfc
 8014b94:	0801bc50 	.word	0x0801bc50
 8014b98:	0801bc8c 	.word	0x0801bc8c
 8014b9c:	0801bca8 	.word	0x0801bca8
 8014ba0:	0801bcb8 	.word	0x0801bcb8

08014ba4 <doState>:

/* Handle actions and events for 'port_state' */
void doState(PtpClock *ptpClock)
{
 8014ba4:	b580      	push	{r7, lr}
 8014ba6:	b08e      	sub	sp, #56	; 0x38
 8014ba8:	af00      	add	r7, sp, #0
 8014baa:	6078      	str	r0, [r7, #4]
	ptpClock->messageActivity = FALSE;
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	2200      	movs	r2, #0
 8014bb0:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8

	switch (ptpClock->portDS.portState)
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8014bba:	3b03      	subs	r3, #3
 8014bbc:	2b05      	cmp	r3, #5
 8014bbe:	d82f      	bhi.n	8014c20 <doState+0x7c>
	case PTP_PRE_MASTER:
	case PTP_MASTER:
	case PTP_PASSIVE:

		/* State decision Event */
		if (getFlag(ptpClock->events, STATE_DECISION_EVENT))
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
 8014bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	d022      	beq.n	8014c14 <doState+0x70>
		{
			DBGV("event STATE_DECISION_EVENT\r\n");
			clearFlag(ptpClock->events, STATE_DECISION_EVENT);
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
 8014bd4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
			ptpClock->recommendedState = bmc(ptpClock);
 8014bde:	6878      	ldr	r0, [r7, #4]
 8014be0:	f7ff fca2 	bl	8014528 <bmc>
 8014be4:	4603      	mov	r3, r0
 8014be6:	461a      	mov	r2, r3
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
			DBGV("recommending state %s\r\n", stateString(ptpClock->recommendedState));

			switch (ptpClock->recommendedState)
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8014bf4:	3b05      	subs	r3, #5
 8014bf6:	2b01      	cmp	r3, #1
 8014bf8:	d80e      	bhi.n	8014c18 <doState+0x74>
			{
			case PTP_MASTER:
			case PTP_PASSIVE:
				if (ptpClock->defaultDS.slaveOnly
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	7cdb      	ldrb	r3, [r3, #19]
 8014bfe:	2b00      	cmp	r3, #0
 8014c00:	d103      	bne.n	8014c0a <doState+0x66>
						|| ptpClock->defaultDS.clockQuality.clockClass == 255)
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	7b1b      	ldrb	r3, [r3, #12]
 8014c06:	2bff      	cmp	r3, #255	; 0xff
 8014c08:	d108      	bne.n	8014c1c <doState+0x78>
				{
					ptpClock->recommendedState = PTP_LISTENING;
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	2203      	movs	r2, #3
 8014c0e:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
					DBGV("recommending state %s\r\n", stateString(ptpClock->recommendedState));
				}
				break;
 8014c12:	e003      	b.n	8014c1c <doState+0x78>

			default:
				break;
			}
		}
 8014c14:	bf00      	nop
 8014c16:	e004      	b.n	8014c22 <doState+0x7e>
				break;
 8014c18:	bf00      	nop
 8014c1a:	e002      	b.n	8014c22 <doState+0x7e>
				break;
 8014c1c:	bf00      	nop
		break;
 8014c1e:	e000      	b.n	8014c22 <doState+0x7e>

	default:
		break;
 8014c20:	bf00      	nop
	}

	switch (ptpClock->recommendedState)
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8014c28:	2b08      	cmp	r3, #8
 8014c2a:	f200 80d1 	bhi.w	8014dd0 <doState+0x22c>
 8014c2e:	a201      	add	r2, pc, #4	; (adr r2, 8014c34 <doState+0x90>)
 8014c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c34:	08014df7 	.word	0x08014df7
 8014c38:	08014dd1 	.word	0x08014dd1
 8014c3c:	08014dd1 	.word	0x08014dd1
 8014c40:	08014db7 	.word	0x08014db7
 8014c44:	08014dd1 	.word	0x08014dd1
 8014c48:	08014c59 	.word	0x08014c59
 8014c4c:	08014c91 	.word	0x08014c91
 8014c50:	08014dd1 	.word	0x08014dd1
 8014c54:	08014cad 	.word	0x08014cad
	{
	case PTP_MASTER:
		switch (ptpClock->portDS.portState)
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8014c5e:	2b04      	cmp	r3, #4
 8014c60:	d002      	beq.n	8014c68 <doState+0xc4>
 8014c62:	2b05      	cmp	r3, #5
 8014c64:	d010      	beq.n	8014c88 <doState+0xe4>
 8014c66:	e00a      	b.n	8014c7e <doState+0xda>
		{
		case PTP_PRE_MASTER:
			if (timerExpired(QUALIFICATION_TIMEOUT))
 8014c68:	2005      	movs	r0, #5
 8014c6a:	f003 faf3 	bl	8018254 <timerExpired>
 8014c6e:	4603      	mov	r3, r0
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d00b      	beq.n	8014c8c <doState+0xe8>
				toState(ptpClock, PTP_MASTER);
 8014c74:	2105      	movs	r1, #5
 8014c76:	6878      	ldr	r0, [r7, #4]
 8014c78:	f7ff fd0c 	bl	8014694 <toState>
			break;
 8014c7c:	e006      	b.n	8014c8c <doState+0xe8>
		case PTP_MASTER:
			break;
		default:
			toState(ptpClock, PTP_PRE_MASTER);
 8014c7e:	2104      	movs	r1, #4
 8014c80:	6878      	ldr	r0, [r7, #4]
 8014c82:	f7ff fd07 	bl	8014694 <toState>
			break;
 8014c86:	e002      	b.n	8014c8e <doState+0xea>
			break;
 8014c88:	bf00      	nop
 8014c8a:	e0b9      	b.n	8014e00 <doState+0x25c>
			break;
 8014c8c:	bf00      	nop
		}
		break;
 8014c8e:	e0b7      	b.n	8014e00 <doState+0x25c>

	case PTP_PASSIVE:
		if (ptpClock->portDS.portState != ptpClock->recommendedState)
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	f893 2062 	ldrb.w	r2, [r3, #98]	; 0x62
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8014c9c:	429a      	cmp	r2, r3
 8014c9e:	f000 80ac 	beq.w	8014dfa <doState+0x256>
			toState(ptpClock, PTP_PASSIVE);
 8014ca2:	2106      	movs	r1, #6
 8014ca4:	6878      	ldr	r0, [r7, #4]
 8014ca6:	f7ff fcf5 	bl	8014694 <toState>
		break;
 8014caa:	e0a6      	b.n	8014dfa <doState+0x256>

	case PTP_SLAVE:
		switch (ptpClock->portDS.portState)
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8014cb2:	2b07      	cmp	r3, #7
 8014cb4:	d002      	beq.n	8014cbc <doState+0x118>
 8014cb6:	2b08      	cmp	r3, #8
 8014cb8:	d03f      	beq.n	8014d3a <doState+0x196>
 8014cba:	e073      	b.n	8014da4 <doState+0x200>
		{
		case PTP_UNCALIBRATED:
			if (getFlag(ptpClock->events, MASTER_CLOCK_SELECTED))//��־λû�б���λ�����stateһֱû��
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
 8014cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	d019      	beq.n	8014cfe <doState+0x15a>
			{
				DBG("event MASTER_CLOCK_SELECTED\r\n");
 8014cca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8014cce:	4618      	mov	r0, r3
 8014cd0:	f003 f9ae 	bl	8018030 <getTime>
 8014cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014cd8:	4619      	mov	r1, r3
 8014cda:	489d      	ldr	r0, [pc, #628]	; (8014f50 <doState+0x3ac>)
 8014cdc:	f003 fb22 	bl	8018324 <iprintf>
 8014ce0:	489c      	ldr	r0, [pc, #624]	; (8014f54 <doState+0x3b0>)
 8014ce2:	f003 fb93 	bl	801840c <puts>
				clearFlag(ptpClock->events, MASTER_CLOCK_SELECTED);
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
 8014cec:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
				toState(ptpClock, PTP_SLAVE);
 8014cf6:	2108      	movs	r1, #8
 8014cf8:	6878      	ldr	r0, [r7, #4]
 8014cfa:	f7ff fccb 	bl	8014694 <toState>
			}

			if (getFlag(ptpClock->events, MASTER_CLOCK_CHANGED))
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
 8014d04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d050      	beq.n	8014dae <doState+0x20a>
			{
				DBG("event MASTER_CLOCK_CHANGED\r\n");
 8014d0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014d10:	4618      	mov	r0, r3
 8014d12:	f003 f98d 	bl	8018030 <getTime>
 8014d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014d1a:	4619      	mov	r1, r3
 8014d1c:	488c      	ldr	r0, [pc, #560]	; (8014f50 <doState+0x3ac>)
 8014d1e:	f003 fb01 	bl	8018324 <iprintf>
 8014d22:	488d      	ldr	r0, [pc, #564]	; (8014f58 <doState+0x3b4>)
 8014d24:	f003 fb72 	bl	801840c <puts>
				clearFlag(ptpClock->events, MASTER_CLOCK_CHANGED);
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
 8014d2e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
			}

			break;
 8014d38:	e039      	b.n	8014dae <doState+0x20a>

		case PTP_SLAVE:
			if (getFlag(ptpClock->events, SYNCHRONIZATION_FAULT))
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
 8014d40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d019      	beq.n	8014d7c <doState+0x1d8>
			{
				DBG("event SYNCHRONIZATION_FAULT\r\n");
 8014d48:	f107 0320 	add.w	r3, r7, #32
 8014d4c:	4618      	mov	r0, r3
 8014d4e:	f003 f96f 	bl	8018030 <getTime>
 8014d52:	6a3b      	ldr	r3, [r7, #32]
 8014d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014d56:	4619      	mov	r1, r3
 8014d58:	487d      	ldr	r0, [pc, #500]	; (8014f50 <doState+0x3ac>)
 8014d5a:	f003 fae3 	bl	8018324 <iprintf>
 8014d5e:	487f      	ldr	r0, [pc, #508]	; (8014f5c <doState+0x3b8>)
 8014d60:	f003 fb54 	bl	801840c <puts>
				clearFlag(ptpClock->events, SYNCHRONIZATION_FAULT);
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
 8014d6a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
				toState(ptpClock, PTP_UNCALIBRATED);
 8014d74:	2107      	movs	r1, #7
 8014d76:	6878      	ldr	r0, [r7, #4]
 8014d78:	f7ff fc8c 	bl	8014694 <toState>
			}

			if (getFlag(ptpClock->events, MASTER_CLOCK_CHANGED))
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
 8014d82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d013      	beq.n	8014db2 <doState+0x20e>
			{
				clearFlag(ptpClock->events, MASTER_CLOCK_CHANGED);
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
 8014d90:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
				toState(ptpClock, PTP_UNCALIBRATED);
 8014d9a:	2107      	movs	r1, #7
 8014d9c:	6878      	ldr	r0, [r7, #4]
 8014d9e:	f7ff fc79 	bl	8014694 <toState>
			}

			break;
 8014da2:	e006      	b.n	8014db2 <doState+0x20e>

		default:
			toState(ptpClock, PTP_UNCALIBRATED);
 8014da4:	2107      	movs	r1, #7
 8014da6:	6878      	ldr	r0, [r7, #4]
 8014da8:	f7ff fc74 	bl	8014694 <toState>
			break;
 8014dac:	e002      	b.n	8014db4 <doState+0x210>
			break;
 8014dae:	bf00      	nop
 8014db0:	e026      	b.n	8014e00 <doState+0x25c>
			break;
 8014db2:	bf00      	nop
		}

		break;
 8014db4:	e024      	b.n	8014e00 <doState+0x25c>

	case PTP_LISTENING:

		if (ptpClock->portDS.portState != ptpClock->recommendedState)
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	f893 2062 	ldrb.w	r2, [r3, #98]	; 0x62
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8014dc2:	429a      	cmp	r2, r3
 8014dc4:	d01b      	beq.n	8014dfe <doState+0x25a>
		{
			toState(ptpClock, PTP_LISTENING);
 8014dc6:	2103      	movs	r1, #3
 8014dc8:	6878      	ldr	r0, [r7, #4]
 8014dca:	f7ff fc63 	bl	8014694 <toState>
		}

		break;
 8014dce:	e016      	b.n	8014dfe <doState+0x25a>

	case PTP_INITIALIZING:
		break;

	default:
		DBG("doState: unrecognized recommended state %d\r\n",
 8014dd0:	f107 0318 	add.w	r3, r7, #24
 8014dd4:	4618      	mov	r0, r3
 8014dd6:	f003 f92b 	bl	8018030 <getTime>
 8014dda:	69bb      	ldr	r3, [r7, #24]
 8014ddc:	69fa      	ldr	r2, [r7, #28]
 8014dde:	4619      	mov	r1, r3
 8014de0:	485b      	ldr	r0, [pc, #364]	; (8014f50 <doState+0x3ac>)
 8014de2:	f003 fa9f 	bl	8018324 <iprintf>
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8014dec:	4619      	mov	r1, r3
 8014dee:	485c      	ldr	r0, [pc, #368]	; (8014f60 <doState+0x3bc>)
 8014df0:	f003 fa98 	bl	8018324 <iprintf>
				ptpClock->recommendedState)
		;
		break;
 8014df4:	e004      	b.n	8014e00 <doState+0x25c>
		break;
 8014df6:	bf00      	nop
 8014df8:	e002      	b.n	8014e00 <doState+0x25c>
		break;
 8014dfa:	bf00      	nop
 8014dfc:	e000      	b.n	8014e00 <doState+0x25c>
		break;
 8014dfe:	bf00      	nop
	}

	switch (ptpClock->portDS.portState)
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8014e06:	2b08      	cmp	r3, #8
 8014e08:	f200 8089 	bhi.w	8014f1e <doState+0x37a>
 8014e0c:	a201      	add	r2, pc, #4	; (adr r2, 8014e14 <doState+0x270>)
 8014e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e12:	bf00      	nop
 8014e14:	08014e39 	.word	0x08014e39
 8014e18:	08014e59 	.word	0x08014e59
 8014e1c:	08014e7f 	.word	0x08014e7f
 8014e20:	08014e87 	.word	0x08014e87
 8014e24:	08014f1f 	.word	0x08014f1f
 8014e28:	08014eed 	.word	0x08014eed
 8014e2c:	08014e87 	.word	0x08014e87
 8014e30:	08014e87 	.word	0x08014e87
 8014e34:	08014e87 	.word	0x08014e87
	{
	case PTP_INITIALIZING:

		if (doInit(ptpClock) == TRUE)
 8014e38:	6878      	ldr	r0, [r7, #4]
 8014e3a:	f7ff fe5d 	bl	8014af8 <doInit>
 8014e3e:	4603      	mov	r3, r0
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d004      	beq.n	8014e4e <doState+0x2aa>
		{
			toState(ptpClock, PTP_LISTENING);
 8014e44:	2103      	movs	r1, #3
 8014e46:	6878      	ldr	r0, [r7, #4]
 8014e48:	f7ff fc24 	bl	8014694 <toState>
		else
		{
			toState(ptpClock, PTP_FAULTY);
		}

		break;
 8014e4c:	e07c      	b.n	8014f48 <doState+0x3a4>
			toState(ptpClock, PTP_FAULTY);
 8014e4e:	2101      	movs	r1, #1
 8014e50:	6878      	ldr	r0, [r7, #4]
 8014e52:	f7ff fc1f 	bl	8014694 <toState>
		break;
 8014e56:	e077      	b.n	8014f48 <doState+0x3a4>

	case PTP_FAULTY:

		/* Imaginary troubleshooting */
		DBG("event FAULT_CLEARED for state PTP_FAULT\r\n")
 8014e58:	f107 0310 	add.w	r3, r7, #16
 8014e5c:	4618      	mov	r0, r3
 8014e5e:	f003 f8e7 	bl	8018030 <getTime>
 8014e62:	693b      	ldr	r3, [r7, #16]
 8014e64:	697a      	ldr	r2, [r7, #20]
 8014e66:	4619      	mov	r1, r3
 8014e68:	4839      	ldr	r0, [pc, #228]	; (8014f50 <doState+0x3ac>)
 8014e6a:	f003 fa5b 	bl	8018324 <iprintf>
 8014e6e:	483d      	ldr	r0, [pc, #244]	; (8014f64 <doState+0x3c0>)
 8014e70:	f003 facc 	bl	801840c <puts>
		;
		toState(ptpClock, PTP_INITIALIZING);
 8014e74:	2100      	movs	r1, #0
 8014e76:	6878      	ldr	r0, [r7, #4]
 8014e78:	f7ff fc0c 	bl	8014694 <toState>
		return;
 8014e7c:	e064      	b.n	8014f48 <doState+0x3a4>

	case PTP_DISABLED:
		handle(ptpClock);
 8014e7e:	6878      	ldr	r0, [r7, #4]
 8014e80:	f000 f874 	bl	8014f6c <handle>
		break;
 8014e84:	e060      	b.n	8014f48 <doState+0x3a4>
	case PTP_LISTENING:
	case PTP_UNCALIBRATED:
	case PTP_SLAVE:
	case PTP_PASSIVE:

		if (timerExpired(ANNOUNCE_RECEIPT_TIMER))
 8014e86:	2003      	movs	r0, #3
 8014e88:	f003 f9e4 	bl	8018254 <timerExpired>
 8014e8c:	4603      	mov	r3, r0
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d028      	beq.n	8014ee4 <doState+0x340>
		{
			DBGV("event ANNOUNCE_RECEIPT_TIMEOUT_EXPIRES for state %s\r\n", stateString(ptpClock->portDS.portState));
			ptpClock->foreignMasterDS.count = 0;
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	2200      	movs	r2, #0
 8014e96:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
			ptpClock->foreignMasterDS.i = 0;
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	2200      	movs	r2, #0
 8014e9e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c

			if (!(ptpClock->defaultDS.slaveOnly
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	7cdb      	ldrb	r3, [r3, #19]
 8014ea6:	f083 0301 	eor.w	r3, r3, #1
 8014eaa:	b2db      	uxtb	r3, r3
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	d00f      	beq.n	8014ed0 <doState+0x32c>
					|| ptpClock->defaultDS.clockQuality.clockClass == 255))
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	7b1b      	ldrb	r3, [r3, #12]
			if (!(ptpClock->defaultDS.slaveOnly
 8014eb4:	2bff      	cmp	r3, #255	; 0xff
 8014eb6:	d00b      	beq.n	8014ed0 <doState+0x32c>
			{
				m1(ptpClock);
 8014eb8:	6878      	ldr	r0, [r7, #4]
 8014eba:	f7ff f89a 	bl	8013ff2 <m1>
				ptpClock->recommendedState = PTP_MASTER;
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	2205      	movs	r2, #5
 8014ec2:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
				DBGV("recommending state %s\r\n", stateString(ptpClock->recommendedState));
				toState(ptpClock, PTP_MASTER);
 8014ec6:	2105      	movs	r1, #5
 8014ec8:	6878      	ldr	r0, [r7, #4]
 8014eca:	f7ff fbe3 	bl	8014694 <toState>
			else if (ptpClock->portDS.portState != PTP_LISTENING)
			{
				toState(ptpClock, PTP_LISTENING);
			}

			break;
 8014ece:	e03a      	b.n	8014f46 <doState+0x3a2>
			else if (ptpClock->portDS.portState != PTP_LISTENING)
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8014ed6:	2b03      	cmp	r3, #3
 8014ed8:	d035      	beq.n	8014f46 <doState+0x3a2>
				toState(ptpClock, PTP_LISTENING);
 8014eda:	2103      	movs	r1, #3
 8014edc:	6878      	ldr	r0, [r7, #4]
 8014ede:	f7ff fbd9 	bl	8014694 <toState>
			break;
 8014ee2:	e030      	b.n	8014f46 <doState+0x3a2>
		}

		handle(ptpClock);
 8014ee4:	6878      	ldr	r0, [r7, #4]
 8014ee6:	f000 f841 	bl	8014f6c <handle>

		break;
 8014eea:	e02d      	b.n	8014f48 <doState+0x3a4>

	case PTP_MASTER:

		if (timerExpired(SYNC_INTERVAL_TIMER))
 8014eec:	2002      	movs	r0, #2
 8014eee:	f003 f9b1 	bl	8018254 <timerExpired>
 8014ef2:	4603      	mov	r3, r0
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d002      	beq.n	8014efe <doState+0x35a>
		{
			DBGV("event SYNC_INTERVAL_TIMEOUT_EXPIRES for state PTP_MASTER\r\n");
			issueSync(ptpClock);
 8014ef8:	6878      	ldr	r0, [r7, #4]
 8014efa:	f001 f82f 	bl	8015f5c <issueSync>
		}

		if (timerExpired(ANNOUNCE_INTERVAL_TIMER))
 8014efe:	2004      	movs	r0, #4
 8014f00:	f003 f9a8 	bl	8018254 <timerExpired>
 8014f04:	4603      	mov	r3, r0
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d002      	beq.n	8014f10 <doState+0x36c>
		{
			DBGV("event ANNOUNCE_INTERVAL_TIMEOUT_EXPIRES for state PTP_MASTER\r\n");
			issueAnnounce(ptpClock);
 8014f0a:	6878      	ldr	r0, [r7, #4]
 8014f0c:	f000 ffea 	bl	8015ee4 <issueAnnounce>
		}

		handle(ptpClock);
 8014f10:	6878      	ldr	r0, [r7, #4]
 8014f12:	f000 f82b 	bl	8014f6c <handle>
		issueDelayReqTimerExpired(ptpClock);
 8014f16:	6878      	ldr	r0, [r7, #4]
 8014f18:	f000 ff78 	bl	8015e0c <issueDelayReqTimerExpired>

		break;
 8014f1c:	e014      	b.n	8014f48 <doState+0x3a4>

	default:
		DBG("doState: do unrecognized state %d\r\n", ptpClock->portDS.portState)
 8014f1e:	f107 0308 	add.w	r3, r7, #8
 8014f22:	4618      	mov	r0, r3
 8014f24:	f003 f884 	bl	8018030 <getTime>
 8014f28:	68bb      	ldr	r3, [r7, #8]
 8014f2a:	68fa      	ldr	r2, [r7, #12]
 8014f2c:	4619      	mov	r1, r3
 8014f2e:	4808      	ldr	r0, [pc, #32]	; (8014f50 <doState+0x3ac>)
 8014f30:	f003 f9f8 	bl	8018324 <iprintf>
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8014f3a:	4619      	mov	r1, r3
 8014f3c:	480a      	ldr	r0, [pc, #40]	; (8014f68 <doState+0x3c4>)
 8014f3e:	f003 f9f1 	bl	8018324 <iprintf>
		;
		break;
 8014f42:	bf00      	nop
 8014f44:	e000      	b.n	8014f48 <doState+0x3a4>
			break;
 8014f46:	bf00      	nop
	}
}
 8014f48:	3738      	adds	r7, #56	; 0x38
 8014f4a:	46bd      	mov	sp, r7
 8014f4c:	bd80      	pop	{r7, pc}
 8014f4e:	bf00      	nop
 8014f50:	0801bbfc 	.word	0x0801bbfc
 8014f54:	0801bce0 	.word	0x0801bce0
 8014f58:	0801bd00 	.word	0x0801bd00
 8014f5c:	0801bd1c 	.word	0x0801bd1c
 8014f60:	0801bd3c 	.word	0x0801bd3c
 8014f64:	0801bd6c 	.word	0x0801bd6c
 8014f68:	0801bd98 	.word	0x0801bd98

08014f6c <handle>:

/* Check and handle received messages */
static void handle(PtpClock *ptpClock)
{
 8014f6c:	b580      	push	{r7, lr}
 8014f6e:	b090      	sub	sp, #64	; 0x40
 8014f70:	af00      	add	r7, sp, #0
 8014f72:	6078      	str	r0, [r7, #4]

	int ret;
	bool isFromSelf;
	TimeInternal time =
 8014f74:	2300      	movs	r3, #0
 8014f76:	633b      	str	r3, [r7, #48]	; 0x30
 8014f78:	2300      	movs	r3, #0
 8014f7a:	637b      	str	r3, [r7, #52]	; 0x34
	{ 0, 0 };

	if (FALSE == ptpClock->messageActivity)
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 8014f82:	f083 0301 	eor.w	r3, r3, #1
 8014f86:	b2db      	uxtb	r3, r3
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d021      	beq.n	8014fd0 <handle+0x64>
	{
		ret = netSelect(&ptpClock->netPath, 0);
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	f503 7373 	add.w	r3, r3, #972	; 0x3cc
 8014f92:	2100      	movs	r1, #0
 8014f94:	4618      	mov	r0, r3
 8014f96:	f002 fb49 	bl	801762c <netSelect>
 8014f9a:	63f8      	str	r0, [r7, #60]	; 0x3c

		if (ret < 0)
 8014f9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	da12      	bge.n	8014fc8 <handle+0x5c>
		{
			ERROR("handle: failed to poll sockets\r\n");
 8014fa2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014fa6:	4618      	mov	r0, r3
 8014fa8:	f003 f842 	bl	8018030 <getTime>
 8014fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014fb0:	4619      	mov	r1, r3
 8014fb2:	48a7      	ldr	r0, [pc, #668]	; (8015250 <handle+0x2e4>)
 8014fb4:	f003 f9b6 	bl	8018324 <iprintf>
 8014fb8:	48a6      	ldr	r0, [pc, #664]	; (8015254 <handle+0x2e8>)
 8014fba:	f003 fa27 	bl	801840c <puts>
			toState(ptpClock, PTP_FAULTY);
 8014fbe:	2101      	movs	r1, #1
 8014fc0:	6878      	ldr	r0, [r7, #4]
 8014fc2:	f7ff fb67 	bl	8014694 <toState>
			return;
 8014fc6:	e140      	b.n	801524a <handle+0x2de>
		}
		else if (!ret)
 8014fc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	f000 8136 	beq.w	801523c <handle+0x2d0>
	}

	DBGVV("handle: something\r\n");

	/* Receive an event. */
	ptpClock->msgIbufLength = netRecvEvent(&ptpClock->netPath,
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	f503 7073 	add.w	r0, r3, #972	; 0x3cc
			ptpClock->msgIbuf, &time);
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
	ptpClock->msgIbufLength = netRecvEvent(&ptpClock->netPath,
 8014fdc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8014fe0:	4619      	mov	r1, r3
 8014fe2:	f002 fbcd 	bl	8017780 <netRecvEvent>
 8014fe6:	4602      	mov	r2, r0
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	/* local time is not UTC, we can calculate UTC on demand, otherwise UTC time is not used */
	/* time.seconds += ptpClock->timePropertiesDS.currentUtcOffset; */
	DBGV("handle: netRecvEvent returned %d\r\n", ptpClock->msgIbufLength);

	if (ptpClock->msgIbufLength < 0)
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	da12      	bge.n	801501e <handle+0xb2>
	{
		ERROR("handle: failed to receive on the event socket\r\n");
 8014ff8:	f107 0320 	add.w	r3, r7, #32
 8014ffc:	4618      	mov	r0, r3
 8014ffe:	f003 f817 	bl	8018030 <getTime>
 8015002:	6a3b      	ldr	r3, [r7, #32]
 8015004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015006:	4619      	mov	r1, r3
 8015008:	4891      	ldr	r0, [pc, #580]	; (8015250 <handle+0x2e4>)
 801500a:	f003 f98b 	bl	8018324 <iprintf>
 801500e:	4892      	ldr	r0, [pc, #584]	; (8015258 <handle+0x2ec>)
 8015010:	f003 f9fc 	bl	801840c <puts>
		toState(ptpClock, PTP_FAULTY);
 8015014:	2101      	movs	r1, #1
 8015016:	6878      	ldr	r0, [r7, #4]
 8015018:	f7ff fb3c 	bl	8014694 <toState>
		return;
 801501c:	e115      	b.n	801524a <handle+0x2de>
	}
	else if (!ptpClock->msgIbufLength)
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 8015024:	2b00      	cmp	r3, #0
 8015026:	d12c      	bne.n	8015082 <handle+0x116>
	{
		/* Receive a general packet. */
		ptpClock->msgIbufLength = netRecvGeneral(&ptpClock->netPath,
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	f503 7073 	add.w	r0, r3, #972	; 0x3cc
				ptpClock->msgIbuf, &time);
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
		ptpClock->msgIbufLength = netRecvGeneral(&ptpClock->netPath,
 8015034:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8015038:	4619      	mov	r1, r3
 801503a:	f002 fbb3 	bl	80177a4 <netRecvGeneral>
 801503e:	4602      	mov	r2, r0
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
		DBGV("handle: netRecvGeneral returned %d\r\n", ptpClock->msgIbufLength);

		if (ptpClock->msgIbufLength < 0)
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 801504c:	2b00      	cmp	r3, #0
 801504e:	da12      	bge.n	8015076 <handle+0x10a>
		{
			ERROR("handle: failed to receive on the general socket\r\n");
 8015050:	f107 0318 	add.w	r3, r7, #24
 8015054:	4618      	mov	r0, r3
 8015056:	f002 ffeb 	bl	8018030 <getTime>
 801505a:	69bb      	ldr	r3, [r7, #24]
 801505c:	69fa      	ldr	r2, [r7, #28]
 801505e:	4619      	mov	r1, r3
 8015060:	487b      	ldr	r0, [pc, #492]	; (8015250 <handle+0x2e4>)
 8015062:	f003 f95f 	bl	8018324 <iprintf>
 8015066:	487d      	ldr	r0, [pc, #500]	; (801525c <handle+0x2f0>)
 8015068:	f003 f9d0 	bl	801840c <puts>
			toState(ptpClock, PTP_FAULTY);
 801506c:	2101      	movs	r1, #1
 801506e:	6878      	ldr	r0, [r7, #4]
 8015070:	f7ff fb10 	bl	8014694 <toState>
			return;
 8015074:	e0e9      	b.n	801524a <handle+0x2de>
		}
		else if (!ptpClock->msgIbufLength)
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 801507c:	2b00      	cmp	r3, #0
 801507e:	f000 80df 	beq.w	8015240 <handle+0x2d4>
			return;
	}

	ptpClock->messageActivity = TRUE;
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	2201      	movs	r2, #1
 8015086:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8

	if (ptpClock->msgIbufLength < HEADER_LENGTH)
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 8015090:	2b21      	cmp	r3, #33	; 0x21
 8015092:	dc12      	bgt.n	80150ba <handle+0x14e>
	{
		ERROR("handle: message shorter than header length\r\n");
 8015094:	f107 0310 	add.w	r3, r7, #16
 8015098:	4618      	mov	r0, r3
 801509a:	f002 ffc9 	bl	8018030 <getTime>
 801509e:	693b      	ldr	r3, [r7, #16]
 80150a0:	697a      	ldr	r2, [r7, #20]
 80150a2:	4619      	mov	r1, r3
 80150a4:	486a      	ldr	r0, [pc, #424]	; (8015250 <handle+0x2e4>)
 80150a6:	f003 f93d 	bl	8018324 <iprintf>
 80150aa:	486d      	ldr	r0, [pc, #436]	; (8015260 <handle+0x2f4>)
 80150ac:	f003 f9ae 	bl	801840c <puts>
		toState(ptpClock, PTP_FAULTY);
 80150b0:	2101      	movs	r1, #1
 80150b2:	6878      	ldr	r0, [r7, #4]
 80150b4:	f7ff faee 	bl	8014694 <toState>
		return;
 80150b8:	e0c7      	b.n	801524a <handle+0x2de>
	}

	msgUnpackHeader(ptpClock->msgIbuf, &ptpClock->msgTmpHeader);
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	f503 72fc 	add.w	r2, r3, #504	; 0x1f8
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	3380      	adds	r3, #128	; 0x80
 80150c4:	4619      	mov	r1, r3
 80150c6:	4610      	mov	r0, r2
 80150c8:	f001 fa1e 	bl	8016508 <msgUnpackHeader>
	DBGV("handle: unpacked message type %d\r\n", ptpClock->msgTmpHeader.messageType);

	if (ptpClock->msgTmpHeader.versionPTP != ptpClock->portDS.versionNumber)
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80150d8:	429a      	cmp	r2, r3
 80150da:	f040 80b3 	bne.w	8015244 <handle+0x2d8>
	{
		DBGV("handle: ignore version %d message\r\n", ptpClock->msgTmpHeader.versionPTP);
		return;
	}

	if (ptpClock->msgTmpHeader.domainNumber != ptpClock->defaultDS.domainNumber)
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	7c9b      	ldrb	r3, [r3, #18]
 80150e8:	429a      	cmp	r2, r3
 80150ea:	f040 80ad 	bne.w	8015248 <handle+0x2dc>
		DBGV("handle: ignore message from domainNumber %d\r\n", ptpClock->msgTmpHeader.domainNumber);
		return;
	}

	/* Spec 9.5.2.2 */
	isFromSelf = isSamePortIdentity(&ptpClock->portDS.portIdentity,
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	f103 0258 	add.w	r2, r3, #88	; 0x58
			&ptpClock->msgTmpHeader.sourcePortIdentity);
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	3398      	adds	r3, #152	; 0x98
	isFromSelf = isSamePortIdentity(&ptpClock->portDS.portIdentity,
 80150f8:	4619      	mov	r1, r3
 80150fa:	4610      	mov	r0, r2
 80150fc:	f7fe fe7a 	bl	8013df4 <isSamePortIdentity>
 8015100:	4603      	mov	r3, r0
 8015102:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	/* Subtract the inbound latency adjustment if it is not a loop back and the
	 time stamp seems reasonable */
	if (!isFromSelf && time.seconds > 0)
 8015106:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801510a:	f083 0301 	eor.w	r3, r3, #1
 801510e:	b2db      	uxtb	r3, r3
 8015110:	2b00      	cmp	r3, #0
 8015112:	d00c      	beq.n	801512e <handle+0x1c2>
 8015114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015116:	2b00      	cmp	r3, #0
 8015118:	dd09      	ble.n	801512e <handle+0x1c2>
		subTime(&time, &time, &ptpClock->inboundLatency);
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8015120:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8015124:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015128:	4618      	mov	r0, r3
 801512a:	f7fe fd28 	bl	8013b7e <subTime>

	switch (ptpClock->msgTmpHeader.messageType)
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8015134:	2b0d      	cmp	r3, #13
 8015136:	d86d      	bhi.n	8015214 <handle+0x2a8>
 8015138:	a201      	add	r2, pc, #4	; (adr r2, 8015140 <handle+0x1d4>)
 801513a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801513e:	bf00      	nop
 8015140:	08015187 	.word	0x08015187
 8015144:	080151a7 	.word	0x080151a7
 8015148:	080151b9 	.word	0x080151b9
 801514c:	080151d9 	.word	0x080151d9
 8015150:	08015215 	.word	0x08015215
 8015154:	08015215 	.word	0x08015215
 8015158:	08015215 	.word	0x08015215
 801515c:	08015215 	.word	0x08015215
 8015160:	08015199 	.word	0x08015199
 8015164:	080151cb 	.word	0x080151cb
 8015168:	080151eb 	.word	0x080151eb
 801516c:	08015179 	.word	0x08015179
 8015170:	08015207 	.word	0x08015207
 8015174:	080151f9 	.word	0x080151f9
	{

	case ANNOUNCE:
		handleAnnounce(ptpClock, isFromSelf);
 8015178:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801517c:	4619      	mov	r1, r3
 801517e:	6878      	ldr	r0, [r7, #4]
 8015180:	f000 f874 	bl	801526c <handleAnnounce>
		break;
 8015184:	e061      	b.n	801524a <handle+0x2de>

	case SYNC:
		handleSync(ptpClock, &time, isFromSelf);
 8015186:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 801518a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801518e:	4619      	mov	r1, r3
 8015190:	6878      	ldr	r0, [r7, #4]
 8015192:	f000 f943 	bl	801541c <handleSync>
		break;
 8015196:	e058      	b.n	801524a <handle+0x2de>

	case FOLLOW_UP:
		handleFollowUp(ptpClock, isFromSelf);
 8015198:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801519c:	4619      	mov	r1, r3
 801519e:	6878      	ldr	r0, [r7, #4]
 80151a0:	f000 f9f8 	bl	8015594 <handleFollowUp>
		break;
 80151a4:	e051      	b.n	801524a <handle+0x2de>

	case DELAY_REQ:
		handleDelayReq(ptpClock, &time, isFromSelf);
 80151a6:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80151aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80151ae:	4619      	mov	r1, r3
 80151b0:	6878      	ldr	r0, [r7, #4]
 80151b2:	f000 fab5 	bl	8015720 <handleDelayReq>
		break;
 80151b6:	e048      	b.n	801524a <handle+0x2de>

	case PDELAY_REQ:
		handlePDelayReq(ptpClock, &time, isFromSelf);
 80151b8:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80151bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80151c0:	4619      	mov	r1, r3
 80151c2:	6878      	ldr	r0, [r7, #4]
 80151c4:	f000 fbda 	bl	801597c <handlePDelayReq>
		break;
 80151c8:	e03f      	b.n	801524a <handle+0x2de>

	case DELAY_RESP:
		handleDelayResp(ptpClock, isFromSelf);
 80151ca:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80151ce:	4619      	mov	r1, r3
 80151d0:	6878      	ldr	r0, [r7, #4]
 80151d2:	f000 fb1d 	bl	8015810 <handleDelayResp>
		break;
 80151d6:	e038      	b.n	801524a <handle+0x2de>

	case PDELAY_RESP:
		handlePDelayResp(ptpClock, &time, isFromSelf);
 80151d8:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80151dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80151e0:	4619      	mov	r1, r3
 80151e2:	6878      	ldr	r0, [r7, #4]
 80151e4:	f000 fc58 	bl	8015a98 <handlePDelayResp>
		break;
 80151e8:	e02f      	b.n	801524a <handle+0x2de>

	case PDELAY_RESP_FOLLOW_UP:
		handlePDelayRespFollowUp(ptpClock, isFromSelf);
 80151ea:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80151ee:	4619      	mov	r1, r3
 80151f0:	6878      	ldr	r0, [r7, #4]
 80151f2:	f000 fd3d 	bl	8015c70 <handlePDelayRespFollowUp>
		break;
 80151f6:	e028      	b.n	801524a <handle+0x2de>

	case MANAGEMENT:
		handleManagement(ptpClock, isFromSelf);
 80151f8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80151fc:	4619      	mov	r1, r3
 80151fe:	6878      	ldr	r0, [r7, #4]
 8015200:	f000 fdee 	bl	8015de0 <handleManagement>
		break;
 8015204:	e021      	b.n	801524a <handle+0x2de>

	case SIGNALING:
		handleSignaling(ptpClock, isFromSelf);
 8015206:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801520a:	4619      	mov	r1, r3
 801520c:	6878      	ldr	r0, [r7, #4]
 801520e:	f000 fdf2 	bl	8015df6 <handleSignaling>
		break;
 8015212:	e01a      	b.n	801524a <handle+0x2de>

	default:
		DBG("handle: unrecognized message %d\r\n",
 8015214:	f107 0308 	add.w	r3, r7, #8
 8015218:	4618      	mov	r0, r3
 801521a:	f002 ff09 	bl	8018030 <getTime>
 801521e:	68bb      	ldr	r3, [r7, #8]
 8015220:	68fa      	ldr	r2, [r7, #12]
 8015222:	4619      	mov	r1, r3
 8015224:	480f      	ldr	r0, [pc, #60]	; (8015264 <handle+0x2f8>)
 8015226:	f003 f87d 	bl	8018324 <iprintf>
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8015230:	4619      	mov	r1, r3
 8015232:	480d      	ldr	r0, [pc, #52]	; (8015268 <handle+0x2fc>)
 8015234:	f003 f876 	bl	8018324 <iprintf>
				ptpClock->msgTmpHeader.messageType)
		;
		break;
 8015238:	bf00      	nop
 801523a:	e006      	b.n	801524a <handle+0x2de>
			return;
 801523c:	bf00      	nop
 801523e:	e004      	b.n	801524a <handle+0x2de>
			return;
 8015240:	bf00      	nop
 8015242:	e002      	b.n	801524a <handle+0x2de>
		return;
 8015244:	bf00      	nop
 8015246:	e000      	b.n	801524a <handle+0x2de>
		return;
 8015248:	bf00      	nop
	}
}
 801524a:	3740      	adds	r7, #64	; 0x40
 801524c:	46bd      	mov	sp, r7
 801524e:	bd80      	pop	{r7, pc}
 8015250:	0801bca8 	.word	0x0801bca8
 8015254:	0801bdbc 	.word	0x0801bdbc
 8015258:	0801bddc 	.word	0x0801bddc
 801525c:	0801be0c 	.word	0x0801be0c
 8015260:	0801be40 	.word	0x0801be40
 8015264:	0801bbfc 	.word	0x0801bbfc
 8015268:	0801be6c 	.word	0x0801be6c

0801526c <handleAnnounce>:

/* spec 9.5.3 */
static void handleAnnounce(PtpClock *ptpClock, bool isFromSelf)
{
 801526c:	b580      	push	{r7, lr}
 801526e:	b086      	sub	sp, #24
 8015270:	af00      	add	r7, sp, #0
 8015272:	6078      	str	r0, [r7, #4]
 8015274:	460b      	mov	r3, r1
 8015276:	70fb      	strb	r3, [r7, #3]
	bool isFromCurrentParent = FALSE;
 8015278:	2300      	movs	r3, #0
 801527a:	75fb      	strb	r3, [r7, #23]

	DBGV("handleAnnounce: received in state %s\r\n", stateString(ptpClock->portDS.portState));

	if (ptpClock->msgIbufLength < ANNOUNCE_LENGTH)
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 8015282:	2b3f      	cmp	r3, #63	; 0x3f
 8015284:	dc12      	bgt.n	80152ac <handleAnnounce+0x40>
	{
		ERROR("handleAnnounce: short message\r\n");
 8015286:	f107 030c 	add.w	r3, r7, #12
 801528a:	4618      	mov	r0, r3
 801528c:	f002 fed0 	bl	8018030 <getTime>
 8015290:	68fb      	ldr	r3, [r7, #12]
 8015292:	693a      	ldr	r2, [r7, #16]
 8015294:	4619      	mov	r1, r3
 8015296:	485f      	ldr	r0, [pc, #380]	; (8015414 <handleAnnounce+0x1a8>)
 8015298:	f003 f844 	bl	8018324 <iprintf>
 801529c:	485e      	ldr	r0, [pc, #376]	; (8015418 <handleAnnounce+0x1ac>)
 801529e:	f003 f8b5 	bl	801840c <puts>
		toState(ptpClock, PTP_FAULTY);
 80152a2:	2101      	movs	r1, #1
 80152a4:	6878      	ldr	r0, [r7, #4]
 80152a6:	f7ff f9f5 	bl	8014694 <toState>
		return;
 80152aa:	e0af      	b.n	801540c <handleAnnounce+0x1a0>
	}

	if (isFromSelf)
 80152ac:	78fb      	ldrb	r3, [r7, #3]
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	f040 80a9 	bne.w	8015406 <handleAnnounce+0x19a>
	{
		DBGV("handleAnnounce: ignore from self\r\n");
		return;
	}

	switch (ptpClock->portDS.portState)
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80152ba:	2b08      	cmp	r3, #8
 80152bc:	f200 8087 	bhi.w	80153ce <handleAnnounce+0x162>
 80152c0:	a201      	add	r2, pc, #4	; (adr r2, 80152c8 <handleAnnounce+0x5c>)
 80152c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80152c6:	bf00      	nop
 80152c8:	0801540b 	.word	0x0801540b
 80152cc:	0801540b 	.word	0x0801540b
 80152d0:	0801540b 	.word	0x0801540b
 80152d4:	080153cf 	.word	0x080153cf
 80152d8:	080153cf 	.word	0x080153cf
 80152dc:	080153cf 	.word	0x080153cf
 80152e0:	08015391 	.word	0x08015391
 80152e4:	080152ed 	.word	0x080152ed
 80152e8:	080152ed 	.word	0x080152ed

	case PTP_UNCALIBRATED:
	case PTP_SLAVE:

		/* Valid announce message is received : BMC algorithm will be executed */
		setFlag(ptpClock->events, STATE_DECISION_EVENT);
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
 80152f2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
		isFromCurrentParent = isSamePortIdentity(
				&ptpClock->parentDS.parentPortIdentity,
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	f103 0228 	add.w	r2, r3, #40	; 0x28
				&ptpClock->msgTmpHeader.sourcePortIdentity);
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	3398      	adds	r3, #152	; 0x98
		isFromCurrentParent = isSamePortIdentity(
 8015306:	4619      	mov	r1, r3
 8015308:	4610      	mov	r0, r2
 801530a:	f7fe fd73 	bl	8013df4 <isSamePortIdentity>
 801530e:	4603      	mov	r3, r0
 8015310:	75fb      	strb	r3, [r7, #23]
		msgUnpackAnnounce(ptpClock->msgIbuf, &ptpClock->msgTmp.announce);
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	f503 72fc 	add.w	r2, r3, #504	; 0x1f8
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	33a8      	adds	r3, #168	; 0xa8
 801531c:	4619      	mov	r1, r3
 801531e:	4610      	mov	r0, r2
 8015320:	f001 fa51 	bl	80167c6 <msgUnpackAnnounce>
		if (isFromCurrentParent)
 8015324:	7dfb      	ldrb	r3, [r7, #23]
 8015326:	2b00      	cmp	r3, #0
 8015328:	d028      	beq.n	801537c <handleAnnounce+0x110>
		{
			s1(ptpClock, &ptpClock->msgTmpHeader, &ptpClock->msgTmp.announce);
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	f103 0180 	add.w	r1, r3, #128	; 0x80
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	33a8      	adds	r3, #168	; 0xa8
 8015334:	461a      	mov	r2, r3
 8015336:	6878      	ldr	r0, [r7, #4]
 8015338:	f7fe fed0 	bl	80140dc <s1>
			/* Reset  Timer handling Announce receipt timeout */
			timerStart(ANNOUNCE_RECEIPT_TIMER,
					(ptpClock->portDS.announceReceiptTimeout)
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8015342:	4619      	mov	r1, r3
							* (pow2ms(ptpClock->portDS.logAnnounceInterval)));
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 801534a:	2b00      	cmp	r3, #0
 801534c:	dd07      	ble.n	801535e <handleAnnounce+0xf2>
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 8015354:	461a      	mov	r2, r3
 8015356:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801535a:	4093      	lsls	r3, r2
 801535c:	e007      	b.n	801536e <handleAnnounce+0x102>
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 8015364:	425b      	negs	r3, r3
 8015366:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801536a:	fa42 f303 	asr.w	r3, r2, r3
 801536e:	fb01 f303 	mul.w	r3, r1, r3
			timerStart(ANNOUNCE_RECEIPT_TIMER,
 8015372:	4619      	mov	r1, r3
 8015374:	2003      	movs	r0, #3
 8015376:	f002 ff4f 	bl	8018218 <timerStart>
			/* addForeign takes care  of AnnounceUnpacking */
			addForeign(ptpClock, &ptpClock->msgTmpHeader,
					&ptpClock->msgTmp.announce);
		}

		break;
 801537a:	e047      	b.n	801540c <handleAnnounce+0x1a0>
			addForeign(ptpClock, &ptpClock->msgTmpHeader,
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	f103 0180 	add.w	r1, r3, #128	; 0x80
					&ptpClock->msgTmp.announce);
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	33a8      	adds	r3, #168	; 0xa8
			addForeign(ptpClock, &ptpClock->msgTmpHeader,
 8015386:	461a      	mov	r2, r3
 8015388:	6878      	ldr	r0, [r7, #4]
 801538a:	f7fe fd53 	bl	8013e34 <addForeign>
		break;
 801538e:	e03d      	b.n	801540c <handleAnnounce+0x1a0>

	case PTP_PASSIVE:
		timerStart(ANNOUNCE_RECEIPT_TIMER,
				(ptpClock->portDS.announceReceiptTimeout)
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8015396:	4619      	mov	r1, r3
						* (pow2ms(ptpClock->portDS.logAnnounceInterval)));
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 801539e:	2b00      	cmp	r3, #0
 80153a0:	dd07      	ble.n	80153b2 <handleAnnounce+0x146>
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 80153a8:	461a      	mov	r2, r3
 80153aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80153ae:	4093      	lsls	r3, r2
 80153b0:	e007      	b.n	80153c2 <handleAnnounce+0x156>
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 80153b8:	425b      	negs	r3, r3
 80153ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80153be:	fa42 f303 	asr.w	r3, r2, r3
 80153c2:	fb01 f303 	mul.w	r3, r1, r3
		timerStart(ANNOUNCE_RECEIPT_TIMER,
 80153c6:	4619      	mov	r1, r3
 80153c8:	2003      	movs	r0, #3
 80153ca:	f002 ff25 	bl	8018218 <timerStart>
	case PTP_PRE_MASTER:
	case PTP_LISTENING:
	default:

		DBGV("handleAnnounce: from another foreign master\r\n");
		msgUnpackAnnounce(ptpClock->msgIbuf, &ptpClock->msgTmp.announce);
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	f503 72fc 	add.w	r2, r3, #504	; 0x1f8
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	33a8      	adds	r3, #168	; 0xa8
 80153d8:	4619      	mov	r1, r3
 80153da:	4610      	mov	r0, r2
 80153dc:	f001 f9f3 	bl	80167c6 <msgUnpackAnnounce>

		/* Valid announce message is received : BMC algorithm will be executed */
		setFlag(ptpClock->events, STATE_DECISION_EVENT);
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
 80153e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
		addForeign(ptpClock, &ptpClock->msgTmpHeader,
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	f103 0180 	add.w	r1, r3, #128	; 0x80
				&ptpClock->msgTmp.announce);
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	33a8      	adds	r3, #168	; 0xa8
		addForeign(ptpClock, &ptpClock->msgTmpHeader,
 80153fa:	461a      	mov	r2, r3
 80153fc:	6878      	ldr	r0, [r7, #4]
 80153fe:	f7fe fd19 	bl	8013e34 <addForeign>

		break;
 8015402:	bf00      	nop
 8015404:	e002      	b.n	801540c <handleAnnounce+0x1a0>
		return;
 8015406:	bf00      	nop
 8015408:	e000      	b.n	801540c <handleAnnounce+0x1a0>
		break;
 801540a:	bf00      	nop
	}
}
 801540c:	3718      	adds	r7, #24
 801540e:	46bd      	mov	sp, r7
 8015410:	bd80      	pop	{r7, pc}
 8015412:	bf00      	nop
 8015414:	0801bca8 	.word	0x0801bca8
 8015418:	0801be90 	.word	0x0801be90

0801541c <handleSync>:

static void handleSync(PtpClock *ptpClock, TimeInternal *time, bool isFromSelf)
{
 801541c:	b580      	push	{r7, lr}
 801541e:	b08c      	sub	sp, #48	; 0x30
 8015420:	af00      	add	r7, sp, #0
 8015422:	60f8      	str	r0, [r7, #12]
 8015424:	60b9      	str	r1, [r7, #8]
 8015426:	4613      	mov	r3, r2
 8015428:	71fb      	strb	r3, [r7, #7]
	TimeInternal originTimestamp;
	TimeInternal correctionField;
	bool isFromCurrentParent = FALSE;
 801542a:	2300      	movs	r3, #0
 801542c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	DBGV("handleSync: received in state %s\r\n", stateString(ptpClock->portDS.portState));

	if (ptpClock->msgIbufLength < SYNC_LENGTH)
 8015430:	68fb      	ldr	r3, [r7, #12]
 8015432:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 8015436:	2b2b      	cmp	r3, #43	; 0x2b
 8015438:	dc12      	bgt.n	8015460 <handleSync+0x44>
	{
		ERROR("handleSync: short message\r\n");
 801543a:	f107 0314 	add.w	r3, r7, #20
 801543e:	4618      	mov	r0, r3
 8015440:	f002 fdf6 	bl	8018030 <getTime>
 8015444:	697b      	ldr	r3, [r7, #20]
 8015446:	69ba      	ldr	r2, [r7, #24]
 8015448:	4619      	mov	r1, r3
 801544a:	4850      	ldr	r0, [pc, #320]	; (801558c <handleSync+0x170>)
 801544c:	f002 ff6a 	bl	8018324 <iprintf>
 8015450:	484f      	ldr	r0, [pc, #316]	; (8015590 <handleSync+0x174>)
 8015452:	f002 ffdb 	bl	801840c <puts>
		toState(ptpClock, PTP_FAULTY);
 8015456:	2101      	movs	r1, #1
 8015458:	68f8      	ldr	r0, [r7, #12]
 801545a:	f7ff f91b 	bl	8014694 <toState>
 801545e:	e092      	b.n	8015586 <handleSync+0x16a>
		return;
	}

	switch (ptpClock->portDS.portState)
 8015460:	68fb      	ldr	r3, [r7, #12]
 8015462:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8015466:	2b08      	cmp	r3, #8
 8015468:	f200 8088 	bhi.w	801557c <handleSync+0x160>
 801546c:	a201      	add	r2, pc, #4	; (adr r2, 8015474 <handleSync+0x58>)
 801546e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015472:	bf00      	nop
 8015474:	0801557d 	.word	0x0801557d
 8015478:	0801557d 	.word	0x0801557d
 801547c:	0801557d 	.word	0x0801557d
 8015480:	0801557d 	.word	0x0801557d
 8015484:	0801557d 	.word	0x0801557d
 8015488:	08015569 	.word	0x08015569
 801548c:	08015575 	.word	0x08015575
 8015490:	08015499 	.word	0x08015499
 8015494:	08015499 	.word	0x08015499
		break;

	case PTP_UNCALIBRATED:
	case PTP_SLAVE:

		if (isFromSelf)
 8015498:	79fb      	ldrb	r3, [r7, #7]
 801549a:	2b00      	cmp	r3, #0
 801549c:	d170      	bne.n	8015580 <handleSync+0x164>
			DBGV("handleSync: ignore from self\r\n");
			break;
		}

		isFromCurrentParent = isSamePortIdentity(
				&ptpClock->parentDS.parentPortIdentity,
 801549e:	68fb      	ldr	r3, [r7, #12]
 80154a0:	f103 0228 	add.w	r2, r3, #40	; 0x28
				&ptpClock->msgTmpHeader.sourcePortIdentity);
 80154a4:	68fb      	ldr	r3, [r7, #12]
 80154a6:	3398      	adds	r3, #152	; 0x98
		isFromCurrentParent = isSamePortIdentity(
 80154a8:	4619      	mov	r1, r3
 80154aa:	4610      	mov	r0, r2
 80154ac:	f7fe fca2 	bl	8013df4 <isSamePortIdentity>
 80154b0:	4603      	mov	r3, r0
 80154b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		if (!isFromCurrentParent)
 80154b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80154ba:	f083 0301 	eor.w	r3, r3, #1
 80154be:	b2db      	uxtb	r3, r3
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	d15f      	bne.n	8015584 <handleSync+0x168>
		{
			DBGV("handleSync: ignore from another master\r\n");
			break;
		}

		ptpClock->timestamp_syncRecieve = *time;
 80154c4:	68fb      	ldr	r3, [r7, #12]
 80154c6:	68ba      	ldr	r2, [r7, #8]
 80154c8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80154cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80154d0:	e883 0003 	stmia.w	r3, {r0, r1}
		scaledNanosecondsToInternalTime(&ptpClock->msgTmpHeader.correctionfield,
 80154d4:	68fb      	ldr	r3, [r7, #12]
 80154d6:	3390      	adds	r3, #144	; 0x90
 80154d8:	f107 021c 	add.w	r2, r7, #28
 80154dc:	4611      	mov	r1, r2
 80154de:	4618      	mov	r0, r3
 80154e0:	f7fe fa32 	bl	8013948 <scaledNanosecondsToInternalTime>
				&correctionField);

		if (getFlag(ptpClock->msgTmpHeader.flagField[0], FLAG0_TWO_STEP))
 80154e4:	68fb      	ldr	r3, [r7, #12]
 80154e6:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 80154ea:	f003 0302 	and.w	r3, r3, #2
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	d013      	beq.n	801551a <handleSync+0xfe>
		{
			ptpClock->waitingForFollowUp = TRUE;
 80154f2:	68fb      	ldr	r3, [r7, #12]
 80154f4:	2201      	movs	r2, #1
 80154f6:	f883 238c 	strb.w	r2, [r3, #908]	; 0x38c
			ptpClock->recvSyncSequenceId = ptpClock->msgTmpHeader.sequenceId;
 80154fa:	68fb      	ldr	r3, [r7, #12]
 80154fc:	f9b3 20a2 	ldrsh.w	r2, [r3, #162]	; 0xa2
 8015500:	68fb      	ldr	r3, [r7, #12]
 8015502:	f8a3 238a 	strh.w	r2, [r3, #906]	; 0x38a
			/* Save correctionField of Sync message for future use */
			ptpClock->correctionField_sync = correctionField;
 8015506:	68fb      	ldr	r3, [r7, #12]
 8015508:	f503 735c 	add.w	r3, r3, #880	; 0x370
 801550c:	f107 021c 	add.w	r2, r7, #28
 8015510:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015514:	e883 0003 	stmia.w	r3, {r0, r1}
			updateClock(ptpClock);

			issueDelayReqTimerExpired(ptpClock);
		}

		break;
 8015518:	e035      	b.n	8015586 <handleSync+0x16a>
			msgUnpackSync(ptpClock->msgIbuf, &ptpClock->msgTmp.sync);
 801551a:	68fb      	ldr	r3, [r7, #12]
 801551c:	f503 72fc 	add.w	r2, r3, #504	; 0x1f8
 8015520:	68fb      	ldr	r3, [r7, #12]
 8015522:	33a8      	adds	r3, #168	; 0xa8
 8015524:	4619      	mov	r1, r3
 8015526:	4610      	mov	r0, r2
 8015528:	f001 fa16 	bl	8016958 <msgUnpackSync>
			ptpClock->waitingForFollowUp = FALSE;
 801552c:	68fb      	ldr	r3, [r7, #12]
 801552e:	2200      	movs	r2, #0
 8015530:	f883 238c 	strb.w	r2, [r3, #908]	; 0x38c
					&ptpClock->msgTmp.sync.originTimestamp);
 8015534:	68fb      	ldr	r3, [r7, #12]
 8015536:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
			toInternalTime(&originTimestamp,
 801553a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801553e:	4611      	mov	r1, r2
 8015540:	4618      	mov	r0, r3
 8015542:	f7fe fa81 	bl	8013a48 <toInternalTime>
			updateOffset(ptpClock, &ptpClock->timestamp_syncRecieve,
 8015546:	68fb      	ldr	r3, [r7, #12]
 8015548:	f503 7156 	add.w	r1, r3, #856	; 0x358
 801554c:	f107 031c 	add.w	r3, r7, #28
 8015550:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015554:	68f8      	ldr	r0, [r7, #12]
 8015556:	f002 fae1 	bl	8017b1c <updateOffset>
			updateClock(ptpClock);
 801555a:	68f8      	ldr	r0, [r7, #12]
 801555c:	f002 fc1a 	bl	8017d94 <updateClock>
			issueDelayReqTimerExpired(ptpClock);
 8015560:	68f8      	ldr	r0, [r7, #12]
 8015562:	f000 fc53 	bl	8015e0c <issueDelayReqTimerExpired>
		break;
 8015566:	e00e      	b.n	8015586 <handleSync+0x16a>

	case PTP_MASTER:

		if (!isFromSelf)
 8015568:	79fb      	ldrb	r3, [r7, #7]
 801556a:	f083 0301 	eor.w	r3, r3, #1
 801556e:	b2db      	uxtb	r3, r3
 8015570:	2b00      	cmp	r3, #0
			break;
		}
		else
		{
			DBGV("handleSync: ignore from self\r\n");
			break;
 8015572:	e008      	b.n	8015586 <handleSync+0x16a>
//            break;
//        }
	case PTP_PASSIVE:

		DBGV("handleSync: disreguard\r\n");
		issueDelayReqTimerExpired(ptpClock);
 8015574:	68f8      	ldr	r0, [r7, #12]
 8015576:	f000 fc49 	bl	8015e0c <issueDelayReqTimerExpired>

		break;
 801557a:	e004      	b.n	8015586 <handleSync+0x16a>

	default:

		DBGV("handleSync: disreguard\r\n");
		break;
 801557c:	bf00      	nop
 801557e:	e002      	b.n	8015586 <handleSync+0x16a>
			break;
 8015580:	bf00      	nop
 8015582:	e000      	b.n	8015586 <handleSync+0x16a>
			break;
 8015584:	bf00      	nop
	}
}
 8015586:	3730      	adds	r7, #48	; 0x30
 8015588:	46bd      	mov	sp, r7
 801558a:	bd80      	pop	{r7, pc}
 801558c:	0801bca8 	.word	0x0801bca8
 8015590:	0801beb0 	.word	0x0801beb0

08015594 <handleFollowUp>:

static void handleFollowUp(PtpClock *ptpClock, bool isFromSelf)
{
 8015594:	b580      	push	{r7, lr}
 8015596:	b08c      	sub	sp, #48	; 0x30
 8015598:	af00      	add	r7, sp, #0
 801559a:	6078      	str	r0, [r7, #4]
 801559c:	460b      	mov	r3, r1
 801559e:	70fb      	strb	r3, [r7, #3]
	TimeInternal preciseOriginTimestamp;
	TimeInternal correctionField;
	bool isFromCurrentParent = FALSE;
 80155a0:	2300      	movs	r3, #0
 80155a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	DBGV("handleFollowup: received in state %s\r\n", stateString(ptpClock->portDS.portState));

	if (ptpClock->msgIbufLength < FOLLOW_UP_LENGTH)
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 80155ac:	2b2b      	cmp	r3, #43	; 0x2b
 80155ae:	dc12      	bgt.n	80155d6 <handleFollowUp+0x42>
	{
		ERROR("handleFollowup: short message\r\n");
 80155b0:	f107 0314 	add.w	r3, r7, #20
 80155b4:	4618      	mov	r0, r3
 80155b6:	f002 fd3b 	bl	8018030 <getTime>
 80155ba:	697b      	ldr	r3, [r7, #20]
 80155bc:	69ba      	ldr	r2, [r7, #24]
 80155be:	4619      	mov	r1, r3
 80155c0:	4852      	ldr	r0, [pc, #328]	; (801570c <handleFollowUp+0x178>)
 80155c2:	f002 feaf 	bl	8018324 <iprintf>
 80155c6:	4852      	ldr	r0, [pc, #328]	; (8015710 <handleFollowUp+0x17c>)
 80155c8:	f002 ff20 	bl	801840c <puts>
		toState(ptpClock, PTP_FAULTY);
 80155cc:	2101      	movs	r1, #1
 80155ce:	6878      	ldr	r0, [r7, #4]
 80155d0:	f7ff f860 	bl	8014694 <toState>
		return;
 80155d4:	e097      	b.n	8015706 <handleFollowUp+0x172>
	}

	if (isFromSelf)
 80155d6:	78fb      	ldrb	r3, [r7, #3]
 80155d8:	2b00      	cmp	r3, #0
 80155da:	f040 808b 	bne.w	80156f4 <handleFollowUp+0x160>
	{
		DBGV("handleFollowup: ignore from self\r\n");
		return;
	}

	switch (ptpClock->portDS.portState)
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80155e4:	2b08      	cmp	r3, #8
 80155e6:	d875      	bhi.n	80156d4 <handleFollowUp+0x140>
 80155e8:	a201      	add	r2, pc, #4	; (adr r2, 80155f0 <handleFollowUp+0x5c>)
 80155ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80155ee:	bf00      	nop
 80155f0:	080156f9 	.word	0x080156f9
 80155f4:	080156f9 	.word	0x080156f9
 80155f8:	080156f9 	.word	0x080156f9
 80155fc:	080156f9 	.word	0x080156f9
 8015600:	080156d5 	.word	0x080156d5
 8015604:	080156f9 	.word	0x080156f9
 8015608:	080156cd 	.word	0x080156cd
 801560c:	08015615 	.word	0x08015615
 8015610:	08015615 	.word	0x08015615

	case PTP_UNCALIBRATED:
	case PTP_SLAVE:

		isFromCurrentParent = isSamePortIdentity(
				&ptpClock->parentDS.parentPortIdentity,
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	f103 0228 	add.w	r2, r3, #40	; 0x28
				&ptpClock->msgTmpHeader.sourcePortIdentity);
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	3398      	adds	r3, #152	; 0x98
		isFromCurrentParent = isSamePortIdentity(
 801561e:	4619      	mov	r1, r3
 8015620:	4610      	mov	r0, r2
 8015622:	f7fe fbe7 	bl	8013df4 <isSamePortIdentity>
 8015626:	4603      	mov	r3, r0
 8015628:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		if (!ptpClock->waitingForFollowUp)
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	f893 338c 	ldrb.w	r3, [r3, #908]	; 0x38c
 8015632:	f083 0301 	eor.w	r3, r3, #1
 8015636:	b2db      	uxtb	r3, r3
 8015638:	2b00      	cmp	r3, #0
 801563a:	d15f      	bne.n	80156fc <handleFollowUp+0x168>
		{
			DBGV("handleFollowup: not waiting a message\r\n");
			break;
		}

		if (!isFromCurrentParent)
 801563c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015640:	f083 0301 	eor.w	r3, r3, #1
 8015644:	b2db      	uxtb	r3, r3
 8015646:	2b00      	cmp	r3, #0
 8015648:	d15a      	bne.n	8015700 <handleFollowUp+0x16c>
		{
			DBGV("handleFollowup: not from current parent\r\n");
			break;
		}

		if (ptpClock->recvSyncSequenceId != ptpClock->msgTmpHeader.sequenceId)
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	f9b3 238a 	ldrsh.w	r2, [r3, #906]	; 0x38a
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	f9b3 30a2 	ldrsh.w	r3, [r3, #162]	; 0xa2
 8015656:	429a      	cmp	r2, r3
 8015658:	d154      	bne.n	8015704 <handleFollowUp+0x170>
		{
			DBGV("handleFollowup: SequenceID doesn't match with last Sync message\r\n");
			break;
		}

		msgUnpackFollowUp(ptpClock->msgIbuf, &ptpClock->msgTmp.follow);
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	f503 72fc 	add.w	r2, r3, #504	; 0x1f8
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	33a8      	adds	r3, #168	; 0xa8
 8015664:	4619      	mov	r1, r3
 8015666:	4610      	mov	r0, r2
 8015668:	f001 fa52 	bl	8016b10 <msgUnpackFollowUp>

		ptpClock->waitingForFollowUp = FALSE;
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	2200      	movs	r2, #0
 8015670:	f883 238c 	strb.w	r2, [r3, #908]	; 0x38c
		/* synchronize local clock */
		toInternalTime(&preciseOriginTimestamp,
				&ptpClock->msgTmp.follow.preciseOriginTimestamp);
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
		toInternalTime(&preciseOriginTimestamp,
 801567a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801567e:	4611      	mov	r1, r2
 8015680:	4618      	mov	r0, r3
 8015682:	f7fe f9e1 	bl	8013a48 <toInternalTime>
		scaledNanosecondsToInternalTime(&ptpClock->msgTmpHeader.correctionfield,
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	3390      	adds	r3, #144	; 0x90
 801568a:	f107 021c 	add.w	r2, r7, #28
 801568e:	4611      	mov	r1, r2
 8015690:	4618      	mov	r0, r3
 8015692:	f7fe f959 	bl	8013948 <scaledNanosecondsToInternalTime>
				&correctionField);
		addTime(&correctionField, &correctionField,
				&ptpClock->correctionField_sync);
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	f503 725c 	add.w	r2, r3, #880	; 0x370
		addTime(&correctionField, &correctionField,
 801569c:	f107 011c 	add.w	r1, r7, #28
 80156a0:	f107 031c 	add.w	r3, r7, #28
 80156a4:	4618      	mov	r0, r3
 80156a6:	f7fe fa4f 	bl	8013b48 <addTime>
		updateOffset(ptpClock, &ptpClock->timestamp_syncRecieve,
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	f503 7156 	add.w	r1, r3, #856	; 0x358
 80156b0:	f107 031c 	add.w	r3, r7, #28
 80156b4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80156b8:	6878      	ldr	r0, [r7, #4]
 80156ba:	f002 fa2f 	bl	8017b1c <updateOffset>
				&preciseOriginTimestamp, &correctionField);
		updateClock(ptpClock);
 80156be:	6878      	ldr	r0, [r7, #4]
 80156c0:	f002 fb68 	bl	8017d94 <updateClock>
		//��Ҫȷ����ʱ�Ӻ�Ż��ΪSLAVEģʽ��������δ����ģʽ���޷������ӳ�����
		//ȷ����ʱ����Ҫƫ��ֵС��DEFAULT_CALIBRATED_OFFSET_NS
		//printf("port state:%s\r\n",ptpClock->portDS.portState==PTP_SLAVE?"PTP_SLAVE":"PTP_UNCALIBRATED");
		issueDelayReqTimerExpired(ptpClock);
 80156c4:	6878      	ldr	r0, [r7, #4]
 80156c6:	f000 fba1 	bl	8015e0c <issueDelayReqTimerExpired>
		break;
 80156ca:	e01c      	b.n	8015706 <handleFollowUp+0x172>

		DBGV("handleFollowup: from another master\r\n");
		break;

	case PTP_PASSIVE:
		printf("PASSIVE:Going to issue DelayReq\r\n");
 80156cc:	4811      	ldr	r0, [pc, #68]	; (8015714 <handleFollowUp+0x180>)
 80156ce:	f002 fe9d 	bl	801840c <puts>
		DBGV("handleFollowup: disreguard\r\n");
		//issueDelayReqTimerExpired(ptpClock);
		break;
 80156d2:	e018      	b.n	8015706 <handleFollowUp+0x172>

	default:

		DBG("handleFollowup: unrecognized state\r\n")
 80156d4:	f107 030c 	add.w	r3, r7, #12
 80156d8:	4618      	mov	r0, r3
 80156da:	f002 fca9 	bl	8018030 <getTime>
 80156de:	68fb      	ldr	r3, [r7, #12]
 80156e0:	693a      	ldr	r2, [r7, #16]
 80156e2:	4619      	mov	r1, r3
 80156e4:	480c      	ldr	r0, [pc, #48]	; (8015718 <handleFollowUp+0x184>)
 80156e6:	f002 fe1d 	bl	8018324 <iprintf>
 80156ea:	480c      	ldr	r0, [pc, #48]	; (801571c <handleFollowUp+0x188>)
 80156ec:	f002 fe8e 	bl	801840c <puts>
		;
		break;
 80156f0:	bf00      	nop
 80156f2:	e008      	b.n	8015706 <handleFollowUp+0x172>
		return;
 80156f4:	bf00      	nop
 80156f6:	e006      	b.n	8015706 <handleFollowUp+0x172>
		break;
 80156f8:	bf00      	nop
 80156fa:	e004      	b.n	8015706 <handleFollowUp+0x172>
			break;
 80156fc:	bf00      	nop
 80156fe:	e002      	b.n	8015706 <handleFollowUp+0x172>
			break;
 8015700:	bf00      	nop
 8015702:	e000      	b.n	8015706 <handleFollowUp+0x172>
			break;
 8015704:	bf00      	nop
	}
}
 8015706:	3730      	adds	r7, #48	; 0x30
 8015708:	46bd      	mov	sp, r7
 801570a:	bd80      	pop	{r7, pc}
 801570c:	0801bca8 	.word	0x0801bca8
 8015710:	0801becc 	.word	0x0801becc
 8015714:	0801beec 	.word	0x0801beec
 8015718:	0801bbfc 	.word	0x0801bbfc
 801571c:	0801bf10 	.word	0x0801bf10

08015720 <handleDelayReq>:

static void handleDelayReq(PtpClock *ptpClock, TimeInternal *time,
		bool isFromSelf)
{
 8015720:	b580      	push	{r7, lr}
 8015722:	b08a      	sub	sp, #40	; 0x28
 8015724:	af00      	add	r7, sp, #0
 8015726:	60f8      	str	r0, [r7, #12]
 8015728:	60b9      	str	r1, [r7, #8]
 801572a:	4613      	mov	r3, r2
 801572c:	71fb      	strb	r3, [r7, #7]
	switch (ptpClock->portDS.delayMechanism)
 801572e:	68fb      	ldr	r3, [r7, #12]
 8015730:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8015734:	2b01      	cmp	r3, #1
 8015736:	d002      	beq.n	801573e <handleDelayReq+0x1e>
 8015738:	2b02      	cmp	r3, #2
 801573a:	d04c      	beq.n	80157d6 <handleDelayReq+0xb6>
		break;

	default:

		/* none */
		break;
 801573c:	e05b      	b.n	80157f6 <handleDelayReq+0xd6>
		if (ptpClock->msgIbufLength < DELAY_REQ_LENGTH)
 801573e:	68fb      	ldr	r3, [r7, #12]
 8015740:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 8015744:	2b2b      	cmp	r3, #43	; 0x2b
 8015746:	dc12      	bgt.n	801576e <handleDelayReq+0x4e>
			ERROR("handleDelayReq: short message\r\n");
 8015748:	f107 0320 	add.w	r3, r7, #32
 801574c:	4618      	mov	r0, r3
 801574e:	f002 fc6f 	bl	8018030 <getTime>
 8015752:	6a3b      	ldr	r3, [r7, #32]
 8015754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015756:	4619      	mov	r1, r3
 8015758:	4828      	ldr	r0, [pc, #160]	; (80157fc <handleDelayReq+0xdc>)
 801575a:	f002 fde3 	bl	8018324 <iprintf>
 801575e:	4828      	ldr	r0, [pc, #160]	; (8015800 <handleDelayReq+0xe0>)
 8015760:	f002 fe54 	bl	801840c <puts>
			toState(ptpClock, PTP_FAULTY);
 8015764:	2101      	movs	r1, #1
 8015766:	68f8      	ldr	r0, [r7, #12]
 8015768:	f7fe ff94 	bl	8014694 <toState>
			return;
 801576c:	e043      	b.n	80157f6 <handleDelayReq+0xd6>
		switch (ptpClock->portDS.portState)
 801576e:	68fb      	ldr	r3, [r7, #12]
 8015770:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8015774:	2b08      	cmp	r3, #8
 8015776:	d81d      	bhi.n	80157b4 <handleDelayReq+0x94>
 8015778:	a201      	add	r2, pc, #4	; (adr r2, 8015780 <handleDelayReq+0x60>)
 801577a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801577e:	bf00      	nop
 8015780:	080157f5 	.word	0x080157f5
 8015784:	080157f5 	.word	0x080157f5
 8015788:	080157f5 	.word	0x080157f5
 801578c:	080157f5 	.word	0x080157f5
 8015790:	080157b5 	.word	0x080157b5
 8015794:	080157a5 	.word	0x080157a5
 8015798:	080157b5 	.word	0x080157b5
 801579c:	080157f5 	.word	0x080157f5
 80157a0:	080157d3 	.word	0x080157d3
			issueDelayResp(ptpClock, time, &ptpClock->msgTmpHeader);
 80157a4:	68fb      	ldr	r3, [r7, #12]
 80157a6:	3380      	adds	r3, #128	; 0x80
 80157a8:	461a      	mov	r2, r3
 80157aa:	68b9      	ldr	r1, [r7, #8]
 80157ac:	68f8      	ldr	r0, [r7, #12]
 80157ae:	f000 fd7f 	bl	80162b0 <issueDelayResp>
			break;
 80157b2:	e00f      	b.n	80157d4 <handleDelayReq+0xb4>
			DBG("handleDelayReq: unrecognized state\r\n")
 80157b4:	f107 0318 	add.w	r3, r7, #24
 80157b8:	4618      	mov	r0, r3
 80157ba:	f002 fc39 	bl	8018030 <getTime>
 80157be:	69bb      	ldr	r3, [r7, #24]
 80157c0:	69fa      	ldr	r2, [r7, #28]
 80157c2:	4619      	mov	r1, r3
 80157c4:	480f      	ldr	r0, [pc, #60]	; (8015804 <handleDelayReq+0xe4>)
 80157c6:	f002 fdad 	bl	8018324 <iprintf>
 80157ca:	480f      	ldr	r0, [pc, #60]	; (8015808 <handleDelayReq+0xe8>)
 80157cc:	f002 fe1e 	bl	801840c <puts>
			break;
 80157d0:	e000      	b.n	80157d4 <handleDelayReq+0xb4>
			break;
 80157d2:	bf00      	nop
		break;
 80157d4:	e00f      	b.n	80157f6 <handleDelayReq+0xd6>
		ERROR("handleDelayReq: disreguard in P2P mode\r\n")
 80157d6:	f107 0310 	add.w	r3, r7, #16
 80157da:	4618      	mov	r0, r3
 80157dc:	f002 fc28 	bl	8018030 <getTime>
 80157e0:	693b      	ldr	r3, [r7, #16]
 80157e2:	697a      	ldr	r2, [r7, #20]
 80157e4:	4619      	mov	r1, r3
 80157e6:	4805      	ldr	r0, [pc, #20]	; (80157fc <handleDelayReq+0xdc>)
 80157e8:	f002 fd9c 	bl	8018324 <iprintf>
 80157ec:	4807      	ldr	r0, [pc, #28]	; (801580c <handleDelayReq+0xec>)
 80157ee:	f002 fe0d 	bl	801840c <puts>
		break;
 80157f2:	e000      	b.n	80157f6 <handleDelayReq+0xd6>
			return;
 80157f4:	bf00      	nop
	}
}
 80157f6:	3728      	adds	r7, #40	; 0x28
 80157f8:	46bd      	mov	sp, r7
 80157fa:	bd80      	pop	{r7, pc}
 80157fc:	0801bca8 	.word	0x0801bca8
 8015800:	0801bf34 	.word	0x0801bf34
 8015804:	0801bbfc 	.word	0x0801bbfc
 8015808:	0801bf54 	.word	0x0801bf54
 801580c:	0801bf78 	.word	0x0801bf78

08015810 <handleDelayResp>:

static void handleDelayResp(PtpClock *ptpClock, bool isFromSelf)
{
 8015810:	b580      	push	{r7, lr}
 8015812:	b08a      	sub	sp, #40	; 0x28
 8015814:	af00      	add	r7, sp, #0
 8015816:	6078      	str	r0, [r7, #4]
 8015818:	460b      	mov	r3, r1
 801581a:	70fb      	strb	r3, [r7, #3]
	bool isFromCurrentParent = FALSE;
 801581c:	2300      	movs	r3, #0
 801581e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	bool isCurrentRequest = FALSE;
 8015822:	2300      	movs	r3, #0
 8015824:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	TimeInternal correctionField;

	switch (ptpClock->portDS.delayMechanism)
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 801582e:	2b01      	cmp	r3, #1
 8015830:	d003      	beq.n	801583a <handleDelayResp+0x2a>
 8015832:	2b02      	cmp	r3, #2
 8015834:	f000 8089 	beq.w	801594a <handleDelayResp+0x13a>
		;
		break;

	default:

		break;
 8015838:	e097      	b.n	801596a <handleDelayResp+0x15a>
		if (ptpClock->msgIbufLength < DELAY_RESP_LENGTH)
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 8015840:	2b35      	cmp	r3, #53	; 0x35
 8015842:	dc12      	bgt.n	801586a <handleDelayResp+0x5a>
			ERROR("handleDelayResp: short message\r\n");
 8015844:	f107 0314 	add.w	r3, r7, #20
 8015848:	4618      	mov	r0, r3
 801584a:	f002 fbf1 	bl	8018030 <getTime>
 801584e:	697b      	ldr	r3, [r7, #20]
 8015850:	69ba      	ldr	r2, [r7, #24]
 8015852:	4619      	mov	r1, r3
 8015854:	4846      	ldr	r0, [pc, #280]	; (8015970 <handleDelayResp+0x160>)
 8015856:	f002 fd65 	bl	8018324 <iprintf>
 801585a:	4846      	ldr	r0, [pc, #280]	; (8015974 <handleDelayResp+0x164>)
 801585c:	f002 fdd6 	bl	801840c <puts>
			toState(ptpClock, PTP_FAULTY);
 8015860:	2101      	movs	r1, #1
 8015862:	6878      	ldr	r0, [r7, #4]
 8015864:	f7fe ff16 	bl	8014694 <toState>
			return;
 8015868:	e07f      	b.n	801596a <handleDelayResp+0x15a>
		switch (ptpClock->portDS.portState)
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8015870:	2b08      	cmp	r3, #8
 8015872:	d879      	bhi.n	8015968 <handleDelayResp+0x158>
 8015874:	a201      	add	r2, pc, #4	; (adr r2, 801587c <handleDelayResp+0x6c>)
 8015876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801587a:	bf00      	nop
 801587c:	08015969 	.word	0x08015969
 8015880:	08015969 	.word	0x08015969
 8015884:	08015969 	.word	0x08015969
 8015888:	08015969 	.word	0x08015969
 801588c:	08015969 	.word	0x08015969
 8015890:	08015969 	.word	0x08015969
 8015894:	08015969 	.word	0x08015969
 8015898:	080158a1 	.word	0x080158a1
 801589c:	080158a1 	.word	0x080158a1
			msgUnpackDelayResp(ptpClock->msgIbuf, &ptpClock->msgTmp.resp);
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	f503 72fc 	add.w	r2, r3, #504	; 0x1f8
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	33a8      	adds	r3, #168	; 0xa8
 80158aa:	4619      	mov	r1, r3
 80158ac:	4610      	mov	r0, r2
 80158ae:	f001 f9e7 	bl	8016c80 <msgUnpackDelayResp>
					&ptpClock->parentDS.parentPortIdentity,
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	f103 0228 	add.w	r2, r3, #40	; 0x28
					&ptpClock->msgTmpHeader.sourcePortIdentity);
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	3398      	adds	r3, #152	; 0x98
			isFromCurrentParent = isSamePortIdentity(
 80158bc:	4619      	mov	r1, r3
 80158be:	4610      	mov	r0, r2
 80158c0:	f7fe fa98 	bl	8013df4 <isSamePortIdentity>
 80158c4:	4603      	mov	r3, r0
 80158c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					&ptpClock->portDS.portIdentity,
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	f103 0258 	add.w	r2, r3, #88	; 0x58
					&ptpClock->msgTmp.resp.requestingPortIdentity);
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	33b4      	adds	r3, #180	; 0xb4
			isCurrentRequest = isSamePortIdentity(
 80158d4:	4619      	mov	r1, r3
 80158d6:	4610      	mov	r0, r2
 80158d8:	f7fe fa8c 	bl	8013df4 <isSamePortIdentity>
 80158dc:	4603      	mov	r3, r0
 80158de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (((ptpClock->sentDelayReqSequenceId - 1)
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	f9b3 3382 	ldrsh.w	r3, [r3, #898]	; 0x382
 80158e8:	3b01      	subs	r3, #1
					== ptpClock->msgTmpHeader.sequenceId) && isCurrentRequest
 80158ea:	687a      	ldr	r2, [r7, #4]
 80158ec:	f9b2 20a2 	ldrsh.w	r2, [r2, #162]	; 0xa2
			if (((ptpClock->sentDelayReqSequenceId - 1)
 80158f0:	4293      	cmp	r3, r2
 80158f2:	d139      	bne.n	8015968 <handleDelayResp+0x158>
					== ptpClock->msgTmpHeader.sequenceId) && isCurrentRequest
 80158f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	d035      	beq.n	8015968 <handleDelayResp+0x158>
					&& isFromCurrentParent)
 80158fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015900:	2b00      	cmp	r3, #0
 8015902:	d031      	beq.n	8015968 <handleDelayResp+0x158>
				toInternalTime(&ptpClock->timestamp_delayReqRecieve,
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	f503 725a 	add.w	r2, r3, #872	; 0x368
						&ptpClock->msgTmp.resp.receiveTimestamp);
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	33a8      	adds	r3, #168	; 0xa8
				toInternalTime(&ptpClock->timestamp_delayReqRecieve,
 801590e:	4619      	mov	r1, r3
 8015910:	4610      	mov	r0, r2
 8015912:	f7fe f899 	bl	8013a48 <toInternalTime>
						&ptpClock->msgTmpHeader.correctionfield,
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	3390      	adds	r3, #144	; 0x90
				scaledNanosecondsToInternalTime(
 801591a:	f107 021c 	add.w	r2, r7, #28
 801591e:	4611      	mov	r1, r2
 8015920:	4618      	mov	r0, r3
 8015922:	f7fe f811 	bl	8013948 <scaledNanosecondsToInternalTime>
				updateDelay(ptpClock, &ptpClock->timestamp_delayReqSend,
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	f503 7158 	add.w	r1, r3, #864	; 0x360
						&ptpClock->timestamp_delayReqRecieve, &correctionField);
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	f503 725a 	add.w	r2, r3, #872	; 0x368
				updateDelay(ptpClock, &ptpClock->timestamp_delayReqSend,
 8015932:	f107 031c 	add.w	r3, r7, #28
 8015936:	6878      	ldr	r0, [r7, #4]
 8015938:	f002 f992 	bl	8017c60 <updateDelay>
						ptpClock->msgTmpHeader.logMessageInterval;
 801593c:	687b      	ldr	r3, [r7, #4]
 801593e:	f993 20a5 	ldrsb.w	r2, [r3, #165]	; 0xa5
				ptpClock->portDS.logMinDelayReqInterval =
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
		break;
 8015948:	e00e      	b.n	8015968 <handleDelayResp+0x158>
		ERROR("handleDelayResp: disreguard in P2P mode\r\n")
 801594a:	f107 030c 	add.w	r3, r7, #12
 801594e:	4618      	mov	r0, r3
 8015950:	f002 fb6e 	bl	8018030 <getTime>
 8015954:	68fb      	ldr	r3, [r7, #12]
 8015956:	693a      	ldr	r2, [r7, #16]
 8015958:	4619      	mov	r1, r3
 801595a:	4805      	ldr	r0, [pc, #20]	; (8015970 <handleDelayResp+0x160>)
 801595c:	f002 fce2 	bl	8018324 <iprintf>
 8015960:	4805      	ldr	r0, [pc, #20]	; (8015978 <handleDelayResp+0x168>)
 8015962:	f002 fd53 	bl	801840c <puts>
		break;
 8015966:	e000      	b.n	801596a <handleDelayResp+0x15a>
		break;
 8015968:	bf00      	nop
	}
}
 801596a:	3728      	adds	r7, #40	; 0x28
 801596c:	46bd      	mov	sp, r7
 801596e:	bd80      	pop	{r7, pc}
 8015970:	0801bca8 	.word	0x0801bca8
 8015974:	0801bfa0 	.word	0x0801bfa0
 8015978:	0801bfc0 	.word	0x0801bfc0

0801597c <handlePDelayReq>:

static void handlePDelayReq(PtpClock *ptpClock, TimeInternal *time,
		bool isFromSelf)
{
 801597c:	b580      	push	{r7, lr}
 801597e:	b08a      	sub	sp, #40	; 0x28
 8015980:	af00      	add	r7, sp, #0
 8015982:	60f8      	str	r0, [r7, #12]
 8015984:	60b9      	str	r1, [r7, #8]
 8015986:	4613      	mov	r3, r2
 8015988:	71fb      	strb	r3, [r7, #7]
	switch (ptpClock->portDS.delayMechanism)
 801598a:	68fb      	ldr	r3, [r7, #12]
 801598c:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8015990:	2b01      	cmp	r3, #1
 8015992:	d002      	beq.n	801599a <handlePDelayReq+0x1e>
 8015994:	2b02      	cmp	r3, #2
 8015996:	d00f      	beq.n	80159b8 <handlePDelayReq+0x3c>
		}
		break;

	default:

		break;
 8015998:	e071      	b.n	8015a7e <handlePDelayReq+0x102>
		ERROR("handlePDelayReq: disreguard in E2E mode\r\n")
 801599a:	f107 0320 	add.w	r3, r7, #32
 801599e:	4618      	mov	r0, r3
 80159a0:	f002 fb46 	bl	8018030 <getTime>
 80159a4:	6a3b      	ldr	r3, [r7, #32]
 80159a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80159a8:	4619      	mov	r1, r3
 80159aa:	4836      	ldr	r0, [pc, #216]	; (8015a84 <handlePDelayReq+0x108>)
 80159ac:	f002 fcba 	bl	8018324 <iprintf>
 80159b0:	4835      	ldr	r0, [pc, #212]	; (8015a88 <handlePDelayReq+0x10c>)
 80159b2:	f002 fd2b 	bl	801840c <puts>
		break;
 80159b6:	e062      	b.n	8015a7e <handlePDelayReq+0x102>
		if (ptpClock->msgIbufLength < PDELAY_REQ_LENGTH)
 80159b8:	68fb      	ldr	r3, [r7, #12]
 80159ba:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 80159be:	2b35      	cmp	r3, #53	; 0x35
 80159c0:	dc12      	bgt.n	80159e8 <handlePDelayReq+0x6c>
			ERROR("handlePDelayReq: short message\r\n");
 80159c2:	f107 0318 	add.w	r3, r7, #24
 80159c6:	4618      	mov	r0, r3
 80159c8:	f002 fb32 	bl	8018030 <getTime>
 80159cc:	69bb      	ldr	r3, [r7, #24]
 80159ce:	69fa      	ldr	r2, [r7, #28]
 80159d0:	4619      	mov	r1, r3
 80159d2:	482c      	ldr	r0, [pc, #176]	; (8015a84 <handlePDelayReq+0x108>)
 80159d4:	f002 fca6 	bl	8018324 <iprintf>
 80159d8:	482c      	ldr	r0, [pc, #176]	; (8015a8c <handlePDelayReq+0x110>)
 80159da:	f002 fd17 	bl	801840c <puts>
			toState(ptpClock, PTP_FAULTY);
 80159de:	2101      	movs	r1, #1
 80159e0:	68f8      	ldr	r0, [r7, #12]
 80159e2:	f7fe fe57 	bl	8014694 <toState>
			return;
 80159e6:	e04a      	b.n	8015a7e <handlePDelayReq+0x102>
		switch (ptpClock->portDS.portState)
 80159e8:	68fb      	ldr	r3, [r7, #12]
 80159ea:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80159ee:	2b08      	cmp	r3, #8
 80159f0:	d831      	bhi.n	8015a56 <handlePDelayReq+0xda>
 80159f2:	a201      	add	r2, pc, #4	; (adr r2, 80159f8 <handlePDelayReq+0x7c>)
 80159f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80159f8:	08015a7d 	.word	0x08015a7d
 80159fc:	08015a7d 	.word	0x08015a7d
 8015a00:	08015a7d 	.word	0x08015a7d
 8015a04:	08015a7d 	.word	0x08015a7d
 8015a08:	08015a57 	.word	0x08015a57
 8015a0c:	08015a1d 	.word	0x08015a1d
 8015a10:	08015a1d 	.word	0x08015a1d
 8015a14:	08015a7d 	.word	0x08015a7d
 8015a18:	08015a1d 	.word	0x08015a1d
			if (isFromSelf)
 8015a1c:	79fb      	ldrb	r3, [r7, #7]
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	d128      	bne.n	8015a74 <handlePDelayReq+0xf8>
			issuePDelayResp(ptpClock, time, &ptpClock->msgTmpHeader);
 8015a22:	68fb      	ldr	r3, [r7, #12]
 8015a24:	3380      	adds	r3, #128	; 0x80
 8015a26:	461a      	mov	r2, r3
 8015a28:	68b9      	ldr	r1, [r7, #8]
 8015a2a:	68f8      	ldr	r0, [r7, #12]
 8015a2c:	f000 fbf8 	bl	8016220 <issuePDelayResp>
			if ((time->seconds != 0)
 8015a30:	68bb      	ldr	r3, [r7, #8]
 8015a32:	681b      	ldr	r3, [r3, #0]
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	d01f      	beq.n	8015a78 <handlePDelayReq+0xfc>
					&& getFlag(ptpClock->msgTmpHeader.flagField[0],
 8015a38:	68fb      	ldr	r3, [r7, #12]
 8015a3a:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8015a3e:	f003 0302 	and.w	r3, r3, #2
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	d018      	beq.n	8015a78 <handlePDelayReq+0xfc>
						&ptpClock->msgTmpHeader);
 8015a46:	68fb      	ldr	r3, [r7, #12]
 8015a48:	3380      	adds	r3, #128	; 0x80
				issuePDelayRespFollowUp(ptpClock, time,
 8015a4a:	461a      	mov	r2, r3
 8015a4c:	68b9      	ldr	r1, [r7, #8]
 8015a4e:	68f8      	ldr	r0, [r7, #12]
 8015a50:	f000 fc6a 	bl	8016328 <issuePDelayRespFollowUp>
			break;
 8015a54:	e010      	b.n	8015a78 <handlePDelayReq+0xfc>
			DBG("handlePDelayReq: unrecognized state\r\n")
 8015a56:	f107 0310 	add.w	r3, r7, #16
 8015a5a:	4618      	mov	r0, r3
 8015a5c:	f002 fae8 	bl	8018030 <getTime>
 8015a60:	693b      	ldr	r3, [r7, #16]
 8015a62:	697a      	ldr	r2, [r7, #20]
 8015a64:	4619      	mov	r1, r3
 8015a66:	480a      	ldr	r0, [pc, #40]	; (8015a90 <handlePDelayReq+0x114>)
 8015a68:	f002 fc5c 	bl	8018324 <iprintf>
 8015a6c:	4809      	ldr	r0, [pc, #36]	; (8015a94 <handlePDelayReq+0x118>)
 8015a6e:	f002 fccd 	bl	801840c <puts>
			break;
 8015a72:	e002      	b.n	8015a7a <handlePDelayReq+0xfe>
				break;
 8015a74:	bf00      	nop
 8015a76:	e002      	b.n	8015a7e <handlePDelayReq+0x102>
			break;
 8015a78:	bf00      	nop
		break;
 8015a7a:	e000      	b.n	8015a7e <handlePDelayReq+0x102>
			return;
 8015a7c:	bf00      	nop
	}
}
 8015a7e:	3728      	adds	r7, #40	; 0x28
 8015a80:	46bd      	mov	sp, r7
 8015a82:	bd80      	pop	{r7, pc}
 8015a84:	0801bca8 	.word	0x0801bca8
 8015a88:	0801bfec 	.word	0x0801bfec
 8015a8c:	0801c018 	.word	0x0801c018
 8015a90:	0801bbfc 	.word	0x0801bbfc
 8015a94:	0801c038 	.word	0x0801c038

08015a98 <handlePDelayResp>:

static void handlePDelayResp(PtpClock *ptpClock, TimeInternal *time,
		bool isFromSelf)
{
 8015a98:	b580      	push	{r7, lr}
 8015a9a:	b090      	sub	sp, #64	; 0x40
 8015a9c:	af00      	add	r7, sp, #0
 8015a9e:	60f8      	str	r0, [r7, #12]
 8015aa0:	60b9      	str	r1, [r7, #8]
 8015aa2:	4613      	mov	r3, r2
 8015aa4:	71fb      	strb	r3, [r7, #7]
	TimeInternal requestReceiptTimestamp;
	TimeInternal correctionField;
	bool isCurrentRequest;

	switch (ptpClock->portDS.delayMechanism)
 8015aa6:	68fb      	ldr	r3, [r7, #12]
 8015aa8:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8015aac:	2b01      	cmp	r3, #1
 8015aae:	d002      	beq.n	8015ab6 <handlePDelayResp+0x1e>
 8015ab0:	2b02      	cmp	r3, #2
 8015ab2:	d00f      	beq.n	8015ad4 <handlePDelayResp+0x3c>
		}
		break;

	default:

		break;
 8015ab4:	e0cf      	b.n	8015c56 <handlePDelayResp+0x1be>
		ERROR("handlePDelayResp: disreguard in E2E mode\r\n")
 8015ab6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015aba:	4618      	mov	r0, r3
 8015abc:	f002 fab8 	bl	8018030 <getTime>
 8015ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ac2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015ac4:	4619      	mov	r1, r3
 8015ac6:	4865      	ldr	r0, [pc, #404]	; (8015c5c <handlePDelayResp+0x1c4>)
 8015ac8:	f002 fc2c 	bl	8018324 <iprintf>
 8015acc:	4864      	ldr	r0, [pc, #400]	; (8015c60 <handlePDelayResp+0x1c8>)
 8015ace:	f002 fc9d 	bl	801840c <puts>
		break;
 8015ad2:	e0c0      	b.n	8015c56 <handlePDelayResp+0x1be>
		if (ptpClock->msgIbufLength < PDELAY_RESP_LENGTH)
 8015ad4:	68fb      	ldr	r3, [r7, #12]
 8015ad6:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 8015ada:	2b35      	cmp	r3, #53	; 0x35
 8015adc:	dc12      	bgt.n	8015b04 <handlePDelayResp+0x6c>
			ERROR("handlePDelayResp: short message\r\n");
 8015ade:	f107 031c 	add.w	r3, r7, #28
 8015ae2:	4618      	mov	r0, r3
 8015ae4:	f002 faa4 	bl	8018030 <getTime>
 8015ae8:	69fb      	ldr	r3, [r7, #28]
 8015aea:	6a3a      	ldr	r2, [r7, #32]
 8015aec:	4619      	mov	r1, r3
 8015aee:	485b      	ldr	r0, [pc, #364]	; (8015c5c <handlePDelayResp+0x1c4>)
 8015af0:	f002 fc18 	bl	8018324 <iprintf>
 8015af4:	485b      	ldr	r0, [pc, #364]	; (8015c64 <handlePDelayResp+0x1cc>)
 8015af6:	f002 fc89 	bl	801840c <puts>
			toState(ptpClock, PTP_FAULTY);
 8015afa:	2101      	movs	r1, #1
 8015afc:	68f8      	ldr	r0, [r7, #12]
 8015afe:	f7fe fdc9 	bl	8014694 <toState>
			return;
 8015b02:	e0a8      	b.n	8015c56 <handlePDelayResp+0x1be>
		switch (ptpClock->portDS.portState)
 8015b04:	68fb      	ldr	r3, [r7, #12]
 8015b06:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8015b0a:	2b08      	cmp	r3, #8
 8015b0c:	f200 808f 	bhi.w	8015c2e <handlePDelayResp+0x196>
 8015b10:	a201      	add	r2, pc, #4	; (adr r2, 8015b18 <handlePDelayResp+0x80>)
 8015b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b16:	bf00      	nop
 8015b18:	08015c55 	.word	0x08015c55
 8015b1c:	08015c55 	.word	0x08015c55
 8015b20:	08015c55 	.word	0x08015c55
 8015b24:	08015c55 	.word	0x08015c55
 8015b28:	08015c2f 	.word	0x08015c2f
 8015b2c:	08015b3d 	.word	0x08015b3d
 8015b30:	08015c2f 	.word	0x08015c2f
 8015b34:	08015c55 	.word	0x08015c55
 8015b38:	08015b3d 	.word	0x08015b3d
			if (isFromSelf)
 8015b3c:	79fb      	ldrb	r3, [r7, #7]
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	f040 8084 	bne.w	8015c4c <handlePDelayResp+0x1b4>
			msgUnpackPDelayResp(ptpClock->msgIbuf, &ptpClock->msgTmp.presp);
 8015b44:	68fb      	ldr	r3, [r7, #12]
 8015b46:	f503 72fc 	add.w	r2, r3, #504	; 0x1f8
 8015b4a:	68fb      	ldr	r3, [r7, #12]
 8015b4c:	33a8      	adds	r3, #168	; 0xa8
 8015b4e:	4619      	mov	r1, r3
 8015b50:	4610      	mov	r0, r2
 8015b52:	f001 f9a6 	bl	8016ea2 <msgUnpackPDelayResp>
					&ptpClock->portDS.portIdentity,
 8015b56:	68fb      	ldr	r3, [r7, #12]
 8015b58:	f103 0258 	add.w	r2, r3, #88	; 0x58
					&ptpClock->msgTmp.presp.requestingPortIdentity);
 8015b5c:	68fb      	ldr	r3, [r7, #12]
 8015b5e:	33b4      	adds	r3, #180	; 0xb4
			isCurrentRequest = isSamePortIdentity(
 8015b60:	4619      	mov	r1, r3
 8015b62:	4610      	mov	r0, r2
 8015b64:	f7fe f946 	bl	8013df4 <isSamePortIdentity>
 8015b68:	4603      	mov	r3, r0
 8015b6a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			if (((ptpClock->sentPDelayReqSequenceId - 1)
 8015b6e:	68fb      	ldr	r3, [r7, #12]
 8015b70:	f9b3 3380 	ldrsh.w	r3, [r3, #896]	; 0x380
 8015b74:	3b01      	subs	r3, #1
					== ptpClock->msgTmpHeader.sequenceId) && isCurrentRequest)
 8015b76:	68fa      	ldr	r2, [r7, #12]
 8015b78:	f9b2 20a2 	ldrsh.w	r2, [r2, #162]	; 0xa2
			if (((ptpClock->sentPDelayReqSequenceId - 1)
 8015b7c:	4293      	cmp	r3, r2
 8015b7e:	d167      	bne.n	8015c50 <handlePDelayResp+0x1b8>
					== ptpClock->msgTmpHeader.sequenceId) && isCurrentRequest)
 8015b80:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d063      	beq.n	8015c50 <handlePDelayResp+0x1b8>
				if (getFlag(ptpClock->msgTmpHeader.flagField[0],
 8015b88:	68fb      	ldr	r3, [r7, #12]
 8015b8a:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8015b8e:	f003 0302 	and.w	r3, r3, #2
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	d02f      	beq.n	8015bf6 <handlePDelayResp+0x15e>
					ptpClock->waitingForPDelayRespFollowUp = TRUE;
 8015b96:	68fb      	ldr	r3, [r7, #12]
 8015b98:	2201      	movs	r2, #1
 8015b9a:	f883 238d 	strb.w	r2, [r3, #909]	; 0x38d
					ptpClock->pdelay_t4 = *time;
 8015b9e:	68fb      	ldr	r3, [r7, #12]
 8015ba0:	68ba      	ldr	r2, [r7, #8]
 8015ba2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8015ba6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015baa:	e883 0003 	stmia.w	r3, {r0, r1}
							&ptpClock->msgTmp.presp.requestReceiptTimestamp);
 8015bae:	68fb      	ldr	r3, [r7, #12]
 8015bb0:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
					toInternalTime(&requestReceiptTimestamp,
 8015bb4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8015bb8:	4611      	mov	r1, r2
 8015bba:	4618      	mov	r0, r3
 8015bbc:	f7fd ff44 	bl	8013a48 <toInternalTime>
					ptpClock->pdelay_t2 = requestReceiptTimestamp;
 8015bc0:	68fb      	ldr	r3, [r7, #12]
 8015bc2:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8015bc6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8015bca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015bce:	e883 0003 	stmia.w	r3, {r0, r1}
							&ptpClock->msgTmpHeader.correctionfield,
 8015bd2:	68fb      	ldr	r3, [r7, #12]
 8015bd4:	3390      	adds	r3, #144	; 0x90
					scaledNanosecondsToInternalTime(
 8015bd6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8015bda:	4611      	mov	r1, r2
 8015bdc:	4618      	mov	r0, r3
 8015bde:	f7fd feb3 	bl	8013948 <scaledNanosecondsToInternalTime>
					ptpClock->correctionField_pDelayResp = correctionField;
 8015be2:	68fb      	ldr	r3, [r7, #12]
 8015be4:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8015be8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8015bec:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015bf0:	e883 0003 	stmia.w	r3, {r0, r1}
			break;
 8015bf4:	e02c      	b.n	8015c50 <handlePDelayResp+0x1b8>
					ptpClock->waitingForPDelayRespFollowUp = FALSE;
 8015bf6:	68fb      	ldr	r3, [r7, #12]
 8015bf8:	2200      	movs	r2, #0
 8015bfa:	f883 238d 	strb.w	r2, [r3, #909]	; 0x38d
					ptpClock->pdelay_t4 = *time;
 8015bfe:	68fb      	ldr	r3, [r7, #12]
 8015c00:	68ba      	ldr	r2, [r7, #8]
 8015c02:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8015c06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015c0a:	e883 0003 	stmia.w	r3, {r0, r1}
							&ptpClock->msgTmpHeader.correctionfield,
 8015c0e:	68fb      	ldr	r3, [r7, #12]
 8015c10:	3390      	adds	r3, #144	; 0x90
					scaledNanosecondsToInternalTime(
 8015c12:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8015c16:	4611      	mov	r1, r2
 8015c18:	4618      	mov	r0, r3
 8015c1a:	f7fd fe95 	bl	8013948 <scaledNanosecondsToInternalTime>
					updatePeerDelay(ptpClock, &correctionField, FALSE);
 8015c1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015c22:	2200      	movs	r2, #0
 8015c24:	4619      	mov	r1, r3
 8015c26:	68f8      	ldr	r0, [r7, #12]
 8015c28:	f002 f85c 	bl	8017ce4 <updatePeerDelay>
			break;
 8015c2c:	e010      	b.n	8015c50 <handlePDelayResp+0x1b8>
			DBG("handlePDelayResp: unrecognized state\r\n")
 8015c2e:	f107 0314 	add.w	r3, r7, #20
 8015c32:	4618      	mov	r0, r3
 8015c34:	f002 f9fc 	bl	8018030 <getTime>
 8015c38:	697b      	ldr	r3, [r7, #20]
 8015c3a:	69ba      	ldr	r2, [r7, #24]
 8015c3c:	4619      	mov	r1, r3
 8015c3e:	480a      	ldr	r0, [pc, #40]	; (8015c68 <handlePDelayResp+0x1d0>)
 8015c40:	f002 fb70 	bl	8018324 <iprintf>
 8015c44:	4809      	ldr	r0, [pc, #36]	; (8015c6c <handlePDelayResp+0x1d4>)
 8015c46:	f002 fbe1 	bl	801840c <puts>
			break;
 8015c4a:	e002      	b.n	8015c52 <handlePDelayResp+0x1ba>
				break;
 8015c4c:	bf00      	nop
 8015c4e:	e002      	b.n	8015c56 <handlePDelayResp+0x1be>
			break;
 8015c50:	bf00      	nop
		break;
 8015c52:	e000      	b.n	8015c56 <handlePDelayResp+0x1be>
			return;
 8015c54:	bf00      	nop
	}
}
 8015c56:	3740      	adds	r7, #64	; 0x40
 8015c58:	46bd      	mov	sp, r7
 8015c5a:	bd80      	pop	{r7, pc}
 8015c5c:	0801bca8 	.word	0x0801bca8
 8015c60:	0801c060 	.word	0x0801c060
 8015c64:	0801c08c 	.word	0x0801c08c
 8015c68:	0801bbfc 	.word	0x0801bbfc
 8015c6c:	0801c0b0 	.word	0x0801c0b0

08015c70 <handlePDelayRespFollowUp>:

static void handlePDelayRespFollowUp(PtpClock *ptpClock, bool isFromSelf)
{
 8015c70:	b580      	push	{r7, lr}
 8015c72:	b08c      	sub	sp, #48	; 0x30
 8015c74:	af00      	add	r7, sp, #0
 8015c76:	6078      	str	r0, [r7, #4]
 8015c78:	460b      	mov	r3, r1
 8015c7a:	70fb      	strb	r3, [r7, #3]
	TimeInternal responseOriginTimestamp;
	TimeInternal correctionField;

	switch (ptpClock->portDS.delayMechanism)
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8015c82:	2b01      	cmp	r3, #1
 8015c84:	d002      	beq.n	8015c8c <handlePDelayRespFollowUp+0x1c>
 8015c86:	2b02      	cmp	r3, #2
 8015c88:	d00f      	beq.n	8015caa <handlePDelayRespFollowUp+0x3a>
		}
		break;

	default:

		break;
 8015c8a:	e09c      	b.n	8015dc6 <handlePDelayRespFollowUp+0x156>
		ERROR("handlePDelayRespFollowUp: disreguard in E2E mode\r\n")
 8015c8c:	f107 0318 	add.w	r3, r7, #24
 8015c90:	4618      	mov	r0, r3
 8015c92:	f002 f9cd 	bl	8018030 <getTime>
 8015c96:	69bb      	ldr	r3, [r7, #24]
 8015c98:	69fa      	ldr	r2, [r7, #28]
 8015c9a:	4619      	mov	r1, r3
 8015c9c:	484b      	ldr	r0, [pc, #300]	; (8015dcc <handlePDelayRespFollowUp+0x15c>)
 8015c9e:	f002 fb41 	bl	8018324 <iprintf>
 8015ca2:	484b      	ldr	r0, [pc, #300]	; (8015dd0 <handlePDelayRespFollowUp+0x160>)
 8015ca4:	f002 fbb2 	bl	801840c <puts>
		break;
 8015ca8:	e08d      	b.n	8015dc6 <handlePDelayRespFollowUp+0x156>
		if (ptpClock->msgIbufLength < PDELAY_RESP_FOLLOW_UP_LENGTH)
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 8015cb0:	2b35      	cmp	r3, #53	; 0x35
 8015cb2:	dc12      	bgt.n	8015cda <handlePDelayRespFollowUp+0x6a>
			ERROR("handlePDelayRespFollowUp: short message\r\n");
 8015cb4:	f107 0310 	add.w	r3, r7, #16
 8015cb8:	4618      	mov	r0, r3
 8015cba:	f002 f9b9 	bl	8018030 <getTime>
 8015cbe:	693b      	ldr	r3, [r7, #16]
 8015cc0:	697a      	ldr	r2, [r7, #20]
 8015cc2:	4619      	mov	r1, r3
 8015cc4:	4841      	ldr	r0, [pc, #260]	; (8015dcc <handlePDelayRespFollowUp+0x15c>)
 8015cc6:	f002 fb2d 	bl	8018324 <iprintf>
 8015cca:	4842      	ldr	r0, [pc, #264]	; (8015dd4 <handlePDelayRespFollowUp+0x164>)
 8015ccc:	f002 fb9e 	bl	801840c <puts>
			toState(ptpClock, PTP_FAULTY);
 8015cd0:	2101      	movs	r1, #1
 8015cd2:	6878      	ldr	r0, [r7, #4]
 8015cd4:	f7fe fcde 	bl	8014694 <toState>
			return;
 8015cd8:	e075      	b.n	8015dc6 <handlePDelayRespFollowUp+0x156>
		switch (ptpClock->portDS.portState)
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8015ce0:	2b08      	cmp	r3, #8
 8015ce2:	d86f      	bhi.n	8015dc4 <handlePDelayRespFollowUp+0x154>
 8015ce4:	a201      	add	r2, pc, #4	; (adr r2, 8015cec <handlePDelayRespFollowUp+0x7c>)
 8015ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015cea:	bf00      	nop
 8015cec:	08015dc5 	.word	0x08015dc5
 8015cf0:	08015dc5 	.word	0x08015dc5
 8015cf4:	08015dc5 	.word	0x08015dc5
 8015cf8:	08015dc5 	.word	0x08015dc5
 8015cfc:	08015dc5 	.word	0x08015dc5
 8015d00:	08015d11 	.word	0x08015d11
 8015d04:	08015dc5 	.word	0x08015dc5
 8015d08:	08015dc5 	.word	0x08015dc5
 8015d0c:	08015d11 	.word	0x08015d11
			if (!ptpClock->waitingForPDelayRespFollowUp)
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	f893 338d 	ldrb.w	r3, [r3, #909]	; 0x38d
 8015d16:	f083 0301 	eor.w	r3, r3, #1
 8015d1a:	b2db      	uxtb	r3, r3
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	d00e      	beq.n	8015d3e <handlePDelayRespFollowUp+0xce>
				DBG("handlePDelayRespFollowUp: not waiting a message\r\n");
 8015d20:	f107 0308 	add.w	r3, r7, #8
 8015d24:	4618      	mov	r0, r3
 8015d26:	f002 f983 	bl	8018030 <getTime>
 8015d2a:	68bb      	ldr	r3, [r7, #8]
 8015d2c:	68fa      	ldr	r2, [r7, #12]
 8015d2e:	4619      	mov	r1, r3
 8015d30:	4829      	ldr	r0, [pc, #164]	; (8015dd8 <handlePDelayRespFollowUp+0x168>)
 8015d32:	f002 faf7 	bl	8018324 <iprintf>
 8015d36:	4829      	ldr	r0, [pc, #164]	; (8015ddc <handlePDelayRespFollowUp+0x16c>)
 8015d38:	f002 fb68 	bl	801840c <puts>
				break;
 8015d3c:	e042      	b.n	8015dc4 <handlePDelayRespFollowUp+0x154>
			if (ptpClock->msgTmpHeader.sequenceId
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	f9b3 30a2 	ldrsh.w	r3, [r3, #162]	; 0xa2
 8015d44:	461a      	mov	r2, r3
					== ptpClock->sentPDelayReqSequenceId - 1)
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	f9b3 3380 	ldrsh.w	r3, [r3, #896]	; 0x380
 8015d4c:	3b01      	subs	r3, #1
			if (ptpClock->msgTmpHeader.sequenceId
 8015d4e:	429a      	cmp	r2, r3
 8015d50:	d138      	bne.n	8015dc4 <handlePDelayRespFollowUp+0x154>
				msgUnpackPDelayRespFollowUp(ptpClock->msgIbuf,
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	f503 72fc 	add.w	r2, r3, #504	; 0x1f8
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	33a8      	adds	r3, #168	; 0xa8
 8015d5c:	4619      	mov	r1, r3
 8015d5e:	4610      	mov	r0, r2
 8015d60:	f001 f962 	bl	8017028 <msgUnpackPDelayRespFollowUp>
						&ptpClock->msgTmp.prespfollow.responseOriginTimestamp);
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
				toInternalTime(&responseOriginTimestamp,
 8015d6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015d6e:	4611      	mov	r1, r2
 8015d70:	4618      	mov	r0, r3
 8015d72:	f7fd fe69 	bl	8013a48 <toInternalTime>
				ptpClock->pdelay_t3 = responseOriginTimestamp;
 8015d76:	687b      	ldr	r3, [r7, #4]
 8015d78:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8015d7c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8015d80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015d84:	e883 0003 	stmia.w	r3, {r0, r1}
						&ptpClock->msgTmpHeader.correctionfield,
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	3390      	adds	r3, #144	; 0x90
				scaledNanosecondsToInternalTime(
 8015d8c:	f107 0220 	add.w	r2, r7, #32
 8015d90:	4611      	mov	r1, r2
 8015d92:	4618      	mov	r0, r3
 8015d94:	f7fd fdd8 	bl	8013948 <scaledNanosecondsToInternalTime>
						&ptpClock->correctionField_pDelayResp);
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	f503 725e 	add.w	r2, r3, #888	; 0x378
				addTime(&correctionField, &correctionField,
 8015d9e:	f107 0120 	add.w	r1, r7, #32
 8015da2:	f107 0320 	add.w	r3, r7, #32
 8015da6:	4618      	mov	r0, r3
 8015da8:	f7fd fece 	bl	8013b48 <addTime>
				updatePeerDelay(ptpClock, &correctionField, TRUE);
 8015dac:	f107 0320 	add.w	r3, r7, #32
 8015db0:	2201      	movs	r2, #1
 8015db2:	4619      	mov	r1, r3
 8015db4:	6878      	ldr	r0, [r7, #4]
 8015db6:	f001 ff95 	bl	8017ce4 <updatePeerDelay>
				ptpClock->waitingForPDelayRespFollowUp = FALSE;
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	2200      	movs	r2, #0
 8015dbe:	f883 238d 	strb.w	r2, [r3, #909]	; 0x38d
				break;
 8015dc2:	bf00      	nop
		break;
 8015dc4:	bf00      	nop
	}
}
 8015dc6:	3730      	adds	r7, #48	; 0x30
 8015dc8:	46bd      	mov	sp, r7
 8015dca:	bd80      	pop	{r7, pc}
 8015dcc:	0801bca8 	.word	0x0801bca8
 8015dd0:	0801c0d8 	.word	0x0801c0d8
 8015dd4:	0801c10c 	.word	0x0801c10c
 8015dd8:	0801bbfc 	.word	0x0801bbfc
 8015ddc:	0801c138 	.word	0x0801c138

08015de0 <handleManagement>:

static void handleManagement(PtpClock *ptpClock, bool isFromSelf)
{
 8015de0:	b480      	push	{r7}
 8015de2:	b083      	sub	sp, #12
 8015de4:	af00      	add	r7, sp, #0
 8015de6:	6078      	str	r0, [r7, #4]
 8015de8:	460b      	mov	r3, r1
 8015dea:	70fb      	strb	r3, [r7, #3]
	/* ENABLE_PORT -> DESIGNATED_ENABLED -> toState(PTP_INITIALIZING) */
	/* DISABLE_PORT -> DESIGNATED_DISABLED -> toState(PTP_DISABLED) */
}
 8015dec:	bf00      	nop
 8015dee:	370c      	adds	r7, #12
 8015df0:	46bd      	mov	sp, r7
 8015df2:	bc80      	pop	{r7}
 8015df4:	4770      	bx	lr

08015df6 <handleSignaling>:

static void handleSignaling(PtpClock *ptpClock, bool isFromSelf)
{
 8015df6:	b480      	push	{r7}
 8015df8:	b083      	sub	sp, #12
 8015dfa:	af00      	add	r7, sp, #0
 8015dfc:	6078      	str	r0, [r7, #4]
 8015dfe:	460b      	mov	r3, r1
 8015e00:	70fb      	strb	r3, [r7, #3]
}
 8015e02:	bf00      	nop
 8015e04:	370c      	adds	r7, #12
 8015e06:	46bd      	mov	sp, r7
 8015e08:	bc80      	pop	{r7}
 8015e0a:	4770      	bx	lr

08015e0c <issueDelayReqTimerExpired>:

static void issueDelayReqTimerExpired(PtpClock *ptpClock)
{
 8015e0c:	b580      	push	{r7, lr}
 8015e0e:	b082      	sub	sp, #8
 8015e10:	af00      	add	r7, sp, #0
 8015e12:	6078      	str	r0, [r7, #4]
	switch (ptpClock->portDS.delayMechanism)
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8015e1a:	2b01      	cmp	r3, #1
 8015e1c:	d002      	beq.n	8015e24 <issueDelayReqTimerExpired+0x18>
 8015e1e:	2b02      	cmp	r3, #2
 8015e20:	d02e      	beq.n	8015e80 <issueDelayReqTimerExpired+0x74>
			issuePDelayReq(ptpClock);
		}
		break;

	default:
		break;
 8015e22:	e05b      	b.n	8015edc <issueDelayReqTimerExpired+0xd0>
		if (ptpClock->portDS.portState != PTP_SLAVE)
 8015e24:	687b      	ldr	r3, [r7, #4]
 8015e26:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8015e2a:	2b08      	cmp	r3, #8
 8015e2c:	d151      	bne.n	8015ed2 <issueDelayReqTimerExpired+0xc6>
		if (timerExpired(DELAYREQ_INTERVAL_TIMER))
 8015e2e:	2001      	movs	r0, #1
 8015e30:	f002 fa10 	bl	8018254 <timerExpired>
 8015e34:	4603      	mov	r3, r0
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	d04d      	beq.n	8015ed6 <issueDelayReqTimerExpired+0xca>
							pow2ms(
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	f993 3063 	ldrsb.w	r3, [r3, #99]	; 0x63
 8015e40:	3301      	adds	r3, #1
			timerStart(DELAYREQ_INTERVAL_TIMER,
 8015e42:	2b00      	cmp	r3, #0
 8015e44:	dd08      	ble.n	8015e58 <issueDelayReqTimerExpired+0x4c>
							pow2ms(
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	f993 3063 	ldrsb.w	r3, [r3, #99]	; 0x63
 8015e4c:	3301      	adds	r3, #1
 8015e4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015e52:	fa02 f303 	lsl.w	r3, r2, r3
 8015e56:	e007      	b.n	8015e68 <issueDelayReqTimerExpired+0x5c>
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	f993 3063 	ldrsb.w	r3, [r3, #99]	; 0x63
 8015e5e:	43db      	mvns	r3, r3
 8015e60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015e64:	fa42 f303 	asr.w	r3, r2, r3
			timerStart(DELAYREQ_INTERVAL_TIMER,
 8015e68:	4618      	mov	r0, r3
 8015e6a:	f002 f91f 	bl	80180ac <getRand>
 8015e6e:	4603      	mov	r3, r0
 8015e70:	4619      	mov	r1, r3
 8015e72:	2001      	movs	r0, #1
 8015e74:	f002 f9d0 	bl	8018218 <timerStart>
			issueDelayReq(ptpClock);
 8015e78:	6878      	ldr	r0, [r7, #4]
 8015e7a:	f000 f90d 	bl	8016098 <issueDelayReq>
		break;
 8015e7e:	e02a      	b.n	8015ed6 <issueDelayReqTimerExpired+0xca>
		if (timerExpired(PDELAYREQ_INTERVAL_TIMER))
 8015e80:	2000      	movs	r0, #0
 8015e82:	f002 f9e7 	bl	8018254 <timerExpired>
 8015e86:	4603      	mov	r3, r0
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d026      	beq.n	8015eda <issueDelayReqTimerExpired+0xce>
							pow2ms(
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8015e92:	3301      	adds	r3, #1
			timerStart(PDELAYREQ_INTERVAL_TIMER,
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	dd08      	ble.n	8015eaa <issueDelayReqTimerExpired+0x9e>
							pow2ms(
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8015e9e:	3301      	adds	r3, #1
 8015ea0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8015ea8:	e007      	b.n	8015eba <issueDelayReqTimerExpired+0xae>
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8015eb0:	43db      	mvns	r3, r3
 8015eb2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015eb6:	fa42 f303 	asr.w	r3, r2, r3
			timerStart(PDELAYREQ_INTERVAL_TIMER,
 8015eba:	4618      	mov	r0, r3
 8015ebc:	f002 f8f6 	bl	80180ac <getRand>
 8015ec0:	4603      	mov	r3, r0
 8015ec2:	4619      	mov	r1, r3
 8015ec4:	2000      	movs	r0, #0
 8015ec6:	f002 f9a7 	bl	8018218 <timerStart>
			issuePDelayReq(ptpClock);
 8015eca:	6878      	ldr	r0, [r7, #4]
 8015ecc:	f000 f946 	bl	801615c <issuePDelayReq>
		break;
 8015ed0:	e003      	b.n	8015eda <issueDelayReqTimerExpired+0xce>
			break;
 8015ed2:	bf00      	nop
 8015ed4:	e002      	b.n	8015edc <issueDelayReqTimerExpired+0xd0>
		break;
 8015ed6:	bf00      	nop
 8015ed8:	e000      	b.n	8015edc <issueDelayReqTimerExpired+0xd0>
		break;
 8015eda:	bf00      	nop
	}
}
 8015edc:	bf00      	nop
 8015ede:	3708      	adds	r7, #8
 8015ee0:	46bd      	mov	sp, r7
 8015ee2:	bd80      	pop	{r7, pc}

08015ee4 <issueAnnounce>:

/* Pack and send  on general multicast ip adress an Announce message */
static void issueAnnounce(PtpClock *ptpClock)
{
 8015ee4:	b580      	push	{r7, lr}
 8015ee6:	b084      	sub	sp, #16
 8015ee8:	af00      	add	r7, sp, #0
 8015eea:	6078      	str	r0, [r7, #4]
	msgPackAnnounce(ptpClock, ptpClock->msgObuf);
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	33cc      	adds	r3, #204	; 0xcc
 8015ef0:	4619      	mov	r1, r3
 8015ef2:	6878      	ldr	r0, [r7, #4]
 8015ef4:	f000 fbdd 	bl	80166b2 <msgPackAnnounce>

	if (!netSendGeneral(&ptpClock->netPath, ptpClock->msgObuf, ANNOUNCE_LENGTH))
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	f503 7073 	add.w	r0, r3, #972	; 0x3cc
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	33cc      	adds	r3, #204	; 0xcc
 8015f02:	2240      	movs	r2, #64	; 0x40
 8015f04:	4619      	mov	r1, r3
 8015f06:	f001 fcf7 	bl	80178f8 <netSendGeneral>
 8015f0a:	4603      	mov	r3, r0
 8015f0c:	2b00      	cmp	r3, #0
 8015f0e:	d112      	bne.n	8015f36 <issueAnnounce+0x52>
	{
		ERROR("issueAnnounce: can't sent\r\n");
 8015f10:	f107 0308 	add.w	r3, r7, #8
 8015f14:	4618      	mov	r0, r3
 8015f16:	f002 f88b 	bl	8018030 <getTime>
 8015f1a:	68bb      	ldr	r3, [r7, #8]
 8015f1c:	68fa      	ldr	r2, [r7, #12]
 8015f1e:	4619      	mov	r1, r3
 8015f20:	480c      	ldr	r0, [pc, #48]	; (8015f54 <issueAnnounce+0x70>)
 8015f22:	f002 f9ff 	bl	8018324 <iprintf>
 8015f26:	480c      	ldr	r0, [pc, #48]	; (8015f58 <issueAnnounce+0x74>)
 8015f28:	f002 fa70 	bl	801840c <puts>
		toState(ptpClock, PTP_FAULTY);
 8015f2c:	2101      	movs	r1, #1
 8015f2e:	6878      	ldr	r0, [r7, #4]
 8015f30:	f7fe fbb0 	bl	8014694 <toState>
	else
	{
		DBGV("issueAnnounce\r\n");
		ptpClock->sentAnnounceSequenceId++;
	}
}
 8015f34:	e009      	b.n	8015f4a <issueAnnounce+0x66>
		ptpClock->sentAnnounceSequenceId++;
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	f9b3 3386 	ldrsh.w	r3, [r3, #902]	; 0x386
 8015f3c:	b29b      	uxth	r3, r3
 8015f3e:	3301      	adds	r3, #1
 8015f40:	b29b      	uxth	r3, r3
 8015f42:	b21a      	sxth	r2, r3
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	f8a3 2386 	strh.w	r2, [r3, #902]	; 0x386
}
 8015f4a:	bf00      	nop
 8015f4c:	3710      	adds	r7, #16
 8015f4e:	46bd      	mov	sp, r7
 8015f50:	bd80      	pop	{r7, pc}
 8015f52:	bf00      	nop
 8015f54:	0801bca8 	.word	0x0801bca8
 8015f58:	0801c16c 	.word	0x0801c16c

08015f5c <issueSync>:

/* Pack and send  on event multicast ip adress a Sync message */
static void issueSync(PtpClock *ptpClock)
{
 8015f5c:	b580      	push	{r7, lr}
 8015f5e:	b08a      	sub	sp, #40	; 0x28
 8015f60:	af00      	add	r7, sp, #0
 8015f62:	6078      	str	r0, [r7, #4]
	Timestamp originTimestamp;
	TimeInternal internalTime;

	/* try to predict outgoing time stamp */
	getTime(&internalTime);
 8015f64:	f107 0314 	add.w	r3, r7, #20
 8015f68:	4618      	mov	r0, r3
 8015f6a:	f002 f861 	bl	8018030 <getTime>
	fromInternalTime(&internalTime, &originTimestamp);
 8015f6e:	f107 021c 	add.w	r2, r7, #28
 8015f72:	f107 0314 	add.w	r3, r7, #20
 8015f76:	4611      	mov	r1, r2
 8015f78:	4618      	mov	r0, r3
 8015f7a:	f7fd fd35 	bl	80139e8 <fromInternalTime>
	msgPackSync(ptpClock, ptpClock->msgObuf, &originTimestamp);
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	33cc      	adds	r3, #204	; 0xcc
 8015f82:	f107 021c 	add.w	r2, r7, #28
 8015f86:	4619      	mov	r1, r3
 8015f88:	6878      	ldr	r0, [r7, #4]
 8015f8a:	f000 fc8a 	bl	80168a2 <msgPackSync>

	if (!netSendEvent(&ptpClock->netPath, ptpClock->msgObuf, SYNC_LENGTH,
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	f503 7073 	add.w	r0, r3, #972	; 0x3cc
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	f103 01cc 	add.w	r1, r3, #204	; 0xcc
 8015f9a:	f107 0314 	add.w	r3, r7, #20
 8015f9e:	222c      	movs	r2, #44	; 0x2c
 8015fa0:	f001 fc92 	bl	80178c8 <netSendEvent>
 8015fa4:	4603      	mov	r3, r0
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	d112      	bne.n	8015fd0 <issueSync+0x74>
			&internalTime))
	{
		ERROR("issueSync: can't sent\r\n");
 8015faa:	f107 030c 	add.w	r3, r7, #12
 8015fae:	4618      	mov	r0, r3
 8015fb0:	f002 f83e 	bl	8018030 <getTime>
 8015fb4:	68fb      	ldr	r3, [r7, #12]
 8015fb6:	693a      	ldr	r2, [r7, #16]
 8015fb8:	4619      	mov	r1, r3
 8015fba:	4818      	ldr	r0, [pc, #96]	; (801601c <issueSync+0xc0>)
 8015fbc:	f002 f9b2 	bl	8018324 <iprintf>
 8015fc0:	4817      	ldr	r0, [pc, #92]	; (8016020 <issueSync+0xc4>)
 8015fc2:	f002 fa23 	bl	801840c <puts>
		toState(ptpClock, PTP_FAULTY);
 8015fc6:	2101      	movs	r1, #1
 8015fc8:	6878      	ldr	r0, [r7, #4]
 8015fca:	f7fe fb63 	bl	8014694 <toState>
		else
		{
			// waitingForLoopback = ptpClock->twoStepFlag;
		}
	}
}
 8015fce:	e020      	b.n	8016012 <issueSync+0xb6>
		ptpClock->sentSyncSequenceId++;
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	f9b3 3384 	ldrsh.w	r3, [r3, #900]	; 0x384
 8015fd6:	b29b      	uxth	r3, r3
 8015fd8:	3301      	adds	r3, #1
 8015fda:	b29b      	uxth	r3, r3
 8015fdc:	b21a      	sxth	r2, r3
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	f8a3 2384 	strh.w	r2, [r3, #900]	; 0x384
		if ((internalTime.seconds != 0) && (ptpClock->defaultDS.twoStepFlag))
 8015fe4:	697b      	ldr	r3, [r7, #20]
 8015fe6:	2b00      	cmp	r3, #0
 8015fe8:	d013      	beq.n	8016012 <issueSync+0xb6>
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	781b      	ldrb	r3, [r3, #0]
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	d00f      	beq.n	8016012 <issueSync+0xb6>
			addTime(&internalTime, &internalTime, &ptpClock->outboundLatency);
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	f503 6284 	add.w	r2, r3, #1056	; 0x420
 8015ff8:	f107 0114 	add.w	r1, r7, #20
 8015ffc:	f107 0314 	add.w	r3, r7, #20
 8016000:	4618      	mov	r0, r3
 8016002:	f7fd fda1 	bl	8013b48 <addTime>
			issueFollowup(ptpClock, &internalTime);
 8016006:	f107 0314 	add.w	r3, r7, #20
 801600a:	4619      	mov	r1, r3
 801600c:	6878      	ldr	r0, [r7, #4]
 801600e:	f000 f809 	bl	8016024 <issueFollowup>
}
 8016012:	bf00      	nop
 8016014:	3728      	adds	r7, #40	; 0x28
 8016016:	46bd      	mov	sp, r7
 8016018:	bd80      	pop	{r7, pc}
 801601a:	bf00      	nop
 801601c:	0801bca8 	.word	0x0801bca8
 8016020:	0801c188 	.word	0x0801c188

08016024 <issueFollowup>:

/* Pack and send on general multicast ip adress a FollowUp message */
static void issueFollowup(PtpClock *ptpClock, const TimeInternal *time)
{
 8016024:	b580      	push	{r7, lr}
 8016026:	b088      	sub	sp, #32
 8016028:	af00      	add	r7, sp, #0
 801602a:	6078      	str	r0, [r7, #4]
 801602c:	6039      	str	r1, [r7, #0]
	Timestamp preciseOriginTimestamp;

	fromInternalTime(time, &preciseOriginTimestamp);
 801602e:	f107 0314 	add.w	r3, r7, #20
 8016032:	4619      	mov	r1, r3
 8016034:	6838      	ldr	r0, [r7, #0]
 8016036:	f7fd fcd7 	bl	80139e8 <fromInternalTime>
	msgPackFollowUp(ptpClock, ptpClock->msgObuf, &preciseOriginTimestamp);
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	33cc      	adds	r3, #204	; 0xcc
 801603e:	f107 0214 	add.w	r2, r7, #20
 8016042:	4619      	mov	r1, r3
 8016044:	6878      	ldr	r0, [r7, #4]
 8016046:	f000 fd0a 	bl	8016a5e <msgPackFollowUp>

	if (!netSendGeneral(&ptpClock->netPath, ptpClock->msgObuf,
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	f503 7073 	add.w	r0, r3, #972	; 0x3cc
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	33cc      	adds	r3, #204	; 0xcc
 8016054:	222c      	movs	r2, #44	; 0x2c
 8016056:	4619      	mov	r1, r3
 8016058:	f001 fc4e 	bl	80178f8 <netSendGeneral>
 801605c:	4603      	mov	r3, r0
 801605e:	2b00      	cmp	r3, #0
 8016060:	d111      	bne.n	8016086 <issueFollowup+0x62>
			FOLLOW_UP_LENGTH))
	{
		ERROR("issueFollowup: can't sent\r\n");
 8016062:	f107 030c 	add.w	r3, r7, #12
 8016066:	4618      	mov	r0, r3
 8016068:	f001 ffe2 	bl	8018030 <getTime>
 801606c:	68fb      	ldr	r3, [r7, #12]
 801606e:	693a      	ldr	r2, [r7, #16]
 8016070:	4619      	mov	r1, r3
 8016072:	4807      	ldr	r0, [pc, #28]	; (8016090 <issueFollowup+0x6c>)
 8016074:	f002 f956 	bl	8018324 <iprintf>
 8016078:	4806      	ldr	r0, [pc, #24]	; (8016094 <issueFollowup+0x70>)
 801607a:	f002 f9c7 	bl	801840c <puts>
		toState(ptpClock, PTP_FAULTY);
 801607e:	2101      	movs	r1, #1
 8016080:	6878      	ldr	r0, [r7, #4]
 8016082:	f7fe fb07 	bl	8014694 <toState>
	}
	else
	{
		DBGV("issueFollowup\r\n");
	}
}
 8016086:	bf00      	nop
 8016088:	3720      	adds	r7, #32
 801608a:	46bd      	mov	sp, r7
 801608c:	bd80      	pop	{r7, pc}
 801608e:	bf00      	nop
 8016090:	0801bca8 	.word	0x0801bca8
 8016094:	0801c1a0 	.word	0x0801c1a0

08016098 <issueDelayReq>:

/* Pack and send on event multicast ip address a DelayReq message */
static void issueDelayReq(PtpClock *ptpClock)
{
 8016098:	b580      	push	{r7, lr}
 801609a:	b08a      	sub	sp, #40	; 0x28
 801609c:	af00      	add	r7, sp, #0
 801609e:	6078      	str	r0, [r7, #4]
	Timestamp originTimestamp;
	TimeInternal internalTime;

	getTime(&internalTime);
 80160a0:	f107 0314 	add.w	r3, r7, #20
 80160a4:	4618      	mov	r0, r3
 80160a6:	f001 ffc3 	bl	8018030 <getTime>
	fromInternalTime(&internalTime, &originTimestamp);
 80160aa:	f107 021c 	add.w	r2, r7, #28
 80160ae:	f107 0314 	add.w	r3, r7, #20
 80160b2:	4611      	mov	r1, r2
 80160b4:	4618      	mov	r0, r3
 80160b6:	f7fd fc97 	bl	80139e8 <fromInternalTime>

	msgPackDelayReq(ptpClock, ptpClock->msgObuf, &originTimestamp);
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	33cc      	adds	r3, #204	; 0xcc
 80160be:	f107 021c 	add.w	r2, r7, #28
 80160c2:	4619      	mov	r1, r3
 80160c4:	6878      	ldr	r0, [r7, #4]
 80160c6:	f000 fc6e 	bl	80169a6 <msgPackDelayReq>

	if (!netSendEvent(&ptpClock->netPath, ptpClock->msgObuf, DELAY_REQ_LENGTH,
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	f503 7073 	add.w	r0, r3, #972	; 0x3cc
 80160d0:	687b      	ldr	r3, [r7, #4]
 80160d2:	f103 01cc 	add.w	r1, r3, #204	; 0xcc
 80160d6:	f107 0314 	add.w	r3, r7, #20
 80160da:	222c      	movs	r2, #44	; 0x2c
 80160dc:	f001 fbf4 	bl	80178c8 <netSendEvent>
 80160e0:	4603      	mov	r3, r0
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d112      	bne.n	801610c <issueDelayReq+0x74>
			&internalTime))
	{
		ERROR("issueDelayReq: can't sent\r\n");
 80160e6:	f107 030c 	add.w	r3, r7, #12
 80160ea:	4618      	mov	r0, r3
 80160ec:	f001 ffa0 	bl	8018030 <getTime>
 80160f0:	68fb      	ldr	r3, [r7, #12]
 80160f2:	693a      	ldr	r2, [r7, #16]
 80160f4:	4619      	mov	r1, r3
 80160f6:	4817      	ldr	r0, [pc, #92]	; (8016154 <issueDelayReq+0xbc>)
 80160f8:	f002 f914 	bl	8018324 <iprintf>
 80160fc:	4816      	ldr	r0, [pc, #88]	; (8016158 <issueDelayReq+0xc0>)
 80160fe:	f002 f985 	bl	801840c <puts>
		toState(ptpClock, PTP_FAULTY);
 8016102:	2101      	movs	r1, #1
 8016104:	6878      	ldr	r0, [r7, #4]
 8016106:	f7fe fac5 	bl	8014694 <toState>
		{
			addTime(&internalTime, &internalTime, &ptpClock->outboundLatency);
			ptpClock->timestamp_delayReqSend = internalTime;
		}
	}
}
 801610a:	e01f      	b.n	801614c <issueDelayReq+0xb4>
		ptpClock->sentDelayReqSequenceId++;
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	f9b3 3382 	ldrsh.w	r3, [r3, #898]	; 0x382
 8016112:	b29b      	uxth	r3, r3
 8016114:	3301      	adds	r3, #1
 8016116:	b29b      	uxth	r3, r3
 8016118:	b21a      	sxth	r2, r3
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	f8a3 2382 	strh.w	r2, [r3, #898]	; 0x382
		if (internalTime.seconds != 0)
 8016120:	697b      	ldr	r3, [r7, #20]
 8016122:	2b00      	cmp	r3, #0
 8016124:	d012      	beq.n	801614c <issueDelayReq+0xb4>
			addTime(&internalTime, &internalTime, &ptpClock->outboundLatency);
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	f503 6284 	add.w	r2, r3, #1056	; 0x420
 801612c:	f107 0114 	add.w	r1, r7, #20
 8016130:	f107 0314 	add.w	r3, r7, #20
 8016134:	4618      	mov	r0, r3
 8016136:	f7fd fd07 	bl	8013b48 <addTime>
			ptpClock->timestamp_delayReqSend = internalTime;
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8016140:	f107 0214 	add.w	r2, r7, #20
 8016144:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016148:	e883 0003 	stmia.w	r3, {r0, r1}
}
 801614c:	bf00      	nop
 801614e:	3728      	adds	r7, #40	; 0x28
 8016150:	46bd      	mov	sp, r7
 8016152:	bd80      	pop	{r7, pc}
 8016154:	0801bca8 	.word	0x0801bca8
 8016158:	0801c1bc 	.word	0x0801c1bc

0801615c <issuePDelayReq>:

/* Pack and send on event multicast ip adress a PDelayReq message */
static void issuePDelayReq(PtpClock *ptpClock)
{
 801615c:	b580      	push	{r7, lr}
 801615e:	b08a      	sub	sp, #40	; 0x28
 8016160:	af00      	add	r7, sp, #0
 8016162:	6078      	str	r0, [r7, #4]
	Timestamp originTimestamp;
	TimeInternal internalTime;

	getTime(&internalTime);
 8016164:	f107 0314 	add.w	r3, r7, #20
 8016168:	4618      	mov	r0, r3
 801616a:	f001 ff61 	bl	8018030 <getTime>
	fromInternalTime(&internalTime, &originTimestamp);
 801616e:	f107 021c 	add.w	r2, r7, #28
 8016172:	f107 0314 	add.w	r3, r7, #20
 8016176:	4611      	mov	r1, r2
 8016178:	4618      	mov	r0, r3
 801617a:	f7fd fc35 	bl	80139e8 <fromInternalTime>

	msgPackPDelayReq(ptpClock, ptpClock->msgObuf, &originTimestamp);
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	33cc      	adds	r3, #204	; 0xcc
 8016182:	f107 021c 	add.w	r2, r7, #28
 8016186:	4619      	mov	r1, r3
 8016188:	6878      	ldr	r0, [r7, #4]
 801618a:	f000 fdb5 	bl	8016cf8 <msgPackPDelayReq>

	if (!netSendPeerEvent(&ptpClock->netPath, ptpClock->msgObuf,
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	f503 7073 	add.w	r0, r3, #972	; 0x3cc
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	f103 01cc 	add.w	r1, r3, #204	; 0xcc
 801619a:	f107 0314 	add.w	r3, r7, #20
 801619e:	2236      	movs	r2, #54	; 0x36
 80161a0:	f001 fbd9 	bl	8017956 <netSendPeerEvent>
 80161a4:	4603      	mov	r3, r0
 80161a6:	2b00      	cmp	r3, #0
 80161a8:	d112      	bne.n	80161d0 <issuePDelayReq+0x74>
			PDELAY_REQ_LENGTH, &internalTime))
	{
		ERROR("issuePDelayReq: can't sent\r\n");
 80161aa:	f107 030c 	add.w	r3, r7, #12
 80161ae:	4618      	mov	r0, r3
 80161b0:	f001 ff3e 	bl	8018030 <getTime>
 80161b4:	68fb      	ldr	r3, [r7, #12]
 80161b6:	693a      	ldr	r2, [r7, #16]
 80161b8:	4619      	mov	r1, r3
 80161ba:	4817      	ldr	r0, [pc, #92]	; (8016218 <issuePDelayReq+0xbc>)
 80161bc:	f002 f8b2 	bl	8018324 <iprintf>
 80161c0:	4816      	ldr	r0, [pc, #88]	; (801621c <issuePDelayReq+0xc0>)
 80161c2:	f002 f923 	bl	801840c <puts>
		toState(ptpClock, PTP_FAULTY);
 80161c6:	2101      	movs	r1, #1
 80161c8:	6878      	ldr	r0, [r7, #4]
 80161ca:	f7fe fa63 	bl	8014694 <toState>
		{
			addTime(&internalTime, &internalTime, &ptpClock->outboundLatency);
			ptpClock->pdelay_t1 = internalTime;
		}
	}
}
 80161ce:	e01f      	b.n	8016210 <issuePDelayReq+0xb4>
		ptpClock->sentPDelayReqSequenceId++;
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	f9b3 3380 	ldrsh.w	r3, [r3, #896]	; 0x380
 80161d6:	b29b      	uxth	r3, r3
 80161d8:	3301      	adds	r3, #1
 80161da:	b29b      	uxth	r3, r3
 80161dc:	b21a      	sxth	r2, r3
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	f8a3 2380 	strh.w	r2, [r3, #896]	; 0x380
		if (internalTime.seconds != 0)
 80161e4:	697b      	ldr	r3, [r7, #20]
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	d012      	beq.n	8016210 <issuePDelayReq+0xb4>
			addTime(&internalTime, &internalTime, &ptpClock->outboundLatency);
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	f503 6284 	add.w	r2, r3, #1056	; 0x420
 80161f0:	f107 0114 	add.w	r1, r7, #20
 80161f4:	f107 0314 	add.w	r3, r7, #20
 80161f8:	4618      	mov	r0, r3
 80161fa:	f7fd fca5 	bl	8013b48 <addTime>
			ptpClock->pdelay_t1 = internalTime;
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8016204:	f107 0214 	add.w	r2, r7, #20
 8016208:	e892 0003 	ldmia.w	r2, {r0, r1}
 801620c:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8016210:	bf00      	nop
 8016212:	3728      	adds	r7, #40	; 0x28
 8016214:	46bd      	mov	sp, r7
 8016216:	bd80      	pop	{r7, pc}
 8016218:	0801bca8 	.word	0x0801bca8
 801621c:	0801c1d8 	.word	0x0801c1d8

08016220 <issuePDelayResp>:

/* Pack and send on event multicast ip adress a PDelayResp message */
static void issuePDelayResp(PtpClock *ptpClock, TimeInternal *time,
		const MsgHeader *pDelayReqHeader)
{
 8016220:	b580      	push	{r7, lr}
 8016222:	b08a      	sub	sp, #40	; 0x28
 8016224:	af00      	add	r7, sp, #0
 8016226:	60f8      	str	r0, [r7, #12]
 8016228:	60b9      	str	r1, [r7, #8]
 801622a:	607a      	str	r2, [r7, #4]
	Timestamp requestReceiptTimestamp;

	fromInternalTime(time, &requestReceiptTimestamp);
 801622c:	f107 031c 	add.w	r3, r7, #28
 8016230:	4619      	mov	r1, r3
 8016232:	68b8      	ldr	r0, [r7, #8]
 8016234:	f7fd fbd8 	bl	80139e8 <fromInternalTime>
	msgPackPDelayResp(ptpClock->msgObuf, pDelayReqHeader,
 8016238:	68fb      	ldr	r3, [r7, #12]
 801623a:	33cc      	adds	r3, #204	; 0xcc
 801623c:	f107 021c 	add.w	r2, r7, #28
 8016240:	6879      	ldr	r1, [r7, #4]
 8016242:	4618      	mov	r0, r3
 8016244:	f000 fdbb 	bl	8016dbe <msgPackPDelayResp>
			&requestReceiptTimestamp);

	if (!netSendPeerEvent(&ptpClock->netPath, ptpClock->msgObuf,
 8016248:	68fb      	ldr	r3, [r7, #12]
 801624a:	f503 7073 	add.w	r0, r3, #972	; 0x3cc
 801624e:	68fb      	ldr	r3, [r7, #12]
 8016250:	f103 01cc 	add.w	r1, r3, #204	; 0xcc
 8016254:	68bb      	ldr	r3, [r7, #8]
 8016256:	2236      	movs	r2, #54	; 0x36
 8016258:	f001 fb7d 	bl	8017956 <netSendPeerEvent>
 801625c:	4603      	mov	r3, r0
 801625e:	2b00      	cmp	r3, #0
 8016260:	d112      	bne.n	8016288 <issuePDelayResp+0x68>
			PDELAY_RESP_LENGTH, time))
	{
		ERROR("issuePDelayResp: can't sent\r\n");
 8016262:	f107 0314 	add.w	r3, r7, #20
 8016266:	4618      	mov	r0, r3
 8016268:	f001 fee2 	bl	8018030 <getTime>
 801626c:	697b      	ldr	r3, [r7, #20]
 801626e:	69ba      	ldr	r2, [r7, #24]
 8016270:	4619      	mov	r1, r3
 8016272:	480d      	ldr	r0, [pc, #52]	; (80162a8 <issuePDelayResp+0x88>)
 8016274:	f002 f856 	bl	8018324 <iprintf>
 8016278:	480c      	ldr	r0, [pc, #48]	; (80162ac <issuePDelayResp+0x8c>)
 801627a:	f002 f8c7 	bl	801840c <puts>
		toState(ptpClock, PTP_FAULTY);
 801627e:	2101      	movs	r1, #1
 8016280:	68f8      	ldr	r0, [r7, #12]
 8016282:	f7fe fa07 	bl	8014694 <toState>
			addTime(time, time, &ptpClock->outboundLatency);
		}

		DBGV("issuePDelayResp\r\n");
	}
}
 8016286:	e00b      	b.n	80162a0 <issuePDelayResp+0x80>
		if (time->seconds != 0)
 8016288:	68bb      	ldr	r3, [r7, #8]
 801628a:	681b      	ldr	r3, [r3, #0]
 801628c:	2b00      	cmp	r3, #0
 801628e:	d007      	beq.n	80162a0 <issuePDelayResp+0x80>
			addTime(time, time, &ptpClock->outboundLatency);
 8016290:	68fb      	ldr	r3, [r7, #12]
 8016292:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8016296:	461a      	mov	r2, r3
 8016298:	68b9      	ldr	r1, [r7, #8]
 801629a:	68b8      	ldr	r0, [r7, #8]
 801629c:	f7fd fc54 	bl	8013b48 <addTime>
}
 80162a0:	bf00      	nop
 80162a2:	3728      	adds	r7, #40	; 0x28
 80162a4:	46bd      	mov	sp, r7
 80162a6:	bd80      	pop	{r7, pc}
 80162a8:	0801bca8 	.word	0x0801bca8
 80162ac:	0801c1f4 	.word	0x0801c1f4

080162b0 <issueDelayResp>:

/* Pack and send on event multicast ip adress a DelayResp message */
static void issueDelayResp(PtpClock *ptpClock, const TimeInternal *time,
		const MsgHeader *delayReqHeader)
{
 80162b0:	b580      	push	{r7, lr}
 80162b2:	b08a      	sub	sp, #40	; 0x28
 80162b4:	af00      	add	r7, sp, #0
 80162b6:	60f8      	str	r0, [r7, #12]
 80162b8:	60b9      	str	r1, [r7, #8]
 80162ba:	607a      	str	r2, [r7, #4]
	Timestamp requestReceiptTimestamp;

	fromInternalTime(time, &requestReceiptTimestamp);
 80162bc:	f107 031c 	add.w	r3, r7, #28
 80162c0:	4619      	mov	r1, r3
 80162c2:	68b8      	ldr	r0, [r7, #8]
 80162c4:	f7fd fb90 	bl	80139e8 <fromInternalTime>
	msgPackDelayResp(ptpClock, ptpClock->msgObuf, delayReqHeader,
 80162c8:	68fb      	ldr	r3, [r7, #12]
 80162ca:	f103 01cc 	add.w	r1, r3, #204	; 0xcc
 80162ce:	f107 031c 	add.w	r3, r7, #28
 80162d2:	687a      	ldr	r2, [r7, #4]
 80162d4:	68f8      	ldr	r0, [r7, #12]
 80162d6:	f000 fc42 	bl	8016b5e <msgPackDelayResp>
			&requestReceiptTimestamp);

	if (!netSendGeneral(&ptpClock->netPath, ptpClock->msgObuf,
 80162da:	68fb      	ldr	r3, [r7, #12]
 80162dc:	f503 7073 	add.w	r0, r3, #972	; 0x3cc
 80162e0:	68fb      	ldr	r3, [r7, #12]
 80162e2:	33cc      	adds	r3, #204	; 0xcc
 80162e4:	2236      	movs	r2, #54	; 0x36
 80162e6:	4619      	mov	r1, r3
 80162e8:	f001 fb06 	bl	80178f8 <netSendGeneral>
 80162ec:	4603      	mov	r3, r0
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	d111      	bne.n	8016316 <issueDelayResp+0x66>
			PDELAY_RESP_LENGTH))
	{
		ERROR("issueDelayResp: can't sent\r\n");
 80162f2:	f107 0314 	add.w	r3, r7, #20
 80162f6:	4618      	mov	r0, r3
 80162f8:	f001 fe9a 	bl	8018030 <getTime>
 80162fc:	697b      	ldr	r3, [r7, #20]
 80162fe:	69ba      	ldr	r2, [r7, #24]
 8016300:	4619      	mov	r1, r3
 8016302:	4807      	ldr	r0, [pc, #28]	; (8016320 <issueDelayResp+0x70>)
 8016304:	f002 f80e 	bl	8018324 <iprintf>
 8016308:	4806      	ldr	r0, [pc, #24]	; (8016324 <issueDelayResp+0x74>)
 801630a:	f002 f87f 	bl	801840c <puts>
		toState(ptpClock, PTP_FAULTY);
 801630e:	2101      	movs	r1, #1
 8016310:	68f8      	ldr	r0, [r7, #12]
 8016312:	f7fe f9bf 	bl	8014694 <toState>
	}
	else
	{
		DBGV("issueDelayResp\r\n");
	}
}
 8016316:	bf00      	nop
 8016318:	3728      	adds	r7, #40	; 0x28
 801631a:	46bd      	mov	sp, r7
 801631c:	bd80      	pop	{r7, pc}
 801631e:	bf00      	nop
 8016320:	0801bca8 	.word	0x0801bca8
 8016324:	0801c214 	.word	0x0801c214

08016328 <issuePDelayRespFollowUp>:

static void issuePDelayRespFollowUp(PtpClock *ptpClock,
		const TimeInternal *time, const MsgHeader *pDelayReqHeader)
{
 8016328:	b580      	push	{r7, lr}
 801632a:	b08a      	sub	sp, #40	; 0x28
 801632c:	af00      	add	r7, sp, #0
 801632e:	60f8      	str	r0, [r7, #12]
 8016330:	60b9      	str	r1, [r7, #8]
 8016332:	607a      	str	r2, [r7, #4]
	Timestamp responseOriginTimestamp;
	fromInternalTime(time, &responseOriginTimestamp);
 8016334:	f107 031c 	add.w	r3, r7, #28
 8016338:	4619      	mov	r1, r3
 801633a:	68b8      	ldr	r0, [r7, #8]
 801633c:	f7fd fb54 	bl	80139e8 <fromInternalTime>

	msgPackPDelayRespFollowUp(ptpClock->msgObuf, pDelayReqHeader,
 8016340:	68fb      	ldr	r3, [r7, #12]
 8016342:	33cc      	adds	r3, #204	; 0xcc
 8016344:	f107 021c 	add.w	r2, r7, #28
 8016348:	6879      	ldr	r1, [r7, #4]
 801634a:	4618      	mov	r0, r3
 801634c:	f000 fde5 	bl	8016f1a <msgPackPDelayRespFollowUp>
			&responseOriginTimestamp);

	if (!netSendPeerGeneral(&ptpClock->netPath, ptpClock->msgObuf,
 8016350:	68fb      	ldr	r3, [r7, #12]
 8016352:	f503 7073 	add.w	r0, r3, #972	; 0x3cc
 8016356:	68fb      	ldr	r3, [r7, #12]
 8016358:	33cc      	adds	r3, #204	; 0xcc
 801635a:	2236      	movs	r2, #54	; 0x36
 801635c:	4619      	mov	r1, r3
 801635e:	f001 fae2 	bl	8017926 <netSendPeerGeneral>
 8016362:	4603      	mov	r3, r0
 8016364:	2b00      	cmp	r3, #0
 8016366:	d111      	bne.n	801638c <issuePDelayRespFollowUp+0x64>
			PDELAY_RESP_FOLLOW_UP_LENGTH))
	{
		ERROR("issuePDelayRespFollowUp: can't sent\r\n");
 8016368:	f107 0314 	add.w	r3, r7, #20
 801636c:	4618      	mov	r0, r3
 801636e:	f001 fe5f 	bl	8018030 <getTime>
 8016372:	697b      	ldr	r3, [r7, #20]
 8016374:	69ba      	ldr	r2, [r7, #24]
 8016376:	4619      	mov	r1, r3
 8016378:	4806      	ldr	r0, [pc, #24]	; (8016394 <issuePDelayRespFollowUp+0x6c>)
 801637a:	f001 ffd3 	bl	8018324 <iprintf>
 801637e:	4806      	ldr	r0, [pc, #24]	; (8016398 <issuePDelayRespFollowUp+0x70>)
 8016380:	f002 f844 	bl	801840c <puts>
		toState(ptpClock, PTP_FAULTY);
 8016384:	2101      	movs	r1, #1
 8016386:	68f8      	ldr	r0, [r7, #12]
 8016388:	f7fe f984 	bl	8014694 <toState>
	}
	else
	{
		DBGV("issuePDelayRespFollowUp\r\n");
	}
}
 801638c:	bf00      	nop
 801638e:	3728      	adds	r7, #40	; 0x28
 8016390:	46bd      	mov	sp, r7
 8016392:	bd80      	pop	{r7, pc}
 8016394:	0801bca8 	.word	0x0801bca8
 8016398:	0801c230 	.word	0x0801c230

0801639c <ptpd_thread>:
ForeignMasterRecord ptpForeignRecords[DEFAULT_MAX_FOREIGN_RECORDS];

__IO uint32_t PTPTimer = 0;

static void ptpd_thread(void const *arg)
{
 801639c:	b580      	push	{r7, lr}
 801639e:	b084      	sub	sp, #16
 80163a0:	af00      	add	r7, sp, #0
 80163a2:	6078      	str	r0, [r7, #4]
	// Initialize run-time options to default values.
	rtOpts.announceInterval = DEFAULT_ANNOUNCE_INTERVAL;
 80163a4:	4b34      	ldr	r3, [pc, #208]	; (8016478 <ptpd_thread+0xdc>)
 80163a6:	2201      	movs	r2, #1
 80163a8:	701a      	strb	r2, [r3, #0]
	rtOpts.syncInterval = DEFAULT_SYNC_INTERVAL;
 80163aa:	4b33      	ldr	r3, [pc, #204]	; (8016478 <ptpd_thread+0xdc>)
 80163ac:	2200      	movs	r2, #0
 80163ae:	705a      	strb	r2, [r3, #1]
	rtOpts.clockQuality.clockAccuracy = DEFAULT_CLOCK_ACCURACY;
 80163b0:	4b31      	ldr	r3, [pc, #196]	; (8016478 <ptpd_thread+0xdc>)
 80163b2:	22fe      	movs	r2, #254	; 0xfe
 80163b4:	70da      	strb	r2, [r3, #3]
	rtOpts.clockQuality.clockClass = DEFAULT_CLOCK_CLASS;
 80163b6:	4b30      	ldr	r3, [pc, #192]	; (8016478 <ptpd_thread+0xdc>)
 80163b8:	22f8      	movs	r2, #248	; 0xf8
 80163ba:	709a      	strb	r2, [r3, #2]
	rtOpts.clockQuality.offsetScaledLogVariance = DEFAULT_CLOCK_VARIANCE; /* 7.6.3.3 */
 80163bc:	4b2e      	ldr	r3, [pc, #184]	; (8016478 <ptpd_thread+0xdc>)
 80163be:	f241 3288 	movw	r2, #5000	; 0x1388
 80163c2:	809a      	strh	r2, [r3, #4]
	rtOpts.priority1 = DEFAULT_PRIORITY1;
 80163c4:	4b2c      	ldr	r3, [pc, #176]	; (8016478 <ptpd_thread+0xdc>)
 80163c6:	22f8      	movs	r2, #248	; 0xf8
 80163c8:	719a      	strb	r2, [r3, #6]
	rtOpts.priority2 = DEFAULT_PRIORITY2;
 80163ca:	4b2b      	ldr	r3, [pc, #172]	; (8016478 <ptpd_thread+0xdc>)
 80163cc:	22f8      	movs	r2, #248	; 0xf8
 80163ce:	71da      	strb	r2, [r3, #7]
	rtOpts.domainNumber = DEFAULT_DOMAIN_NUMBER;
 80163d0:	4b29      	ldr	r3, [pc, #164]	; (8016478 <ptpd_thread+0xdc>)
 80163d2:	2200      	movs	r2, #0
 80163d4:	721a      	strb	r2, [r3, #8]
	rtOpts.slaveOnly = SLAVE_ONLY;
 80163d6:	4b28      	ldr	r3, [pc, #160]	; (8016478 <ptpd_thread+0xdc>)
 80163d8:	2201      	movs	r2, #1
 80163da:	725a      	strb	r2, [r3, #9]
	rtOpts.currentUtcOffset = DEFAULT_UTC_OFFSET;
 80163dc:	4b26      	ldr	r3, [pc, #152]	; (8016478 <ptpd_thread+0xdc>)
 80163de:	2222      	movs	r2, #34	; 0x22
 80163e0:	815a      	strh	r2, [r3, #10]
	rtOpts.servo.noResetClock = DEFAULT_NO_RESET_CLOCK;
 80163e2:	4b25      	ldr	r3, [pc, #148]	; (8016478 <ptpd_thread+0xdc>)
 80163e4:	2200      	movs	r2, #0
 80163e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	rtOpts.servo.noAdjust = NO_ADJUST;
 80163ea:	4b23      	ldr	r3, [pc, #140]	; (8016478 <ptpd_thread+0xdc>)
 80163ec:	2200      	movs	r2, #0
 80163ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	rtOpts.inboundLatency.nanoseconds = DEFAULT_INBOUND_LATENCY;
 80163f2:	4b21      	ldr	r3, [pc, #132]	; (8016478 <ptpd_thread+0xdc>)
 80163f4:	2200      	movs	r2, #0
 80163f6:	625a      	str	r2, [r3, #36]	; 0x24
	rtOpts.outboundLatency.nanoseconds = DEFAULT_OUTBOUND_LATENCY;
 80163f8:	4b1f      	ldr	r3, [pc, #124]	; (8016478 <ptpd_thread+0xdc>)
 80163fa:	2200      	movs	r2, #0
 80163fc:	62da      	str	r2, [r3, #44]	; 0x2c
	rtOpts.servo.sDelay = DEFAULT_DELAY_S;
 80163fe:	4b1e      	ldr	r3, [pc, #120]	; (8016478 <ptpd_thread+0xdc>)
 8016400:	2206      	movs	r2, #6
 8016402:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	rtOpts.servo.sOffset = DEFAULT_OFFSET_S;
 8016406:	4b1c      	ldr	r3, [pc, #112]	; (8016478 <ptpd_thread+0xdc>)
 8016408:	2200      	movs	r2, #0
 801640a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	rtOpts.servo.ap = DEFAULT_AP;
 801640e:	4b1a      	ldr	r3, [pc, #104]	; (8016478 <ptpd_thread+0xdc>)
 8016410:	4a1a      	ldr	r2, [pc, #104]	; (801647c <ptpd_thread+0xe0>)
 8016412:	639a      	str	r2, [r3, #56]	; 0x38
	rtOpts.servo.ai = DEFAULT_AI;
 8016414:	4b18      	ldr	r3, [pc, #96]	; (8016478 <ptpd_thread+0xdc>)
 8016416:	4a1a      	ldr	r2, [pc, #104]	; (8016480 <ptpd_thread+0xe4>)
 8016418:	63da      	str	r2, [r3, #60]	; 0x3c
	rtOpts.maxForeignRecords = sizeof(ptpForeignRecords) / sizeof(ptpForeignRecords[0]);
 801641a:	4b17      	ldr	r3, [pc, #92]	; (8016478 <ptpd_thread+0xdc>)
 801641c:	2205      	movs	r2, #5
 801641e:	861a      	strh	r2, [r3, #48]	; 0x30
	rtOpts.stats = PTP_TEXT_STATS;
 8016420:	4b15      	ldr	r3, [pc, #84]	; (8016478 <ptpd_thread+0xdc>)
 8016422:	2201      	movs	r2, #1
 8016424:	739a      	strb	r2, [r3, #14]
	rtOpts.delayMechanism = DEFAULT_DELAY_MECHANISM;
 8016426:	4b14      	ldr	r3, [pc, #80]	; (8016478 <ptpd_thread+0xdc>)
 8016428:	2201      	movs	r2, #1
 801642a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

	// Initialize run time options.
	if (ptpdStartup(&ptpClock, &rtOpts, ptpForeignRecords) != 0)
 801642e:	4a15      	ldr	r2, [pc, #84]	; (8016484 <ptpd_thread+0xe8>)
 8016430:	4911      	ldr	r1, [pc, #68]	; (8016478 <ptpd_thread+0xdc>)
 8016432:	4815      	ldr	r0, [pc, #84]	; (8016488 <ptpd_thread+0xec>)
 8016434:	f001 fdb0 	bl	8017f98 <ptpdStartup>
 8016438:	4603      	mov	r3, r0
 801643a:	2b00      	cmp	r3, #0
 801643c:	d003      	beq.n	8016446 <ptpd_thread+0xaa>
	{
		printf("PTPD: startup failed");
 801643e:	4813      	ldr	r0, [pc, #76]	; (801648c <ptpd_thread+0xf0>)
 8016440:	f001 ff70 	bl	8018324 <iprintf>
		return;
 8016444:	e014      	b.n	8016470 <ptpd_thread+0xd4>
	}
	
	printf("PTP thread ready.\r\n");
 8016446:	4812      	ldr	r0, [pc, #72]	; (8016490 <ptpd_thread+0xf4>)
 8016448:	f001 ffe0 	bl	801840c <puts>
		{
			// doState() has a switch for the actions and events to be
			// checked for 'port_state'. The actions and events may or may not change
			// 'port_state' by calling toState(), but once they are done we loop around
			// again and perform the actions required for the new 'port_state'.
			doState(&ptpClock);
 801644c:	480e      	ldr	r0, [pc, #56]	; (8016488 <ptpd_thread+0xec>)
 801644e:	f7fe fba9 	bl	8014ba4 <doState>
		}
		while (netSelect(&ptpClock.netPath, 0) > 0);
 8016452:	2100      	movs	r1, #0
 8016454:	480f      	ldr	r0, [pc, #60]	; (8016494 <ptpd_thread+0xf8>)
 8016456:	f001 f8e9 	bl	801762c <netSelect>
 801645a:	4603      	mov	r3, r0
 801645c:	2b00      	cmp	r3, #0
 801645e:	dcf5      	bgt.n	801644c <ptpd_thread+0xb0>
		
		// Wait up to 100ms for something to do, then do something anyway.
		sys_arch_mbox_fetch(&ptp_alert_queue, &msg, 100);
 8016460:	f107 030c 	add.w	r3, r7, #12
 8016464:	2264      	movs	r2, #100	; 0x64
 8016466:	4619      	mov	r1, r3
 8016468:	480b      	ldr	r0, [pc, #44]	; (8016498 <ptpd_thread+0xfc>)
 801646a:	f7fd f994 	bl	8013796 <sys_arch_mbox_fetch>
	{
 801646e:	e7ed      	b.n	801644c <ptpd_thread+0xb0>
	}
}
 8016470:	3710      	adds	r7, #16
 8016472:	46bd      	mov	sp, r7
 8016474:	bd80      	pop	{r7, pc}
 8016476:	bf00      	nop
 8016478:	2000bef0 	.word	0x2000bef0
 801647c:	3f19999a 	.word	0x3f19999a
 8016480:	3d75c28f 	.word	0x3d75c28f
 8016484:	2000bd38 	.word	0x2000bd38
 8016488:	2000b8e8 	.word	0x2000b8e8
 801648c:	0801c258 	.word	0x0801c258
 8016490:	0801c270 	.word	0x0801c270
 8016494:	2000bcb4 	.word	0x2000bcb4
 8016498:	20004be4 	.word	0x20004be4

0801649c <ptpd_alert>:

// Notify the PTP thread of a pending operation.
void ptpd_alert(void)
{
 801649c:	b580      	push	{r7, lr}
 801649e:	af00      	add	r7, sp, #0
	// Send a message to the alert queue to wake up the PTP thread.
	sys_mbox_trypost(&ptp_alert_queue, NULL);
 80164a0:	2100      	movs	r1, #0
 80164a2:	4802      	ldr	r0, [pc, #8]	; (80164ac <ptpd_alert+0x10>)
 80164a4:	f7fd f95d 	bl	8013762 <sys_mbox_trypost>
}
 80164a8:	bf00      	nop
 80164aa:	bd80      	pop	{r7, pc}
 80164ac:	20004be4 	.word	0x20004be4

080164b0 <ptpd_init>:

osThreadId ptpd_init(void)
{
 80164b0:	b5b0      	push	{r4, r5, r7, lr}
 80164b2:	b088      	sub	sp, #32
 80164b4:	af00      	add	r7, sp, #0
	// Create the alert queue mailbox.
  if (sys_mbox_new(&ptp_alert_queue, 8) != ERR_OK)
 80164b6:	2108      	movs	r1, #8
 80164b8:	480f      	ldr	r0, [pc, #60]	; (80164f8 <ptpd_init+0x48>)
 80164ba:	f7fd f91b 	bl	80136f4 <sys_mbox_new>
 80164be:	4603      	mov	r3, r0
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	d002      	beq.n	80164ca <ptpd_init+0x1a>
	{
    printf("PTPD: failed to create ptp_alert_queue mbox");
 80164c4:	480d      	ldr	r0, [pc, #52]	; (80164fc <ptpd_init+0x4c>)
 80164c6:	f001 ff2d 	bl	8018324 <iprintf>
  }

	// Create the PTP daemon thread.
  	osThreadDef(PTPD, ptpd_thread, osPriorityAboveNormal, 0, DEFAULT_THREAD_STACKSIZE * 2);
 80164ca:	4b0d      	ldr	r3, [pc, #52]	; (8016500 <ptpd_init+0x50>)
 80164cc:	1d3c      	adds	r4, r7, #4
 80164ce:	461d      	mov	r5, r3
 80164d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80164d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80164d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80164d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  	PTPTaskHandle = osThreadCreate(osThread(PTPD), NULL);
 80164dc:	1d3b      	adds	r3, r7, #4
 80164de:	2100      	movs	r1, #0
 80164e0:	4618      	mov	r0, r3
 80164e2:	f7ee f958 	bl	8004796 <osThreadCreate>
 80164e6:	4602      	mov	r2, r0
 80164e8:	4b06      	ldr	r3, [pc, #24]	; (8016504 <ptpd_init+0x54>)
 80164ea:	601a      	str	r2, [r3, #0]
	//sys_thread_t id = sys_thread_new("PTPD", ptpd_thread, NULL, DEFAULT_THREAD_STACKSIZE * 2, osPriorityAboveNormal);
  	return PTPTaskHandle;
 80164ec:	4b05      	ldr	r3, [pc, #20]	; (8016504 <ptpd_init+0x54>)
 80164ee:	681b      	ldr	r3, [r3, #0]
}
 80164f0:	4618      	mov	r0, r3
 80164f2:	3720      	adds	r7, #32
 80164f4:	46bd      	mov	sp, r7
 80164f6:	bdb0      	pop	{r4, r5, r7, pc}
 80164f8:	20004be4 	.word	0x20004be4
 80164fc:	0801c284 	.word	0x0801c284
 8016500:	0801c2b8 	.word	0x0801c2b8
 8016504:	2000bd30 	.word	0x2000bd30

08016508 <msgUnpackHeader>:

#include "../ptpd.h"

/* Unpack header message */
void msgUnpackHeader(const octet_t *buf, MsgHeader *header)
{
 8016508:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 801650c:	b084      	sub	sp, #16
 801650e:	af00      	add	r7, sp, #0
 8016510:	6078      	str	r0, [r7, #4]
 8016512:	6039      	str	r1, [r7, #0]
	int32_t msb;
	uint32_t lsb;

	header->transportSpecific = (*(nibble_t*)(buf + 0)) >> 4;
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	781b      	ldrb	r3, [r3, #0]
 8016518:	091b      	lsrs	r3, r3, #4
 801651a:	b2da      	uxtb	r2, r3
 801651c:	683b      	ldr	r3, [r7, #0]
 801651e:	701a      	strb	r2, [r3, #0]
	header->messageType = (*(enum4bit_t*)(buf + 0)) & 0x0F;
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	781b      	ldrb	r3, [r3, #0]
 8016524:	f003 030f 	and.w	r3, r3, #15
 8016528:	b2da      	uxtb	r2, r3
 801652a:	683b      	ldr	r3, [r7, #0]
 801652c:	705a      	strb	r2, [r3, #1]
	header->versionPTP = (*(uint4bit_t*)(buf  + 1)) & 0x0F; //force reserved bit to zero if not
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	3301      	adds	r3, #1
 8016532:	781b      	ldrb	r3, [r3, #0]
 8016534:	f003 030f 	and.w	r3, r3, #15
 8016538:	b2da      	uxtb	r2, r3
 801653a:	683b      	ldr	r3, [r7, #0]
 801653c:	709a      	strb	r2, [r3, #2]
	header->messageLength = flip16(*(int16_t*)(buf  + 2));
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	3302      	adds	r3, #2
 8016542:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016546:	b29b      	uxth	r3, r3
 8016548:	4618      	mov	r0, r3
 801654a:	f7f1 fd97 	bl	800807c <lwip_htons>
 801654e:	4603      	mov	r3, r0
 8016550:	b21a      	sxth	r2, r3
 8016552:	683b      	ldr	r3, [r7, #0]
 8016554:	809a      	strh	r2, [r3, #4]
	header->domainNumber = (*(uint8_t*)(buf + 4));
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	791a      	ldrb	r2, [r3, #4]
 801655a:	683b      	ldr	r3, [r7, #0]
 801655c:	719a      	strb	r2, [r3, #6]
	memcpy(header->flagField, (buf + 6), FLAG_FIELD_LENGTH);
 801655e:	683b      	ldr	r3, [r7, #0]
 8016560:	3307      	adds	r3, #7
 8016562:	687a      	ldr	r2, [r7, #4]
 8016564:	3206      	adds	r2, #6
 8016566:	8812      	ldrh	r2, [r2, #0]
 8016568:	b292      	uxth	r2, r2
 801656a:	801a      	strh	r2, [r3, #0]
	memcpy(&msb, (buf + 8), 4);
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	3308      	adds	r3, #8
 8016570:	681b      	ldr	r3, [r3, #0]
 8016572:	60fb      	str	r3, [r7, #12]
	memcpy(&lsb, (buf + 12), 4);
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	330c      	adds	r3, #12
 8016578:	681b      	ldr	r3, [r3, #0]
 801657a:	60bb      	str	r3, [r7, #8]
	header->correctionfield = flip32(msb);
 801657c:	68fb      	ldr	r3, [r7, #12]
 801657e:	4618      	mov	r0, r3
 8016580:	f7f1 fd89 	bl	8008096 <lwip_htonl>
 8016584:	4603      	mov	r3, r0
 8016586:	f04f 0400 	mov.w	r4, #0
 801658a:	683a      	ldr	r2, [r7, #0]
 801658c:	e9c2 3404 	strd	r3, r4, [r2, #16]
	header->correctionfield <<= 32;
 8016590:	683b      	ldr	r3, [r7, #0]
 8016592:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 8016596:	f04f 0300 	mov.w	r3, #0
 801659a:	f04f 0400 	mov.w	r4, #0
 801659e:	000c      	movs	r4, r1
 80165a0:	2300      	movs	r3, #0
 80165a2:	683a      	ldr	r2, [r7, #0]
 80165a4:	e9c2 3404 	strd	r3, r4, [r2, #16]
	header->correctionfield += flip32(lsb);
 80165a8:	68bb      	ldr	r3, [r7, #8]
 80165aa:	4618      	mov	r0, r3
 80165ac:	f7f1 fd73 	bl	8008096 <lwip_htonl>
 80165b0:	683b      	ldr	r3, [r7, #0]
 80165b2:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 80165b6:	4683      	mov	fp, r0
 80165b8:	f04f 0c00 	mov.w	ip, #0
 80165bc:	eb1b 0301 	adds.w	r3, fp, r1
 80165c0:	eb4c 0402 	adc.w	r4, ip, r2
 80165c4:	683a      	ldr	r2, [r7, #0]
 80165c6:	e9c2 3404 	strd	r3, r4, [r2, #16]
	memcpy(header->sourcePortIdentity.clockIdentity, (buf + 20), CLOCK_IDENTITY_LENGTH);
 80165ca:	683b      	ldr	r3, [r7, #0]
 80165cc:	f103 0018 	add.w	r0, r3, #24
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	3314      	adds	r3, #20
 80165d4:	2208      	movs	r2, #8
 80165d6:	4619      	mov	r1, r3
 80165d8:	f001 fe91 	bl	80182fe <memcpy>
	header->sourcePortIdentity.portNumber = flip16(*(int16_t*)(buf  + 28));
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	331c      	adds	r3, #28
 80165e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80165e4:	b29b      	uxth	r3, r3
 80165e6:	4618      	mov	r0, r3
 80165e8:	f7f1 fd48 	bl	800807c <lwip_htons>
 80165ec:	4603      	mov	r3, r0
 80165ee:	b21a      	sxth	r2, r3
 80165f0:	683b      	ldr	r3, [r7, #0]
 80165f2:	841a      	strh	r2, [r3, #32]
	header->sequenceId = flip16(*(int16_t*)(buf + 30));
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	331e      	adds	r3, #30
 80165f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80165fc:	b29b      	uxth	r3, r3
 80165fe:	4618      	mov	r0, r3
 8016600:	f7f1 fd3c 	bl	800807c <lwip_htons>
 8016604:	4603      	mov	r3, r0
 8016606:	b21a      	sxth	r2, r3
 8016608:	683b      	ldr	r3, [r7, #0]
 801660a:	845a      	strh	r2, [r3, #34]	; 0x22
	header->controlField = (*(uint8_t*)(buf + 32));
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8016612:	683b      	ldr	r3, [r7, #0]
 8016614:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	header->logMessageInterval = (*(int8_t*)(buf + 33));
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	f993 2021 	ldrsb.w	r2, [r3, #33]	; 0x21
 801661e:	683b      	ldr	r3, [r7, #0]
 8016620:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 8016624:	bf00      	nop
 8016626:	3710      	adds	r7, #16
 8016628:	46bd      	mov	sp, r7
 801662a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0801662e <msgPackHeader>:

/* Pack header message */
void msgPackHeader(const PtpClock *ptpClock, octet_t *buf)
{
 801662e:	b580      	push	{r7, lr}
 8016630:	b084      	sub	sp, #16
 8016632:	af00      	add	r7, sp, #0
 8016634:	6078      	str	r0, [r7, #4]
 8016636:	6039      	str	r1, [r7, #0]
	nibble_t transport = 0x80; //(spec annex D)
 8016638:	2380      	movs	r3, #128	; 0x80
 801663a:	73fb      	strb	r3, [r7, #15]
	*(uint8_t*)(buf + 0) = transport;
 801663c:	683b      	ldr	r3, [r7, #0]
 801663e:	7bfa      	ldrb	r2, [r7, #15]
 8016640:	701a      	strb	r2, [r3, #0]
	*(uint4bit_t*)(buf  + 1) = ptpClock->portDS.versionNumber;
 8016642:	683b      	ldr	r3, [r7, #0]
 8016644:	3301      	adds	r3, #1
 8016646:	687a      	ldr	r2, [r7, #4]
 8016648:	f892 2071 	ldrb.w	r2, [r2, #113]	; 0x71
 801664c:	701a      	strb	r2, [r3, #0]
	*(uint8_t*)(buf + 4) = ptpClock->defaultDS.domainNumber;
 801664e:	683b      	ldr	r3, [r7, #0]
 8016650:	3304      	adds	r3, #4
 8016652:	687a      	ldr	r2, [r7, #4]
 8016654:	7c92      	ldrb	r2, [r2, #18]
 8016656:	701a      	strb	r2, [r3, #0]
	if (ptpClock->defaultDS.twoStepFlag)
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	781b      	ldrb	r3, [r3, #0]
 801665c:	2b00      	cmp	r3, #0
 801665e:	d003      	beq.n	8016668 <msgPackHeader+0x3a>
	{
			*(uint8_t*)(buf + 6) = FLAG0_TWO_STEP;
 8016660:	683b      	ldr	r3, [r7, #0]
 8016662:	3306      	adds	r3, #6
 8016664:	2202      	movs	r2, #2
 8016666:	701a      	strb	r2, [r3, #0]
	}
	memset((buf + 8), 0, 8);
 8016668:	683b      	ldr	r3, [r7, #0]
 801666a:	3308      	adds	r3, #8
 801666c:	2208      	movs	r2, #8
 801666e:	2100      	movs	r1, #0
 8016670:	4618      	mov	r0, r3
 8016672:	f001 fe4f 	bl	8018314 <memset>
	memcpy((buf + 20), ptpClock->portDS.portIdentity.clockIdentity, CLOCK_IDENTITY_LENGTH);
 8016676:	683b      	ldr	r3, [r7, #0]
 8016678:	f103 0014 	add.w	r0, r3, #20
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	3358      	adds	r3, #88	; 0x58
 8016680:	2208      	movs	r2, #8
 8016682:	4619      	mov	r1, r3
 8016684:	f001 fe3b 	bl	80182fe <memcpy>
	*(int16_t*)(buf + 28) = flip16(ptpClock->portDS.portIdentity.portNumber);
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	f9b3 3060 	ldrsh.w	r3, [r3, #96]	; 0x60
 801668e:	b29b      	uxth	r3, r3
 8016690:	4618      	mov	r0, r3
 8016692:	f7f1 fcf3 	bl	800807c <lwip_htons>
 8016696:	4603      	mov	r3, r0
 8016698:	461a      	mov	r2, r3
 801669a:	683b      	ldr	r3, [r7, #0]
 801669c:	331c      	adds	r3, #28
 801669e:	b212      	sxth	r2, r2
 80166a0:	801a      	strh	r2, [r3, #0]
	*(uint8_t*)(buf + 33) = 0x7F; //Default value (spec Table 24)
 80166a2:	683b      	ldr	r3, [r7, #0]
 80166a4:	3321      	adds	r3, #33	; 0x21
 80166a6:	227f      	movs	r2, #127	; 0x7f
 80166a8:	701a      	strb	r2, [r3, #0]
}
 80166aa:	bf00      	nop
 80166ac:	3710      	adds	r7, #16
 80166ae:	46bd      	mov	sp, r7
 80166b0:	bd80      	pop	{r7, pc}

080166b2 <msgPackAnnounce>:

/* Pack Announce message */
void msgPackAnnounce(const PtpClock *ptpClock, octet_t *buf)
{
 80166b2:	b580      	push	{r7, lr}
 80166b4:	b082      	sub	sp, #8
 80166b6:	af00      	add	r7, sp, #0
 80166b8:	6078      	str	r0, [r7, #4]
 80166ba:	6039      	str	r1, [r7, #0]
	/* Changes in header */
	*(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; //RAZ messageType
 80166bc:	683b      	ldr	r3, [r7, #0]
 80166be:	781b      	ldrb	r3, [r3, #0]
 80166c0:	f023 030f 	bic.w	r3, r3, #15
 80166c4:	b2da      	uxtb	r2, r3
 80166c6:	683b      	ldr	r3, [r7, #0]
 80166c8:	701a      	strb	r2, [r3, #0]
	*(char*)(buf + 0) = *(char*)(buf + 0) | ANNOUNCE; //Table 19
 80166ca:	683b      	ldr	r3, [r7, #0]
 80166cc:	781b      	ldrb	r3, [r3, #0]
 80166ce:	f043 030b 	orr.w	r3, r3, #11
 80166d2:	b2da      	uxtb	r2, r3
 80166d4:	683b      	ldr	r3, [r7, #0]
 80166d6:	701a      	strb	r2, [r3, #0]
	*(int16_t*)(buf + 2)  = flip16(ANNOUNCE_LENGTH);
 80166d8:	2040      	movs	r0, #64	; 0x40
 80166da:	f7f1 fccf 	bl	800807c <lwip_htons>
 80166de:	4603      	mov	r3, r0
 80166e0:	461a      	mov	r2, r3
 80166e2:	683b      	ldr	r3, [r7, #0]
 80166e4:	3302      	adds	r3, #2
 80166e6:	b212      	sxth	r2, r2
 80166e8:	801a      	strh	r2, [r3, #0]
	*(int16_t*)(buf + 30) = flip16(ptpClock->sentAnnounceSequenceId);
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	f9b3 3386 	ldrsh.w	r3, [r3, #902]	; 0x386
 80166f0:	b29b      	uxth	r3, r3
 80166f2:	4618      	mov	r0, r3
 80166f4:	f7f1 fcc2 	bl	800807c <lwip_htons>
 80166f8:	4603      	mov	r3, r0
 80166fa:	461a      	mov	r2, r3
 80166fc:	683b      	ldr	r3, [r7, #0]
 80166fe:	331e      	adds	r3, #30
 8016700:	b212      	sxth	r2, r2
 8016702:	801a      	strh	r2, [r3, #0]
	*(uint8_t*)(buf + 32) = CTRL_OTHER; /* Table 23 - controlField */
 8016704:	683b      	ldr	r3, [r7, #0]
 8016706:	3320      	adds	r3, #32
 8016708:	2205      	movs	r2, #5
 801670a:	701a      	strb	r2, [r3, #0]
	*(int8_t*)(buf + 33) = ptpClock->portDS.logAnnounceInterval;
 801670c:	683b      	ldr	r3, [r7, #0]
 801670e:	3321      	adds	r3, #33	; 0x21
 8016710:	687a      	ldr	r2, [r7, #4]
 8016712:	f992 206c 	ldrsb.w	r2, [r2, #108]	; 0x6c
 8016716:	701a      	strb	r2, [r3, #0]

	/* Announce message */
	memset((buf + 34), 0, 10); /* originTimestamp */
 8016718:	683b      	ldr	r3, [r7, #0]
 801671a:	3322      	adds	r3, #34	; 0x22
 801671c:	220a      	movs	r2, #10
 801671e:	2100      	movs	r1, #0
 8016720:	4618      	mov	r0, r3
 8016722:	f001 fdf7 	bl	8018314 <memset>
	*(int16_t*)(buf + 44) = flip16(ptpClock->timePropertiesDS.currentUtcOffset);
 8016726:	687b      	ldr	r3, [r7, #4]
 8016728:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 801672c:	b29b      	uxth	r3, r3
 801672e:	4618      	mov	r0, r3
 8016730:	f7f1 fca4 	bl	800807c <lwip_htons>
 8016734:	4603      	mov	r3, r0
 8016736:	461a      	mov	r2, r3
 8016738:	683b      	ldr	r3, [r7, #0]
 801673a:	332c      	adds	r3, #44	; 0x2c
 801673c:	b212      	sxth	r2, r2
 801673e:	801a      	strh	r2, [r3, #0]
	*(uint8_t*)(buf + 47) = ptpClock->parentDS.grandmasterPriority1;
 8016740:	683b      	ldr	r3, [r7, #0]
 8016742:	332f      	adds	r3, #47	; 0x2f
 8016744:	687a      	ldr	r2, [r7, #4]
 8016746:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 801674a:	701a      	strb	r2, [r3, #0]
	*(uint8_t*)(buf + 48) = ptpClock->defaultDS.clockQuality.clockClass;
 801674c:	683b      	ldr	r3, [r7, #0]
 801674e:	3330      	adds	r3, #48	; 0x30
 8016750:	687a      	ldr	r2, [r7, #4]
 8016752:	7b12      	ldrb	r2, [r2, #12]
 8016754:	701a      	strb	r2, [r3, #0]
	*(enum8bit_t*)(buf + 49) = ptpClock->defaultDS.clockQuality.clockAccuracy;
 8016756:	683b      	ldr	r3, [r7, #0]
 8016758:	3331      	adds	r3, #49	; 0x31
 801675a:	687a      	ldr	r2, [r7, #4]
 801675c:	7b52      	ldrb	r2, [r2, #13]
 801675e:	701a      	strb	r2, [r3, #0]
	*(int16_t*)(buf + 50) = flip16(ptpClock->defaultDS.clockQuality.offsetScaledLogVariance);
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8016766:	b29b      	uxth	r3, r3
 8016768:	4618      	mov	r0, r3
 801676a:	f7f1 fc87 	bl	800807c <lwip_htons>
 801676e:	4603      	mov	r3, r0
 8016770:	461a      	mov	r2, r3
 8016772:	683b      	ldr	r3, [r7, #0]
 8016774:	3332      	adds	r3, #50	; 0x32
 8016776:	b212      	sxth	r2, r2
 8016778:	801a      	strh	r2, [r3, #0]
	*(uint8_t*)(buf + 52) = ptpClock->parentDS.grandmasterPriority2;
 801677a:	683b      	ldr	r3, [r7, #0]
 801677c:	3334      	adds	r3, #52	; 0x34
 801677e:	687a      	ldr	r2, [r7, #4]
 8016780:	f892 2049 	ldrb.w	r2, [r2, #73]	; 0x49
 8016784:	701a      	strb	r2, [r3, #0]
	memcpy((buf + 53), ptpClock->parentDS.grandmasterIdentity, CLOCK_IDENTITY_LENGTH);
 8016786:	683b      	ldr	r3, [r7, #0]
 8016788:	f103 0035 	add.w	r0, r3, #53	; 0x35
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	333c      	adds	r3, #60	; 0x3c
 8016790:	2208      	movs	r2, #8
 8016792:	4619      	mov	r1, r3
 8016794:	f001 fdb3 	bl	80182fe <memcpy>
	*(int16_t*)(buf + 61) = flip16(ptpClock->currentDS.stepsRemoved);
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 801679e:	b29b      	uxth	r3, r3
 80167a0:	4618      	mov	r0, r3
 80167a2:	f7f1 fc6b 	bl	800807c <lwip_htons>
 80167a6:	4603      	mov	r3, r0
 80167a8:	461a      	mov	r2, r3
 80167aa:	683b      	ldr	r3, [r7, #0]
 80167ac:	333d      	adds	r3, #61	; 0x3d
 80167ae:	b212      	sxth	r2, r2
 80167b0:	801a      	strh	r2, [r3, #0]
	*(enum8bit_t*)(buf + 63) = ptpClock->timePropertiesDS.timeSource;
 80167b2:	683b      	ldr	r3, [r7, #0]
 80167b4:	333f      	adds	r3, #63	; 0x3f
 80167b6:	687a      	ldr	r2, [r7, #4]
 80167b8:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80167bc:	701a      	strb	r2, [r3, #0]
}
 80167be:	bf00      	nop
 80167c0:	3708      	adds	r7, #8
 80167c2:	46bd      	mov	sp, r7
 80167c4:	bd80      	pop	{r7, pc}

080167c6 <msgUnpackAnnounce>:

/* Unpack Announce message */
void msgUnpackAnnounce(const octet_t *buf, MsgAnnounce *announce)
{
 80167c6:	b580      	push	{r7, lr}
 80167c8:	b082      	sub	sp, #8
 80167ca:	af00      	add	r7, sp, #0
 80167cc:	6078      	str	r0, [r7, #4]
 80167ce:	6039      	str	r1, [r7, #0]
	announce->originTimestamp.secondsField.msb = flip16(*(int16_t*)(buf + 34));
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	3322      	adds	r3, #34	; 0x22
 80167d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80167d8:	b29b      	uxth	r3, r3
 80167da:	4618      	mov	r0, r3
 80167dc:	f7f1 fc4e 	bl	800807c <lwip_htons>
 80167e0:	4603      	mov	r3, r0
 80167e2:	461a      	mov	r2, r3
 80167e4:	683b      	ldr	r3, [r7, #0]
 80167e6:	809a      	strh	r2, [r3, #4]
	announce->originTimestamp.secondsField.lsb = flip32(*(uint32_t*)(buf + 36));
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	3324      	adds	r3, #36	; 0x24
 80167ec:	681b      	ldr	r3, [r3, #0]
 80167ee:	4618      	mov	r0, r3
 80167f0:	f7f1 fc51 	bl	8008096 <lwip_htonl>
 80167f4:	4602      	mov	r2, r0
 80167f6:	683b      	ldr	r3, [r7, #0]
 80167f8:	601a      	str	r2, [r3, #0]
	announce->originTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	3328      	adds	r3, #40	; 0x28
 80167fe:	681b      	ldr	r3, [r3, #0]
 8016800:	4618      	mov	r0, r3
 8016802:	f7f1 fc48 	bl	8008096 <lwip_htonl>
 8016806:	4602      	mov	r2, r0
 8016808:	683b      	ldr	r3, [r7, #0]
 801680a:	609a      	str	r2, [r3, #8]
	announce->currentUtcOffset = flip16(*(int16_t*)(buf + 44));
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	332c      	adds	r3, #44	; 0x2c
 8016810:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016814:	b29b      	uxth	r3, r3
 8016816:	4618      	mov	r0, r3
 8016818:	f7f1 fc30 	bl	800807c <lwip_htons>
 801681c:	4603      	mov	r3, r0
 801681e:	b21a      	sxth	r2, r3
 8016820:	683b      	ldr	r3, [r7, #0]
 8016822:	819a      	strh	r2, [r3, #12]
	announce->grandmasterPriority1 = *(uint8_t*)(buf + 47);
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 801682a:	683b      	ldr	r3, [r7, #0]
 801682c:	739a      	strb	r2, [r3, #14]
	announce->grandmasterClockQuality.clockClass = *(uint8_t*)(buf + 48);
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8016834:	683b      	ldr	r3, [r7, #0]
 8016836:	741a      	strb	r2, [r3, #16]
	announce->grandmasterClockQuality.clockAccuracy = *(enum8bit_t*)(buf + 49);
 8016838:	687b      	ldr	r3, [r7, #4]
 801683a:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 801683e:	683b      	ldr	r3, [r7, #0]
 8016840:	745a      	strb	r2, [r3, #17]
	announce->grandmasterClockQuality.offsetScaledLogVariance = flip16(*(int16_t*)(buf  + 50));
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	3332      	adds	r3, #50	; 0x32
 8016846:	f9b3 3000 	ldrsh.w	r3, [r3]
 801684a:	b29b      	uxth	r3, r3
 801684c:	4618      	mov	r0, r3
 801684e:	f7f1 fc15 	bl	800807c <lwip_htons>
 8016852:	4603      	mov	r3, r0
 8016854:	b21a      	sxth	r2, r3
 8016856:	683b      	ldr	r3, [r7, #0]
 8016858:	825a      	strh	r2, [r3, #18]
	announce->grandmasterPriority2 = *(uint8_t*)(buf + 52);
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8016860:	683b      	ldr	r3, [r7, #0]
 8016862:	751a      	strb	r2, [r3, #20]
	memcpy(announce->grandmasterIdentity, (buf + 53), CLOCK_IDENTITY_LENGTH);
 8016864:	683b      	ldr	r3, [r7, #0]
 8016866:	f103 0015 	add.w	r0, r3, #21
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	3335      	adds	r3, #53	; 0x35
 801686e:	2208      	movs	r2, #8
 8016870:	4619      	mov	r1, r3
 8016872:	f001 fd44 	bl	80182fe <memcpy>
	announce->stepsRemoved = flip16(*(int16_t*)(buf + 61));
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	333d      	adds	r3, #61	; 0x3d
 801687a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801687e:	b29b      	uxth	r3, r3
 8016880:	4618      	mov	r0, r3
 8016882:	f7f1 fbfb 	bl	800807c <lwip_htons>
 8016886:	4603      	mov	r3, r0
 8016888:	b21a      	sxth	r2, r3
 801688a:	683b      	ldr	r3, [r7, #0]
 801688c:	83da      	strh	r2, [r3, #30]
	announce->timeSource = *(enum8bit_t*)(buf + 63);
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8016894:	683b      	ldr	r3, [r7, #0]
 8016896:	f883 2020 	strb.w	r2, [r3, #32]
}
 801689a:	bf00      	nop
 801689c:	3708      	adds	r7, #8
 801689e:	46bd      	mov	sp, r7
 80168a0:	bd80      	pop	{r7, pc}

080168a2 <msgPackSync>:

/* Pack SYNC message */
void msgPackSync(const PtpClock *ptpClock, octet_t *buf, const Timestamp *originTimestamp)
{
 80168a2:	b590      	push	{r4, r7, lr}
 80168a4:	b085      	sub	sp, #20
 80168a6:	af00      	add	r7, sp, #0
 80168a8:	60f8      	str	r0, [r7, #12]
 80168aa:	60b9      	str	r1, [r7, #8]
 80168ac:	607a      	str	r2, [r7, #4]
	/* Changes in header */
	*(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; //RAZ messageType
 80168ae:	68bb      	ldr	r3, [r7, #8]
 80168b0:	781b      	ldrb	r3, [r3, #0]
 80168b2:	f023 030f 	bic.w	r3, r3, #15
 80168b6:	b2da      	uxtb	r2, r3
 80168b8:	68bb      	ldr	r3, [r7, #8]
 80168ba:	701a      	strb	r2, [r3, #0]
	*(char*)(buf + 0) = *(char*)(buf + 0) | SYNC; //Table 19
 80168bc:	68bb      	ldr	r3, [r7, #8]
 80168be:	781a      	ldrb	r2, [r3, #0]
 80168c0:	68bb      	ldr	r3, [r7, #8]
 80168c2:	701a      	strb	r2, [r3, #0]
	*(int16_t*)(buf + 2)  = flip16(SYNC_LENGTH);
 80168c4:	202c      	movs	r0, #44	; 0x2c
 80168c6:	f7f1 fbd9 	bl	800807c <lwip_htons>
 80168ca:	4603      	mov	r3, r0
 80168cc:	461a      	mov	r2, r3
 80168ce:	68bb      	ldr	r3, [r7, #8]
 80168d0:	3302      	adds	r3, #2
 80168d2:	b212      	sxth	r2, r2
 80168d4:	801a      	strh	r2, [r3, #0]
	*(int16_t*)(buf + 30) = flip16(ptpClock->sentSyncSequenceId);
 80168d6:	68fb      	ldr	r3, [r7, #12]
 80168d8:	f9b3 3384 	ldrsh.w	r3, [r3, #900]	; 0x384
 80168dc:	b29b      	uxth	r3, r3
 80168de:	4618      	mov	r0, r3
 80168e0:	f7f1 fbcc 	bl	800807c <lwip_htons>
 80168e4:	4603      	mov	r3, r0
 80168e6:	461a      	mov	r2, r3
 80168e8:	68bb      	ldr	r3, [r7, #8]
 80168ea:	331e      	adds	r3, #30
 80168ec:	b212      	sxth	r2, r2
 80168ee:	801a      	strh	r2, [r3, #0]
	*(uint8_t*)(buf + 32) = CTRL_SYNC; //Table 23
 80168f0:	68bb      	ldr	r3, [r7, #8]
 80168f2:	3320      	adds	r3, #32
 80168f4:	2200      	movs	r2, #0
 80168f6:	701a      	strb	r2, [r3, #0]
	*(int8_t*)(buf + 33) = ptpClock->portDS.logSyncInterval;
 80168f8:	68bb      	ldr	r3, [r7, #8]
 80168fa:	3321      	adds	r3, #33	; 0x21
 80168fc:	68fa      	ldr	r2, [r7, #12]
 80168fe:	f992 206e 	ldrsb.w	r2, [r2, #110]	; 0x6e
 8016902:	701a      	strb	r2, [r3, #0]
	memset((buf + 8), 0, 8); /* correction field */
 8016904:	68bb      	ldr	r3, [r7, #8]
 8016906:	3308      	adds	r3, #8
 8016908:	2208      	movs	r2, #8
 801690a:	2100      	movs	r1, #0
 801690c:	4618      	mov	r0, r3
 801690e:	f001 fd01 	bl	8018314 <memset>

	/* Sync message */
	*(int16_t*)(buf + 34) = flip16(originTimestamp->secondsField.msb);
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	889b      	ldrh	r3, [r3, #4]
 8016916:	4618      	mov	r0, r3
 8016918:	f7f1 fbb0 	bl	800807c <lwip_htons>
 801691c:	4603      	mov	r3, r0
 801691e:	461a      	mov	r2, r3
 8016920:	68bb      	ldr	r3, [r7, #8]
 8016922:	3322      	adds	r3, #34	; 0x22
 8016924:	b212      	sxth	r2, r2
 8016926:	801a      	strh	r2, [r3, #0]
	*(uint32_t*)(buf + 36) = flip32(originTimestamp->secondsField.lsb);
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	681a      	ldr	r2, [r3, #0]
 801692c:	68bb      	ldr	r3, [r7, #8]
 801692e:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8016932:	4610      	mov	r0, r2
 8016934:	f7f1 fbaf 	bl	8008096 <lwip_htonl>
 8016938:	4603      	mov	r3, r0
 801693a:	6023      	str	r3, [r4, #0]
	*(uint32_t*)(buf + 40) = flip32(originTimestamp->nanosecondsField);
 801693c:	687b      	ldr	r3, [r7, #4]
 801693e:	689a      	ldr	r2, [r3, #8]
 8016940:	68bb      	ldr	r3, [r7, #8]
 8016942:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8016946:	4610      	mov	r0, r2
 8016948:	f7f1 fba5 	bl	8008096 <lwip_htonl>
 801694c:	4603      	mov	r3, r0
 801694e:	6023      	str	r3, [r4, #0]
}
 8016950:	bf00      	nop
 8016952:	3714      	adds	r7, #20
 8016954:	46bd      	mov	sp, r7
 8016956:	bd90      	pop	{r4, r7, pc}

08016958 <msgUnpackSync>:

/* Unpack Sync message */
void msgUnpackSync(const octet_t *buf, MsgSync *sync)
{
 8016958:	b580      	push	{r7, lr}
 801695a:	b082      	sub	sp, #8
 801695c:	af00      	add	r7, sp, #0
 801695e:	6078      	str	r0, [r7, #4]
 8016960:	6039      	str	r1, [r7, #0]
	sync->originTimestamp.secondsField.msb = flip16(*(int16_t*)(buf + 34));
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	3322      	adds	r3, #34	; 0x22
 8016966:	f9b3 3000 	ldrsh.w	r3, [r3]
 801696a:	b29b      	uxth	r3, r3
 801696c:	4618      	mov	r0, r3
 801696e:	f7f1 fb85 	bl	800807c <lwip_htons>
 8016972:	4603      	mov	r3, r0
 8016974:	461a      	mov	r2, r3
 8016976:	683b      	ldr	r3, [r7, #0]
 8016978:	809a      	strh	r2, [r3, #4]
	sync->originTimestamp.secondsField.lsb = flip32(*(uint32_t*)(buf + 36));
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	3324      	adds	r3, #36	; 0x24
 801697e:	681b      	ldr	r3, [r3, #0]
 8016980:	4618      	mov	r0, r3
 8016982:	f7f1 fb88 	bl	8008096 <lwip_htonl>
 8016986:	4602      	mov	r2, r0
 8016988:	683b      	ldr	r3, [r7, #0]
 801698a:	601a      	str	r2, [r3, #0]
	sync->originTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	3328      	adds	r3, #40	; 0x28
 8016990:	681b      	ldr	r3, [r3, #0]
 8016992:	4618      	mov	r0, r3
 8016994:	f7f1 fb7f 	bl	8008096 <lwip_htonl>
 8016998:	4602      	mov	r2, r0
 801699a:	683b      	ldr	r3, [r7, #0]
 801699c:	609a      	str	r2, [r3, #8]
}
 801699e:	bf00      	nop
 80169a0:	3708      	adds	r7, #8
 80169a2:	46bd      	mov	sp, r7
 80169a4:	bd80      	pop	{r7, pc}

080169a6 <msgPackDelayReq>:

/* Pack delayReq message */
void msgPackDelayReq(const PtpClock *ptpClock, octet_t *buf, const Timestamp *originTimestamp)
{
 80169a6:	b590      	push	{r4, r7, lr}
 80169a8:	b085      	sub	sp, #20
 80169aa:	af00      	add	r7, sp, #0
 80169ac:	60f8      	str	r0, [r7, #12]
 80169ae:	60b9      	str	r1, [r7, #8]
 80169b0:	607a      	str	r2, [r7, #4]
	/* Changes in header */
	*(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; //RAZ messageType
 80169b2:	68bb      	ldr	r3, [r7, #8]
 80169b4:	781b      	ldrb	r3, [r3, #0]
 80169b6:	f023 030f 	bic.w	r3, r3, #15
 80169ba:	b2da      	uxtb	r2, r3
 80169bc:	68bb      	ldr	r3, [r7, #8]
 80169be:	701a      	strb	r2, [r3, #0]
	*(char*)(buf + 0) = *(char*)(buf + 0) | DELAY_REQ; //Table 19
 80169c0:	68bb      	ldr	r3, [r7, #8]
 80169c2:	781b      	ldrb	r3, [r3, #0]
 80169c4:	f043 0301 	orr.w	r3, r3, #1
 80169c8:	b2da      	uxtb	r2, r3
 80169ca:	68bb      	ldr	r3, [r7, #8]
 80169cc:	701a      	strb	r2, [r3, #0]
	*(int16_t*)(buf + 2)  = flip16(DELAY_REQ_LENGTH);
 80169ce:	202c      	movs	r0, #44	; 0x2c
 80169d0:	f7f1 fb54 	bl	800807c <lwip_htons>
 80169d4:	4603      	mov	r3, r0
 80169d6:	461a      	mov	r2, r3
 80169d8:	68bb      	ldr	r3, [r7, #8]
 80169da:	3302      	adds	r3, #2
 80169dc:	b212      	sxth	r2, r2
 80169de:	801a      	strh	r2, [r3, #0]
	*(int16_t*)(buf + 30) = flip16(ptpClock->sentDelayReqSequenceId);
 80169e0:	68fb      	ldr	r3, [r7, #12]
 80169e2:	f9b3 3382 	ldrsh.w	r3, [r3, #898]	; 0x382
 80169e6:	b29b      	uxth	r3, r3
 80169e8:	4618      	mov	r0, r3
 80169ea:	f7f1 fb47 	bl	800807c <lwip_htons>
 80169ee:	4603      	mov	r3, r0
 80169f0:	461a      	mov	r2, r3
 80169f2:	68bb      	ldr	r3, [r7, #8]
 80169f4:	331e      	adds	r3, #30
 80169f6:	b212      	sxth	r2, r2
 80169f8:	801a      	strh	r2, [r3, #0]
	*(uint8_t*)(buf + 32) = CTRL_DELAY_REQ; //Table 23
 80169fa:	68bb      	ldr	r3, [r7, #8]
 80169fc:	3320      	adds	r3, #32
 80169fe:	2201      	movs	r2, #1
 8016a00:	701a      	strb	r2, [r3, #0]
	*(int8_t*)(buf + 33) = 0x7F; //Table 24
 8016a02:	68bb      	ldr	r3, [r7, #8]
 8016a04:	3321      	adds	r3, #33	; 0x21
 8016a06:	227f      	movs	r2, #127	; 0x7f
 8016a08:	701a      	strb	r2, [r3, #0]
	memset((buf + 8), 0, 8);
 8016a0a:	68bb      	ldr	r3, [r7, #8]
 8016a0c:	3308      	adds	r3, #8
 8016a0e:	2208      	movs	r2, #8
 8016a10:	2100      	movs	r1, #0
 8016a12:	4618      	mov	r0, r3
 8016a14:	f001 fc7e 	bl	8018314 <memset>

	/* delay_req message */
	*(int16_t*)(buf + 34) = flip16(originTimestamp->secondsField.msb);
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	889b      	ldrh	r3, [r3, #4]
 8016a1c:	4618      	mov	r0, r3
 8016a1e:	f7f1 fb2d 	bl	800807c <lwip_htons>
 8016a22:	4603      	mov	r3, r0
 8016a24:	461a      	mov	r2, r3
 8016a26:	68bb      	ldr	r3, [r7, #8]
 8016a28:	3322      	adds	r3, #34	; 0x22
 8016a2a:	b212      	sxth	r2, r2
 8016a2c:	801a      	strh	r2, [r3, #0]
	*(uint32_t*)(buf + 36) = flip32(originTimestamp->secondsField.lsb);
 8016a2e:	687b      	ldr	r3, [r7, #4]
 8016a30:	681a      	ldr	r2, [r3, #0]
 8016a32:	68bb      	ldr	r3, [r7, #8]
 8016a34:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8016a38:	4610      	mov	r0, r2
 8016a3a:	f7f1 fb2c 	bl	8008096 <lwip_htonl>
 8016a3e:	4603      	mov	r3, r0
 8016a40:	6023      	str	r3, [r4, #0]
	*(uint32_t*)(buf + 40) = flip32(originTimestamp->nanosecondsField);
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	689a      	ldr	r2, [r3, #8]
 8016a46:	68bb      	ldr	r3, [r7, #8]
 8016a48:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8016a4c:	4610      	mov	r0, r2
 8016a4e:	f7f1 fb22 	bl	8008096 <lwip_htonl>
 8016a52:	4603      	mov	r3, r0
 8016a54:	6023      	str	r3, [r4, #0]
}
 8016a56:	bf00      	nop
 8016a58:	3714      	adds	r7, #20
 8016a5a:	46bd      	mov	sp, r7
 8016a5c:	bd90      	pop	{r4, r7, pc}

08016a5e <msgPackFollowUp>:
	delayreq->originTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
}

/* Pack Follow_up message */
void msgPackFollowUp(const PtpClock *ptpClock, octet_t*buf, const Timestamp *preciseOriginTimestamp)
{
 8016a5e:	b590      	push	{r4, r7, lr}
 8016a60:	b085      	sub	sp, #20
 8016a62:	af00      	add	r7, sp, #0
 8016a64:	60f8      	str	r0, [r7, #12]
 8016a66:	60b9      	str	r1, [r7, #8]
 8016a68:	607a      	str	r2, [r7, #4]
	/* Changes in header */
	*(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; //RAZ messageType
 8016a6a:	68bb      	ldr	r3, [r7, #8]
 8016a6c:	781b      	ldrb	r3, [r3, #0]
 8016a6e:	f023 030f 	bic.w	r3, r3, #15
 8016a72:	b2da      	uxtb	r2, r3
 8016a74:	68bb      	ldr	r3, [r7, #8]
 8016a76:	701a      	strb	r2, [r3, #0]
	*(char*)(buf + 0) = *(char*)(buf + 0) | FOLLOW_UP; //Table 19
 8016a78:	68bb      	ldr	r3, [r7, #8]
 8016a7a:	781b      	ldrb	r3, [r3, #0]
 8016a7c:	f043 0308 	orr.w	r3, r3, #8
 8016a80:	b2da      	uxtb	r2, r3
 8016a82:	68bb      	ldr	r3, [r7, #8]
 8016a84:	701a      	strb	r2, [r3, #0]
	*(int16_t*)(buf + 2)  = flip16(FOLLOW_UP_LENGTH);
 8016a86:	202c      	movs	r0, #44	; 0x2c
 8016a88:	f7f1 faf8 	bl	800807c <lwip_htons>
 8016a8c:	4603      	mov	r3, r0
 8016a8e:	461a      	mov	r2, r3
 8016a90:	68bb      	ldr	r3, [r7, #8]
 8016a92:	3302      	adds	r3, #2
 8016a94:	b212      	sxth	r2, r2
 8016a96:	801a      	strh	r2, [r3, #0]
	*(int16_t*)(buf + 30) = flip16(ptpClock->sentSyncSequenceId - 1);//sentSyncSequenceId has already been  incremented in issueSync
 8016a98:	68fb      	ldr	r3, [r7, #12]
 8016a9a:	f9b3 3384 	ldrsh.w	r3, [r3, #900]	; 0x384
 8016a9e:	b29b      	uxth	r3, r3
 8016aa0:	3b01      	subs	r3, #1
 8016aa2:	b29b      	uxth	r3, r3
 8016aa4:	4618      	mov	r0, r3
 8016aa6:	f7f1 fae9 	bl	800807c <lwip_htons>
 8016aaa:	4603      	mov	r3, r0
 8016aac:	461a      	mov	r2, r3
 8016aae:	68bb      	ldr	r3, [r7, #8]
 8016ab0:	331e      	adds	r3, #30
 8016ab2:	b212      	sxth	r2, r2
 8016ab4:	801a      	strh	r2, [r3, #0]
	*(uint8_t*)(buf + 32) = CTRL_FOLLOW_UP; //Table 23
 8016ab6:	68bb      	ldr	r3, [r7, #8]
 8016ab8:	3320      	adds	r3, #32
 8016aba:	2202      	movs	r2, #2
 8016abc:	701a      	strb	r2, [r3, #0]
	*(int8_t*)(buf + 33) = ptpClock->portDS.logSyncInterval;
 8016abe:	68bb      	ldr	r3, [r7, #8]
 8016ac0:	3321      	adds	r3, #33	; 0x21
 8016ac2:	68fa      	ldr	r2, [r7, #12]
 8016ac4:	f992 206e 	ldrsb.w	r2, [r2, #110]	; 0x6e
 8016ac8:	701a      	strb	r2, [r3, #0]

	/* Follow_up message */
	*(int16_t*)(buf + 34) = flip16(preciseOriginTimestamp->secondsField.msb);
 8016aca:	687b      	ldr	r3, [r7, #4]
 8016acc:	889b      	ldrh	r3, [r3, #4]
 8016ace:	4618      	mov	r0, r3
 8016ad0:	f7f1 fad4 	bl	800807c <lwip_htons>
 8016ad4:	4603      	mov	r3, r0
 8016ad6:	461a      	mov	r2, r3
 8016ad8:	68bb      	ldr	r3, [r7, #8]
 8016ada:	3322      	adds	r3, #34	; 0x22
 8016adc:	b212      	sxth	r2, r2
 8016ade:	801a      	strh	r2, [r3, #0]
	*(uint32_t*)(buf + 36) = flip32(preciseOriginTimestamp->secondsField.lsb);
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	681a      	ldr	r2, [r3, #0]
 8016ae4:	68bb      	ldr	r3, [r7, #8]
 8016ae6:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8016aea:	4610      	mov	r0, r2
 8016aec:	f7f1 fad3 	bl	8008096 <lwip_htonl>
 8016af0:	4603      	mov	r3, r0
 8016af2:	6023      	str	r3, [r4, #0]
	*(uint32_t*)(buf + 40) = flip32(preciseOriginTimestamp->nanosecondsField);
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	689a      	ldr	r2, [r3, #8]
 8016af8:	68bb      	ldr	r3, [r7, #8]
 8016afa:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8016afe:	4610      	mov	r0, r2
 8016b00:	f7f1 fac9 	bl	8008096 <lwip_htonl>
 8016b04:	4603      	mov	r3, r0
 8016b06:	6023      	str	r3, [r4, #0]
}
 8016b08:	bf00      	nop
 8016b0a:	3714      	adds	r7, #20
 8016b0c:	46bd      	mov	sp, r7
 8016b0e:	bd90      	pop	{r4, r7, pc}

08016b10 <msgUnpackFollowUp>:

/* Unpack Follow_up message */
void msgUnpackFollowUp(const octet_t *buf, MsgFollowUp *follow)
{
 8016b10:	b580      	push	{r7, lr}
 8016b12:	b082      	sub	sp, #8
 8016b14:	af00      	add	r7, sp, #0
 8016b16:	6078      	str	r0, [r7, #4]
 8016b18:	6039      	str	r1, [r7, #0]
	follow->preciseOriginTimestamp.secondsField.msb = flip16(*(int16_t*)(buf  + 34));
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	3322      	adds	r3, #34	; 0x22
 8016b1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b22:	b29b      	uxth	r3, r3
 8016b24:	4618      	mov	r0, r3
 8016b26:	f7f1 faa9 	bl	800807c <lwip_htons>
 8016b2a:	4603      	mov	r3, r0
 8016b2c:	461a      	mov	r2, r3
 8016b2e:	683b      	ldr	r3, [r7, #0]
 8016b30:	809a      	strh	r2, [r3, #4]
	follow->preciseOriginTimestamp.secondsField.lsb = flip32(*(uint32_t*)(buf + 36));
 8016b32:	687b      	ldr	r3, [r7, #4]
 8016b34:	3324      	adds	r3, #36	; 0x24
 8016b36:	681b      	ldr	r3, [r3, #0]
 8016b38:	4618      	mov	r0, r3
 8016b3a:	f7f1 faac 	bl	8008096 <lwip_htonl>
 8016b3e:	4602      	mov	r2, r0
 8016b40:	683b      	ldr	r3, [r7, #0]
 8016b42:	601a      	str	r2, [r3, #0]
	follow->preciseOriginTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	3328      	adds	r3, #40	; 0x28
 8016b48:	681b      	ldr	r3, [r3, #0]
 8016b4a:	4618      	mov	r0, r3
 8016b4c:	f7f1 faa3 	bl	8008096 <lwip_htonl>
 8016b50:	4602      	mov	r2, r0
 8016b52:	683b      	ldr	r3, [r7, #0]
 8016b54:	609a      	str	r2, [r3, #8]
}
 8016b56:	bf00      	nop
 8016b58:	3708      	adds	r7, #8
 8016b5a:	46bd      	mov	sp, r7
 8016b5c:	bd80      	pop	{r7, pc}

08016b5e <msgPackDelayResp>:

/* Pack delayResp message */
void msgPackDelayResp(const PtpClock *ptpClock, octet_t *buf, const MsgHeader *header, const Timestamp *receiveTimestamp)
{
 8016b5e:	b590      	push	{r4, r7, lr}
 8016b60:	b085      	sub	sp, #20
 8016b62:	af00      	add	r7, sp, #0
 8016b64:	60f8      	str	r0, [r7, #12]
 8016b66:	60b9      	str	r1, [r7, #8]
 8016b68:	607a      	str	r2, [r7, #4]
 8016b6a:	603b      	str	r3, [r7, #0]
	/* Changes in header */
	*(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; //RAZ messageType
 8016b6c:	68bb      	ldr	r3, [r7, #8]
 8016b6e:	781b      	ldrb	r3, [r3, #0]
 8016b70:	f023 030f 	bic.w	r3, r3, #15
 8016b74:	b2da      	uxtb	r2, r3
 8016b76:	68bb      	ldr	r3, [r7, #8]
 8016b78:	701a      	strb	r2, [r3, #0]
	*(char*)(buf + 0) = *(char*)(buf + 0) | DELAY_RESP; //Table 19
 8016b7a:	68bb      	ldr	r3, [r7, #8]
 8016b7c:	781b      	ldrb	r3, [r3, #0]
 8016b7e:	f043 0309 	orr.w	r3, r3, #9
 8016b82:	b2da      	uxtb	r2, r3
 8016b84:	68bb      	ldr	r3, [r7, #8]
 8016b86:	701a      	strb	r2, [r3, #0]
	*(int16_t*)(buf + 2)  = flip16(DELAY_RESP_LENGTH);
 8016b88:	2036      	movs	r0, #54	; 0x36
 8016b8a:	f7f1 fa77 	bl	800807c <lwip_htons>
 8016b8e:	4603      	mov	r3, r0
 8016b90:	461a      	mov	r2, r3
 8016b92:	68bb      	ldr	r3, [r7, #8]
 8016b94:	3302      	adds	r3, #2
 8016b96:	b212      	sxth	r2, r2
 8016b98:	801a      	strh	r2, [r3, #0]
	/* *(uint8_t*)(buf+4) = header->domainNumber; */ /* TODO: Why? */
	memset((buf + 8), 0, 8);
 8016b9a:	68bb      	ldr	r3, [r7, #8]
 8016b9c:	3308      	adds	r3, #8
 8016b9e:	2208      	movs	r2, #8
 8016ba0:	2100      	movs	r1, #0
 8016ba2:	4618      	mov	r0, r3
 8016ba4:	f001 fbb6 	bl	8018314 <memset>

	/* Copy correctionField of  delayReqMessage */
	*(int32_t*)(buf + 8) = flip32(header->correctionfield >> 32);
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 8016bae:	f04f 0300 	mov.w	r3, #0
 8016bb2:	f04f 0400 	mov.w	r4, #0
 8016bb6:	0013      	movs	r3, r2
 8016bb8:	17d4      	asrs	r4, r2, #31
 8016bba:	4618      	mov	r0, r3
 8016bbc:	f7f1 fa6b 	bl	8008096 <lwip_htonl>
 8016bc0:	4602      	mov	r2, r0
 8016bc2:	68bb      	ldr	r3, [r7, #8]
 8016bc4:	3308      	adds	r3, #8
 8016bc6:	601a      	str	r2, [r3, #0]
	*(int32_t*)(buf + 12) = flip32((int32_t)header->correctionfield);
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	f103 0410 	add.w	r4, r3, #16
 8016bce:	e9d4 3400 	ldrd	r3, r4, [r4]
 8016bd2:	4618      	mov	r0, r3
 8016bd4:	f7f1 fa5f 	bl	8008096 <lwip_htonl>
 8016bd8:	4602      	mov	r2, r0
 8016bda:	68bb      	ldr	r3, [r7, #8]
 8016bdc:	330c      	adds	r3, #12
 8016bde:	601a      	str	r2, [r3, #0]
	*(int16_t*)(buf + 30) = flip16(header->sequenceId);
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8016be6:	b29b      	uxth	r3, r3
 8016be8:	4618      	mov	r0, r3
 8016bea:	f7f1 fa47 	bl	800807c <lwip_htons>
 8016bee:	4603      	mov	r3, r0
 8016bf0:	461a      	mov	r2, r3
 8016bf2:	68bb      	ldr	r3, [r7, #8]
 8016bf4:	331e      	adds	r3, #30
 8016bf6:	b212      	sxth	r2, r2
 8016bf8:	801a      	strh	r2, [r3, #0]
	*(uint8_t*)(buf + 32) = CTRL_DELAY_RESP; //Table 23
 8016bfa:	68bb      	ldr	r3, [r7, #8]
 8016bfc:	3320      	adds	r3, #32
 8016bfe:	2203      	movs	r2, #3
 8016c00:	701a      	strb	r2, [r3, #0]
	*(int8_t*)(buf + 33) = ptpClock->portDS.logMinDelayReqInterval; //Table 24
 8016c02:	68bb      	ldr	r3, [r7, #8]
 8016c04:	3321      	adds	r3, #33	; 0x21
 8016c06:	68fa      	ldr	r2, [r7, #12]
 8016c08:	f992 2063 	ldrsb.w	r2, [r2, #99]	; 0x63
 8016c0c:	701a      	strb	r2, [r3, #0]

	/* delay_resp message */
	*(int16_t*)(buf + 34) = flip16(receiveTimestamp->secondsField.msb);
 8016c0e:	683b      	ldr	r3, [r7, #0]
 8016c10:	889b      	ldrh	r3, [r3, #4]
 8016c12:	4618      	mov	r0, r3
 8016c14:	f7f1 fa32 	bl	800807c <lwip_htons>
 8016c18:	4603      	mov	r3, r0
 8016c1a:	461a      	mov	r2, r3
 8016c1c:	68bb      	ldr	r3, [r7, #8]
 8016c1e:	3322      	adds	r3, #34	; 0x22
 8016c20:	b212      	sxth	r2, r2
 8016c22:	801a      	strh	r2, [r3, #0]
	*(uint32_t*)(buf + 36) = flip32(receiveTimestamp->secondsField.lsb);
 8016c24:	683b      	ldr	r3, [r7, #0]
 8016c26:	681a      	ldr	r2, [r3, #0]
 8016c28:	68bb      	ldr	r3, [r7, #8]
 8016c2a:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8016c2e:	4610      	mov	r0, r2
 8016c30:	f7f1 fa31 	bl	8008096 <lwip_htonl>
 8016c34:	4603      	mov	r3, r0
 8016c36:	6023      	str	r3, [r4, #0]
	*(uint32_t*)(buf + 40) = flip32(receiveTimestamp->nanosecondsField);
 8016c38:	683b      	ldr	r3, [r7, #0]
 8016c3a:	689a      	ldr	r2, [r3, #8]
 8016c3c:	68bb      	ldr	r3, [r7, #8]
 8016c3e:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8016c42:	4610      	mov	r0, r2
 8016c44:	f7f1 fa27 	bl	8008096 <lwip_htonl>
 8016c48:	4603      	mov	r3, r0
 8016c4a:	6023      	str	r3, [r4, #0]
	memcpy((buf + 44), header->sourcePortIdentity.clockIdentity, CLOCK_IDENTITY_LENGTH);
 8016c4c:	68bb      	ldr	r3, [r7, #8]
 8016c4e:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8016c52:	687b      	ldr	r3, [r7, #4]
 8016c54:	3318      	adds	r3, #24
 8016c56:	2208      	movs	r2, #8
 8016c58:	4619      	mov	r1, r3
 8016c5a:	f001 fb50 	bl	80182fe <memcpy>
	*(int16_t*)(buf + 52) = flip16(header->sourcePortIdentity.portNumber);
 8016c5e:	687b      	ldr	r3, [r7, #4]
 8016c60:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8016c64:	b29b      	uxth	r3, r3
 8016c66:	4618      	mov	r0, r3
 8016c68:	f7f1 fa08 	bl	800807c <lwip_htons>
 8016c6c:	4603      	mov	r3, r0
 8016c6e:	461a      	mov	r2, r3
 8016c70:	68bb      	ldr	r3, [r7, #8]
 8016c72:	3334      	adds	r3, #52	; 0x34
 8016c74:	b212      	sxth	r2, r2
 8016c76:	801a      	strh	r2, [r3, #0]
}
 8016c78:	bf00      	nop
 8016c7a:	3714      	adds	r7, #20
 8016c7c:	46bd      	mov	sp, r7
 8016c7e:	bd90      	pop	{r4, r7, pc}

08016c80 <msgUnpackDelayResp>:

/* Unpack delayResp message */
void msgUnpackDelayResp(const octet_t *buf, MsgDelayResp *resp)
{
 8016c80:	b580      	push	{r7, lr}
 8016c82:	b082      	sub	sp, #8
 8016c84:	af00      	add	r7, sp, #0
 8016c86:	6078      	str	r0, [r7, #4]
 8016c88:	6039      	str	r1, [r7, #0]
	resp->receiveTimestamp.secondsField.msb = flip16(*(int16_t*)(buf  + 34));
 8016c8a:	687b      	ldr	r3, [r7, #4]
 8016c8c:	3322      	adds	r3, #34	; 0x22
 8016c8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c92:	b29b      	uxth	r3, r3
 8016c94:	4618      	mov	r0, r3
 8016c96:	f7f1 f9f1 	bl	800807c <lwip_htons>
 8016c9a:	4603      	mov	r3, r0
 8016c9c:	461a      	mov	r2, r3
 8016c9e:	683b      	ldr	r3, [r7, #0]
 8016ca0:	809a      	strh	r2, [r3, #4]
	resp->receiveTimestamp.secondsField.lsb = flip32(*(uint32_t*)(buf + 36));
 8016ca2:	687b      	ldr	r3, [r7, #4]
 8016ca4:	3324      	adds	r3, #36	; 0x24
 8016ca6:	681b      	ldr	r3, [r3, #0]
 8016ca8:	4618      	mov	r0, r3
 8016caa:	f7f1 f9f4 	bl	8008096 <lwip_htonl>
 8016cae:	4602      	mov	r2, r0
 8016cb0:	683b      	ldr	r3, [r7, #0]
 8016cb2:	601a      	str	r2, [r3, #0]
	resp->receiveTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	3328      	adds	r3, #40	; 0x28
 8016cb8:	681b      	ldr	r3, [r3, #0]
 8016cba:	4618      	mov	r0, r3
 8016cbc:	f7f1 f9eb 	bl	8008096 <lwip_htonl>
 8016cc0:	4602      	mov	r2, r0
 8016cc2:	683b      	ldr	r3, [r7, #0]
 8016cc4:	609a      	str	r2, [r3, #8]
	memcpy(resp->requestingPortIdentity.clockIdentity, (buf + 44), CLOCK_IDENTITY_LENGTH);
 8016cc6:	683b      	ldr	r3, [r7, #0]
 8016cc8:	f103 000c 	add.w	r0, r3, #12
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	332c      	adds	r3, #44	; 0x2c
 8016cd0:	2208      	movs	r2, #8
 8016cd2:	4619      	mov	r1, r3
 8016cd4:	f001 fb13 	bl	80182fe <memcpy>
	resp->requestingPortIdentity.portNumber = flip16(*(int16_t*)(buf  + 52));
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	3334      	adds	r3, #52	; 0x34
 8016cdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016ce0:	b29b      	uxth	r3, r3
 8016ce2:	4618      	mov	r0, r3
 8016ce4:	f7f1 f9ca 	bl	800807c <lwip_htons>
 8016ce8:	4603      	mov	r3, r0
 8016cea:	b21a      	sxth	r2, r3
 8016cec:	683b      	ldr	r3, [r7, #0]
 8016cee:	829a      	strh	r2, [r3, #20]
}
 8016cf0:	bf00      	nop
 8016cf2:	3708      	adds	r7, #8
 8016cf4:	46bd      	mov	sp, r7
 8016cf6:	bd80      	pop	{r7, pc}

08016cf8 <msgPackPDelayReq>:

/* Pack PdelayReq message */
void msgPackPDelayReq(const PtpClock *ptpClock, octet_t *buf, const Timestamp *originTimestamp)
{
 8016cf8:	b590      	push	{r4, r7, lr}
 8016cfa:	b085      	sub	sp, #20
 8016cfc:	af00      	add	r7, sp, #0
 8016cfe:	60f8      	str	r0, [r7, #12]
 8016d00:	60b9      	str	r1, [r7, #8]
 8016d02:	607a      	str	r2, [r7, #4]
	/* Changes in header */
	*(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; //RAZ messageType
 8016d04:	68bb      	ldr	r3, [r7, #8]
 8016d06:	781b      	ldrb	r3, [r3, #0]
 8016d08:	f023 030f 	bic.w	r3, r3, #15
 8016d0c:	b2da      	uxtb	r2, r3
 8016d0e:	68bb      	ldr	r3, [r7, #8]
 8016d10:	701a      	strb	r2, [r3, #0]
	*(char*)(buf + 0) = *(char*)(buf + 0) | PDELAY_REQ; //Table 19
 8016d12:	68bb      	ldr	r3, [r7, #8]
 8016d14:	781b      	ldrb	r3, [r3, #0]
 8016d16:	f043 0302 	orr.w	r3, r3, #2
 8016d1a:	b2da      	uxtb	r2, r3
 8016d1c:	68bb      	ldr	r3, [r7, #8]
 8016d1e:	701a      	strb	r2, [r3, #0]
	*(int16_t*)(buf + 2)  = flip16(PDELAY_REQ_LENGTH);
 8016d20:	2036      	movs	r0, #54	; 0x36
 8016d22:	f7f1 f9ab 	bl	800807c <lwip_htons>
 8016d26:	4603      	mov	r3, r0
 8016d28:	461a      	mov	r2, r3
 8016d2a:	68bb      	ldr	r3, [r7, #8]
 8016d2c:	3302      	adds	r3, #2
 8016d2e:	b212      	sxth	r2, r2
 8016d30:	801a      	strh	r2, [r3, #0]
	*(int16_t*)(buf + 30) = flip16(ptpClock->sentPDelayReqSequenceId);
 8016d32:	68fb      	ldr	r3, [r7, #12]
 8016d34:	f9b3 3380 	ldrsh.w	r3, [r3, #896]	; 0x380
 8016d38:	b29b      	uxth	r3, r3
 8016d3a:	4618      	mov	r0, r3
 8016d3c:	f7f1 f99e 	bl	800807c <lwip_htons>
 8016d40:	4603      	mov	r3, r0
 8016d42:	461a      	mov	r2, r3
 8016d44:	68bb      	ldr	r3, [r7, #8]
 8016d46:	331e      	adds	r3, #30
 8016d48:	b212      	sxth	r2, r2
 8016d4a:	801a      	strh	r2, [r3, #0]
	*(uint8_t*)(buf + 32) = CTRL_OTHER; //Table 23
 8016d4c:	68bb      	ldr	r3, [r7, #8]
 8016d4e:	3320      	adds	r3, #32
 8016d50:	2205      	movs	r2, #5
 8016d52:	701a      	strb	r2, [r3, #0]
	*(int8_t*)(buf + 33) = 0x7F; //Table 24
 8016d54:	68bb      	ldr	r3, [r7, #8]
 8016d56:	3321      	adds	r3, #33	; 0x21
 8016d58:	227f      	movs	r2, #127	; 0x7f
 8016d5a:	701a      	strb	r2, [r3, #0]
	memset((buf + 8), 0, 8);
 8016d5c:	68bb      	ldr	r3, [r7, #8]
 8016d5e:	3308      	adds	r3, #8
 8016d60:	2208      	movs	r2, #8
 8016d62:	2100      	movs	r1, #0
 8016d64:	4618      	mov	r0, r3
 8016d66:	f001 fad5 	bl	8018314 <memset>

	/* Pdelay_req message */
	*(int16_t*)(buf + 34) = flip16(originTimestamp->secondsField.msb);
 8016d6a:	687b      	ldr	r3, [r7, #4]
 8016d6c:	889b      	ldrh	r3, [r3, #4]
 8016d6e:	4618      	mov	r0, r3
 8016d70:	f7f1 f984 	bl	800807c <lwip_htons>
 8016d74:	4603      	mov	r3, r0
 8016d76:	461a      	mov	r2, r3
 8016d78:	68bb      	ldr	r3, [r7, #8]
 8016d7a:	3322      	adds	r3, #34	; 0x22
 8016d7c:	b212      	sxth	r2, r2
 8016d7e:	801a      	strh	r2, [r3, #0]
	*(uint32_t*)(buf + 36) = flip32(originTimestamp->secondsField.lsb);
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	681a      	ldr	r2, [r3, #0]
 8016d84:	68bb      	ldr	r3, [r7, #8]
 8016d86:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8016d8a:	4610      	mov	r0, r2
 8016d8c:	f7f1 f983 	bl	8008096 <lwip_htonl>
 8016d90:	4603      	mov	r3, r0
 8016d92:	6023      	str	r3, [r4, #0]
	*(uint32_t*)(buf + 40) = flip32(originTimestamp->nanosecondsField);
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	689a      	ldr	r2, [r3, #8]
 8016d98:	68bb      	ldr	r3, [r7, #8]
 8016d9a:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8016d9e:	4610      	mov	r0, r2
 8016da0:	f7f1 f979 	bl	8008096 <lwip_htonl>
 8016da4:	4603      	mov	r3, r0
 8016da6:	6023      	str	r3, [r4, #0]

	memset((buf + 44), 0, 10); // RAZ reserved octets
 8016da8:	68bb      	ldr	r3, [r7, #8]
 8016daa:	332c      	adds	r3, #44	; 0x2c
 8016dac:	220a      	movs	r2, #10
 8016dae:	2100      	movs	r1, #0
 8016db0:	4618      	mov	r0, r3
 8016db2:	f001 faaf 	bl	8018314 <memset>
}
 8016db6:	bf00      	nop
 8016db8:	3714      	adds	r7, #20
 8016dba:	46bd      	mov	sp, r7
 8016dbc:	bd90      	pop	{r4, r7, pc}

08016dbe <msgPackPDelayResp>:
	pdelayreq->originTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
}

/* Pack PdelayResp message */
void msgPackPDelayResp(octet_t *buf, const MsgHeader *header, const Timestamp *requestReceiptTimestamp)
{
 8016dbe:	b590      	push	{r4, r7, lr}
 8016dc0:	b085      	sub	sp, #20
 8016dc2:	af00      	add	r7, sp, #0
 8016dc4:	60f8      	str	r0, [r7, #12]
 8016dc6:	60b9      	str	r1, [r7, #8]
 8016dc8:	607a      	str	r2, [r7, #4]
	/* Changes in header */
	*(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; //RAZ messageType
 8016dca:	68fb      	ldr	r3, [r7, #12]
 8016dcc:	781b      	ldrb	r3, [r3, #0]
 8016dce:	f023 030f 	bic.w	r3, r3, #15
 8016dd2:	b2da      	uxtb	r2, r3
 8016dd4:	68fb      	ldr	r3, [r7, #12]
 8016dd6:	701a      	strb	r2, [r3, #0]
	*(char*)(buf + 0) = *(char*)(buf + 0) | PDELAY_RESP; //Table 19
 8016dd8:	68fb      	ldr	r3, [r7, #12]
 8016dda:	781b      	ldrb	r3, [r3, #0]
 8016ddc:	f043 0303 	orr.w	r3, r3, #3
 8016de0:	b2da      	uxtb	r2, r3
 8016de2:	68fb      	ldr	r3, [r7, #12]
 8016de4:	701a      	strb	r2, [r3, #0]
	*(int16_t*)(buf + 2)  = flip16(PDELAY_RESP_LENGTH);
 8016de6:	2036      	movs	r0, #54	; 0x36
 8016de8:	f7f1 f948 	bl	800807c <lwip_htons>
 8016dec:	4603      	mov	r3, r0
 8016dee:	461a      	mov	r2, r3
 8016df0:	68fb      	ldr	r3, [r7, #12]
 8016df2:	3302      	adds	r3, #2
 8016df4:	b212      	sxth	r2, r2
 8016df6:	801a      	strh	r2, [r3, #0]
	/* *(uint8_t*)(buf+4) = header->domainNumber; */ /* TODO: Why? */
	memset((buf + 8), 0, 8);
 8016df8:	68fb      	ldr	r3, [r7, #12]
 8016dfa:	3308      	adds	r3, #8
 8016dfc:	2208      	movs	r2, #8
 8016dfe:	2100      	movs	r1, #0
 8016e00:	4618      	mov	r0, r3
 8016e02:	f001 fa87 	bl	8018314 <memset>
	*(int16_t*)(buf + 30) = flip16(header->sequenceId);
 8016e06:	68bb      	ldr	r3, [r7, #8]
 8016e08:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8016e0c:	b29b      	uxth	r3, r3
 8016e0e:	4618      	mov	r0, r3
 8016e10:	f7f1 f934 	bl	800807c <lwip_htons>
 8016e14:	4603      	mov	r3, r0
 8016e16:	461a      	mov	r2, r3
 8016e18:	68fb      	ldr	r3, [r7, #12]
 8016e1a:	331e      	adds	r3, #30
 8016e1c:	b212      	sxth	r2, r2
 8016e1e:	801a      	strh	r2, [r3, #0]
	*(uint8_t*)(buf + 32) = CTRL_OTHER; //Table 23
 8016e20:	68fb      	ldr	r3, [r7, #12]
 8016e22:	3320      	adds	r3, #32
 8016e24:	2205      	movs	r2, #5
 8016e26:	701a      	strb	r2, [r3, #0]
	*(int8_t*)(buf + 33) = 0x7F; //Table 24
 8016e28:	68fb      	ldr	r3, [r7, #12]
 8016e2a:	3321      	adds	r3, #33	; 0x21
 8016e2c:	227f      	movs	r2, #127	; 0x7f
 8016e2e:	701a      	strb	r2, [r3, #0]

	/* Pdelay_resp message */
	*(int16_t*)(buf + 34) = flip16(requestReceiptTimestamp->secondsField.msb);
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	889b      	ldrh	r3, [r3, #4]
 8016e34:	4618      	mov	r0, r3
 8016e36:	f7f1 f921 	bl	800807c <lwip_htons>
 8016e3a:	4603      	mov	r3, r0
 8016e3c:	461a      	mov	r2, r3
 8016e3e:	68fb      	ldr	r3, [r7, #12]
 8016e40:	3322      	adds	r3, #34	; 0x22
 8016e42:	b212      	sxth	r2, r2
 8016e44:	801a      	strh	r2, [r3, #0]
	*(uint32_t*)(buf + 36) = flip32(requestReceiptTimestamp->secondsField.lsb);
 8016e46:	687b      	ldr	r3, [r7, #4]
 8016e48:	681a      	ldr	r2, [r3, #0]
 8016e4a:	68fb      	ldr	r3, [r7, #12]
 8016e4c:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8016e50:	4610      	mov	r0, r2
 8016e52:	f7f1 f920 	bl	8008096 <lwip_htonl>
 8016e56:	4603      	mov	r3, r0
 8016e58:	6023      	str	r3, [r4, #0]
	*(uint32_t*)(buf + 40) = flip32(requestReceiptTimestamp->nanosecondsField);
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	689a      	ldr	r2, [r3, #8]
 8016e5e:	68fb      	ldr	r3, [r7, #12]
 8016e60:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8016e64:	4610      	mov	r0, r2
 8016e66:	f7f1 f916 	bl	8008096 <lwip_htonl>
 8016e6a:	4603      	mov	r3, r0
 8016e6c:	6023      	str	r3, [r4, #0]
	memcpy((buf + 44), header->sourcePortIdentity.clockIdentity, CLOCK_IDENTITY_LENGTH);
 8016e6e:	68fb      	ldr	r3, [r7, #12]
 8016e70:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8016e74:	68bb      	ldr	r3, [r7, #8]
 8016e76:	3318      	adds	r3, #24
 8016e78:	2208      	movs	r2, #8
 8016e7a:	4619      	mov	r1, r3
 8016e7c:	f001 fa3f 	bl	80182fe <memcpy>
	*(int16_t*)(buf + 52) = flip16(header->sourcePortIdentity.portNumber);
 8016e80:	68bb      	ldr	r3, [r7, #8]
 8016e82:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8016e86:	b29b      	uxth	r3, r3
 8016e88:	4618      	mov	r0, r3
 8016e8a:	f7f1 f8f7 	bl	800807c <lwip_htons>
 8016e8e:	4603      	mov	r3, r0
 8016e90:	461a      	mov	r2, r3
 8016e92:	68fb      	ldr	r3, [r7, #12]
 8016e94:	3334      	adds	r3, #52	; 0x34
 8016e96:	b212      	sxth	r2, r2
 8016e98:	801a      	strh	r2, [r3, #0]

}
 8016e9a:	bf00      	nop
 8016e9c:	3714      	adds	r7, #20
 8016e9e:	46bd      	mov	sp, r7
 8016ea0:	bd90      	pop	{r4, r7, pc}

08016ea2 <msgUnpackPDelayResp>:

/* Unpack PdelayResp message */
void msgUnpackPDelayResp(const octet_t *buf, MsgPDelayResp *presp)
{
 8016ea2:	b580      	push	{r7, lr}
 8016ea4:	b082      	sub	sp, #8
 8016ea6:	af00      	add	r7, sp, #0
 8016ea8:	6078      	str	r0, [r7, #4]
 8016eaa:	6039      	str	r1, [r7, #0]
	presp->requestReceiptTimestamp.secondsField.msb = flip16(*(int16_t*)(buf  + 34));
 8016eac:	687b      	ldr	r3, [r7, #4]
 8016eae:	3322      	adds	r3, #34	; 0x22
 8016eb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016eb4:	b29b      	uxth	r3, r3
 8016eb6:	4618      	mov	r0, r3
 8016eb8:	f7f1 f8e0 	bl	800807c <lwip_htons>
 8016ebc:	4603      	mov	r3, r0
 8016ebe:	461a      	mov	r2, r3
 8016ec0:	683b      	ldr	r3, [r7, #0]
 8016ec2:	809a      	strh	r2, [r3, #4]
	presp->requestReceiptTimestamp.secondsField.lsb = flip32(*(uint32_t*)(buf + 36));
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	3324      	adds	r3, #36	; 0x24
 8016ec8:	681b      	ldr	r3, [r3, #0]
 8016eca:	4618      	mov	r0, r3
 8016ecc:	f7f1 f8e3 	bl	8008096 <lwip_htonl>
 8016ed0:	4602      	mov	r2, r0
 8016ed2:	683b      	ldr	r3, [r7, #0]
 8016ed4:	601a      	str	r2, [r3, #0]
	presp->requestReceiptTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	3328      	adds	r3, #40	; 0x28
 8016eda:	681b      	ldr	r3, [r3, #0]
 8016edc:	4618      	mov	r0, r3
 8016ede:	f7f1 f8da 	bl	8008096 <lwip_htonl>
 8016ee2:	4602      	mov	r2, r0
 8016ee4:	683b      	ldr	r3, [r7, #0]
 8016ee6:	609a      	str	r2, [r3, #8]
	memcpy(presp->requestingPortIdentity.clockIdentity, (buf + 44), CLOCK_IDENTITY_LENGTH);
 8016ee8:	683b      	ldr	r3, [r7, #0]
 8016eea:	f103 000c 	add.w	r0, r3, #12
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	332c      	adds	r3, #44	; 0x2c
 8016ef2:	2208      	movs	r2, #8
 8016ef4:	4619      	mov	r1, r3
 8016ef6:	f001 fa02 	bl	80182fe <memcpy>
	presp->requestingPortIdentity.portNumber = flip16(*(int16_t*)(buf + 52));
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	3334      	adds	r3, #52	; 0x34
 8016efe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016f02:	b29b      	uxth	r3, r3
 8016f04:	4618      	mov	r0, r3
 8016f06:	f7f1 f8b9 	bl	800807c <lwip_htons>
 8016f0a:	4603      	mov	r3, r0
 8016f0c:	b21a      	sxth	r2, r3
 8016f0e:	683b      	ldr	r3, [r7, #0]
 8016f10:	829a      	strh	r2, [r3, #20]
}
 8016f12:	bf00      	nop
 8016f14:	3708      	adds	r7, #8
 8016f16:	46bd      	mov	sp, r7
 8016f18:	bd80      	pop	{r7, pc}

08016f1a <msgPackPDelayRespFollowUp>:

/* Pack PdelayRespfollowup message */
void msgPackPDelayRespFollowUp(octet_t *buf, const MsgHeader *header, const Timestamp *responseOriginTimestamp)
{
 8016f1a:	b590      	push	{r4, r7, lr}
 8016f1c:	b085      	sub	sp, #20
 8016f1e:	af00      	add	r7, sp, #0
 8016f20:	60f8      	str	r0, [r7, #12]
 8016f22:	60b9      	str	r1, [r7, #8]
 8016f24:	607a      	str	r2, [r7, #4]
	/* Changes in header */
	*(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; //RAZ messageType
 8016f26:	68fb      	ldr	r3, [r7, #12]
 8016f28:	781b      	ldrb	r3, [r3, #0]
 8016f2a:	f023 030f 	bic.w	r3, r3, #15
 8016f2e:	b2da      	uxtb	r2, r3
 8016f30:	68fb      	ldr	r3, [r7, #12]
 8016f32:	701a      	strb	r2, [r3, #0]
	*(char*)(buf + 0) = *(char*)(buf + 0) | PDELAY_RESP_FOLLOW_UP; //Table 19
 8016f34:	68fb      	ldr	r3, [r7, #12]
 8016f36:	781b      	ldrb	r3, [r3, #0]
 8016f38:	f043 030a 	orr.w	r3, r3, #10
 8016f3c:	b2da      	uxtb	r2, r3
 8016f3e:	68fb      	ldr	r3, [r7, #12]
 8016f40:	701a      	strb	r2, [r3, #0]
	*(int16_t*)(buf + 2)  = flip16(PDELAY_RESP_FOLLOW_UP_LENGTH);
 8016f42:	2036      	movs	r0, #54	; 0x36
 8016f44:	f7f1 f89a 	bl	800807c <lwip_htons>
 8016f48:	4603      	mov	r3, r0
 8016f4a:	461a      	mov	r2, r3
 8016f4c:	68fb      	ldr	r3, [r7, #12]
 8016f4e:	3302      	adds	r3, #2
 8016f50:	b212      	sxth	r2, r2
 8016f52:	801a      	strh	r2, [r3, #0]
	*(int16_t*)(buf + 30) = flip16(header->sequenceId);
 8016f54:	68bb      	ldr	r3, [r7, #8]
 8016f56:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8016f5a:	b29b      	uxth	r3, r3
 8016f5c:	4618      	mov	r0, r3
 8016f5e:	f7f1 f88d 	bl	800807c <lwip_htons>
 8016f62:	4603      	mov	r3, r0
 8016f64:	461a      	mov	r2, r3
 8016f66:	68fb      	ldr	r3, [r7, #12]
 8016f68:	331e      	adds	r3, #30
 8016f6a:	b212      	sxth	r2, r2
 8016f6c:	801a      	strh	r2, [r3, #0]
	*(uint8_t*)(buf + 32) = CTRL_OTHER; //Table 23
 8016f6e:	68fb      	ldr	r3, [r7, #12]
 8016f70:	3320      	adds	r3, #32
 8016f72:	2205      	movs	r2, #5
 8016f74:	701a      	strb	r2, [r3, #0]
	*(int8_t*)(buf + 33) = 0x7F; //Table 24
 8016f76:	68fb      	ldr	r3, [r7, #12]
 8016f78:	3321      	adds	r3, #33	; 0x21
 8016f7a:	227f      	movs	r2, #127	; 0x7f
 8016f7c:	701a      	strb	r2, [r3, #0]

	/* Copy correctionField of  PdelayReqMessage */
	*(int32_t*)(buf + 8) = flip32(header->correctionfield >> 32);
 8016f7e:	68bb      	ldr	r3, [r7, #8]
 8016f80:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 8016f84:	f04f 0300 	mov.w	r3, #0
 8016f88:	f04f 0400 	mov.w	r4, #0
 8016f8c:	0013      	movs	r3, r2
 8016f8e:	17d4      	asrs	r4, r2, #31
 8016f90:	4618      	mov	r0, r3
 8016f92:	f7f1 f880 	bl	8008096 <lwip_htonl>
 8016f96:	4602      	mov	r2, r0
 8016f98:	68fb      	ldr	r3, [r7, #12]
 8016f9a:	3308      	adds	r3, #8
 8016f9c:	601a      	str	r2, [r3, #0]
	*(int32_t*)(buf + 12) = flip32((int32_t)header->correctionfield);
 8016f9e:	68bb      	ldr	r3, [r7, #8]
 8016fa0:	f103 0410 	add.w	r4, r3, #16
 8016fa4:	e9d4 3400 	ldrd	r3, r4, [r4]
 8016fa8:	4618      	mov	r0, r3
 8016faa:	f7f1 f874 	bl	8008096 <lwip_htonl>
 8016fae:	4602      	mov	r2, r0
 8016fb0:	68fb      	ldr	r3, [r7, #12]
 8016fb2:	330c      	adds	r3, #12
 8016fb4:	601a      	str	r2, [r3, #0]

	/* Pdelay_resp_follow_up message */
	*(int16_t*)(buf + 34) = flip16(responseOriginTimestamp->secondsField.msb);
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	889b      	ldrh	r3, [r3, #4]
 8016fba:	4618      	mov	r0, r3
 8016fbc:	f7f1 f85e 	bl	800807c <lwip_htons>
 8016fc0:	4603      	mov	r3, r0
 8016fc2:	461a      	mov	r2, r3
 8016fc4:	68fb      	ldr	r3, [r7, #12]
 8016fc6:	3322      	adds	r3, #34	; 0x22
 8016fc8:	b212      	sxth	r2, r2
 8016fca:	801a      	strh	r2, [r3, #0]
	*(uint32_t*)(buf + 36) = flip32(responseOriginTimestamp->secondsField.lsb);
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	681a      	ldr	r2, [r3, #0]
 8016fd0:	68fb      	ldr	r3, [r7, #12]
 8016fd2:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8016fd6:	4610      	mov	r0, r2
 8016fd8:	f7f1 f85d 	bl	8008096 <lwip_htonl>
 8016fdc:	4603      	mov	r3, r0
 8016fde:	6023      	str	r3, [r4, #0]
	*(uint32_t*)(buf + 40) = flip32(responseOriginTimestamp->nanosecondsField);
 8016fe0:	687b      	ldr	r3, [r7, #4]
 8016fe2:	689a      	ldr	r2, [r3, #8]
 8016fe4:	68fb      	ldr	r3, [r7, #12]
 8016fe6:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8016fea:	4610      	mov	r0, r2
 8016fec:	f7f1 f853 	bl	8008096 <lwip_htonl>
 8016ff0:	4603      	mov	r3, r0
 8016ff2:	6023      	str	r3, [r4, #0]
	memcpy((buf + 44), header->sourcePortIdentity.clockIdentity, CLOCK_IDENTITY_LENGTH);
 8016ff4:	68fb      	ldr	r3, [r7, #12]
 8016ff6:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8016ffa:	68bb      	ldr	r3, [r7, #8]
 8016ffc:	3318      	adds	r3, #24
 8016ffe:	2208      	movs	r2, #8
 8017000:	4619      	mov	r1, r3
 8017002:	f001 f97c 	bl	80182fe <memcpy>
	*(int16_t*)(buf + 52) = flip16(header->sourcePortIdentity.portNumber);
 8017006:	68bb      	ldr	r3, [r7, #8]
 8017008:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801700c:	b29b      	uxth	r3, r3
 801700e:	4618      	mov	r0, r3
 8017010:	f7f1 f834 	bl	800807c <lwip_htons>
 8017014:	4603      	mov	r3, r0
 8017016:	461a      	mov	r2, r3
 8017018:	68fb      	ldr	r3, [r7, #12]
 801701a:	3334      	adds	r3, #52	; 0x34
 801701c:	b212      	sxth	r2, r2
 801701e:	801a      	strh	r2, [r3, #0]
}
 8017020:	bf00      	nop
 8017022:	3714      	adds	r7, #20
 8017024:	46bd      	mov	sp, r7
 8017026:	bd90      	pop	{r4, r7, pc}

08017028 <msgUnpackPDelayRespFollowUp>:

/* Unpack PdelayResp message */
void msgUnpackPDelayRespFollowUp(const octet_t *buf, MsgPDelayRespFollowUp *prespfollow)
{
 8017028:	b580      	push	{r7, lr}
 801702a:	b082      	sub	sp, #8
 801702c:	af00      	add	r7, sp, #0
 801702e:	6078      	str	r0, [r7, #4]
 8017030:	6039      	str	r1, [r7, #0]
	prespfollow->responseOriginTimestamp.secondsField.msb = flip16(*(int16_t*)(buf  + 34));
 8017032:	687b      	ldr	r3, [r7, #4]
 8017034:	3322      	adds	r3, #34	; 0x22
 8017036:	f9b3 3000 	ldrsh.w	r3, [r3]
 801703a:	b29b      	uxth	r3, r3
 801703c:	4618      	mov	r0, r3
 801703e:	f7f1 f81d 	bl	800807c <lwip_htons>
 8017042:	4603      	mov	r3, r0
 8017044:	461a      	mov	r2, r3
 8017046:	683b      	ldr	r3, [r7, #0]
 8017048:	809a      	strh	r2, [r3, #4]
	prespfollow->responseOriginTimestamp.secondsField.lsb = flip32(*(uint32_t*)(buf + 36));
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	3324      	adds	r3, #36	; 0x24
 801704e:	681b      	ldr	r3, [r3, #0]
 8017050:	4618      	mov	r0, r3
 8017052:	f7f1 f820 	bl	8008096 <lwip_htonl>
 8017056:	4602      	mov	r2, r0
 8017058:	683b      	ldr	r3, [r7, #0]
 801705a:	601a      	str	r2, [r3, #0]
	prespfollow->responseOriginTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	3328      	adds	r3, #40	; 0x28
 8017060:	681b      	ldr	r3, [r3, #0]
 8017062:	4618      	mov	r0, r3
 8017064:	f7f1 f817 	bl	8008096 <lwip_htonl>
 8017068:	4602      	mov	r2, r0
 801706a:	683b      	ldr	r3, [r7, #0]
 801706c:	609a      	str	r2, [r3, #8]
	memcpy(prespfollow->requestingPortIdentity.clockIdentity, (buf + 44), CLOCK_IDENTITY_LENGTH);
 801706e:	683b      	ldr	r3, [r7, #0]
 8017070:	f103 000c 	add.w	r0, r3, #12
 8017074:	687b      	ldr	r3, [r7, #4]
 8017076:	332c      	adds	r3, #44	; 0x2c
 8017078:	2208      	movs	r2, #8
 801707a:	4619      	mov	r1, r3
 801707c:	f001 f93f 	bl	80182fe <memcpy>
	prespfollow->requestingPortIdentity.portNumber = flip16(*(int16_t*)(buf + 52));
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	3334      	adds	r3, #52	; 0x34
 8017084:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017088:	b29b      	uxth	r3, r3
 801708a:	4618      	mov	r0, r3
 801708c:	f7f0 fff6 	bl	800807c <lwip_htons>
 8017090:	4603      	mov	r3, r0
 8017092:	b21a      	sxth	r2, r3
 8017094:	683b      	ldr	r3, [r7, #0]
 8017096:	829a      	strh	r2, [r3, #20]
}
 8017098:	bf00      	nop
 801709a:	3708      	adds	r7, #8
 801709c:	46bd      	mov	sp, r7
 801709e:	bd80      	pop	{r7, pc}

080170a0 <netQInit>:

#include "../ptpd.h"

/* Initialize network queue. */
static void netQInit(BufQueue *queue)
{
 80170a0:	b580      	push	{r7, lr}
 80170a2:	b082      	sub	sp, #8
 80170a4:	af00      	add	r7, sp, #0
 80170a6:	6078      	str	r0, [r7, #4]
	queue->head = 0;
 80170a8:	687b      	ldr	r3, [r7, #4]
 80170aa:	2200      	movs	r2, #0
 80170ac:	821a      	strh	r2, [r3, #16]
	queue->tail = 0;
 80170ae:	687b      	ldr	r3, [r7, #4]
 80170b0:	2200      	movs	r2, #0
 80170b2:	825a      	strh	r2, [r3, #18]
	sys_mutex_new(&queue->mutex);
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	3314      	adds	r3, #20
 80170b8:	4618      	mov	r0, r3
 80170ba:	f7fc fbc9 	bl	8013850 <sys_mutex_new>
}
 80170be:	bf00      	nop
 80170c0:	3708      	adds	r7, #8
 80170c2:	46bd      	mov	sp, r7
 80170c4:	bd80      	pop	{r7, pc}

080170c6 <netQPut>:

/* Put data to the network queue. */
static bool netQPut(BufQueue *queue, void *pbuf)
{
 80170c6:	b580      	push	{r7, lr}
 80170c8:	b084      	sub	sp, #16
 80170ca:	af00      	add	r7, sp, #0
 80170cc:	6078      	str	r0, [r7, #4]
 80170ce:	6039      	str	r1, [r7, #0]
	bool retval = FALSE;
 80170d0:	2300      	movs	r3, #0
 80170d2:	73fb      	strb	r3, [r7, #15]

	sys_mutex_lock(&queue->mutex);
 80170d4:	687b      	ldr	r3, [r7, #4]
 80170d6:	3314      	adds	r3, #20
 80170d8:	4618      	mov	r0, r3
 80170da:	f7fc fbd5 	bl	8013888 <sys_mutex_lock>

	// Is there room on the queue for the buffer?
	if (((queue->head + 1) & PBUF_QUEUE_MASK) != queue->tail)
 80170de:	687b      	ldr	r3, [r7, #4]
 80170e0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80170e4:	3301      	adds	r3, #1
 80170e6:	f003 0303 	and.w	r3, r3, #3
 80170ea:	687a      	ldr	r2, [r7, #4]
 80170ec:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 80170f0:	4293      	cmp	r3, r2
 80170f2:	d015      	beq.n	8017120 <netQPut+0x5a>
	{
		// Place the buffer in the queue.
		queue->head = (queue->head + 1) & PBUF_QUEUE_MASK;
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80170fa:	b29b      	uxth	r3, r3
 80170fc:	3301      	adds	r3, #1
 80170fe:	b29b      	uxth	r3, r3
 8017100:	b21b      	sxth	r3, r3
 8017102:	f003 0303 	and.w	r3, r3, #3
 8017106:	b21a      	sxth	r2, r3
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	821a      	strh	r2, [r3, #16]
		queue->pbuf[queue->head] = pbuf;
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8017112:	4619      	mov	r1, r3
 8017114:	687b      	ldr	r3, [r7, #4]
 8017116:	683a      	ldr	r2, [r7, #0]
 8017118:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		retval = TRUE;
 801711c:	2301      	movs	r3, #1
 801711e:	73fb      	strb	r3, [r7, #15]
	}

	sys_mutex_unlock(&queue->mutex);
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	3314      	adds	r3, #20
 8017124:	4618      	mov	r0, r3
 8017126:	f7fc fbbe 	bl	80138a6 <sys_mutex_unlock>

	return retval;
 801712a:	7bfb      	ldrb	r3, [r7, #15]
}
 801712c:	4618      	mov	r0, r3
 801712e:	3710      	adds	r7, #16
 8017130:	46bd      	mov	sp, r7
 8017132:	bd80      	pop	{r7, pc}

08017134 <netQGet>:

/* Get data from the network queue. */
static void* netQGet(BufQueue *queue)
{
 8017134:	b580      	push	{r7, lr}
 8017136:	b084      	sub	sp, #16
 8017138:	af00      	add	r7, sp, #0
 801713a:	6078      	str	r0, [r7, #4]
	void *pbuf = NULL;
 801713c:	2300      	movs	r3, #0
 801713e:	60fb      	str	r3, [r7, #12]

	sys_mutex_lock(&queue->mutex);
 8017140:	687b      	ldr	r3, [r7, #4]
 8017142:	3314      	adds	r3, #20
 8017144:	4618      	mov	r0, r3
 8017146:	f7fc fb9f 	bl	8013888 <sys_mutex_lock>

	// Is there a buffer on the queue?
	if (queue->tail != queue->head)
 801714a:	687b      	ldr	r3, [r7, #4]
 801714c:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8017156:	429a      	cmp	r2, r3
 8017158:	d013      	beq.n	8017182 <netQGet+0x4e>
	{
		// Get the buffer from the queue.
		queue->tail = (queue->tail + 1) & PBUF_QUEUE_MASK;
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8017160:	b29b      	uxth	r3, r3
 8017162:	3301      	adds	r3, #1
 8017164:	b29b      	uxth	r3, r3
 8017166:	b21b      	sxth	r3, r3
 8017168:	f003 0303 	and.w	r3, r3, #3
 801716c:	b21a      	sxth	r2, r3
 801716e:	687b      	ldr	r3, [r7, #4]
 8017170:	825a      	strh	r2, [r3, #18]
		pbuf = queue->pbuf[queue->tail];
 8017172:	687b      	ldr	r3, [r7, #4]
 8017174:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8017178:	461a      	mov	r2, r3
 801717a:	687b      	ldr	r3, [r7, #4]
 801717c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017180:	60fb      	str	r3, [r7, #12]
	}

	sys_mutex_unlock(&queue->mutex);
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	3314      	adds	r3, #20
 8017186:	4618      	mov	r0, r3
 8017188:	f7fc fb8d 	bl	80138a6 <sys_mutex_unlock>

	return pbuf;
 801718c:	68fb      	ldr	r3, [r7, #12]
}
 801718e:	4618      	mov	r0, r3
 8017190:	3710      	adds	r7, #16
 8017192:	46bd      	mov	sp, r7
 8017194:	bd80      	pop	{r7, pc}

08017196 <netQEmpty>:

/* Free any remaining pbufs in the queue. */
static void netQEmpty(BufQueue *queue)
{
 8017196:	b580      	push	{r7, lr}
 8017198:	b082      	sub	sp, #8
 801719a:	af00      	add	r7, sp, #0
 801719c:	6078      	str	r0, [r7, #4]
	sys_mutex_lock(&queue->mutex);
 801719e:	687b      	ldr	r3, [r7, #4]
 80171a0:	3314      	adds	r3, #20
 80171a2:	4618      	mov	r0, r3
 80171a4:	f7fc fb70 	bl	8013888 <sys_mutex_lock>

	// Free each remaining buffer in the queue.
	while (queue->tail != queue->head)
 80171a8:	e015      	b.n	80171d6 <netQEmpty+0x40>
	{
		// Get the buffer from the queue.
		queue->tail = (queue->tail + 1) & PBUF_QUEUE_MASK;
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80171b0:	b29b      	uxth	r3, r3
 80171b2:	3301      	adds	r3, #1
 80171b4:	b29b      	uxth	r3, r3
 80171b6:	b21b      	sxth	r3, r3
 80171b8:	f003 0303 	and.w	r3, r3, #3
 80171bc:	b21a      	sxth	r2, r3
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	825a      	strh	r2, [r3, #18]
		pbuf_free(queue->pbuf[queue->tail]);
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80171c8:	461a      	mov	r2, r3
 80171ca:	687b      	ldr	r3, [r7, #4]
 80171cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80171d0:	4618      	mov	r0, r3
 80171d2:	f7f2 fc15 	bl	8009a00 <pbuf_free>
	while (queue->tail != queue->head)
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80171e2:	429a      	cmp	r2, r3
 80171e4:	d1e1      	bne.n	80171aa <netQEmpty+0x14>
	}

	sys_mutex_unlock(&queue->mutex);
 80171e6:	687b      	ldr	r3, [r7, #4]
 80171e8:	3314      	adds	r3, #20
 80171ea:	4618      	mov	r0, r3
 80171ec:	f7fc fb5b 	bl	80138a6 <sys_mutex_unlock>
}
 80171f0:	bf00      	nop
 80171f2:	3708      	adds	r7, #8
 80171f4:	46bd      	mov	sp, r7
 80171f6:	bd80      	pop	{r7, pc}

080171f8 <netQCheck>:

/* Check if something is in the queue */
static bool netQCheck(BufQueue *queue)
{
 80171f8:	b580      	push	{r7, lr}
 80171fa:	b084      	sub	sp, #16
 80171fc:	af00      	add	r7, sp, #0
 80171fe:	6078      	str	r0, [r7, #4]
	bool retval = FALSE;
 8017200:	2300      	movs	r3, #0
 8017202:	73fb      	strb	r3, [r7, #15]

	sys_mutex_lock(&queue->mutex);
 8017204:	687b      	ldr	r3, [r7, #4]
 8017206:	3314      	adds	r3, #20
 8017208:	4618      	mov	r0, r3
 801720a:	f7fc fb3d 	bl	8013888 <sys_mutex_lock>

	if (queue->tail != queue->head)
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801721a:	429a      	cmp	r2, r3
 801721c:	d001      	beq.n	8017222 <netQCheck+0x2a>
		retval = TRUE;
 801721e:	2301      	movs	r3, #1
 8017220:	73fb      	strb	r3, [r7, #15]

	sys_mutex_unlock(&queue->mutex);
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	3314      	adds	r3, #20
 8017226:	4618      	mov	r0, r3
 8017228:	f7fc fb3d 	bl	80138a6 <sys_mutex_unlock>

	return retval;
 801722c:	7bfb      	ldrb	r3, [r7, #15]
}
 801722e:	4618      	mov	r0, r3
 8017230:	3710      	adds	r7, #16
 8017232:	46bd      	mov	sp, r7
 8017234:	bd80      	pop	{r7, pc}
	...

08017238 <netShutdown>:

/* Shut down  the UDP and network stuff */
bool netShutdown(NetPath *netPath)
{
 8017238:	b580      	push	{r7, lr}
 801723a:	b086      	sub	sp, #24
 801723c:	af00      	add	r7, sp, #0
 801723e:	6078      	str	r0, [r7, #4]
	ip_addr_t multicastAaddr;

	DBG("netShutdown\r\n");
 8017240:	f107 030c 	add.w	r3, r7, #12
 8017244:	4618      	mov	r0, r3
 8017246:	f000 fef3 	bl	8018030 <getTime>
 801724a:	68fb      	ldr	r3, [r7, #12]
 801724c:	693a      	ldr	r2, [r7, #16]
 801724e:	4619      	mov	r1, r3
 8017250:	481d      	ldr	r0, [pc, #116]	; (80172c8 <netShutdown+0x90>)
 8017252:	f001 f867 	bl	8018324 <iprintf>
 8017256:	481d      	ldr	r0, [pc, #116]	; (80172cc <netShutdown+0x94>)
 8017258:	f001 f8d8 	bl	801840c <puts>

	/* leave multicast group */
	multicastAaddr.addr = netPath->multicastAddr;
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	681b      	ldr	r3, [r3, #0]
 8017260:	617b      	str	r3, [r7, #20]
	igmp_leavegroup(IP_ADDR_ANY, &multicastAaddr);
 8017262:	f107 0314 	add.w	r3, r7, #20
 8017266:	4619      	mov	r1, r3
 8017268:	4819      	ldr	r0, [pc, #100]	; (80172d0 <netShutdown+0x98>)
 801726a:	f7fa fcad 	bl	8011bc8 <igmp_leavegroup>

	/* Disconnect and close the Event UDP interface */
	if (netPath->eventPcb)
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	68db      	ldr	r3, [r3, #12]
 8017272:	2b00      	cmp	r3, #0
 8017274:	d00c      	beq.n	8017290 <netShutdown+0x58>
	{
		udp_disconnect(netPath->eventPcb);
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	68db      	ldr	r3, [r3, #12]
 801727a:	4618      	mov	r0, r3
 801727c:	f7f7 ff7e 	bl	800f17c <udp_disconnect>
		udp_remove(netPath->eventPcb);
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	68db      	ldr	r3, [r3, #12]
 8017284:	4618      	mov	r0, r3
 8017286:	f7f7 ffa1 	bl	800f1cc <udp_remove>
		netPath->eventPcb = NULL;
 801728a:	687b      	ldr	r3, [r7, #4]
 801728c:	2200      	movs	r2, #0
 801728e:	60da      	str	r2, [r3, #12]
	}

	/* Disconnect and close the General UDP interface */
	if (netPath->generalPcb)
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	691b      	ldr	r3, [r3, #16]
 8017294:	2b00      	cmp	r3, #0
 8017296:	d00c      	beq.n	80172b2 <netShutdown+0x7a>
	{
		udp_disconnect(netPath->generalPcb);
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	691b      	ldr	r3, [r3, #16]
 801729c:	4618      	mov	r0, r3
 801729e:	f7f7 ff6d 	bl	800f17c <udp_disconnect>
		udp_remove(netPath->generalPcb);
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	691b      	ldr	r3, [r3, #16]
 80172a6:	4618      	mov	r0, r3
 80172a8:	f7f7 ff90 	bl	800f1cc <udp_remove>
		netPath->generalPcb = NULL;
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	2200      	movs	r2, #0
 80172b0:	611a      	str	r2, [r3, #16]
	}

	/* Clear the network addresses. */
	netPath->multicastAddr = 0;
 80172b2:	687b      	ldr	r3, [r7, #4]
 80172b4:	2200      	movs	r2, #0
 80172b6:	601a      	str	r2, [r3, #0]
	netPath->unicastAddr = 0;
 80172b8:	687b      	ldr	r3, [r7, #4]
 80172ba:	2200      	movs	r2, #0
 80172bc:	609a      	str	r2, [r3, #8]

	/* Return a success code. */
	return TRUE;
 80172be:	2301      	movs	r3, #1
}
 80172c0:	4618      	mov	r0, r3
 80172c2:	3718      	adds	r7, #24
 80172c4:	46bd      	mov	sp, r7
 80172c6:	bd80      	pop	{r7, pc}
 80172c8:	0801c2d4 	.word	0x0801c2d4
 80172cc:	0801c2e4 	.word	0x0801c2e4
 80172d0:	0801c8e0 	.word	0x0801c8e0

080172d4 <findIface>:

/* Find interface to  be used.  uuid should be filled with MAC address of the interface.
 Will return the IPv4 address of  the interface. */
static int32_t findIface(const octet_t *ifaceName, octet_t *uuid,
		NetPath *netPath)
{
 80172d4:	b580      	push	{r7, lr}
 80172d6:	b086      	sub	sp, #24
 80172d8:	af00      	add	r7, sp, #0
 80172da:	60f8      	str	r0, [r7, #12]
 80172dc:	60b9      	str	r1, [r7, #8]
 80172de:	607a      	str	r2, [r7, #4]
	struct netif *iface;

	iface = netif_default;
 80172e0:	4b09      	ldr	r3, [pc, #36]	; (8017308 <findIface+0x34>)
 80172e2:	681b      	ldr	r3, [r3, #0]
 80172e4:	617b      	str	r3, [r7, #20]
	memcpy(uuid, iface->hwaddr, iface->hwaddr_len);
 80172e6:	697b      	ldr	r3, [r7, #20]
 80172e8:	f103 012d 	add.w	r1, r3, #45	; 0x2d
 80172ec:	697b      	ldr	r3, [r7, #20]
 80172ee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80172f2:	461a      	mov	r2, r3
 80172f4:	68b8      	ldr	r0, [r7, #8]
 80172f6:	f001 f802 	bl	80182fe <memcpy>

	return iface->ip_addr.addr;
 80172fa:	697b      	ldr	r3, [r7, #20]
 80172fc:	685b      	ldr	r3, [r3, #4]
}
 80172fe:	4618      	mov	r0, r3
 8017300:	3718      	adds	r7, #24
 8017302:	46bd      	mov	sp, r7
 8017304:	bd80      	pop	{r7, pc}
 8017306:	bf00      	nop
 8017308:	2000b8b8 	.word	0x2000b8b8

0801730c <netRecvEventCallback>:

/* Process an incoming message on the Event port. */
static void netRecvEventCallback(void *arg, struct udp_pcb *pcb, struct pbuf *p,
		const ip_addr_t *addr, u16_t port)
{
 801730c:	b580      	push	{r7, lr}
 801730e:	b088      	sub	sp, #32
 8017310:	af00      	add	r7, sp, #0
 8017312:	60f8      	str	r0, [r7, #12]
 8017314:	60b9      	str	r1, [r7, #8]
 8017316:	607a      	str	r2, [r7, #4]
 8017318:	603b      	str	r3, [r7, #0]
	NetPath *netPath = (NetPath*) arg;
 801731a:	68fb      	ldr	r3, [r7, #12]
 801731c:	61fb      	str	r3, [r7, #28]

	/* Place the incoming message on the Event Port QUEUE. */
	if (!netQPut(&netPath->eventQ, p))
 801731e:	69fb      	ldr	r3, [r7, #28]
 8017320:	3314      	adds	r3, #20
 8017322:	6879      	ldr	r1, [r7, #4]
 8017324:	4618      	mov	r0, r3
 8017326:	f7ff fece 	bl	80170c6 <netQPut>
 801732a:	4603      	mov	r3, r0
 801732c:	f083 0301 	eor.w	r3, r3, #1
 8017330:	b2db      	uxtb	r3, r3
 8017332:	2b00      	cmp	r3, #0
 8017334:	d011      	beq.n	801735a <netRecvEventCallback+0x4e>
	{
		pbuf_free(p);
 8017336:	6878      	ldr	r0, [r7, #4]
 8017338:	f7f2 fb62 	bl	8009a00 <pbuf_free>
		ERROR("netRecvEventCallback: queue full\r\n");
 801733c:	f107 0314 	add.w	r3, r7, #20
 8017340:	4618      	mov	r0, r3
 8017342:	f000 fe75 	bl	8018030 <getTime>
 8017346:	697b      	ldr	r3, [r7, #20]
 8017348:	69ba      	ldr	r2, [r7, #24]
 801734a:	4619      	mov	r1, r3
 801734c:	4805      	ldr	r0, [pc, #20]	; (8017364 <netRecvEventCallback+0x58>)
 801734e:	f000 ffe9 	bl	8018324 <iprintf>
 8017352:	4805      	ldr	r0, [pc, #20]	; (8017368 <netRecvEventCallback+0x5c>)
 8017354:	f001 f85a 	bl	801840c <puts>
		return;
 8017358:	e001      	b.n	801735e <netRecvEventCallback+0x52>
	}

	/* Alert the PTP thread there is now something to do. */
	ptpd_alert();
 801735a:	f7ff f89f 	bl	801649c <ptpd_alert>
}
 801735e:	3720      	adds	r7, #32
 8017360:	46bd      	mov	sp, r7
 8017362:	bd80      	pop	{r7, pc}
 8017364:	0801c2f4 	.word	0x0801c2f4
 8017368:	0801c304 	.word	0x0801c304

0801736c <netRecvGeneralCallback>:

/* Process an incoming message on the General port. */
static void netRecvGeneralCallback(void *arg, struct udp_pcb *pcb,
		struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801736c:	b580      	push	{r7, lr}
 801736e:	b088      	sub	sp, #32
 8017370:	af00      	add	r7, sp, #0
 8017372:	60f8      	str	r0, [r7, #12]
 8017374:	60b9      	str	r1, [r7, #8]
 8017376:	607a      	str	r2, [r7, #4]
 8017378:	603b      	str	r3, [r7, #0]
	NetPath *netPath = (NetPath*) arg;
 801737a:	68fb      	ldr	r3, [r7, #12]
 801737c:	61fb      	str	r3, [r7, #28]

	/* Place the incoming message on the Event Port QUEUE. */
	if (!netQPut(&netPath->generalQ, p))
 801737e:	69fb      	ldr	r3, [r7, #28]
 8017380:	332c      	adds	r3, #44	; 0x2c
 8017382:	6879      	ldr	r1, [r7, #4]
 8017384:	4618      	mov	r0, r3
 8017386:	f7ff fe9e 	bl	80170c6 <netQPut>
 801738a:	4603      	mov	r3, r0
 801738c:	f083 0301 	eor.w	r3, r3, #1
 8017390:	b2db      	uxtb	r3, r3
 8017392:	2b00      	cmp	r3, #0
 8017394:	d011      	beq.n	80173ba <netRecvGeneralCallback+0x4e>
	{
		pbuf_free(p);
 8017396:	6878      	ldr	r0, [r7, #4]
 8017398:	f7f2 fb32 	bl	8009a00 <pbuf_free>
		ERROR("netRecvGeneralCallback: queue full\r\n");
 801739c:	f107 0314 	add.w	r3, r7, #20
 80173a0:	4618      	mov	r0, r3
 80173a2:	f000 fe45 	bl	8018030 <getTime>
 80173a6:	697b      	ldr	r3, [r7, #20]
 80173a8:	69ba      	ldr	r2, [r7, #24]
 80173aa:	4619      	mov	r1, r3
 80173ac:	4805      	ldr	r0, [pc, #20]	; (80173c4 <netRecvGeneralCallback+0x58>)
 80173ae:	f000 ffb9 	bl	8018324 <iprintf>
 80173b2:	4805      	ldr	r0, [pc, #20]	; (80173c8 <netRecvGeneralCallback+0x5c>)
 80173b4:	f001 f82a 	bl	801840c <puts>
		return;
 80173b8:	e001      	b.n	80173be <netRecvGeneralCallback+0x52>
	}

	/* Alert the PTP thread there is now something to do. */
	ptpd_alert();
 80173ba:	f7ff f86f 	bl	801649c <ptpd_alert>
}
 80173be:	3720      	adds	r7, #32
 80173c0:	46bd      	mov	sp, r7
 80173c2:	bd80      	pop	{r7, pc}
 80173c4:	0801c2f4 	.word	0x0801c2f4
 80173c8:	0801c328 	.word	0x0801c328

080173cc <netInit>:

/* Start  all of the UDP stuff */
bool netInit(NetPath *netPath, PtpClock *ptpClock)
{
 80173cc:	b590      	push	{r4, r7, lr}
 80173ce:	b095      	sub	sp, #84	; 0x54
 80173d0:	af00      	add	r7, sp, #0
 80173d2:	6078      	str	r0, [r7, #4]
 80173d4:	6039      	str	r1, [r7, #0]
	struct in_addr netAddr;
	ip_addr_t interfaceAddr;
	char addrStr[NET_ADDRESS_LENGTH];

	DBG("netInit\r\n");
 80173d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80173da:	4618      	mov	r0, r3
 80173dc:	f000 fe28 	bl	8018030 <getTime>
 80173e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80173e4:	4619      	mov	r1, r3
 80173e6:	4883      	ldr	r0, [pc, #524]	; (80175f4 <netInit+0x228>)
 80173e8:	f000 ff9c 	bl	8018324 <iprintf>
 80173ec:	4882      	ldr	r0, [pc, #520]	; (80175f8 <netInit+0x22c>)
 80173ee:	f001 f80d 	bl	801840c <puts>

	/* Initialize the buffer queues. */
	netQInit(&netPath->eventQ);
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	3314      	adds	r3, #20
 80173f6:	4618      	mov	r0, r3
 80173f8:	f7ff fe52 	bl	80170a0 <netQInit>
	netQInit(&netPath->generalQ);
 80173fc:	687b      	ldr	r3, [r7, #4]
 80173fe:	332c      	adds	r3, #44	; 0x2c
 8017400:	4618      	mov	r0, r3
 8017402:	f7ff fe4d 	bl	80170a0 <netQInit>

	/* Find a network interface */
	interfaceAddr.addr = findIface(ptpClock->rtOpts->ifaceName,
 8017406:	683b      	ldr	r3, [r7, #0]
 8017408:	f8d3 3440 	ldr.w	r3, [r3, #1088]	; 0x440
 801740c:	f103 000c 	add.w	r0, r3, #12
			ptpClock->portUuidField, netPath);
 8017410:	683b      	ldr	r3, [r7, #0]
 8017412:	f203 4311 	addw	r3, r3, #1041	; 0x411
	interfaceAddr.addr = findIface(ptpClock->rtOpts->ifaceName,
 8017416:	687a      	ldr	r2, [r7, #4]
 8017418:	4619      	mov	r1, r3
 801741a:	f7ff ff5b 	bl	80172d4 <findIface>
 801741e:	4603      	mov	r3, r0
 8017420:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!(interfaceAddr.addr))
 8017422:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017424:	2b00      	cmp	r3, #0
 8017426:	d10e      	bne.n	8017446 <netInit+0x7a>
	{
		ERROR("netInit: Failed to find interface address\r\n");
 8017428:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801742c:	4618      	mov	r0, r3
 801742e:	f000 fdff 	bl	8018030 <getTime>
 8017432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017434:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017436:	4619      	mov	r1, r3
 8017438:	4870      	ldr	r0, [pc, #448]	; (80175fc <netInit+0x230>)
 801743a:	f000 ff73 	bl	8018324 <iprintf>
 801743e:	4870      	ldr	r0, [pc, #448]	; (8017600 <netInit+0x234>)
 8017440:	f000 ffe4 	bl	801840c <puts>
		goto fail01;
 8017444:	e0d0      	b.n	80175e8 <netInit+0x21c>
	}

	/* Open lwIP raw udp interfaces for the event port. */
	netPath->eventPcb = udp_new();
 8017446:	f7f7 fef3 	bl	800f230 <udp_new>
 801744a:	4602      	mov	r2, r0
 801744c:	687b      	ldr	r3, [r7, #4]
 801744e:	60da      	str	r2, [r3, #12]
	if (NULL == netPath->eventPcb)
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	68db      	ldr	r3, [r3, #12]
 8017454:	2b00      	cmp	r3, #0
 8017456:	d10e      	bne.n	8017476 <netInit+0xaa>
	{
		ERROR("netInit: Failed to open Event UDP PCB\r\n");
 8017458:	f107 0320 	add.w	r3, r7, #32
 801745c:	4618      	mov	r0, r3
 801745e:	f000 fde7 	bl	8018030 <getTime>
 8017462:	6a3b      	ldr	r3, [r7, #32]
 8017464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017466:	4619      	mov	r1, r3
 8017468:	4864      	ldr	r0, [pc, #400]	; (80175fc <netInit+0x230>)
 801746a:	f000 ff5b 	bl	8018324 <iprintf>
 801746e:	4865      	ldr	r0, [pc, #404]	; (8017604 <netInit+0x238>)
 8017470:	f000 ffcc 	bl	801840c <puts>
		goto fail02;
 8017474:	e0b8      	b.n	80175e8 <netInit+0x21c>
	}

	/* Open lwIP raw udp interfaces for the general port. */
	netPath->generalPcb = udp_new();
 8017476:	f7f7 fedb 	bl	800f230 <udp_new>
 801747a:	4602      	mov	r2, r0
 801747c:	687b      	ldr	r3, [r7, #4]
 801747e:	611a      	str	r2, [r3, #16]
	if (NULL == netPath->generalPcb)
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	691b      	ldr	r3, [r3, #16]
 8017484:	2b00      	cmp	r3, #0
 8017486:	d10e      	bne.n	80174a6 <netInit+0xda>
	{
		ERROR("netInit: Failed to open General UDP PCB\r\n");
 8017488:	f107 0318 	add.w	r3, r7, #24
 801748c:	4618      	mov	r0, r3
 801748e:	f000 fdcf 	bl	8018030 <getTime>
 8017492:	69bb      	ldr	r3, [r7, #24]
 8017494:	69fa      	ldr	r2, [r7, #28]
 8017496:	4619      	mov	r1, r3
 8017498:	4858      	ldr	r0, [pc, #352]	; (80175fc <netInit+0x230>)
 801749a:	f000 ff43 	bl	8018324 <iprintf>
 801749e:	485a      	ldr	r0, [pc, #360]	; (8017608 <netInit+0x23c>)
 80174a0:	f000 ffb4 	bl	801840c <puts>
		goto fail03;
 80174a4:	e09b      	b.n	80175de <netInit+0x212>
	}

	/* Configure network (broadcast/unicast) addresses. */
	netPath->unicastAddr = 0; /* disable unicast */
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	2200      	movs	r2, #0
 80174aa:	609a      	str	r2, [r3, #8]

	/* Init General multicast IP address */
	memcpy(addrStr, DEFAULT_PTP_DOMAIN_ADDRESS, NET_ADDRESS_LENGTH);
 80174ac:	4b57      	ldr	r3, [pc, #348]	; (801760c <netInit+0x240>)
 80174ae:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80174b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80174b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (!inet_aton(addrStr, &netAddr))
 80174b8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80174bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80174c0:	4611      	mov	r1, r2
 80174c2:	4618      	mov	r0, r3
 80174c4:	f7fb f92e 	bl	8012724 <ip4addr_aton>
 80174c8:	4603      	mov	r3, r0
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	d111      	bne.n	80174f2 <netInit+0x126>
	{
		ERROR("netInit: failed to encode multi-cast address: %s\r\n", addrStr);
 80174ce:	f107 0310 	add.w	r3, r7, #16
 80174d2:	4618      	mov	r0, r3
 80174d4:	f000 fdac 	bl	8018030 <getTime>
 80174d8:	693b      	ldr	r3, [r7, #16]
 80174da:	697a      	ldr	r2, [r7, #20]
 80174dc:	4619      	mov	r1, r3
 80174de:	4847      	ldr	r0, [pc, #284]	; (80175fc <netInit+0x230>)
 80174e0:	f000 ff20 	bl	8018324 <iprintf>
 80174e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80174e8:	4619      	mov	r1, r3
 80174ea:	4849      	ldr	r0, [pc, #292]	; (8017610 <netInit+0x244>)
 80174ec:	f000 ff1a 	bl	8018324 <iprintf>
		goto fail04;
 80174f0:	e070      	b.n	80175d4 <netInit+0x208>
	}
	netPath->multicastAddr = netAddr.s_addr;
 80174f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80174f4:	461a      	mov	r2, r3
 80174f6:	687b      	ldr	r3, [r7, #4]
 80174f8:	601a      	str	r2, [r3, #0]

	/* Join multicast group (for receiving) on specified interface */
	printf("Join group: %s, %d\r\n", DEFAULT_PTP_DOMAIN_ADDRESS,
			igmp_joingroup(&interfaceAddr, (ip_addr_t*) &netAddr));
 80174fa:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80174fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017502:	4611      	mov	r1, r2
 8017504:	4618      	mov	r0, r3
 8017506:	f7fa fa83 	bl	8011a10 <igmp_joingroup>
 801750a:	4603      	mov	r3, r0
	printf("Join group: %s, %d\r\n", DEFAULT_PTP_DOMAIN_ADDRESS,
 801750c:	461a      	mov	r2, r3
 801750e:	493f      	ldr	r1, [pc, #252]	; (801760c <netInit+0x240>)
 8017510:	4840      	ldr	r0, [pc, #256]	; (8017614 <netInit+0x248>)
 8017512:	f000 ff07 	bl	8018324 <iprintf>

	/* Init Peer multicast IP address */
	memcpy(addrStr, PEER_PTP_DOMAIN_ADDRESS, NET_ADDRESS_LENGTH);
 8017516:	4b40      	ldr	r3, [pc, #256]	; (8017618 <netInit+0x24c>)
 8017518:	f107 0438 	add.w	r4, r7, #56	; 0x38
 801751c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801751e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (!inet_aton(addrStr, &netAddr))
 8017522:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8017526:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801752a:	4611      	mov	r1, r2
 801752c:	4618      	mov	r0, r3
 801752e:	f7fb f8f9 	bl	8012724 <ip4addr_aton>
 8017532:	4603      	mov	r3, r0
 8017534:	2b00      	cmp	r3, #0
 8017536:	d111      	bne.n	801755c <netInit+0x190>
	{
		ERROR("netInit: failed to encode peer multi-cast address: %s\r\n",
 8017538:	f107 0308 	add.w	r3, r7, #8
 801753c:	4618      	mov	r0, r3
 801753e:	f000 fd77 	bl	8018030 <getTime>
 8017542:	68bb      	ldr	r3, [r7, #8]
 8017544:	68fa      	ldr	r2, [r7, #12]
 8017546:	4619      	mov	r1, r3
 8017548:	482c      	ldr	r0, [pc, #176]	; (80175fc <netInit+0x230>)
 801754a:	f000 feeb 	bl	8018324 <iprintf>
 801754e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8017552:	4619      	mov	r1, r3
 8017554:	4831      	ldr	r0, [pc, #196]	; (801761c <netInit+0x250>)
 8017556:	f000 fee5 	bl	8018324 <iprintf>
				addrStr);
		goto fail04;
 801755a:	e03b      	b.n	80175d4 <netInit+0x208>
	}
	netPath->peerMulticastAddr = netAddr.s_addr;
 801755c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801755e:	461a      	mov	r2, r3
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	605a      	str	r2, [r3, #4]

	/* Join peer multicast group (for receiving) on specified interface */
	printf("Join group: %s, %d\r\n", PEER_PTP_DOMAIN_ADDRESS,
			igmp_joingroup(&interfaceAddr, (ip_addr_t*) &netAddr));
 8017564:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8017568:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801756c:	4611      	mov	r1, r2
 801756e:	4618      	mov	r0, r3
 8017570:	f7fa fa4e 	bl	8011a10 <igmp_joingroup>
 8017574:	4603      	mov	r3, r0
	printf("Join group: %s, %d\r\n", PEER_PTP_DOMAIN_ADDRESS,
 8017576:	461a      	mov	r2, r3
 8017578:	4927      	ldr	r1, [pc, #156]	; (8017618 <netInit+0x24c>)
 801757a:	4826      	ldr	r0, [pc, #152]	; (8017614 <netInit+0x248>)
 801757c:	f000 fed2 	bl	8018324 <iprintf>

	/* Multicast send only on specified interface. */
	netPath->eventPcb->local_ip.addr = netPath->multicastAddr;
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	681a      	ldr	r2, [r3, #0]
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	68db      	ldr	r3, [r3, #12]
 8017588:	601a      	str	r2, [r3, #0]
	netPath->generalPcb->local_ip.addr = netPath->multicastAddr;
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	681a      	ldr	r2, [r3, #0]
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	691b      	ldr	r3, [r3, #16]
 8017592:	601a      	str	r2, [r3, #0]

	/* Establish the appropriate UDP bindings/connections for events. */
	udp_recv(netPath->eventPcb, netRecvEventCallback, netPath);
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	68db      	ldr	r3, [r3, #12]
 8017598:	687a      	ldr	r2, [r7, #4]
 801759a:	4921      	ldr	r1, [pc, #132]	; (8017620 <netInit+0x254>)
 801759c:	4618      	mov	r0, r3
 801759e:	f7f7 fe03 	bl	800f1a8 <udp_recv>
	udp_bind(netPath->eventPcb, IP_ADDR_ANY, PTP_EVENT_PORT);
 80175a2:	687b      	ldr	r3, [r7, #4]
 80175a4:	68db      	ldr	r3, [r3, #12]
 80175a6:	f240 123f 	movw	r2, #319	; 0x13f
 80175aa:	491e      	ldr	r1, [pc, #120]	; (8017624 <netInit+0x258>)
 80175ac:	4618      	mov	r0, r3
 80175ae:	f7f7 fd75 	bl	800f09c <udp_bind>
	/*  udp_connect(netPath->eventPcb, &netAddr, PTP_EVENT_PORT); */

	/* Establish the appropriate UDP bindings/connections for general. */
	udp_recv(netPath->generalPcb, netRecvGeneralCallback, netPath);
 80175b2:	687b      	ldr	r3, [r7, #4]
 80175b4:	691b      	ldr	r3, [r3, #16]
 80175b6:	687a      	ldr	r2, [r7, #4]
 80175b8:	491b      	ldr	r1, [pc, #108]	; (8017628 <netInit+0x25c>)
 80175ba:	4618      	mov	r0, r3
 80175bc:	f7f7 fdf4 	bl	800f1a8 <udp_recv>
	udp_bind(netPath->generalPcb, IP_ADDR_ANY, PTP_GENERAL_PORT);
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	691b      	ldr	r3, [r3, #16]
 80175c4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80175c8:	4916      	ldr	r1, [pc, #88]	; (8017624 <netInit+0x258>)
 80175ca:	4618      	mov	r0, r3
 80175cc:	f7f7 fd66 	bl	800f09c <udp_bind>
	/*  udp_connect(netPath->generalPcb, &netAddr, PTP_GENERAL_PORT); */

	/* Return a success code. */
	return TRUE;
 80175d0:	2301      	movs	r3, #1
 80175d2:	e00a      	b.n	80175ea <netInit+0x21e>

	fail04: udp_remove(netPath->generalPcb);
 80175d4:	687b      	ldr	r3, [r7, #4]
 80175d6:	691b      	ldr	r3, [r3, #16]
 80175d8:	4618      	mov	r0, r3
 80175da:	f7f7 fdf7 	bl	800f1cc <udp_remove>
	fail03: udp_remove(netPath->eventPcb);
 80175de:	687b      	ldr	r3, [r7, #4]
 80175e0:	68db      	ldr	r3, [r3, #12]
 80175e2:	4618      	mov	r0, r3
 80175e4:	f7f7 fdf2 	bl	800f1cc <udp_remove>
	fail02: fail01: return FALSE;
 80175e8:	2300      	movs	r3, #0
}
 80175ea:	4618      	mov	r0, r3
 80175ec:	3754      	adds	r7, #84	; 0x54
 80175ee:	46bd      	mov	sp, r7
 80175f0:	bd90      	pop	{r4, r7, pc}
 80175f2:	bf00      	nop
 80175f4:	0801c2d4 	.word	0x0801c2d4
 80175f8:	0801c34c 	.word	0x0801c34c
 80175fc:	0801c2f4 	.word	0x0801c2f4
 8017600:	0801c358 	.word	0x0801c358
 8017604:	0801c384 	.word	0x0801c384
 8017608:	0801c3ac 	.word	0x0801c3ac
 801760c:	0801c3d8 	.word	0x0801c3d8
 8017610:	0801c3e4 	.word	0x0801c3e4
 8017614:	0801c418 	.word	0x0801c418
 8017618:	0801c430 	.word	0x0801c430
 801761c:	0801c43c 	.word	0x0801c43c
 8017620:	0801730d 	.word	0x0801730d
 8017624:	0801c8e0 	.word	0x0801c8e0
 8017628:	0801736d 	.word	0x0801736d

0801762c <netSelect>:

/* Wait for a packet  to come in on either port.  For now, there is no wait.
 * Simply check to  see if a packet is available on either port and return 1,
 *  otherwise return 0. */
int32_t netSelect(NetPath *netPath, const TimeInternal *timeout)
{
 801762c:	b580      	push	{r7, lr}
 801762e:	b082      	sub	sp, #8
 8017630:	af00      	add	r7, sp, #0
 8017632:	6078      	str	r0, [r7, #4]
 8017634:	6039      	str	r1, [r7, #0]
	/* Check the packet queues.  If there is data, return TRUE. */
	if (netQCheck(&netPath->eventQ) || netQCheck(&netPath->generalQ))
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	3314      	adds	r3, #20
 801763a:	4618      	mov	r0, r3
 801763c:	f7ff fddc 	bl	80171f8 <netQCheck>
 8017640:	4603      	mov	r3, r0
 8017642:	2b00      	cmp	r3, #0
 8017644:	d107      	bne.n	8017656 <netSelect+0x2a>
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	332c      	adds	r3, #44	; 0x2c
 801764a:	4618      	mov	r0, r3
 801764c:	f7ff fdd4 	bl	80171f8 <netQCheck>
 8017650:	4603      	mov	r3, r0
 8017652:	2b00      	cmp	r3, #0
 8017654:	d001      	beq.n	801765a <netSelect+0x2e>
		return 1;
 8017656:	2301      	movs	r3, #1
 8017658:	e000      	b.n	801765c <netSelect+0x30>

	return 0;
 801765a:	2300      	movs	r3, #0
}
 801765c:	4618      	mov	r0, r3
 801765e:	3708      	adds	r7, #8
 8017660:	46bd      	mov	sp, r7
 8017662:	bd80      	pop	{r7, pc}

08017664 <netEmptyEventQ>:

/* Delete all waiting packets in event queue. */
void netEmptyEventQ(NetPath *netPath)
{
 8017664:	b580      	push	{r7, lr}
 8017666:	b082      	sub	sp, #8
 8017668:	af00      	add	r7, sp, #0
 801766a:	6078      	str	r0, [r7, #4]
	netQEmpty(&netPath->eventQ);
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	3314      	adds	r3, #20
 8017670:	4618      	mov	r0, r3
 8017672:	f7ff fd90 	bl	8017196 <netQEmpty>
}
 8017676:	bf00      	nop
 8017678:	3708      	adds	r7, #8
 801767a:	46bd      	mov	sp, r7
 801767c:	bd80      	pop	{r7, pc}
	...

08017680 <netRecv>:

static ssize_t netRecv(octet_t *buf, TimeInternal *time, BufQueue *msgQueue)
{
 8017680:	b580      	push	{r7, lr}
 8017682:	b08e      	sub	sp, #56	; 0x38
 8017684:	af00      	add	r7, sp, #0
 8017686:	60f8      	str	r0, [r7, #12]
 8017688:	60b9      	str	r1, [r7, #8]
 801768a:	607a      	str	r2, [r7, #4]
	u16_t length;
	struct pbuf *p;
	struct pbuf *pcopy;

	/* Get the next buffer from the queue. */
	if ((p = (struct pbuf*) netQGet(msgQueue)) == NULL)
 801768c:	6878      	ldr	r0, [r7, #4]
 801768e:	f7ff fd51 	bl	8017134 <netQGet>
 8017692:	62b8      	str	r0, [r7, #40]	; 0x28
 8017694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017696:	2b00      	cmp	r3, #0
 8017698:	d101      	bne.n	801769e <netRecv+0x1e>
	{
		return 0;
 801769a:	2300      	movs	r3, #0
 801769c:	e066      	b.n	801776c <netRecv+0xec>
	}

	/* Verify that we have enough space to store the contents. */
	if (p->tot_len > PACKET_SIZE)
 801769e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176a0:	891b      	ldrh	r3, [r3, #8]
 80176a2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80176a6:	d912      	bls.n	80176ce <netRecv+0x4e>
	{
		ERROR("netRecv: received truncated message\r\n");
 80176a8:	f107 031c 	add.w	r3, r7, #28
 80176ac:	4618      	mov	r0, r3
 80176ae:	f000 fcbf 	bl	8018030 <getTime>
 80176b2:	69fb      	ldr	r3, [r7, #28]
 80176b4:	6a3a      	ldr	r2, [r7, #32]
 80176b6:	4619      	mov	r1, r3
 80176b8:	482e      	ldr	r0, [pc, #184]	; (8017774 <netRecv+0xf4>)
 80176ba:	f000 fe33 	bl	8018324 <iprintf>
 80176be:	482e      	ldr	r0, [pc, #184]	; (8017778 <netRecv+0xf8>)
 80176c0:	f000 fea4 	bl	801840c <puts>
		pbuf_free(p);
 80176c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80176c6:	f7f2 f99b 	bl	8009a00 <pbuf_free>
		return 0;
 80176ca:	2300      	movs	r3, #0
 80176cc:	e04e      	b.n	801776c <netRecv+0xec>
	}

	/* Verify there is contents to copy. */
	if (p->tot_len == 0)
 80176ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176d0:	891b      	ldrh	r3, [r3, #8]
 80176d2:	2b00      	cmp	r3, #0
 80176d4:	d112      	bne.n	80176fc <netRecv+0x7c>
	{
		ERROR("netRecv: received empty packet\r\n");
 80176d6:	f107 0314 	add.w	r3, r7, #20
 80176da:	4618      	mov	r0, r3
 80176dc:	f000 fca8 	bl	8018030 <getTime>
 80176e0:	697b      	ldr	r3, [r7, #20]
 80176e2:	69ba      	ldr	r2, [r7, #24]
 80176e4:	4619      	mov	r1, r3
 80176e6:	4823      	ldr	r0, [pc, #140]	; (8017774 <netRecv+0xf4>)
 80176e8:	f000 fe1c 	bl	8018324 <iprintf>
 80176ec:	4823      	ldr	r0, [pc, #140]	; (801777c <netRecv+0xfc>)
 80176ee:	f000 fe8d 	bl	801840c <puts>
		pbuf_free(p);
 80176f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80176f4:	f7f2 f984 	bl	8009a00 <pbuf_free>
		return 0;
 80176f8:	2300      	movs	r3, #0
 80176fa:	e037      	b.n	801776c <netRecv+0xec>
	}

	if (time != NULL)
 80176fc:	68bb      	ldr	r3, [r7, #8]
 80176fe:	2b00      	cmp	r3, #0
 8017700:	d009      	beq.n	8017716 <netRecv+0x96>
	{
#if LWIP_PTP
		time->seconds = p->time_sec;
 8017702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017704:	691b      	ldr	r3, [r3, #16]
 8017706:	461a      	mov	r2, r3
 8017708:	68bb      	ldr	r3, [r7, #8]
 801770a:	601a      	str	r2, [r3, #0]
		time->nanoseconds = p->time_nsec;
 801770c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801770e:	695b      	ldr	r3, [r3, #20]
 8017710:	461a      	mov	r2, r3
 8017712:	68bb      	ldr	r3, [r7, #8]
 8017714:	605a      	str	r2, [r3, #4]
		getTime(time);
#endif
	}

	/* Get the length of the buffer to copy. */
	length = p->tot_len;
 8017716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017718:	891b      	ldrh	r3, [r3, #8]
 801771a:	84fb      	strh	r3, [r7, #38]	; 0x26

	/* Copy the pbuf payload into the buffer. */
	pcopy = p;
 801771c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801771e:	62fb      	str	r3, [r7, #44]	; 0x2c
	j = 0;
 8017720:	2300      	movs	r3, #0
 8017722:	633b      	str	r3, [r7, #48]	; 0x30
	for (i = 0; i < length; i++)
 8017724:	2300      	movs	r3, #0
 8017726:	637b      	str	r3, [r7, #52]	; 0x34
 8017728:	e018      	b.n	801775c <netRecv+0xdc>
	{
		// Copy the next byte in the payload.
		buf[i] = ((u8_t*) pcopy->payload)[j++];
 801772a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801772c:	685a      	ldr	r2, [r3, #4]
 801772e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017730:	1c59      	adds	r1, r3, #1
 8017732:	6339      	str	r1, [r7, #48]	; 0x30
 8017734:	441a      	add	r2, r3
 8017736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017738:	68f9      	ldr	r1, [r7, #12]
 801773a:	440b      	add	r3, r1
 801773c:	7812      	ldrb	r2, [r2, #0]
 801773e:	701a      	strb	r2, [r3, #0]

		// Skip to the next buffer in the payload?
		if (j == pcopy->len)
 8017740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017742:	895b      	ldrh	r3, [r3, #10]
 8017744:	461a      	mov	r2, r3
 8017746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017748:	4293      	cmp	r3, r2
 801774a:	d104      	bne.n	8017756 <netRecv+0xd6>
		{
			// Move to the next buffer.
			pcopy = pcopy->next;
 801774c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801774e:	681b      	ldr	r3, [r3, #0]
 8017750:	62fb      	str	r3, [r7, #44]	; 0x2c
			j = 0;
 8017752:	2300      	movs	r3, #0
 8017754:	633b      	str	r3, [r7, #48]	; 0x30
	for (i = 0; i < length; i++)
 8017756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017758:	3301      	adds	r3, #1
 801775a:	637b      	str	r3, [r7, #52]	; 0x34
 801775c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801775e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017760:	429a      	cmp	r2, r3
 8017762:	dbe2      	blt.n	801772a <netRecv+0xaa>
		}
	}

	/* Free up the pbuf (chain). */
	pbuf_free(p);
 8017764:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017766:	f7f2 f94b 	bl	8009a00 <pbuf_free>

	return length;
 801776a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 801776c:	4618      	mov	r0, r3
 801776e:	3738      	adds	r7, #56	; 0x38
 8017770:	46bd      	mov	sp, r7
 8017772:	bd80      	pop	{r7, pc}
 8017774:	0801c2f4 	.word	0x0801c2f4
 8017778:	0801c474 	.word	0x0801c474
 801777c:	0801c49c 	.word	0x0801c49c

08017780 <netRecvEvent>:

ssize_t netRecvEvent(NetPath *netPath, octet_t *buf, TimeInternal *time)
{
 8017780:	b580      	push	{r7, lr}
 8017782:	b084      	sub	sp, #16
 8017784:	af00      	add	r7, sp, #0
 8017786:	60f8      	str	r0, [r7, #12]
 8017788:	60b9      	str	r1, [r7, #8]
 801778a:	607a      	str	r2, [r7, #4]
	return netRecv(buf, time, &netPath->eventQ);
 801778c:	68fb      	ldr	r3, [r7, #12]
 801778e:	3314      	adds	r3, #20
 8017790:	461a      	mov	r2, r3
 8017792:	6879      	ldr	r1, [r7, #4]
 8017794:	68b8      	ldr	r0, [r7, #8]
 8017796:	f7ff ff73 	bl	8017680 <netRecv>
 801779a:	4603      	mov	r3, r0
}
 801779c:	4618      	mov	r0, r3
 801779e:	3710      	adds	r7, #16
 80177a0:	46bd      	mov	sp, r7
 80177a2:	bd80      	pop	{r7, pc}

080177a4 <netRecvGeneral>:

ssize_t netRecvGeneral(NetPath *netPath, octet_t *buf, TimeInternal *time)
{
 80177a4:	b580      	push	{r7, lr}
 80177a6:	b084      	sub	sp, #16
 80177a8:	af00      	add	r7, sp, #0
 80177aa:	60f8      	str	r0, [r7, #12]
 80177ac:	60b9      	str	r1, [r7, #8]
 80177ae:	607a      	str	r2, [r7, #4]
	return netRecv(buf, time, &netPath->generalQ);
 80177b0:	68fb      	ldr	r3, [r7, #12]
 80177b2:	332c      	adds	r3, #44	; 0x2c
 80177b4:	461a      	mov	r2, r3
 80177b6:	6879      	ldr	r1, [r7, #4]
 80177b8:	68b8      	ldr	r0, [r7, #8]
 80177ba:	f7ff ff61 	bl	8017680 <netRecv>
 80177be:	4603      	mov	r3, r0
}
 80177c0:	4618      	mov	r0, r3
 80177c2:	3710      	adds	r7, #16
 80177c4:	46bd      	mov	sp, r7
 80177c6:	bd80      	pop	{r7, pc}

080177c8 <netSend>:

static ssize_t netSend(const octet_t *buf, int16_t length, TimeInternal *time,
		const int32_t *addr, struct udp_pcb *pcb)
{
 80177c8:	b580      	push	{r7, lr}
 80177ca:	b08c      	sub	sp, #48	; 0x30
 80177cc:	af00      	add	r7, sp, #0
 80177ce:	60f8      	str	r0, [r7, #12]
 80177d0:	607a      	str	r2, [r7, #4]
 80177d2:	603b      	str	r3, [r7, #0]
 80177d4:	460b      	mov	r3, r1
 80177d6:	817b      	strh	r3, [r7, #10]
	err_t result;
	struct pbuf *p;

	/* Allocate the tx pbuf based on the current size. */
	p = pbuf_alloc(PBUF_TRANSPORT, length, PBUF_RAM);
 80177d8:	897b      	ldrh	r3, [r7, #10]
 80177da:	2200      	movs	r2, #0
 80177dc:	4619      	mov	r1, r3
 80177de:	2000      	movs	r0, #0
 80177e0:	f7f1 fd9c 	bl	800931c <pbuf_alloc>
 80177e4:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (NULL == p)
 80177e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177e8:	2b00      	cmp	r3, #0
 80177ea:	d10e      	bne.n	801780a <netSend+0x42>
	{
		ERROR("netSend: Failed to allocate Tx Buffer\r\n");
 80177ec:	f107 0320 	add.w	r3, r7, #32
 80177f0:	4618      	mov	r0, r3
 80177f2:	f000 fc1d 	bl	8018030 <getTime>
 80177f6:	6a3b      	ldr	r3, [r7, #32]
 80177f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80177fa:	4619      	mov	r1, r3
 80177fc:	482e      	ldr	r0, [pc, #184]	; (80178b8 <netSend+0xf0>)
 80177fe:	f000 fd91 	bl	8018324 <iprintf>
 8017802:	482e      	ldr	r0, [pc, #184]	; (80178bc <netSend+0xf4>)
 8017804:	f000 fe02 	bl	801840c <puts>
		goto fail01;
 8017808:	e050      	b.n	80178ac <netSend+0xe4>
	}

	/* Copy the incoming data into the pbuf payload. */
	result = pbuf_take(p, buf, length);
 801780a:	897b      	ldrh	r3, [r7, #10]
 801780c:	461a      	mov	r2, r3
 801780e:	68f9      	ldr	r1, [r7, #12]
 8017810:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017812:	f7f2 fbb5 	bl	8009f80 <pbuf_take>
 8017816:	4603      	mov	r3, r0
 8017818:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	if (ERR_OK != result)
 801781c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8017820:	2b00      	cmp	r3, #0
 8017822:	d011      	beq.n	8017848 <netSend+0x80>
	{
		ERROR("netSend: Failed to copy data to Pbuf (%d)\r\n", result);
 8017824:	f107 0318 	add.w	r3, r7, #24
 8017828:	4618      	mov	r0, r3
 801782a:	f000 fc01 	bl	8018030 <getTime>
 801782e:	69bb      	ldr	r3, [r7, #24]
 8017830:	69fa      	ldr	r2, [r7, #28]
 8017832:	4619      	mov	r1, r3
 8017834:	4820      	ldr	r0, [pc, #128]	; (80178b8 <netSend+0xf0>)
 8017836:	f000 fd75 	bl	8018324 <iprintf>
 801783a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 801783e:	4619      	mov	r1, r3
 8017840:	481f      	ldr	r0, [pc, #124]	; (80178c0 <netSend+0xf8>)
 8017842:	f000 fd6f 	bl	8018324 <iprintf>
		goto fail02;
 8017846:	e02e      	b.n	80178a6 <netSend+0xde>

	/* send the buffer. */
#if PROTOCOL == IEEE802_3
	result = raw_sendto(p);
#else
	result = udp_sendto(pcb, p, (void*) addr, pcb->local_port);
 8017848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801784a:	8a5b      	ldrh	r3, [r3, #18]
 801784c:	683a      	ldr	r2, [r7, #0]
 801784e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017850:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017852:	f7f7 faef 	bl	800ee34 <udp_sendto>
 8017856:	4603      	mov	r3, r0
 8017858:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#endif
	if (ERR_OK != result)
 801785c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8017860:	2b00      	cmp	r3, #0
 8017862:	d011      	beq.n	8017888 <netSend+0xc0>
	{
		ERROR("netSend: Failed to send data (%d)\r\n", result);
 8017864:	f107 0310 	add.w	r3, r7, #16
 8017868:	4618      	mov	r0, r3
 801786a:	f000 fbe1 	bl	8018030 <getTime>
 801786e:	693b      	ldr	r3, [r7, #16]
 8017870:	697a      	ldr	r2, [r7, #20]
 8017872:	4619      	mov	r1, r3
 8017874:	4810      	ldr	r0, [pc, #64]	; (80178b8 <netSend+0xf0>)
 8017876:	f000 fd55 	bl	8018324 <iprintf>
 801787a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 801787e:	4619      	mov	r1, r3
 8017880:	4810      	ldr	r0, [pc, #64]	; (80178c4 <netSend+0xfc>)
 8017882:	f000 fd4f 	bl	8018324 <iprintf>
		goto fail02;
 8017886:	e00e      	b.n	80178a6 <netSend+0xde>
	}

	if (time != NULL)
 8017888:	687b      	ldr	r3, [r7, #4]
 801788a:	2b00      	cmp	r3, #0
 801788c:	d00a      	beq.n	80178a4 <netSend+0xdc>
	{
#if LWIP_PTP
		time->seconds = p->time_sec;
 801788e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017890:	691b      	ldr	r3, [r3, #16]
 8017892:	461a      	mov	r2, r3
 8017894:	687b      	ldr	r3, [r7, #4]
 8017896:	601a      	str	r2, [r3, #0]
		time->nanoseconds = p->time_nsec;
 8017898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801789a:	695b      	ldr	r3, [r3, #20]
 801789c:	461a      	mov	r2, r3
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	605a      	str	r2, [r3, #4]
 80178a2:	e000      	b.n	80178a6 <netSend+0xde>
	else
	{
		DBGV("netSend\r\n");
	}

	fail02: pbuf_free(p);
 80178a4:	bf00      	nop
 80178a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80178a8:	f7f2 f8aa 	bl	8009a00 <pbuf_free>

	fail01: return length;
 80178ac:	f9b7 300a 	ldrsh.w	r3, [r7, #10]

	/*  return (0 == result) ? length : 0; */
}
 80178b0:	4618      	mov	r0, r3
 80178b2:	3730      	adds	r7, #48	; 0x30
 80178b4:	46bd      	mov	sp, r7
 80178b6:	bd80      	pop	{r7, pc}
 80178b8:	0801c2f4 	.word	0x0801c2f4
 80178bc:	0801c4bc 	.word	0x0801c4bc
 80178c0:	0801c4e4 	.word	0x0801c4e4
 80178c4:	0801c510 	.word	0x0801c510

080178c8 <netSendEvent>:

ssize_t netSendEvent(NetPath *netPath, const octet_t *buf, int16_t length,
		TimeInternal *time)
{
 80178c8:	b580      	push	{r7, lr}
 80178ca:	b086      	sub	sp, #24
 80178cc:	af02      	add	r7, sp, #8
 80178ce:	60f8      	str	r0, [r7, #12]
 80178d0:	60b9      	str	r1, [r7, #8]
 80178d2:	603b      	str	r3, [r7, #0]
 80178d4:	4613      	mov	r3, r2
 80178d6:	80fb      	strh	r3, [r7, #6]
	return netSend(buf, length, time, &netPath->multicastAddr,
 80178d8:	68fa      	ldr	r2, [r7, #12]
 80178da:	68fb      	ldr	r3, [r7, #12]
 80178dc:	68db      	ldr	r3, [r3, #12]
 80178de:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80178e2:	9300      	str	r3, [sp, #0]
 80178e4:	4613      	mov	r3, r2
 80178e6:	683a      	ldr	r2, [r7, #0]
 80178e8:	68b8      	ldr	r0, [r7, #8]
 80178ea:	f7ff ff6d 	bl	80177c8 <netSend>
 80178ee:	4603      	mov	r3, r0
			netPath->eventPcb);
}
 80178f0:	4618      	mov	r0, r3
 80178f2:	3710      	adds	r7, #16
 80178f4:	46bd      	mov	sp, r7
 80178f6:	bd80      	pop	{r7, pc}

080178f8 <netSendGeneral>:

ssize_t netSendGeneral(NetPath *netPath, const octet_t *buf, int16_t length)
{
 80178f8:	b580      	push	{r7, lr}
 80178fa:	b086      	sub	sp, #24
 80178fc:	af02      	add	r7, sp, #8
 80178fe:	60f8      	str	r0, [r7, #12]
 8017900:	60b9      	str	r1, [r7, #8]
 8017902:	4613      	mov	r3, r2
 8017904:	80fb      	strh	r3, [r7, #6]
	return netSend(buf, length, NULL, &netPath->multicastAddr,
 8017906:	68fa      	ldr	r2, [r7, #12]
 8017908:	68fb      	ldr	r3, [r7, #12]
 801790a:	691b      	ldr	r3, [r3, #16]
 801790c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8017910:	9300      	str	r3, [sp, #0]
 8017912:	4613      	mov	r3, r2
 8017914:	2200      	movs	r2, #0
 8017916:	68b8      	ldr	r0, [r7, #8]
 8017918:	f7ff ff56 	bl	80177c8 <netSend>
 801791c:	4603      	mov	r3, r0
			netPath->generalPcb);
}
 801791e:	4618      	mov	r0, r3
 8017920:	3710      	adds	r7, #16
 8017922:	46bd      	mov	sp, r7
 8017924:	bd80      	pop	{r7, pc}

08017926 <netSendPeerGeneral>:

ssize_t netSendPeerGeneral(NetPath *netPath, const octet_t *buf, int16_t length)
{
 8017926:	b580      	push	{r7, lr}
 8017928:	b086      	sub	sp, #24
 801792a:	af02      	add	r7, sp, #8
 801792c:	60f8      	str	r0, [r7, #12]
 801792e:	60b9      	str	r1, [r7, #8]
 8017930:	4613      	mov	r3, r2
 8017932:	80fb      	strh	r3, [r7, #6]
	return netSend(buf, length, NULL, &netPath->peerMulticastAddr,
 8017934:	68fb      	ldr	r3, [r7, #12]
 8017936:	1d1a      	adds	r2, r3, #4
 8017938:	68fb      	ldr	r3, [r7, #12]
 801793a:	691b      	ldr	r3, [r3, #16]
 801793c:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8017940:	9300      	str	r3, [sp, #0]
 8017942:	4613      	mov	r3, r2
 8017944:	2200      	movs	r2, #0
 8017946:	68b8      	ldr	r0, [r7, #8]
 8017948:	f7ff ff3e 	bl	80177c8 <netSend>
 801794c:	4603      	mov	r3, r0
			netPath->generalPcb);
}
 801794e:	4618      	mov	r0, r3
 8017950:	3710      	adds	r7, #16
 8017952:	46bd      	mov	sp, r7
 8017954:	bd80      	pop	{r7, pc}

08017956 <netSendPeerEvent>:

ssize_t netSendPeerEvent(NetPath *netPath, const octet_t *buf, int16_t length,
		TimeInternal *time)
{
 8017956:	b580      	push	{r7, lr}
 8017958:	b086      	sub	sp, #24
 801795a:	af02      	add	r7, sp, #8
 801795c:	60f8      	str	r0, [r7, #12]
 801795e:	60b9      	str	r1, [r7, #8]
 8017960:	603b      	str	r3, [r7, #0]
 8017962:	4613      	mov	r3, r2
 8017964:	80fb      	strh	r3, [r7, #6]
	return netSend(buf, length, time, &netPath->peerMulticastAddr,
 8017966:	68fb      	ldr	r3, [r7, #12]
 8017968:	1d1a      	adds	r2, r3, #4
 801796a:	68fb      	ldr	r3, [r7, #12]
 801796c:	68db      	ldr	r3, [r3, #12]
 801796e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8017972:	9300      	str	r3, [sp, #0]
 8017974:	4613      	mov	r3, r2
 8017976:	683a      	ldr	r2, [r7, #0]
 8017978:	68b8      	ldr	r0, [r7, #8]
 801797a:	f7ff ff25 	bl	80177c8 <netSend>
 801797e:	4603      	mov	r3, r0
			netPath->eventPcb);
}
 8017980:	4618      	mov	r0, r3
 8017982:	3710      	adds	r7, #16
 8017984:	46bd      	mov	sp, r7
 8017986:	bd80      	pop	{r7, pc}

08017988 <initClock>:
#include "../ptpd.h"

void initClock(PtpClock *ptpClock)
{
 8017988:	b580      	push	{r7, lr}
 801798a:	b084      	sub	sp, #16
 801798c:	af00      	add	r7, sp, #0
 801798e:	6078      	str	r0, [r7, #4]
	DBG("initClock\n");
 8017990:	f107 0308 	add.w	r3, r7, #8
 8017994:	4618      	mov	r0, r3
 8017996:	f000 fb4b 	bl	8018030 <getTime>
 801799a:	68bb      	ldr	r3, [r7, #8]
 801799c:	68fa      	ldr	r2, [r7, #12]
 801799e:	4619      	mov	r1, r3
 80179a0:	483b      	ldr	r0, [pc, #236]	; (8017a90 <initClock+0x108>)
 80179a2:	f000 fcbf 	bl	8018324 <iprintf>
 80179a6:	483b      	ldr	r0, [pc, #236]	; (8017a94 <initClock+0x10c>)
 80179a8:	f000 fd30 	bl	801840c <puts>

	/* Clear vars */
	ptpClock->Tms.seconds = ptpClock->Tms.nanoseconds = 0;
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	2200      	movs	r2, #0
 80179b0:	f8c3 232c 	str.w	r2, [r3, #812]	; 0x32c
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	f8d3 232c 	ldr.w	r2, [r3, #812]	; 0x32c
 80179ba:	687b      	ldr	r3, [r7, #4]
 80179bc:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
	ptpClock->observedDrift = 0;  /* clears clock servo accumulator (the I term) */
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	2200      	movs	r2, #0
 80179c4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

	/* One way delay */
	ptpClock->owd_filt.n = 0;
 80179c8:	687b      	ldr	r3, [r7, #4]
 80179ca:	2200      	movs	r2, #0
 80179cc:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
	ptpClock->owd_filt.s = ptpClock->servo.sDelay;
 80179d0:	687b      	ldr	r3, [r7, #4]
 80179d2:	f9b3 2434 	ldrsh.w	r2, [r3, #1076]	; 0x434
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	f8a3 23a8 	strh.w	r2, [r3, #936]	; 0x3a8

	/* Offset from master */
	ptpClock->ofm_filt.n = 0;
 80179dc:	687b      	ldr	r3, [r7, #4]
 80179de:	2200      	movs	r2, #0
 80179e0:	f8c3 239c 	str.w	r2, [r3, #924]	; 0x39c
	ptpClock->ofm_filt.s = ptpClock->servo.sOffset;
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	f9b3 2436 	ldrsh.w	r2, [r3, #1078]	; 0x436
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	f8a3 2398 	strh.w	r2, [r3, #920]	; 0x398
		ptpClock->slv_filt.s = 6;
		ptpClock->offsetHistory[0] = 0;
		ptpClock->offsetHistory[1] = 0;
	}

	ptpClock->waitingForFollowUp = FALSE;
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	2200      	movs	r2, #0
 80179f4:	f883 238c 	strb.w	r2, [r3, #908]	; 0x38c

	ptpClock->waitingForPDelayRespFollowUp = FALSE;
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	2200      	movs	r2, #0
 80179fc:	f883 238d 	strb.w	r2, [r3, #909]	; 0x38d

	ptpClock->pdelay_t1.seconds = ptpClock->pdelay_t1.nanoseconds = 0;
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	2200      	movs	r2, #0
 8017a04:	f8c3 233c 	str.w	r2, [r3, #828]	; 0x33c
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 8017a0e:	687b      	ldr	r3, [r7, #4]
 8017a10:	f8c3 2338 	str.w	r2, [r3, #824]	; 0x338
	ptpClock->pdelay_t2.seconds = ptpClock->pdelay_t2.nanoseconds = 0;
 8017a14:	687b      	ldr	r3, [r7, #4]
 8017a16:	2200      	movs	r2, #0
 8017a18:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
 8017a1c:	687b      	ldr	r3, [r7, #4]
 8017a1e:	f8d3 2344 	ldr.w	r2, [r3, #836]	; 0x344
 8017a22:	687b      	ldr	r3, [r7, #4]
 8017a24:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
	ptpClock->pdelay_t3.seconds = ptpClock->pdelay_t3.nanoseconds = 0;
 8017a28:	687b      	ldr	r3, [r7, #4]
 8017a2a:	2200      	movs	r2, #0
 8017a2c:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
 8017a30:	687b      	ldr	r3, [r7, #4]
 8017a32:	f8d3 234c 	ldr.w	r2, [r3, #844]	; 0x34c
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	ptpClock->pdelay_t4.seconds = ptpClock->pdelay_t4.nanoseconds = 0;
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	2200      	movs	r2, #0
 8017a40:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
 8017a44:	687b      	ldr	r3, [r7, #4]
 8017a46:	f8d3 2354 	ldr.w	r2, [r3, #852]	; 0x354
 8017a4a:	687b      	ldr	r3, [r7, #4]
 8017a4c:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350

	/* Reset parent statistics */
	ptpClock->parentDS.parentStats = FALSE;
 8017a50:	687b      	ldr	r3, [r7, #4]
 8017a52:	2200      	movs	r2, #0
 8017a54:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	ptpClock->parentDS.observedParentClockPhaseChangeRate = 0;
 8017a58:	687b      	ldr	r3, [r7, #4]
 8017a5a:	2200      	movs	r2, #0
 8017a5c:	639a      	str	r2, [r3, #56]	; 0x38
	ptpClock->parentDS.observedParentOffsetScaledLogVariance = 0;
 8017a5e:	687b      	ldr	r3, [r7, #4]
 8017a60:	2200      	movs	r2, #0
 8017a62:	869a      	strh	r2, [r3, #52]	; 0x34

	/* Level clock */
	if (!ptpClock->servo.noAdjust)
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	f893 3429 	ldrb.w	r3, [r3, #1065]	; 0x429
 8017a6a:	f083 0301 	eor.w	r3, r3, #1
 8017a6e:	b2db      	uxtb	r3, r3
 8017a70:	2b00      	cmp	r3, #0
 8017a72:	d002      	beq.n	8017a7a <initClock+0xf2>
		adjFreq(0);
 8017a74:	2000      	movs	r0, #0
 8017a76:	f000 fb2b 	bl	80180d0 <adjFreq>

	netEmptyEventQ(&ptpClock->netPath);
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	f503 7373 	add.w	r3, r3, #972	; 0x3cc
 8017a80:	4618      	mov	r0, r3
 8017a82:	f7ff fdef 	bl	8017664 <netEmptyEventQ>
}
 8017a86:	bf00      	nop
 8017a88:	3710      	adds	r7, #16
 8017a8a:	46bd      	mov	sp, r7
 8017a8c:	bd80      	pop	{r7, pc}
 8017a8e:	bf00      	nop
 8017a90:	0801c534 	.word	0x0801c534
 8017a94:	0801c544 	.word	0x0801c544

08017a98 <filter>:
//#if FILTER_TYPE == KALMAN_FILTER
//	
//#endif
//}
static void filter(int32_t * nsec_current, Filter * filt)
{
 8017a98:	b5b0      	push	{r4, r5, r7, lr}
 8017a9a:	b084      	sub	sp, #16
 8017a9c:	af00      	add	r7, sp, #0
 8017a9e:	6078      	str	r0, [r7, #4]
 8017aa0:	6039      	str	r1, [r7, #0]
	float alpha = 0.2;
 8017aa2:	4b1c      	ldr	r3, [pc, #112]	; (8017b14 <filter+0x7c>)
 8017aa4:	60fb      	str	r3, [r7, #12]
	static int32_t prev = 0;
	int32_t n = *nsec_current;
 8017aa6:	687b      	ldr	r3, [r7, #4]
 8017aa8:	681b      	ldr	r3, [r3, #0]
 8017aaa:	60bb      	str	r3, [r7, #8]
	*nsec_current = (int32_t)(alpha*(float)n + 0*(1-alpha)*(float)prev);
 8017aac:	68b8      	ldr	r0, [r7, #8]
 8017aae:	f7e8 fc51 	bl	8000354 <__aeabi_i2f>
 8017ab2:	4603      	mov	r3, r0
 8017ab4:	68f9      	ldr	r1, [r7, #12]
 8017ab6:	4618      	mov	r0, r3
 8017ab8:	f7e8 fca0 	bl	80003fc <__aeabi_fmul>
 8017abc:	4603      	mov	r3, r0
 8017abe:	461c      	mov	r4, r3
 8017ac0:	68f9      	ldr	r1, [r7, #12]
 8017ac2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8017ac6:	f7e8 fb8f 	bl	80001e8 <__aeabi_fsub>
 8017aca:	4603      	mov	r3, r0
 8017acc:	f04f 0100 	mov.w	r1, #0
 8017ad0:	4618      	mov	r0, r3
 8017ad2:	f7e8 fc93 	bl	80003fc <__aeabi_fmul>
 8017ad6:	4603      	mov	r3, r0
 8017ad8:	461d      	mov	r5, r3
 8017ada:	4b0f      	ldr	r3, [pc, #60]	; (8017b18 <filter+0x80>)
 8017adc:	681b      	ldr	r3, [r3, #0]
 8017ade:	4618      	mov	r0, r3
 8017ae0:	f7e8 fc38 	bl	8000354 <__aeabi_i2f>
 8017ae4:	4603      	mov	r3, r0
 8017ae6:	4619      	mov	r1, r3
 8017ae8:	4628      	mov	r0, r5
 8017aea:	f7e8 fc87 	bl	80003fc <__aeabi_fmul>
 8017aee:	4603      	mov	r3, r0
 8017af0:	4619      	mov	r1, r3
 8017af2:	4620      	mov	r0, r4
 8017af4:	f7e8 fb7a 	bl	80001ec <__addsf3>
 8017af8:	4603      	mov	r3, r0
 8017afa:	4618      	mov	r0, r3
 8017afc:	f7e8 fe44 	bl	8000788 <__aeabi_f2iz>
 8017b00:	4602      	mov	r2, r0
 8017b02:	687b      	ldr	r3, [r7, #4]
 8017b04:	601a      	str	r2, [r3, #0]
	prev = n;
 8017b06:	4a04      	ldr	r2, [pc, #16]	; (8017b18 <filter+0x80>)
 8017b08:	68bb      	ldr	r3, [r7, #8]
 8017b0a:	6013      	str	r3, [r2, #0]
}
 8017b0c:	bf00      	nop
 8017b0e:	3710      	adds	r7, #16
 8017b10:	46bd      	mov	sp, r7
 8017b12:	bdb0      	pop	{r4, r5, r7, pc}
 8017b14:	3e4ccccd 	.word	0x3e4ccccd
 8017b18:	20004be8 	.word	0x20004be8

08017b1c <updateOffset>:

/* 11.2 */
void updateOffset(PtpClock *ptpClock, const TimeInternal *syncEventIngressTimestamp,
									const TimeInternal *preciseOriginTimestamp, const TimeInternal *correctionField)
{
 8017b1c:	b580      	push	{r7, lr}
 8017b1e:	b084      	sub	sp, #16
 8017b20:	af00      	add	r7, sp, #0
 8017b22:	60f8      	str	r0, [r7, #12]
 8017b24:	60b9      	str	r1, [r7, #8]
 8017b26:	607a      	str	r2, [r7, #4]
 8017b28:	603b      	str	r3, [r7, #0]
	/*  <offsetFromMaster> = <syncEventIngressTimestamp> - <preciseOriginTimestamp>
		 - <meanPathDelay>  -  correctionField  of  Sync  message
		 -  correctionField  of  Follow_Up message. */

	/* Compute offsetFromMaster */
	subTime(&ptpClock->Tms, syncEventIngressTimestamp, preciseOriginTimestamp);
 8017b2a:	68fb      	ldr	r3, [r7, #12]
 8017b2c:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8017b30:	687a      	ldr	r2, [r7, #4]
 8017b32:	68b9      	ldr	r1, [r7, #8]
 8017b34:	4618      	mov	r0, r3
 8017b36:	f7fc f822 	bl	8013b7e <subTime>
	subTime(&ptpClock->Tms, &ptpClock->Tms, correctionField);
 8017b3a:	68fb      	ldr	r3, [r7, #12]
 8017b3c:	f503 704a 	add.w	r0, r3, #808	; 0x328
 8017b40:	68fb      	ldr	r3, [r7, #12]
 8017b42:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8017b46:	683a      	ldr	r2, [r7, #0]
 8017b48:	4619      	mov	r1, r3
 8017b4a:	f7fc f818 	bl	8013b7e <subTime>

	ptpClock->currentDS.offsetFromMaster = ptpClock->Tms;
 8017b4e:	68fb      	ldr	r3, [r7, #12]
 8017b50:	68fa      	ldr	r2, [r7, #12]
 8017b52:	3318      	adds	r3, #24
 8017b54:	f502 724a 	add.w	r2, r2, #808	; 0x328
 8017b58:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017b5c:	e883 0003 	stmia.w	r3, {r0, r1}

	switch (ptpClock->portDS.delayMechanism)
 8017b60:	68fb      	ldr	r3, [r7, #12]
 8017b62:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8017b66:	2b01      	cmp	r3, #1
 8017b68:	d002      	beq.n	8017b70 <updateOffset+0x54>
 8017b6a:	2b02      	cmp	r3, #2
 8017b6c:	d00c      	beq.n	8017b88 <updateOffset+0x6c>
		case P2P:
				subTime(&ptpClock->currentDS.offsetFromMaster, &ptpClock->currentDS.offsetFromMaster, &ptpClock->portDS.peerMeanPathDelay);
				break;

		default:
				break;
 8017b6e:	e017      	b.n	8017ba0 <updateOffset+0x84>
				subTime(&ptpClock->currentDS.offsetFromMaster, &ptpClock->currentDS.offsetFromMaster, &ptpClock->currentDS.meanPathDelay);
 8017b70:	68fb      	ldr	r3, [r7, #12]
 8017b72:	f103 0018 	add.w	r0, r3, #24
 8017b76:	68fb      	ldr	r3, [r7, #12]
 8017b78:	f103 0118 	add.w	r1, r3, #24
 8017b7c:	68fb      	ldr	r3, [r7, #12]
 8017b7e:	3320      	adds	r3, #32
 8017b80:	461a      	mov	r2, r3
 8017b82:	f7fb fffc 	bl	8013b7e <subTime>
				break;
 8017b86:	e00b      	b.n	8017ba0 <updateOffset+0x84>
				subTime(&ptpClock->currentDS.offsetFromMaster, &ptpClock->currentDS.offsetFromMaster, &ptpClock->portDS.peerMeanPathDelay);
 8017b88:	68fb      	ldr	r3, [r7, #12]
 8017b8a:	f103 0018 	add.w	r0, r3, #24
 8017b8e:	68fb      	ldr	r3, [r7, #12]
 8017b90:	f103 0118 	add.w	r1, r3, #24
 8017b94:	68fb      	ldr	r3, [r7, #12]
 8017b96:	3364      	adds	r3, #100	; 0x64
 8017b98:	461a      	mov	r2, r3
 8017b9a:	f7fb fff0 	bl	8013b7e <subTime>
				break;
 8017b9e:	bf00      	nop
	}

	if (ptpClock->currentDS.offsetFromMaster.seconds != 0)
 8017ba0:	68fb      	ldr	r3, [r7, #12]
 8017ba2:	699b      	ldr	r3, [r3, #24]
 8017ba4:	2b00      	cmp	r3, #0
 8017ba6:	d00d      	beq.n	8017bc4 <updateOffset+0xa8>
	{
		if (ptpClock->portDS.portState == PTP_SLAVE)
 8017ba8:	68fb      	ldr	r3, [r7, #12]
 8017baa:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8017bae:	2b08      	cmp	r3, #8
 8017bb0:	d14c      	bne.n	8017c4c <updateOffset+0x130>
		{
				setFlag(ptpClock->events, SYNCHRONIZATION_FAULT);
 8017bb2:	68fb      	ldr	r3, [r7, #12]
 8017bb4:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
 8017bb8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8017bbc:	68fb      	ldr	r3, [r7, #12]
 8017bbe:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
		}

		DBGV("updateOffset: cannot filter seconds\n");

		return;
 8017bc2:	e043      	b.n	8017c4c <updateOffset+0x130>
	}
	
	if(init_flag<3){
 8017bc4:	4b23      	ldr	r3, [pc, #140]	; (8017c54 <updateOffset+0x138>)
 8017bc6:	781b      	ldrb	r3, [r3, #0]
 8017bc8:	2b02      	cmp	r3, #2
 8017bca:	d806      	bhi.n	8017bda <updateOffset+0xbe>
		init_flag++;
 8017bcc:	4b21      	ldr	r3, [pc, #132]	; (8017c54 <updateOffset+0x138>)
 8017bce:	781b      	ldrb	r3, [r3, #0]
 8017bd0:	3301      	adds	r3, #1
 8017bd2:	b2da      	uxtb	r2, r3
 8017bd4:	4b1f      	ldr	r3, [pc, #124]	; (8017c54 <updateOffset+0x138>)
 8017bd6:	701a      	strb	r2, [r3, #0]
 8017bd8:	e009      	b.n	8017bee <updateOffset+0xd2>
	}
	else{
	  	/* Filter offsetFromMaster */
	  	filter(&ptpClock->currentDS.offsetFromMaster.nanoseconds, &ptpClock->ofm_filt);
 8017bda:	68fb      	ldr	r3, [r7, #12]
 8017bdc:	f103 021c 	add.w	r2, r3, #28
 8017be0:	68fb      	ldr	r3, [r7, #12]
 8017be2:	f503 7364 	add.w	r3, r3, #912	; 0x390
 8017be6:	4619      	mov	r1, r3
 8017be8:	4610      	mov	r0, r2
 8017bea:	f7ff ff55 	bl	8017a98 <filter>
	}

	/* Check results */
	if (abs(ptpClock->currentDS.offsetFromMaster.nanoseconds) < DEFAULT_CALIBRATED_OFFSET_NS)
 8017bee:	68fb      	ldr	r3, [r7, #12]
 8017bf0:	69db      	ldr	r3, [r3, #28]
 8017bf2:	4a19      	ldr	r2, [pc, #100]	; (8017c58 <updateOffset+0x13c>)
 8017bf4:	4293      	cmp	r3, r2
 8017bf6:	db13      	blt.n	8017c20 <updateOffset+0x104>
 8017bf8:	68fb      	ldr	r3, [r7, #12]
 8017bfa:	69db      	ldr	r3, [r3, #28]
 8017bfc:	f242 720f 	movw	r2, #9999	; 0x270f
 8017c00:	4293      	cmp	r3, r2
 8017c02:	dc0d      	bgt.n	8017c20 <updateOffset+0x104>
	{
		if (ptpClock->portDS.portState == PTP_UNCALIBRATED)
 8017c04:	68fb      	ldr	r3, [r7, #12]
 8017c06:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8017c0a:	2b07      	cmp	r3, #7
 8017c0c:	d11f      	bne.n	8017c4e <updateOffset+0x132>
		{
				setFlag(ptpClock->events, MASTER_CLOCK_SELECTED);
 8017c0e:	68fb      	ldr	r3, [r7, #12]
 8017c10:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
 8017c14:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8017c18:	68fb      	ldr	r3, [r7, #12]
 8017c1a:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
		if (ptpClock->portDS.portState == PTP_UNCALIBRATED)
 8017c1e:	e016      	b.n	8017c4e <updateOffset+0x132>
		}
	}
	else if (abs(ptpClock->currentDS.offsetFromMaster.nanoseconds) > DEFAULT_UNCALIBRATED_OFFSET_NS)
 8017c20:	68fb      	ldr	r3, [r7, #12]
 8017c22:	69db      	ldr	r3, [r3, #28]
 8017c24:	2b00      	cmp	r3, #0
 8017c26:	bfb8      	it	lt
 8017c28:	425b      	neglt	r3, r3
 8017c2a:	4a0c      	ldr	r2, [pc, #48]	; (8017c5c <updateOffset+0x140>)
 8017c2c:	4293      	cmp	r3, r2
 8017c2e:	dd0e      	ble.n	8017c4e <updateOffset+0x132>
	{
		if (ptpClock->portDS.portState == PTP_SLAVE)
 8017c30:	68fb      	ldr	r3, [r7, #12]
 8017c32:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8017c36:	2b08      	cmp	r3, #8
 8017c38:	d109      	bne.n	8017c4e <updateOffset+0x132>
		{
				setFlag(ptpClock->events, SYNCHRONIZATION_FAULT);
 8017c3a:	68fb      	ldr	r3, [r7, #12]
 8017c3c:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
 8017c40:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8017c44:	68fb      	ldr	r3, [r7, #12]
 8017c46:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
 8017c4a:	e000      	b.n	8017c4e <updateOffset+0x132>
		return;
 8017c4c:	bf00      	nop
		}
	}
}
 8017c4e:	3710      	adds	r7, #16
 8017c50:	46bd      	mov	sp, r7
 8017c52:	bd80      	pop	{r7, pc}
 8017c54:	20004bec 	.word	0x20004bec
 8017c58:	ffffd8f1 	.word	0xffffd8f1
 8017c5c:	000f4240 	.word	0x000f4240

08017c60 <updateDelay>:

/* 11.3 */
void updateDelay(PtpClock * ptpClock, const TimeInternal *delayEventEgressTimestamp,
								 const TimeInternal *recieveTimestamp, const TimeInternal *correctionField)
{
 8017c60:	b580      	push	{r7, lr}
 8017c62:	b084      	sub	sp, #16
 8017c64:	af00      	add	r7, sp, #0
 8017c66:	60f8      	str	r0, [r7, #12]
 8017c68:	60b9      	str	r1, [r7, #8]
 8017c6a:	607a      	str	r2, [r7, #4]
 8017c6c:	603b      	str	r3, [r7, #0]
	/* Tms valid ? */
	if (0 == ptpClock->ofm_filt.n)
 8017c6e:	68fb      	ldr	r3, [r7, #12]
 8017c70:	f8d3 339c 	ldr.w	r3, [r3, #924]	; 0x39c
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	d031      	beq.n	8017cdc <updateDelay+0x7c>
	{
		DBGV("updateDelay: Tms is not valid");
		return;
	}

	subTime(&ptpClock->Tsm, recieveTimestamp, delayEventEgressTimestamp);
 8017c78:	68fb      	ldr	r3, [r7, #12]
 8017c7a:	f503 734c 	add.w	r3, r3, #816	; 0x330
 8017c7e:	68ba      	ldr	r2, [r7, #8]
 8017c80:	6879      	ldr	r1, [r7, #4]
 8017c82:	4618      	mov	r0, r3
 8017c84:	f7fb ff7b 	bl	8013b7e <subTime>
	subTime(&ptpClock->Tsm, &ptpClock->Tsm, correctionField);
 8017c88:	68fb      	ldr	r3, [r7, #12]
 8017c8a:	f503 704c 	add.w	r0, r3, #816	; 0x330
 8017c8e:	68fb      	ldr	r3, [r7, #12]
 8017c90:	f503 734c 	add.w	r3, r3, #816	; 0x330
 8017c94:	683a      	ldr	r2, [r7, #0]
 8017c96:	4619      	mov	r1, r3
 8017c98:	f7fb ff71 	bl	8013b7e <subTime>
	addTime(&ptpClock->currentDS.meanPathDelay, &ptpClock->Tms, &ptpClock->Tsm);
 8017c9c:	68fb      	ldr	r3, [r7, #12]
 8017c9e:	f103 0020 	add.w	r0, r3, #32
 8017ca2:	68fb      	ldr	r3, [r7, #12]
 8017ca4:	f503 714a 	add.w	r1, r3, #808	; 0x328
 8017ca8:	68fb      	ldr	r3, [r7, #12]
 8017caa:	f503 734c 	add.w	r3, r3, #816	; 0x330
 8017cae:	461a      	mov	r2, r3
 8017cb0:	f7fb ff4a 	bl	8013b48 <addTime>
	div2Time(&ptpClock->currentDS.meanPathDelay);
 8017cb4:	68fb      	ldr	r3, [r7, #12]
 8017cb6:	3320      	adds	r3, #32
 8017cb8:	4618      	mov	r0, r3
 8017cba:	f7fb ff7b 	bl	8013bb4 <div2Time>

	/* Filter delay */
	if (0 != ptpClock->currentDS.meanPathDelay.seconds)
 8017cbe:	68fb      	ldr	r3, [r7, #12]
 8017cc0:	6a1b      	ldr	r3, [r3, #32]
 8017cc2:	2b00      	cmp	r3, #0
 8017cc4:	d10b      	bne.n	8017cde <updateDelay+0x7e>
	{
		DBGV("updateDelay: cannot filter with seconds");
	}
	else
	{
		filter(&ptpClock->currentDS.meanPathDelay.nanoseconds, &ptpClock->owd_filt);
 8017cc6:	68fb      	ldr	r3, [r7, #12]
 8017cc8:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8017ccc:	68fb      	ldr	r3, [r7, #12]
 8017cce:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8017cd2:	4619      	mov	r1, r3
 8017cd4:	4610      	mov	r0, r2
 8017cd6:	f7ff fedf 	bl	8017a98 <filter>
 8017cda:	e000      	b.n	8017cde <updateDelay+0x7e>
		return;
 8017cdc:	bf00      	nop
	}
}
 8017cde:	3710      	adds	r7, #16
 8017ce0:	46bd      	mov	sp, r7
 8017ce2:	bd80      	pop	{r7, pc}

08017ce4 <updatePeerDelay>:

void updatePeerDelay(PtpClock *ptpClock, const TimeInternal *correctionField, bool  twoStep)
{
 8017ce4:	b580      	push	{r7, lr}
 8017ce6:	b088      	sub	sp, #32
 8017ce8:	af00      	add	r7, sp, #0
 8017cea:	60f8      	str	r0, [r7, #12]
 8017cec:	60b9      	str	r1, [r7, #8]
 8017cee:	4613      	mov	r3, r2
 8017cf0:	71fb      	strb	r3, [r7, #7]
	DBGV("updatePeerDelay\n");

	if (twoStep)
 8017cf2:	79fb      	ldrb	r3, [r7, #7]
 8017cf4:	2b00      	cmp	r3, #0
 8017cf6:	d01f      	beq.n	8017d38 <updatePeerDelay+0x54>
	{
		TimeInternal Tab, Tba;
		subTime(&Tab, &ptpClock->pdelay_t2 , &ptpClock->pdelay_t1);
 8017cf8:	68fb      	ldr	r3, [r7, #12]
 8017cfa:	f503 7150 	add.w	r1, r3, #832	; 0x340
 8017cfe:	68fb      	ldr	r3, [r7, #12]
 8017d00:	f503 724e 	add.w	r2, r3, #824	; 0x338
 8017d04:	f107 0318 	add.w	r3, r7, #24
 8017d08:	4618      	mov	r0, r3
 8017d0a:	f7fb ff38 	bl	8013b7e <subTime>
		subTime(&Tba, &ptpClock->pdelay_t4, &ptpClock->pdelay_t3);
 8017d0e:	68fb      	ldr	r3, [r7, #12]
 8017d10:	f503 7154 	add.w	r1, r3, #848	; 0x350
 8017d14:	68fb      	ldr	r3, [r7, #12]
 8017d16:	f503 7252 	add.w	r2, r3, #840	; 0x348
 8017d1a:	f107 0310 	add.w	r3, r7, #16
 8017d1e:	4618      	mov	r0, r3
 8017d20:	f7fb ff2d 	bl	8013b7e <subTime>
		addTime(&ptpClock->portDS.peerMeanPathDelay, &Tab, &Tba);
 8017d24:	68fb      	ldr	r3, [r7, #12]
 8017d26:	3364      	adds	r3, #100	; 0x64
 8017d28:	f107 0210 	add.w	r2, r7, #16
 8017d2c:	f107 0118 	add.w	r1, r7, #24
 8017d30:	4618      	mov	r0, r3
 8017d32:	f7fb ff09 	bl	8013b48 <addTime>
 8017d36:	e00b      	b.n	8017d50 <updatePeerDelay+0x6c>
	}
	else /* One step  clock */
	{
		subTime(&ptpClock->portDS.peerMeanPathDelay, &ptpClock->pdelay_t4, &ptpClock->pdelay_t1);
 8017d38:	68fb      	ldr	r3, [r7, #12]
 8017d3a:	f103 0064 	add.w	r0, r3, #100	; 0x64
 8017d3e:	68fb      	ldr	r3, [r7, #12]
 8017d40:	f503 7154 	add.w	r1, r3, #848	; 0x350
 8017d44:	68fb      	ldr	r3, [r7, #12]
 8017d46:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8017d4a:	461a      	mov	r2, r3
 8017d4c:	f7fb ff17 	bl	8013b7e <subTime>
	}

	subTime(&ptpClock->portDS.peerMeanPathDelay, &ptpClock->portDS.peerMeanPathDelay, correctionField);
 8017d50:	68fb      	ldr	r3, [r7, #12]
 8017d52:	f103 0064 	add.w	r0, r3, #100	; 0x64
 8017d56:	68fb      	ldr	r3, [r7, #12]
 8017d58:	3364      	adds	r3, #100	; 0x64
 8017d5a:	68ba      	ldr	r2, [r7, #8]
 8017d5c:	4619      	mov	r1, r3
 8017d5e:	f7fb ff0e 	bl	8013b7e <subTime>
	div2Time(&ptpClock->portDS.peerMeanPathDelay);
 8017d62:	68fb      	ldr	r3, [r7, #12]
 8017d64:	3364      	adds	r3, #100	; 0x64
 8017d66:	4618      	mov	r0, r3
 8017d68:	f7fb ff24 	bl	8013bb4 <div2Time>

	/* Filter delay */
	if (ptpClock->portDS.peerMeanPathDelay.seconds != 0)
 8017d6c:	68fb      	ldr	r3, [r7, #12]
 8017d6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	d10a      	bne.n	8017d8a <updatePeerDelay+0xa6>
		DBGV("updatePeerDelay: cannot filter with seconds");
		return;
	}
	else
	{
		filter(&ptpClock->portDS.peerMeanPathDelay.nanoseconds, &ptpClock->owd_filt);
 8017d74:	68fb      	ldr	r3, [r7, #12]
 8017d76:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8017d7a:	68fb      	ldr	r3, [r7, #12]
 8017d7c:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 8017d80:	4619      	mov	r1, r3
 8017d82:	4610      	mov	r0, r2
 8017d84:	f7ff fe88 	bl	8017a98 <filter>
 8017d88:	e000      	b.n	8017d8c <updatePeerDelay+0xa8>
		return;
 8017d8a:	bf00      	nop
	}
}
 8017d8c:	3720      	adds	r7, #32
 8017d8e:	46bd      	mov	sp, r7
 8017d90:	bd80      	pop	{r7, pc}
	...

08017d94 <updateClock>:

void updateClock(PtpClock *ptpClock)
{
 8017d94:	b590      	push	{r4, r7, lr}
 8017d96:	b08f      	sub	sp, #60	; 0x3c
 8017d98:	af00      	add	r7, sp, #0
 8017d9a:	6078      	str	r0, [r7, #4]
	TimeInternal timeTmp;
	int32_t offsetNorm;

	DBGV("updateClock\n");

	if (ptpClock->currentDS.offsetFromMaster.seconds != 0 || abs(ptpClock->currentDS.offsetFromMaster.nanoseconds) > MAX_ADJ_OFFSET_NS)
 8017d9c:	687b      	ldr	r3, [r7, #4]
 8017d9e:	699b      	ldr	r3, [r3, #24]
 8017da0:	2b00      	cmp	r3, #0
 8017da2:	d107      	bne.n	8017db4 <updateClock+0x20>
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	69db      	ldr	r3, [r3, #28]
 8017da8:	2b00      	cmp	r3, #0
 8017daa:	bfb8      	it	lt
 8017dac:	425b      	neglt	r3, r3
 8017dae:	4a73      	ldr	r2, [pc, #460]	; (8017f7c <updateClock+0x1e8>)
 8017db0:	4293      	cmp	r3, r2
 8017db2:	dd36      	ble.n	8017e22 <updateClock+0x8e>
	{
		/* if secs, reset clock or set freq adjustment to max */
		if (!ptpClock->servo.noAdjust)
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	f893 3429 	ldrb.w	r3, [r3, #1065]	; 0x429
 8017dba:	f083 0301 	eor.w	r3, r3, #1
 8017dbe:	b2db      	uxtb	r3, r3
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	f000 8099 	beq.w	8017ef8 <updateClock+0x164>
		{
			if (!ptpClock->servo.noResetClock)
 8017dc6:	687b      	ldr	r3, [r7, #4]
 8017dc8:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 8017dcc:	f083 0301 	eor.w	r3, r3, #1
 8017dd0:	b2db      	uxtb	r3, r3
 8017dd2:	2b00      	cmp	r3, #0
 8017dd4:	d017      	beq.n	8017e06 <updateClock+0x72>
			{
				getTime(&timeTmp);
 8017dd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017dda:	4618      	mov	r0, r3
 8017ddc:	f000 f928 	bl	8018030 <getTime>
				subTime(&timeTmp, &timeTmp, &ptpClock->currentDS.offsetFromMaster);
 8017de0:	687b      	ldr	r3, [r7, #4]
 8017de2:	f103 0218 	add.w	r2, r3, #24
 8017de6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8017dea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017dee:	4618      	mov	r0, r3
 8017df0:	f7fb fec5 	bl	8013b7e <subTime>
				setTime(&timeTmp);
 8017df4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017df8:	4618      	mov	r0, r3
 8017dfa:	f000 f92d 	bl	8018058 <setTime>
				initClock(ptpClock);
 8017dfe:	6878      	ldr	r0, [r7, #4]
 8017e00:	f7ff fdc2 	bl	8017988 <initClock>
		if (!ptpClock->servo.noAdjust)
 8017e04:	e078      	b.n	8017ef8 <updateClock+0x164>
			}
			else
			{
				adj = ptpClock->currentDS.offsetFromMaster.nanoseconds > 0 ? ADJ_FREQ_MAX : -ADJ_FREQ_MAX;
 8017e06:	687b      	ldr	r3, [r7, #4]
 8017e08:	69db      	ldr	r3, [r3, #28]
 8017e0a:	2b00      	cmp	r3, #0
 8017e0c:	dd01      	ble.n	8017e12 <updateClock+0x7e>
 8017e0e:	4b5c      	ldr	r3, [pc, #368]	; (8017f80 <updateClock+0x1ec>)
 8017e10:	e000      	b.n	8017e14 <updateClock+0x80>
 8017e12:	4b5c      	ldr	r3, [pc, #368]	; (8017f84 <updateClock+0x1f0>)
 8017e14:	633b      	str	r3, [r7, #48]	; 0x30
				adjFreq(-adj);
 8017e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017e18:	425b      	negs	r3, r3
 8017e1a:	4618      	mov	r0, r3
 8017e1c:	f000 f958 	bl	80180d0 <adjFreq>
		if (!ptpClock->servo.noAdjust)
 8017e20:	e06a      	b.n	8017ef8 <updateClock+0x164>
		/* the PI controller */

		/* normalize offset to 1s sync interval -> response of the servo will
		 * be same for all sync interval values, but faster/slower
		 * (possible lost of precision/overflow but much more stable) */
		offsetNorm = ptpClock->currentDS.offsetFromMaster.nanoseconds;
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	69db      	ldr	r3, [r3, #28]
 8017e26:	637b      	str	r3, [r7, #52]	; 0x34
		if (ptpClock->portDS.logSyncInterval > 0)
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 8017e2e:	2b00      	cmp	r3, #0
 8017e30:	dd07      	ble.n	8017e42 <updateClock+0xae>
			offsetNorm >>= ptpClock->portDS.logSyncInterval;
 8017e32:	687b      	ldr	r3, [r7, #4]
 8017e34:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 8017e38:	461a      	mov	r2, r3
 8017e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017e3c:	4113      	asrs	r3, r2
 8017e3e:	637b      	str	r3, [r7, #52]	; 0x34
 8017e40:	e00c      	b.n	8017e5c <updateClock+0xc8>
		else if (ptpClock->portDS.logSyncInterval < 0)
 8017e42:	687b      	ldr	r3, [r7, #4]
 8017e44:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 8017e48:	2b00      	cmp	r3, #0
 8017e4a:	da07      	bge.n	8017e5c <updateClock+0xc8>
			offsetNorm <<= -ptpClock->portDS.logSyncInterval;
 8017e4c:	687b      	ldr	r3, [r7, #4]
 8017e4e:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 8017e52:	425b      	negs	r3, r3
 8017e54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017e56:	fa02 f303 	lsl.w	r3, r2, r3
 8017e5a:	637b      	str	r3, [r7, #52]	; 0x34

		/* the accumulator for the I component */
		ptpClock->observedDrift += (int32_t)((float)offsetNorm * (float)ptpClock->servo.ai);
 8017e5c:	687b      	ldr	r3, [r7, #4]
 8017e5e:	f8d3 43c4 	ldr.w	r4, [r3, #964]	; 0x3c4
 8017e62:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017e64:	f7e8 fa76 	bl	8000354 <__aeabi_i2f>
 8017e68:	4602      	mov	r2, r0
 8017e6a:	687b      	ldr	r3, [r7, #4]
 8017e6c:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8017e70:	4619      	mov	r1, r3
 8017e72:	4610      	mov	r0, r2
 8017e74:	f7e8 fac2 	bl	80003fc <__aeabi_fmul>
 8017e78:	4603      	mov	r3, r0
 8017e7a:	4618      	mov	r0, r3
 8017e7c:	f7e8 fc84 	bl	8000788 <__aeabi_f2iz>
 8017e80:	4603      	mov	r3, r0
 8017e82:	18e2      	adds	r2, r4, r3
 8017e84:	687b      	ldr	r3, [r7, #4]
 8017e86:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

		/* clamp the accumulator to ADJ_FREQ_MAX for sanity */
		if (ptpClock->observedDrift > ADJ_FREQ_MAX)
 8017e8a:	687b      	ldr	r3, [r7, #4]
 8017e8c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8017e90:	4a3b      	ldr	r2, [pc, #236]	; (8017f80 <updateClock+0x1ec>)
 8017e92:	4293      	cmp	r3, r2
 8017e94:	dd04      	ble.n	8017ea0 <updateClock+0x10c>
			ptpClock->observedDrift = ADJ_FREQ_MAX;
 8017e96:	687b      	ldr	r3, [r7, #4]
 8017e98:	4a39      	ldr	r2, [pc, #228]	; (8017f80 <updateClock+0x1ec>)
 8017e9a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
 8017e9e:	e009      	b.n	8017eb4 <updateClock+0x120>
		else if (ptpClock->observedDrift < -ADJ_FREQ_MAX)
 8017ea0:	687b      	ldr	r3, [r7, #4]
 8017ea2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8017ea6:	4a37      	ldr	r2, [pc, #220]	; (8017f84 <updateClock+0x1f0>)
 8017ea8:	4293      	cmp	r3, r2
 8017eaa:	da03      	bge.n	8017eb4 <updateClock+0x120>
			ptpClock->observedDrift = -ADJ_FREQ_MAX;
 8017eac:	687b      	ldr	r3, [r7, #4]
 8017eae:	4a35      	ldr	r2, [pc, #212]	; (8017f84 <updateClock+0x1f0>)
 8017eb0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

		/* apply controller output as a clock tick rate adjustment */
		if (!ptpClock->servo.noAdjust)
 8017eb4:	687b      	ldr	r3, [r7, #4]
 8017eb6:	f893 3429 	ldrb.w	r3, [r3, #1065]	; 0x429
 8017eba:	f083 0301 	eor.w	r3, r3, #1
 8017ebe:	b2db      	uxtb	r3, r3
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	d019      	beq.n	8017ef8 <updateClock+0x164>
		{
			adj = (int32_t)((float)offsetNorm * (float)ptpClock->servo.ap) + ptpClock->observedDrift;
 8017ec4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017ec6:	f7e8 fa45 	bl	8000354 <__aeabi_i2f>
 8017eca:	4602      	mov	r2, r0
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 8017ed2:	4619      	mov	r1, r3
 8017ed4:	4610      	mov	r0, r2
 8017ed6:	f7e8 fa91 	bl	80003fc <__aeabi_fmul>
 8017eda:	4603      	mov	r3, r0
 8017edc:	4618      	mov	r0, r3
 8017ede:	f7e8 fc53 	bl	8000788 <__aeabi_f2iz>
 8017ee2:	4602      	mov	r2, r0
 8017ee4:	687b      	ldr	r3, [r7, #4]
 8017ee6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8017eea:	4413      	add	r3, r2
 8017eec:	633b      	str	r3, [r7, #48]	; 0x30
			adjFreq(-adj);
 8017eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ef0:	425b      	negs	r3, r3
 8017ef2:	4618      	mov	r0, r3
 8017ef4:	f000 f8ec 	bl	80180d0 <adjFreq>
			ptpClock->parentDS.observedParentOffsetScaledLogVariance = 17000 + scaledLogVariance;
			DBGV("updateClock: observed scalled log variance: 0x%x\n", ptpClock->parentDS.observedParentOffsetScaledLogVariance);
		}
	}

	switch (ptpClock->portDS.delayMechanism)
 8017ef8:	687b      	ldr	r3, [r7, #4]
 8017efa:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8017efe:	2b01      	cmp	r3, #1
 8017f00:	d024      	beq.n	8017f4c <updateClock+0x1b8>
 8017f02:	2b02      	cmp	r3, #2
 8017f04:	d113      	bne.n	8017f2e <updateClock+0x19a>
			DBGV("updateClock: one-way delay averaged (E2E): %d sec %d nsec\n",
					ptpClock->currentDS.meanPathDelay.seconds, ptpClock->currentDS.meanPathDelay.nanoseconds);
			break;

		case P2P:
			DBG("updateClock: one-way delay averaged (P2P): %d sec %d nsec\n",
 8017f06:	f107 031c 	add.w	r3, r7, #28
 8017f0a:	4618      	mov	r0, r3
 8017f0c:	f000 f890 	bl	8018030 <getTime>
 8017f10:	69fb      	ldr	r3, [r7, #28]
 8017f12:	6a3a      	ldr	r2, [r7, #32]
 8017f14:	4619      	mov	r1, r3
 8017f16:	481c      	ldr	r0, [pc, #112]	; (8017f88 <updateClock+0x1f4>)
 8017f18:	f000 fa04 	bl	8018324 <iprintf>
 8017f1c:	687b      	ldr	r3, [r7, #4]
 8017f1e:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8017f20:	687b      	ldr	r3, [r7, #4]
 8017f22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017f24:	461a      	mov	r2, r3
 8017f26:	4819      	ldr	r0, [pc, #100]	; (8017f8c <updateClock+0x1f8>)
 8017f28:	f000 f9fc 	bl	8018324 <iprintf>
					ptpClock->portDS.peerMeanPathDelay.seconds, ptpClock->portDS.peerMeanPathDelay.nanoseconds);
			break;
 8017f2c:	e00f      	b.n	8017f4e <updateClock+0x1ba>

		default:
			DBG("updateClock: one-way delay not computed\n");
 8017f2e:	f107 0314 	add.w	r3, r7, #20
 8017f32:	4618      	mov	r0, r3
 8017f34:	f000 f87c 	bl	8018030 <getTime>
 8017f38:	697b      	ldr	r3, [r7, #20]
 8017f3a:	69ba      	ldr	r2, [r7, #24]
 8017f3c:	4619      	mov	r1, r3
 8017f3e:	4812      	ldr	r0, [pc, #72]	; (8017f88 <updateClock+0x1f4>)
 8017f40:	f000 f9f0 	bl	8018324 <iprintf>
 8017f44:	4812      	ldr	r0, [pc, #72]	; (8017f90 <updateClock+0x1fc>)
 8017f46:	f000 fa61 	bl	801840c <puts>
 8017f4a:	e000      	b.n	8017f4e <updateClock+0x1ba>
			break;
 8017f4c:	bf00      	nop
	}

	DBG("updateClock: offset from master: %d sec %d nsec\n",
 8017f4e:	f107 030c 	add.w	r3, r7, #12
 8017f52:	4618      	mov	r0, r3
 8017f54:	f000 f86c 	bl	8018030 <getTime>
 8017f58:	68fb      	ldr	r3, [r7, #12]
 8017f5a:	693a      	ldr	r2, [r7, #16]
 8017f5c:	4619      	mov	r1, r3
 8017f5e:	480a      	ldr	r0, [pc, #40]	; (8017f88 <updateClock+0x1f4>)
 8017f60:	f000 f9e0 	bl	8018324 <iprintf>
 8017f64:	687b      	ldr	r3, [r7, #4]
 8017f66:	6999      	ldr	r1, [r3, #24]
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	69db      	ldr	r3, [r3, #28]
 8017f6c:	461a      	mov	r2, r3
 8017f6e:	4809      	ldr	r0, [pc, #36]	; (8017f94 <updateClock+0x200>)
 8017f70:	f000 f9d8 	bl	8018324 <iprintf>
			ptpClock->currentDS.offsetFromMaster.seconds,
			ptpClock->currentDS.offsetFromMaster.nanoseconds);
	DBGV("updateClock: observed drift: %d\n", ptpClock->observedDrift);
}
 8017f74:	bf00      	nop
 8017f76:	373c      	adds	r7, #60	; 0x3c
 8017f78:	46bd      	mov	sp, r7
 8017f7a:	bd90      	pop	{r4, r7, pc}
 8017f7c:	05f5e100 	.word	0x05f5e100
 8017f80:	004e2000 	.word	0x004e2000
 8017f84:	ffb1e000 	.word	0xffb1e000
 8017f88:	0801c534 	.word	0x0801c534
 8017f8c:	0801c550 	.word	0x0801c550
 8017f90:	0801c58c 	.word	0x0801c58c
 8017f94:	0801c5b4 	.word	0x0801c5b4

08017f98 <ptpdStartup>:
{
	netShutdown(&ptpClock->netPath);
}

int16_t ptpdStartup(PtpClock * ptpClock, RunTimeOpts *rtOpts, ForeignMasterRecord* foreign)
{
 8017f98:	b580      	push	{r7, lr}
 8017f9a:	b086      	sub	sp, #24
 8017f9c:	af00      	add	r7, sp, #0
 8017f9e:	60f8      	str	r0, [r7, #12]
 8017fa0:	60b9      	str	r1, [r7, #8]
 8017fa2:	607a      	str	r2, [r7, #4]
	ptpClock->rtOpts = rtOpts;
 8017fa4:	68fb      	ldr	r3, [r7, #12]
 8017fa6:	68ba      	ldr	r2, [r7, #8]
 8017fa8:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
	ptpClock->foreignMasterDS.records = foreign;
 8017fac:	68fb      	ldr	r3, [r7, #12]
 8017fae:	687a      	ldr	r2, [r7, #4]
 8017fb0:	675a      	str	r2, [r3, #116]	; 0x74

	/* 9.2.2 */
	if (rtOpts->slaveOnly) rtOpts->clockQuality.clockClass = DEFAULT_CLOCK_CLASS_SLAVE_ONLY;
 8017fb2:	68bb      	ldr	r3, [r7, #8]
 8017fb4:	7a5b      	ldrb	r3, [r3, #9]
 8017fb6:	2b00      	cmp	r3, #0
 8017fb8:	d002      	beq.n	8017fc0 <ptpdStartup+0x28>
 8017fba:	68bb      	ldr	r3, [r7, #8]
 8017fbc:	22ff      	movs	r2, #255	; 0xff
 8017fbe:	709a      	strb	r2, [r3, #2]

	/* No negative or zero attenuation */
	if (rtOpts->servo.ap < 1) rtOpts->servo.ap = 1;
 8017fc0:	68bb      	ldr	r3, [r7, #8]
 8017fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017fc4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8017fc8:	4618      	mov	r0, r3
 8017fca:	f7e8 fbb5 	bl	8000738 <__aeabi_fcmplt>
 8017fce:	4603      	mov	r3, r0
 8017fd0:	2b00      	cmp	r3, #0
 8017fd2:	d003      	beq.n	8017fdc <ptpdStartup+0x44>
 8017fd4:	68bb      	ldr	r3, [r7, #8]
 8017fd6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8017fda:	639a      	str	r2, [r3, #56]	; 0x38
	if (rtOpts->servo.ai < 1) rtOpts->servo.ai = 1;
 8017fdc:	68bb      	ldr	r3, [r7, #8]
 8017fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017fe0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8017fe4:	4618      	mov	r0, r3
 8017fe6:	f7e8 fba7 	bl	8000738 <__aeabi_fcmplt>
 8017fea:	4603      	mov	r3, r0
 8017fec:	2b00      	cmp	r3, #0
 8017fee:	d003      	beq.n	8017ff8 <ptpdStartup+0x60>
 8017ff0:	68bb      	ldr	r3, [r7, #8]
 8017ff2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8017ff6:	63da      	str	r2, [r3, #60]	; 0x3c

	DBG("event POWER UP\r\n");
 8017ff8:	f107 0310 	add.w	r3, r7, #16
 8017ffc:	4618      	mov	r0, r3
 8017ffe:	f000 f817 	bl	8018030 <getTime>
 8018002:	693b      	ldr	r3, [r7, #16]
 8018004:	697a      	ldr	r2, [r7, #20]
 8018006:	4619      	mov	r1, r3
 8018008:	4807      	ldr	r0, [pc, #28]	; (8018028 <ptpdStartup+0x90>)
 801800a:	f000 f98b 	bl	8018324 <iprintf>
 801800e:	4807      	ldr	r0, [pc, #28]	; (801802c <ptpdStartup+0x94>)
 8018010:	f000 f9fc 	bl	801840c <puts>

	toState(ptpClock, PTP_INITIALIZING);
 8018014:	2100      	movs	r1, #0
 8018016:	68f8      	ldr	r0, [r7, #12]
 8018018:	f7fc fb3c 	bl	8014694 <toState>

	return 0;
 801801c:	2300      	movs	r3, #0
}
 801801e:	4618      	mov	r0, r3
 8018020:	3718      	adds	r7, #24
 8018022:	46bd      	mov	sp, r7
 8018024:	bd80      	pop	{r7, pc}
 8018026:	bf00      	nop
 8018028:	0801c5e8 	.word	0x0801c5e8
 801802c:	0801c5f8 	.word	0x0801c5f8

08018030 <getTime>:

	printf("drift: %c%d.%03d ppm\n", sign, abs(ptpClock->observedDrift / 1000), abs(ptpClock->observedDrift % 1000));
}

void getTime(TimeInternal *time)
{
 8018030:	b580      	push	{r7, lr}
 8018032:	b084      	sub	sp, #16
 8018034:	af00      	add	r7, sp, #0
 8018036:	6078      	str	r0, [r7, #4]
	struct ptptime_t timestamp;
	ETH_PTPTime_GetTime(&timestamp);
 8018038:	f107 0308 	add.w	r3, r7, #8
 801803c:	4618      	mov	r0, r3
 801803e:	f7eb fec7 	bl	8003dd0 <ETH_PTPTime_GetTime>
	time->seconds = timestamp.tv_sec;
 8018042:	68ba      	ldr	r2, [r7, #8]
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	601a      	str	r2, [r3, #0]
	time->nanoseconds = timestamp.tv_nsec;
 8018048:	68fa      	ldr	r2, [r7, #12]
 801804a:	687b      	ldr	r3, [r7, #4]
 801804c:	605a      	str	r2, [r3, #4]
}
 801804e:	bf00      	nop
 8018050:	3710      	adds	r7, #16
 8018052:	46bd      	mov	sp, r7
 8018054:	bd80      	pop	{r7, pc}
	...

08018058 <setTime>:

void setTime(const TimeInternal *time)
{
 8018058:	b580      	push	{r7, lr}
 801805a:	b086      	sub	sp, #24
 801805c:	af00      	add	r7, sp, #0
 801805e:	6078      	str	r0, [r7, #4]
	struct ptptime_t ts;

	ts.tv_sec = time->seconds;
 8018060:	687b      	ldr	r3, [r7, #4]
 8018062:	681b      	ldr	r3, [r3, #0]
 8018064:	613b      	str	r3, [r7, #16]
	ts.tv_nsec = time->nanoseconds;
 8018066:	687b      	ldr	r3, [r7, #4]
 8018068:	685b      	ldr	r3, [r3, #4]
 801806a:	617b      	str	r3, [r7, #20]
	ETH_PTPTime_SetTime(&ts);
 801806c:	f107 0310 	add.w	r3, r7, #16
 8018070:	4618      	mov	r0, r3
 8018072:	f7ec fb17 	bl	80046a4 <ETH_PTPTime_SetTime>
	DBG("resetting system clock to %d sec %d nsec\n", time->seconds, time->nanoseconds);
 8018076:	f107 0308 	add.w	r3, r7, #8
 801807a:	4618      	mov	r0, r3
 801807c:	f7ff ffd8 	bl	8018030 <getTime>
 8018080:	68bb      	ldr	r3, [r7, #8]
 8018082:	68fa      	ldr	r2, [r7, #12]
 8018084:	4619      	mov	r1, r3
 8018086:	4807      	ldr	r0, [pc, #28]	; (80180a4 <setTime+0x4c>)
 8018088:	f000 f94c 	bl	8018324 <iprintf>
 801808c:	687b      	ldr	r3, [r7, #4]
 801808e:	6819      	ldr	r1, [r3, #0]
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	685b      	ldr	r3, [r3, #4]
 8018094:	461a      	mov	r2, r3
 8018096:	4804      	ldr	r0, [pc, #16]	; (80180a8 <setTime+0x50>)
 8018098:	f000 f944 	bl	8018324 <iprintf>
}
 801809c:	bf00      	nop
 801809e:	3718      	adds	r7, #24
 80180a0:	46bd      	mov	sp, r7
 80180a2:	bd80      	pop	{r7, pc}
 80180a4:	0801c704 	.word	0x0801c704
 80180a8:	0801c714 	.word	0x0801c714

080180ac <getRand>:
	ETH_PTPTime_UpdateOffset(&timeoffset);
	DBGV("updateTime: updated\n");
}

uint32_t getRand(uint32_t randMax)
{
 80180ac:	b580      	push	{r7, lr}
 80180ae:	b082      	sub	sp, #8
 80180b0:	af00      	add	r7, sp, #0
 80180b2:	6078      	str	r0, [r7, #4]
	return rand() % randMax;
 80180b4:	f000 f9b2 	bl	801841c <rand>
 80180b8:	4603      	mov	r3, r0
 80180ba:	687a      	ldr	r2, [r7, #4]
 80180bc:	fbb3 f2f2 	udiv	r2, r3, r2
 80180c0:	6879      	ldr	r1, [r7, #4]
 80180c2:	fb01 f202 	mul.w	r2, r1, r2
 80180c6:	1a9b      	subs	r3, r3, r2
}
 80180c8:	4618      	mov	r0, r3
 80180ca:	3708      	adds	r7, #8
 80180cc:	46bd      	mov	sp, r7
 80180ce:	bd80      	pop	{r7, pc}

080180d0 <adjFreq>:

bool  adjFreq(int32_t adj)
{
 80180d0:	b580      	push	{r7, lr}
 80180d2:	b082      	sub	sp, #8
 80180d4:	af00      	add	r7, sp, #0
 80180d6:	6078      	str	r0, [r7, #4]
	DBGV("adjFreq %d\n", adj);

	if (adj > ADJ_FREQ_MAX)
 80180d8:	687b      	ldr	r3, [r7, #4]
 80180da:	4a0a      	ldr	r2, [pc, #40]	; (8018104 <adjFreq+0x34>)
 80180dc:	4293      	cmp	r3, r2
 80180de:	dd02      	ble.n	80180e6 <adjFreq+0x16>
		adj = ADJ_FREQ_MAX;
 80180e0:	4b08      	ldr	r3, [pc, #32]	; (8018104 <adjFreq+0x34>)
 80180e2:	607b      	str	r3, [r7, #4]
 80180e4:	e005      	b.n	80180f2 <adjFreq+0x22>
	else if (adj < -ADJ_FREQ_MAX)
 80180e6:	687b      	ldr	r3, [r7, #4]
 80180e8:	4a07      	ldr	r2, [pc, #28]	; (8018108 <adjFreq+0x38>)
 80180ea:	4293      	cmp	r3, r2
 80180ec:	da01      	bge.n	80180f2 <adjFreq+0x22>
		adj = -ADJ_FREQ_MAX;
 80180ee:	4b06      	ldr	r3, [pc, #24]	; (8018108 <adjFreq+0x38>)
 80180f0:	607b      	str	r3, [r7, #4]

	/* Fine update method */
	ETH_PTPTime_AdjFreq(adj);
 80180f2:	6878      	ldr	r0, [r7, #4]
 80180f4:	f7ec fa56 	bl	80045a4 <ETH_PTPTime_AdjFreq>

	return TRUE;
 80180f8:	2301      	movs	r3, #1
}
 80180fa:	4618      	mov	r0, r3
 80180fc:	3708      	adds	r7, #8
 80180fe:	46bd      	mov	sp, r7
 8018100:	bd80      	pop	{r7, pc}
 8018102:	bf00      	nop
 8018104:	004e2000 	.word	0x004e2000
 8018108:	ffb1e000 	.word	0xffb1e000

0801810c <timerCallback>:
/* An array to hold the various system timer handles. */
static PTP_TIMER ptpdTimers[TIMER_ARRAY_SIZE];
static bool ptpdTimersExpired[TIMER_ARRAY_SIZE];
 
static void timerCallback(PTP_TIMER timer)
{
 801810c:	b580      	push	{r7, lr}
 801810e:	b084      	sub	sp, #16
 8018110:	af00      	add	r7, sp, #0
 8018112:	6078      	str	r0, [r7, #4]
	int index = (int)PTP_TIMER_GETID(timer);
 8018114:	6878      	ldr	r0, [r7, #4]
 8018116:	f7ef fa7b 	bl	8007610 <pvTimerGetTimerID>
 801811a:	4603      	mov	r3, r0
 801811c:	60fb      	str	r3, [r7, #12]
	DBGV("Timer callback ID:%d\n",index);
	// Sanity check the index.
	if (index < TIMER_ARRAY_SIZE)
 801811e:	68fb      	ldr	r3, [r7, #12]
 8018120:	2b05      	cmp	r3, #5
 8018122:	dc06      	bgt.n	8018132 <timerCallback+0x26>
	{
		/* Mark the indicated timer as expired. */
		ptpdTimersExpired[index] = TRUE;
 8018124:	4a05      	ldr	r2, [pc, #20]	; (801813c <timerCallback+0x30>)
 8018126:	68fb      	ldr	r3, [r7, #12]
 8018128:	4413      	add	r3, r2
 801812a:	2201      	movs	r2, #1
 801812c:	701a      	strb	r2, [r3, #0]

		/* Notify the PTP thread of a pending operation. */
		ptpd_alert();
 801812e:	f7fe f9b5 	bl	801649c <ptpd_alert>
	}
}
 8018132:	bf00      	nop
 8018134:	3710      	adds	r7, #16
 8018136:	46bd      	mov	sp, r7
 8018138:	bd80      	pop	{r7, pc}
 801813a:	bf00      	nop
 801813c:	20004c08 	.word	0x20004c08

08018140 <initTimer>:

void initTimer(void)
{
 8018140:	b590      	push	{r4, r7, lr}
 8018142:	b087      	sub	sp, #28
 8018144:	af02      	add	r7, sp, #8
	int32_t i;

	DBG("initTimer\n");
 8018146:	1d3b      	adds	r3, r7, #4
 8018148:	4618      	mov	r0, r3
 801814a:	f7ff ff71 	bl	8018030 <getTime>
 801814e:	687b      	ldr	r3, [r7, #4]
 8018150:	68ba      	ldr	r2, [r7, #8]
 8018152:	4619      	mov	r1, r3
 8018154:	481b      	ldr	r0, [pc, #108]	; (80181c4 <initTimer+0x84>)
 8018156:	f000 f8e5 	bl	8018324 <iprintf>
 801815a:	481b      	ldr	r0, [pc, #108]	; (80181c8 <initTimer+0x88>)
 801815c:	f000 f956 	bl	801840c <puts>

	/* Create the various timers used in the system. */
  for (i = 0; i < TIMER_ARRAY_SIZE; i++)
 8018160:	2300      	movs	r3, #0
 8018162:	60fb      	str	r3, [r7, #12]
 8018164:	e026      	b.n	80181b4 <initTimer+0x74>
  {
		// Mark the timer as not expired.
		// Initialize the timer.
		//sys_timer_new(&ptpdTimers[i], timerCallback, osTimerOnce, (void *) i);
		ptpdTimers[i] = PTP_TIMER_NEW(timerCallback, osTimerPeriodic, (void *) i);
 8018166:	68fa      	ldr	r2, [r7, #12]
 8018168:	4b18      	ldr	r3, [pc, #96]	; (80181cc <initTimer+0x8c>)
 801816a:	9300      	str	r3, [sp, #0]
 801816c:	4613      	mov	r3, r2
 801816e:	2201      	movs	r2, #1
 8018170:	2101      	movs	r1, #1
 8018172:	4817      	ldr	r0, [pc, #92]	; (80181d0 <initTimer+0x90>)
 8018174:	f7ee ff16 	bl	8006fa4 <xTimerCreate>
 8018178:	4601      	mov	r1, r0
 801817a:	4a16      	ldr	r2, [pc, #88]	; (80181d4 <initTimer+0x94>)
 801817c:	68fb      	ldr	r3, [r7, #12]
 801817e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		printf("PTP Timer: %x \tID: %x\n",ptpdTimers[i],PTP_TIMER_GETID(ptpdTimers[i]));
 8018182:	4a14      	ldr	r2, [pc, #80]	; (80181d4 <initTimer+0x94>)
 8018184:	68fb      	ldr	r3, [r7, #12]
 8018186:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801818a:	4a12      	ldr	r2, [pc, #72]	; (80181d4 <initTimer+0x94>)
 801818c:	68fb      	ldr	r3, [r7, #12]
 801818e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018192:	4618      	mov	r0, r3
 8018194:	f7ef fa3c 	bl	8007610 <pvTimerGetTimerID>
 8018198:	4603      	mov	r3, r0
 801819a:	461a      	mov	r2, r3
 801819c:	4621      	mov	r1, r4
 801819e:	480e      	ldr	r0, [pc, #56]	; (80181d8 <initTimer+0x98>)
 80181a0:	f000 f8c0 	bl	8018324 <iprintf>
		ptpdTimersExpired[i] = FALSE;
 80181a4:	4a0d      	ldr	r2, [pc, #52]	; (80181dc <initTimer+0x9c>)
 80181a6:	68fb      	ldr	r3, [r7, #12]
 80181a8:	4413      	add	r3, r2
 80181aa:	2200      	movs	r2, #0
 80181ac:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < TIMER_ARRAY_SIZE; i++)
 80181ae:	68fb      	ldr	r3, [r7, #12]
 80181b0:	3301      	adds	r3, #1
 80181b2:	60fb      	str	r3, [r7, #12]
 80181b4:	68fb      	ldr	r3, [r7, #12]
 80181b6:	2b05      	cmp	r3, #5
 80181b8:	ddd5      	ble.n	8018166 <initTimer+0x26>
	}
}
 80181ba:	bf00      	nop
 80181bc:	3714      	adds	r7, #20
 80181be:	46bd      	mov	sp, r7
 80181c0:	bd90      	pop	{r4, r7, pc}
 80181c2:	bf00      	nop
 80181c4:	0801c740 	.word	0x0801c740
 80181c8:	0801c750 	.word	0x0801c750
 80181cc:	0801810d 	.word	0x0801810d
 80181d0:	0801c75c 	.word	0x0801c75c
 80181d4:	20004bf0 	.word	0x20004bf0
 80181d8:	0801c760 	.word	0x0801c760
 80181dc:	20004c08 	.word	0x20004c08

080181e0 <timerStop>:

void timerStop(int32_t index)
{
 80181e0:	b580      	push	{r7, lr}
 80181e2:	b082      	sub	sp, #8
 80181e4:	af00      	add	r7, sp, #0
 80181e6:	6078      	str	r0, [r7, #4]
	/* Sanity check the index. */
	if (index >= TIMER_ARRAY_SIZE) return;
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	2b05      	cmp	r3, #5
 80181ec:	dc0c      	bgt.n	8018208 <timerStop+0x28>

	// Cancel the timer and reset the expired flag.
	DBGV("timerStop: stop timer %d\n", index);
  	//sys_timer_stop(&ptpdTimers[index]);
	PTP_TIMER_STOP(ptpdTimers[index]);
 80181ee:	4a08      	ldr	r2, [pc, #32]	; (8018210 <timerStop+0x30>)
 80181f0:	687b      	ldr	r3, [r7, #4]
 80181f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80181f6:	4618      	mov	r0, r3
 80181f8:	f7ec fba8 	bl	800494c <osTimerStop>
	
	ptpdTimersExpired[index] = FALSE;
 80181fc:	4a05      	ldr	r2, [pc, #20]	; (8018214 <timerStop+0x34>)
 80181fe:	687b      	ldr	r3, [r7, #4]
 8018200:	4413      	add	r3, r2
 8018202:	2200      	movs	r2, #0
 8018204:	701a      	strb	r2, [r3, #0]
 8018206:	e000      	b.n	801820a <timerStop+0x2a>
	if (index >= TIMER_ARRAY_SIZE) return;
 8018208:	bf00      	nop
}
 801820a:	3708      	adds	r7, #8
 801820c:	46bd      	mov	sp, r7
 801820e:	bd80      	pop	{r7, pc}
 8018210:	20004bf0 	.word	0x20004bf0
 8018214:	20004c08 	.word	0x20004c08

08018218 <timerStart>:

void timerStart(int32_t index, uint32_t interval_ms)
{
 8018218:	b580      	push	{r7, lr}
 801821a:	b082      	sub	sp, #8
 801821c:	af00      	add	r7, sp, #0
 801821e:	6078      	str	r0, [r7, #4]
 8018220:	6039      	str	r1, [r7, #0]
	/* Sanity check the index. */
	if (index >= TIMER_ARRAY_SIZE) return;
 8018222:	687b      	ldr	r3, [r7, #4]
 8018224:	2b05      	cmp	r3, #5
 8018226:	dc0d      	bgt.n	8018244 <timerStart+0x2c>

	// Set the timer duration and start the timer.
	DBGV("timerStart: set timer %d to %d\n", index, interval_ms);
	ptpdTimersExpired[index] = FALSE;
 8018228:	4a08      	ldr	r2, [pc, #32]	; (801824c <timerStart+0x34>)
 801822a:	687b      	ldr	r3, [r7, #4]
 801822c:	4413      	add	r3, r2
 801822e:	2200      	movs	r2, #0
 8018230:	701a      	strb	r2, [r3, #0]
  	//sys_timer_start(&ptpdTimers[index], interval_ms);
	PTP_TIMER_START(ptpdTimers[index],interval_ms);
 8018232:	4a07      	ldr	r2, [pc, #28]	; (8018250 <timerStart+0x38>)
 8018234:	687b      	ldr	r3, [r7, #4]
 8018236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801823a:	6839      	ldr	r1, [r7, #0]
 801823c:	4618      	mov	r0, r3
 801823e:	f7ec fb3f 	bl	80048c0 <osTimerStart>
 8018242:	e000      	b.n	8018246 <timerStart+0x2e>
	if (index >= TIMER_ARRAY_SIZE) return;
 8018244:	bf00      	nop
}
 8018246:	3708      	adds	r7, #8
 8018248:	46bd      	mov	sp, r7
 801824a:	bd80      	pop	{r7, pc}
 801824c:	20004c08 	.word	0x20004c08
 8018250:	20004bf0 	.word	0x20004bf0

08018254 <timerExpired>:

bool timerExpired(int32_t index)
{
 8018254:	b480      	push	{r7}
 8018256:	b083      	sub	sp, #12
 8018258:	af00      	add	r7, sp, #0
 801825a:	6078      	str	r0, [r7, #4]
	/* Sanity check the index. */
	if (index >= TIMER_ARRAY_SIZE) return FALSE;
 801825c:	687b      	ldr	r3, [r7, #4]
 801825e:	2b05      	cmp	r3, #5
 8018260:	dd01      	ble.n	8018266 <timerExpired+0x12>
 8018262:	2300      	movs	r3, #0
 8018264:	e010      	b.n	8018288 <timerExpired+0x34>

	/* Determine if the timer expired. */
	if (!ptpdTimersExpired[index]) return FALSE;
 8018266:	4a0b      	ldr	r2, [pc, #44]	; (8018294 <timerExpired+0x40>)
 8018268:	687b      	ldr	r3, [r7, #4]
 801826a:	4413      	add	r3, r2
 801826c:	781b      	ldrb	r3, [r3, #0]
 801826e:	f083 0301 	eor.w	r3, r3, #1
 8018272:	b2db      	uxtb	r3, r3
 8018274:	2b00      	cmp	r3, #0
 8018276:	d001      	beq.n	801827c <timerExpired+0x28>
 8018278:	2300      	movs	r3, #0
 801827a:	e005      	b.n	8018288 <timerExpired+0x34>
	DBGV("timerExpired: timer %d expired\n", index);
	ptpdTimersExpired[index] = FALSE;
 801827c:	4a05      	ldr	r2, [pc, #20]	; (8018294 <timerExpired+0x40>)
 801827e:	687b      	ldr	r3, [r7, #4]
 8018280:	4413      	add	r3, r2
 8018282:	2200      	movs	r2, #0
 8018284:	701a      	strb	r2, [r3, #0]

	return TRUE;
 8018286:	2301      	movs	r3, #1
}
 8018288:	4618      	mov	r0, r3
 801828a:	370c      	adds	r7, #12
 801828c:	46bd      	mov	sp, r7
 801828e:	bc80      	pop	{r7}
 8018290:	4770      	bx	lr
 8018292:	bf00      	nop
 8018294:	20004c08 	.word	0x20004c08

08018298 <__libc_init_array>:
 8018298:	b570      	push	{r4, r5, r6, lr}
 801829a:	2500      	movs	r5, #0
 801829c:	4e0c      	ldr	r6, [pc, #48]	; (80182d0 <__libc_init_array+0x38>)
 801829e:	4c0d      	ldr	r4, [pc, #52]	; (80182d4 <__libc_init_array+0x3c>)
 80182a0:	1ba4      	subs	r4, r4, r6
 80182a2:	10a4      	asrs	r4, r4, #2
 80182a4:	42a5      	cmp	r5, r4
 80182a6:	d109      	bne.n	80182bc <__libc_init_array+0x24>
 80182a8:	f000 ffca 	bl	8019240 <_init>
 80182ac:	2500      	movs	r5, #0
 80182ae:	4e0a      	ldr	r6, [pc, #40]	; (80182d8 <__libc_init_array+0x40>)
 80182b0:	4c0a      	ldr	r4, [pc, #40]	; (80182dc <__libc_init_array+0x44>)
 80182b2:	1ba4      	subs	r4, r4, r6
 80182b4:	10a4      	asrs	r4, r4, #2
 80182b6:	42a5      	cmp	r5, r4
 80182b8:	d105      	bne.n	80182c6 <__libc_init_array+0x2e>
 80182ba:	bd70      	pop	{r4, r5, r6, pc}
 80182bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80182c0:	4798      	blx	r3
 80182c2:	3501      	adds	r5, #1
 80182c4:	e7ee      	b.n	80182a4 <__libc_init_array+0xc>
 80182c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80182ca:	4798      	blx	r3
 80182cc:	3501      	adds	r5, #1
 80182ce:	e7f2      	b.n	80182b6 <__libc_init_array+0x1e>
 80182d0:	0801c9a0 	.word	0x0801c9a0
 80182d4:	0801c9a0 	.word	0x0801c9a0
 80182d8:	0801c9a0 	.word	0x0801c9a0
 80182dc:	0801c9a4 	.word	0x0801c9a4

080182e0 <memcmp>:
 80182e0:	b530      	push	{r4, r5, lr}
 80182e2:	2400      	movs	r4, #0
 80182e4:	42a2      	cmp	r2, r4
 80182e6:	d101      	bne.n	80182ec <memcmp+0xc>
 80182e8:	2000      	movs	r0, #0
 80182ea:	e007      	b.n	80182fc <memcmp+0x1c>
 80182ec:	5d03      	ldrb	r3, [r0, r4]
 80182ee:	3401      	adds	r4, #1
 80182f0:	190d      	adds	r5, r1, r4
 80182f2:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80182f6:	42ab      	cmp	r3, r5
 80182f8:	d0f4      	beq.n	80182e4 <memcmp+0x4>
 80182fa:	1b58      	subs	r0, r3, r5
 80182fc:	bd30      	pop	{r4, r5, pc}

080182fe <memcpy>:
 80182fe:	b510      	push	{r4, lr}
 8018300:	1e43      	subs	r3, r0, #1
 8018302:	440a      	add	r2, r1
 8018304:	4291      	cmp	r1, r2
 8018306:	d100      	bne.n	801830a <memcpy+0xc>
 8018308:	bd10      	pop	{r4, pc}
 801830a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801830e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018312:	e7f7      	b.n	8018304 <memcpy+0x6>

08018314 <memset>:
 8018314:	4603      	mov	r3, r0
 8018316:	4402      	add	r2, r0
 8018318:	4293      	cmp	r3, r2
 801831a:	d100      	bne.n	801831e <memset+0xa>
 801831c:	4770      	bx	lr
 801831e:	f803 1b01 	strb.w	r1, [r3], #1
 8018322:	e7f9      	b.n	8018318 <memset+0x4>

08018324 <iprintf>:
 8018324:	b40f      	push	{r0, r1, r2, r3}
 8018326:	4b0a      	ldr	r3, [pc, #40]	; (8018350 <iprintf+0x2c>)
 8018328:	b513      	push	{r0, r1, r4, lr}
 801832a:	681c      	ldr	r4, [r3, #0]
 801832c:	b124      	cbz	r4, 8018338 <iprintf+0x14>
 801832e:	69a3      	ldr	r3, [r4, #24]
 8018330:	b913      	cbnz	r3, 8018338 <iprintf+0x14>
 8018332:	4620      	mov	r0, r4
 8018334:	f000 fa56 	bl	80187e4 <__sinit>
 8018338:	ab05      	add	r3, sp, #20
 801833a:	9a04      	ldr	r2, [sp, #16]
 801833c:	68a1      	ldr	r1, [r4, #8]
 801833e:	4620      	mov	r0, r4
 8018340:	9301      	str	r3, [sp, #4]
 8018342:	f000 fc13 	bl	8018b6c <_vfiprintf_r>
 8018346:	b002      	add	sp, #8
 8018348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801834c:	b004      	add	sp, #16
 801834e:	4770      	bx	lr
 8018350:	2000001c 	.word	0x2000001c

08018354 <_puts_r>:
 8018354:	b570      	push	{r4, r5, r6, lr}
 8018356:	460e      	mov	r6, r1
 8018358:	4605      	mov	r5, r0
 801835a:	b118      	cbz	r0, 8018364 <_puts_r+0x10>
 801835c:	6983      	ldr	r3, [r0, #24]
 801835e:	b90b      	cbnz	r3, 8018364 <_puts_r+0x10>
 8018360:	f000 fa40 	bl	80187e4 <__sinit>
 8018364:	69ab      	ldr	r3, [r5, #24]
 8018366:	68ac      	ldr	r4, [r5, #8]
 8018368:	b913      	cbnz	r3, 8018370 <_puts_r+0x1c>
 801836a:	4628      	mov	r0, r5
 801836c:	f000 fa3a 	bl	80187e4 <__sinit>
 8018370:	4b23      	ldr	r3, [pc, #140]	; (8018400 <_puts_r+0xac>)
 8018372:	429c      	cmp	r4, r3
 8018374:	d117      	bne.n	80183a6 <_puts_r+0x52>
 8018376:	686c      	ldr	r4, [r5, #4]
 8018378:	89a3      	ldrh	r3, [r4, #12]
 801837a:	071b      	lsls	r3, r3, #28
 801837c:	d51d      	bpl.n	80183ba <_puts_r+0x66>
 801837e:	6923      	ldr	r3, [r4, #16]
 8018380:	b1db      	cbz	r3, 80183ba <_puts_r+0x66>
 8018382:	3e01      	subs	r6, #1
 8018384:	68a3      	ldr	r3, [r4, #8]
 8018386:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801838a:	3b01      	subs	r3, #1
 801838c:	60a3      	str	r3, [r4, #8]
 801838e:	b9e9      	cbnz	r1, 80183cc <_puts_r+0x78>
 8018390:	2b00      	cmp	r3, #0
 8018392:	da2e      	bge.n	80183f2 <_puts_r+0x9e>
 8018394:	4622      	mov	r2, r4
 8018396:	210a      	movs	r1, #10
 8018398:	4628      	mov	r0, r5
 801839a:	f000 f873 	bl	8018484 <__swbuf_r>
 801839e:	3001      	adds	r0, #1
 80183a0:	d011      	beq.n	80183c6 <_puts_r+0x72>
 80183a2:	200a      	movs	r0, #10
 80183a4:	e011      	b.n	80183ca <_puts_r+0x76>
 80183a6:	4b17      	ldr	r3, [pc, #92]	; (8018404 <_puts_r+0xb0>)
 80183a8:	429c      	cmp	r4, r3
 80183aa:	d101      	bne.n	80183b0 <_puts_r+0x5c>
 80183ac:	68ac      	ldr	r4, [r5, #8]
 80183ae:	e7e3      	b.n	8018378 <_puts_r+0x24>
 80183b0:	4b15      	ldr	r3, [pc, #84]	; (8018408 <_puts_r+0xb4>)
 80183b2:	429c      	cmp	r4, r3
 80183b4:	bf08      	it	eq
 80183b6:	68ec      	ldreq	r4, [r5, #12]
 80183b8:	e7de      	b.n	8018378 <_puts_r+0x24>
 80183ba:	4621      	mov	r1, r4
 80183bc:	4628      	mov	r0, r5
 80183be:	f000 f8b3 	bl	8018528 <__swsetup_r>
 80183c2:	2800      	cmp	r0, #0
 80183c4:	d0dd      	beq.n	8018382 <_puts_r+0x2e>
 80183c6:	f04f 30ff 	mov.w	r0, #4294967295
 80183ca:	bd70      	pop	{r4, r5, r6, pc}
 80183cc:	2b00      	cmp	r3, #0
 80183ce:	da04      	bge.n	80183da <_puts_r+0x86>
 80183d0:	69a2      	ldr	r2, [r4, #24]
 80183d2:	429a      	cmp	r2, r3
 80183d4:	dc06      	bgt.n	80183e4 <_puts_r+0x90>
 80183d6:	290a      	cmp	r1, #10
 80183d8:	d004      	beq.n	80183e4 <_puts_r+0x90>
 80183da:	6823      	ldr	r3, [r4, #0]
 80183dc:	1c5a      	adds	r2, r3, #1
 80183de:	6022      	str	r2, [r4, #0]
 80183e0:	7019      	strb	r1, [r3, #0]
 80183e2:	e7cf      	b.n	8018384 <_puts_r+0x30>
 80183e4:	4622      	mov	r2, r4
 80183e6:	4628      	mov	r0, r5
 80183e8:	f000 f84c 	bl	8018484 <__swbuf_r>
 80183ec:	3001      	adds	r0, #1
 80183ee:	d1c9      	bne.n	8018384 <_puts_r+0x30>
 80183f0:	e7e9      	b.n	80183c6 <_puts_r+0x72>
 80183f2:	200a      	movs	r0, #10
 80183f4:	6823      	ldr	r3, [r4, #0]
 80183f6:	1c5a      	adds	r2, r3, #1
 80183f8:	6022      	str	r2, [r4, #0]
 80183fa:	7018      	strb	r0, [r3, #0]
 80183fc:	e7e5      	b.n	80183ca <_puts_r+0x76>
 80183fe:	bf00      	nop
 8018400:	0801c924 	.word	0x0801c924
 8018404:	0801c944 	.word	0x0801c944
 8018408:	0801c904 	.word	0x0801c904

0801840c <puts>:
 801840c:	4b02      	ldr	r3, [pc, #8]	; (8018418 <puts+0xc>)
 801840e:	4601      	mov	r1, r0
 8018410:	6818      	ldr	r0, [r3, #0]
 8018412:	f7ff bf9f 	b.w	8018354 <_puts_r>
 8018416:	bf00      	nop
 8018418:	2000001c 	.word	0x2000001c

0801841c <rand>:
 801841c:	b538      	push	{r3, r4, r5, lr}
 801841e:	4b13      	ldr	r3, [pc, #76]	; (801846c <rand+0x50>)
 8018420:	681c      	ldr	r4, [r3, #0]
 8018422:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018424:	b97b      	cbnz	r3, 8018446 <rand+0x2a>
 8018426:	2018      	movs	r0, #24
 8018428:	f000 faca 	bl	80189c0 <malloc>
 801842c:	4a10      	ldr	r2, [pc, #64]	; (8018470 <rand+0x54>)
 801842e:	4b11      	ldr	r3, [pc, #68]	; (8018474 <rand+0x58>)
 8018430:	63a0      	str	r0, [r4, #56]	; 0x38
 8018432:	e9c0 2300 	strd	r2, r3, [r0]
 8018436:	4b10      	ldr	r3, [pc, #64]	; (8018478 <rand+0x5c>)
 8018438:	2201      	movs	r2, #1
 801843a:	6083      	str	r3, [r0, #8]
 801843c:	230b      	movs	r3, #11
 801843e:	8183      	strh	r3, [r0, #12]
 8018440:	2300      	movs	r3, #0
 8018442:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8018446:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8018448:	480c      	ldr	r0, [pc, #48]	; (801847c <rand+0x60>)
 801844a:	690a      	ldr	r2, [r1, #16]
 801844c:	694b      	ldr	r3, [r1, #20]
 801844e:	4350      	muls	r0, r2
 8018450:	4c0b      	ldr	r4, [pc, #44]	; (8018480 <rand+0x64>)
 8018452:	fb04 0003 	mla	r0, r4, r3, r0
 8018456:	fba2 2304 	umull	r2, r3, r2, r4
 801845a:	4403      	add	r3, r0
 801845c:	1c54      	adds	r4, r2, #1
 801845e:	f143 0500 	adc.w	r5, r3, #0
 8018462:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8018466:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 801846a:	bd38      	pop	{r3, r4, r5, pc}
 801846c:	2000001c 	.word	0x2000001c
 8018470:	abcd330e 	.word	0xabcd330e
 8018474:	e66d1234 	.word	0xe66d1234
 8018478:	0005deec 	.word	0x0005deec
 801847c:	5851f42d 	.word	0x5851f42d
 8018480:	4c957f2d 	.word	0x4c957f2d

08018484 <__swbuf_r>:
 8018484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018486:	460e      	mov	r6, r1
 8018488:	4614      	mov	r4, r2
 801848a:	4605      	mov	r5, r0
 801848c:	b118      	cbz	r0, 8018496 <__swbuf_r+0x12>
 801848e:	6983      	ldr	r3, [r0, #24]
 8018490:	b90b      	cbnz	r3, 8018496 <__swbuf_r+0x12>
 8018492:	f000 f9a7 	bl	80187e4 <__sinit>
 8018496:	4b21      	ldr	r3, [pc, #132]	; (801851c <__swbuf_r+0x98>)
 8018498:	429c      	cmp	r4, r3
 801849a:	d12a      	bne.n	80184f2 <__swbuf_r+0x6e>
 801849c:	686c      	ldr	r4, [r5, #4]
 801849e:	69a3      	ldr	r3, [r4, #24]
 80184a0:	60a3      	str	r3, [r4, #8]
 80184a2:	89a3      	ldrh	r3, [r4, #12]
 80184a4:	071a      	lsls	r2, r3, #28
 80184a6:	d52e      	bpl.n	8018506 <__swbuf_r+0x82>
 80184a8:	6923      	ldr	r3, [r4, #16]
 80184aa:	b363      	cbz	r3, 8018506 <__swbuf_r+0x82>
 80184ac:	6923      	ldr	r3, [r4, #16]
 80184ae:	6820      	ldr	r0, [r4, #0]
 80184b0:	b2f6      	uxtb	r6, r6
 80184b2:	1ac0      	subs	r0, r0, r3
 80184b4:	6963      	ldr	r3, [r4, #20]
 80184b6:	4637      	mov	r7, r6
 80184b8:	4283      	cmp	r3, r0
 80184ba:	dc04      	bgt.n	80184c6 <__swbuf_r+0x42>
 80184bc:	4621      	mov	r1, r4
 80184be:	4628      	mov	r0, r5
 80184c0:	f000 f926 	bl	8018710 <_fflush_r>
 80184c4:	bb28      	cbnz	r0, 8018512 <__swbuf_r+0x8e>
 80184c6:	68a3      	ldr	r3, [r4, #8]
 80184c8:	3001      	adds	r0, #1
 80184ca:	3b01      	subs	r3, #1
 80184cc:	60a3      	str	r3, [r4, #8]
 80184ce:	6823      	ldr	r3, [r4, #0]
 80184d0:	1c5a      	adds	r2, r3, #1
 80184d2:	6022      	str	r2, [r4, #0]
 80184d4:	701e      	strb	r6, [r3, #0]
 80184d6:	6963      	ldr	r3, [r4, #20]
 80184d8:	4283      	cmp	r3, r0
 80184da:	d004      	beq.n	80184e6 <__swbuf_r+0x62>
 80184dc:	89a3      	ldrh	r3, [r4, #12]
 80184de:	07db      	lsls	r3, r3, #31
 80184e0:	d519      	bpl.n	8018516 <__swbuf_r+0x92>
 80184e2:	2e0a      	cmp	r6, #10
 80184e4:	d117      	bne.n	8018516 <__swbuf_r+0x92>
 80184e6:	4621      	mov	r1, r4
 80184e8:	4628      	mov	r0, r5
 80184ea:	f000 f911 	bl	8018710 <_fflush_r>
 80184ee:	b190      	cbz	r0, 8018516 <__swbuf_r+0x92>
 80184f0:	e00f      	b.n	8018512 <__swbuf_r+0x8e>
 80184f2:	4b0b      	ldr	r3, [pc, #44]	; (8018520 <__swbuf_r+0x9c>)
 80184f4:	429c      	cmp	r4, r3
 80184f6:	d101      	bne.n	80184fc <__swbuf_r+0x78>
 80184f8:	68ac      	ldr	r4, [r5, #8]
 80184fa:	e7d0      	b.n	801849e <__swbuf_r+0x1a>
 80184fc:	4b09      	ldr	r3, [pc, #36]	; (8018524 <__swbuf_r+0xa0>)
 80184fe:	429c      	cmp	r4, r3
 8018500:	bf08      	it	eq
 8018502:	68ec      	ldreq	r4, [r5, #12]
 8018504:	e7cb      	b.n	801849e <__swbuf_r+0x1a>
 8018506:	4621      	mov	r1, r4
 8018508:	4628      	mov	r0, r5
 801850a:	f000 f80d 	bl	8018528 <__swsetup_r>
 801850e:	2800      	cmp	r0, #0
 8018510:	d0cc      	beq.n	80184ac <__swbuf_r+0x28>
 8018512:	f04f 37ff 	mov.w	r7, #4294967295
 8018516:	4638      	mov	r0, r7
 8018518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801851a:	bf00      	nop
 801851c:	0801c924 	.word	0x0801c924
 8018520:	0801c944 	.word	0x0801c944
 8018524:	0801c904 	.word	0x0801c904

08018528 <__swsetup_r>:
 8018528:	4b32      	ldr	r3, [pc, #200]	; (80185f4 <__swsetup_r+0xcc>)
 801852a:	b570      	push	{r4, r5, r6, lr}
 801852c:	681d      	ldr	r5, [r3, #0]
 801852e:	4606      	mov	r6, r0
 8018530:	460c      	mov	r4, r1
 8018532:	b125      	cbz	r5, 801853e <__swsetup_r+0x16>
 8018534:	69ab      	ldr	r3, [r5, #24]
 8018536:	b913      	cbnz	r3, 801853e <__swsetup_r+0x16>
 8018538:	4628      	mov	r0, r5
 801853a:	f000 f953 	bl	80187e4 <__sinit>
 801853e:	4b2e      	ldr	r3, [pc, #184]	; (80185f8 <__swsetup_r+0xd0>)
 8018540:	429c      	cmp	r4, r3
 8018542:	d10f      	bne.n	8018564 <__swsetup_r+0x3c>
 8018544:	686c      	ldr	r4, [r5, #4]
 8018546:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801854a:	b29a      	uxth	r2, r3
 801854c:	0715      	lsls	r5, r2, #28
 801854e:	d42c      	bmi.n	80185aa <__swsetup_r+0x82>
 8018550:	06d0      	lsls	r0, r2, #27
 8018552:	d411      	bmi.n	8018578 <__swsetup_r+0x50>
 8018554:	2209      	movs	r2, #9
 8018556:	6032      	str	r2, [r6, #0]
 8018558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801855c:	81a3      	strh	r3, [r4, #12]
 801855e:	f04f 30ff 	mov.w	r0, #4294967295
 8018562:	e03e      	b.n	80185e2 <__swsetup_r+0xba>
 8018564:	4b25      	ldr	r3, [pc, #148]	; (80185fc <__swsetup_r+0xd4>)
 8018566:	429c      	cmp	r4, r3
 8018568:	d101      	bne.n	801856e <__swsetup_r+0x46>
 801856a:	68ac      	ldr	r4, [r5, #8]
 801856c:	e7eb      	b.n	8018546 <__swsetup_r+0x1e>
 801856e:	4b24      	ldr	r3, [pc, #144]	; (8018600 <__swsetup_r+0xd8>)
 8018570:	429c      	cmp	r4, r3
 8018572:	bf08      	it	eq
 8018574:	68ec      	ldreq	r4, [r5, #12]
 8018576:	e7e6      	b.n	8018546 <__swsetup_r+0x1e>
 8018578:	0751      	lsls	r1, r2, #29
 801857a:	d512      	bpl.n	80185a2 <__swsetup_r+0x7a>
 801857c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801857e:	b141      	cbz	r1, 8018592 <__swsetup_r+0x6a>
 8018580:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018584:	4299      	cmp	r1, r3
 8018586:	d002      	beq.n	801858e <__swsetup_r+0x66>
 8018588:	4630      	mov	r0, r6
 801858a:	f000 fa21 	bl	80189d0 <_free_r>
 801858e:	2300      	movs	r3, #0
 8018590:	6363      	str	r3, [r4, #52]	; 0x34
 8018592:	89a3      	ldrh	r3, [r4, #12]
 8018594:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018598:	81a3      	strh	r3, [r4, #12]
 801859a:	2300      	movs	r3, #0
 801859c:	6063      	str	r3, [r4, #4]
 801859e:	6923      	ldr	r3, [r4, #16]
 80185a0:	6023      	str	r3, [r4, #0]
 80185a2:	89a3      	ldrh	r3, [r4, #12]
 80185a4:	f043 0308 	orr.w	r3, r3, #8
 80185a8:	81a3      	strh	r3, [r4, #12]
 80185aa:	6923      	ldr	r3, [r4, #16]
 80185ac:	b94b      	cbnz	r3, 80185c2 <__swsetup_r+0x9a>
 80185ae:	89a3      	ldrh	r3, [r4, #12]
 80185b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80185b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80185b8:	d003      	beq.n	80185c2 <__swsetup_r+0x9a>
 80185ba:	4621      	mov	r1, r4
 80185bc:	4630      	mov	r0, r6
 80185be:	f000 f9bf 	bl	8018940 <__smakebuf_r>
 80185c2:	89a2      	ldrh	r2, [r4, #12]
 80185c4:	f012 0301 	ands.w	r3, r2, #1
 80185c8:	d00c      	beq.n	80185e4 <__swsetup_r+0xbc>
 80185ca:	2300      	movs	r3, #0
 80185cc:	60a3      	str	r3, [r4, #8]
 80185ce:	6963      	ldr	r3, [r4, #20]
 80185d0:	425b      	negs	r3, r3
 80185d2:	61a3      	str	r3, [r4, #24]
 80185d4:	6923      	ldr	r3, [r4, #16]
 80185d6:	b953      	cbnz	r3, 80185ee <__swsetup_r+0xc6>
 80185d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80185dc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80185e0:	d1ba      	bne.n	8018558 <__swsetup_r+0x30>
 80185e2:	bd70      	pop	{r4, r5, r6, pc}
 80185e4:	0792      	lsls	r2, r2, #30
 80185e6:	bf58      	it	pl
 80185e8:	6963      	ldrpl	r3, [r4, #20]
 80185ea:	60a3      	str	r3, [r4, #8]
 80185ec:	e7f2      	b.n	80185d4 <__swsetup_r+0xac>
 80185ee:	2000      	movs	r0, #0
 80185f0:	e7f7      	b.n	80185e2 <__swsetup_r+0xba>
 80185f2:	bf00      	nop
 80185f4:	2000001c 	.word	0x2000001c
 80185f8:	0801c924 	.word	0x0801c924
 80185fc:	0801c944 	.word	0x0801c944
 8018600:	0801c904 	.word	0x0801c904

08018604 <__sflush_r>:
 8018604:	898a      	ldrh	r2, [r1, #12]
 8018606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801860a:	4605      	mov	r5, r0
 801860c:	0710      	lsls	r0, r2, #28
 801860e:	460c      	mov	r4, r1
 8018610:	d458      	bmi.n	80186c4 <__sflush_r+0xc0>
 8018612:	684b      	ldr	r3, [r1, #4]
 8018614:	2b00      	cmp	r3, #0
 8018616:	dc05      	bgt.n	8018624 <__sflush_r+0x20>
 8018618:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801861a:	2b00      	cmp	r3, #0
 801861c:	dc02      	bgt.n	8018624 <__sflush_r+0x20>
 801861e:	2000      	movs	r0, #0
 8018620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018624:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018626:	2e00      	cmp	r6, #0
 8018628:	d0f9      	beq.n	801861e <__sflush_r+0x1a>
 801862a:	2300      	movs	r3, #0
 801862c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018630:	682f      	ldr	r7, [r5, #0]
 8018632:	6a21      	ldr	r1, [r4, #32]
 8018634:	602b      	str	r3, [r5, #0]
 8018636:	d032      	beq.n	801869e <__sflush_r+0x9a>
 8018638:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801863a:	89a3      	ldrh	r3, [r4, #12]
 801863c:	075a      	lsls	r2, r3, #29
 801863e:	d505      	bpl.n	801864c <__sflush_r+0x48>
 8018640:	6863      	ldr	r3, [r4, #4]
 8018642:	1ac0      	subs	r0, r0, r3
 8018644:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018646:	b10b      	cbz	r3, 801864c <__sflush_r+0x48>
 8018648:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801864a:	1ac0      	subs	r0, r0, r3
 801864c:	2300      	movs	r3, #0
 801864e:	4602      	mov	r2, r0
 8018650:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018652:	6a21      	ldr	r1, [r4, #32]
 8018654:	4628      	mov	r0, r5
 8018656:	47b0      	blx	r6
 8018658:	1c43      	adds	r3, r0, #1
 801865a:	89a3      	ldrh	r3, [r4, #12]
 801865c:	d106      	bne.n	801866c <__sflush_r+0x68>
 801865e:	6829      	ldr	r1, [r5, #0]
 8018660:	291d      	cmp	r1, #29
 8018662:	d848      	bhi.n	80186f6 <__sflush_r+0xf2>
 8018664:	4a29      	ldr	r2, [pc, #164]	; (801870c <__sflush_r+0x108>)
 8018666:	40ca      	lsrs	r2, r1
 8018668:	07d6      	lsls	r6, r2, #31
 801866a:	d544      	bpl.n	80186f6 <__sflush_r+0xf2>
 801866c:	2200      	movs	r2, #0
 801866e:	6062      	str	r2, [r4, #4]
 8018670:	6922      	ldr	r2, [r4, #16]
 8018672:	04d9      	lsls	r1, r3, #19
 8018674:	6022      	str	r2, [r4, #0]
 8018676:	d504      	bpl.n	8018682 <__sflush_r+0x7e>
 8018678:	1c42      	adds	r2, r0, #1
 801867a:	d101      	bne.n	8018680 <__sflush_r+0x7c>
 801867c:	682b      	ldr	r3, [r5, #0]
 801867e:	b903      	cbnz	r3, 8018682 <__sflush_r+0x7e>
 8018680:	6560      	str	r0, [r4, #84]	; 0x54
 8018682:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018684:	602f      	str	r7, [r5, #0]
 8018686:	2900      	cmp	r1, #0
 8018688:	d0c9      	beq.n	801861e <__sflush_r+0x1a>
 801868a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801868e:	4299      	cmp	r1, r3
 8018690:	d002      	beq.n	8018698 <__sflush_r+0x94>
 8018692:	4628      	mov	r0, r5
 8018694:	f000 f99c 	bl	80189d0 <_free_r>
 8018698:	2000      	movs	r0, #0
 801869a:	6360      	str	r0, [r4, #52]	; 0x34
 801869c:	e7c0      	b.n	8018620 <__sflush_r+0x1c>
 801869e:	2301      	movs	r3, #1
 80186a0:	4628      	mov	r0, r5
 80186a2:	47b0      	blx	r6
 80186a4:	1c41      	adds	r1, r0, #1
 80186a6:	d1c8      	bne.n	801863a <__sflush_r+0x36>
 80186a8:	682b      	ldr	r3, [r5, #0]
 80186aa:	2b00      	cmp	r3, #0
 80186ac:	d0c5      	beq.n	801863a <__sflush_r+0x36>
 80186ae:	2b1d      	cmp	r3, #29
 80186b0:	d001      	beq.n	80186b6 <__sflush_r+0xb2>
 80186b2:	2b16      	cmp	r3, #22
 80186b4:	d101      	bne.n	80186ba <__sflush_r+0xb6>
 80186b6:	602f      	str	r7, [r5, #0]
 80186b8:	e7b1      	b.n	801861e <__sflush_r+0x1a>
 80186ba:	89a3      	ldrh	r3, [r4, #12]
 80186bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80186c0:	81a3      	strh	r3, [r4, #12]
 80186c2:	e7ad      	b.n	8018620 <__sflush_r+0x1c>
 80186c4:	690f      	ldr	r7, [r1, #16]
 80186c6:	2f00      	cmp	r7, #0
 80186c8:	d0a9      	beq.n	801861e <__sflush_r+0x1a>
 80186ca:	0793      	lsls	r3, r2, #30
 80186cc:	bf18      	it	ne
 80186ce:	2300      	movne	r3, #0
 80186d0:	680e      	ldr	r6, [r1, #0]
 80186d2:	bf08      	it	eq
 80186d4:	694b      	ldreq	r3, [r1, #20]
 80186d6:	eba6 0807 	sub.w	r8, r6, r7
 80186da:	600f      	str	r7, [r1, #0]
 80186dc:	608b      	str	r3, [r1, #8]
 80186de:	f1b8 0f00 	cmp.w	r8, #0
 80186e2:	dd9c      	ble.n	801861e <__sflush_r+0x1a>
 80186e4:	4643      	mov	r3, r8
 80186e6:	463a      	mov	r2, r7
 80186e8:	6a21      	ldr	r1, [r4, #32]
 80186ea:	4628      	mov	r0, r5
 80186ec:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80186ee:	47b0      	blx	r6
 80186f0:	2800      	cmp	r0, #0
 80186f2:	dc06      	bgt.n	8018702 <__sflush_r+0xfe>
 80186f4:	89a3      	ldrh	r3, [r4, #12]
 80186f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80186fa:	81a3      	strh	r3, [r4, #12]
 80186fc:	f04f 30ff 	mov.w	r0, #4294967295
 8018700:	e78e      	b.n	8018620 <__sflush_r+0x1c>
 8018702:	4407      	add	r7, r0
 8018704:	eba8 0800 	sub.w	r8, r8, r0
 8018708:	e7e9      	b.n	80186de <__sflush_r+0xda>
 801870a:	bf00      	nop
 801870c:	20400001 	.word	0x20400001

08018710 <_fflush_r>:
 8018710:	b538      	push	{r3, r4, r5, lr}
 8018712:	690b      	ldr	r3, [r1, #16]
 8018714:	4605      	mov	r5, r0
 8018716:	460c      	mov	r4, r1
 8018718:	b1db      	cbz	r3, 8018752 <_fflush_r+0x42>
 801871a:	b118      	cbz	r0, 8018724 <_fflush_r+0x14>
 801871c:	6983      	ldr	r3, [r0, #24]
 801871e:	b90b      	cbnz	r3, 8018724 <_fflush_r+0x14>
 8018720:	f000 f860 	bl	80187e4 <__sinit>
 8018724:	4b0c      	ldr	r3, [pc, #48]	; (8018758 <_fflush_r+0x48>)
 8018726:	429c      	cmp	r4, r3
 8018728:	d109      	bne.n	801873e <_fflush_r+0x2e>
 801872a:	686c      	ldr	r4, [r5, #4]
 801872c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018730:	b17b      	cbz	r3, 8018752 <_fflush_r+0x42>
 8018732:	4621      	mov	r1, r4
 8018734:	4628      	mov	r0, r5
 8018736:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801873a:	f7ff bf63 	b.w	8018604 <__sflush_r>
 801873e:	4b07      	ldr	r3, [pc, #28]	; (801875c <_fflush_r+0x4c>)
 8018740:	429c      	cmp	r4, r3
 8018742:	d101      	bne.n	8018748 <_fflush_r+0x38>
 8018744:	68ac      	ldr	r4, [r5, #8]
 8018746:	e7f1      	b.n	801872c <_fflush_r+0x1c>
 8018748:	4b05      	ldr	r3, [pc, #20]	; (8018760 <_fflush_r+0x50>)
 801874a:	429c      	cmp	r4, r3
 801874c:	bf08      	it	eq
 801874e:	68ec      	ldreq	r4, [r5, #12]
 8018750:	e7ec      	b.n	801872c <_fflush_r+0x1c>
 8018752:	2000      	movs	r0, #0
 8018754:	bd38      	pop	{r3, r4, r5, pc}
 8018756:	bf00      	nop
 8018758:	0801c924 	.word	0x0801c924
 801875c:	0801c944 	.word	0x0801c944
 8018760:	0801c904 	.word	0x0801c904

08018764 <std>:
 8018764:	2300      	movs	r3, #0
 8018766:	b510      	push	{r4, lr}
 8018768:	4604      	mov	r4, r0
 801876a:	e9c0 3300 	strd	r3, r3, [r0]
 801876e:	6083      	str	r3, [r0, #8]
 8018770:	8181      	strh	r1, [r0, #12]
 8018772:	6643      	str	r3, [r0, #100]	; 0x64
 8018774:	81c2      	strh	r2, [r0, #14]
 8018776:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801877a:	6183      	str	r3, [r0, #24]
 801877c:	4619      	mov	r1, r3
 801877e:	2208      	movs	r2, #8
 8018780:	305c      	adds	r0, #92	; 0x5c
 8018782:	f7ff fdc7 	bl	8018314 <memset>
 8018786:	4b05      	ldr	r3, [pc, #20]	; (801879c <std+0x38>)
 8018788:	6224      	str	r4, [r4, #32]
 801878a:	6263      	str	r3, [r4, #36]	; 0x24
 801878c:	4b04      	ldr	r3, [pc, #16]	; (80187a0 <std+0x3c>)
 801878e:	62a3      	str	r3, [r4, #40]	; 0x28
 8018790:	4b04      	ldr	r3, [pc, #16]	; (80187a4 <std+0x40>)
 8018792:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018794:	4b04      	ldr	r3, [pc, #16]	; (80187a8 <std+0x44>)
 8018796:	6323      	str	r3, [r4, #48]	; 0x30
 8018798:	bd10      	pop	{r4, pc}
 801879a:	bf00      	nop
 801879c:	080190c9 	.word	0x080190c9
 80187a0:	080190eb 	.word	0x080190eb
 80187a4:	08019123 	.word	0x08019123
 80187a8:	08019147 	.word	0x08019147

080187ac <_cleanup_r>:
 80187ac:	4901      	ldr	r1, [pc, #4]	; (80187b4 <_cleanup_r+0x8>)
 80187ae:	f000 b885 	b.w	80188bc <_fwalk_reent>
 80187b2:	bf00      	nop
 80187b4:	08018711 	.word	0x08018711

080187b8 <__sfmoreglue>:
 80187b8:	b570      	push	{r4, r5, r6, lr}
 80187ba:	2568      	movs	r5, #104	; 0x68
 80187bc:	1e4a      	subs	r2, r1, #1
 80187be:	4355      	muls	r5, r2
 80187c0:	460e      	mov	r6, r1
 80187c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80187c6:	f000 f94f 	bl	8018a68 <_malloc_r>
 80187ca:	4604      	mov	r4, r0
 80187cc:	b140      	cbz	r0, 80187e0 <__sfmoreglue+0x28>
 80187ce:	2100      	movs	r1, #0
 80187d0:	e9c0 1600 	strd	r1, r6, [r0]
 80187d4:	300c      	adds	r0, #12
 80187d6:	60a0      	str	r0, [r4, #8]
 80187d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80187dc:	f7ff fd9a 	bl	8018314 <memset>
 80187e0:	4620      	mov	r0, r4
 80187e2:	bd70      	pop	{r4, r5, r6, pc}

080187e4 <__sinit>:
 80187e4:	6983      	ldr	r3, [r0, #24]
 80187e6:	b510      	push	{r4, lr}
 80187e8:	4604      	mov	r4, r0
 80187ea:	bb33      	cbnz	r3, 801883a <__sinit+0x56>
 80187ec:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80187f0:	6503      	str	r3, [r0, #80]	; 0x50
 80187f2:	4b12      	ldr	r3, [pc, #72]	; (801883c <__sinit+0x58>)
 80187f4:	4a12      	ldr	r2, [pc, #72]	; (8018840 <__sinit+0x5c>)
 80187f6:	681b      	ldr	r3, [r3, #0]
 80187f8:	6282      	str	r2, [r0, #40]	; 0x28
 80187fa:	4298      	cmp	r0, r3
 80187fc:	bf04      	itt	eq
 80187fe:	2301      	moveq	r3, #1
 8018800:	6183      	streq	r3, [r0, #24]
 8018802:	f000 f81f 	bl	8018844 <__sfp>
 8018806:	6060      	str	r0, [r4, #4]
 8018808:	4620      	mov	r0, r4
 801880a:	f000 f81b 	bl	8018844 <__sfp>
 801880e:	60a0      	str	r0, [r4, #8]
 8018810:	4620      	mov	r0, r4
 8018812:	f000 f817 	bl	8018844 <__sfp>
 8018816:	2200      	movs	r2, #0
 8018818:	60e0      	str	r0, [r4, #12]
 801881a:	2104      	movs	r1, #4
 801881c:	6860      	ldr	r0, [r4, #4]
 801881e:	f7ff ffa1 	bl	8018764 <std>
 8018822:	2201      	movs	r2, #1
 8018824:	2109      	movs	r1, #9
 8018826:	68a0      	ldr	r0, [r4, #8]
 8018828:	f7ff ff9c 	bl	8018764 <std>
 801882c:	2202      	movs	r2, #2
 801882e:	2112      	movs	r1, #18
 8018830:	68e0      	ldr	r0, [r4, #12]
 8018832:	f7ff ff97 	bl	8018764 <std>
 8018836:	2301      	movs	r3, #1
 8018838:	61a3      	str	r3, [r4, #24]
 801883a:	bd10      	pop	{r4, pc}
 801883c:	0801c900 	.word	0x0801c900
 8018840:	080187ad 	.word	0x080187ad

08018844 <__sfp>:
 8018844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018846:	4b1b      	ldr	r3, [pc, #108]	; (80188b4 <__sfp+0x70>)
 8018848:	4607      	mov	r7, r0
 801884a:	681e      	ldr	r6, [r3, #0]
 801884c:	69b3      	ldr	r3, [r6, #24]
 801884e:	b913      	cbnz	r3, 8018856 <__sfp+0x12>
 8018850:	4630      	mov	r0, r6
 8018852:	f7ff ffc7 	bl	80187e4 <__sinit>
 8018856:	3648      	adds	r6, #72	; 0x48
 8018858:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801885c:	3b01      	subs	r3, #1
 801885e:	d503      	bpl.n	8018868 <__sfp+0x24>
 8018860:	6833      	ldr	r3, [r6, #0]
 8018862:	b133      	cbz	r3, 8018872 <__sfp+0x2e>
 8018864:	6836      	ldr	r6, [r6, #0]
 8018866:	e7f7      	b.n	8018858 <__sfp+0x14>
 8018868:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801886c:	b16d      	cbz	r5, 801888a <__sfp+0x46>
 801886e:	3468      	adds	r4, #104	; 0x68
 8018870:	e7f4      	b.n	801885c <__sfp+0x18>
 8018872:	2104      	movs	r1, #4
 8018874:	4638      	mov	r0, r7
 8018876:	f7ff ff9f 	bl	80187b8 <__sfmoreglue>
 801887a:	6030      	str	r0, [r6, #0]
 801887c:	2800      	cmp	r0, #0
 801887e:	d1f1      	bne.n	8018864 <__sfp+0x20>
 8018880:	230c      	movs	r3, #12
 8018882:	4604      	mov	r4, r0
 8018884:	603b      	str	r3, [r7, #0]
 8018886:	4620      	mov	r0, r4
 8018888:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801888a:	4b0b      	ldr	r3, [pc, #44]	; (80188b8 <__sfp+0x74>)
 801888c:	6665      	str	r5, [r4, #100]	; 0x64
 801888e:	e9c4 5500 	strd	r5, r5, [r4]
 8018892:	60a5      	str	r5, [r4, #8]
 8018894:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8018898:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801889c:	2208      	movs	r2, #8
 801889e:	4629      	mov	r1, r5
 80188a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80188a4:	f7ff fd36 	bl	8018314 <memset>
 80188a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80188ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80188b0:	e7e9      	b.n	8018886 <__sfp+0x42>
 80188b2:	bf00      	nop
 80188b4:	0801c900 	.word	0x0801c900
 80188b8:	ffff0001 	.word	0xffff0001

080188bc <_fwalk_reent>:
 80188bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80188c0:	4680      	mov	r8, r0
 80188c2:	4689      	mov	r9, r1
 80188c4:	2600      	movs	r6, #0
 80188c6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80188ca:	b914      	cbnz	r4, 80188d2 <_fwalk_reent+0x16>
 80188cc:	4630      	mov	r0, r6
 80188ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80188d2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80188d6:	3f01      	subs	r7, #1
 80188d8:	d501      	bpl.n	80188de <_fwalk_reent+0x22>
 80188da:	6824      	ldr	r4, [r4, #0]
 80188dc:	e7f5      	b.n	80188ca <_fwalk_reent+0xe>
 80188de:	89ab      	ldrh	r3, [r5, #12]
 80188e0:	2b01      	cmp	r3, #1
 80188e2:	d907      	bls.n	80188f4 <_fwalk_reent+0x38>
 80188e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80188e8:	3301      	adds	r3, #1
 80188ea:	d003      	beq.n	80188f4 <_fwalk_reent+0x38>
 80188ec:	4629      	mov	r1, r5
 80188ee:	4640      	mov	r0, r8
 80188f0:	47c8      	blx	r9
 80188f2:	4306      	orrs	r6, r0
 80188f4:	3568      	adds	r5, #104	; 0x68
 80188f6:	e7ee      	b.n	80188d6 <_fwalk_reent+0x1a>

080188f8 <__swhatbuf_r>:
 80188f8:	b570      	push	{r4, r5, r6, lr}
 80188fa:	460e      	mov	r6, r1
 80188fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018900:	b096      	sub	sp, #88	; 0x58
 8018902:	2900      	cmp	r1, #0
 8018904:	4614      	mov	r4, r2
 8018906:	461d      	mov	r5, r3
 8018908:	da07      	bge.n	801891a <__swhatbuf_r+0x22>
 801890a:	2300      	movs	r3, #0
 801890c:	602b      	str	r3, [r5, #0]
 801890e:	89b3      	ldrh	r3, [r6, #12]
 8018910:	061a      	lsls	r2, r3, #24
 8018912:	d410      	bmi.n	8018936 <__swhatbuf_r+0x3e>
 8018914:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018918:	e00e      	b.n	8018938 <__swhatbuf_r+0x40>
 801891a:	466a      	mov	r2, sp
 801891c:	f000 fc3a 	bl	8019194 <_fstat_r>
 8018920:	2800      	cmp	r0, #0
 8018922:	dbf2      	blt.n	801890a <__swhatbuf_r+0x12>
 8018924:	9a01      	ldr	r2, [sp, #4]
 8018926:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801892a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801892e:	425a      	negs	r2, r3
 8018930:	415a      	adcs	r2, r3
 8018932:	602a      	str	r2, [r5, #0]
 8018934:	e7ee      	b.n	8018914 <__swhatbuf_r+0x1c>
 8018936:	2340      	movs	r3, #64	; 0x40
 8018938:	2000      	movs	r0, #0
 801893a:	6023      	str	r3, [r4, #0]
 801893c:	b016      	add	sp, #88	; 0x58
 801893e:	bd70      	pop	{r4, r5, r6, pc}

08018940 <__smakebuf_r>:
 8018940:	898b      	ldrh	r3, [r1, #12]
 8018942:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018944:	079d      	lsls	r5, r3, #30
 8018946:	4606      	mov	r6, r0
 8018948:	460c      	mov	r4, r1
 801894a:	d507      	bpl.n	801895c <__smakebuf_r+0x1c>
 801894c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018950:	6023      	str	r3, [r4, #0]
 8018952:	6123      	str	r3, [r4, #16]
 8018954:	2301      	movs	r3, #1
 8018956:	6163      	str	r3, [r4, #20]
 8018958:	b002      	add	sp, #8
 801895a:	bd70      	pop	{r4, r5, r6, pc}
 801895c:	ab01      	add	r3, sp, #4
 801895e:	466a      	mov	r2, sp
 8018960:	f7ff ffca 	bl	80188f8 <__swhatbuf_r>
 8018964:	9900      	ldr	r1, [sp, #0]
 8018966:	4605      	mov	r5, r0
 8018968:	4630      	mov	r0, r6
 801896a:	f000 f87d 	bl	8018a68 <_malloc_r>
 801896e:	b948      	cbnz	r0, 8018984 <__smakebuf_r+0x44>
 8018970:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018974:	059a      	lsls	r2, r3, #22
 8018976:	d4ef      	bmi.n	8018958 <__smakebuf_r+0x18>
 8018978:	f023 0303 	bic.w	r3, r3, #3
 801897c:	f043 0302 	orr.w	r3, r3, #2
 8018980:	81a3      	strh	r3, [r4, #12]
 8018982:	e7e3      	b.n	801894c <__smakebuf_r+0xc>
 8018984:	4b0d      	ldr	r3, [pc, #52]	; (80189bc <__smakebuf_r+0x7c>)
 8018986:	62b3      	str	r3, [r6, #40]	; 0x28
 8018988:	89a3      	ldrh	r3, [r4, #12]
 801898a:	6020      	str	r0, [r4, #0]
 801898c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018990:	81a3      	strh	r3, [r4, #12]
 8018992:	9b00      	ldr	r3, [sp, #0]
 8018994:	6120      	str	r0, [r4, #16]
 8018996:	6163      	str	r3, [r4, #20]
 8018998:	9b01      	ldr	r3, [sp, #4]
 801899a:	b15b      	cbz	r3, 80189b4 <__smakebuf_r+0x74>
 801899c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80189a0:	4630      	mov	r0, r6
 80189a2:	f000 fc09 	bl	80191b8 <_isatty_r>
 80189a6:	b128      	cbz	r0, 80189b4 <__smakebuf_r+0x74>
 80189a8:	89a3      	ldrh	r3, [r4, #12]
 80189aa:	f023 0303 	bic.w	r3, r3, #3
 80189ae:	f043 0301 	orr.w	r3, r3, #1
 80189b2:	81a3      	strh	r3, [r4, #12]
 80189b4:	89a3      	ldrh	r3, [r4, #12]
 80189b6:	431d      	orrs	r5, r3
 80189b8:	81a5      	strh	r5, [r4, #12]
 80189ba:	e7cd      	b.n	8018958 <__smakebuf_r+0x18>
 80189bc:	080187ad 	.word	0x080187ad

080189c0 <malloc>:
 80189c0:	4b02      	ldr	r3, [pc, #8]	; (80189cc <malloc+0xc>)
 80189c2:	4601      	mov	r1, r0
 80189c4:	6818      	ldr	r0, [r3, #0]
 80189c6:	f000 b84f 	b.w	8018a68 <_malloc_r>
 80189ca:	bf00      	nop
 80189cc:	2000001c 	.word	0x2000001c

080189d0 <_free_r>:
 80189d0:	b538      	push	{r3, r4, r5, lr}
 80189d2:	4605      	mov	r5, r0
 80189d4:	2900      	cmp	r1, #0
 80189d6:	d043      	beq.n	8018a60 <_free_r+0x90>
 80189d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80189dc:	1f0c      	subs	r4, r1, #4
 80189de:	2b00      	cmp	r3, #0
 80189e0:	bfb8      	it	lt
 80189e2:	18e4      	addlt	r4, r4, r3
 80189e4:	f000 fc18 	bl	8019218 <__malloc_lock>
 80189e8:	4a1e      	ldr	r2, [pc, #120]	; (8018a64 <_free_r+0x94>)
 80189ea:	6813      	ldr	r3, [r2, #0]
 80189ec:	4610      	mov	r0, r2
 80189ee:	b933      	cbnz	r3, 80189fe <_free_r+0x2e>
 80189f0:	6063      	str	r3, [r4, #4]
 80189f2:	6014      	str	r4, [r2, #0]
 80189f4:	4628      	mov	r0, r5
 80189f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80189fa:	f000 bc0e 	b.w	801921a <__malloc_unlock>
 80189fe:	42a3      	cmp	r3, r4
 8018a00:	d90b      	bls.n	8018a1a <_free_r+0x4a>
 8018a02:	6821      	ldr	r1, [r4, #0]
 8018a04:	1862      	adds	r2, r4, r1
 8018a06:	4293      	cmp	r3, r2
 8018a08:	bf01      	itttt	eq
 8018a0a:	681a      	ldreq	r2, [r3, #0]
 8018a0c:	685b      	ldreq	r3, [r3, #4]
 8018a0e:	1852      	addeq	r2, r2, r1
 8018a10:	6022      	streq	r2, [r4, #0]
 8018a12:	6063      	str	r3, [r4, #4]
 8018a14:	6004      	str	r4, [r0, #0]
 8018a16:	e7ed      	b.n	80189f4 <_free_r+0x24>
 8018a18:	4613      	mov	r3, r2
 8018a1a:	685a      	ldr	r2, [r3, #4]
 8018a1c:	b10a      	cbz	r2, 8018a22 <_free_r+0x52>
 8018a1e:	42a2      	cmp	r2, r4
 8018a20:	d9fa      	bls.n	8018a18 <_free_r+0x48>
 8018a22:	6819      	ldr	r1, [r3, #0]
 8018a24:	1858      	adds	r0, r3, r1
 8018a26:	42a0      	cmp	r0, r4
 8018a28:	d10b      	bne.n	8018a42 <_free_r+0x72>
 8018a2a:	6820      	ldr	r0, [r4, #0]
 8018a2c:	4401      	add	r1, r0
 8018a2e:	1858      	adds	r0, r3, r1
 8018a30:	4282      	cmp	r2, r0
 8018a32:	6019      	str	r1, [r3, #0]
 8018a34:	d1de      	bne.n	80189f4 <_free_r+0x24>
 8018a36:	6810      	ldr	r0, [r2, #0]
 8018a38:	6852      	ldr	r2, [r2, #4]
 8018a3a:	4401      	add	r1, r0
 8018a3c:	6019      	str	r1, [r3, #0]
 8018a3e:	605a      	str	r2, [r3, #4]
 8018a40:	e7d8      	b.n	80189f4 <_free_r+0x24>
 8018a42:	d902      	bls.n	8018a4a <_free_r+0x7a>
 8018a44:	230c      	movs	r3, #12
 8018a46:	602b      	str	r3, [r5, #0]
 8018a48:	e7d4      	b.n	80189f4 <_free_r+0x24>
 8018a4a:	6820      	ldr	r0, [r4, #0]
 8018a4c:	1821      	adds	r1, r4, r0
 8018a4e:	428a      	cmp	r2, r1
 8018a50:	bf01      	itttt	eq
 8018a52:	6811      	ldreq	r1, [r2, #0]
 8018a54:	6852      	ldreq	r2, [r2, #4]
 8018a56:	1809      	addeq	r1, r1, r0
 8018a58:	6021      	streq	r1, [r4, #0]
 8018a5a:	6062      	str	r2, [r4, #4]
 8018a5c:	605c      	str	r4, [r3, #4]
 8018a5e:	e7c9      	b.n	80189f4 <_free_r+0x24>
 8018a60:	bd38      	pop	{r3, r4, r5, pc}
 8018a62:	bf00      	nop
 8018a64:	20004c10 	.word	0x20004c10

08018a68 <_malloc_r>:
 8018a68:	b570      	push	{r4, r5, r6, lr}
 8018a6a:	1ccd      	adds	r5, r1, #3
 8018a6c:	f025 0503 	bic.w	r5, r5, #3
 8018a70:	3508      	adds	r5, #8
 8018a72:	2d0c      	cmp	r5, #12
 8018a74:	bf38      	it	cc
 8018a76:	250c      	movcc	r5, #12
 8018a78:	2d00      	cmp	r5, #0
 8018a7a:	4606      	mov	r6, r0
 8018a7c:	db01      	blt.n	8018a82 <_malloc_r+0x1a>
 8018a7e:	42a9      	cmp	r1, r5
 8018a80:	d903      	bls.n	8018a8a <_malloc_r+0x22>
 8018a82:	230c      	movs	r3, #12
 8018a84:	6033      	str	r3, [r6, #0]
 8018a86:	2000      	movs	r0, #0
 8018a88:	bd70      	pop	{r4, r5, r6, pc}
 8018a8a:	f000 fbc5 	bl	8019218 <__malloc_lock>
 8018a8e:	4a21      	ldr	r2, [pc, #132]	; (8018b14 <_malloc_r+0xac>)
 8018a90:	6814      	ldr	r4, [r2, #0]
 8018a92:	4621      	mov	r1, r4
 8018a94:	b991      	cbnz	r1, 8018abc <_malloc_r+0x54>
 8018a96:	4c20      	ldr	r4, [pc, #128]	; (8018b18 <_malloc_r+0xb0>)
 8018a98:	6823      	ldr	r3, [r4, #0]
 8018a9a:	b91b      	cbnz	r3, 8018aa4 <_malloc_r+0x3c>
 8018a9c:	4630      	mov	r0, r6
 8018a9e:	f000 fb03 	bl	80190a8 <_sbrk_r>
 8018aa2:	6020      	str	r0, [r4, #0]
 8018aa4:	4629      	mov	r1, r5
 8018aa6:	4630      	mov	r0, r6
 8018aa8:	f000 fafe 	bl	80190a8 <_sbrk_r>
 8018aac:	1c43      	adds	r3, r0, #1
 8018aae:	d124      	bne.n	8018afa <_malloc_r+0x92>
 8018ab0:	230c      	movs	r3, #12
 8018ab2:	4630      	mov	r0, r6
 8018ab4:	6033      	str	r3, [r6, #0]
 8018ab6:	f000 fbb0 	bl	801921a <__malloc_unlock>
 8018aba:	e7e4      	b.n	8018a86 <_malloc_r+0x1e>
 8018abc:	680b      	ldr	r3, [r1, #0]
 8018abe:	1b5b      	subs	r3, r3, r5
 8018ac0:	d418      	bmi.n	8018af4 <_malloc_r+0x8c>
 8018ac2:	2b0b      	cmp	r3, #11
 8018ac4:	d90f      	bls.n	8018ae6 <_malloc_r+0x7e>
 8018ac6:	600b      	str	r3, [r1, #0]
 8018ac8:	18cc      	adds	r4, r1, r3
 8018aca:	50cd      	str	r5, [r1, r3]
 8018acc:	4630      	mov	r0, r6
 8018ace:	f000 fba4 	bl	801921a <__malloc_unlock>
 8018ad2:	f104 000b 	add.w	r0, r4, #11
 8018ad6:	1d23      	adds	r3, r4, #4
 8018ad8:	f020 0007 	bic.w	r0, r0, #7
 8018adc:	1ac3      	subs	r3, r0, r3
 8018ade:	d0d3      	beq.n	8018a88 <_malloc_r+0x20>
 8018ae0:	425a      	negs	r2, r3
 8018ae2:	50e2      	str	r2, [r4, r3]
 8018ae4:	e7d0      	b.n	8018a88 <_malloc_r+0x20>
 8018ae6:	684b      	ldr	r3, [r1, #4]
 8018ae8:	428c      	cmp	r4, r1
 8018aea:	bf16      	itet	ne
 8018aec:	6063      	strne	r3, [r4, #4]
 8018aee:	6013      	streq	r3, [r2, #0]
 8018af0:	460c      	movne	r4, r1
 8018af2:	e7eb      	b.n	8018acc <_malloc_r+0x64>
 8018af4:	460c      	mov	r4, r1
 8018af6:	6849      	ldr	r1, [r1, #4]
 8018af8:	e7cc      	b.n	8018a94 <_malloc_r+0x2c>
 8018afa:	1cc4      	adds	r4, r0, #3
 8018afc:	f024 0403 	bic.w	r4, r4, #3
 8018b00:	42a0      	cmp	r0, r4
 8018b02:	d005      	beq.n	8018b10 <_malloc_r+0xa8>
 8018b04:	1a21      	subs	r1, r4, r0
 8018b06:	4630      	mov	r0, r6
 8018b08:	f000 face 	bl	80190a8 <_sbrk_r>
 8018b0c:	3001      	adds	r0, #1
 8018b0e:	d0cf      	beq.n	8018ab0 <_malloc_r+0x48>
 8018b10:	6025      	str	r5, [r4, #0]
 8018b12:	e7db      	b.n	8018acc <_malloc_r+0x64>
 8018b14:	20004c10 	.word	0x20004c10
 8018b18:	20004c14 	.word	0x20004c14

08018b1c <__sfputc_r>:
 8018b1c:	6893      	ldr	r3, [r2, #8]
 8018b1e:	b410      	push	{r4}
 8018b20:	3b01      	subs	r3, #1
 8018b22:	2b00      	cmp	r3, #0
 8018b24:	6093      	str	r3, [r2, #8]
 8018b26:	da07      	bge.n	8018b38 <__sfputc_r+0x1c>
 8018b28:	6994      	ldr	r4, [r2, #24]
 8018b2a:	42a3      	cmp	r3, r4
 8018b2c:	db01      	blt.n	8018b32 <__sfputc_r+0x16>
 8018b2e:	290a      	cmp	r1, #10
 8018b30:	d102      	bne.n	8018b38 <__sfputc_r+0x1c>
 8018b32:	bc10      	pop	{r4}
 8018b34:	f7ff bca6 	b.w	8018484 <__swbuf_r>
 8018b38:	6813      	ldr	r3, [r2, #0]
 8018b3a:	1c58      	adds	r0, r3, #1
 8018b3c:	6010      	str	r0, [r2, #0]
 8018b3e:	7019      	strb	r1, [r3, #0]
 8018b40:	4608      	mov	r0, r1
 8018b42:	bc10      	pop	{r4}
 8018b44:	4770      	bx	lr

08018b46 <__sfputs_r>:
 8018b46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b48:	4606      	mov	r6, r0
 8018b4a:	460f      	mov	r7, r1
 8018b4c:	4614      	mov	r4, r2
 8018b4e:	18d5      	adds	r5, r2, r3
 8018b50:	42ac      	cmp	r4, r5
 8018b52:	d101      	bne.n	8018b58 <__sfputs_r+0x12>
 8018b54:	2000      	movs	r0, #0
 8018b56:	e007      	b.n	8018b68 <__sfputs_r+0x22>
 8018b58:	463a      	mov	r2, r7
 8018b5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018b5e:	4630      	mov	r0, r6
 8018b60:	f7ff ffdc 	bl	8018b1c <__sfputc_r>
 8018b64:	1c43      	adds	r3, r0, #1
 8018b66:	d1f3      	bne.n	8018b50 <__sfputs_r+0xa>
 8018b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018b6c <_vfiprintf_r>:
 8018b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b70:	460c      	mov	r4, r1
 8018b72:	b09d      	sub	sp, #116	; 0x74
 8018b74:	4617      	mov	r7, r2
 8018b76:	461d      	mov	r5, r3
 8018b78:	4606      	mov	r6, r0
 8018b7a:	b118      	cbz	r0, 8018b84 <_vfiprintf_r+0x18>
 8018b7c:	6983      	ldr	r3, [r0, #24]
 8018b7e:	b90b      	cbnz	r3, 8018b84 <_vfiprintf_r+0x18>
 8018b80:	f7ff fe30 	bl	80187e4 <__sinit>
 8018b84:	4b7c      	ldr	r3, [pc, #496]	; (8018d78 <_vfiprintf_r+0x20c>)
 8018b86:	429c      	cmp	r4, r3
 8018b88:	d158      	bne.n	8018c3c <_vfiprintf_r+0xd0>
 8018b8a:	6874      	ldr	r4, [r6, #4]
 8018b8c:	89a3      	ldrh	r3, [r4, #12]
 8018b8e:	0718      	lsls	r0, r3, #28
 8018b90:	d55e      	bpl.n	8018c50 <_vfiprintf_r+0xe4>
 8018b92:	6923      	ldr	r3, [r4, #16]
 8018b94:	2b00      	cmp	r3, #0
 8018b96:	d05b      	beq.n	8018c50 <_vfiprintf_r+0xe4>
 8018b98:	2300      	movs	r3, #0
 8018b9a:	9309      	str	r3, [sp, #36]	; 0x24
 8018b9c:	2320      	movs	r3, #32
 8018b9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018ba2:	2330      	movs	r3, #48	; 0x30
 8018ba4:	f04f 0b01 	mov.w	fp, #1
 8018ba8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018bac:	9503      	str	r5, [sp, #12]
 8018bae:	46b8      	mov	r8, r7
 8018bb0:	4645      	mov	r5, r8
 8018bb2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8018bb6:	b10b      	cbz	r3, 8018bbc <_vfiprintf_r+0x50>
 8018bb8:	2b25      	cmp	r3, #37	; 0x25
 8018bba:	d154      	bne.n	8018c66 <_vfiprintf_r+0xfa>
 8018bbc:	ebb8 0a07 	subs.w	sl, r8, r7
 8018bc0:	d00b      	beq.n	8018bda <_vfiprintf_r+0x6e>
 8018bc2:	4653      	mov	r3, sl
 8018bc4:	463a      	mov	r2, r7
 8018bc6:	4621      	mov	r1, r4
 8018bc8:	4630      	mov	r0, r6
 8018bca:	f7ff ffbc 	bl	8018b46 <__sfputs_r>
 8018bce:	3001      	adds	r0, #1
 8018bd0:	f000 80c2 	beq.w	8018d58 <_vfiprintf_r+0x1ec>
 8018bd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018bd6:	4453      	add	r3, sl
 8018bd8:	9309      	str	r3, [sp, #36]	; 0x24
 8018bda:	f898 3000 	ldrb.w	r3, [r8]
 8018bde:	2b00      	cmp	r3, #0
 8018be0:	f000 80ba 	beq.w	8018d58 <_vfiprintf_r+0x1ec>
 8018be4:	2300      	movs	r3, #0
 8018be6:	f04f 32ff 	mov.w	r2, #4294967295
 8018bea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018bee:	9304      	str	r3, [sp, #16]
 8018bf0:	9307      	str	r3, [sp, #28]
 8018bf2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018bf6:	931a      	str	r3, [sp, #104]	; 0x68
 8018bf8:	46a8      	mov	r8, r5
 8018bfa:	2205      	movs	r2, #5
 8018bfc:	f818 1b01 	ldrb.w	r1, [r8], #1
 8018c00:	485e      	ldr	r0, [pc, #376]	; (8018d7c <_vfiprintf_r+0x210>)
 8018c02:	f000 fafb 	bl	80191fc <memchr>
 8018c06:	9b04      	ldr	r3, [sp, #16]
 8018c08:	bb78      	cbnz	r0, 8018c6a <_vfiprintf_r+0xfe>
 8018c0a:	06d9      	lsls	r1, r3, #27
 8018c0c:	bf44      	itt	mi
 8018c0e:	2220      	movmi	r2, #32
 8018c10:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018c14:	071a      	lsls	r2, r3, #28
 8018c16:	bf44      	itt	mi
 8018c18:	222b      	movmi	r2, #43	; 0x2b
 8018c1a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018c1e:	782a      	ldrb	r2, [r5, #0]
 8018c20:	2a2a      	cmp	r2, #42	; 0x2a
 8018c22:	d02a      	beq.n	8018c7a <_vfiprintf_r+0x10e>
 8018c24:	46a8      	mov	r8, r5
 8018c26:	2000      	movs	r0, #0
 8018c28:	250a      	movs	r5, #10
 8018c2a:	9a07      	ldr	r2, [sp, #28]
 8018c2c:	4641      	mov	r1, r8
 8018c2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018c32:	3b30      	subs	r3, #48	; 0x30
 8018c34:	2b09      	cmp	r3, #9
 8018c36:	d969      	bls.n	8018d0c <_vfiprintf_r+0x1a0>
 8018c38:	b360      	cbz	r0, 8018c94 <_vfiprintf_r+0x128>
 8018c3a:	e024      	b.n	8018c86 <_vfiprintf_r+0x11a>
 8018c3c:	4b50      	ldr	r3, [pc, #320]	; (8018d80 <_vfiprintf_r+0x214>)
 8018c3e:	429c      	cmp	r4, r3
 8018c40:	d101      	bne.n	8018c46 <_vfiprintf_r+0xda>
 8018c42:	68b4      	ldr	r4, [r6, #8]
 8018c44:	e7a2      	b.n	8018b8c <_vfiprintf_r+0x20>
 8018c46:	4b4f      	ldr	r3, [pc, #316]	; (8018d84 <_vfiprintf_r+0x218>)
 8018c48:	429c      	cmp	r4, r3
 8018c4a:	bf08      	it	eq
 8018c4c:	68f4      	ldreq	r4, [r6, #12]
 8018c4e:	e79d      	b.n	8018b8c <_vfiprintf_r+0x20>
 8018c50:	4621      	mov	r1, r4
 8018c52:	4630      	mov	r0, r6
 8018c54:	f7ff fc68 	bl	8018528 <__swsetup_r>
 8018c58:	2800      	cmp	r0, #0
 8018c5a:	d09d      	beq.n	8018b98 <_vfiprintf_r+0x2c>
 8018c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8018c60:	b01d      	add	sp, #116	; 0x74
 8018c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c66:	46a8      	mov	r8, r5
 8018c68:	e7a2      	b.n	8018bb0 <_vfiprintf_r+0x44>
 8018c6a:	4a44      	ldr	r2, [pc, #272]	; (8018d7c <_vfiprintf_r+0x210>)
 8018c6c:	4645      	mov	r5, r8
 8018c6e:	1a80      	subs	r0, r0, r2
 8018c70:	fa0b f000 	lsl.w	r0, fp, r0
 8018c74:	4318      	orrs	r0, r3
 8018c76:	9004      	str	r0, [sp, #16]
 8018c78:	e7be      	b.n	8018bf8 <_vfiprintf_r+0x8c>
 8018c7a:	9a03      	ldr	r2, [sp, #12]
 8018c7c:	1d11      	adds	r1, r2, #4
 8018c7e:	6812      	ldr	r2, [r2, #0]
 8018c80:	9103      	str	r1, [sp, #12]
 8018c82:	2a00      	cmp	r2, #0
 8018c84:	db01      	blt.n	8018c8a <_vfiprintf_r+0x11e>
 8018c86:	9207      	str	r2, [sp, #28]
 8018c88:	e004      	b.n	8018c94 <_vfiprintf_r+0x128>
 8018c8a:	4252      	negs	r2, r2
 8018c8c:	f043 0302 	orr.w	r3, r3, #2
 8018c90:	9207      	str	r2, [sp, #28]
 8018c92:	9304      	str	r3, [sp, #16]
 8018c94:	f898 3000 	ldrb.w	r3, [r8]
 8018c98:	2b2e      	cmp	r3, #46	; 0x2e
 8018c9a:	d10e      	bne.n	8018cba <_vfiprintf_r+0x14e>
 8018c9c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8018ca0:	2b2a      	cmp	r3, #42	; 0x2a
 8018ca2:	d138      	bne.n	8018d16 <_vfiprintf_r+0x1aa>
 8018ca4:	9b03      	ldr	r3, [sp, #12]
 8018ca6:	f108 0802 	add.w	r8, r8, #2
 8018caa:	1d1a      	adds	r2, r3, #4
 8018cac:	681b      	ldr	r3, [r3, #0]
 8018cae:	9203      	str	r2, [sp, #12]
 8018cb0:	2b00      	cmp	r3, #0
 8018cb2:	bfb8      	it	lt
 8018cb4:	f04f 33ff 	movlt.w	r3, #4294967295
 8018cb8:	9305      	str	r3, [sp, #20]
 8018cba:	4d33      	ldr	r5, [pc, #204]	; (8018d88 <_vfiprintf_r+0x21c>)
 8018cbc:	2203      	movs	r2, #3
 8018cbe:	f898 1000 	ldrb.w	r1, [r8]
 8018cc2:	4628      	mov	r0, r5
 8018cc4:	f000 fa9a 	bl	80191fc <memchr>
 8018cc8:	b140      	cbz	r0, 8018cdc <_vfiprintf_r+0x170>
 8018cca:	2340      	movs	r3, #64	; 0x40
 8018ccc:	1b40      	subs	r0, r0, r5
 8018cce:	fa03 f000 	lsl.w	r0, r3, r0
 8018cd2:	9b04      	ldr	r3, [sp, #16]
 8018cd4:	f108 0801 	add.w	r8, r8, #1
 8018cd8:	4303      	orrs	r3, r0
 8018cda:	9304      	str	r3, [sp, #16]
 8018cdc:	f898 1000 	ldrb.w	r1, [r8]
 8018ce0:	2206      	movs	r2, #6
 8018ce2:	482a      	ldr	r0, [pc, #168]	; (8018d8c <_vfiprintf_r+0x220>)
 8018ce4:	f108 0701 	add.w	r7, r8, #1
 8018ce8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018cec:	f000 fa86 	bl	80191fc <memchr>
 8018cf0:	2800      	cmp	r0, #0
 8018cf2:	d037      	beq.n	8018d64 <_vfiprintf_r+0x1f8>
 8018cf4:	4b26      	ldr	r3, [pc, #152]	; (8018d90 <_vfiprintf_r+0x224>)
 8018cf6:	bb1b      	cbnz	r3, 8018d40 <_vfiprintf_r+0x1d4>
 8018cf8:	9b03      	ldr	r3, [sp, #12]
 8018cfa:	3307      	adds	r3, #7
 8018cfc:	f023 0307 	bic.w	r3, r3, #7
 8018d00:	3308      	adds	r3, #8
 8018d02:	9303      	str	r3, [sp, #12]
 8018d04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018d06:	444b      	add	r3, r9
 8018d08:	9309      	str	r3, [sp, #36]	; 0x24
 8018d0a:	e750      	b.n	8018bae <_vfiprintf_r+0x42>
 8018d0c:	fb05 3202 	mla	r2, r5, r2, r3
 8018d10:	2001      	movs	r0, #1
 8018d12:	4688      	mov	r8, r1
 8018d14:	e78a      	b.n	8018c2c <_vfiprintf_r+0xc0>
 8018d16:	2300      	movs	r3, #0
 8018d18:	250a      	movs	r5, #10
 8018d1a:	4619      	mov	r1, r3
 8018d1c:	f108 0801 	add.w	r8, r8, #1
 8018d20:	9305      	str	r3, [sp, #20]
 8018d22:	4640      	mov	r0, r8
 8018d24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018d28:	3a30      	subs	r2, #48	; 0x30
 8018d2a:	2a09      	cmp	r2, #9
 8018d2c:	d903      	bls.n	8018d36 <_vfiprintf_r+0x1ca>
 8018d2e:	2b00      	cmp	r3, #0
 8018d30:	d0c3      	beq.n	8018cba <_vfiprintf_r+0x14e>
 8018d32:	9105      	str	r1, [sp, #20]
 8018d34:	e7c1      	b.n	8018cba <_vfiprintf_r+0x14e>
 8018d36:	fb05 2101 	mla	r1, r5, r1, r2
 8018d3a:	2301      	movs	r3, #1
 8018d3c:	4680      	mov	r8, r0
 8018d3e:	e7f0      	b.n	8018d22 <_vfiprintf_r+0x1b6>
 8018d40:	ab03      	add	r3, sp, #12
 8018d42:	9300      	str	r3, [sp, #0]
 8018d44:	4622      	mov	r2, r4
 8018d46:	4b13      	ldr	r3, [pc, #76]	; (8018d94 <_vfiprintf_r+0x228>)
 8018d48:	a904      	add	r1, sp, #16
 8018d4a:	4630      	mov	r0, r6
 8018d4c:	f3af 8000 	nop.w
 8018d50:	f1b0 3fff 	cmp.w	r0, #4294967295
 8018d54:	4681      	mov	r9, r0
 8018d56:	d1d5      	bne.n	8018d04 <_vfiprintf_r+0x198>
 8018d58:	89a3      	ldrh	r3, [r4, #12]
 8018d5a:	065b      	lsls	r3, r3, #25
 8018d5c:	f53f af7e 	bmi.w	8018c5c <_vfiprintf_r+0xf0>
 8018d60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018d62:	e77d      	b.n	8018c60 <_vfiprintf_r+0xf4>
 8018d64:	ab03      	add	r3, sp, #12
 8018d66:	9300      	str	r3, [sp, #0]
 8018d68:	4622      	mov	r2, r4
 8018d6a:	4b0a      	ldr	r3, [pc, #40]	; (8018d94 <_vfiprintf_r+0x228>)
 8018d6c:	a904      	add	r1, sp, #16
 8018d6e:	4630      	mov	r0, r6
 8018d70:	f000 f888 	bl	8018e84 <_printf_i>
 8018d74:	e7ec      	b.n	8018d50 <_vfiprintf_r+0x1e4>
 8018d76:	bf00      	nop
 8018d78:	0801c924 	.word	0x0801c924
 8018d7c:	0801c964 	.word	0x0801c964
 8018d80:	0801c944 	.word	0x0801c944
 8018d84:	0801c904 	.word	0x0801c904
 8018d88:	0801c96a 	.word	0x0801c96a
 8018d8c:	0801c96e 	.word	0x0801c96e
 8018d90:	00000000 	.word	0x00000000
 8018d94:	08018b47 	.word	0x08018b47

08018d98 <_printf_common>:
 8018d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018d9c:	4691      	mov	r9, r2
 8018d9e:	461f      	mov	r7, r3
 8018da0:	688a      	ldr	r2, [r1, #8]
 8018da2:	690b      	ldr	r3, [r1, #16]
 8018da4:	4606      	mov	r6, r0
 8018da6:	4293      	cmp	r3, r2
 8018da8:	bfb8      	it	lt
 8018daa:	4613      	movlt	r3, r2
 8018dac:	f8c9 3000 	str.w	r3, [r9]
 8018db0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018db4:	460c      	mov	r4, r1
 8018db6:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018dba:	b112      	cbz	r2, 8018dc2 <_printf_common+0x2a>
 8018dbc:	3301      	adds	r3, #1
 8018dbe:	f8c9 3000 	str.w	r3, [r9]
 8018dc2:	6823      	ldr	r3, [r4, #0]
 8018dc4:	0699      	lsls	r1, r3, #26
 8018dc6:	bf42      	ittt	mi
 8018dc8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8018dcc:	3302      	addmi	r3, #2
 8018dce:	f8c9 3000 	strmi.w	r3, [r9]
 8018dd2:	6825      	ldr	r5, [r4, #0]
 8018dd4:	f015 0506 	ands.w	r5, r5, #6
 8018dd8:	d107      	bne.n	8018dea <_printf_common+0x52>
 8018dda:	f104 0a19 	add.w	sl, r4, #25
 8018dde:	68e3      	ldr	r3, [r4, #12]
 8018de0:	f8d9 2000 	ldr.w	r2, [r9]
 8018de4:	1a9b      	subs	r3, r3, r2
 8018de6:	42ab      	cmp	r3, r5
 8018de8:	dc29      	bgt.n	8018e3e <_printf_common+0xa6>
 8018dea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8018dee:	6822      	ldr	r2, [r4, #0]
 8018df0:	3300      	adds	r3, #0
 8018df2:	bf18      	it	ne
 8018df4:	2301      	movne	r3, #1
 8018df6:	0692      	lsls	r2, r2, #26
 8018df8:	d42e      	bmi.n	8018e58 <_printf_common+0xc0>
 8018dfa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018dfe:	4639      	mov	r1, r7
 8018e00:	4630      	mov	r0, r6
 8018e02:	47c0      	blx	r8
 8018e04:	3001      	adds	r0, #1
 8018e06:	d021      	beq.n	8018e4c <_printf_common+0xb4>
 8018e08:	6823      	ldr	r3, [r4, #0]
 8018e0a:	68e5      	ldr	r5, [r4, #12]
 8018e0c:	f003 0306 	and.w	r3, r3, #6
 8018e10:	2b04      	cmp	r3, #4
 8018e12:	bf18      	it	ne
 8018e14:	2500      	movne	r5, #0
 8018e16:	f8d9 2000 	ldr.w	r2, [r9]
 8018e1a:	f04f 0900 	mov.w	r9, #0
 8018e1e:	bf08      	it	eq
 8018e20:	1aad      	subeq	r5, r5, r2
 8018e22:	68a3      	ldr	r3, [r4, #8]
 8018e24:	6922      	ldr	r2, [r4, #16]
 8018e26:	bf08      	it	eq
 8018e28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018e2c:	4293      	cmp	r3, r2
 8018e2e:	bfc4      	itt	gt
 8018e30:	1a9b      	subgt	r3, r3, r2
 8018e32:	18ed      	addgt	r5, r5, r3
 8018e34:	341a      	adds	r4, #26
 8018e36:	454d      	cmp	r5, r9
 8018e38:	d11a      	bne.n	8018e70 <_printf_common+0xd8>
 8018e3a:	2000      	movs	r0, #0
 8018e3c:	e008      	b.n	8018e50 <_printf_common+0xb8>
 8018e3e:	2301      	movs	r3, #1
 8018e40:	4652      	mov	r2, sl
 8018e42:	4639      	mov	r1, r7
 8018e44:	4630      	mov	r0, r6
 8018e46:	47c0      	blx	r8
 8018e48:	3001      	adds	r0, #1
 8018e4a:	d103      	bne.n	8018e54 <_printf_common+0xbc>
 8018e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8018e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018e54:	3501      	adds	r5, #1
 8018e56:	e7c2      	b.n	8018dde <_printf_common+0x46>
 8018e58:	2030      	movs	r0, #48	; 0x30
 8018e5a:	18e1      	adds	r1, r4, r3
 8018e5c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018e60:	1c5a      	adds	r2, r3, #1
 8018e62:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018e66:	4422      	add	r2, r4
 8018e68:	3302      	adds	r3, #2
 8018e6a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018e6e:	e7c4      	b.n	8018dfa <_printf_common+0x62>
 8018e70:	2301      	movs	r3, #1
 8018e72:	4622      	mov	r2, r4
 8018e74:	4639      	mov	r1, r7
 8018e76:	4630      	mov	r0, r6
 8018e78:	47c0      	blx	r8
 8018e7a:	3001      	adds	r0, #1
 8018e7c:	d0e6      	beq.n	8018e4c <_printf_common+0xb4>
 8018e7e:	f109 0901 	add.w	r9, r9, #1
 8018e82:	e7d8      	b.n	8018e36 <_printf_common+0x9e>

08018e84 <_printf_i>:
 8018e84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018e88:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8018e8c:	460c      	mov	r4, r1
 8018e8e:	7e09      	ldrb	r1, [r1, #24]
 8018e90:	b085      	sub	sp, #20
 8018e92:	296e      	cmp	r1, #110	; 0x6e
 8018e94:	4617      	mov	r7, r2
 8018e96:	4606      	mov	r6, r0
 8018e98:	4698      	mov	r8, r3
 8018e9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018e9c:	f000 80b3 	beq.w	8019006 <_printf_i+0x182>
 8018ea0:	d822      	bhi.n	8018ee8 <_printf_i+0x64>
 8018ea2:	2963      	cmp	r1, #99	; 0x63
 8018ea4:	d036      	beq.n	8018f14 <_printf_i+0x90>
 8018ea6:	d80a      	bhi.n	8018ebe <_printf_i+0x3a>
 8018ea8:	2900      	cmp	r1, #0
 8018eaa:	f000 80b9 	beq.w	8019020 <_printf_i+0x19c>
 8018eae:	2958      	cmp	r1, #88	; 0x58
 8018eb0:	f000 8083 	beq.w	8018fba <_printf_i+0x136>
 8018eb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018eb8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8018ebc:	e032      	b.n	8018f24 <_printf_i+0xa0>
 8018ebe:	2964      	cmp	r1, #100	; 0x64
 8018ec0:	d001      	beq.n	8018ec6 <_printf_i+0x42>
 8018ec2:	2969      	cmp	r1, #105	; 0x69
 8018ec4:	d1f6      	bne.n	8018eb4 <_printf_i+0x30>
 8018ec6:	6820      	ldr	r0, [r4, #0]
 8018ec8:	6813      	ldr	r3, [r2, #0]
 8018eca:	0605      	lsls	r5, r0, #24
 8018ecc:	f103 0104 	add.w	r1, r3, #4
 8018ed0:	d52a      	bpl.n	8018f28 <_printf_i+0xa4>
 8018ed2:	681b      	ldr	r3, [r3, #0]
 8018ed4:	6011      	str	r1, [r2, #0]
 8018ed6:	2b00      	cmp	r3, #0
 8018ed8:	da03      	bge.n	8018ee2 <_printf_i+0x5e>
 8018eda:	222d      	movs	r2, #45	; 0x2d
 8018edc:	425b      	negs	r3, r3
 8018ede:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8018ee2:	486f      	ldr	r0, [pc, #444]	; (80190a0 <_printf_i+0x21c>)
 8018ee4:	220a      	movs	r2, #10
 8018ee6:	e039      	b.n	8018f5c <_printf_i+0xd8>
 8018ee8:	2973      	cmp	r1, #115	; 0x73
 8018eea:	f000 809d 	beq.w	8019028 <_printf_i+0x1a4>
 8018eee:	d808      	bhi.n	8018f02 <_printf_i+0x7e>
 8018ef0:	296f      	cmp	r1, #111	; 0x6f
 8018ef2:	d020      	beq.n	8018f36 <_printf_i+0xb2>
 8018ef4:	2970      	cmp	r1, #112	; 0x70
 8018ef6:	d1dd      	bne.n	8018eb4 <_printf_i+0x30>
 8018ef8:	6823      	ldr	r3, [r4, #0]
 8018efa:	f043 0320 	orr.w	r3, r3, #32
 8018efe:	6023      	str	r3, [r4, #0]
 8018f00:	e003      	b.n	8018f0a <_printf_i+0x86>
 8018f02:	2975      	cmp	r1, #117	; 0x75
 8018f04:	d017      	beq.n	8018f36 <_printf_i+0xb2>
 8018f06:	2978      	cmp	r1, #120	; 0x78
 8018f08:	d1d4      	bne.n	8018eb4 <_printf_i+0x30>
 8018f0a:	2378      	movs	r3, #120	; 0x78
 8018f0c:	4865      	ldr	r0, [pc, #404]	; (80190a4 <_printf_i+0x220>)
 8018f0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8018f12:	e055      	b.n	8018fc0 <_printf_i+0x13c>
 8018f14:	6813      	ldr	r3, [r2, #0]
 8018f16:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018f1a:	1d19      	adds	r1, r3, #4
 8018f1c:	681b      	ldr	r3, [r3, #0]
 8018f1e:	6011      	str	r1, [r2, #0]
 8018f20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018f24:	2301      	movs	r3, #1
 8018f26:	e08c      	b.n	8019042 <_printf_i+0x1be>
 8018f28:	681b      	ldr	r3, [r3, #0]
 8018f2a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8018f2e:	6011      	str	r1, [r2, #0]
 8018f30:	bf18      	it	ne
 8018f32:	b21b      	sxthne	r3, r3
 8018f34:	e7cf      	b.n	8018ed6 <_printf_i+0x52>
 8018f36:	6813      	ldr	r3, [r2, #0]
 8018f38:	6825      	ldr	r5, [r4, #0]
 8018f3a:	1d18      	adds	r0, r3, #4
 8018f3c:	6010      	str	r0, [r2, #0]
 8018f3e:	0628      	lsls	r0, r5, #24
 8018f40:	d501      	bpl.n	8018f46 <_printf_i+0xc2>
 8018f42:	681b      	ldr	r3, [r3, #0]
 8018f44:	e002      	b.n	8018f4c <_printf_i+0xc8>
 8018f46:	0668      	lsls	r0, r5, #25
 8018f48:	d5fb      	bpl.n	8018f42 <_printf_i+0xbe>
 8018f4a:	881b      	ldrh	r3, [r3, #0]
 8018f4c:	296f      	cmp	r1, #111	; 0x6f
 8018f4e:	bf14      	ite	ne
 8018f50:	220a      	movne	r2, #10
 8018f52:	2208      	moveq	r2, #8
 8018f54:	4852      	ldr	r0, [pc, #328]	; (80190a0 <_printf_i+0x21c>)
 8018f56:	2100      	movs	r1, #0
 8018f58:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018f5c:	6865      	ldr	r5, [r4, #4]
 8018f5e:	2d00      	cmp	r5, #0
 8018f60:	60a5      	str	r5, [r4, #8]
 8018f62:	f2c0 8095 	blt.w	8019090 <_printf_i+0x20c>
 8018f66:	6821      	ldr	r1, [r4, #0]
 8018f68:	f021 0104 	bic.w	r1, r1, #4
 8018f6c:	6021      	str	r1, [r4, #0]
 8018f6e:	2b00      	cmp	r3, #0
 8018f70:	d13d      	bne.n	8018fee <_printf_i+0x16a>
 8018f72:	2d00      	cmp	r5, #0
 8018f74:	f040 808e 	bne.w	8019094 <_printf_i+0x210>
 8018f78:	4665      	mov	r5, ip
 8018f7a:	2a08      	cmp	r2, #8
 8018f7c:	d10b      	bne.n	8018f96 <_printf_i+0x112>
 8018f7e:	6823      	ldr	r3, [r4, #0]
 8018f80:	07db      	lsls	r3, r3, #31
 8018f82:	d508      	bpl.n	8018f96 <_printf_i+0x112>
 8018f84:	6923      	ldr	r3, [r4, #16]
 8018f86:	6862      	ldr	r2, [r4, #4]
 8018f88:	429a      	cmp	r2, r3
 8018f8a:	bfde      	ittt	le
 8018f8c:	2330      	movle	r3, #48	; 0x30
 8018f8e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018f92:	f105 35ff 	addle.w	r5, r5, #4294967295
 8018f96:	ebac 0305 	sub.w	r3, ip, r5
 8018f9a:	6123      	str	r3, [r4, #16]
 8018f9c:	f8cd 8000 	str.w	r8, [sp]
 8018fa0:	463b      	mov	r3, r7
 8018fa2:	aa03      	add	r2, sp, #12
 8018fa4:	4621      	mov	r1, r4
 8018fa6:	4630      	mov	r0, r6
 8018fa8:	f7ff fef6 	bl	8018d98 <_printf_common>
 8018fac:	3001      	adds	r0, #1
 8018fae:	d14d      	bne.n	801904c <_printf_i+0x1c8>
 8018fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8018fb4:	b005      	add	sp, #20
 8018fb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018fba:	4839      	ldr	r0, [pc, #228]	; (80190a0 <_printf_i+0x21c>)
 8018fbc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8018fc0:	6813      	ldr	r3, [r2, #0]
 8018fc2:	6821      	ldr	r1, [r4, #0]
 8018fc4:	1d1d      	adds	r5, r3, #4
 8018fc6:	681b      	ldr	r3, [r3, #0]
 8018fc8:	6015      	str	r5, [r2, #0]
 8018fca:	060a      	lsls	r2, r1, #24
 8018fcc:	d50b      	bpl.n	8018fe6 <_printf_i+0x162>
 8018fce:	07ca      	lsls	r2, r1, #31
 8018fd0:	bf44      	itt	mi
 8018fd2:	f041 0120 	orrmi.w	r1, r1, #32
 8018fd6:	6021      	strmi	r1, [r4, #0]
 8018fd8:	b91b      	cbnz	r3, 8018fe2 <_printf_i+0x15e>
 8018fda:	6822      	ldr	r2, [r4, #0]
 8018fdc:	f022 0220 	bic.w	r2, r2, #32
 8018fe0:	6022      	str	r2, [r4, #0]
 8018fe2:	2210      	movs	r2, #16
 8018fe4:	e7b7      	b.n	8018f56 <_printf_i+0xd2>
 8018fe6:	064d      	lsls	r5, r1, #25
 8018fe8:	bf48      	it	mi
 8018fea:	b29b      	uxthmi	r3, r3
 8018fec:	e7ef      	b.n	8018fce <_printf_i+0x14a>
 8018fee:	4665      	mov	r5, ip
 8018ff0:	fbb3 f1f2 	udiv	r1, r3, r2
 8018ff4:	fb02 3311 	mls	r3, r2, r1, r3
 8018ff8:	5cc3      	ldrb	r3, [r0, r3]
 8018ffa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8018ffe:	460b      	mov	r3, r1
 8019000:	2900      	cmp	r1, #0
 8019002:	d1f5      	bne.n	8018ff0 <_printf_i+0x16c>
 8019004:	e7b9      	b.n	8018f7a <_printf_i+0xf6>
 8019006:	6813      	ldr	r3, [r2, #0]
 8019008:	6825      	ldr	r5, [r4, #0]
 801900a:	1d18      	adds	r0, r3, #4
 801900c:	6961      	ldr	r1, [r4, #20]
 801900e:	6010      	str	r0, [r2, #0]
 8019010:	0628      	lsls	r0, r5, #24
 8019012:	681b      	ldr	r3, [r3, #0]
 8019014:	d501      	bpl.n	801901a <_printf_i+0x196>
 8019016:	6019      	str	r1, [r3, #0]
 8019018:	e002      	b.n	8019020 <_printf_i+0x19c>
 801901a:	066a      	lsls	r2, r5, #25
 801901c:	d5fb      	bpl.n	8019016 <_printf_i+0x192>
 801901e:	8019      	strh	r1, [r3, #0]
 8019020:	2300      	movs	r3, #0
 8019022:	4665      	mov	r5, ip
 8019024:	6123      	str	r3, [r4, #16]
 8019026:	e7b9      	b.n	8018f9c <_printf_i+0x118>
 8019028:	6813      	ldr	r3, [r2, #0]
 801902a:	1d19      	adds	r1, r3, #4
 801902c:	6011      	str	r1, [r2, #0]
 801902e:	681d      	ldr	r5, [r3, #0]
 8019030:	6862      	ldr	r2, [r4, #4]
 8019032:	2100      	movs	r1, #0
 8019034:	4628      	mov	r0, r5
 8019036:	f000 f8e1 	bl	80191fc <memchr>
 801903a:	b108      	cbz	r0, 8019040 <_printf_i+0x1bc>
 801903c:	1b40      	subs	r0, r0, r5
 801903e:	6060      	str	r0, [r4, #4]
 8019040:	6863      	ldr	r3, [r4, #4]
 8019042:	6123      	str	r3, [r4, #16]
 8019044:	2300      	movs	r3, #0
 8019046:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801904a:	e7a7      	b.n	8018f9c <_printf_i+0x118>
 801904c:	6923      	ldr	r3, [r4, #16]
 801904e:	462a      	mov	r2, r5
 8019050:	4639      	mov	r1, r7
 8019052:	4630      	mov	r0, r6
 8019054:	47c0      	blx	r8
 8019056:	3001      	adds	r0, #1
 8019058:	d0aa      	beq.n	8018fb0 <_printf_i+0x12c>
 801905a:	6823      	ldr	r3, [r4, #0]
 801905c:	079b      	lsls	r3, r3, #30
 801905e:	d413      	bmi.n	8019088 <_printf_i+0x204>
 8019060:	68e0      	ldr	r0, [r4, #12]
 8019062:	9b03      	ldr	r3, [sp, #12]
 8019064:	4298      	cmp	r0, r3
 8019066:	bfb8      	it	lt
 8019068:	4618      	movlt	r0, r3
 801906a:	e7a3      	b.n	8018fb4 <_printf_i+0x130>
 801906c:	2301      	movs	r3, #1
 801906e:	464a      	mov	r2, r9
 8019070:	4639      	mov	r1, r7
 8019072:	4630      	mov	r0, r6
 8019074:	47c0      	blx	r8
 8019076:	3001      	adds	r0, #1
 8019078:	d09a      	beq.n	8018fb0 <_printf_i+0x12c>
 801907a:	3501      	adds	r5, #1
 801907c:	68e3      	ldr	r3, [r4, #12]
 801907e:	9a03      	ldr	r2, [sp, #12]
 8019080:	1a9b      	subs	r3, r3, r2
 8019082:	42ab      	cmp	r3, r5
 8019084:	dcf2      	bgt.n	801906c <_printf_i+0x1e8>
 8019086:	e7eb      	b.n	8019060 <_printf_i+0x1dc>
 8019088:	2500      	movs	r5, #0
 801908a:	f104 0919 	add.w	r9, r4, #25
 801908e:	e7f5      	b.n	801907c <_printf_i+0x1f8>
 8019090:	2b00      	cmp	r3, #0
 8019092:	d1ac      	bne.n	8018fee <_printf_i+0x16a>
 8019094:	7803      	ldrb	r3, [r0, #0]
 8019096:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801909a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801909e:	e76c      	b.n	8018f7a <_printf_i+0xf6>
 80190a0:	0801c975 	.word	0x0801c975
 80190a4:	0801c986 	.word	0x0801c986

080190a8 <_sbrk_r>:
 80190a8:	b538      	push	{r3, r4, r5, lr}
 80190aa:	2300      	movs	r3, #0
 80190ac:	4c05      	ldr	r4, [pc, #20]	; (80190c4 <_sbrk_r+0x1c>)
 80190ae:	4605      	mov	r5, r0
 80190b0:	4608      	mov	r0, r1
 80190b2:	6023      	str	r3, [r4, #0]
 80190b4:	f7e8 fb02 	bl	80016bc <_sbrk>
 80190b8:	1c43      	adds	r3, r0, #1
 80190ba:	d102      	bne.n	80190c2 <_sbrk_r+0x1a>
 80190bc:	6823      	ldr	r3, [r4, #0]
 80190be:	b103      	cbz	r3, 80190c2 <_sbrk_r+0x1a>
 80190c0:	602b      	str	r3, [r5, #0]
 80190c2:	bd38      	pop	{r3, r4, r5, pc}
 80190c4:	2000b8e0 	.word	0x2000b8e0

080190c8 <__sread>:
 80190c8:	b510      	push	{r4, lr}
 80190ca:	460c      	mov	r4, r1
 80190cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80190d0:	f000 f8a4 	bl	801921c <_read_r>
 80190d4:	2800      	cmp	r0, #0
 80190d6:	bfab      	itete	ge
 80190d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80190da:	89a3      	ldrhlt	r3, [r4, #12]
 80190dc:	181b      	addge	r3, r3, r0
 80190de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80190e2:	bfac      	ite	ge
 80190e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80190e6:	81a3      	strhlt	r3, [r4, #12]
 80190e8:	bd10      	pop	{r4, pc}

080190ea <__swrite>:
 80190ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80190ee:	461f      	mov	r7, r3
 80190f0:	898b      	ldrh	r3, [r1, #12]
 80190f2:	4605      	mov	r5, r0
 80190f4:	05db      	lsls	r3, r3, #23
 80190f6:	460c      	mov	r4, r1
 80190f8:	4616      	mov	r6, r2
 80190fa:	d505      	bpl.n	8019108 <__swrite+0x1e>
 80190fc:	2302      	movs	r3, #2
 80190fe:	2200      	movs	r2, #0
 8019100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019104:	f000 f868 	bl	80191d8 <_lseek_r>
 8019108:	89a3      	ldrh	r3, [r4, #12]
 801910a:	4632      	mov	r2, r6
 801910c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019110:	81a3      	strh	r3, [r4, #12]
 8019112:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019116:	463b      	mov	r3, r7
 8019118:	4628      	mov	r0, r5
 801911a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801911e:	f000 b817 	b.w	8019150 <_write_r>

08019122 <__sseek>:
 8019122:	b510      	push	{r4, lr}
 8019124:	460c      	mov	r4, r1
 8019126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801912a:	f000 f855 	bl	80191d8 <_lseek_r>
 801912e:	1c43      	adds	r3, r0, #1
 8019130:	89a3      	ldrh	r3, [r4, #12]
 8019132:	bf15      	itete	ne
 8019134:	6560      	strne	r0, [r4, #84]	; 0x54
 8019136:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801913a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801913e:	81a3      	strheq	r3, [r4, #12]
 8019140:	bf18      	it	ne
 8019142:	81a3      	strhne	r3, [r4, #12]
 8019144:	bd10      	pop	{r4, pc}

08019146 <__sclose>:
 8019146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801914a:	f000 b813 	b.w	8019174 <_close_r>
	...

08019150 <_write_r>:
 8019150:	b538      	push	{r3, r4, r5, lr}
 8019152:	4605      	mov	r5, r0
 8019154:	4608      	mov	r0, r1
 8019156:	4611      	mov	r1, r2
 8019158:	2200      	movs	r2, #0
 801915a:	4c05      	ldr	r4, [pc, #20]	; (8019170 <_write_r+0x20>)
 801915c:	6022      	str	r2, [r4, #0]
 801915e:	461a      	mov	r2, r3
 8019160:	f7e8 fa60 	bl	8001624 <_write>
 8019164:	1c43      	adds	r3, r0, #1
 8019166:	d102      	bne.n	801916e <_write_r+0x1e>
 8019168:	6823      	ldr	r3, [r4, #0]
 801916a:	b103      	cbz	r3, 801916e <_write_r+0x1e>
 801916c:	602b      	str	r3, [r5, #0]
 801916e:	bd38      	pop	{r3, r4, r5, pc}
 8019170:	2000b8e0 	.word	0x2000b8e0

08019174 <_close_r>:
 8019174:	b538      	push	{r3, r4, r5, lr}
 8019176:	2300      	movs	r3, #0
 8019178:	4c05      	ldr	r4, [pc, #20]	; (8019190 <_close_r+0x1c>)
 801917a:	4605      	mov	r5, r0
 801917c:	4608      	mov	r0, r1
 801917e:	6023      	str	r3, [r4, #0]
 8019180:	f7e8 fa6c 	bl	800165c <_close>
 8019184:	1c43      	adds	r3, r0, #1
 8019186:	d102      	bne.n	801918e <_close_r+0x1a>
 8019188:	6823      	ldr	r3, [r4, #0]
 801918a:	b103      	cbz	r3, 801918e <_close_r+0x1a>
 801918c:	602b      	str	r3, [r5, #0]
 801918e:	bd38      	pop	{r3, r4, r5, pc}
 8019190:	2000b8e0 	.word	0x2000b8e0

08019194 <_fstat_r>:
 8019194:	b538      	push	{r3, r4, r5, lr}
 8019196:	2300      	movs	r3, #0
 8019198:	4c06      	ldr	r4, [pc, #24]	; (80191b4 <_fstat_r+0x20>)
 801919a:	4605      	mov	r5, r0
 801919c:	4608      	mov	r0, r1
 801919e:	4611      	mov	r1, r2
 80191a0:	6023      	str	r3, [r4, #0]
 80191a2:	f7e8 fa66 	bl	8001672 <_fstat>
 80191a6:	1c43      	adds	r3, r0, #1
 80191a8:	d102      	bne.n	80191b0 <_fstat_r+0x1c>
 80191aa:	6823      	ldr	r3, [r4, #0]
 80191ac:	b103      	cbz	r3, 80191b0 <_fstat_r+0x1c>
 80191ae:	602b      	str	r3, [r5, #0]
 80191b0:	bd38      	pop	{r3, r4, r5, pc}
 80191b2:	bf00      	nop
 80191b4:	2000b8e0 	.word	0x2000b8e0

080191b8 <_isatty_r>:
 80191b8:	b538      	push	{r3, r4, r5, lr}
 80191ba:	2300      	movs	r3, #0
 80191bc:	4c05      	ldr	r4, [pc, #20]	; (80191d4 <_isatty_r+0x1c>)
 80191be:	4605      	mov	r5, r0
 80191c0:	4608      	mov	r0, r1
 80191c2:	6023      	str	r3, [r4, #0]
 80191c4:	f7e8 fa64 	bl	8001690 <_isatty>
 80191c8:	1c43      	adds	r3, r0, #1
 80191ca:	d102      	bne.n	80191d2 <_isatty_r+0x1a>
 80191cc:	6823      	ldr	r3, [r4, #0]
 80191ce:	b103      	cbz	r3, 80191d2 <_isatty_r+0x1a>
 80191d0:	602b      	str	r3, [r5, #0]
 80191d2:	bd38      	pop	{r3, r4, r5, pc}
 80191d4:	2000b8e0 	.word	0x2000b8e0

080191d8 <_lseek_r>:
 80191d8:	b538      	push	{r3, r4, r5, lr}
 80191da:	4605      	mov	r5, r0
 80191dc:	4608      	mov	r0, r1
 80191de:	4611      	mov	r1, r2
 80191e0:	2200      	movs	r2, #0
 80191e2:	4c05      	ldr	r4, [pc, #20]	; (80191f8 <_lseek_r+0x20>)
 80191e4:	6022      	str	r2, [r4, #0]
 80191e6:	461a      	mov	r2, r3
 80191e8:	f7e8 fa5c 	bl	80016a4 <_lseek>
 80191ec:	1c43      	adds	r3, r0, #1
 80191ee:	d102      	bne.n	80191f6 <_lseek_r+0x1e>
 80191f0:	6823      	ldr	r3, [r4, #0]
 80191f2:	b103      	cbz	r3, 80191f6 <_lseek_r+0x1e>
 80191f4:	602b      	str	r3, [r5, #0]
 80191f6:	bd38      	pop	{r3, r4, r5, pc}
 80191f8:	2000b8e0 	.word	0x2000b8e0

080191fc <memchr>:
 80191fc:	b510      	push	{r4, lr}
 80191fe:	b2c9      	uxtb	r1, r1
 8019200:	4402      	add	r2, r0
 8019202:	4290      	cmp	r0, r2
 8019204:	4603      	mov	r3, r0
 8019206:	d101      	bne.n	801920c <memchr+0x10>
 8019208:	2300      	movs	r3, #0
 801920a:	e003      	b.n	8019214 <memchr+0x18>
 801920c:	781c      	ldrb	r4, [r3, #0]
 801920e:	3001      	adds	r0, #1
 8019210:	428c      	cmp	r4, r1
 8019212:	d1f6      	bne.n	8019202 <memchr+0x6>
 8019214:	4618      	mov	r0, r3
 8019216:	bd10      	pop	{r4, pc}

08019218 <__malloc_lock>:
 8019218:	4770      	bx	lr

0801921a <__malloc_unlock>:
 801921a:	4770      	bx	lr

0801921c <_read_r>:
 801921c:	b538      	push	{r3, r4, r5, lr}
 801921e:	4605      	mov	r5, r0
 8019220:	4608      	mov	r0, r1
 8019222:	4611      	mov	r1, r2
 8019224:	2200      	movs	r2, #0
 8019226:	4c05      	ldr	r4, [pc, #20]	; (801923c <_read_r+0x20>)
 8019228:	6022      	str	r2, [r4, #0]
 801922a:	461a      	mov	r2, r3
 801922c:	f7e8 f9dd 	bl	80015ea <_read>
 8019230:	1c43      	adds	r3, r0, #1
 8019232:	d102      	bne.n	801923a <_read_r+0x1e>
 8019234:	6823      	ldr	r3, [r4, #0]
 8019236:	b103      	cbz	r3, 801923a <_read_r+0x1e>
 8019238:	602b      	str	r3, [r5, #0]
 801923a:	bd38      	pop	{r3, r4, r5, pc}
 801923c:	2000b8e0 	.word	0x2000b8e0

08019240 <_init>:
 8019240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019242:	bf00      	nop
 8019244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019246:	bc08      	pop	{r3}
 8019248:	469e      	mov	lr, r3
 801924a:	4770      	bx	lr

0801924c <_fini>:
 801924c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801924e:	bf00      	nop
 8019250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019252:	bc08      	pop	{r3}
 8019254:	469e      	mov	lr, r3
 8019256:	4770      	bx	lr
