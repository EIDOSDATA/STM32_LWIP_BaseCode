
F207ZG_PTP_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001de18  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000040b0  0801dfa8  0801dfa8  0002dfa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022058  08022058  000401ec  2**0
                  CONTENTS
  4 .ARM          00000008  08022058  08022058  00032058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022060  08022060  000401ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022060  08022060  00032060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08022064  08022064  00032064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08022068  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000bcb8  200001f0  08022254  000401f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000bea8  08022254  0004bea8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000401ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00052056  00000000  00000000  00040215  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00009073  00000000  00000000  0009226b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000024a0  00000000  00000000  0009b2e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000021f8  00000000  00000000  0009d780  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00033fc3  00000000  00000000  0009f978  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00032fca  00000000  00000000  000d393b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e9714  00000000  00000000  00106905  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001f0019  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a808  00000000  00000000  001f0094  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801df90 	.word	0x0801df90

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	0801df90 	.word	0x0801df90

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800031e:	f1a4 0401 	sub.w	r4, r4, #1
 8000322:	d1e9      	bne.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2iz>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d215      	bcs.n	8000aee <__aeabi_d2iz+0x36>
 8000ac2:	d511      	bpl.n	8000ae8 <__aeabi_d2iz+0x30>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d912      	bls.n	8000af4 <__aeabi_d2iz+0x3c>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	4240      	negne	r0, r0
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af2:	d105      	bne.n	8000b00 <__aeabi_d2iz+0x48>
 8000af4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	bf08      	it	eq
 8000afa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afe:	4770      	bx	lr
 8000b00:	f04f 0000 	mov.w	r0, #0
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_d2uiz>:
 8000b08:	004a      	lsls	r2, r1, #1
 8000b0a:	d211      	bcs.n	8000b30 <__aeabi_d2uiz+0x28>
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d211      	bcs.n	8000b36 <__aeabi_d2uiz+0x2e>
 8000b12:	d50d      	bpl.n	8000b30 <__aeabi_d2uiz+0x28>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d40e      	bmi.n	8000b3c <__aeabi_d2uiz+0x34>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2e:	4770      	bx	lr
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_d2uiz+0x3a>
 8000b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0000 	mov.w	r0, #0
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2f>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b50:	bf24      	itt	cs
 8000b52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b5a:	d90d      	bls.n	8000b78 <__aeabi_d2f+0x30>
 8000b5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b70:	bf08      	it	eq
 8000b72:	f020 0001 	biceq.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b7c:	d121      	bne.n	8000bc2 <__aeabi_d2f+0x7a>
 8000b7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b82:	bfbc      	itt	lt
 8000b84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	4770      	bxlt	lr
 8000b8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b92:	f1c2 0218 	rsb	r2, r2, #24
 8000b96:	f1c2 0c20 	rsb	ip, r2, #32
 8000b9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	f040 0001 	orrne.w	r0, r0, #1
 8000ba8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb4:	ea40 000c 	orr.w	r0, r0, ip
 8000bb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bc0:	e7cc      	b.n	8000b5c <__aeabi_d2f+0x14>
 8000bc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bc6:	d107      	bne.n	8000bd8 <__aeabi_d2f+0x90>
 8000bc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bcc:	bf1e      	ittt	ne
 8000bce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bd6:	4770      	bxne	lr
 8000bd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000be0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_frsub>:
 8000be8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bec:	e002      	b.n	8000bf4 <__addsf3>
 8000bee:	bf00      	nop

08000bf0 <__aeabi_fsub>:
 8000bf0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bf4 <__addsf3>:
 8000bf4:	0042      	lsls	r2, r0, #1
 8000bf6:	bf1f      	itttt	ne
 8000bf8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bfc:	ea92 0f03 	teqne	r2, r3
 8000c00:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c04:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c08:	d06a      	beq.n	8000ce0 <__addsf3+0xec>
 8000c0a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c0e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c12:	bfc1      	itttt	gt
 8000c14:	18d2      	addgt	r2, r2, r3
 8000c16:	4041      	eorgt	r1, r0
 8000c18:	4048      	eorgt	r0, r1
 8000c1a:	4041      	eorgt	r1, r0
 8000c1c:	bfb8      	it	lt
 8000c1e:	425b      	neglt	r3, r3
 8000c20:	2b19      	cmp	r3, #25
 8000c22:	bf88      	it	hi
 8000c24:	4770      	bxhi	lr
 8000c26:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c2a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c2e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c32:	bf18      	it	ne
 8000c34:	4240      	negne	r0, r0
 8000c36:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c3a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c3e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c42:	bf18      	it	ne
 8000c44:	4249      	negne	r1, r1
 8000c46:	ea92 0f03 	teq	r2, r3
 8000c4a:	d03f      	beq.n	8000ccc <__addsf3+0xd8>
 8000c4c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c50:	fa41 fc03 	asr.w	ip, r1, r3
 8000c54:	eb10 000c 	adds.w	r0, r0, ip
 8000c58:	f1c3 0320 	rsb	r3, r3, #32
 8000c5c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c60:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c64:	d502      	bpl.n	8000c6c <__addsf3+0x78>
 8000c66:	4249      	negs	r1, r1
 8000c68:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c6c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c70:	d313      	bcc.n	8000c9a <__addsf3+0xa6>
 8000c72:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c76:	d306      	bcc.n	8000c86 <__addsf3+0x92>
 8000c78:	0840      	lsrs	r0, r0, #1
 8000c7a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c7e:	f102 0201 	add.w	r2, r2, #1
 8000c82:	2afe      	cmp	r2, #254	; 0xfe
 8000c84:	d251      	bcs.n	8000d2a <__addsf3+0x136>
 8000c86:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c8a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c8e:	bf08      	it	eq
 8000c90:	f020 0001 	biceq.w	r0, r0, #1
 8000c94:	ea40 0003 	orr.w	r0, r0, r3
 8000c98:	4770      	bx	lr
 8000c9a:	0049      	lsls	r1, r1, #1
 8000c9c:	eb40 0000 	adc.w	r0, r0, r0
 8000ca0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000ca4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ca8:	d1ed      	bne.n	8000c86 <__addsf3+0x92>
 8000caa:	fab0 fc80 	clz	ip, r0
 8000cae:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cb2:	ebb2 020c 	subs.w	r2, r2, ip
 8000cb6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cba:	bfaa      	itet	ge
 8000cbc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cc0:	4252      	neglt	r2, r2
 8000cc2:	4318      	orrge	r0, r3
 8000cc4:	bfbc      	itt	lt
 8000cc6:	40d0      	lsrlt	r0, r2
 8000cc8:	4318      	orrlt	r0, r3
 8000cca:	4770      	bx	lr
 8000ccc:	f092 0f00 	teq	r2, #0
 8000cd0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cd4:	bf06      	itte	eq
 8000cd6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cda:	3201      	addeq	r2, #1
 8000cdc:	3b01      	subne	r3, #1
 8000cde:	e7b5      	b.n	8000c4c <__addsf3+0x58>
 8000ce0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ce4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ce8:	bf18      	it	ne
 8000cea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cee:	d021      	beq.n	8000d34 <__addsf3+0x140>
 8000cf0:	ea92 0f03 	teq	r2, r3
 8000cf4:	d004      	beq.n	8000d00 <__addsf3+0x10c>
 8000cf6:	f092 0f00 	teq	r2, #0
 8000cfa:	bf08      	it	eq
 8000cfc:	4608      	moveq	r0, r1
 8000cfe:	4770      	bx	lr
 8000d00:	ea90 0f01 	teq	r0, r1
 8000d04:	bf1c      	itt	ne
 8000d06:	2000      	movne	r0, #0
 8000d08:	4770      	bxne	lr
 8000d0a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d0e:	d104      	bne.n	8000d1a <__addsf3+0x126>
 8000d10:	0040      	lsls	r0, r0, #1
 8000d12:	bf28      	it	cs
 8000d14:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d18:	4770      	bx	lr
 8000d1a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d1e:	bf3c      	itt	cc
 8000d20:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d24:	4770      	bxcc	lr
 8000d26:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d2a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d32:	4770      	bx	lr
 8000d34:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d38:	bf16      	itet	ne
 8000d3a:	4608      	movne	r0, r1
 8000d3c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d40:	4601      	movne	r1, r0
 8000d42:	0242      	lsls	r2, r0, #9
 8000d44:	bf06      	itte	eq
 8000d46:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d4a:	ea90 0f01 	teqeq	r0, r1
 8000d4e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d52:	4770      	bx	lr

08000d54 <__aeabi_ui2f>:
 8000d54:	f04f 0300 	mov.w	r3, #0
 8000d58:	e004      	b.n	8000d64 <__aeabi_i2f+0x8>
 8000d5a:	bf00      	nop

08000d5c <__aeabi_i2f>:
 8000d5c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d60:	bf48      	it	mi
 8000d62:	4240      	negmi	r0, r0
 8000d64:	ea5f 0c00 	movs.w	ip, r0
 8000d68:	bf08      	it	eq
 8000d6a:	4770      	bxeq	lr
 8000d6c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d70:	4601      	mov	r1, r0
 8000d72:	f04f 0000 	mov.w	r0, #0
 8000d76:	e01c      	b.n	8000db2 <__aeabi_l2f+0x2a>

08000d78 <__aeabi_ul2f>:
 8000d78:	ea50 0201 	orrs.w	r2, r0, r1
 8000d7c:	bf08      	it	eq
 8000d7e:	4770      	bxeq	lr
 8000d80:	f04f 0300 	mov.w	r3, #0
 8000d84:	e00a      	b.n	8000d9c <__aeabi_l2f+0x14>
 8000d86:	bf00      	nop

08000d88 <__aeabi_l2f>:
 8000d88:	ea50 0201 	orrs.w	r2, r0, r1
 8000d8c:	bf08      	it	eq
 8000d8e:	4770      	bxeq	lr
 8000d90:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d94:	d502      	bpl.n	8000d9c <__aeabi_l2f+0x14>
 8000d96:	4240      	negs	r0, r0
 8000d98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d9c:	ea5f 0c01 	movs.w	ip, r1
 8000da0:	bf02      	ittt	eq
 8000da2:	4684      	moveq	ip, r0
 8000da4:	4601      	moveq	r1, r0
 8000da6:	2000      	moveq	r0, #0
 8000da8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dac:	bf08      	it	eq
 8000dae:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000db2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000db6:	fabc f28c 	clz	r2, ip
 8000dba:	3a08      	subs	r2, #8
 8000dbc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dc0:	db10      	blt.n	8000de4 <__aeabi_l2f+0x5c>
 8000dc2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dcc:	f1c2 0220 	rsb	r2, r2, #32
 8000dd0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000dd4:	fa20 f202 	lsr.w	r2, r0, r2
 8000dd8:	eb43 0002 	adc.w	r0, r3, r2
 8000ddc:	bf08      	it	eq
 8000dde:	f020 0001 	biceq.w	r0, r0, #1
 8000de2:	4770      	bx	lr
 8000de4:	f102 0220 	add.w	r2, r2, #32
 8000de8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dec:	f1c2 0220 	rsb	r2, r2, #32
 8000df0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000df4:	fa21 f202 	lsr.w	r2, r1, r2
 8000df8:	eb43 0002 	adc.w	r0, r3, r2
 8000dfc:	bf08      	it	eq
 8000dfe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e02:	4770      	bx	lr

08000e04 <__aeabi_fmul>:
 8000e04:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e08:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e0c:	bf1e      	ittt	ne
 8000e0e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e12:	ea92 0f0c 	teqne	r2, ip
 8000e16:	ea93 0f0c 	teqne	r3, ip
 8000e1a:	d06f      	beq.n	8000efc <__aeabi_fmul+0xf8>
 8000e1c:	441a      	add	r2, r3
 8000e1e:	ea80 0c01 	eor.w	ip, r0, r1
 8000e22:	0240      	lsls	r0, r0, #9
 8000e24:	bf18      	it	ne
 8000e26:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e2a:	d01e      	beq.n	8000e6a <__aeabi_fmul+0x66>
 8000e2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e30:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e34:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e38:	fba0 3101 	umull	r3, r1, r0, r1
 8000e3c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e40:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e44:	bf3e      	ittt	cc
 8000e46:	0049      	lslcc	r1, r1, #1
 8000e48:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e4c:	005b      	lslcc	r3, r3, #1
 8000e4e:	ea40 0001 	orr.w	r0, r0, r1
 8000e52:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e56:	2afd      	cmp	r2, #253	; 0xfd
 8000e58:	d81d      	bhi.n	8000e96 <__aeabi_fmul+0x92>
 8000e5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e5e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e62:	bf08      	it	eq
 8000e64:	f020 0001 	biceq.w	r0, r0, #1
 8000e68:	4770      	bx	lr
 8000e6a:	f090 0f00 	teq	r0, #0
 8000e6e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e72:	bf08      	it	eq
 8000e74:	0249      	lsleq	r1, r1, #9
 8000e76:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e7a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e7e:	3a7f      	subs	r2, #127	; 0x7f
 8000e80:	bfc2      	ittt	gt
 8000e82:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e86:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e8a:	4770      	bxgt	lr
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e90:	f04f 0300 	mov.w	r3, #0
 8000e94:	3a01      	subs	r2, #1
 8000e96:	dc5d      	bgt.n	8000f54 <__aeabi_fmul+0x150>
 8000e98:	f112 0f19 	cmn.w	r2, #25
 8000e9c:	bfdc      	itt	le
 8000e9e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000ea2:	4770      	bxle	lr
 8000ea4:	f1c2 0200 	rsb	r2, r2, #0
 8000ea8:	0041      	lsls	r1, r0, #1
 8000eaa:	fa21 f102 	lsr.w	r1, r1, r2
 8000eae:	f1c2 0220 	rsb	r2, r2, #32
 8000eb2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eb6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000eba:	f140 0000 	adc.w	r0, r0, #0
 8000ebe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ec2:	bf08      	it	eq
 8000ec4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ec8:	4770      	bx	lr
 8000eca:	f092 0f00 	teq	r2, #0
 8000ece:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ed2:	bf02      	ittt	eq
 8000ed4:	0040      	lsleq	r0, r0, #1
 8000ed6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eda:	3a01      	subeq	r2, #1
 8000edc:	d0f9      	beq.n	8000ed2 <__aeabi_fmul+0xce>
 8000ede:	ea40 000c 	orr.w	r0, r0, ip
 8000ee2:	f093 0f00 	teq	r3, #0
 8000ee6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000eea:	bf02      	ittt	eq
 8000eec:	0049      	lsleq	r1, r1, #1
 8000eee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ef2:	3b01      	subeq	r3, #1
 8000ef4:	d0f9      	beq.n	8000eea <__aeabi_fmul+0xe6>
 8000ef6:	ea41 010c 	orr.w	r1, r1, ip
 8000efa:	e78f      	b.n	8000e1c <__aeabi_fmul+0x18>
 8000efc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f00:	ea92 0f0c 	teq	r2, ip
 8000f04:	bf18      	it	ne
 8000f06:	ea93 0f0c 	teqne	r3, ip
 8000f0a:	d00a      	beq.n	8000f22 <__aeabi_fmul+0x11e>
 8000f0c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f10:	bf18      	it	ne
 8000f12:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f16:	d1d8      	bne.n	8000eca <__aeabi_fmul+0xc6>
 8000f18:	ea80 0001 	eor.w	r0, r0, r1
 8000f1c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f20:	4770      	bx	lr
 8000f22:	f090 0f00 	teq	r0, #0
 8000f26:	bf17      	itett	ne
 8000f28:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f2c:	4608      	moveq	r0, r1
 8000f2e:	f091 0f00 	teqne	r1, #0
 8000f32:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f36:	d014      	beq.n	8000f62 <__aeabi_fmul+0x15e>
 8000f38:	ea92 0f0c 	teq	r2, ip
 8000f3c:	d101      	bne.n	8000f42 <__aeabi_fmul+0x13e>
 8000f3e:	0242      	lsls	r2, r0, #9
 8000f40:	d10f      	bne.n	8000f62 <__aeabi_fmul+0x15e>
 8000f42:	ea93 0f0c 	teq	r3, ip
 8000f46:	d103      	bne.n	8000f50 <__aeabi_fmul+0x14c>
 8000f48:	024b      	lsls	r3, r1, #9
 8000f4a:	bf18      	it	ne
 8000f4c:	4608      	movne	r0, r1
 8000f4e:	d108      	bne.n	8000f62 <__aeabi_fmul+0x15e>
 8000f50:	ea80 0001 	eor.w	r0, r0, r1
 8000f54:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f60:	4770      	bx	lr
 8000f62:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f66:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f6a:	4770      	bx	lr

08000f6c <__aeabi_fdiv>:
 8000f6c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f70:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f74:	bf1e      	ittt	ne
 8000f76:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f7a:	ea92 0f0c 	teqne	r2, ip
 8000f7e:	ea93 0f0c 	teqne	r3, ip
 8000f82:	d069      	beq.n	8001058 <__aeabi_fdiv+0xec>
 8000f84:	eba2 0203 	sub.w	r2, r2, r3
 8000f88:	ea80 0c01 	eor.w	ip, r0, r1
 8000f8c:	0249      	lsls	r1, r1, #9
 8000f8e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f92:	d037      	beq.n	8001004 <__aeabi_fdiv+0x98>
 8000f94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f98:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f9c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fa0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000fa4:	428b      	cmp	r3, r1
 8000fa6:	bf38      	it	cc
 8000fa8:	005b      	lslcc	r3, r3, #1
 8000faa:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fae:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000fb2:	428b      	cmp	r3, r1
 8000fb4:	bf24      	itt	cs
 8000fb6:	1a5b      	subcs	r3, r3, r1
 8000fb8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fbc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fc0:	bf24      	itt	cs
 8000fc2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fc6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fca:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fce:	bf24      	itt	cs
 8000fd0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fd4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fd8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fdc:	bf24      	itt	cs
 8000fde:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fe2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fe6:	011b      	lsls	r3, r3, #4
 8000fe8:	bf18      	it	ne
 8000fea:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fee:	d1e0      	bne.n	8000fb2 <__aeabi_fdiv+0x46>
 8000ff0:	2afd      	cmp	r2, #253	; 0xfd
 8000ff2:	f63f af50 	bhi.w	8000e96 <__aeabi_fmul+0x92>
 8000ff6:	428b      	cmp	r3, r1
 8000ff8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ffc:	bf08      	it	eq
 8000ffe:	f020 0001 	biceq.w	r0, r0, #1
 8001002:	4770      	bx	lr
 8001004:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001008:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800100c:	327f      	adds	r2, #127	; 0x7f
 800100e:	bfc2      	ittt	gt
 8001010:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001014:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001018:	4770      	bxgt	lr
 800101a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800101e:	f04f 0300 	mov.w	r3, #0
 8001022:	3a01      	subs	r2, #1
 8001024:	e737      	b.n	8000e96 <__aeabi_fmul+0x92>
 8001026:	f092 0f00 	teq	r2, #0
 800102a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800102e:	bf02      	ittt	eq
 8001030:	0040      	lsleq	r0, r0, #1
 8001032:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001036:	3a01      	subeq	r2, #1
 8001038:	d0f9      	beq.n	800102e <__aeabi_fdiv+0xc2>
 800103a:	ea40 000c 	orr.w	r0, r0, ip
 800103e:	f093 0f00 	teq	r3, #0
 8001042:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001046:	bf02      	ittt	eq
 8001048:	0049      	lsleq	r1, r1, #1
 800104a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800104e:	3b01      	subeq	r3, #1
 8001050:	d0f9      	beq.n	8001046 <__aeabi_fdiv+0xda>
 8001052:	ea41 010c 	orr.w	r1, r1, ip
 8001056:	e795      	b.n	8000f84 <__aeabi_fdiv+0x18>
 8001058:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800105c:	ea92 0f0c 	teq	r2, ip
 8001060:	d108      	bne.n	8001074 <__aeabi_fdiv+0x108>
 8001062:	0242      	lsls	r2, r0, #9
 8001064:	f47f af7d 	bne.w	8000f62 <__aeabi_fmul+0x15e>
 8001068:	ea93 0f0c 	teq	r3, ip
 800106c:	f47f af70 	bne.w	8000f50 <__aeabi_fmul+0x14c>
 8001070:	4608      	mov	r0, r1
 8001072:	e776      	b.n	8000f62 <__aeabi_fmul+0x15e>
 8001074:	ea93 0f0c 	teq	r3, ip
 8001078:	d104      	bne.n	8001084 <__aeabi_fdiv+0x118>
 800107a:	024b      	lsls	r3, r1, #9
 800107c:	f43f af4c 	beq.w	8000f18 <__aeabi_fmul+0x114>
 8001080:	4608      	mov	r0, r1
 8001082:	e76e      	b.n	8000f62 <__aeabi_fmul+0x15e>
 8001084:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001088:	bf18      	it	ne
 800108a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800108e:	d1ca      	bne.n	8001026 <__aeabi_fdiv+0xba>
 8001090:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001094:	f47f af5c 	bne.w	8000f50 <__aeabi_fmul+0x14c>
 8001098:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800109c:	f47f af3c 	bne.w	8000f18 <__aeabi_fmul+0x114>
 80010a0:	e75f      	b.n	8000f62 <__aeabi_fmul+0x15e>
 80010a2:	bf00      	nop

080010a4 <__gesf2>:
 80010a4:	f04f 3cff 	mov.w	ip, #4294967295
 80010a8:	e006      	b.n	80010b8 <__cmpsf2+0x4>
 80010aa:	bf00      	nop

080010ac <__lesf2>:
 80010ac:	f04f 0c01 	mov.w	ip, #1
 80010b0:	e002      	b.n	80010b8 <__cmpsf2+0x4>
 80010b2:	bf00      	nop

080010b4 <__cmpsf2>:
 80010b4:	f04f 0c01 	mov.w	ip, #1
 80010b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010bc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010c4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010c8:	bf18      	it	ne
 80010ca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010ce:	d011      	beq.n	80010f4 <__cmpsf2+0x40>
 80010d0:	b001      	add	sp, #4
 80010d2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010d6:	bf18      	it	ne
 80010d8:	ea90 0f01 	teqne	r0, r1
 80010dc:	bf58      	it	pl
 80010de:	ebb2 0003 	subspl.w	r0, r2, r3
 80010e2:	bf88      	it	hi
 80010e4:	17c8      	asrhi	r0, r1, #31
 80010e6:	bf38      	it	cc
 80010e8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010ec:	bf18      	it	ne
 80010ee:	f040 0001 	orrne.w	r0, r0, #1
 80010f2:	4770      	bx	lr
 80010f4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010f8:	d102      	bne.n	8001100 <__cmpsf2+0x4c>
 80010fa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010fe:	d105      	bne.n	800110c <__cmpsf2+0x58>
 8001100:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001104:	d1e4      	bne.n	80010d0 <__cmpsf2+0x1c>
 8001106:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800110a:	d0e1      	beq.n	80010d0 <__cmpsf2+0x1c>
 800110c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop

08001114 <__aeabi_cfrcmple>:
 8001114:	4684      	mov	ip, r0
 8001116:	4608      	mov	r0, r1
 8001118:	4661      	mov	r1, ip
 800111a:	e7ff      	b.n	800111c <__aeabi_cfcmpeq>

0800111c <__aeabi_cfcmpeq>:
 800111c:	b50f      	push	{r0, r1, r2, r3, lr}
 800111e:	f7ff ffc9 	bl	80010b4 <__cmpsf2>
 8001122:	2800      	cmp	r0, #0
 8001124:	bf48      	it	mi
 8001126:	f110 0f00 	cmnmi.w	r0, #0
 800112a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800112c <__aeabi_fcmpeq>:
 800112c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001130:	f7ff fff4 	bl	800111c <__aeabi_cfcmpeq>
 8001134:	bf0c      	ite	eq
 8001136:	2001      	moveq	r0, #1
 8001138:	2000      	movne	r0, #0
 800113a:	f85d fb08 	ldr.w	pc, [sp], #8
 800113e:	bf00      	nop

08001140 <__aeabi_fcmplt>:
 8001140:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001144:	f7ff ffea 	bl	800111c <__aeabi_cfcmpeq>
 8001148:	bf34      	ite	cc
 800114a:	2001      	movcc	r0, #1
 800114c:	2000      	movcs	r0, #0
 800114e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001152:	bf00      	nop

08001154 <__aeabi_fcmple>:
 8001154:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001158:	f7ff ffe0 	bl	800111c <__aeabi_cfcmpeq>
 800115c:	bf94      	ite	ls
 800115e:	2001      	movls	r0, #1
 8001160:	2000      	movhi	r0, #0
 8001162:	f85d fb08 	ldr.w	pc, [sp], #8
 8001166:	bf00      	nop

08001168 <__aeabi_fcmpge>:
 8001168:	f84d ed08 	str.w	lr, [sp, #-8]!
 800116c:	f7ff ffd2 	bl	8001114 <__aeabi_cfrcmple>
 8001170:	bf94      	ite	ls
 8001172:	2001      	movls	r0, #1
 8001174:	2000      	movhi	r0, #0
 8001176:	f85d fb08 	ldr.w	pc, [sp], #8
 800117a:	bf00      	nop

0800117c <__aeabi_fcmpgt>:
 800117c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001180:	f7ff ffc8 	bl	8001114 <__aeabi_cfrcmple>
 8001184:	bf34      	ite	cc
 8001186:	2001      	movcc	r0, #1
 8001188:	2000      	movcs	r0, #0
 800118a:	f85d fb08 	ldr.w	pc, [sp], #8
 800118e:	bf00      	nop

08001190 <__aeabi_f2iz>:
 8001190:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001194:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001198:	d30f      	bcc.n	80011ba <__aeabi_f2iz+0x2a>
 800119a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800119e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011a2:	d90d      	bls.n	80011c0 <__aeabi_f2iz+0x30>
 80011a4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011ac:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80011b0:	fa23 f002 	lsr.w	r0, r3, r2
 80011b4:	bf18      	it	ne
 80011b6:	4240      	negne	r0, r0
 80011b8:	4770      	bx	lr
 80011ba:	f04f 0000 	mov.w	r0, #0
 80011be:	4770      	bx	lr
 80011c0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011c4:	d101      	bne.n	80011ca <__aeabi_f2iz+0x3a>
 80011c6:	0242      	lsls	r2, r0, #9
 80011c8:	d105      	bne.n	80011d6 <__aeabi_f2iz+0x46>
 80011ca:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80011ce:	bf08      	it	eq
 80011d0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80011d4:	4770      	bx	lr
 80011d6:	f04f 0000 	mov.w	r0, #0
 80011da:	4770      	bx	lr

080011dc <__aeabi_ldivmod>:
 80011dc:	b97b      	cbnz	r3, 80011fe <__aeabi_ldivmod+0x22>
 80011de:	b972      	cbnz	r2, 80011fe <__aeabi_ldivmod+0x22>
 80011e0:	2900      	cmp	r1, #0
 80011e2:	bfbe      	ittt	lt
 80011e4:	2000      	movlt	r0, #0
 80011e6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80011ea:	e006      	blt.n	80011fa <__aeabi_ldivmod+0x1e>
 80011ec:	bf08      	it	eq
 80011ee:	2800      	cmpeq	r0, #0
 80011f0:	bf1c      	itt	ne
 80011f2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80011f6:	f04f 30ff 	movne.w	r0, #4294967295
 80011fa:	f000 b9bf 	b.w	800157c <__aeabi_idiv0>
 80011fe:	f1ad 0c08 	sub.w	ip, sp, #8
 8001202:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001206:	2900      	cmp	r1, #0
 8001208:	db09      	blt.n	800121e <__aeabi_ldivmod+0x42>
 800120a:	2b00      	cmp	r3, #0
 800120c:	db1a      	blt.n	8001244 <__aeabi_ldivmod+0x68>
 800120e:	f000 f84d 	bl	80012ac <__udivmoddi4>
 8001212:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001216:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800121a:	b004      	add	sp, #16
 800121c:	4770      	bx	lr
 800121e:	4240      	negs	r0, r0
 8001220:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001224:	2b00      	cmp	r3, #0
 8001226:	db1b      	blt.n	8001260 <__aeabi_ldivmod+0x84>
 8001228:	f000 f840 	bl	80012ac <__udivmoddi4>
 800122c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001234:	b004      	add	sp, #16
 8001236:	4240      	negs	r0, r0
 8001238:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800123c:	4252      	negs	r2, r2
 800123e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001242:	4770      	bx	lr
 8001244:	4252      	negs	r2, r2
 8001246:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800124a:	f000 f82f 	bl	80012ac <__udivmoddi4>
 800124e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001252:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001256:	b004      	add	sp, #16
 8001258:	4240      	negs	r0, r0
 800125a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800125e:	4770      	bx	lr
 8001260:	4252      	negs	r2, r2
 8001262:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8001266:	f000 f821 	bl	80012ac <__udivmoddi4>
 800126a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800126e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001272:	b004      	add	sp, #16
 8001274:	4252      	negs	r2, r2
 8001276:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800127a:	4770      	bx	lr

0800127c <__aeabi_uldivmod>:
 800127c:	b953      	cbnz	r3, 8001294 <__aeabi_uldivmod+0x18>
 800127e:	b94a      	cbnz	r2, 8001294 <__aeabi_uldivmod+0x18>
 8001280:	2900      	cmp	r1, #0
 8001282:	bf08      	it	eq
 8001284:	2800      	cmpeq	r0, #0
 8001286:	bf1c      	itt	ne
 8001288:	f04f 31ff 	movne.w	r1, #4294967295
 800128c:	f04f 30ff 	movne.w	r0, #4294967295
 8001290:	f000 b974 	b.w	800157c <__aeabi_idiv0>
 8001294:	f1ad 0c08 	sub.w	ip, sp, #8
 8001298:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800129c:	f000 f806 	bl	80012ac <__udivmoddi4>
 80012a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80012a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80012a8:	b004      	add	sp, #16
 80012aa:	4770      	bx	lr

080012ac <__udivmoddi4>:
 80012ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012b0:	468c      	mov	ip, r1
 80012b2:	4604      	mov	r4, r0
 80012b4:	9e08      	ldr	r6, [sp, #32]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d14b      	bne.n	8001352 <__udivmoddi4+0xa6>
 80012ba:	428a      	cmp	r2, r1
 80012bc:	4615      	mov	r5, r2
 80012be:	d967      	bls.n	8001390 <__udivmoddi4+0xe4>
 80012c0:	fab2 f282 	clz	r2, r2
 80012c4:	b14a      	cbz	r2, 80012da <__udivmoddi4+0x2e>
 80012c6:	f1c2 0720 	rsb	r7, r2, #32
 80012ca:	fa01 f302 	lsl.w	r3, r1, r2
 80012ce:	fa20 f707 	lsr.w	r7, r0, r7
 80012d2:	4095      	lsls	r5, r2
 80012d4:	ea47 0c03 	orr.w	ip, r7, r3
 80012d8:	4094      	lsls	r4, r2
 80012da:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80012de:	fbbc f7fe 	udiv	r7, ip, lr
 80012e2:	fa1f f885 	uxth.w	r8, r5
 80012e6:	fb0e c317 	mls	r3, lr, r7, ip
 80012ea:	fb07 f908 	mul.w	r9, r7, r8
 80012ee:	0c21      	lsrs	r1, r4, #16
 80012f0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80012f4:	4599      	cmp	r9, r3
 80012f6:	d909      	bls.n	800130c <__udivmoddi4+0x60>
 80012f8:	18eb      	adds	r3, r5, r3
 80012fa:	f107 31ff 	add.w	r1, r7, #4294967295
 80012fe:	f080 811c 	bcs.w	800153a <__udivmoddi4+0x28e>
 8001302:	4599      	cmp	r9, r3
 8001304:	f240 8119 	bls.w	800153a <__udivmoddi4+0x28e>
 8001308:	3f02      	subs	r7, #2
 800130a:	442b      	add	r3, r5
 800130c:	eba3 0309 	sub.w	r3, r3, r9
 8001310:	fbb3 f0fe 	udiv	r0, r3, lr
 8001314:	fb0e 3310 	mls	r3, lr, r0, r3
 8001318:	fb00 f108 	mul.w	r1, r0, r8
 800131c:	b2a4      	uxth	r4, r4
 800131e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001322:	42a1      	cmp	r1, r4
 8001324:	d909      	bls.n	800133a <__udivmoddi4+0x8e>
 8001326:	192c      	adds	r4, r5, r4
 8001328:	f100 33ff 	add.w	r3, r0, #4294967295
 800132c:	f080 8107 	bcs.w	800153e <__udivmoddi4+0x292>
 8001330:	42a1      	cmp	r1, r4
 8001332:	f240 8104 	bls.w	800153e <__udivmoddi4+0x292>
 8001336:	3802      	subs	r0, #2
 8001338:	442c      	add	r4, r5
 800133a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800133e:	2700      	movs	r7, #0
 8001340:	1a64      	subs	r4, r4, r1
 8001342:	b11e      	cbz	r6, 800134c <__udivmoddi4+0xa0>
 8001344:	2300      	movs	r3, #0
 8001346:	40d4      	lsrs	r4, r2
 8001348:	e9c6 4300 	strd	r4, r3, [r6]
 800134c:	4639      	mov	r1, r7
 800134e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001352:	428b      	cmp	r3, r1
 8001354:	d909      	bls.n	800136a <__udivmoddi4+0xbe>
 8001356:	2e00      	cmp	r6, #0
 8001358:	f000 80ec 	beq.w	8001534 <__udivmoddi4+0x288>
 800135c:	2700      	movs	r7, #0
 800135e:	e9c6 0100 	strd	r0, r1, [r6]
 8001362:	4638      	mov	r0, r7
 8001364:	4639      	mov	r1, r7
 8001366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800136a:	fab3 f783 	clz	r7, r3
 800136e:	2f00      	cmp	r7, #0
 8001370:	d148      	bne.n	8001404 <__udivmoddi4+0x158>
 8001372:	428b      	cmp	r3, r1
 8001374:	d302      	bcc.n	800137c <__udivmoddi4+0xd0>
 8001376:	4282      	cmp	r2, r0
 8001378:	f200 80fb 	bhi.w	8001572 <__udivmoddi4+0x2c6>
 800137c:	1a84      	subs	r4, r0, r2
 800137e:	eb61 0303 	sbc.w	r3, r1, r3
 8001382:	2001      	movs	r0, #1
 8001384:	469c      	mov	ip, r3
 8001386:	2e00      	cmp	r6, #0
 8001388:	d0e0      	beq.n	800134c <__udivmoddi4+0xa0>
 800138a:	e9c6 4c00 	strd	r4, ip, [r6]
 800138e:	e7dd      	b.n	800134c <__udivmoddi4+0xa0>
 8001390:	b902      	cbnz	r2, 8001394 <__udivmoddi4+0xe8>
 8001392:	deff      	udf	#255	; 0xff
 8001394:	fab2 f282 	clz	r2, r2
 8001398:	2a00      	cmp	r2, #0
 800139a:	f040 808f 	bne.w	80014bc <__udivmoddi4+0x210>
 800139e:	2701      	movs	r7, #1
 80013a0:	1b49      	subs	r1, r1, r5
 80013a2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80013a6:	fa1f f985 	uxth.w	r9, r5
 80013aa:	fbb1 fef8 	udiv	lr, r1, r8
 80013ae:	fb08 111e 	mls	r1, r8, lr, r1
 80013b2:	fb09 f00e 	mul.w	r0, r9, lr
 80013b6:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80013ba:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 80013be:	4298      	cmp	r0, r3
 80013c0:	d907      	bls.n	80013d2 <__udivmoddi4+0x126>
 80013c2:	18eb      	adds	r3, r5, r3
 80013c4:	f10e 31ff 	add.w	r1, lr, #4294967295
 80013c8:	d202      	bcs.n	80013d0 <__udivmoddi4+0x124>
 80013ca:	4298      	cmp	r0, r3
 80013cc:	f200 80cd 	bhi.w	800156a <__udivmoddi4+0x2be>
 80013d0:	468e      	mov	lr, r1
 80013d2:	1a1b      	subs	r3, r3, r0
 80013d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80013d8:	fb08 3310 	mls	r3, r8, r0, r3
 80013dc:	fb09 f900 	mul.w	r9, r9, r0
 80013e0:	b2a4      	uxth	r4, r4
 80013e2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80013e6:	45a1      	cmp	r9, r4
 80013e8:	d907      	bls.n	80013fa <__udivmoddi4+0x14e>
 80013ea:	192c      	adds	r4, r5, r4
 80013ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80013f0:	d202      	bcs.n	80013f8 <__udivmoddi4+0x14c>
 80013f2:	45a1      	cmp	r9, r4
 80013f4:	f200 80b6 	bhi.w	8001564 <__udivmoddi4+0x2b8>
 80013f8:	4618      	mov	r0, r3
 80013fa:	eba4 0409 	sub.w	r4, r4, r9
 80013fe:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8001402:	e79e      	b.n	8001342 <__udivmoddi4+0x96>
 8001404:	f1c7 0520 	rsb	r5, r7, #32
 8001408:	40bb      	lsls	r3, r7
 800140a:	fa22 fc05 	lsr.w	ip, r2, r5
 800140e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001412:	fa21 f405 	lsr.w	r4, r1, r5
 8001416:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800141a:	fbb4 f9fe 	udiv	r9, r4, lr
 800141e:	fa1f f88c 	uxth.w	r8, ip
 8001422:	fb0e 4419 	mls	r4, lr, r9, r4
 8001426:	fa20 f305 	lsr.w	r3, r0, r5
 800142a:	40b9      	lsls	r1, r7
 800142c:	fb09 fa08 	mul.w	sl, r9, r8
 8001430:	4319      	orrs	r1, r3
 8001432:	0c0b      	lsrs	r3, r1, #16
 8001434:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001438:	45a2      	cmp	sl, r4
 800143a:	fa02 f207 	lsl.w	r2, r2, r7
 800143e:	fa00 f307 	lsl.w	r3, r0, r7
 8001442:	d90b      	bls.n	800145c <__udivmoddi4+0x1b0>
 8001444:	eb1c 0404 	adds.w	r4, ip, r4
 8001448:	f109 30ff 	add.w	r0, r9, #4294967295
 800144c:	f080 8088 	bcs.w	8001560 <__udivmoddi4+0x2b4>
 8001450:	45a2      	cmp	sl, r4
 8001452:	f240 8085 	bls.w	8001560 <__udivmoddi4+0x2b4>
 8001456:	f1a9 0902 	sub.w	r9, r9, #2
 800145a:	4464      	add	r4, ip
 800145c:	eba4 040a 	sub.w	r4, r4, sl
 8001460:	fbb4 f0fe 	udiv	r0, r4, lr
 8001464:	fb0e 4410 	mls	r4, lr, r0, r4
 8001468:	fb00 fa08 	mul.w	sl, r0, r8
 800146c:	b289      	uxth	r1, r1
 800146e:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8001472:	45a2      	cmp	sl, r4
 8001474:	d908      	bls.n	8001488 <__udivmoddi4+0x1dc>
 8001476:	eb1c 0404 	adds.w	r4, ip, r4
 800147a:	f100 31ff 	add.w	r1, r0, #4294967295
 800147e:	d26b      	bcs.n	8001558 <__udivmoddi4+0x2ac>
 8001480:	45a2      	cmp	sl, r4
 8001482:	d969      	bls.n	8001558 <__udivmoddi4+0x2ac>
 8001484:	3802      	subs	r0, #2
 8001486:	4464      	add	r4, ip
 8001488:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800148c:	fba0 8902 	umull	r8, r9, r0, r2
 8001490:	eba4 040a 	sub.w	r4, r4, sl
 8001494:	454c      	cmp	r4, r9
 8001496:	4641      	mov	r1, r8
 8001498:	46ce      	mov	lr, r9
 800149a:	d354      	bcc.n	8001546 <__udivmoddi4+0x29a>
 800149c:	d051      	beq.n	8001542 <__udivmoddi4+0x296>
 800149e:	2e00      	cmp	r6, #0
 80014a0:	d069      	beq.n	8001576 <__udivmoddi4+0x2ca>
 80014a2:	1a5a      	subs	r2, r3, r1
 80014a4:	eb64 040e 	sbc.w	r4, r4, lr
 80014a8:	fa04 f505 	lsl.w	r5, r4, r5
 80014ac:	fa22 f307 	lsr.w	r3, r2, r7
 80014b0:	40fc      	lsrs	r4, r7
 80014b2:	431d      	orrs	r5, r3
 80014b4:	e9c6 5400 	strd	r5, r4, [r6]
 80014b8:	2700      	movs	r7, #0
 80014ba:	e747      	b.n	800134c <__udivmoddi4+0xa0>
 80014bc:	4095      	lsls	r5, r2
 80014be:	f1c2 0320 	rsb	r3, r2, #32
 80014c2:	fa21 f003 	lsr.w	r0, r1, r3
 80014c6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80014ca:	fbb0 f7f8 	udiv	r7, r0, r8
 80014ce:	fa1f f985 	uxth.w	r9, r5
 80014d2:	fb08 0017 	mls	r0, r8, r7, r0
 80014d6:	fa24 f303 	lsr.w	r3, r4, r3
 80014da:	4091      	lsls	r1, r2
 80014dc:	fb07 fc09 	mul.w	ip, r7, r9
 80014e0:	430b      	orrs	r3, r1
 80014e2:	0c19      	lsrs	r1, r3, #16
 80014e4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80014e8:	458c      	cmp	ip, r1
 80014ea:	fa04 f402 	lsl.w	r4, r4, r2
 80014ee:	d907      	bls.n	8001500 <__udivmoddi4+0x254>
 80014f0:	1869      	adds	r1, r5, r1
 80014f2:	f107 30ff 	add.w	r0, r7, #4294967295
 80014f6:	d231      	bcs.n	800155c <__udivmoddi4+0x2b0>
 80014f8:	458c      	cmp	ip, r1
 80014fa:	d92f      	bls.n	800155c <__udivmoddi4+0x2b0>
 80014fc:	3f02      	subs	r7, #2
 80014fe:	4429      	add	r1, r5
 8001500:	eba1 010c 	sub.w	r1, r1, ip
 8001504:	fbb1 f0f8 	udiv	r0, r1, r8
 8001508:	fb08 1c10 	mls	ip, r8, r0, r1
 800150c:	fb00 fe09 	mul.w	lr, r0, r9
 8001510:	b299      	uxth	r1, r3
 8001512:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8001516:	458e      	cmp	lr, r1
 8001518:	d907      	bls.n	800152a <__udivmoddi4+0x27e>
 800151a:	1869      	adds	r1, r5, r1
 800151c:	f100 33ff 	add.w	r3, r0, #4294967295
 8001520:	d218      	bcs.n	8001554 <__udivmoddi4+0x2a8>
 8001522:	458e      	cmp	lr, r1
 8001524:	d916      	bls.n	8001554 <__udivmoddi4+0x2a8>
 8001526:	3802      	subs	r0, #2
 8001528:	4429      	add	r1, r5
 800152a:	eba1 010e 	sub.w	r1, r1, lr
 800152e:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8001532:	e73a      	b.n	80013aa <__udivmoddi4+0xfe>
 8001534:	4637      	mov	r7, r6
 8001536:	4630      	mov	r0, r6
 8001538:	e708      	b.n	800134c <__udivmoddi4+0xa0>
 800153a:	460f      	mov	r7, r1
 800153c:	e6e6      	b.n	800130c <__udivmoddi4+0x60>
 800153e:	4618      	mov	r0, r3
 8001540:	e6fb      	b.n	800133a <__udivmoddi4+0x8e>
 8001542:	4543      	cmp	r3, r8
 8001544:	d2ab      	bcs.n	800149e <__udivmoddi4+0x1f2>
 8001546:	ebb8 0102 	subs.w	r1, r8, r2
 800154a:	eb69 020c 	sbc.w	r2, r9, ip
 800154e:	3801      	subs	r0, #1
 8001550:	4696      	mov	lr, r2
 8001552:	e7a4      	b.n	800149e <__udivmoddi4+0x1f2>
 8001554:	4618      	mov	r0, r3
 8001556:	e7e8      	b.n	800152a <__udivmoddi4+0x27e>
 8001558:	4608      	mov	r0, r1
 800155a:	e795      	b.n	8001488 <__udivmoddi4+0x1dc>
 800155c:	4607      	mov	r7, r0
 800155e:	e7cf      	b.n	8001500 <__udivmoddi4+0x254>
 8001560:	4681      	mov	r9, r0
 8001562:	e77b      	b.n	800145c <__udivmoddi4+0x1b0>
 8001564:	3802      	subs	r0, #2
 8001566:	442c      	add	r4, r5
 8001568:	e747      	b.n	80013fa <__udivmoddi4+0x14e>
 800156a:	f1ae 0e02 	sub.w	lr, lr, #2
 800156e:	442b      	add	r3, r5
 8001570:	e72f      	b.n	80013d2 <__udivmoddi4+0x126>
 8001572:	4638      	mov	r0, r7
 8001574:	e707      	b.n	8001386 <__udivmoddi4+0xda>
 8001576:	4637      	mov	r7, r6
 8001578:	e6e8      	b.n	800134c <__udivmoddi4+0xa0>
 800157a:	bf00      	nop

0800157c <__aeabi_idiv0>:
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop

08001580 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4a06      	ldr	r2, [pc, #24]	; (80015a8 <vApplicationGetIdleTaskMemory+0x28>)
 8001590:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	4a05      	ldr	r2, [pc, #20]	; (80015ac <vApplicationGetIdleTaskMemory+0x2c>)
 8001596:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2280      	movs	r2, #128	; 0x80
 800159c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800159e:	bf00      	nop
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr
 80015a8:	2000020c 	.word	0x2000020c
 80015ac:	2000026c 	.word	0x2000026c

080015b0 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	4a07      	ldr	r2, [pc, #28]	; (80015dc <vApplicationGetTimerTaskMemory+0x2c>)
 80015c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	4a06      	ldr	r2, [pc, #24]	; (80015e0 <vApplicationGetTimerTaskMemory+0x30>)
 80015c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015ce:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80015d0:	bf00      	nop
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	2000046c 	.word	0x2000046c
 80015e0:	200004cc 	.word	0x200004cc

080015e4 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart1 , (uint8_t *)&ch, 1 , 0xffff);
	while ((USART3->SR & 0X40) == 0)
 80015ec:	bf00      	nop
 80015ee:	4b08      	ldr	r3, [pc, #32]	; (8001610 <__io_putchar+0x2c>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d0f9      	beq.n	80015ee <__io_putchar+0xa>
		;
	USART3->DR = (uint8_t) ch;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	4b04      	ldr	r3, [pc, #16]	; (8001610 <__io_putchar+0x2c>)
 8001600:	605a      	str	r2, [r3, #4]
	return ch;
 8001602:	687b      	ldr	r3, [r7, #4]
}
 8001604:	4618      	mov	r0, r3
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	bc80      	pop	{r7}
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	40004800 	.word	0x40004800

08001614 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001614:	b5b0      	push	{r4, r5, r7, lr}
 8001616:	b08a      	sub	sp, #40	; 0x28
 8001618:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800161a:	f000 fb65 	bl	8001ce8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800161e:	f000 f82f 	bl	8001680 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001622:	f000 f89d 	bl	8001760 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 8001626:	f000 f871 	bl	800170c <MX_USART3_UART_Init>
	/* add semaphores, ... */
	/* USER CODE END RTOS_SEMAPHORES */

	/* Create the timer(s) */
	/* definition and creation of myTimer01 */
	osTimerDef(myTimer01, Callback01);
 800162a:	4b11      	ldr	r3, [pc, #68]	; (8001670 <main+0x5c>)
 800162c:	623b      	str	r3, [r7, #32]
 800162e:	2300      	movs	r3, #0
 8001630:	627b      	str	r3, [r7, #36]	; 0x24
	myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8001632:	f107 0320 	add.w	r3, r7, #32
 8001636:	2200      	movs	r2, #0
 8001638:	2101      	movs	r1, #1
 800163a:	4618      	mov	r0, r3
 800163c:	f003 fde2 	bl	8005204 <osTimerCreate>
 8001640:	4602      	mov	r2, r0
 8001642:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <main+0x60>)
 8001644:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of startTask */
	osThreadDef(startTask, StartTask, osPriorityLow, 0, 128);
 8001646:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <main+0x64>)
 8001648:	1d3c      	adds	r4, r7, #4
 800164a:	461d      	mov	r5, r3
 800164c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800164e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001650:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001654:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	startTaskHandle = osThreadCreate(osThread(startTask), NULL);
 8001658:	1d3b      	adds	r3, r7, #4
 800165a:	2100      	movs	r1, #0
 800165c:	4618      	mov	r0, r3
 800165e:	f003 fd71 	bl	8005144 <osThreadCreate>
 8001662:	4602      	mov	r2, r0
 8001664:	4b05      	ldr	r3, [pc, #20]	; (800167c <main+0x68>)
 8001666:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8001668:	f003 fd55 	bl	8005116 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800166c:	e7fe      	b.n	800166c <main+0x58>
 800166e:	bf00      	nop
 8001670:	080018f5 	.word	0x080018f5
 8001674:	20004dbc 	.word	0x20004dbc
 8001678:	0801dfb4 	.word	0x0801dfb4
 800167c:	20004db8 	.word	0x20004db8

08001680 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b092      	sub	sp, #72	; 0x48
 8001684:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8001686:	f107 0318 	add.w	r3, r7, #24
 800168a:	2230      	movs	r2, #48	; 0x30
 800168c:	2100      	movs	r1, #0
 800168e:	4618      	mov	r0, r3
 8001690:	f018 fa0c 	bl	8019aac <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8001694:	1d3b      	adds	r3, r7, #4
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	609a      	str	r2, [r3, #8]
 800169e:	60da      	str	r2, [r3, #12]
 80016a0:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016a2:	2301      	movs	r3, #1
 80016a4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016a6:	2301      	movs	r3, #1
 80016a8:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016aa:	2302      	movs	r3, #2
 80016ac:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016b2:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLM = 8;
 80016b4:	2308      	movs	r3, #8
 80016b6:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLN = 240;
 80016b8:	23f0      	movs	r3, #240	; 0xf0
 80016ba:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016bc:	2302      	movs	r3, #2
 80016be:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLQ = 5;
 80016c0:	2305      	movs	r3, #5
 80016c2:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016c4:	f107 0318 	add.w	r3, r7, #24
 80016c8:	4618      	mov	r0, r3
 80016ca:	f001 ff8d 	bl	80035e8 <HAL_RCC_OscConfig>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <SystemClock_Config+0x58>
	{
		Error_Handler();
 80016d4:	f000 f92a 	bl	800192c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80016d8:	230f      	movs	r3, #15
 80016da:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016dc:	2302      	movs	r3, #2
 80016de:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016e0:	2300      	movs	r3, #0
 80016e2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80016e8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ee:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80016f0:	1d3b      	adds	r3, r7, #4
 80016f2:	2103      	movs	r1, #3
 80016f4:	4618      	mov	r0, r3
 80016f6:	f002 f9c7 	bl	8003a88 <HAL_RCC_ClockConfig>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <SystemClock_Config+0x84>
	{
		Error_Handler();
 8001700:	f000 f914 	bl	800192c <Error_Handler>
	}
}
 8001704:	bf00      	nop
 8001706:	3748      	adds	r7, #72	; 0x48
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001710:	4b11      	ldr	r3, [pc, #68]	; (8001758 <MX_USART3_UART_Init+0x4c>)
 8001712:	4a12      	ldr	r2, [pc, #72]	; (800175c <MX_USART3_UART_Init+0x50>)
 8001714:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8001716:	4b10      	ldr	r3, [pc, #64]	; (8001758 <MX_USART3_UART_Init+0x4c>)
 8001718:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800171c:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <MX_USART3_UART_Init+0x4c>)
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <MX_USART3_UART_Init+0x4c>)
 8001726:	2200      	movs	r2, #0
 8001728:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 800172a:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <MX_USART3_UART_Init+0x4c>)
 800172c:	2200      	movs	r2, #0
 800172e:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001730:	4b09      	ldr	r3, [pc, #36]	; (8001758 <MX_USART3_UART_Init+0x4c>)
 8001732:	220c      	movs	r2, #12
 8001734:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001736:	4b08      	ldr	r3, [pc, #32]	; (8001758 <MX_USART3_UART_Init+0x4c>)
 8001738:	2200      	movs	r2, #0
 800173a:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <MX_USART3_UART_Init+0x4c>)
 800173e:	2200      	movs	r2, #0
 8001740:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8001742:	4805      	ldr	r0, [pc, #20]	; (8001758 <MX_USART3_UART_Init+0x4c>)
 8001744:	f002 fe84 	bl	8004450 <HAL_UART_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 800174e:	f000 f8ed 	bl	800192c <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20004d74 	.word	0x20004d74
 800175c:	40004800 	.word	0x40004800

08001760 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08c      	sub	sp, #48	; 0x30
 8001764:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 8001766:	f107 031c 	add.w	r3, r7, #28
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	605a      	str	r2, [r3, #4]
 8001770:	609a      	str	r2, [r3, #8]
 8001772:	60da      	str	r2, [r3, #12]
 8001774:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	61bb      	str	r3, [r7, #24]
 800177a:	4b4b      	ldr	r3, [pc, #300]	; (80018a8 <MX_GPIO_Init+0x148>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	4a4a      	ldr	r2, [pc, #296]	; (80018a8 <MX_GPIO_Init+0x148>)
 8001780:	f043 0304 	orr.w	r3, r3, #4
 8001784:	6313      	str	r3, [r2, #48]	; 0x30
 8001786:	4b48      	ldr	r3, [pc, #288]	; (80018a8 <MX_GPIO_Init+0x148>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	f003 0304 	and.w	r3, r3, #4
 800178e:	61bb      	str	r3, [r7, #24]
 8001790:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]
 8001796:	4b44      	ldr	r3, [pc, #272]	; (80018a8 <MX_GPIO_Init+0x148>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	4a43      	ldr	r2, [pc, #268]	; (80018a8 <MX_GPIO_Init+0x148>)
 800179c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
 80017a2:	4b41      	ldr	r3, [pc, #260]	; (80018a8 <MX_GPIO_Init+0x148>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	613b      	str	r3, [r7, #16]
 80017b2:	4b3d      	ldr	r3, [pc, #244]	; (80018a8 <MX_GPIO_Init+0x148>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	4a3c      	ldr	r2, [pc, #240]	; (80018a8 <MX_GPIO_Init+0x148>)
 80017b8:	f043 0301 	orr.w	r3, r3, #1
 80017bc:	6313      	str	r3, [r2, #48]	; 0x30
 80017be:	4b3a      	ldr	r3, [pc, #232]	; (80018a8 <MX_GPIO_Init+0x148>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	4b36      	ldr	r3, [pc, #216]	; (80018a8 <MX_GPIO_Init+0x148>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	4a35      	ldr	r2, [pc, #212]	; (80018a8 <MX_GPIO_Init+0x148>)
 80017d4:	f043 0302 	orr.w	r3, r3, #2
 80017d8:	6313      	str	r3, [r2, #48]	; 0x30
 80017da:	4b33      	ldr	r3, [pc, #204]	; (80018a8 <MX_GPIO_Init+0x148>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	4b2f      	ldr	r3, [pc, #188]	; (80018a8 <MX_GPIO_Init+0x148>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a2e      	ldr	r2, [pc, #184]	; (80018a8 <MX_GPIO_Init+0x148>)
 80017f0:	f043 0308 	orr.w	r3, r3, #8
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	4b2c      	ldr	r3, [pc, #176]	; (80018a8 <MX_GPIO_Init+0x148>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	f003 0308 	and.w	r3, r3, #8
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	607b      	str	r3, [r7, #4]
 8001806:	4b28      	ldr	r3, [pc, #160]	; (80018a8 <MX_GPIO_Init+0x148>)
 8001808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180a:	4a27      	ldr	r2, [pc, #156]	; (80018a8 <MX_GPIO_Init+0x148>)
 800180c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001810:	6313      	str	r3, [r2, #48]	; 0x30
 8001812:	4b25      	ldr	r3, [pc, #148]	; (80018a8 <MX_GPIO_Init+0x148>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800181a:	607b      	str	r3, [r7, #4]
 800181c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 800181e:	2200      	movs	r2, #0
 8001820:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001824:	4821      	ldr	r0, [pc, #132]	; (80018ac <MX_GPIO_Init+0x14c>)
 8001826:	f001 fec7 	bl	80035b8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 800182a:	2200      	movs	r2, #0
 800182c:	2140      	movs	r1, #64	; 0x40
 800182e:	4820      	ldr	r0, [pc, #128]	; (80018b0 <MX_GPIO_Init+0x150>)
 8001830:	f001 fec2 	bl	80035b8 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001834:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001838:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800183a:	4b1e      	ldr	r3, [pc, #120]	; (80018b4 <MX_GPIO_Init+0x154>)
 800183c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001842:	f107 031c 	add.w	r3, r7, #28
 8001846:	4619      	mov	r1, r3
 8001848:	481b      	ldr	r0, [pc, #108]	; (80018b8 <MX_GPIO_Init+0x158>)
 800184a:	f001 fd17 	bl	800327c <HAL_GPIO_Init>

	/*Configure GPIO pins : LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD3_Pin | LD2_Pin;
 800184e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001852:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001854:	2301      	movs	r3, #1
 8001856:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001858:	2300      	movs	r3, #0
 800185a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185c:	2300      	movs	r3, #0
 800185e:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001860:	f107 031c 	add.w	r3, r7, #28
 8001864:	4619      	mov	r1, r3
 8001866:	4811      	ldr	r0, [pc, #68]	; (80018ac <MX_GPIO_Init+0x14c>)
 8001868:	f001 fd08 	bl	800327c <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800186c:	2340      	movs	r3, #64	; 0x40
 800186e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001870:	2301      	movs	r3, #1
 8001872:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001874:	2300      	movs	r3, #0
 8001876:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001878:	2300      	movs	r3, #0
 800187a:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800187c:	f107 031c 	add.w	r3, r7, #28
 8001880:	4619      	mov	r1, r3
 8001882:	480b      	ldr	r0, [pc, #44]	; (80018b0 <MX_GPIO_Init+0x150>)
 8001884:	f001 fcfa 	bl	800327c <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001888:	2380      	movs	r3, #128	; 0x80
 800188a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800188c:	2300      	movs	r3, #0
 800188e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001894:	f107 031c 	add.w	r3, r7, #28
 8001898:	4619      	mov	r1, r3
 800189a:	4805      	ldr	r0, [pc, #20]	; (80018b0 <MX_GPIO_Init+0x150>)
 800189c:	f001 fcee 	bl	800327c <HAL_GPIO_Init>

}
 80018a0:	bf00      	nop
 80018a2:	3730      	adds	r7, #48	; 0x30
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40023800 	.word	0x40023800
 80018ac:	40020400 	.word	0x40020400
 80018b0:	40021800 	.word	0x40021800
 80018b4:	10110000 	.word	0x10110000
 80018b8:	40020800 	.word	0x40020800

080018bc <StartTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTask */
void StartTask(void const *argument)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
	/* init code for LWIP */
	MX_LWIP_Init();
 80018c4:	f002 fefc 	bl	80046c0 <MX_LWIP_Init>
	/* USER CODE BEGIN 5 */
	UBaseType_t restStack = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60fb      	str	r3, [r7, #12]
	osDelay(3000);
 80018cc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80018d0:	f003 fc84 	bl	80051dc <osDelay>

	//  osThreadDef(TCPClient, tcp_client_task, osPriorityNormal, 0, 2048);
	//  TCPTaskHandle = osThreadCreate(osThread(TCPClient), NULL);

	osThreadId ptpTaskHandle = ptpd_init();
 80018d4:	f016 f88c 	bl	80179f0 <ptpd_init>
 80018d8:	60b8      	str	r0, [r7, #8]
	/* Infinite loop */
	for (;;)
	{
		//restStack = uxTaskGetStackHighWaterMark(ptpTaskHandle);
		//uxTaskGetStackHighWaterMark(ptpTaskHandle);
		printf("PTP task rest stack:%d byte\n", restStack * 4);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4619      	mov	r1, r3
 80018e0:	4803      	ldr	r0, [pc, #12]	; (80018f0 <StartTask+0x34>)
 80018e2:	f018 ff1b 	bl	801a71c <iprintf>
		osDelay(20000);
 80018e6:	f644 6020 	movw	r0, #20000	; 0x4e20
 80018ea:	f003 fc77 	bl	80051dc <osDelay>
		printf("PTP task rest stack:%d byte\n", restStack * 4);
 80018ee:	e7f4      	b.n	80018da <StartTask+0x1e>
 80018f0:	0801dfd0 	.word	0x0801dfd0

080018f4 <Callback01>:
	/* USER CODE END 5 */
}

/* Callback01 function */
void Callback01(void const *argument)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback01 */

	/* USER CODE END Callback01 */
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	bc80      	pop	{r7}
 8001904:	4770      	bx	lr
	...

08001908 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a04      	ldr	r2, [pc, #16]	; (8001928 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d101      	bne.n	800191e <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 800191a:	f000 fa07 	bl	8001d2c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40010000 	.word	0x40010000

0800192c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001930:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001932:	e7fe      	b.n	8001932 <Error_Handler+0x6>

08001934 <ETH_GetPTPRegister>:
 *     @arg ETH_PTPTTHR  : Target Time High Register
 *     @arg ETH_PTPTTLR  : Target Time Low Register
 * @retval The value of ETHERNET PTP Register value.
 */
uint32_t ETH_GetPTPRegister(uint32_t ETH_PTPReg)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_ETH_PTP_REGISTER(ETH_PTPReg));

	/* Return the selected register value */
	return (*(__IO uint32_t*) (ETH_MAC_BASE + ETH_PTPReg));
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001942:	f503 3320 	add.w	r3, r3, #163840	; 0x28000
 8001946:	681b      	ldr	r3, [r3, #0]
}
 8001948:	4618      	mov	r0, r3
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	bc80      	pop	{r7}
 8001950:	4770      	bx	lr
	...

08001954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	607b      	str	r3, [r7, #4]
 800195e:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <HAL_MspInit+0x54>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	4a11      	ldr	r2, [pc, #68]	; (80019a8 <HAL_MspInit+0x54>)
 8001964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001968:	6453      	str	r3, [r2, #68]	; 0x44
 800196a:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <HAL_MspInit+0x54>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001972:	607b      	str	r3, [r7, #4]
 8001974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	603b      	str	r3, [r7, #0]
 800197a:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <HAL_MspInit+0x54>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	4a0a      	ldr	r2, [pc, #40]	; (80019a8 <HAL_MspInit+0x54>)
 8001980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001984:	6413      	str	r3, [r2, #64]	; 0x40
 8001986:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <HAL_MspInit+0x54>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198e:	603b      	str	r3, [r7, #0]
 8001990:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001992:	2200      	movs	r2, #0
 8001994:	210f      	movs	r1, #15
 8001996:	f06f 0001 	mvn.w	r0, #1
 800199a:	f000 faba 	bl	8001f12 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40023800 	.word	0x40023800

080019ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08a      	sub	sp, #40	; 0x28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a19      	ldr	r2, [pc, #100]	; (8001a30 <HAL_UART_MspInit+0x84>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d12c      	bne.n	8001a28 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	613b      	str	r3, [r7, #16]
 80019d2:	4b18      	ldr	r3, [pc, #96]	; (8001a34 <HAL_UART_MspInit+0x88>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	4a17      	ldr	r2, [pc, #92]	; (8001a34 <HAL_UART_MspInit+0x88>)
 80019d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019dc:	6413      	str	r3, [r2, #64]	; 0x40
 80019de:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <HAL_UART_MspInit+0x88>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <HAL_UART_MspInit+0x88>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	4a10      	ldr	r2, [pc, #64]	; (8001a34 <HAL_UART_MspInit+0x88>)
 80019f4:	f043 0308 	orr.w	r3, r3, #8
 80019f8:	6313      	str	r3, [r2, #48]	; 0x30
 80019fa:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <HAL_UART_MspInit+0x88>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	f003 0308 	and.w	r3, r3, #8
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001a06:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a14:	2303      	movs	r3, #3
 8001a16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a18:	2307      	movs	r3, #7
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a1c:	f107 0314 	add.w	r3, r7, #20
 8001a20:	4619      	mov	r1, r3
 8001a22:	4805      	ldr	r0, [pc, #20]	; (8001a38 <HAL_UART_MspInit+0x8c>)
 8001a24:	f001 fc2a 	bl	800327c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a28:	bf00      	nop
 8001a2a:	3728      	adds	r7, #40	; 0x28
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40004800 	.word	0x40004800
 8001a34:	40023800 	.word	0x40023800
 8001a38:	40020c00 	.word	0x40020c00

08001a3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08c      	sub	sp, #48	; 0x30
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	2019      	movs	r0, #25
 8001a52:	f000 fa5e 	bl	8001f12 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001a56:	2019      	movs	r0, #25
 8001a58:	f000 fa77 	bl	8001f4a <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	4b1f      	ldr	r3, [pc, #124]	; (8001ae0 <HAL_InitTick+0xa4>)
 8001a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a64:	4a1e      	ldr	r2, [pc, #120]	; (8001ae0 <HAL_InitTick+0xa4>)
 8001a66:	f043 0301 	orr.w	r3, r3, #1
 8001a6a:	6453      	str	r3, [r2, #68]	; 0x44
 8001a6c:	4b1c      	ldr	r3, [pc, #112]	; (8001ae0 <HAL_InitTick+0xa4>)
 8001a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a70:	f003 0301 	and.w	r3, r3, #1
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a78:	f107 0210 	add.w	r2, r7, #16
 8001a7c:	f107 0314 	add.w	r3, r7, #20
 8001a80:	4611      	mov	r1, r2
 8001a82:	4618      	mov	r0, r3
 8001a84:	f002 fa12 	bl	8003eac <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001a88:	f002 f9ee 	bl	8003e68 <HAL_RCC_GetPCLK2Freq>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a94:	4a13      	ldr	r2, [pc, #76]	; (8001ae4 <HAL_InitTick+0xa8>)
 8001a96:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9a:	0c9b      	lsrs	r3, r3, #18
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001aa0:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <HAL_InitTick+0xac>)
 8001aa2:	4a12      	ldr	r2, [pc, #72]	; (8001aec <HAL_InitTick+0xb0>)
 8001aa4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001aa6:	4b10      	ldr	r3, [pc, #64]	; (8001ae8 <HAL_InitTick+0xac>)
 8001aa8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001aac:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001aae:	4a0e      	ldr	r2, [pc, #56]	; (8001ae8 <HAL_InitTick+0xac>)
 8001ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <HAL_InitTick+0xac>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aba:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <HAL_InitTick+0xac>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001ac0:	4809      	ldr	r0, [pc, #36]	; (8001ae8 <HAL_InitTick+0xac>)
 8001ac2:	f002 fa23 	bl	8003f0c <HAL_TIM_Base_Init>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d104      	bne.n	8001ad6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001acc:	4806      	ldr	r0, [pc, #24]	; (8001ae8 <HAL_InitTick+0xac>)
 8001ace:	f002 fa75 	bl	8003fbc <HAL_TIM_Base_Start_IT>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	e000      	b.n	8001ad8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3730      	adds	r7, #48	; 0x30
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	431bde83 	.word	0x431bde83
 8001ae8:	20004dc0 	.word	0x20004dc0
 8001aec:	40010000 	.word	0x40010000

08001af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001af4:	e7fe      	b.n	8001af4 <NMI_Handler+0x4>

08001af6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001af6:	b480      	push	{r7}
 8001af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001afa:	e7fe      	b.n	8001afa <HardFault_Handler+0x4>

08001afc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b00:	e7fe      	b.n	8001b00 <MemManage_Handler+0x4>

08001b02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b02:	b480      	push	{r7}
 8001b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b06:	e7fe      	b.n	8001b06 <BusFault_Handler+0x4>

08001b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b0c:	e7fe      	b.n	8001b0c <UsageFault_Handler+0x4>

08001b0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr
	...

08001b1c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b20:	4802      	ldr	r0, [pc, #8]	; (8001b2c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001b22:	f002 fab9 	bl	8004098 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20004dc0 	.word	0x20004dc0

08001b30 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001b34:	4802      	ldr	r0, [pc, #8]	; (8001b40 <ETH_IRQHandler+0x10>)
 8001b36:	f000 fdea 	bl	800270e <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20006728 	.word	0x20006728

08001b44 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b50:	2300      	movs	r3, #0
 8001b52:	617b      	str	r3, [r7, #20]
 8001b54:	e00a      	b.n	8001b6c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b56:	f3af 8000 	nop.w
 8001b5a:	4601      	mov	r1, r0
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	1c5a      	adds	r2, r3, #1
 8001b60:	60ba      	str	r2, [r7, #8]
 8001b62:	b2ca      	uxtb	r2, r1
 8001b64:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	3301      	adds	r3, #1
 8001b6a:	617b      	str	r3, [r7, #20]
 8001b6c:	697a      	ldr	r2, [r7, #20]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	dbf0      	blt.n	8001b56 <_read+0x12>
	}

return len;
 8001b74:	687b      	ldr	r3, [r7, #4]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3718      	adds	r7, #24
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b086      	sub	sp, #24
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	60f8      	str	r0, [r7, #12]
 8001b86:	60b9      	str	r1, [r7, #8]
 8001b88:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	617b      	str	r3, [r7, #20]
 8001b8e:	e009      	b.n	8001ba4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	1c5a      	adds	r2, r3, #1
 8001b94:	60ba      	str	r2, [r7, #8]
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff fd23 	bl	80015e4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	617b      	str	r3, [r7, #20]
 8001ba4:	697a      	ldr	r2, [r7, #20]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	dbf1      	blt.n	8001b90 <_write+0x12>
	}
	return len;
 8001bac:	687b      	ldr	r3, [r7, #4]
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <_close>:

int _close(int file)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	b083      	sub	sp, #12
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
	return -1;
 8001bbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr

08001bcc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bdc:	605a      	str	r2, [r3, #4]
	return 0;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bc80      	pop	{r7}
 8001be8:	4770      	bx	lr

08001bea <_isatty>:

int _isatty(int file)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
	return 1;
 8001bf2:	2301      	movs	r3, #1
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bc80      	pop	{r7}
 8001bfc:	4770      	bx	lr

08001bfe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b085      	sub	sp, #20
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	60f8      	str	r0, [r7, #12]
 8001c06:	60b9      	str	r1, [r7, #8]
 8001c08:	607a      	str	r2, [r7, #4]
	return 0;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bc80      	pop	{r7}
 8001c14:	4770      	bx	lr
	...

08001c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b087      	sub	sp, #28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c20:	4a14      	ldr	r2, [pc, #80]	; (8001c74 <_sbrk+0x5c>)
 8001c22:	4b15      	ldr	r3, [pc, #84]	; (8001c78 <_sbrk+0x60>)
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c2c:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <_sbrk+0x64>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d102      	bne.n	8001c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c34:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <_sbrk+0x64>)
 8001c36:	4a12      	ldr	r2, [pc, #72]	; (8001c80 <_sbrk+0x68>)
 8001c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c3a:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <_sbrk+0x64>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4413      	add	r3, r2
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d205      	bcs.n	8001c54 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001c48:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <_sbrk+0x6c>)
 8001c4a:	220c      	movs	r2, #12
 8001c4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c52:	e009      	b.n	8001c68 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c54:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <_sbrk+0x64>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c5a:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <_sbrk+0x64>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	4a06      	ldr	r2, [pc, #24]	; (8001c7c <_sbrk+0x64>)
 8001c64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c66:	68fb      	ldr	r3, [r7, #12]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	371c      	adds	r7, #28
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	20020000 	.word	0x20020000
 8001c78:	00000400 	.word	0x00000400
 8001c7c:	200008cc 	.word	0x200008cc
 8001c80:	2000bea8 	.word	0x2000bea8
 8001c84:	2000b84c 	.word	0x2000b84c

08001c88 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr

08001c94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ccc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001c98:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c9a:	e003      	b.n	8001ca4 <LoopCopyDataInit>

08001c9c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c9c:	4b0c      	ldr	r3, [pc, #48]	; (8001cd0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001c9e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ca0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ca2:	3104      	adds	r1, #4

08001ca4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ca4:	480b      	ldr	r0, [pc, #44]	; (8001cd4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ca6:	4b0c      	ldr	r3, [pc, #48]	; (8001cd8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ca8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001caa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001cac:	d3f6      	bcc.n	8001c9c <CopyDataInit>
  ldr  r2, =_sbss
 8001cae:	4a0b      	ldr	r2, [pc, #44]	; (8001cdc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001cb0:	e002      	b.n	8001cb8 <LoopFillZerobss>

08001cb2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001cb2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001cb4:	f842 3b04 	str.w	r3, [r2], #4

08001cb8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 8001cb8:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001cba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001cbc:	d3f9      	bcc.n	8001cb2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001cbe:	f7ff ffe3 	bl	8001c88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cc2:	f017 feb5 	bl	8019a30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cc6:	f7ff fca5 	bl	8001614 <main>
  bx  lr
 8001cca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ccc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001cd0:	08022068 	.word	0x08022068
  ldr  r0, =_sdata
 8001cd4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001cd8:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 8001cdc:	200001f0 	.word	0x200001f0
  ldr  r3, = _ebss
 8001ce0:	2000bea8 	.word	0x2000bea8

08001ce4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ce4:	e7fe      	b.n	8001ce4 <ADC_IRQHandler>
	...

08001ce8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cec:	4b0e      	ldr	r3, [pc, #56]	; (8001d28 <HAL_Init+0x40>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a0d      	ldr	r2, [pc, #52]	; (8001d28 <HAL_Init+0x40>)
 8001cf2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cf6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cf8:	4b0b      	ldr	r3, [pc, #44]	; (8001d28 <HAL_Init+0x40>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a0a      	ldr	r2, [pc, #40]	; (8001d28 <HAL_Init+0x40>)
 8001cfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d04:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <HAL_Init+0x40>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a07      	ldr	r2, [pc, #28]	; (8001d28 <HAL_Init+0x40>)
 8001d0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d10:	2003      	movs	r0, #3
 8001d12:	f000 f8f3 	bl	8001efc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d16:	2000      	movs	r0, #0
 8001d18:	f7ff fe90 	bl	8001a3c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001d1c:	f7ff fe1a 	bl	8001954 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40023c00 	.word	0x40023c00

08001d2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d30:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <HAL_IncTick+0x1c>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	461a      	mov	r2, r3
 8001d36:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <HAL_IncTick+0x20>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	4a03      	ldr	r2, [pc, #12]	; (8001d4c <HAL_IncTick+0x20>)
 8001d3e:	6013      	str	r3, [r2, #0]
}
 8001d40:	bf00      	nop
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr
 8001d48:	20000008 	.word	0x20000008
 8001d4c:	20004e08 	.word	0x20004e08

08001d50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  return uwTick;
 8001d54:	4b02      	ldr	r3, [pc, #8]	; (8001d60 <HAL_GetTick+0x10>)
 8001d56:	681b      	ldr	r3, [r3, #0]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr
 8001d60:	20004e08 	.word	0x20004e08

08001d64 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d6c:	f7ff fff0 	bl	8001d50 <HAL_GetTick>
 8001d70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d7c:	d005      	beq.n	8001d8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d7e:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <HAL_Delay+0x40>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	461a      	mov	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	4413      	add	r3, r2
 8001d88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d8a:	bf00      	nop
 8001d8c:	f7ff ffe0 	bl	8001d50 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d8f7      	bhi.n	8001d8c <HAL_Delay+0x28>
  {
  }
}
 8001d9c:	bf00      	nop
 8001d9e:	3710      	adds	r7, #16
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20000008 	.word	0x20000008

08001da8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001db8:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <__NVIC_SetPriorityGrouping+0x44>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dda:	4a04      	ldr	r2, [pc, #16]	; (8001dec <__NVIC_SetPriorityGrouping+0x44>)
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	60d3      	str	r3, [r2, #12]
}
 8001de0:	bf00      	nop
 8001de2:	3714      	adds	r7, #20
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bc80      	pop	{r7}
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001df4:	4b04      	ldr	r3, [pc, #16]	; (8001e08 <__NVIC_GetPriorityGrouping+0x18>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	0a1b      	lsrs	r3, r3, #8
 8001dfa:	f003 0307 	and.w	r3, r3, #7
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc80      	pop	{r7}
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	e000ed00 	.word	0xe000ed00

08001e0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	db0b      	blt.n	8001e36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e1e:	79fb      	ldrb	r3, [r7, #7]
 8001e20:	f003 021f 	and.w	r2, r3, #31
 8001e24:	4906      	ldr	r1, [pc, #24]	; (8001e40 <__NVIC_EnableIRQ+0x34>)
 8001e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2a:	095b      	lsrs	r3, r3, #5
 8001e2c:	2001      	movs	r0, #1
 8001e2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr
 8001e40:	e000e100 	.word	0xe000e100

08001e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	6039      	str	r1, [r7, #0]
 8001e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	db0a      	blt.n	8001e6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	490c      	ldr	r1, [pc, #48]	; (8001e90 <__NVIC_SetPriority+0x4c>)
 8001e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e62:	0112      	lsls	r2, r2, #4
 8001e64:	b2d2      	uxtb	r2, r2
 8001e66:	440b      	add	r3, r1
 8001e68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e6c:	e00a      	b.n	8001e84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	4908      	ldr	r1, [pc, #32]	; (8001e94 <__NVIC_SetPriority+0x50>)
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	3b04      	subs	r3, #4
 8001e7c:	0112      	lsls	r2, r2, #4
 8001e7e:	b2d2      	uxtb	r2, r2
 8001e80:	440b      	add	r3, r1
 8001e82:	761a      	strb	r2, [r3, #24]
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bc80      	pop	{r7}
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	e000e100 	.word	0xe000e100
 8001e94:	e000ed00 	.word	0xe000ed00

08001e98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b089      	sub	sp, #36	; 0x24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f1c3 0307 	rsb	r3, r3, #7
 8001eb2:	2b04      	cmp	r3, #4
 8001eb4:	bf28      	it	cs
 8001eb6:	2304      	movcs	r3, #4
 8001eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	3304      	adds	r3, #4
 8001ebe:	2b06      	cmp	r3, #6
 8001ec0:	d902      	bls.n	8001ec8 <NVIC_EncodePriority+0x30>
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	3b03      	subs	r3, #3
 8001ec6:	e000      	b.n	8001eca <NVIC_EncodePriority+0x32>
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	43da      	mvns	r2, r3
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	401a      	ands	r2, r3
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eea:	43d9      	mvns	r1, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef0:	4313      	orrs	r3, r2
         );
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3724      	adds	r7, #36	; 0x24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr

08001efc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f7ff ff4f 	bl	8001da8 <__NVIC_SetPriorityGrouping>
}
 8001f0a:	bf00      	nop
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b086      	sub	sp, #24
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	4603      	mov	r3, r0
 8001f1a:	60b9      	str	r1, [r7, #8]
 8001f1c:	607a      	str	r2, [r7, #4]
 8001f1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f24:	f7ff ff64 	bl	8001df0 <__NVIC_GetPriorityGrouping>
 8001f28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	68b9      	ldr	r1, [r7, #8]
 8001f2e:	6978      	ldr	r0, [r7, #20]
 8001f30:	f7ff ffb2 	bl	8001e98 <NVIC_EncodePriority>
 8001f34:	4602      	mov	r2, r0
 8001f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f3a:	4611      	mov	r1, r2
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff ff81 	bl	8001e44 <__NVIC_SetPriority>
}
 8001f42:	bf00      	nop
 8001f44:	3718      	adds	r7, #24
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b082      	sub	sp, #8
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	4603      	mov	r3, r0
 8001f52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff ff57 	bl	8001e0c <__NVIC_EnableIRQ>
}
 8001f5e:	bf00      	nop
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b088      	sub	sp, #32
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001f70:	2300      	movs	r3, #0
 8001f72:	61fb      	str	r3, [r7, #28]
 8001f74:	2300      	movs	r3, #0
 8001f76:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001f78:	4ba3      	ldr	r3, [pc, #652]	; (8002208 <HAL_ETH_Init+0x2a0>)
 8001f7a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001f80:	2300      	movs	r3, #0
 8001f82:	613b      	str	r3, [r7, #16]

  /* Check the ETH peripheral state */
  if (heth == NULL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e175      	b.n	800227a <HAL_ETH_Init+0x312>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));

  if (heth->State == HAL_ETH_STATE_RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d106      	bne.n	8001fa8 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f002 fc48 	bl	8004838 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fa8:	2300      	movs	r3, #0
 8001faa:	60bb      	str	r3, [r7, #8]
 8001fac:	4b97      	ldr	r3, [pc, #604]	; (800220c <HAL_ETH_Init+0x2a4>)
 8001fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb0:	4a96      	ldr	r2, [pc, #600]	; (800220c <HAL_ETH_Init+0x2a4>)
 8001fb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fb6:	6453      	str	r3, [r2, #68]	; 0x44
 8001fb8:	4b94      	ldr	r3, [pc, #592]	; (800220c <HAL_ETH_Init+0x2a4>)
 8001fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fc0:	60bb      	str	r3, [r7, #8]
 8001fc2:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001fc4:	4b92      	ldr	r3, [pc, #584]	; (8002210 <HAL_ETH_Init+0x2a8>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	4a91      	ldr	r2, [pc, #580]	; (8002210 <HAL_ETH_Init+0x2a8>)
 8001fca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001fce:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001fd0:	4b8f      	ldr	r3, [pc, #572]	; (8002210 <HAL_ETH_Init+0x2a8>)
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	498d      	ldr	r1, [pc, #564]	; (8002210 <HAL_ETH_Init+0x2a8>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	604b      	str	r3, [r1, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f042 0201 	orr.w	r2, r2, #1
 8001ff0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ff4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ff6:	f7ff feab 	bl	8001d50 <HAL_GetTick>
 8001ffa:	6178      	str	r0, [r7, #20]

  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001ffc:	e011      	b.n	8002022 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_SWRESET)
 8001ffe:	f7ff fea7 	bl	8001d50 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800200c:	d909      	bls.n	8002022 <HAL_ETH_Init+0xba>
    {
      heth->State = HAL_ETH_STATE_TIMEOUT;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2203      	movs	r2, #3
 8002012:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e12b      	b.n	800227a <HAL_ETH_Init+0x312>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1e4      	bne.n	8001ffe <HAL_ETH_Init+0x96>
    }
  }

  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	f023 031c 	bic.w	r3, r3, #28
 8002042:	61fb      	str	r3, [r7, #28]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002044:	f001 fee4 	bl	8003e10 <HAL_RCC_GetHCLKFreq>
 8002048:	61b8      	str	r0, [r7, #24]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	4a71      	ldr	r2, [pc, #452]	; (8002214 <HAL_ETH_Init+0x2ac>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d908      	bls.n	8002064 <HAL_ETH_Init+0xfc>
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	4a70      	ldr	r2, [pc, #448]	; (8002218 <HAL_ETH_Init+0x2b0>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d804      	bhi.n	8002064 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	f043 0308 	orr.w	r3, r3, #8
 8002060:	61fb      	str	r3, [r7, #28]
 8002062:	e01a      	b.n	800209a <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	4a6c      	ldr	r2, [pc, #432]	; (8002218 <HAL_ETH_Init+0x2b0>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d908      	bls.n	800207e <HAL_ETH_Init+0x116>
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	4a6b      	ldr	r2, [pc, #428]	; (800221c <HAL_ETH_Init+0x2b4>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d804      	bhi.n	800207e <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	f043 030c 	orr.w	r3, r3, #12
 800207a:	61fb      	str	r3, [r7, #28]
 800207c:	e00d      	b.n	800209a <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	4a66      	ldr	r2, [pc, #408]	; (800221c <HAL_ETH_Init+0x2b4>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d903      	bls.n	800208e <HAL_ETH_Init+0x126>
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	4a65      	ldr	r2, [pc, #404]	; (8002220 <HAL_ETH_Init+0x2b8>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d904      	bls.n	8002098 <HAL_ETH_Init+0x130>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else /* ((hclk >= 100000000)&&(hclk < 120000000)) */
  {
    /* CSR Clock Range between 100-120 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	f043 0304 	orr.w	r3, r3, #4
 8002094:	61fb      	str	r3, [r7, #28]
 8002096:	e000      	b.n	800209a <HAL_ETH_Init+0x132>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002098:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	69fa      	ldr	r2, [r7, #28]
 80020a0:	611a      	str	r2, [r3, #16]

  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80020a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80020a6:	2100      	movs	r1, #0
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f000 fc11 	bl	80028d0 <HAL_ETH_WritePHYRegister>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d00b      	beq.n	80020cc <HAL_ETH_Init+0x164>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	613b      	str	r3, [r7, #16]

    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80020b8:	6939      	ldr	r1, [r7, #16]
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 fdc6 	bl	8002c4c <ETH_MACDMAConfig>

    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Return HAL_ERROR */
    return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e0d6      	b.n	800227a <HAL_ETH_Init+0x312>
  }

  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80020cc:	20ff      	movs	r0, #255	; 0xff
 80020ce:	f7ff fe49 	bl	8001d64 <HAL_Delay>

  if ((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f000 80a4 	beq.w	8002224 <HAL_ETH_Init+0x2bc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80020dc:	f7ff fe38 	bl	8001d50 <HAL_GetTick>
 80020e0:	6178      	str	r0, [r7, #20]

    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80020e2:	f107 030c 	add.w	r3, r7, #12
 80020e6:	461a      	mov	r2, r3
 80020e8:	2101      	movs	r1, #1
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 fb88 	bl	8002800 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_LINKED_STATE)
 80020f0:	f7ff fe2e 	bl	8001d50 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80020fe:	4293      	cmp	r3, r2
 8002100:	d90f      	bls.n	8002122 <HAL_ETH_Init+0x1ba>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002106:	6939      	ldr	r1, [r7, #16]
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 fd9f 	bl	8002c4c <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2201      	movs	r2, #1
 8002112:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e0ab      	b.n	800227a <HAL_ETH_Init+0x312>
      }
    }
    while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f003 0304 	and.w	r3, r3, #4
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0da      	beq.n	80020e2 <HAL_ETH_Init+0x17a>


    /* Enable Auto-Negotiation */
    if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800212c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002130:	2100      	movs	r1, #0
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 fbcc 	bl	80028d0 <HAL_ETH_WritePHYRegister>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00b      	beq.n	8002156 <HAL_ETH_Init+0x1ee>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002142:	6939      	ldr	r1, [r7, #16]
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 fd81 	bl	8002c4c <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2201      	movs	r2, #1
 800214e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e091      	b.n	800227a <HAL_ETH_Init+0x312>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 8002156:	f7ff fdfb 	bl	8001d50 <HAL_GetTick>
 800215a:	6178      	str	r0, [r7, #20]

    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800215c:	f107 030c 	add.w	r3, r7, #12
 8002160:	461a      	mov	r2, r3
 8002162:	2101      	movs	r1, #1
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 fb4b 	bl	8002800 <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800216a:	f7ff fdf1 	bl	8001d50 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	f241 3288 	movw	r2, #5000	; 0x1388
 8002178:	4293      	cmp	r3, r2
 800217a:	d90f      	bls.n	800219c <HAL_ETH_Init+0x234>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002180:	6939      	ldr	r1, [r7, #16]
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 fd62 	bl	8002c4c <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e06e      	b.n	800227a <HAL_ETH_Init+0x312>
      }

    }
    while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f003 0320 	and.w	r3, r3, #32
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d0da      	beq.n	800215c <HAL_ETH_Init+0x1f4>

    /* Read the result of the auto-negotiation */
    if ((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80021a6:	f107 030c 	add.w	r3, r7, #12
 80021aa:	461a      	mov	r2, r3
 80021ac:	211f      	movs	r1, #31
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 fb26 	bl	8002800 <HAL_ETH_ReadPHYRegister>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00b      	beq.n	80021d2 <HAL_ETH_Init+0x26a>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80021be:	6939      	ldr	r1, [r7, #16]
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f000 fd43 	bl	8002c4c <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2201      	movs	r2, #1
 80021ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e053      	b.n	800227a <HAL_ETH_Init+0x312>
    }

    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if ((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f003 0310 	and.w	r3, r3, #16
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d004      	beq.n	80021e6 <HAL_ETH_Init+0x27e>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021e2:	60da      	str	r2, [r3, #12]
 80021e4:	e002      	b.n	80021ec <HAL_ETH_Init+0x284>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if ((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f003 0304 	and.w	r3, r3, #4
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d003      	beq.n	80021fe <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	e034      	b.n	8002268 <HAL_ETH_Init+0x300>
    }
    else
    {
      /* Set Ethernet speed to 100M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_100M;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002204:	609a      	str	r2, [r3, #8]
 8002206:	e02f      	b.n	8002268 <HAL_ETH_Init+0x300>
 8002208:	03938700 	.word	0x03938700
 800220c:	40023800 	.word	0x40023800
 8002210:	40013800 	.word	0x40013800
 8002214:	01312cff 	.word	0x01312cff
 8002218:	02160ebf 	.word	0x02160ebf
 800221c:	039386ff 	.word	0x039386ff
 8002220:	05f5e0ff 	.word	0x05f5e0ff
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

    /* Set MAC Speed and Duplex Mode */
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	08db      	lsrs	r3, r3, #3
 800222a:	b29a      	uxth	r2, r3
                                                 (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	085b      	lsrs	r3, r3, #1
 8002232:	b29b      	uxth	r3, r3
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8002234:	4313      	orrs	r3, r2
 8002236:	b29b      	uxth	r3, r3
 8002238:	461a      	mov	r2, r3
 800223a:	2100      	movs	r1, #0
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f000 fb47 	bl	80028d0 <HAL_ETH_WritePHYRegister>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00b      	beq.n	8002260 <HAL_ETH_Init+0x2f8>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800224c:	6939      	ldr	r1, [r7, #16]
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 fcfc 	bl	8002c4c <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e00c      	b.n	800227a <HAL_ETH_Init+0x312>
    }

    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8002260:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002264:	f7ff fd7e 	bl	8001d64 <HAL_Delay>
  }

  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002268:	6939      	ldr	r1, [r7, #16]
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f000 fcee 	bl	8002c4c <ETH_MACDMAConfig>

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3720      	adds	r7, #32
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop

08002284 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8002284:	b480      	push	{r7}
 8002286:	b087      	sub	sp, #28
 8002288:	af00      	add	r7, sp, #0
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	607a      	str	r2, [r7, #4]
 8002290:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8002292:	2300      	movs	r3, #0
 8002294:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800229c:	2b01      	cmp	r3, #1
 800229e:	d101      	bne.n	80022a4 <HAL_ETH_DMATxDescListInit+0x20>
 80022a0:	2302      	movs	r3, #2
 80022a2:	e052      	b.n	800234a <HAL_ETH_DMATxDescListInit+0xc6>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2202      	movs	r2, #2
 80022b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	68ba      	ldr	r2, [r7, #8]
 80022b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0U; i < TxBuffCount; i++)
 80022ba:	2300      	movs	r3, #0
 80022bc:	617b      	str	r3, [r7, #20]
 80022be:	e030      	b.n	8002322 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	015b      	lsls	r3, r3, #5
 80022c4:	68ba      	ldr	r2, [r7, #8]
 80022c6:	4413      	add	r3, r2
 80022c8:	613b      	str	r3, [r7, #16]

    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80022d0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i * ETH_TX_BUF_SIZE]);
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80022d8:	fb02 f303 	mul.w	r3, r2, r3
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	4413      	add	r3, r2
 80022e0:	461a      	mov	r2, r3
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	609a      	str	r2, [r3, #8]

    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d105      	bne.n	80022fa <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	601a      	str	r2, [r3, #0]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (TxBuffCount - 1))
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	3b01      	subs	r3, #1
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	429a      	cmp	r2, r3
 8002302:	d208      	bcs.n	8002316 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab + i + 1);
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	3301      	adds	r3, #1
 8002308:	015b      	lsls	r3, r3, #5
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	4413      	add	r3, r2
 800230e:	461a      	mov	r2, r3
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	60da      	str	r2, [r3, #12]
 8002314:	e002      	b.n	800231c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < TxBuffCount; i++)
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	3301      	adds	r3, #1
 8002320:	617b      	str	r3, [r7, #20]
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	429a      	cmp	r2, r3
 8002328:	d3ca      	bcc.n	80022c0 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }

  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002334:	3310      	adds	r3, #16
 8002336:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	371c      	adds	r7, #28
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr

08002354 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8002354:	b480      	push	{r7}
 8002356:	b087      	sub	sp, #28
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
 8002360:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8002362:	2300      	movs	r3, #0
 8002364:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800236c:	2b01      	cmp	r3, #1
 800236e:	d101      	bne.n	8002374 <HAL_ETH_DMARxDescListInit+0x20>
 8002370:	2302      	movs	r3, #2
 8002372:	e056      	b.n	8002422 <HAL_ETH_DMARxDescListInit+0xce>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2202      	movs	r2, #2
 8002380:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	629a      	str	r2, [r3, #40]	; 0x28

  /* Fill each DMARxDesc descriptor with the right values */
  for (i = 0U; i < RxBuffCount; i++)
 800238a:	2300      	movs	r3, #0
 800238c:	617b      	str	r3, [r7, #20]
 800238e:	e034      	b.n	80023fa <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab + i;
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	015b      	lsls	r3, r3, #5
 8002394:	68ba      	ldr	r2, [r7, #8]
 8002396:	4413      	add	r3, r2
 8002398:	613b      	str	r3, [r7, #16]

    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80023a0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80023a8:	605a      	str	r2, [r3, #4]

    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i * ETH_RX_BUF_SIZE]);
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80023b0:	fb02 f303 	mul.w	r3, r2, r3
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	4413      	add	r3, r2
 80023b8:	461a      	mov	r2, r3
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	609a      	str	r2, [r3, #8]

    if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d105      	bne.n	80023d2 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	605a      	str	r2, [r3, #4]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (RxBuffCount - 1U))
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	3b01      	subs	r3, #1
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d208      	bcs.n	80023ee <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab + i + 1U);
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	3301      	adds	r3, #1
 80023e0:	015b      	lsls	r3, r3, #5
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	4413      	add	r3, r2
 80023e6:	461a      	mov	r2, r3
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	60da      	str	r2, [r3, #12]
 80023ec:	e002      	b.n	80023f4 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab);
 80023ee:	68ba      	ldr	r2, [r7, #8]
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < RxBuffCount; i++)
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	3301      	adds	r3, #1
 80023f8:	617b      	str	r3, [r7, #20]
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d3c6      	bcc.n	8002390 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }

  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68ba      	ldr	r2, [r7, #8]
 8002408:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800240c:	330c      	adds	r3, #12
 800240e:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	371c      	adds	r7, #28
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr

0800242c <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 800242c:	b480      	push	{r7}
 800242e:	b087      	sub	sp, #28
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8002436:	2300      	movs	r3, #0
 8002438:	617b      	str	r3, [r7, #20]
 800243a:	2300      	movs	r3, #0
 800243c:	60fb      	str	r3, [r7, #12]
 800243e:	2300      	movs	r3, #0
 8002440:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(heth);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002448:	2b01      	cmp	r3, #1
 800244a:	d101      	bne.n	8002450 <HAL_ETH_TransmitFrame+0x24>
 800244c:	2302      	movs	r3, #2
 800244e:	e0cd      	b.n	80025ec <HAL_ETH_TransmitFrame+0x1c0>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2202      	movs	r2, #2
 800245c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  if (FrameLength == 0U)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d109      	bne.n	800247a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2201      	movs	r2, #1
 800246a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return  HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e0b8      	b.n	80025ec <HAL_ETH_TransmitFrame+0x1c0>
  }

  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if (((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	da09      	bge.n	8002498 <HAL_ETH_TransmitFrame+0x6c>
  {
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2212      	movs	r2, #18
 8002488:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e0a9      	b.n	80025ec <HAL_ETH_TransmitFrame+0x1c0>
  }

  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800249e:	4293      	cmp	r3, r2
 80024a0:	d915      	bls.n	80024ce <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength / ETH_TX_BUF_SIZE;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	4a54      	ldr	r2, [pc, #336]	; (80025f8 <HAL_ETH_TransmitFrame+0x1cc>)
 80024a6:	fba2 2303 	umull	r2, r3, r2, r3
 80024aa:	0a9b      	lsrs	r3, r3, #10
 80024ac:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE)
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	4b51      	ldr	r3, [pc, #324]	; (80025f8 <HAL_ETH_TransmitFrame+0x1cc>)
 80024b2:	fba3 1302 	umull	r1, r3, r3, r2
 80024b6:	0a9b      	lsrs	r3, r3, #10
 80024b8:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80024bc:	fb01 f303 	mul.w	r3, r1, r3
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d005      	beq.n	80024d2 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	3301      	adds	r3, #1
 80024ca:	617b      	str	r3, [r7, #20]
 80024cc:	e001      	b.n	80024d2 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else
  {
    bufcount = 1U;
 80024ce:	2301      	movs	r3, #1
 80024d0:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d11c      	bne.n	8002512 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e2:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80024e6:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80024f2:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002502:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	461a      	mov	r2, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002510:	e04b      	b.n	80025aa <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i = 0U; i < bufcount; i++)
 8002512:	2300      	movs	r3, #0
 8002514:	613b      	str	r3, [r7, #16]
 8002516:	e044      	b.n	80025a2 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002522:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002526:	601a      	str	r2, [r3, #0]

      if (i == 0U)
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d107      	bne.n	800253e <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002538:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800253c:	601a      	str	r2, [r3, #0]
      }

      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002542:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002546:	605a      	str	r2, [r3, #4]

      if (i == (bufcount - 1U))
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	3b01      	subs	r3, #1
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	429a      	cmp	r2, r3
 8002550:	d116      	bne.n	8002580 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002560:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount - 1U) * ETH_TX_BUF_SIZE;
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	4a25      	ldr	r2, [pc, #148]	; (80025fc <HAL_ETH_TransmitFrame+0x1d0>)
 8002566:	fb02 f203 	mul.w	r2, r2, r3
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	4413      	add	r3, r2
 800256e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8002572:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800257e:	605a      	str	r2, [r3, #4]
      }

      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800258e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	461a      	mov	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i = 0U; i < bufcount; i++)
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	3301      	adds	r3, #1
 80025a0:	613b      	str	r3, [r7, #16]
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d3b6      	bcc.n	8002518 <HAL_ETH_TransmitFrame+0xec>
    }
  }

  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025b2:	3314      	adds	r3, #20
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0304 	and.w	r3, r3, #4
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00d      	beq.n	80025da <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025c6:	3314      	adds	r3, #20
 80025c8:	2204      	movs	r2, #4
 80025ca:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025d4:	3304      	adds	r3, #4
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2201      	movs	r2, #1
 80025de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	371c      	adds	r7, #28
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bc80      	pop	{r7}
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	ac02b00b 	.word	0xac02b00b
 80025fc:	fffffa0c 	.word	0xfffffa0c

08002600 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8002608:	2300      	movs	r3, #0
 800260a:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002612:	2b01      	cmp	r3, #1
 8002614:	d101      	bne.n	800261a <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8002616:	2302      	movs	r3, #2
 8002618:	e074      	b.n	8002704 <HAL_ETH_GetReceivedFrame_IT+0x104>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2201      	movs	r2, #1
 800261e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2202      	movs	r2, #2
 8002626:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800262a:	e05a      	b.n	80026e2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	3301      	adds	r3, #1
 8002630:	60fb      	str	r3, [r7, #12]

    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */
    if ((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800263c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002640:	d10d      	bne.n	800265e <HAL_ETH_GetReceivedFrame_IT+0x5e>
    {
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	461a      	mov	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	629a      	str	r2, [r3, #40]	; 0x28
 800265c:	e041      	b.n	80026e2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10b      	bne.n	8002684 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002670:	1c5a      	adds	r2, r3, #1
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	461a      	mov	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	629a      	str	r2, [r3, #40]	; 0x28
 8002682:	e02e      	b.n	80026e2 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    {
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002690:	1c5a      	adds	r2, r3, #1
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	639a      	str	r2, [r3, #56]	; 0x38

      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800269a:	2b01      	cmp	r3, #1
 800269c:	d103      	bne.n	80026a6 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	631a      	str	r2, [r3, #48]	; 0x30
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	0c1b      	lsrs	r3, r3, #16
 80026ae:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80026b2:	1f1a      	subs	r2, r3, #4
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	461a      	mov	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Return function status */
      return HAL_OK;
 80026de:	2300      	movs	r3, #0
 80026e0:	e010      	b.n	8002704 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	db02      	blt.n	80026f2 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2b03      	cmp	r3, #3
 80026f0:	d99c      	bls.n	800262c <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
}
 8002704:	4618      	mov	r0, r3
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	bc80      	pop	{r7}
 800270c:	4770      	bx	lr

0800270e <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b082      	sub	sp, #8
 8002712:	af00      	add	r7, sp, #0
 8002714:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800271e:	3314      	adds	r3, #20
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002726:	2b40      	cmp	r3, #64	; 0x40
 8002728:	d112      	bne.n	8002750 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f002 f96c 	bl	8004a08 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002738:	3314      	adds	r3, #20
 800273a:	2240      	movs	r2, #64	; 0x40
 800273c:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800274e:	e01b      	b.n	8002788 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002758:	3314      	adds	r3, #20
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b01      	cmp	r3, #1
 8002762:	d111      	bne.n	8002788 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 f839 	bl	80027dc <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002772:	3314      	adds	r3, #20
 8002774:	2201      	movs	r2, #1
 8002776:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002790:	3314      	adds	r3, #20
 8002792:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002796:	601a      	str	r2, [r3, #0]

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027a0:	3314      	adds	r3, #20
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027ac:	d112      	bne.n	80027d4 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f81d 	bl	80027ee <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027bc:	3314      	adds	r3, #20
 80027be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80027c2:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 80027d4:	bf00      	nop
 80027d6:	3708      	adds	r7, #8
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bc80      	pop	{r7}
 80027ec:	4770      	bx	lr

080027ee <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr

08002800 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param  RegValue PHY register value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	460b      	mov	r3, r1
 800280a:	607a      	str	r2, [r7, #4]
 800280c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800280e:	2300      	movs	r3, #0
 8002810:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002812:	2300      	movs	r3, #0
 8002814:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b82      	cmp	r3, #130	; 0x82
 8002820:	d101      	bne.n	8002826 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002822:	2302      	movs	r3, #2
 8002824:	e050      	b.n	80028c8 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2282      	movs	r2, #130	; 0x82
 800282a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f003 031c 	and.w	r3, r3, #28
 800283c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	8a1b      	ldrh	r3, [r3, #16]
 8002842:	02db      	lsls	r3, r3, #11
 8002844:	b29b      	uxth	r3, r3
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	4313      	orrs	r3, r2
 800284a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800284c:	897b      	ldrh	r3, [r7, #10]
 800284e:	019b      	lsls	r3, r3, #6
 8002850:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	4313      	orrs	r3, r2
 8002858:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	f023 0302 	bic.w	r3, r3, #2
 8002860:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	f043 0301 	orr.w	r3, r3, #1
 8002868:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002872:	f7ff fa6d 	bl	8001d50 <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002878:	e015      	b.n	80028a6 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 800287a:	f7ff fa69 	bl	8001d50 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002888:	d309      	bcc.n	800289e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State = HAL_ETH_STATE_READY;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e014      	b.n	80028c8 <HAL_ETH_ReadPHYRegister+0xc8>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1e4      	bne.n	800287a <HAL_ETH_ReadPHYRegister+0x7a>
  }

  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	695b      	ldr	r3, [r3, #20]
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	461a      	mov	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3718      	adds	r7, #24
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	460b      	mov	r3, r1
 80028da:	607a      	str	r2, [r7, #4]
 80028dc:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80028de:	2300      	movs	r3, #0
 80028e0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b42      	cmp	r3, #66	; 0x42
 80028f0:	d101      	bne.n	80028f6 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80028f2:	2302      	movs	r3, #2
 80028f4:	e04e      	b.n	8002994 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2242      	movs	r2, #66	; 0x42
 80028fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	f003 031c 	and.w	r3, r3, #28
 800290c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8a1b      	ldrh	r3, [r3, #16]
 8002912:	02db      	lsls	r3, r3, #11
 8002914:	b29b      	uxth	r3, r3
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	4313      	orrs	r3, r2
 800291a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 800291c:	897b      	ldrh	r3, [r7, #10]
 800291e:	019b      	lsls	r3, r3, #6
 8002920:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	4313      	orrs	r3, r2
 8002928:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	f043 0302 	orr.w	r3, r3, #2
 8002930:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	f043 0301 	orr.w	r3, r3, #1
 8002938:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	b29a      	uxth	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	697a      	ldr	r2, [r7, #20]
 800294a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800294c:	f7ff fa00 	bl	8001d50 <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002952:	e015      	b.n	8002980 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002954:	f7ff f9fc 	bl	8001d50 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002962:	d309      	bcc.n	8002978 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State = HAL_ETH_STATE_READY;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e00d      	b.n	8002994 <HAL_ETH_WritePHYRegister+0xc4>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1e4      	bne.n	8002954 <HAL_ETH_WritePHYRegister+0x84>
  }

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3718      	adds	r7, #24
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <HAL_ETH_Start>:
 * @param  heth pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d101      	bne.n	80029b2 <HAL_ETH_Start+0x16>
 80029ae:	2302      	movs	r3, #2
 80029b0:	e01f      	b.n	80029f2 <HAL_ETH_Start+0x56>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2202      	movs	r2, #2
 80029be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 fb42 	bl	800304c <ETH_MACTransmissionEnable>

  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 fb79 	bl	80030c0 <ETH_MACReceptionEnable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 fc0c 	bl	80031ec <ETH_FlushTransmitFIFO>

  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f000 fbad 	bl	8003134 <ETH_DMATransmissionEnable>

  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 fbd8 	bl	8003190 <ETH_DMAReceptionEnable>

  /* Set the ETH state to READY*/
  heth->State = HAL_ETH_STATE_READY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d101      	bne.n	8002a10 <HAL_ETH_Stop+0x16>
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	e01f      	b.n	8002a50 <HAL_ETH_Stop+0x56>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f000 fb9e 	bl	8003162 <ETH_DMATransmissionDisable>

  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 fbc9 	bl	80031be <ETH_DMAReceptionDisable>

  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 fb64 	bl	80030fa <ETH_MACReceptionDisable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 fbda 	bl	80031ec <ETH_FlushTransmitFIFO>

  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 fb24 	bl	8003086 <ETH_MACTransmissionDisable>

  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3708      	adds	r7, #8
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8002a62:	2300      	movs	r3, #0
 8002a64:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d101      	bne.n	8002a74 <HAL_ETH_ConfigMAC+0x1c>
 8002a70:	2302      	movs	r3, #2
 8002a72:	e0e4      	b.n	8002c3e <HAL_ETH_ConfigMAC+0x1e6>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2202      	movs	r2, #2
 8002a80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

  if (macconf != NULL)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	f000 80b1 	beq.w	8002bee <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));

    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	4b6c      	ldr	r3, [pc, #432]	; (8002c48 <HAL_ETH_ConfigMAC+0x1f0>)
 8002a98:	4013      	ands	r3, r2
 8002a9a:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
                          macconf->Jabber |
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8002aa4:	431a      	orrs	r2, r3
                          macconf->InterFrameGap |
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
                          macconf->Jabber |
 8002aaa:	431a      	orrs	r2, r3
                          macconf->CarrierSense |
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
                          macconf->InterFrameGap |
 8002ab0:	431a      	orrs	r2, r3
                          (heth->Init).Speed |
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	689b      	ldr	r3, [r3, #8]
                          macconf->CarrierSense |
 8002ab6:	431a      	orrs	r2, r3
                          macconf->ReceiveOwn |
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	691b      	ldr	r3, [r3, #16]
                          (heth->Init).Speed |
 8002abc:	431a      	orrs	r2, r3
                          macconf->LoopbackMode |
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	695b      	ldr	r3, [r3, #20]
                          macconf->ReceiveOwn |
 8002ac2:	431a      	orrs	r2, r3
                          (heth->Init).DuplexMode |
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68db      	ldr	r3, [r3, #12]
                          macconf->LoopbackMode |
 8002ac8:	431a      	orrs	r2, r3
                          macconf->ChecksumOffload |
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	699b      	ldr	r3, [r3, #24]
                          (heth->Init).DuplexMode |
 8002ace:	431a      	orrs	r2, r3
                          macconf->RetryTransmission |
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	69db      	ldr	r3, [r3, #28]
                          macconf->ChecksumOffload |
 8002ad4:	431a      	orrs	r2, r3
                          macconf->AutomaticPadCRCStrip |
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
                          macconf->RetryTransmission |
 8002ada:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          macconf->AutomaticPadCRCStrip |
 8002ae0:	431a      	orrs	r2, r3
                          macconf->DeferralCheck);
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          macconf->BackOffLimit |
 8002ae6:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002afe:	2001      	movs	r0, #1
 8002b00:	f7ff f930 	bl	8001d64 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68fa      	ldr	r2, [r7, #12]
 8002b0a:	601a      	str	r2, [r3, #0]

    /*----------------------- ETHERNET MACFFR Configuration --------------------*/
    /* Write to ETHERNET MACFFR */
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8002b14:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8002b1a:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception |
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8002b20:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception |
 8002b26:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8002b2c:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8002b32:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8002b3e:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8002b40:	605a      	str	r2, [r3, #4]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFFR;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b4a:	2001      	movs	r0, #1
 8002b4c:	f7ff f90a 	bl	8001d64 <HAL_Delay>
    (heth->Instance)->MACFFR = tmpreg1;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	605a      	str	r2, [r3, #4]

    /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
    /* Write to ETHERNET MACHTHR */
    (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002b60:	609a      	str	r2, [r3, #8]

    /* Write to ETHERNET MACHTLR */
    (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002b6a:	60da      	str	r2, [r3, #12]
    /*----------------------- ETHERNET MACFCR Configuration --------------------*/

    /* Get the ETHERNET MACFCR value */
    tmpreg1 = (heth->Instance)->MACFCR;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	60fb      	str	r3, [r7, #12]
    /* Clear xx bits */
    tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b82:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b88:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8002b8e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect |
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8002b94:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect |
 8002b9a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl);
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8002ba0:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACFCR */
    (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	619a      	str	r2, [r3, #24]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFCR;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bb8:	2001      	movs	r0, #1
 8002bba:	f7ff f8d3 	bl	8001d64 <HAL_Delay>
    (heth->Instance)->MACFCR = tmpreg1;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	619a      	str	r2, [r3, #24]

    /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                             macconf->VLANTagIdentifier);
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	61da      	str	r2, [r3, #28]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	69db      	ldr	r3, [r3, #28]
 8002bdc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bde:	2001      	movs	r0, #1
 8002be0:	f7ff f8c0 	bl	8001d64 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	61da      	str	r2, [r3, #28]
 8002bec:	e01e      	b.n	8002c2c <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	60fb      	str	r3, [r7, #12]

    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002bfc:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	689a      	ldr	r2, [r3, #8]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c1e:	2001      	movs	r0, #1
 8002c20:	f7ff f8a0 	bl	8001d64 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the ETH state to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	ff20810f 	.word	0xff20810f

08002c4c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b0b0      	sub	sp, #192	; 0xc0
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8002c56:	2300      	movs	r3, #0
 8002c58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d007      	beq.n	8002c72 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c68:	60da      	str	r2, [r3, #12]

    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c70:	609a      	str	r2, [r3, #8]
  }

  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002c72:	2300      	movs	r3, #0
 8002c74:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002c76:	2300      	movs	r3, #0
 8002c78:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002c82:	2300      	movs	r3, #0
 8002c84:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002c86:	2300      	movs	r3, #0
 8002c88:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d103      	bne.n	8002c9a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002c92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c96:	663b      	str	r3, [r7, #96]	; 0x60
 8002c98:	e001      	b.n	8002c9e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002c9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ca2:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002cac:	2300      	movs	r3, #0
 8002cae:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002cb8:	2340      	movs	r3, #64	; 0x40
 8002cba:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002cec:	2380      	movs	r3, #128	; 0x80
 8002cee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002d04:	2300      	movs	r3, #0
 8002d06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8002d10:	2300      	movs	r3, #0
 8002d12:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002d20:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d24:	4bac      	ldr	r3, [pc, #688]	; (8002fd8 <ETH_MACDMAConfig+0x38c>)
 8002d26:	4013      	ands	r3, r2
 8002d28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8002d2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                        macinit.Jabber |
 8002d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8002d30:	431a      	orrs	r2, r3
                        macinit.InterFrameGap |
 8002d32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                        macinit.Jabber |
 8002d34:	431a      	orrs	r2, r3
                        macinit.CarrierSense |
 8002d36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                        macinit.InterFrameGap |
 8002d38:	431a      	orrs	r2, r3
                        (heth->Init).Speed |
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
                        macinit.CarrierSense |
 8002d3e:	431a      	orrs	r2, r3
                        macinit.ReceiveOwn |
 8002d40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                        (heth->Init).Speed |
 8002d42:	431a      	orrs	r2, r3
                        macinit.LoopbackMode |
 8002d44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                        macinit.ReceiveOwn |
 8002d46:	431a      	orrs	r2, r3
                        (heth->Init).DuplexMode |
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68db      	ldr	r3, [r3, #12]
                        macinit.LoopbackMode |
 8002d4c:	431a      	orrs	r2, r3
                        macinit.ChecksumOffload |
 8002d4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                        (heth->Init).DuplexMode |
 8002d50:	431a      	orrs	r2, r3
                        macinit.RetryTransmission |
 8002d52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                        macinit.ChecksumOffload |
 8002d54:	431a      	orrs	r2, r3
                        macinit.AutomaticPadCRCStrip |
 8002d56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                        macinit.RetryTransmission |
 8002d58:	431a      	orrs	r2, r3
                        macinit.BackOffLimit |
 8002d5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                        macinit.AutomaticPadCRCStrip |
 8002d5c:	431a      	orrs	r2, r3
                        macinit.DeferralCheck);
 8002d5e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                        macinit.BackOffLimit |
 8002d60:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8002d62:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d66:	4313      	orrs	r3, r2
 8002d68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d74:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d80:	2001      	movs	r0, #1
 8002d82:	f7fe ffef 	bl	8001d64 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002d8e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8002d90:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002d92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8002d94:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002d96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002d98:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception |
 8002d9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002d9e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002da0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception |
 8002da4:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002da6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002daa:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002dac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002db0:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002db4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002dbc:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8002dbe:	605a      	str	r2, [r3, #4]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002dca:	2001      	movs	r0, #1
 8002dcc:	f7fe ffca 	bl	8001d64 <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002dd8:	605a      	str	r2, [r3, #4]

  /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
  /* Write to ETHERNET MACHTHR */
  (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002de2:	609a      	str	r2, [r3, #8]

  /* Write to ETHERNET MACHTLR */
  (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002dec:	60da      	str	r2, [r3, #12]
  /*----------------------- ETHERNET MACFCR Configuration -------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002df8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002dfc:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002e00:	4013      	ands	r3, r2
 8002e02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
  /* Set the PLT bit according to ETH PauseLowThreshold value */
  /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
  /* Set the RFE bit according to ETH ReceiveFlowControl value */
  /* Set the TFE bit according to ETH TransmitFlowControl value */
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8002e06:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e0a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002e0c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8002e10:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002e12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002e16:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect |
 8002e18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002e1c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002e1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect |
 8002e22:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl);
 8002e24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002e28:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8002e2a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e3c:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e48:	2001      	movs	r0, #1
 8002e4a:	f7fe ff8b 	bl	8001d64 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e56:	619a      	str	r2, [r3, #24]

  /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
  /* Set the ETV bit according to ETH VLANTagComparison value */
  /* Set the VL bit according to ETH VLANTagIdentifier value */
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8002e58:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                           macinit.VLANTagIdentifier);
 8002e5c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	430a      	orrs	r2, r1
 8002e66:	61da      	str	r2, [r3, #28]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACVLANTR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e72:	2001      	movs	r0, #1
 8002e74:	f7fe ff76 	bl	8001d64 <HAL_Delay>
  (heth->Instance)->MACVLANTR = tmpreg1;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002e80:	61da      	str	r2, [r3, #28]

  /* Ethernet DMA default initialization ************************************/
  dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002e82:	2300      	movs	r3, #0
 8002e84:	60bb      	str	r3, [r7, #8]
  dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002e86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e8a:	60fb      	str	r3, [r7, #12]
  dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	613b      	str	r3, [r7, #16]
  dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;
 8002e90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002e94:	617b      	str	r3, [r7, #20]
  dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002e96:	2300      	movs	r3, #0
 8002e98:	61bb      	str	r3, [r7, #24]
  dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	61fb      	str	r3, [r7, #28]
  dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	623b      	str	r3, [r7, #32]
  dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	627b      	str	r3, [r7, #36]	; 0x24
  dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002ea6:	2304      	movs	r3, #4
 8002ea8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002eaa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002eb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002eb4:	633b      	str	r3, [r7, #48]	; 0x30
  dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002eb6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002eba:	637b      	str	r3, [r7, #52]	; 0x34
  dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002ebc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ec0:	63bb      	str	r3, [r7, #56]	; 0x38
  dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002ec2:	2380      	movs	r3, #128	; 0x80
 8002ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
  dmainit.DescriptorSkipLength = 0x0U;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	643b      	str	r3, [r7, #64]	; 0x40
  dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	647b      	str	r3, [r7, #68]	; 0x44

  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ed6:	3318      	adds	r3, #24
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002ede:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ee2:	4b3e      	ldr	r3, [pc, #248]	; (8002fdc <ETH_MACDMAConfig+0x390>)
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the TTC bit according to ETH TransmitThresholdControl value */
  /* Set the FEF bit according to ETH ForwardErrorFrames value */
  /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
  /* Set the RTC bit according to ETH ReceiveThresholdControl value */
  /* Set the OSF bit according to ETH SecondFrameOperate value */
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8002eea:	68ba      	ldr	r2, [r7, #8]
                        dmainit.ReceiveStoreForward |
 8002eec:	68fb      	ldr	r3, [r7, #12]
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8002eee:	431a      	orrs	r2, r3
                        dmainit.FlushReceivedFrame |
 8002ef0:	693b      	ldr	r3, [r7, #16]
                        dmainit.ReceiveStoreForward |
 8002ef2:	431a      	orrs	r2, r3
                        dmainit.TransmitStoreForward |
 8002ef4:	697b      	ldr	r3, [r7, #20]
                        dmainit.FlushReceivedFrame |
 8002ef6:	431a      	orrs	r2, r3
                        dmainit.TransmitThresholdControl |
 8002ef8:	69bb      	ldr	r3, [r7, #24]
                        dmainit.TransmitStoreForward |
 8002efa:	431a      	orrs	r2, r3
                        dmainit.ForwardErrorFrames |
 8002efc:	69fb      	ldr	r3, [r7, #28]
                        dmainit.TransmitThresholdControl |
 8002efe:	431a      	orrs	r2, r3
                        dmainit.ForwardUndersizedGoodFrames |
 8002f00:	6a3b      	ldr	r3, [r7, #32]
                        dmainit.ForwardErrorFrames |
 8002f02:	431a      	orrs	r2, r3
                        dmainit.ReceiveThresholdControl |
 8002f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                        dmainit.ForwardUndersizedGoodFrames |
 8002f06:	431a      	orrs	r2, r3
                        dmainit.SecondFrameOperate);
 8002f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
                        dmainit.ReceiveThresholdControl |
 8002f0a:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8002f0c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002f10:	4313      	orrs	r3, r2
 8002f12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f1e:	3318      	adds	r3, #24
 8002f20:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002f24:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f2e:	3318      	adds	r3, #24
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f36:	2001      	movs	r0, #1
 8002f38:	f7fe ff14 	bl	8001d64 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f44:	3318      	adds	r3, #24
 8002f46:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002f4a:	601a      	str	r2, [r3, #0]
  /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
  /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
  /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
  /* Set the DSL bit according to ETH DesciptorSkipLength value */
  /* Set the PR and DA bits according to ETH DMAArbitration value */
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8002f4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                        dmainit.FixedBurst |
 8002f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8002f50:	431a      	orrs	r2, r3
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                        dmainit.FixedBurst |
 8002f54:	431a      	orrs	r2, r3
                                        dmainit.TxDMABurstLength |
 8002f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002f58:	431a      	orrs	r2, r3
                                        dmainit.EnhancedDescriptorFormat |
 8002f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                        dmainit.TxDMABurstLength |
 8002f5c:	431a      	orrs	r2, r3
                                        (dmainit.DescriptorSkipLength << 2U) |
 8002f5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f60:	009b      	lsls	r3, r3, #2
                                        dmainit.EnhancedDescriptorFormat |
 8002f62:	431a      	orrs	r2, r3
                                        dmainit.DMAArbitration |
 8002f64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                        (dmainit.DescriptorSkipLength << 2U) |
 8002f66:	431a      	orrs	r2, r3
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002f70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f74:	601a      	str	r2, [r3, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f84:	2001      	movs	r0, #1
 8002f86:	f7fe feed 	bl	8001d64 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f92:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002f96:	601a      	str	r2, [r3, #0]

  if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d10f      	bne.n	8002fc0 <ETH_MACDMAConfig+0x374>
  {
    /* Enable the Ethernet Rx Interrupt */
    __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fa8:	331c      	adds	r3, #28
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002fb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fbc:	331c      	adds	r3, #28
 8002fbe:	601a      	str	r2, [r3, #0]
  }

  /* Initialize MAC address in ethernet MAC */
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 f809 	bl	8002fe0 <ETH_MACAddressConfig>
}
 8002fce:	bf00      	nop
 8002fd0:	37c0      	adds	r7, #192	; 0xc0
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	ff20810f 	.word	0xff20810f
 8002fdc:	f8de3f23 	.word	0xf8de3f23

08002fe0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b087      	sub	sp, #28
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3305      	adds	r3, #5
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	021b      	lsls	r3, r3, #8
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	3204      	adds	r2, #4
 8002ff8:	7812      	ldrb	r2, [r2, #0]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	4b10      	ldr	r3, [pc, #64]	; (8003044 <ETH_MACAddressConfig+0x64>)
 8003002:	4413      	add	r3, r2
 8003004:	461a      	mov	r2, r3
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	3303      	adds	r3, #3
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	061a      	lsls	r2, r3, #24
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	3302      	adds	r3, #2
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	041b      	lsls	r3, r3, #16
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3301      	adds	r3, #1
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	021b      	lsls	r3, r3, #8
 8003024:	4313      	orrs	r3, r2
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	7812      	ldrb	r2, [r2, #0]
 800302a:	4313      	orrs	r3, r2
 800302c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	4b05      	ldr	r3, [pc, #20]	; (8003048 <ETH_MACAddressConfig+0x68>)
 8003032:	4413      	add	r3, r2
 8003034:	461a      	mov	r2, r3
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	6013      	str	r3, [r2, #0]
}
 800303a:	bf00      	nop
 800303c:	371c      	adds	r7, #28
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr
 8003044:	40028040 	.word	0x40028040
 8003048:	40028044 	.word	0x40028044

0800304c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003054:	2300      	movs	r3, #0
 8003056:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f042 0208 	orr.w	r2, r2, #8
 8003066:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003070:	2001      	movs	r0, #1
 8003072:	f000 f8e5 	bl	8003240 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	601a      	str	r2, [r3, #0]
}
 800307e:	bf00      	nop
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b084      	sub	sp, #16
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800308e:	2300      	movs	r3, #0
 8003090:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 0208 	bic.w	r2, r2, #8
 80030a0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80030aa:	2001      	movs	r0, #1
 80030ac:	f000 f8c8 	bl	8003240 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68fa      	ldr	r2, [r7, #12]
 80030b6:	601a      	str	r2, [r3, #0]
}
 80030b8:	bf00      	nop
 80030ba:	3710      	adds	r7, #16
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80030c8:	2300      	movs	r3, #0
 80030ca:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f042 0204 	orr.w	r2, r2, #4
 80030da:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80030e4:	2001      	movs	r0, #1
 80030e6:	f000 f8ab 	bl	8003240 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	601a      	str	r2, [r3, #0]
}
 80030f2:	bf00      	nop
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b084      	sub	sp, #16
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003102:	2300      	movs	r3, #0
 8003104:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f022 0204 	bic.w	r2, r2, #4
 8003114:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800311e:	2001      	movs	r0, #1
 8003120:	f000 f88e 	bl	8003240 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	601a      	str	r2, [r3, #0]
}
 800312c:	bf00      	nop
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003144:	3318      	adds	r3, #24
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003150:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003154:	3318      	adds	r3, #24
 8003156:	601a      	str	r2, [r3, #0]
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	bc80      	pop	{r7}
 8003160:	4770      	bx	lr

08003162 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{
 8003162:	b480      	push	{r7}
 8003164:	b083      	sub	sp, #12
 8003166:	af00      	add	r7, sp, #0
 8003168:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003172:	3318      	adds	r3, #24
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800317e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003182:	3318      	adds	r3, #24
 8003184:	601a      	str	r2, [r3, #0]
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	bc80      	pop	{r7}
 800318e:	4770      	bx	lr

08003190 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031a0:	3318      	adds	r3, #24
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f042 0202 	orr.w	r2, r2, #2
 80031ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031b0:	3318      	adds	r3, #24
 80031b2:	601a      	str	r2, [r3, #0]
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bc80      	pop	{r7}
 80031bc:	4770      	bx	lr

080031be <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{
 80031be:	b480      	push	{r7}
 80031c0:	b083      	sub	sp, #12
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031ce:	3318      	adds	r3, #24
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f022 0202 	bic.w	r2, r2, #2
 80031da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031de:	3318      	adds	r3, #24
 80031e0:	601a      	str	r2, [r3, #0]
}
 80031e2:	bf00      	nop
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bc80      	pop	{r7}
 80031ea:	4770      	bx	lr

080031ec <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80031f4:	2300      	movs	r3, #0
 80031f6:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003200:	3318      	adds	r3, #24
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800320c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003210:	3318      	adds	r3, #24
 8003212:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800321c:	3318      	adds	r3, #24
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003222:	2001      	movs	r0, #1
 8003224:	f000 f80c 	bl	8003240 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	68fa      	ldr	r2, [r7, #12]
 800322e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003232:	3318      	adds	r3, #24
 8003234:	601a      	str	r2, [r3, #0]
}
 8003236:	bf00      	nop
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
	...

08003240 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003248:	4b0a      	ldr	r3, [pc, #40]	; (8003274 <ETH_Delay+0x34>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a0a      	ldr	r2, [pc, #40]	; (8003278 <ETH_Delay+0x38>)
 800324e:	fba2 2303 	umull	r2, r3, r2, r3
 8003252:	0a5b      	lsrs	r3, r3, #9
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	fb02 f303 	mul.w	r3, r2, r3
 800325a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800325c:	bf00      	nop
  }
  while (Delay --);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	1e5a      	subs	r2, r3, #1
 8003262:	60fa      	str	r2, [r7, #12]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1f9      	bne.n	800325c <ETH_Delay+0x1c>
}
 8003268:	bf00      	nop
 800326a:	3714      	adds	r7, #20
 800326c:	46bd      	mov	sp, r7
 800326e:	bc80      	pop	{r7}
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	20000000 	.word	0x20000000
 8003278:	10624dd3 	.word	0x10624dd3

0800327c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800327c:	b480      	push	{r7}
 800327e:	b087      	sub	sp, #28
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003286:	2300      	movs	r3, #0
 8003288:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800328a:	e16f      	b.n	800356c <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	2101      	movs	r1, #1
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	fa01 f303 	lsl.w	r3, r1, r3
 8003298:	4013      	ands	r3, r2
 800329a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	f000 8161 	beq.w	8003566 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d00b      	beq.n	80032c4 <HAL_GPIO_Init+0x48>
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d007      	beq.n	80032c4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032b8:	2b11      	cmp	r3, #17
 80032ba:	d003      	beq.n	80032c4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	2b12      	cmp	r3, #18
 80032c2:	d130      	bne.n	8003326 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	2203      	movs	r2, #3
 80032d0:	fa02 f303 	lsl.w	r3, r2, r3
 80032d4:	43db      	mvns	r3, r3
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	4013      	ands	r3, r2
 80032da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	68da      	ldr	r2, [r3, #12]
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	fa02 f303 	lsl.w	r3, r2, r3
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032fa:	2201      	movs	r2, #1
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003302:	43db      	mvns	r3, r3
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	4013      	ands	r3, r2
 8003308:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	091b      	lsrs	r3, r3, #4
 8003310:	f003 0201 	and.w	r2, r3, #1
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	4313      	orrs	r3, r2
 800331e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	2203      	movs	r2, #3
 8003332:	fa02 f303 	lsl.w	r3, r2, r3
 8003336:	43db      	mvns	r3, r3
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	4013      	ands	r3, r2
 800333c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	689a      	ldr	r2, [r3, #8]
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	4313      	orrs	r3, r2
 800334e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	693a      	ldr	r2, [r7, #16]
 8003354:	60da      	str	r2, [r3, #12]

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	2b02      	cmp	r3, #2
 800335c:	d003      	beq.n	8003366 <HAL_GPIO_Init+0xea>
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	2b12      	cmp	r3, #18
 8003364:	d123      	bne.n	80033ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	08da      	lsrs	r2, r3, #3
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	3208      	adds	r2, #8
 800336e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003372:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	f003 0307 	and.w	r3, r3, #7
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	220f      	movs	r2, #15
 800337e:	fa02 f303 	lsl.w	r3, r2, r3
 8003382:	43db      	mvns	r3, r3
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	4013      	ands	r3, r2
 8003388:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	691a      	ldr	r2, [r3, #16]
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	f003 0307 	and.w	r3, r3, #7
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	4313      	orrs	r3, r2
 800339e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	08da      	lsrs	r2, r3, #3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	3208      	adds	r2, #8
 80033a8:	6939      	ldr	r1, [r7, #16]
 80033aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	005b      	lsls	r3, r3, #1
 80033b8:	2203      	movs	r2, #3
 80033ba:	fa02 f303 	lsl.w	r3, r2, r3
 80033be:	43db      	mvns	r3, r3
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	4013      	ands	r3, r2
 80033c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f003 0203 	and.w	r2, r3, #3
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	fa02 f303 	lsl.w	r3, r2, r3
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	4313      	orrs	r3, r2
 80033da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f000 80bb 	beq.w	8003566 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033f0:	2300      	movs	r3, #0
 80033f2:	60bb      	str	r3, [r7, #8]
 80033f4:	4b64      	ldr	r3, [pc, #400]	; (8003588 <HAL_GPIO_Init+0x30c>)
 80033f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f8:	4a63      	ldr	r2, [pc, #396]	; (8003588 <HAL_GPIO_Init+0x30c>)
 80033fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033fe:	6453      	str	r3, [r2, #68]	; 0x44
 8003400:	4b61      	ldr	r3, [pc, #388]	; (8003588 <HAL_GPIO_Init+0x30c>)
 8003402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003404:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003408:	60bb      	str	r3, [r7, #8]
 800340a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800340c:	4a5f      	ldr	r2, [pc, #380]	; (800358c <HAL_GPIO_Init+0x310>)
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	089b      	lsrs	r3, r3, #2
 8003412:	3302      	adds	r3, #2
 8003414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003418:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	f003 0303 	and.w	r3, r3, #3
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	220f      	movs	r2, #15
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	43db      	mvns	r3, r3
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	4013      	ands	r3, r2
 800342e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a57      	ldr	r2, [pc, #348]	; (8003590 <HAL_GPIO_Init+0x314>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d031      	beq.n	800349c <HAL_GPIO_Init+0x220>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a56      	ldr	r2, [pc, #344]	; (8003594 <HAL_GPIO_Init+0x318>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d02b      	beq.n	8003498 <HAL_GPIO_Init+0x21c>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a55      	ldr	r2, [pc, #340]	; (8003598 <HAL_GPIO_Init+0x31c>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d025      	beq.n	8003494 <HAL_GPIO_Init+0x218>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a54      	ldr	r2, [pc, #336]	; (800359c <HAL_GPIO_Init+0x320>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d01f      	beq.n	8003490 <HAL_GPIO_Init+0x214>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a53      	ldr	r2, [pc, #332]	; (80035a0 <HAL_GPIO_Init+0x324>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d019      	beq.n	800348c <HAL_GPIO_Init+0x210>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a52      	ldr	r2, [pc, #328]	; (80035a4 <HAL_GPIO_Init+0x328>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d013      	beq.n	8003488 <HAL_GPIO_Init+0x20c>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a51      	ldr	r2, [pc, #324]	; (80035a8 <HAL_GPIO_Init+0x32c>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d00d      	beq.n	8003484 <HAL_GPIO_Init+0x208>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a50      	ldr	r2, [pc, #320]	; (80035ac <HAL_GPIO_Init+0x330>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d007      	beq.n	8003480 <HAL_GPIO_Init+0x204>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a4f      	ldr	r2, [pc, #316]	; (80035b0 <HAL_GPIO_Init+0x334>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d101      	bne.n	800347c <HAL_GPIO_Init+0x200>
 8003478:	2308      	movs	r3, #8
 800347a:	e010      	b.n	800349e <HAL_GPIO_Init+0x222>
 800347c:	2309      	movs	r3, #9
 800347e:	e00e      	b.n	800349e <HAL_GPIO_Init+0x222>
 8003480:	2307      	movs	r3, #7
 8003482:	e00c      	b.n	800349e <HAL_GPIO_Init+0x222>
 8003484:	2306      	movs	r3, #6
 8003486:	e00a      	b.n	800349e <HAL_GPIO_Init+0x222>
 8003488:	2305      	movs	r3, #5
 800348a:	e008      	b.n	800349e <HAL_GPIO_Init+0x222>
 800348c:	2304      	movs	r3, #4
 800348e:	e006      	b.n	800349e <HAL_GPIO_Init+0x222>
 8003490:	2303      	movs	r3, #3
 8003492:	e004      	b.n	800349e <HAL_GPIO_Init+0x222>
 8003494:	2302      	movs	r3, #2
 8003496:	e002      	b.n	800349e <HAL_GPIO_Init+0x222>
 8003498:	2301      	movs	r3, #1
 800349a:	e000      	b.n	800349e <HAL_GPIO_Init+0x222>
 800349c:	2300      	movs	r3, #0
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	f002 0203 	and.w	r2, r2, #3
 80034a4:	0092      	lsls	r2, r2, #2
 80034a6:	4093      	lsls	r3, r2
 80034a8:	461a      	mov	r2, r3
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80034b0:	4936      	ldr	r1, [pc, #216]	; (800358c <HAL_GPIO_Init+0x310>)
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	089b      	lsrs	r3, r3, #2
 80034b6:	3302      	adds	r3, #2
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034be:	4b3d      	ldr	r3, [pc, #244]	; (80035b4 <HAL_GPIO_Init+0x338>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	43db      	mvns	r3, r3
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	4013      	ands	r3, r2
 80034cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4313      	orrs	r3, r2
 80034e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80034e2:	4a34      	ldr	r2, [pc, #208]	; (80035b4 <HAL_GPIO_Init+0x338>)
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80034e8:	4b32      	ldr	r3, [pc, #200]	; (80035b4 <HAL_GPIO_Init+0x338>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	43db      	mvns	r3, r3
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	4013      	ands	r3, r2
 80034f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d003      	beq.n	800350c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	4313      	orrs	r3, r2
 800350a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800350c:	4a29      	ldr	r2, [pc, #164]	; (80035b4 <HAL_GPIO_Init+0x338>)
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003512:	4b28      	ldr	r3, [pc, #160]	; (80035b4 <HAL_GPIO_Init+0x338>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	43db      	mvns	r3, r3
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	4013      	ands	r3, r2
 8003520:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	4313      	orrs	r3, r2
 8003534:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003536:	4a1f      	ldr	r2, [pc, #124]	; (80035b4 <HAL_GPIO_Init+0x338>)
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800353c:	4b1d      	ldr	r3, [pc, #116]	; (80035b4 <HAL_GPIO_Init+0x338>)
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	43db      	mvns	r3, r3
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	4013      	ands	r3, r2
 800354a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d003      	beq.n	8003560 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	4313      	orrs	r3, r2
 800355e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003560:	4a14      	ldr	r2, [pc, #80]	; (80035b4 <HAL_GPIO_Init+0x338>)
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	3301      	adds	r3, #1
 800356a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	fa22 f303 	lsr.w	r3, r2, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	f47f ae88 	bne.w	800328c <HAL_GPIO_Init+0x10>
  }
}
 800357c:	bf00      	nop
 800357e:	371c      	adds	r7, #28
 8003580:	46bd      	mov	sp, r7
 8003582:	bc80      	pop	{r7}
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	40023800 	.word	0x40023800
 800358c:	40013800 	.word	0x40013800
 8003590:	40020000 	.word	0x40020000
 8003594:	40020400 	.word	0x40020400
 8003598:	40020800 	.word	0x40020800
 800359c:	40020c00 	.word	0x40020c00
 80035a0:	40021000 	.word	0x40021000
 80035a4:	40021400 	.word	0x40021400
 80035a8:	40021800 	.word	0x40021800
 80035ac:	40021c00 	.word	0x40021c00
 80035b0:	40022000 	.word	0x40022000
 80035b4:	40013c00 	.word	0x40013c00

080035b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	460b      	mov	r3, r1
 80035c2:	807b      	strh	r3, [r7, #2]
 80035c4:	4613      	mov	r3, r2
 80035c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035c8:	787b      	ldrb	r3, [r7, #1]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035ce:	887a      	ldrh	r2, [r7, #2]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035d4:	e003      	b.n	80035de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035d6:	887b      	ldrh	r3, [r7, #2]
 80035d8:	041a      	lsls	r2, r3, #16
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	619a      	str	r2, [r3, #24]
}
 80035de:	bf00      	nop
 80035e0:	370c      	adds	r7, #12
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bc80      	pop	{r7}
 80035e6:	4770      	bx	lr

080035e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b08a      	sub	sp, #40	; 0x28
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e237      	b.n	8003a6a <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	d050      	beq.n	80036a8 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003606:	4ba3      	ldr	r3, [pc, #652]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 030c 	and.w	r3, r3, #12
 800360e:	2b04      	cmp	r3, #4
 8003610:	d00c      	beq.n	800362c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003612:	4ba0      	ldr	r3, [pc, #640]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800361a:	2b08      	cmp	r3, #8
 800361c:	d112      	bne.n	8003644 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800361e:	4b9d      	ldr	r3, [pc, #628]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003626:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800362a:	d10b      	bne.n	8003644 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800362c:	4b99      	ldr	r3, [pc, #612]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d036      	beq.n	80036a6 <HAL_RCC_OscConfig+0xbe>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d132      	bne.n	80036a6 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e212      	b.n	8003a6a <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	4b93      	ldr	r3, [pc, #588]	; (8003898 <HAL_RCC_OscConfig+0x2b0>)
 800364a:	b2d2      	uxtb	r2, r2
 800364c:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d013      	beq.n	800367e <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003656:	f7fe fb7b 	bl	8001d50 <HAL_GetTick>
 800365a:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800365c:	e008      	b.n	8003670 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800365e:	f7fe fb77 	bl	8001d50 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	6a3b      	ldr	r3, [r7, #32]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b64      	cmp	r3, #100	; 0x64
 800366a:	d901      	bls.n	8003670 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e1fc      	b.n	8003a6a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003670:	4b88      	ldr	r3, [pc, #544]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d0f0      	beq.n	800365e <HAL_RCC_OscConfig+0x76>
 800367c:	e014      	b.n	80036a8 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800367e:	f7fe fb67 	bl	8001d50 <HAL_GetTick>
 8003682:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003684:	e008      	b.n	8003698 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003686:	f7fe fb63 	bl	8001d50 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	6a3b      	ldr	r3, [r7, #32]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b64      	cmp	r3, #100	; 0x64
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e1e8      	b.n	8003a6a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003698:	4b7e      	ldr	r3, [pc, #504]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1f0      	bne.n	8003686 <HAL_RCC_OscConfig+0x9e>
 80036a4:	e000      	b.n	80036a8 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036a6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d077      	beq.n	80037a4 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036b4:	4b77      	ldr	r3, [pc, #476]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f003 030c 	and.w	r3, r3, #12
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00b      	beq.n	80036d8 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036c0:	4b74      	ldr	r3, [pc, #464]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036c8:	2b08      	cmp	r3, #8
 80036ca:	d126      	bne.n	800371a <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036cc:	4b71      	ldr	r3, [pc, #452]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d120      	bne.n	800371a <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036d8:	4b6e      	ldr	r3, [pc, #440]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d005      	beq.n	80036f0 <HAL_RCC_OscConfig+0x108>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d001      	beq.n	80036f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e1bc      	b.n	8003a6a <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f0:	4b68      	ldr	r3, [pc, #416]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	21f8      	movs	r1, #248	; 0xf8
 80036fe:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003700:	69b9      	ldr	r1, [r7, #24]
 8003702:	fa91 f1a1 	rbit	r1, r1
 8003706:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003708:	6979      	ldr	r1, [r7, #20]
 800370a:	fab1 f181 	clz	r1, r1
 800370e:	b2c9      	uxtb	r1, r1
 8003710:	408b      	lsls	r3, r1
 8003712:	4960      	ldr	r1, [pc, #384]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 8003714:	4313      	orrs	r3, r2
 8003716:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003718:	e044      	b.n	80037a4 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d02a      	beq.n	8003778 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003722:	4b5e      	ldr	r3, [pc, #376]	; (800389c <HAL_RCC_OscConfig+0x2b4>)
 8003724:	2201      	movs	r2, #1
 8003726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003728:	f7fe fb12 	bl	8001d50 <HAL_GetTick>
 800372c:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003730:	f7fe fb0e 	bl	8001d50 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	6a3b      	ldr	r3, [r7, #32]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b02      	cmp	r3, #2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e193      	b.n	8003a6a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003742:	4b54      	ldr	r3, [pc, #336]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d0f0      	beq.n	8003730 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800374e:	4b51      	ldr	r3, [pc, #324]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	21f8      	movs	r1, #248	; 0xf8
 800375c:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375e:	6939      	ldr	r1, [r7, #16]
 8003760:	fa91 f1a1 	rbit	r1, r1
 8003764:	60f9      	str	r1, [r7, #12]
  return result;
 8003766:	68f9      	ldr	r1, [r7, #12]
 8003768:	fab1 f181 	clz	r1, r1
 800376c:	b2c9      	uxtb	r1, r1
 800376e:	408b      	lsls	r3, r1
 8003770:	4948      	ldr	r1, [pc, #288]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 8003772:	4313      	orrs	r3, r2
 8003774:	600b      	str	r3, [r1, #0]
 8003776:	e015      	b.n	80037a4 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003778:	4b48      	ldr	r3, [pc, #288]	; (800389c <HAL_RCC_OscConfig+0x2b4>)
 800377a:	2200      	movs	r2, #0
 800377c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800377e:	f7fe fae7 	bl	8001d50 <HAL_GetTick>
 8003782:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003784:	e008      	b.n	8003798 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003786:	f7fe fae3 	bl	8001d50 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	6a3b      	ldr	r3, [r7, #32]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b02      	cmp	r3, #2
 8003792:	d901      	bls.n	8003798 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e168      	b.n	8003a6a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003798:	4b3e      	ldr	r3, [pc, #248]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0302 	and.w	r3, r3, #2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1f0      	bne.n	8003786 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0308 	and.w	r3, r3, #8
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d030      	beq.n	8003812 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	695b      	ldr	r3, [r3, #20]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d016      	beq.n	80037e6 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037b8:	4b39      	ldr	r3, [pc, #228]	; (80038a0 <HAL_RCC_OscConfig+0x2b8>)
 80037ba:	2201      	movs	r2, #1
 80037bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037be:	f7fe fac7 	bl	8001d50 <HAL_GetTick>
 80037c2:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037c4:	e008      	b.n	80037d8 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037c6:	f7fe fac3 	bl	8001d50 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	6a3b      	ldr	r3, [r7, #32]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d901      	bls.n	80037d8 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e148      	b.n	8003a6a <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037d8:	4b2e      	ldr	r3, [pc, #184]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 80037da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d0f0      	beq.n	80037c6 <HAL_RCC_OscConfig+0x1de>
 80037e4:	e015      	b.n	8003812 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037e6:	4b2e      	ldr	r3, [pc, #184]	; (80038a0 <HAL_RCC_OscConfig+0x2b8>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ec:	f7fe fab0 	bl	8001d50 <HAL_GetTick>
 80037f0:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037f2:	e008      	b.n	8003806 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037f4:	f7fe faac 	bl	8001d50 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d901      	bls.n	8003806 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e131      	b.n	8003a6a <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003806:	4b23      	ldr	r3, [pc, #140]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 8003808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1f0      	bne.n	80037f4 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0304 	and.w	r3, r3, #4
 800381a:	2b00      	cmp	r3, #0
 800381c:	f000 8088 	beq.w	8003930 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003820:	2300      	movs	r3, #0
 8003822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003826:	4b1b      	ldr	r3, [pc, #108]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d110      	bne.n	8003854 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003832:	2300      	movs	r3, #0
 8003834:	60bb      	str	r3, [r7, #8]
 8003836:	4b17      	ldr	r3, [pc, #92]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 8003838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383a:	4a16      	ldr	r2, [pc, #88]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 800383c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003840:	6413      	str	r3, [r2, #64]	; 0x40
 8003842:	4b14      	ldr	r3, [pc, #80]	; (8003894 <HAL_RCC_OscConfig+0x2ac>)
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800384a:	60bb      	str	r3, [r7, #8]
 800384c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800384e:	2301      	movs	r3, #1
 8003850:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003854:	4b13      	ldr	r3, [pc, #76]	; (80038a4 <HAL_RCC_OscConfig+0x2bc>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a12      	ldr	r2, [pc, #72]	; (80038a4 <HAL_RCC_OscConfig+0x2bc>)
 800385a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800385e:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003860:	4b10      	ldr	r3, [pc, #64]	; (80038a4 <HAL_RCC_OscConfig+0x2bc>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003868:	2b00      	cmp	r3, #0
 800386a:	d123      	bne.n	80038b4 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800386c:	4b0d      	ldr	r3, [pc, #52]	; (80038a4 <HAL_RCC_OscConfig+0x2bc>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a0c      	ldr	r2, [pc, #48]	; (80038a4 <HAL_RCC_OscConfig+0x2bc>)
 8003872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003876:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003878:	f7fe fa6a 	bl	8001d50 <HAL_GetTick>
 800387c:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800387e:	e013      	b.n	80038a8 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003880:	f7fe fa66 	bl	8001d50 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	6a3b      	ldr	r3, [r7, #32]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d90c      	bls.n	80038a8 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e0eb      	b.n	8003a6a <HAL_RCC_OscConfig+0x482>
 8003892:	bf00      	nop
 8003894:	40023800 	.word	0x40023800
 8003898:	40023802 	.word	0x40023802
 800389c:	42470000 	.word	0x42470000
 80038a0:	42470e80 	.word	0x42470e80
 80038a4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038a8:	4b72      	ldr	r3, [pc, #456]	; (8003a74 <HAL_RCC_OscConfig+0x48c>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d0e5      	beq.n	8003880 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	4b6f      	ldr	r3, [pc, #444]	; (8003a78 <HAL_RCC_OscConfig+0x490>)
 80038ba:	b2d2      	uxtb	r2, r2
 80038bc:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d015      	beq.n	80038f2 <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038c6:	f7fe fa43 	bl	8001d50 <HAL_GetTick>
 80038ca:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038cc:	e00a      	b.n	80038e4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038ce:	f7fe fa3f 	bl	8001d50 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	6a3b      	ldr	r3, [r7, #32]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038dc:	4293      	cmp	r3, r2
 80038de:	d901      	bls.n	80038e4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e0c2      	b.n	8003a6a <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038e4:	4b65      	ldr	r3, [pc, #404]	; (8003a7c <HAL_RCC_OscConfig+0x494>)
 80038e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d0ee      	beq.n	80038ce <HAL_RCC_OscConfig+0x2e6>
 80038f0:	e014      	b.n	800391c <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038f2:	f7fe fa2d 	bl	8001d50 <HAL_GetTick>
 80038f6:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038f8:	e00a      	b.n	8003910 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038fa:	f7fe fa29 	bl	8001d50 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	f241 3288 	movw	r2, #5000	; 0x1388
 8003908:	4293      	cmp	r3, r2
 800390a:	d901      	bls.n	8003910 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e0ac      	b.n	8003a6a <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003910:	4b5a      	ldr	r3, [pc, #360]	; (8003a7c <HAL_RCC_OscConfig+0x494>)
 8003912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1ee      	bne.n	80038fa <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800391c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003920:	2b01      	cmp	r3, #1
 8003922:	d105      	bne.n	8003930 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003924:	4b55      	ldr	r3, [pc, #340]	; (8003a7c <HAL_RCC_OscConfig+0x494>)
 8003926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003928:	4a54      	ldr	r2, [pc, #336]	; (8003a7c <HAL_RCC_OscConfig+0x494>)
 800392a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800392e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	2b00      	cmp	r3, #0
 8003936:	f000 8097 	beq.w	8003a68 <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800393a:	4b50      	ldr	r3, [pc, #320]	; (8003a7c <HAL_RCC_OscConfig+0x494>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f003 030c 	and.w	r3, r3, #12
 8003942:	2b08      	cmp	r3, #8
 8003944:	d061      	beq.n	8003a0a <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	2b02      	cmp	r3, #2
 800394c:	d146      	bne.n	80039dc <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800394e:	4b4c      	ldr	r3, [pc, #304]	; (8003a80 <HAL_RCC_OscConfig+0x498>)
 8003950:	2200      	movs	r2, #0
 8003952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003954:	f7fe f9fc 	bl	8001d50 <HAL_GetTick>
 8003958:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800395c:	f7fe f9f8 	bl	8001d50 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	6a3b      	ldr	r3, [r7, #32]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b64      	cmp	r3, #100	; 0x64
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e07d      	b.n	8003a6a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800396e:	4b43      	ldr	r3, [pc, #268]	; (8003a7c <HAL_RCC_OscConfig+0x494>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1f0      	bne.n	800395c <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800397a:	4b40      	ldr	r3, [pc, #256]	; (8003a7c <HAL_RCC_OscConfig+0x494>)
 800397c:	685a      	ldr	r2, [r3, #4]
 800397e:	4b41      	ldr	r3, [pc, #260]	; (8003a84 <HAL_RCC_OscConfig+0x49c>)
 8003980:	4013      	ands	r3, r2
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	69d1      	ldr	r1, [r2, #28]
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6a12      	ldr	r2, [r2, #32]
 800398a:	4311      	orrs	r1, r2
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003990:	0192      	lsls	r2, r2, #6
 8003992:	4311      	orrs	r1, r2
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003998:	0612      	lsls	r2, r2, #24
 800399a:	4311      	orrs	r1, r2
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80039a0:	0852      	lsrs	r2, r2, #1
 80039a2:	3a01      	subs	r2, #1
 80039a4:	0412      	lsls	r2, r2, #16
 80039a6:	430a      	orrs	r2, r1
 80039a8:	4934      	ldr	r1, [pc, #208]	; (8003a7c <HAL_RCC_OscConfig+0x494>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039ae:	4b34      	ldr	r3, [pc, #208]	; (8003a80 <HAL_RCC_OscConfig+0x498>)
 80039b0:	2201      	movs	r2, #1
 80039b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b4:	f7fe f9cc 	bl	8001d50 <HAL_GetTick>
 80039b8:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ba:	e008      	b.n	80039ce <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039bc:	f7fe f9c8 	bl	8001d50 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b64      	cmp	r3, #100	; 0x64
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e04d      	b.n	8003a6a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ce:	4b2b      	ldr	r3, [pc, #172]	; (8003a7c <HAL_RCC_OscConfig+0x494>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d0f0      	beq.n	80039bc <HAL_RCC_OscConfig+0x3d4>
 80039da:	e045      	b.n	8003a68 <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039dc:	4b28      	ldr	r3, [pc, #160]	; (8003a80 <HAL_RCC_OscConfig+0x498>)
 80039de:	2200      	movs	r2, #0
 80039e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039e2:	f7fe f9b5 	bl	8001d50 <HAL_GetTick>
 80039e6:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039e8:	e008      	b.n	80039fc <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039ea:	f7fe f9b1 	bl	8001d50 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	6a3b      	ldr	r3, [r7, #32]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b64      	cmp	r3, #100	; 0x64
 80039f6:	d901      	bls.n	80039fc <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e036      	b.n	8003a6a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039fc:	4b1f      	ldr	r3, [pc, #124]	; (8003a7c <HAL_RCC_OscConfig+0x494>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1f0      	bne.n	80039ea <HAL_RCC_OscConfig+0x402>
 8003a08:	e02e      	b.n	8003a68 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d101      	bne.n	8003a16 <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e029      	b.n	8003a6a <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8003a16:	4b19      	ldr	r3, [pc, #100]	; (8003a7c <HAL_RCC_OscConfig+0x494>)
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	69db      	ldr	r3, [r3, #28]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d11c      	bne.n	8003a64 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d115      	bne.n	8003a64 <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	099b      	lsrs	r3, r3, #6
 8003a3c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d10d      	bne.n	8003a64 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d106      	bne.n	8003a64 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d001      	beq.n	8003a68 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e000      	b.n	8003a6a <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3728      	adds	r7, #40	; 0x28
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	40007000 	.word	0x40007000
 8003a78:	40023870 	.word	0x40023870
 8003a7c:	40023800 	.word	0x40023800
 8003a80:	42470060 	.word	0x42470060
 8003a84:	f0bc8000 	.word	0xf0bc8000

08003a88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d101      	bne.n	8003a9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e0d2      	b.n	8003c42 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a9c:	4b6b      	ldr	r3, [pc, #428]	; (8003c4c <HAL_RCC_ClockConfig+0x1c4>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 030f 	and.w	r3, r3, #15
 8003aa4:	683a      	ldr	r2, [r7, #0]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d90c      	bls.n	8003ac4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aaa:	4b68      	ldr	r3, [pc, #416]	; (8003c4c <HAL_RCC_ClockConfig+0x1c4>)
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	b2d2      	uxtb	r2, r2
 8003ab0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ab2:	4b66      	ldr	r3, [pc, #408]	; (8003c4c <HAL_RCC_ClockConfig+0x1c4>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 030f 	and.w	r3, r3, #15
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d001      	beq.n	8003ac4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e0be      	b.n	8003c42 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d020      	beq.n	8003b12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0304 	and.w	r3, r3, #4
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d005      	beq.n	8003ae8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003adc:	4b5c      	ldr	r3, [pc, #368]	; (8003c50 <HAL_RCC_ClockConfig+0x1c8>)
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	4a5b      	ldr	r2, [pc, #364]	; (8003c50 <HAL_RCC_ClockConfig+0x1c8>)
 8003ae2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ae6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0308 	and.w	r3, r3, #8
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d005      	beq.n	8003b00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8003af4:	4b56      	ldr	r3, [pc, #344]	; (8003c50 <HAL_RCC_ClockConfig+0x1c8>)
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	4a55      	ldr	r2, [pc, #340]	; (8003c50 <HAL_RCC_ClockConfig+0x1c8>)
 8003afa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003afe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b00:	4b53      	ldr	r3, [pc, #332]	; (8003c50 <HAL_RCC_ClockConfig+0x1c8>)
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	4950      	ldr	r1, [pc, #320]	; (8003c50 <HAL_RCC_ClockConfig+0x1c8>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d040      	beq.n	8003ba0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d107      	bne.n	8003b36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b26:	4b4a      	ldr	r3, [pc, #296]	; (8003c50 <HAL_RCC_ClockConfig+0x1c8>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d115      	bne.n	8003b5e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e085      	b.n	8003c42 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d107      	bne.n	8003b4e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b3e:	4b44      	ldr	r3, [pc, #272]	; (8003c50 <HAL_RCC_ClockConfig+0x1c8>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d109      	bne.n	8003b5e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e079      	b.n	8003c42 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b4e:	4b40      	ldr	r3, [pc, #256]	; (8003c50 <HAL_RCC_ClockConfig+0x1c8>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e071      	b.n	8003c42 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b5e:	4b3c      	ldr	r3, [pc, #240]	; (8003c50 <HAL_RCC_ClockConfig+0x1c8>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f023 0203 	bic.w	r2, r3, #3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	4939      	ldr	r1, [pc, #228]	; (8003c50 <HAL_RCC_ClockConfig+0x1c8>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b70:	f7fe f8ee 	bl	8001d50 <HAL_GetTick>
 8003b74:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b76:	e00a      	b.n	8003b8e <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b78:	f7fe f8ea 	bl	8001d50 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e059      	b.n	8003c42 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b8e:	4b30      	ldr	r3, [pc, #192]	; (8003c50 <HAL_RCC_ClockConfig+0x1c8>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f003 020c 	and.w	r2, r3, #12
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d1eb      	bne.n	8003b78 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ba0:	4b2a      	ldr	r3, [pc, #168]	; (8003c4c <HAL_RCC_ClockConfig+0x1c4>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 030f 	and.w	r3, r3, #15
 8003ba8:	683a      	ldr	r2, [r7, #0]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d20c      	bcs.n	8003bc8 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bae:	4b27      	ldr	r3, [pc, #156]	; (8003c4c <HAL_RCC_ClockConfig+0x1c4>)
 8003bb0:	683a      	ldr	r2, [r7, #0]
 8003bb2:	b2d2      	uxtb	r2, r2
 8003bb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bb6:	4b25      	ldr	r3, [pc, #148]	; (8003c4c <HAL_RCC_ClockConfig+0x1c4>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 030f 	and.w	r3, r3, #15
 8003bbe:	683a      	ldr	r2, [r7, #0]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d001      	beq.n	8003bc8 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e03c      	b.n	8003c42 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0304 	and.w	r3, r3, #4
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d008      	beq.n	8003be6 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bd4:	4b1e      	ldr	r3, [pc, #120]	; (8003c50 <HAL_RCC_ClockConfig+0x1c8>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	491b      	ldr	r1, [pc, #108]	; (8003c50 <HAL_RCC_ClockConfig+0x1c8>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0308 	and.w	r3, r3, #8
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d009      	beq.n	8003c06 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bf2:	4b17      	ldr	r3, [pc, #92]	; (8003c50 <HAL_RCC_ClockConfig+0x1c8>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	4913      	ldr	r1, [pc, #76]	; (8003c50 <HAL_RCC_ClockConfig+0x1c8>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8003c06:	f000 f82b 	bl	8003c60 <HAL_RCC_GetSysClockFreq>
 8003c0a:	4601      	mov	r1, r0
 8003c0c:	4b10      	ldr	r3, [pc, #64]	; (8003c50 <HAL_RCC_ClockConfig+0x1c8>)
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c14:	22f0      	movs	r2, #240	; 0xf0
 8003c16:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	fa92 f2a2 	rbit	r2, r2
 8003c1e:	60fa      	str	r2, [r7, #12]
  return result;
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	fab2 f282 	clz	r2, r2
 8003c26:	b2d2      	uxtb	r2, r2
 8003c28:	40d3      	lsrs	r3, r2
 8003c2a:	4a0a      	ldr	r2, [pc, #40]	; (8003c54 <HAL_RCC_ClockConfig+0x1cc>)
 8003c2c:	5cd3      	ldrb	r3, [r2, r3]
 8003c2e:	fa21 f303 	lsr.w	r3, r1, r3
 8003c32:	4a09      	ldr	r2, [pc, #36]	; (8003c58 <HAL_RCC_ClockConfig+0x1d0>)
 8003c34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c36:	4b09      	ldr	r3, [pc, #36]	; (8003c5c <HAL_RCC_ClockConfig+0x1d4>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7fd fefe 	bl	8001a3c <HAL_InitTick>

  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3718      	adds	r7, #24
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	40023c00 	.word	0x40023c00
 8003c50:	40023800 	.word	0x40023800
 8003c54:	08021bc8 	.word	0x08021bc8
 8003c58:	20000000 	.word	0x20000000
 8003c5c:	20000004 	.word	0x20000004

08003c60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c66:	2300      	movs	r3, #0
 8003c68:	607b      	str	r3, [r7, #4]
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	60fb      	str	r3, [r7, #12]
 8003c6e:	2300      	movs	r3, #0
 8003c70:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003c72:	2300      	movs	r3, #0
 8003c74:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c76:	4b63      	ldr	r3, [pc, #396]	; (8003e04 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f003 030c 	and.w	r3, r3, #12
 8003c7e:	2b04      	cmp	r3, #4
 8003c80:	d007      	beq.n	8003c92 <HAL_RCC_GetSysClockFreq+0x32>
 8003c82:	2b08      	cmp	r3, #8
 8003c84:	d008      	beq.n	8003c98 <HAL_RCC_GetSysClockFreq+0x38>
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f040 80b4 	bne.w	8003df4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c8c:	4b5e      	ldr	r3, [pc, #376]	; (8003e08 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003c8e:	60bb      	str	r3, [r7, #8]
       break;
 8003c90:	e0b3      	b.n	8003dfa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c92:	4b5e      	ldr	r3, [pc, #376]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003c94:	60bb      	str	r3, [r7, #8]
      break;
 8003c96:	e0b0      	b.n	8003dfa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c98:	4b5a      	ldr	r3, [pc, #360]	; (8003e04 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ca0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ca2:	4b58      	ldr	r3, [pc, #352]	; (8003e04 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d04a      	beq.n	8003d44 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cae:	4b55      	ldr	r3, [pc, #340]	; (8003e04 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	099b      	lsrs	r3, r3, #6
 8003cb4:	f04f 0400 	mov.w	r4, #0
 8003cb8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003cbc:	f04f 0200 	mov.w	r2, #0
 8003cc0:	ea03 0501 	and.w	r5, r3, r1
 8003cc4:	ea04 0602 	and.w	r6, r4, r2
 8003cc8:	4629      	mov	r1, r5
 8003cca:	4632      	mov	r2, r6
 8003ccc:	f04f 0300 	mov.w	r3, #0
 8003cd0:	f04f 0400 	mov.w	r4, #0
 8003cd4:	0154      	lsls	r4, r2, #5
 8003cd6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003cda:	014b      	lsls	r3, r1, #5
 8003cdc:	4619      	mov	r1, r3
 8003cde:	4622      	mov	r2, r4
 8003ce0:	1b49      	subs	r1, r1, r5
 8003ce2:	eb62 0206 	sbc.w	r2, r2, r6
 8003ce6:	f04f 0300 	mov.w	r3, #0
 8003cea:	f04f 0400 	mov.w	r4, #0
 8003cee:	0194      	lsls	r4, r2, #6
 8003cf0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003cf4:	018b      	lsls	r3, r1, #6
 8003cf6:	1a5b      	subs	r3, r3, r1
 8003cf8:	eb64 0402 	sbc.w	r4, r4, r2
 8003cfc:	f04f 0100 	mov.w	r1, #0
 8003d00:	f04f 0200 	mov.w	r2, #0
 8003d04:	00e2      	lsls	r2, r4, #3
 8003d06:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003d0a:	00d9      	lsls	r1, r3, #3
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	4614      	mov	r4, r2
 8003d10:	195b      	adds	r3, r3, r5
 8003d12:	eb44 0406 	adc.w	r4, r4, r6
 8003d16:	f04f 0100 	mov.w	r1, #0
 8003d1a:	f04f 0200 	mov.w	r2, #0
 8003d1e:	0262      	lsls	r2, r4, #9
 8003d20:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003d24:	0259      	lsls	r1, r3, #9
 8003d26:	460b      	mov	r3, r1
 8003d28:	4614      	mov	r4, r2
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	4621      	mov	r1, r4
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f04f 0400 	mov.w	r4, #0
 8003d34:	461a      	mov	r2, r3
 8003d36:	4623      	mov	r3, r4
 8003d38:	f7fd faa0 	bl	800127c <__aeabi_uldivmod>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	460c      	mov	r4, r1
 8003d40:	60fb      	str	r3, [r7, #12]
 8003d42:	e049      	b.n	8003dd8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d44:	4b2f      	ldr	r3, [pc, #188]	; (8003e04 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	099b      	lsrs	r3, r3, #6
 8003d4a:	f04f 0400 	mov.w	r4, #0
 8003d4e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003d52:	f04f 0200 	mov.w	r2, #0
 8003d56:	ea03 0501 	and.w	r5, r3, r1
 8003d5a:	ea04 0602 	and.w	r6, r4, r2
 8003d5e:	4629      	mov	r1, r5
 8003d60:	4632      	mov	r2, r6
 8003d62:	f04f 0300 	mov.w	r3, #0
 8003d66:	f04f 0400 	mov.w	r4, #0
 8003d6a:	0154      	lsls	r4, r2, #5
 8003d6c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003d70:	014b      	lsls	r3, r1, #5
 8003d72:	4619      	mov	r1, r3
 8003d74:	4622      	mov	r2, r4
 8003d76:	1b49      	subs	r1, r1, r5
 8003d78:	eb62 0206 	sbc.w	r2, r2, r6
 8003d7c:	f04f 0300 	mov.w	r3, #0
 8003d80:	f04f 0400 	mov.w	r4, #0
 8003d84:	0194      	lsls	r4, r2, #6
 8003d86:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003d8a:	018b      	lsls	r3, r1, #6
 8003d8c:	1a5b      	subs	r3, r3, r1
 8003d8e:	eb64 0402 	sbc.w	r4, r4, r2
 8003d92:	f04f 0100 	mov.w	r1, #0
 8003d96:	f04f 0200 	mov.w	r2, #0
 8003d9a:	00e2      	lsls	r2, r4, #3
 8003d9c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003da0:	00d9      	lsls	r1, r3, #3
 8003da2:	460b      	mov	r3, r1
 8003da4:	4614      	mov	r4, r2
 8003da6:	195b      	adds	r3, r3, r5
 8003da8:	eb44 0406 	adc.w	r4, r4, r6
 8003dac:	f04f 0100 	mov.w	r1, #0
 8003db0:	f04f 0200 	mov.w	r2, #0
 8003db4:	02a2      	lsls	r2, r4, #10
 8003db6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003dba:	0299      	lsls	r1, r3, #10
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	4614      	mov	r4, r2
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	4621      	mov	r1, r4
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f04f 0400 	mov.w	r4, #0
 8003dca:	461a      	mov	r2, r3
 8003dcc:	4623      	mov	r3, r4
 8003dce:	f7fd fa55 	bl	800127c <__aeabi_uldivmod>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	460c      	mov	r4, r1
 8003dd6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003dd8:	4b0a      	ldr	r3, [pc, #40]	; (8003e04 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	0c1b      	lsrs	r3, r3, #16
 8003dde:	f003 0303 	and.w	r3, r3, #3
 8003de2:	3301      	adds	r3, #1
 8003de4:	005b      	lsls	r3, r3, #1
 8003de6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df0:	60bb      	str	r3, [r7, #8]
      break;
 8003df2:	e002      	b.n	8003dfa <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003df4:	4b04      	ldr	r3, [pc, #16]	; (8003e08 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003df6:	60bb      	str	r3, [r7, #8]
      break;
 8003df8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dfa:	68bb      	ldr	r3, [r7, #8]
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3714      	adds	r7, #20
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e04:	40023800 	.word	0x40023800
 8003e08:	00f42400 	.word	0x00f42400
 8003e0c:	007a1200 	.word	0x007a1200

08003e10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e14:	4b02      	ldr	r3, [pc, #8]	; (8003e20 <HAL_RCC_GetHCLKFreq+0x10>)
 8003e16:	681b      	ldr	r3, [r3, #0]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bc80      	pop	{r7}
 8003e1e:	4770      	bx	lr
 8003e20:	20000000 	.word	0x20000000

08003e24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8003e2a:	f7ff fff1 	bl	8003e10 <HAL_RCC_GetHCLKFreq>
 8003e2e:	4601      	mov	r1, r0
 8003e30:	4b0b      	ldr	r3, [pc, #44]	; (8003e60 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003e38:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8003e3c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	fa92 f2a2 	rbit	r2, r2
 8003e44:	603a      	str	r2, [r7, #0]
  return result;
 8003e46:	683a      	ldr	r2, [r7, #0]
 8003e48:	fab2 f282 	clz	r2, r2
 8003e4c:	b2d2      	uxtb	r2, r2
 8003e4e:	40d3      	lsrs	r3, r2
 8003e50:	4a04      	ldr	r2, [pc, #16]	; (8003e64 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003e52:	5cd3      	ldrb	r3, [r2, r3]
 8003e54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3708      	adds	r7, #8
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	40023800 	.word	0x40023800
 8003e64:	08021bd8 	.word	0x08021bd8

08003e68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8003e6e:	f7ff ffcf 	bl	8003e10 <HAL_RCC_GetHCLKFreq>
 8003e72:	4601      	mov	r1, r0
 8003e74:	4b0b      	ldr	r3, [pc, #44]	; (8003ea4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003e7c:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8003e80:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	fa92 f2a2 	rbit	r2, r2
 8003e88:	603a      	str	r2, [r7, #0]
  return result;
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	fab2 f282 	clz	r2, r2
 8003e90:	b2d2      	uxtb	r2, r2
 8003e92:	40d3      	lsrs	r3, r2
 8003e94:	4a04      	ldr	r2, [pc, #16]	; (8003ea8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003e96:	5cd3      	ldrb	r3, [r2, r3]
 8003e98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3708      	adds	r7, #8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	40023800 	.word	0x40023800
 8003ea8:	08021bd8 	.word	0x08021bd8

08003eac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	220f      	movs	r2, #15
 8003eba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ebc:	4b11      	ldr	r3, [pc, #68]	; (8003f04 <HAL_RCC_GetClockConfig+0x58>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f003 0203 	and.w	r2, r3, #3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003ec8:	4b0e      	ldr	r3, [pc, #56]	; (8003f04 <HAL_RCC_GetClockConfig+0x58>)
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003ed4:	4b0b      	ldr	r3, [pc, #44]	; (8003f04 <HAL_RCC_GetClockConfig+0x58>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003ee0:	4b08      	ldr	r3, [pc, #32]	; (8003f04 <HAL_RCC_GetClockConfig+0x58>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	08db      	lsrs	r3, r3, #3
 8003ee6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003eee:	4b06      	ldr	r3, [pc, #24]	; (8003f08 <HAL_RCC_GetClockConfig+0x5c>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 020f 	and.w	r2, r3, #15
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	601a      	str	r2, [r3, #0]
}
 8003efa:	bf00      	nop
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bc80      	pop	{r7}
 8003f02:	4770      	bx	lr
 8003f04:	40023800 	.word	0x40023800
 8003f08:	40023c00 	.word	0x40023c00

08003f0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e041      	b.n	8003fa2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d106      	bne.n	8003f38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f839 	bl	8003faa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	3304      	adds	r3, #4
 8003f48:	4619      	mov	r1, r3
 8003f4a:	4610      	mov	r0, r2
 8003f4c:	f000 f9d0 	bl	80042f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003faa:	b480      	push	{r7}
 8003fac:	b083      	sub	sp, #12
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003fb2:	bf00      	nop
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bc80      	pop	{r7}
 8003fba:	4770      	bx	lr

08003fbc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d001      	beq.n	8003fd4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e04e      	b.n	8004072 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68da      	ldr	r2, [r3, #12]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f042 0201 	orr.w	r2, r2, #1
 8003fea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a22      	ldr	r2, [pc, #136]	; (800407c <HAL_TIM_Base_Start_IT+0xc0>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d022      	beq.n	800403c <HAL_TIM_Base_Start_IT+0x80>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ffe:	d01d      	beq.n	800403c <HAL_TIM_Base_Start_IT+0x80>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a1e      	ldr	r2, [pc, #120]	; (8004080 <HAL_TIM_Base_Start_IT+0xc4>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d018      	beq.n	800403c <HAL_TIM_Base_Start_IT+0x80>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a1d      	ldr	r2, [pc, #116]	; (8004084 <HAL_TIM_Base_Start_IT+0xc8>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d013      	beq.n	800403c <HAL_TIM_Base_Start_IT+0x80>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a1b      	ldr	r2, [pc, #108]	; (8004088 <HAL_TIM_Base_Start_IT+0xcc>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d00e      	beq.n	800403c <HAL_TIM_Base_Start_IT+0x80>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a1a      	ldr	r2, [pc, #104]	; (800408c <HAL_TIM_Base_Start_IT+0xd0>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d009      	beq.n	800403c <HAL_TIM_Base_Start_IT+0x80>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a18      	ldr	r2, [pc, #96]	; (8004090 <HAL_TIM_Base_Start_IT+0xd4>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d004      	beq.n	800403c <HAL_TIM_Base_Start_IT+0x80>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a17      	ldr	r2, [pc, #92]	; (8004094 <HAL_TIM_Base_Start_IT+0xd8>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d111      	bne.n	8004060 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f003 0307 	and.w	r3, r3, #7
 8004046:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2b06      	cmp	r3, #6
 800404c:	d010      	beq.n	8004070 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f042 0201 	orr.w	r2, r2, #1
 800405c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800405e:	e007      	b.n	8004070 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f042 0201 	orr.w	r2, r2, #1
 800406e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3714      	adds	r7, #20
 8004076:	46bd      	mov	sp, r7
 8004078:	bc80      	pop	{r7}
 800407a:	4770      	bx	lr
 800407c:	40010000 	.word	0x40010000
 8004080:	40000400 	.word	0x40000400
 8004084:	40000800 	.word	0x40000800
 8004088:	40000c00 	.word	0x40000c00
 800408c:	40010400 	.word	0x40010400
 8004090:	40014000 	.word	0x40014000
 8004094:	40001800 	.word	0x40001800

08004098 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d122      	bne.n	80040f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d11b      	bne.n	80040f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f06f 0202 	mvn.w	r2, #2
 80040c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	f003 0303 	and.w	r3, r3, #3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d003      	beq.n	80040e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 f8ed 	bl	80042ba <HAL_TIM_IC_CaptureCallback>
 80040e0:	e005      	b.n	80040ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f8e0 	bl	80042a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f000 f8ef 	bl	80042cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	f003 0304 	and.w	r3, r3, #4
 80040fe:	2b04      	cmp	r3, #4
 8004100:	d122      	bne.n	8004148 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	f003 0304 	and.w	r3, r3, #4
 800410c:	2b04      	cmp	r3, #4
 800410e:	d11b      	bne.n	8004148 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f06f 0204 	mvn.w	r2, #4
 8004118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2202      	movs	r2, #2
 800411e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800412a:	2b00      	cmp	r3, #0
 800412c:	d003      	beq.n	8004136 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f8c3 	bl	80042ba <HAL_TIM_IC_CaptureCallback>
 8004134:	e005      	b.n	8004142 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f8b6 	bl	80042a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 f8c5 	bl	80042cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	f003 0308 	and.w	r3, r3, #8
 8004152:	2b08      	cmp	r3, #8
 8004154:	d122      	bne.n	800419c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	f003 0308 	and.w	r3, r3, #8
 8004160:	2b08      	cmp	r3, #8
 8004162:	d11b      	bne.n	800419c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f06f 0208 	mvn.w	r2, #8
 800416c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2204      	movs	r2, #4
 8004172:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	69db      	ldr	r3, [r3, #28]
 800417a:	f003 0303 	and.w	r3, r3, #3
 800417e:	2b00      	cmp	r3, #0
 8004180:	d003      	beq.n	800418a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 f899 	bl	80042ba <HAL_TIM_IC_CaptureCallback>
 8004188:	e005      	b.n	8004196 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f88c 	bl	80042a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f000 f89b 	bl	80042cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	f003 0310 	and.w	r3, r3, #16
 80041a6:	2b10      	cmp	r3, #16
 80041a8:	d122      	bne.n	80041f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	f003 0310 	and.w	r3, r3, #16
 80041b4:	2b10      	cmp	r3, #16
 80041b6:	d11b      	bne.n	80041f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f06f 0210 	mvn.w	r2, #16
 80041c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2208      	movs	r2, #8
 80041c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d003      	beq.n	80041de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 f86f 	bl	80042ba <HAL_TIM_IC_CaptureCallback>
 80041dc:	e005      	b.n	80041ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f862 	bl	80042a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f000 f871 	bl	80042cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d10e      	bne.n	800421c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	f003 0301 	and.w	r3, r3, #1
 8004208:	2b01      	cmp	r3, #1
 800420a:	d107      	bne.n	800421c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f06f 0201 	mvn.w	r2, #1
 8004214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f7fd fb76 	bl	8001908 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004226:	2b80      	cmp	r3, #128	; 0x80
 8004228:	d10e      	bne.n	8004248 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004234:	2b80      	cmp	r3, #128	; 0x80
 8004236:	d107      	bne.n	8004248 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004240:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 f8fb 	bl	800443e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004252:	2b40      	cmp	r3, #64	; 0x40
 8004254:	d10e      	bne.n	8004274 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004260:	2b40      	cmp	r3, #64	; 0x40
 8004262:	d107      	bne.n	8004274 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800426c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f835 	bl	80042de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	f003 0320 	and.w	r3, r3, #32
 800427e:	2b20      	cmp	r3, #32
 8004280:	d10e      	bne.n	80042a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	f003 0320 	and.w	r3, r3, #32
 800428c:	2b20      	cmp	r3, #32
 800428e:	d107      	bne.n	80042a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f06f 0220 	mvn.w	r2, #32
 8004298:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 f8c6 	bl	800442c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042a0:	bf00      	nop
 80042a2:	3708      	adds	r7, #8
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bc80      	pop	{r7}
 80042b8:	4770      	bx	lr

080042ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b083      	sub	sp, #12
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042c2:	bf00      	nop
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bc80      	pop	{r7}
 80042ca:	4770      	bx	lr

080042cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	bc80      	pop	{r7}
 80042dc:	4770      	bx	lr

080042de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042de:	b480      	push	{r7}
 80042e0:	b083      	sub	sp, #12
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042e6:	bf00      	nop
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bc80      	pop	{r7}
 80042ee:	4770      	bx	lr

080042f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a3f      	ldr	r2, [pc, #252]	; (8004400 <TIM_Base_SetConfig+0x110>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d013      	beq.n	8004330 <TIM_Base_SetConfig+0x40>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800430e:	d00f      	beq.n	8004330 <TIM_Base_SetConfig+0x40>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a3c      	ldr	r2, [pc, #240]	; (8004404 <TIM_Base_SetConfig+0x114>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d00b      	beq.n	8004330 <TIM_Base_SetConfig+0x40>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a3b      	ldr	r2, [pc, #236]	; (8004408 <TIM_Base_SetConfig+0x118>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d007      	beq.n	8004330 <TIM_Base_SetConfig+0x40>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a3a      	ldr	r2, [pc, #232]	; (800440c <TIM_Base_SetConfig+0x11c>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d003      	beq.n	8004330 <TIM_Base_SetConfig+0x40>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a39      	ldr	r2, [pc, #228]	; (8004410 <TIM_Base_SetConfig+0x120>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d108      	bne.n	8004342 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004336:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	4313      	orrs	r3, r2
 8004340:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a2e      	ldr	r2, [pc, #184]	; (8004400 <TIM_Base_SetConfig+0x110>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d02b      	beq.n	80043a2 <TIM_Base_SetConfig+0xb2>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004350:	d027      	beq.n	80043a2 <TIM_Base_SetConfig+0xb2>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a2b      	ldr	r2, [pc, #172]	; (8004404 <TIM_Base_SetConfig+0x114>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d023      	beq.n	80043a2 <TIM_Base_SetConfig+0xb2>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a2a      	ldr	r2, [pc, #168]	; (8004408 <TIM_Base_SetConfig+0x118>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d01f      	beq.n	80043a2 <TIM_Base_SetConfig+0xb2>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a29      	ldr	r2, [pc, #164]	; (800440c <TIM_Base_SetConfig+0x11c>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d01b      	beq.n	80043a2 <TIM_Base_SetConfig+0xb2>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a28      	ldr	r2, [pc, #160]	; (8004410 <TIM_Base_SetConfig+0x120>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d017      	beq.n	80043a2 <TIM_Base_SetConfig+0xb2>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a27      	ldr	r2, [pc, #156]	; (8004414 <TIM_Base_SetConfig+0x124>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d013      	beq.n	80043a2 <TIM_Base_SetConfig+0xb2>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a26      	ldr	r2, [pc, #152]	; (8004418 <TIM_Base_SetConfig+0x128>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d00f      	beq.n	80043a2 <TIM_Base_SetConfig+0xb2>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a25      	ldr	r2, [pc, #148]	; (800441c <TIM_Base_SetConfig+0x12c>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d00b      	beq.n	80043a2 <TIM_Base_SetConfig+0xb2>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a24      	ldr	r2, [pc, #144]	; (8004420 <TIM_Base_SetConfig+0x130>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d007      	beq.n	80043a2 <TIM_Base_SetConfig+0xb2>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a23      	ldr	r2, [pc, #140]	; (8004424 <TIM_Base_SetConfig+0x134>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d003      	beq.n	80043a2 <TIM_Base_SetConfig+0xb2>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a22      	ldr	r2, [pc, #136]	; (8004428 <TIM_Base_SetConfig+0x138>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d108      	bne.n	80043b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	68fa      	ldr	r2, [r7, #12]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	4313      	orrs	r3, r2
 80043c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a09      	ldr	r2, [pc, #36]	; (8004400 <TIM_Base_SetConfig+0x110>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d003      	beq.n	80043e8 <TIM_Base_SetConfig+0xf8>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a0b      	ldr	r2, [pc, #44]	; (8004410 <TIM_Base_SetConfig+0x120>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d103      	bne.n	80043f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	691a      	ldr	r2, [r3, #16]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	615a      	str	r2, [r3, #20]
}
 80043f6:	bf00      	nop
 80043f8:	3714      	adds	r7, #20
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bc80      	pop	{r7}
 80043fe:	4770      	bx	lr
 8004400:	40010000 	.word	0x40010000
 8004404:	40000400 	.word	0x40000400
 8004408:	40000800 	.word	0x40000800
 800440c:	40000c00 	.word	0x40000c00
 8004410:	40010400 	.word	0x40010400
 8004414:	40014000 	.word	0x40014000
 8004418:	40014400 	.word	0x40014400
 800441c:	40014800 	.word	0x40014800
 8004420:	40001800 	.word	0x40001800
 8004424:	40001c00 	.word	0x40001c00
 8004428:	40002000 	.word	0x40002000

0800442c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	bc80      	pop	{r7}
 800443c:	4770      	bx	lr

0800443e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800443e:	b480      	push	{r7}
 8004440:	b083      	sub	sp, #12
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004446:	bf00      	nop
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	bc80      	pop	{r7}
 800444e:	4770      	bx	lr

08004450 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e03f      	b.n	80044e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004468:	b2db      	uxtb	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d106      	bne.n	800447c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f7fd fa98 	bl	80019ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2224      	movs	r2, #36	; 0x24
 8004480:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68da      	ldr	r2, [r3, #12]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004492:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 f829 	bl	80044ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	691a      	ldr	r2, [r3, #16]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	695a      	ldr	r2, [r3, #20]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68da      	ldr	r2, [r3, #12]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2220      	movs	r2, #32
 80044d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2220      	movs	r2, #32
 80044dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3708      	adds	r7, #8
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
	...

080044ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68da      	ldr	r2, [r3, #12]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	430a      	orrs	r2, r1
 8004508:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	689a      	ldr	r2, [r3, #8]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	431a      	orrs	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	431a      	orrs	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	69db      	ldr	r3, [r3, #28]
 800451e:	4313      	orrs	r3, r2
 8004520:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800452c:	f023 030c 	bic.w	r3, r3, #12
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	6812      	ldr	r2, [r2, #0]
 8004534:	68b9      	ldr	r1, [r7, #8]
 8004536:	430b      	orrs	r3, r1
 8004538:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	695b      	ldr	r3, [r3, #20]
 8004540:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	699a      	ldr	r2, [r3, #24]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	430a      	orrs	r2, r1
 800454e:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a57      	ldr	r2, [pc, #348]	; (80046b4 <UART_SetConfig+0x1c8>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d004      	beq.n	8004564 <UART_SetConfig+0x78>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a56      	ldr	r2, [pc, #344]	; (80046b8 <UART_SetConfig+0x1cc>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d103      	bne.n	800456c <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004564:	f7ff fc80 	bl	8003e68 <HAL_RCC_GetPCLK2Freq>
 8004568:	60f8      	str	r0, [r7, #12]
 800456a:	e002      	b.n	8004572 <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800456c:	f7ff fc5a 	bl	8003e24 <HAL_RCC_GetPCLK1Freq>
 8004570:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	69db      	ldr	r3, [r3, #28]
 8004576:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800457a:	d14c      	bne.n	8004616 <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	4613      	mov	r3, r2
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	4413      	add	r3, r2
 8004584:	009a      	lsls	r2, r3, #2
 8004586:	441a      	add	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	005b      	lsls	r3, r3, #1
 800458e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004592:	4a4a      	ldr	r2, [pc, #296]	; (80046bc <UART_SetConfig+0x1d0>)
 8004594:	fba2 2303 	umull	r2, r3, r2, r3
 8004598:	095b      	lsrs	r3, r3, #5
 800459a:	0119      	lsls	r1, r3, #4
 800459c:	68fa      	ldr	r2, [r7, #12]
 800459e:	4613      	mov	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4413      	add	r3, r2
 80045a4:	009a      	lsls	r2, r3, #2
 80045a6:	441a      	add	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	005b      	lsls	r3, r3, #1
 80045ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80045b2:	4b42      	ldr	r3, [pc, #264]	; (80046bc <UART_SetConfig+0x1d0>)
 80045b4:	fba3 0302 	umull	r0, r3, r3, r2
 80045b8:	095b      	lsrs	r3, r3, #5
 80045ba:	2064      	movs	r0, #100	; 0x64
 80045bc:	fb00 f303 	mul.w	r3, r0, r3
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	00db      	lsls	r3, r3, #3
 80045c4:	3332      	adds	r3, #50	; 0x32
 80045c6:	4a3d      	ldr	r2, [pc, #244]	; (80046bc <UART_SetConfig+0x1d0>)
 80045c8:	fba2 2303 	umull	r2, r3, r2, r3
 80045cc:	095b      	lsrs	r3, r3, #5
 80045ce:	005b      	lsls	r3, r3, #1
 80045d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045d4:	4419      	add	r1, r3
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	4613      	mov	r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4413      	add	r3, r2
 80045de:	009a      	lsls	r2, r3, #2
 80045e0:	441a      	add	r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	005b      	lsls	r3, r3, #1
 80045e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80045ec:	4b33      	ldr	r3, [pc, #204]	; (80046bc <UART_SetConfig+0x1d0>)
 80045ee:	fba3 0302 	umull	r0, r3, r3, r2
 80045f2:	095b      	lsrs	r3, r3, #5
 80045f4:	2064      	movs	r0, #100	; 0x64
 80045f6:	fb00 f303 	mul.w	r3, r0, r3
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	00db      	lsls	r3, r3, #3
 80045fe:	3332      	adds	r3, #50	; 0x32
 8004600:	4a2e      	ldr	r2, [pc, #184]	; (80046bc <UART_SetConfig+0x1d0>)
 8004602:	fba2 2303 	umull	r2, r3, r2, r3
 8004606:	095b      	lsrs	r3, r3, #5
 8004608:	f003 0207 	and.w	r2, r3, #7
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	440a      	add	r2, r1
 8004612:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004614:	e04a      	b.n	80046ac <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	4613      	mov	r3, r2
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	4413      	add	r3, r2
 800461e:	009a      	lsls	r2, r3, #2
 8004620:	441a      	add	r2, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	fbb2 f3f3 	udiv	r3, r2, r3
 800462c:	4a23      	ldr	r2, [pc, #140]	; (80046bc <UART_SetConfig+0x1d0>)
 800462e:	fba2 2303 	umull	r2, r3, r2, r3
 8004632:	095b      	lsrs	r3, r3, #5
 8004634:	0119      	lsls	r1, r3, #4
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	4613      	mov	r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	4413      	add	r3, r2
 800463e:	009a      	lsls	r2, r3, #2
 8004640:	441a      	add	r2, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	fbb2 f2f3 	udiv	r2, r2, r3
 800464c:	4b1b      	ldr	r3, [pc, #108]	; (80046bc <UART_SetConfig+0x1d0>)
 800464e:	fba3 0302 	umull	r0, r3, r3, r2
 8004652:	095b      	lsrs	r3, r3, #5
 8004654:	2064      	movs	r0, #100	; 0x64
 8004656:	fb00 f303 	mul.w	r3, r0, r3
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	011b      	lsls	r3, r3, #4
 800465e:	3332      	adds	r3, #50	; 0x32
 8004660:	4a16      	ldr	r2, [pc, #88]	; (80046bc <UART_SetConfig+0x1d0>)
 8004662:	fba2 2303 	umull	r2, r3, r2, r3
 8004666:	095b      	lsrs	r3, r3, #5
 8004668:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800466c:	4419      	add	r1, r3
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	4613      	mov	r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	4413      	add	r3, r2
 8004676:	009a      	lsls	r2, r3, #2
 8004678:	441a      	add	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	fbb2 f2f3 	udiv	r2, r2, r3
 8004684:	4b0d      	ldr	r3, [pc, #52]	; (80046bc <UART_SetConfig+0x1d0>)
 8004686:	fba3 0302 	umull	r0, r3, r3, r2
 800468a:	095b      	lsrs	r3, r3, #5
 800468c:	2064      	movs	r0, #100	; 0x64
 800468e:	fb00 f303 	mul.w	r3, r0, r3
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	011b      	lsls	r3, r3, #4
 8004696:	3332      	adds	r3, #50	; 0x32
 8004698:	4a08      	ldr	r2, [pc, #32]	; (80046bc <UART_SetConfig+0x1d0>)
 800469a:	fba2 2303 	umull	r2, r3, r2, r3
 800469e:	095b      	lsrs	r3, r3, #5
 80046a0:	f003 020f 	and.w	r2, r3, #15
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	440a      	add	r2, r1
 80046aa:	609a      	str	r2, [r3, #8]
}
 80046ac:	bf00      	nop
 80046ae:	3710      	adds	r7, #16
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	40011000 	.word	0x40011000
 80046b8:	40011400 	.word	0x40011400
 80046bc:	51eb851f 	.word	0x51eb851f

080046c0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80046c0:	b5b0      	push	{r4, r5, r7, lr}
 80046c2:	b08e      	sub	sp, #56	; 0x38
 80046c4:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80046c6:	2100      	movs	r1, #0
 80046c8:	2000      	movs	r0, #0
 80046ca:	f004 f965 	bl	8008998 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0x0A01A8C0;
 80046ce:	4b2b      	ldr	r3, [pc, #172]	; (800477c <MX_LWIP_Init+0xbc>)
 80046d0:	4a2b      	ldr	r2, [pc, #172]	; (8004780 <MX_LWIP_Init+0xc0>)
 80046d2:	601a      	str	r2, [r3, #0]
  netmask.addr = 0x00FFFFFF;
 80046d4:	4b2b      	ldr	r3, [pc, #172]	; (8004784 <MX_LWIP_Init+0xc4>)
 80046d6:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80046da:	601a      	str	r2, [r3, #0]
  gw.addr = 0x0101A8C0;
 80046dc:	4b2a      	ldr	r3, [pc, #168]	; (8004788 <MX_LWIP_Init+0xc8>)
 80046de:	4a2b      	ldr	r2, [pc, #172]	; (800478c <MX_LWIP_Init+0xcc>)
 80046e0:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80046e2:	4b2b      	ldr	r3, [pc, #172]	; (8004790 <MX_LWIP_Init+0xd0>)
 80046e4:	9302      	str	r3, [sp, #8]
 80046e6:	4b2b      	ldr	r3, [pc, #172]	; (8004794 <MX_LWIP_Init+0xd4>)
 80046e8:	9301      	str	r3, [sp, #4]
 80046ea:	2300      	movs	r3, #0
 80046ec:	9300      	str	r3, [sp, #0]
 80046ee:	4b26      	ldr	r3, [pc, #152]	; (8004788 <MX_LWIP_Init+0xc8>)
 80046f0:	4a24      	ldr	r2, [pc, #144]	; (8004784 <MX_LWIP_Init+0xc4>)
 80046f2:	4922      	ldr	r1, [pc, #136]	; (800477c <MX_LWIP_Init+0xbc>)
 80046f4:	4828      	ldr	r0, [pc, #160]	; (8004798 <MX_LWIP_Init+0xd8>)
 80046f6:	f005 f8cb 	bl	8009890 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80046fa:	4827      	ldr	r0, [pc, #156]	; (8004798 <MX_LWIP_Init+0xd8>)
 80046fc:	f005 f9b0 	bl	8009a60 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004700:	4b25      	ldr	r3, [pc, #148]	; (8004798 <MX_LWIP_Init+0xd8>)
 8004702:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8004706:	089b      	lsrs	r3, r3, #2
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d003      	beq.n	800471a <MX_LWIP_Init+0x5a>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004712:	4821      	ldr	r0, [pc, #132]	; (8004798 <MX_LWIP_Init+0xd8>)
 8004714:	f005 f9b2 	bl	8009a7c <netif_set_up>
 8004718:	e002      	b.n	8004720 <MX_LWIP_Init+0x60>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800471a:	481f      	ldr	r0, [pc, #124]	; (8004798 <MX_LWIP_Init+0xd8>)
 800471c:	f005 f9f2 	bl	8009b04 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8004720:	491e      	ldr	r1, [pc, #120]	; (800479c <MX_LWIP_Init+0xdc>)
 8004722:	481d      	ldr	r0, [pc, #116]	; (8004798 <MX_LWIP_Init+0xd8>)
 8004724:	f005 fa5e 	bl	8009be4 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 8004728:	2300      	movs	r3, #0
 800472a:	623b      	str	r3, [r7, #32]
 800472c:	2300      	movs	r3, #0
 800472e:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8004730:	f107 0320 	add.w	r3, r7, #32
 8004734:	2101      	movs	r1, #1
 8004736:	4618      	mov	r0, r3
 8004738:	f000 feb6 	bl	80054a8 <osSemaphoreCreate>
 800473c:	4602      	mov	r2, r0
 800473e:	4b18      	ldr	r3, [pc, #96]	; (80047a0 <MX_LWIP_Init+0xe0>)
 8004740:	601a      	str	r2, [r3, #0]

  link_arg.netif = &gnetif;
 8004742:	4b18      	ldr	r3, [pc, #96]	; (80047a4 <MX_LWIP_Init+0xe4>)
 8004744:	4a14      	ldr	r2, [pc, #80]	; (8004798 <MX_LWIP_Init+0xd8>)
 8004746:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8004748:	4b15      	ldr	r3, [pc, #84]	; (80047a0 <MX_LWIP_Init+0xe0>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a15      	ldr	r2, [pc, #84]	; (80047a4 <MX_LWIP_Init+0xe4>)
 800474e:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8004750:	4b15      	ldr	r3, [pc, #84]	; (80047a8 <MX_LWIP_Init+0xe8>)
 8004752:	1d3c      	adds	r4, r7, #4
 8004754:	461d      	mov	r5, r3
 8004756:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004758:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800475a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800475e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 8004762:	1d3b      	adds	r3, r7, #4
 8004764:	490f      	ldr	r1, [pc, #60]	; (80047a4 <MX_LWIP_Init+0xe4>)
 8004766:	4618      	mov	r0, r3
 8004768:	f000 fcec 	bl	8005144 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800476c:	480a      	ldr	r0, [pc, #40]	; (8004798 <MX_LWIP_Init+0xd8>)
 800476e:	f00b fdcb 	bl	8010308 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004772:	bf00      	nop
 8004774:	3728      	adds	r7, #40	; 0x28
 8004776:	46bd      	mov	sp, r7
 8004778:	bdb0      	pop	{r4, r5, r7, pc}
 800477a:	bf00      	nop
 800477c:	20004e4c 	.word	0x20004e4c
 8004780:	0a01a8c0 	.word	0x0a01a8c0
 8004784:	20004e50 	.word	0x20004e50
 8004788:	20004e54 	.word	0x20004e54
 800478c:	0101a8c0 	.word	0x0101a8c0
 8004790:	080088c1 	.word	0x080088c1
 8004794:	08004ed9 	.word	0x08004ed9
 8004798:	20004e14 	.word	0x20004e14
 800479c:	08004fbd 	.word	0x08004fbd
 80047a0:	200008d0 	.word	0x200008d0
 80047a4:	20004e0c 	.word	0x20004e0c
 80047a8:	0801dff8 	.word	0x0801dff8

080047ac <ETH_PTPSubSecond2NanoSecond>:
#if LWIP_PTP
static void ETH_PTPStart(uint32_t UpdateMethod);
#endif

u32_t ETH_PTPSubSecond2NanoSecond(u32_t SubSecondValue)
{
 80047ac:	b490      	push	{r4, r7}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
	uint64_t val = SubSecondValue * 1000000000ll;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f04f 0400 	mov.w	r4, #0
 80047ba:	4a10      	ldr	r2, [pc, #64]	; (80047fc <ETH_PTPSubSecond2NanoSecond+0x50>)
 80047bc:	fb02 f104 	mul.w	r1, r2, r4
 80047c0:	2200      	movs	r2, #0
 80047c2:	fb02 f203 	mul.w	r2, r2, r3
 80047c6:	440a      	add	r2, r1
 80047c8:	490c      	ldr	r1, [pc, #48]	; (80047fc <ETH_PTPSubSecond2NanoSecond+0x50>)
 80047ca:	fba3 3401 	umull	r3, r4, r3, r1
 80047ce:	4422      	add	r2, r4
 80047d0:	4614      	mov	r4, r2
 80047d2:	e9c7 3402 	strd	r3, r4, [r7, #8]
	val >>= 31;
 80047d6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80047da:	f04f 0300 	mov.w	r3, #0
 80047de:	f04f 0400 	mov.w	r4, #0
 80047e2:	0fcb      	lsrs	r3, r1, #31
 80047e4:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
 80047e8:	0fd4      	lsrs	r4, r2, #31
 80047ea:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return val;
 80047ee:	68bb      	ldr	r3, [r7, #8]
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3710      	adds	r7, #16
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bc90      	pop	{r4, r7}
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	3b9aca00 	.word	0x3b9aca00

08004800 <ETH_PTPTime_GetTime>:
	val /= 1000000000;
	return val;
}

void ETH_PTPTime_GetTime(struct ptptime_t *timestamp)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
	timestamp->tv_nsec = ETH_PTPSubSecond2NanoSecond(
			ETH_GetPTPRegister(ETH_PTPTSLR_STSS));
 8004808:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800480c:	f7fd f892 	bl	8001934 <ETH_GetPTPRegister>
 8004810:	4603      	mov	r3, r0
	timestamp->tv_nsec = ETH_PTPSubSecond2NanoSecond(
 8004812:	4618      	mov	r0, r3
 8004814:	f7ff ffca 	bl	80047ac <ETH_PTPSubSecond2NanoSecond>
 8004818:	4603      	mov	r3, r0
 800481a:	461a      	mov	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	605a      	str	r2, [r3, #4]
	timestamp->tv_sec = ETH_GetPTPRegister(ETH_PTPTSHR_STS);
 8004820:	f04f 30ff 	mov.w	r0, #4294967295
 8004824:	f7fd f886 	bl	8001934 <ETH_GetPTPRegister>
 8004828:	4602      	mov	r2, r0
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	601a      	str	r2, [r3, #0]
}
 800482e:	bf00      	nop
 8004830:	3708      	adds	r7, #8
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
	...

08004838 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef *ethHandle)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b08e      	sub	sp, #56	; 0x38
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct =
 8004840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004844:	2200      	movs	r2, #0
 8004846:	601a      	str	r2, [r3, #0]
 8004848:	605a      	str	r2, [r3, #4]
 800484a:	609a      	str	r2, [r3, #8]
 800484c:	60da      	str	r2, [r3, #12]
 800484e:	611a      	str	r2, [r3, #16]
	{ 0 };
	if (ethHandle->Instance == ETH)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a64      	ldr	r2, [pc, #400]	; (80049e8 <HAL_ETH_MspInit+0x1b0>)
 8004856:	4293      	cmp	r3, r2
 8004858:	f040 80c2 	bne.w	80049e0 <HAL_ETH_MspInit+0x1a8>
	{
		/* USER CODE BEGIN ETH_MspInit 0 */

		/* USER CODE END ETH_MspInit 0 */
		/* Enable Peripheral clock */
		__HAL_RCC_ETH_CLK_ENABLE();
 800485c:	2300      	movs	r3, #0
 800485e:	623b      	str	r3, [r7, #32]
 8004860:	4b62      	ldr	r3, [pc, #392]	; (80049ec <HAL_ETH_MspInit+0x1b4>)
 8004862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004864:	4a61      	ldr	r2, [pc, #388]	; (80049ec <HAL_ETH_MspInit+0x1b4>)
 8004866:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800486a:	6313      	str	r3, [r2, #48]	; 0x30
 800486c:	4b5f      	ldr	r3, [pc, #380]	; (80049ec <HAL_ETH_MspInit+0x1b4>)
 800486e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004874:	623b      	str	r3, [r7, #32]
 8004876:	6a3b      	ldr	r3, [r7, #32]
 8004878:	2300      	movs	r3, #0
 800487a:	61fb      	str	r3, [r7, #28]
 800487c:	4b5b      	ldr	r3, [pc, #364]	; (80049ec <HAL_ETH_MspInit+0x1b4>)
 800487e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004880:	4a5a      	ldr	r2, [pc, #360]	; (80049ec <HAL_ETH_MspInit+0x1b4>)
 8004882:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004886:	6313      	str	r3, [r2, #48]	; 0x30
 8004888:	4b58      	ldr	r3, [pc, #352]	; (80049ec <HAL_ETH_MspInit+0x1b4>)
 800488a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004890:	61fb      	str	r3, [r7, #28]
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	2300      	movs	r3, #0
 8004896:	61bb      	str	r3, [r7, #24]
 8004898:	4b54      	ldr	r3, [pc, #336]	; (80049ec <HAL_ETH_MspInit+0x1b4>)
 800489a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489c:	4a53      	ldr	r2, [pc, #332]	; (80049ec <HAL_ETH_MspInit+0x1b4>)
 800489e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80048a2:	6313      	str	r3, [r2, #48]	; 0x30
 80048a4:	4b51      	ldr	r3, [pc, #324]	; (80049ec <HAL_ETH_MspInit+0x1b4>)
 80048a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048ac:	61bb      	str	r3, [r7, #24]
 80048ae:	69bb      	ldr	r3, [r7, #24]

		__HAL_RCC_GPIOC_CLK_ENABLE();
 80048b0:	2300      	movs	r3, #0
 80048b2:	617b      	str	r3, [r7, #20]
 80048b4:	4b4d      	ldr	r3, [pc, #308]	; (80049ec <HAL_ETH_MspInit+0x1b4>)
 80048b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b8:	4a4c      	ldr	r2, [pc, #304]	; (80049ec <HAL_ETH_MspInit+0x1b4>)
 80048ba:	f043 0304 	orr.w	r3, r3, #4
 80048be:	6313      	str	r3, [r2, #48]	; 0x30
 80048c0:	4b4a      	ldr	r3, [pc, #296]	; (80049ec <HAL_ETH_MspInit+0x1b4>)
 80048c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c4:	f003 0304 	and.w	r3, r3, #4
 80048c8:	617b      	str	r3, [r7, #20]
 80048ca:	697b      	ldr	r3, [r7, #20]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 80048cc:	2300      	movs	r3, #0
 80048ce:	613b      	str	r3, [r7, #16]
 80048d0:	4b46      	ldr	r3, [pc, #280]	; (80049ec <HAL_ETH_MspInit+0x1b4>)
 80048d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d4:	4a45      	ldr	r2, [pc, #276]	; (80049ec <HAL_ETH_MspInit+0x1b4>)
 80048d6:	f043 0301 	orr.w	r3, r3, #1
 80048da:	6313      	str	r3, [r2, #48]	; 0x30
 80048dc:	4b43      	ldr	r3, [pc, #268]	; (80049ec <HAL_ETH_MspInit+0x1b4>)
 80048de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e0:	f003 0301 	and.w	r3, r3, #1
 80048e4:	613b      	str	r3, [r7, #16]
 80048e6:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80048e8:	2300      	movs	r3, #0
 80048ea:	60fb      	str	r3, [r7, #12]
 80048ec:	4b3f      	ldr	r3, [pc, #252]	; (80049ec <HAL_ETH_MspInit+0x1b4>)
 80048ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f0:	4a3e      	ldr	r2, [pc, #248]	; (80049ec <HAL_ETH_MspInit+0x1b4>)
 80048f2:	f043 0302 	orr.w	r3, r3, #2
 80048f6:	6313      	str	r3, [r2, #48]	; 0x30
 80048f8:	4b3c      	ldr	r3, [pc, #240]	; (80049ec <HAL_ETH_MspInit+0x1b4>)
 80048fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fc:	f003 0302 	and.w	r3, r3, #2
 8004900:	60fb      	str	r3, [r7, #12]
 8004902:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOG_CLK_ENABLE();
 8004904:	2300      	movs	r3, #0
 8004906:	60bb      	str	r3, [r7, #8]
 8004908:	4b38      	ldr	r3, [pc, #224]	; (80049ec <HAL_ETH_MspInit+0x1b4>)
 800490a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490c:	4a37      	ldr	r2, [pc, #220]	; (80049ec <HAL_ETH_MspInit+0x1b4>)
 800490e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004912:	6313      	str	r3, [r2, #48]	; 0x30
 8004914:	4b35      	ldr	r3, [pc, #212]	; (80049ec <HAL_ETH_MspInit+0x1b4>)
 8004916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800491c:	60bb      	str	r3, [r7, #8]
 800491e:	68bb      	ldr	r3, [r7, #8]
		 PC5     ------> ETH_RXD1
		 PB13     ------> ETH_TXD1
		 PG11     ------> ETH_TX_EN
		 PG13     ------> ETH_TXD0
		 */
		GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 8004920:	2332      	movs	r3, #50	; 0x32
 8004922:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004924:	2302      	movs	r3, #2
 8004926:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004928:	2300      	movs	r3, #0
 800492a:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800492c:	2303      	movs	r3, #3
 800492e:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004930:	230b      	movs	r3, #11
 8004932:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004934:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004938:	4619      	mov	r1, r3
 800493a:	482d      	ldr	r0, [pc, #180]	; (80049f0 <HAL_ETH_MspInit+0x1b8>)
 800493c:	f7fe fc9e 	bl	800327c <HAL_GPIO_Init>

		GPIO_InitStruct.Pin =
 8004940:	2386      	movs	r3, #134	; 0x86
 8004942:	627b      	str	r3, [r7, #36]	; 0x24
		RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004944:	2302      	movs	r3, #2
 8004946:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004948:	2300      	movs	r3, #0
 800494a:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800494c:	2303      	movs	r3, #3
 800494e:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004950:	230b      	movs	r3, #11
 8004952:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004958:	4619      	mov	r1, r3
 800495a:	4826      	ldr	r0, [pc, #152]	; (80049f4 <HAL_ETH_MspInit+0x1bc>)
 800495c:	f7fe fc8e 	bl	800327c <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8004960:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004964:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004966:	2302      	movs	r3, #2
 8004968:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800496a:	2300      	movs	r3, #0
 800496c:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800496e:	2303      	movs	r3, #3
 8004970:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004972:	230b      	movs	r3, #11
 8004974:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8004976:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800497a:	4619      	mov	r1, r3
 800497c:	481e      	ldr	r0, [pc, #120]	; (80049f8 <HAL_ETH_MspInit+0x1c0>)
 800497e:	f7fe fc7d 	bl	800327c <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = RMII_TX_EN_Pin | RMII_TXD0_Pin;
 8004982:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8004986:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004988:	2302      	movs	r3, #2
 800498a:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800498c:	2300      	movs	r3, #0
 800498e:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004990:	2303      	movs	r3, #3
 8004992:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8004994:	230b      	movs	r3, #11
 8004996:	637b      	str	r3, [r7, #52]	; 0x34
		HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800499c:	4619      	mov	r1, r3
 800499e:	4817      	ldr	r0, [pc, #92]	; (80049fc <HAL_ETH_MspInit+0x1c4>)
 80049a0:	f7fe fc6c 	bl	800327c <HAL_GPIO_Init>

		/* Peripheral interrupt init */
		HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80049a4:	2200      	movs	r2, #0
 80049a6:	2105      	movs	r1, #5
 80049a8:	203d      	movs	r0, #61	; 0x3d
 80049aa:	f7fd fab2 	bl	8001f12 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(ETH_IRQn);
 80049ae:	203d      	movs	r0, #61	; 0x3d
 80049b0:	f7fd facb 	bl	8001f4a <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN ETH_MspInit 1 */
		printf("Restarting PHY...\r\n");
 80049b4:	4812      	ldr	r0, [pc, #72]	; (8004a00 <HAL_ETH_MspInit+0x1c8>)
 80049b6:	f015 ff25 	bl	801a804 <puts>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80049ba:	2200      	movs	r2, #0
 80049bc:	2180      	movs	r1, #128	; 0x80
 80049be:	480e      	ldr	r0, [pc, #56]	; (80049f8 <HAL_ETH_MspInit+0x1c0>)
 80049c0:	f7fe fdfa 	bl	80035b8 <HAL_GPIO_WritePin>
		vTaskDelay(100);
 80049c4:	2064      	movs	r0, #100	; 0x64
 80049c6:	f002 f8bb 	bl	8006b40 <vTaskDelay>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80049ca:	2201      	movs	r2, #1
 80049cc:	2180      	movs	r1, #128	; 0x80
 80049ce:	480a      	ldr	r0, [pc, #40]	; (80049f8 <HAL_ETH_MspInit+0x1c0>)
 80049d0:	f7fe fdf2 	bl	80035b8 <HAL_GPIO_WritePin>
		vTaskDelay(100);
 80049d4:	2064      	movs	r0, #100	; 0x64
 80049d6:	f002 f8b3 	bl	8006b40 <vTaskDelay>
		printf("LAN8742 Initializing...\r\n");
 80049da:	480a      	ldr	r0, [pc, #40]	; (8004a04 <HAL_ETH_MspInit+0x1cc>)
 80049dc:	f015 ff12 	bl	801a804 <puts>
		/* USER CODE END ETH_MspInit 1 */
	}
}
 80049e0:	bf00      	nop
 80049e2:	3738      	adds	r7, #56	; 0x38
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	40028000 	.word	0x40028000
 80049ec:	40023800 	.word	0x40023800
 80049f0:	40020800 	.word	0x40020800
 80049f4:	40020000 	.word	0x40020000
 80049f8:	40020400 	.word	0x40020400
 80049fc:	40021800 	.word	0x40021800
 8004a00:	0801e014 	.word	0x0801e014
 8004a04:	0801e028 	.word	0x0801e028

08004a08 <HAL_ETH_RxCpltCallback>:
 * @brief  Ethernet Rx Transfer completed callback
 * @param  heth: ETH handle
 * @retval None
 */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(s_xSemaphore);
 8004a10:	4b04      	ldr	r3, [pc, #16]	; (8004a24 <HAL_ETH_RxCpltCallback+0x1c>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4618      	mov	r0, r3
 8004a16:	f000 fdc9 	bl	80055ac <osSemaphoreRelease>
}
 8004a1a:	bf00      	nop
 8004a1c:	3708      	adds	r7, #8
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	200008d4 	.word	0x200008d4

08004a28 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004a28:	b5b0      	push	{r4, r5, r7, lr}
 8004a2a:	b090      	sub	sp, #64	; 0x40
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
	uint32_t regvalue = 0;
 8004a30:	2300      	movs	r3, #0
 8004a32:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_StatusTypeDef hal_eth_init_status;

	/* Init ETH */

	uint8_t MACAddr[6];
	heth.Instance = ETH;
 8004a34:	4b60      	ldr	r3, [pc, #384]	; (8004bb8 <low_level_init+0x190>)
 8004a36:	4a61      	ldr	r2, [pc, #388]	; (8004bbc <low_level_init+0x194>)
 8004a38:	601a      	str	r2, [r3, #0]
	heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8004a3a:	4b5f      	ldr	r3, [pc, #380]	; (8004bb8 <low_level_init+0x190>)
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	605a      	str	r2, [r3, #4]
	heth.Init.Speed = ETH_SPEED_100M;
 8004a40:	4b5d      	ldr	r3, [pc, #372]	; (8004bb8 <low_level_init+0x190>)
 8004a42:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004a46:	609a      	str	r2, [r3, #8]
	heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8004a48:	4b5b      	ldr	r3, [pc, #364]	; (8004bb8 <low_level_init+0x190>)
 8004a4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a4e:	60da      	str	r2, [r3, #12]
	heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8004a50:	4b59      	ldr	r3, [pc, #356]	; (8004bb8 <low_level_init+0x190>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	821a      	strh	r2, [r3, #16]
	MACAddr[0] = 0x00;
 8004a56:	2300      	movs	r3, #0
 8004a58:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	MACAddr[1] = 0x80;
 8004a5c:	2380      	movs	r3, #128	; 0x80
 8004a5e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	MACAddr[2] = 0xE1;
 8004a62:	23e1      	movs	r3, #225	; 0xe1
 8004a64:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	MACAddr[3] = 0x00;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	MACAddr[4] = 0x00;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	MACAddr[5] = 0x01;
 8004a74:	2301      	movs	r3, #1
 8004a76:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	heth.Init.MACAddr = &MACAddr[0];
 8004a7a:	4a4f      	ldr	r2, [pc, #316]	; (8004bb8 <low_level_init+0x190>)
 8004a7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004a80:	6153      	str	r3, [r2, #20]
	heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8004a82:	4b4d      	ldr	r3, [pc, #308]	; (8004bb8 <low_level_init+0x190>)
 8004a84:	2201      	movs	r2, #1
 8004a86:	619a      	str	r2, [r3, #24]
	heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8004a88:	4b4b      	ldr	r3, [pc, #300]	; (8004bb8 <low_level_init+0x190>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	61da      	str	r2, [r3, #28]
	heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8004a8e:	4b4a      	ldr	r3, [pc, #296]	; (8004bb8 <low_level_init+0x190>)
 8004a90:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004a94:	621a      	str	r2, [r3, #32]

	/* USER CODE BEGIN MACADDRESS */

	/* USER CODE END MACADDRESS */

	hal_eth_init_status = HAL_ETH_Init(&heth);
 8004a96:	4848      	ldr	r0, [pc, #288]	; (8004bb8 <low_level_init+0x190>)
 8004a98:	f7fd fa66 	bl	8001f68 <HAL_ETH_Init>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (hal_eth_init_status == HAL_OK)
 8004aa2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d108      	bne.n	8004abc <low_level_init+0x94>
	{
		/* Set netif link flag */
		netif->flags |= NETIF_FLAG_LINK_UP;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8004ab0:	f043 0304 	orr.w	r3, r3, #4
 8004ab4:	b2da      	uxtb	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	}
	/* Initialize Tx Descriptors list: Chain Mode */
	HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8004abc:	2304      	movs	r3, #4
 8004abe:	4a40      	ldr	r2, [pc, #256]	; (8004bc0 <low_level_init+0x198>)
 8004ac0:	4940      	ldr	r1, [pc, #256]	; (8004bc4 <low_level_init+0x19c>)
 8004ac2:	483d      	ldr	r0, [pc, #244]	; (8004bb8 <low_level_init+0x190>)
 8004ac4:	f7fd fbde 	bl	8002284 <HAL_ETH_DMATxDescListInit>

	/* Initialize Rx Descriptors list: Chain Mode  */
	HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8004ac8:	2304      	movs	r3, #4
 8004aca:	4a3f      	ldr	r2, [pc, #252]	; (8004bc8 <low_level_init+0x1a0>)
 8004acc:	493f      	ldr	r1, [pc, #252]	; (8004bcc <low_level_init+0x1a4>)
 8004ace:	483a      	ldr	r0, [pc, #232]	; (8004bb8 <low_level_init+0x190>)
 8004ad0:	f7fd fc40 	bl	8002354 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

	/* set MAC hardware address length */
	netif->hwaddr_len = ETH_HWADDR_LEN;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2206      	movs	r2, #6
 8004ad8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	/* set MAC hardware address */
	netif->hwaddr[0] = heth.Init.MACAddr[0];
 8004adc:	4b36      	ldr	r3, [pc, #216]	; (8004bb8 <low_level_init+0x190>)
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	781a      	ldrb	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	netif->hwaddr[1] = heth.Init.MACAddr[1];
 8004ae8:	4b33      	ldr	r3, [pc, #204]	; (8004bb8 <low_level_init+0x190>)
 8004aea:	695b      	ldr	r3, [r3, #20]
 8004aec:	785a      	ldrb	r2, [r3, #1]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	netif->hwaddr[2] = heth.Init.MACAddr[2];
 8004af4:	4b30      	ldr	r3, [pc, #192]	; (8004bb8 <low_level_init+0x190>)
 8004af6:	695b      	ldr	r3, [r3, #20]
 8004af8:	789a      	ldrb	r2, [r3, #2]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	netif->hwaddr[3] = heth.Init.MACAddr[3];
 8004b00:	4b2d      	ldr	r3, [pc, #180]	; (8004bb8 <low_level_init+0x190>)
 8004b02:	695b      	ldr	r3, [r3, #20]
 8004b04:	78da      	ldrb	r2, [r3, #3]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	netif->hwaddr[4] = heth.Init.MACAddr[4];
 8004b0c:	4b2a      	ldr	r3, [pc, #168]	; (8004bb8 <low_level_init+0x190>)
 8004b0e:	695b      	ldr	r3, [r3, #20]
 8004b10:	791a      	ldrb	r2, [r3, #4]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	netif->hwaddr[5] = heth.Init.MACAddr[5];
 8004b18:	4b27      	ldr	r3, [pc, #156]	; (8004bb8 <low_level_init+0x190>)
 8004b1a:	695b      	ldr	r3, [r3, #20]
 8004b1c:	795a      	ldrb	r2, [r3, #5]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

	/* maximum transfer unit */
	netif->mtu = 1500;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004b2a:	855a      	strh	r2, [r3, #42]	; 0x2a

	/* Accept broadcast address and ARP traffic */
	/* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
#if LWIP_ARP
	netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8004b32:	f043 030a 	orr.w	r3, r3, #10
 8004b36:	b2da      	uxtb	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
#else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

	/* create a binary semaphore used for informing ethernetif of frame reception */
	osSemaphoreDef(SEM);
 8004b3e:	2300      	movs	r3, #0
 8004b40:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b42:	2300      	movs	r3, #0
 8004b44:	62fb      	str	r3, [r7, #44]	; 0x2c
	s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8004b46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b4a:	2101      	movs	r1, #1
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f000 fcab 	bl	80054a8 <osSemaphoreCreate>
 8004b52:	4602      	mov	r2, r0
 8004b54:	4b1e      	ldr	r3, [pc, #120]	; (8004bd0 <low_level_init+0x1a8>)
 8004b56:	601a      	str	r2, [r3, #0]

	/* create the task that handles the ETH_MAC */
	/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
	osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0,
 8004b58:	4b1e      	ldr	r3, [pc, #120]	; (8004bd4 <low_level_init+0x1ac>)
 8004b5a:	f107 040c 	add.w	r4, r7, #12
 8004b5e:	461d      	mov	r5, r3
 8004b60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b64:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004b68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			INTERFACE_THREAD_STACK_SIZE);
	osThreadCreate(osThread(EthIf), netif);
 8004b6c:	f107 030c 	add.w	r3, r7, #12
 8004b70:	6879      	ldr	r1, [r7, #4]
 8004b72:	4618      	mov	r0, r3
 8004b74:	f000 fae6 	bl	8005144 <osThreadCreate>
	/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
	/* Enable MAC and DMA transmission and reception */
	HAL_ETH_Start(&heth);
 8004b78:	480f      	ldr	r0, [pc, #60]	; (8004bb8 <low_level_init+0x190>)
 8004b7a:	f7fd ff0f 	bl	800299c <HAL_ETH_Start>
	/* USER CODE BEGIN PHY_PRE_CONFIG */

	/* USER CODE END PHY_PRE_CONFIG */

	/* Read Register Configuration */
	HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8004b7e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004b82:	461a      	mov	r2, r3
 8004b84:	211d      	movs	r1, #29
 8004b86:	480c      	ldr	r0, [pc, #48]	; (8004bb8 <low_level_init+0x190>)
 8004b88:	f7fd fe3a 	bl	8002800 <HAL_ETH_ReadPHYRegister>
	regvalue |= (PHY_ISFR_INT4);
 8004b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b8e:	f043 030b 	orr.w	r3, r3, #11
 8004b92:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Enable Interrupt on change of link status */
	HAL_ETH_WritePHYRegister(&heth, PHY_ISFR, regvalue);
 8004b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b96:	461a      	mov	r2, r3
 8004b98:	211d      	movs	r1, #29
 8004b9a:	4807      	ldr	r0, [pc, #28]	; (8004bb8 <low_level_init+0x190>)
 8004b9c:	f7fd fe98 	bl	80028d0 <HAL_ETH_WritePHYRegister>

	/* Read Register Configuration */
	HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8004ba0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	211d      	movs	r1, #29
 8004ba8:	4803      	ldr	r0, [pc, #12]	; (8004bb8 <low_level_init+0x190>)
 8004baa:	f7fd fe29 	bl	8002800 <HAL_ETH_ReadPHYRegister>
  /* Enable PTP Timestamping */
  ETH_PTPStart(ETH_PTP_FineUpdate);
  /* ETH_PTPStart(ETH_PTP_CoarseUpdate); */
#endif
	/* USER CODE END LOW_LEVEL_INIT */
}
 8004bae:	bf00      	nop
 8004bb0:	3740      	adds	r7, #64	; 0x40
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bdb0      	pop	{r4, r5, r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	20006728 	.word	0x20006728
 8004bbc:	40028000 	.word	0x40028000
 8004bc0:	20006770 	.word	0x20006770
 8004bc4:	20004e58 	.word	0x20004e58
 8004bc8:	20004ed8 	.word	0x20004ed8
 8004bcc:	200066a8 	.word	0x200066a8
 8004bd0:	200008d4 	.word	0x200008d4
 8004bd4:	0801e04c 	.word	0x0801e04c

08004bd8 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b08a      	sub	sp, #40	; 0x28
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
	err_t errval;
	struct pbuf *q;
	uint8_t *buffer = (uint8_t*) (heth.TxDesc->Buffer1Addr);
 8004be2:	4b4b      	ldr	r3, [pc, #300]	; (8004d10 <low_level_output+0x138>)
 8004be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	61fb      	str	r3, [r7, #28]
	__IO ETH_DMADescTypeDef *DmaTxDesc;
	uint32_t framelength = 0;
 8004bea:	2300      	movs	r3, #0
 8004bec:	617b      	str	r3, [r7, #20]
	uint32_t bufferoffset = 0;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	613b      	str	r3, [r7, #16]
	uint32_t byteslefttocopy = 0;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	60fb      	str	r3, [r7, #12]
	uint32_t payloadoffset = 0;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	60bb      	str	r3, [r7, #8]
	DmaTxDesc = heth.TxDesc;
 8004bfa:	4b45      	ldr	r3, [pc, #276]	; (8004d10 <low_level_output+0x138>)
 8004bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfe:	61bb      	str	r3, [r7, #24]
	bufferoffset = 0;
 8004c00:	2300      	movs	r3, #0
 8004c02:	613b      	str	r3, [r7, #16]
#if LWIP_PTP
	ETH_TimeStamp timeStamp;
#endif

	/* copy frame from pbufs to driver buffers */
	for (q = p; q != NULL; q = q->next)
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	623b      	str	r3, [r7, #32]
 8004c08:	e05a      	b.n	8004cc0 <low_level_output+0xe8>
	{
		/* Is this buffer available? If not, goto error */
		if ((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t) RESET)
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	da03      	bge.n	8004c1a <low_level_output+0x42>
		{
			errval = ERR_USE;
 8004c12:	23f8      	movs	r3, #248	; 0xf8
 8004c14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			goto error;
 8004c18:	e05c      	b.n	8004cd4 <low_level_output+0xfc>
		}

		/* Get bytes in current lwIP buffer */
		byteslefttocopy = q->len;
 8004c1a:	6a3b      	ldr	r3, [r7, #32]
 8004c1c:	895b      	ldrh	r3, [r3, #10]
 8004c1e:	60fb      	str	r3, [r7, #12]
		payloadoffset = 0;
 8004c20:	2300      	movs	r3, #0
 8004c22:	60bb      	str	r3, [r7, #8]

		/* Check if the length of data to copy is bigger than Tx buffer size*/
		while ((byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE)
 8004c24:	e02f      	b.n	8004c86 <low_level_output+0xae>
		{
			/* Copy data to Tx buffer*/
			memcpy((uint8_t*) ((uint8_t*) buffer + bufferoffset),
 8004c26:	69fa      	ldr	r2, [r7, #28]
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	18d0      	adds	r0, r2, r3
					(uint8_t*) ((uint8_t*) q->payload + payloadoffset),
 8004c2c:	6a3b      	ldr	r3, [r7, #32]
 8004c2e:	685a      	ldr	r2, [r3, #4]
			memcpy((uint8_t*) ((uint8_t*) buffer + bufferoffset),
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	18d1      	adds	r1, r2, r3
					(ETH_TX_BUF_SIZE - bufferoffset));
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004c3a:	3304      	adds	r3, #4
			memcpy((uint8_t*) ((uint8_t*) buffer + bufferoffset),
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	f014 ff2a 	bl	8019a96 <memcpy>

			/* Point to next descriptor */
			DmaTxDesc = (ETH_DMADescTypeDef*) (DmaTxDesc->Buffer2NextDescAddr);
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	61bb      	str	r3, [r7, #24]

			/* Check if the buffer is available */
			if ((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t) RESET)
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	da03      	bge.n	8004c58 <low_level_output+0x80>
			{
				errval = ERR_USE;
 8004c50:	23f8      	movs	r3, #248	; 0xf8
 8004c52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				goto error;
 8004c56:	e03d      	b.n	8004cd4 <low_level_output+0xfc>
			}

			buffer = (uint8_t*) (DmaTxDesc->Buffer1Addr);
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	61fb      	str	r3, [r7, #28]

			byteslefttocopy = byteslefttocopy
					- (ETH_TX_BUF_SIZE - bufferoffset);
 8004c5e:	693a      	ldr	r2, [r7, #16]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	4413      	add	r3, r2
			byteslefttocopy = byteslefttocopy
 8004c64:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004c68:	60fb      	str	r3, [r7, #12]
			payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004c74:	60bb      	str	r3, [r7, #8]
			framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8004c76:	697a      	ldr	r2, [r7, #20]
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004c80:	617b      	str	r3, [r7, #20]
			bufferoffset = 0;
 8004c82:	2300      	movs	r3, #0
 8004c84:	613b      	str	r3, [r7, #16]
		while ((byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE)
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d8c8      	bhi.n	8004c26 <low_level_output+0x4e>
		}

		/* Copy the remaining bytes */
		memcpy((uint8_t*) ((uint8_t*) buffer + bufferoffset),
 8004c94:	69fa      	ldr	r2, [r7, #28]
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	18d0      	adds	r0, r2, r3
				(uint8_t*) ((uint8_t*) q->payload + payloadoffset),
 8004c9a:	6a3b      	ldr	r3, [r7, #32]
 8004c9c:	685a      	ldr	r2, [r3, #4]
		memcpy((uint8_t*) ((uint8_t*) buffer + bufferoffset),
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	f014 fef6 	bl	8019a96 <memcpy>
				byteslefttocopy);
		bufferoffset = bufferoffset + byteslefttocopy;
 8004caa:	693a      	ldr	r2, [r7, #16]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	4413      	add	r3, r2
 8004cb0:	613b      	str	r3, [r7, #16]
		framelength = framelength + byteslefttocopy;
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	617b      	str	r3, [r7, #20]
	for (q = p; q != NULL; q = q->next)
 8004cba:	6a3b      	ldr	r3, [r7, #32]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	623b      	str	r3, [r7, #32]
 8004cc0:	6a3b      	ldr	r3, [r7, #32]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1a1      	bne.n	8004c0a <low_level_output+0x32>
		/* Fill in the time stamp information. */
		p->time_sec = timeStamp.TimeStampHigh;
		p->time_nsec = ETH_PTPSubSecond2NanoSecond(timeStamp.TimeStampLow);
	}
#else
	HAL_ETH_TransmitFrame(&heth, framelength);
 8004cc6:	6979      	ldr	r1, [r7, #20]
 8004cc8:	4811      	ldr	r0, [pc, #68]	; (8004d10 <low_level_output+0x138>)
 8004cca:	f7fd fbaf 	bl	800242c <HAL_ETH_TransmitFrame>
#endif
	errval = ERR_OK;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	error:

	/* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
	if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t) RESET)
 8004cd4:	4b0e      	ldr	r3, [pc, #56]	; (8004d10 <low_level_output+0x138>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cdc:	3314      	adds	r3, #20
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0320 	and.w	r3, r3, #32
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00d      	beq.n	8004d04 <low_level_output+0x12c>
	{
		/* Clear TUS ETHERNET DMA flag */
		heth.Instance->DMASR = ETH_DMASR_TUS;
 8004ce8:	4b09      	ldr	r3, [pc, #36]	; (8004d10 <low_level_output+0x138>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cf0:	3314      	adds	r3, #20
 8004cf2:	2220      	movs	r2, #32
 8004cf4:	601a      	str	r2, [r3, #0]

		/* Resume DMA transmission*/
		heth.Instance->DMATPDR = 0;
 8004cf6:	4b06      	ldr	r3, [pc, #24]	; (8004d10 <low_level_output+0x138>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cfe:	3304      	adds	r3, #4
 8004d00:	2200      	movs	r2, #0
 8004d02:	601a      	str	r2, [r3, #0]
	}
	return errval;
 8004d04:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3728      	adds	r7, #40	; 0x28
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	20006728 	.word	0x20006728

08004d14 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
 */
static struct pbuf* low_level_input(struct netif *netif)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b08c      	sub	sp, #48	; 0x30
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
	struct pbuf *p = NULL;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
	struct pbuf *q = NULL;
 8004d20:	2300      	movs	r3, #0
 8004d22:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t len = 0;
 8004d24:	2300      	movs	r3, #0
 8004d26:	81fb      	strh	r3, [r7, #14]
	uint8_t *buffer;
	__IO ETH_DMADescTypeDef *dmarxdesc;
	uint32_t bufferoffset = 0;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	61fb      	str	r3, [r7, #28]
	uint32_t payloadoffset = 0;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	61bb      	str	r3, [r7, #24]
	uint32_t byteslefttocopy = 0;
 8004d30:	2300      	movs	r3, #0
 8004d32:	617b      	str	r3, [r7, #20]
	uint32_t i = 0;
 8004d34:	2300      	movs	r3, #0
 8004d36:	613b      	str	r3, [r7, #16]

	/* get received frame */
	if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8004d38:	484e      	ldr	r0, [pc, #312]	; (8004e74 <low_level_input+0x160>)
 8004d3a:	f7fd fc61 	bl	8002600 <HAL_ETH_GetReceivedFrame_IT>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d001      	beq.n	8004d48 <low_level_input+0x34>

		return NULL;
 8004d44:	2300      	movs	r3, #0
 8004d46:	e091      	b.n	8004e6c <low_level_input+0x158>

	/* Obtain the size of the packet and put it into the "len" variable. */
	len = heth.RxFrameInfos.length;
 8004d48:	4b4a      	ldr	r3, [pc, #296]	; (8004e74 <low_level_input+0x160>)
 8004d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d4c:	81fb      	strh	r3, [r7, #14]
	buffer = (uint8_t*) heth.RxFrameInfos.buffer;
 8004d4e:	4b49      	ldr	r3, [pc, #292]	; (8004e74 <low_level_input+0x160>)
 8004d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d52:	627b      	str	r3, [r7, #36]	; 0x24

	if (len > 0)
 8004d54:	89fb      	ldrh	r3, [r7, #14]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d006      	beq.n	8004d68 <low_level_input+0x54>
	{
		/* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
		p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8004d5a:	89fb      	ldrh	r3, [r7, #14]
 8004d5c:	2203      	movs	r2, #3
 8004d5e:	4619      	mov	r1, r3
 8004d60:	2004      	movs	r0, #4
 8004d62:	f004 ffaf 	bl	8009cc4 <pbuf_alloc>
 8004d66:	62f8      	str	r0, [r7, #44]	; 0x2c
	}

	if (p != NULL)
 8004d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d04b      	beq.n	8004e06 <low_level_input+0xf2>
	{
		dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004d6e:	4b41      	ldr	r3, [pc, #260]	; (8004e74 <low_level_input+0x160>)
 8004d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d72:	623b      	str	r3, [r7, #32]
		bufferoffset = 0;
 8004d74:	2300      	movs	r3, #0
 8004d76:	61fb      	str	r3, [r7, #28]
		for (q = p; q != NULL; q = q->next)
 8004d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d7c:	e040      	b.n	8004e00 <low_level_input+0xec>
		{
			byteslefttocopy = q->len;
 8004d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d80:	895b      	ldrh	r3, [r3, #10]
 8004d82:	617b      	str	r3, [r7, #20]
			payloadoffset = 0;
 8004d84:	2300      	movs	r3, #0
 8004d86:	61bb      	str	r3, [r7, #24]

			/* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
			while ((byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE)
 8004d88:	e021      	b.n	8004dce <low_level_input+0xba>
			{
				/* Copy data to pbuf */
				memcpy((uint8_t*) ((uint8_t*) q->payload + payloadoffset),
 8004d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8c:	685a      	ldr	r2, [r3, #4]
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	18d0      	adds	r0, r2, r3
						(uint8_t*) ((uint8_t*) buffer + bufferoffset),
 8004d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	18d1      	adds	r1, r2, r3
						(ETH_RX_BUF_SIZE - bufferoffset));
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004d9e:	3304      	adds	r3, #4
				memcpy((uint8_t*) ((uint8_t*) q->payload + payloadoffset),
 8004da0:	461a      	mov	r2, r3
 8004da2:	f014 fe78 	bl	8019a96 <memcpy>

				/* Point to next descriptor */
				dmarxdesc =
						(ETH_DMADescTypeDef*) (dmarxdesc->Buffer2NextDescAddr);
 8004da6:	6a3b      	ldr	r3, [r7, #32]
 8004da8:	68db      	ldr	r3, [r3, #12]
				dmarxdesc =
 8004daa:	623b      	str	r3, [r7, #32]
				buffer = (uint8_t*) (dmarxdesc->Buffer1Addr);
 8004dac:	6a3b      	ldr	r3, [r7, #32]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	627b      	str	r3, [r7, #36]	; 0x24

				byteslefttocopy = byteslefttocopy
						- (ETH_RX_BUF_SIZE - bufferoffset);
 8004db2:	69fa      	ldr	r2, [r7, #28]
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	4413      	add	r3, r2
				byteslefttocopy = byteslefttocopy
 8004db8:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004dbc:	617b      	str	r3, [r7, #20]
				payloadoffset = payloadoffset
						+ (ETH_RX_BUF_SIZE - bufferoffset);
 8004dbe:	69ba      	ldr	r2, [r7, #24]
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	1ad3      	subs	r3, r2, r3
				payloadoffset = payloadoffset
 8004dc4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004dc8:	61bb      	str	r3, [r7, #24]
				bufferoffset = 0;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	61fb      	str	r3, [r7, #28]
			while ((byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE)
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d8d6      	bhi.n	8004d8a <low_level_input+0x76>
			}
			/* Copy remaining data in pbuf */
			memcpy((uint8_t*) ((uint8_t*) q->payload + payloadoffset),
 8004ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dde:	685a      	ldr	r2, [r3, #4]
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	18d0      	adds	r0, r2, r3
					(uint8_t*) ((uint8_t*) buffer + bufferoffset),
 8004de4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	4413      	add	r3, r2
			memcpy((uint8_t*) ((uint8_t*) q->payload + payloadoffset),
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	4619      	mov	r1, r3
 8004dee:	f014 fe52 	bl	8019a96 <memcpy>
					byteslefttocopy);
			bufferoffset = bufferoffset + byteslefttocopy;
 8004df2:	69fa      	ldr	r2, [r7, #28]
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	4413      	add	r3, r2
 8004df8:	61fb      	str	r3, [r7, #28]
		for (q = p; q != NULL; q = q->next)
 8004dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1bb      	bne.n	8004d7e <low_level_input+0x6a>
		/* USER CODE END LOW_LEVEL_INPUT 1 */
	}

	/* Release descriptors to DMA */
	/* Point to first descriptor */
	dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004e06:	4b1b      	ldr	r3, [pc, #108]	; (8004e74 <low_level_input+0x160>)
 8004e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0a:	623b      	str	r3, [r7, #32]
	/* Set Own bit in Rx descriptors: gives the buffers back to DMA */
	for (i = 0; i < heth.RxFrameInfos.SegCount; i++)
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	613b      	str	r3, [r7, #16]
 8004e10:	e00b      	b.n	8004e2a <low_level_input+0x116>
	{
		dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8004e12:	6a3b      	ldr	r3, [r7, #32]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004e1a:	6a3b      	ldr	r3, [r7, #32]
 8004e1c:	601a      	str	r2, [r3, #0]
		dmarxdesc = (ETH_DMADescTypeDef*) (dmarxdesc->Buffer2NextDescAddr);
 8004e1e:	6a3b      	ldr	r3, [r7, #32]
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	623b      	str	r3, [r7, #32]
	for (i = 0; i < heth.RxFrameInfos.SegCount; i++)
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	3301      	adds	r3, #1
 8004e28:	613b      	str	r3, [r7, #16]
 8004e2a:	4b12      	ldr	r3, [pc, #72]	; (8004e74 <low_level_input+0x160>)
 8004e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d3ee      	bcc.n	8004e12 <low_level_input+0xfe>
	}

	/* Clear Segment_Count */
	heth.RxFrameInfos.SegCount = 0;
 8004e34:	4b0f      	ldr	r3, [pc, #60]	; (8004e74 <low_level_input+0x160>)
 8004e36:	2200      	movs	r2, #0
 8004e38:	639a      	str	r2, [r3, #56]	; 0x38

	/* When Rx Buffer unavailable flag is set: clear it and resume reception */
	if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t) RESET)
 8004e3a:	4b0e      	ldr	r3, [pc, #56]	; (8004e74 <low_level_input+0x160>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e42:	3314      	adds	r3, #20
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00d      	beq.n	8004e6a <low_level_input+0x156>
	{
		/* Clear RBUS ETHERNET DMA flag */
		heth.Instance->DMASR = ETH_DMASR_RBUS;
 8004e4e:	4b09      	ldr	r3, [pc, #36]	; (8004e74 <low_level_input+0x160>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e56:	3314      	adds	r3, #20
 8004e58:	2280      	movs	r2, #128	; 0x80
 8004e5a:	601a      	str	r2, [r3, #0]
		/* Resume DMA reception */
		heth.Instance->DMARPDR = 0;
 8004e5c:	4b05      	ldr	r3, [pc, #20]	; (8004e74 <low_level_input+0x160>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e64:	3308      	adds	r3, #8
 8004e66:	2200      	movs	r2, #0
 8004e68:	601a      	str	r2, [r3, #0]
	}
	return p;
 8004e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3730      	adds	r7, #48	; 0x30
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	20006728 	.word	0x20006728

08004e78 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const *argument)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
	struct pbuf *p;
	struct netif *netif = (struct netif*) argument;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	60fb      	str	r3, [r7, #12]

	for (;;)
	{
		if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004e84:	4b12      	ldr	r3, [pc, #72]	; (8004ed0 <ethernetif_input+0x58>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f04f 31ff 	mov.w	r1, #4294967295
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f000 fb3f 	bl	8005510 <osSemaphoreWait>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1f5      	bne.n	8004e84 <ethernetif_input+0xc>
		{
			do
			{
				LOCK_TCPIP_CORE();
 8004e98:	480e      	ldr	r0, [pc, #56]	; (8004ed4 <ethernetif_input+0x5c>)
 8004e9a:	f00f fa5f 	bl	801435c <sys_mutex_lock>
				p = low_level_input(netif);
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f7ff ff38 	bl	8004d14 <low_level_input>
 8004ea4:	60b8      	str	r0, [r7, #8]
				if (p != NULL)
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d00a      	beq.n	8004ec2 <ethernetif_input+0x4a>
				{
					if (netif->input(p, netif) != ERR_OK)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	68f9      	ldr	r1, [r7, #12]
 8004eb2:	68b8      	ldr	r0, [r7, #8]
 8004eb4:	4798      	blx	r3
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d002      	beq.n	8004ec2 <ethernetif_input+0x4a>
					{
						pbuf_free(p);
 8004ebc:	68b8      	ldr	r0, [r7, #8]
 8004ebe:	f005 fa73 	bl	800a3a8 <pbuf_free>
					}
				}
				UNLOCK_TCPIP_CORE();
 8004ec2:	4804      	ldr	r0, [pc, #16]	; (8004ed4 <ethernetif_input+0x5c>)
 8004ec4:	f00f fa59 	bl	801437a <sys_mutex_unlock>
			} while (p != NULL);
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1e4      	bne.n	8004e98 <ethernetif_input+0x20>
		if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8004ece:	e7d9      	b.n	8004e84 <ethernetif_input+0xc>
 8004ed0:	200008d4 	.word	0x200008d4
 8004ed4:	20007f80 	.word	0x20007f80

08004ed8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
	LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d106      	bne.n	8004ef4 <ethernetif_init+0x1c>
 8004ee6:	4b0e      	ldr	r3, [pc, #56]	; (8004f20 <ethernetif_init+0x48>)
 8004ee8:	f240 22ab 	movw	r2, #683	; 0x2ab
 8004eec:	490d      	ldr	r1, [pc, #52]	; (8004f24 <ethernetif_init+0x4c>)
 8004eee:	480e      	ldr	r0, [pc, #56]	; (8004f28 <ethernetif_init+0x50>)
 8004ef0:	f015 fc14 	bl	801a71c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

	netif->name[0] = IFNAME0;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2273      	movs	r2, #115	; 0x73
 8004ef8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	netif->name[1] = IFNAME1;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2274      	movs	r2, #116	; 0x74
 8004f00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	 * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
	netif->output = etharp_output;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a09      	ldr	r2, [pc, #36]	; (8004f2c <ethernetif_init+0x54>)
 8004f08:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

	netif->linkoutput = low_level_output;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a08      	ldr	r2, [pc, #32]	; (8004f30 <ethernetif_init+0x58>)
 8004f0e:	619a      	str	r2, [r3, #24]

	/* initialize the hardware */
	low_level_init(netif);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f7ff fd89 	bl	8004a28 <low_level_init>

	return ERR_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3708      	adds	r7, #8
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	0801e0bc 	.word	0x0801e0bc
 8004f24:	0801e0d8 	.word	0x0801e0d8
 8004f28:	0801e0e8 	.word	0x0801e0e8
 8004f2c:	0801233d 	.word	0x0801233d
 8004f30:	08004bd9 	.word	0x08004bd9

08004f34 <sys_now>:
 *         when LWIP_TIMERS == 1 and NO_SYS == 1
 * @param  None
 * @retval Time
 */
u32_t sys_now(void)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8004f38:	f7fc ff0a 	bl	8001d50 <HAL_GetTick>
 8004f3c:	4603      	mov	r3, r0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	bd80      	pop	{r7, pc}
	...

08004f44 <ethernetif_set_link>:
 * @param  netif: the network interface
 * @retval None
 */
void ethernetif_set_link(void const *argument)

{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
	uint32_t regvalue = 0;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	60bb      	str	r3, [r7, #8]
	struct link_str *link_arg = (struct link_str*) argument;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	60fb      	str	r3, [r7, #12]

	for (;;)
	{
		/* Read PHY_BSR*/
		HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004f54:	f107 0308 	add.w	r3, r7, #8
 8004f58:	461a      	mov	r2, r3
 8004f5a:	2101      	movs	r1, #1
 8004f5c:	4816      	ldr	r0, [pc, #88]	; (8004fb8 <ethernetif_set_link+0x74>)
 8004f5e:	f7fd fc4f 	bl	8002800 <HAL_ETH_ReadPHYRegister>

		regvalue &= PHY_LINKED_STATUS;
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	f003 0304 	and.w	r3, r3, #4
 8004f68:	60bb      	str	r3, [r7, #8]

		/* Check whether the netif link down and the PHY link is up */
		if (!netif_is_link_up(link_arg->netif) && (regvalue))
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8004f72:	f003 0304 	and.w	r3, r3, #4
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d108      	bne.n	8004f8c <ethernetif_set_link+0x48>
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d005      	beq.n	8004f8c <ethernetif_set_link+0x48>
		{
			/* network cable is connected */
			netif_set_link_up(link_arg->netif);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4618      	mov	r0, r3
 8004f86:	f004 fddf 	bl	8009b48 <netif_set_link_up>
 8004f8a:	e011      	b.n	8004fb0 <ethernetif_set_link+0x6c>
		}
		else if (netif_is_link_up(link_arg->netif) && (!regvalue))
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8004f94:	089b      	lsrs	r3, r3, #2
 8004f96:	f003 0301 	and.w	r3, r3, #1
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d007      	beq.n	8004fb0 <ethernetif_set_link+0x6c>
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d104      	bne.n	8004fb0 <ethernetif_set_link+0x6c>
		{
			/* network cable is dis-connected */
			netif_set_link_down(link_arg->netif);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4618      	mov	r0, r3
 8004fac:	f004 fdfa 	bl	8009ba4 <netif_set_link_down>
		}

		/* Suspend thread for 200 ms */
		osDelay(200);
 8004fb0:	20c8      	movs	r0, #200	; 0xc8
 8004fb2:	f000 f913 	bl	80051dc <osDelay>
		HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004fb6:	e7cd      	b.n	8004f54 <ethernetif_set_link+0x10>
 8004fb8:	20006728 	.word	0x20006728

08004fbc <ethernetif_update_config>:
 *         to update low level driver configuration.
 * @param  netif: The network interface
 * @retval None
 */
void ethernetif_update_config(struct netif *netif)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
	__IO uint32_t tickstart = 0;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	60fb      	str	r3, [r7, #12]
	uint32_t regvalue = 0;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	60bb      	str	r3, [r7, #8]

	if (netif_is_link_up(netif))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8004fd2:	089b      	lsrs	r3, r3, #2
 8004fd4:	f003 0301 	and.w	r3, r3, #1
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d05d      	beq.n	800509a <ethernetif_update_config+0xde>
	{
		/* Restart the auto-negotiation */
		if (heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8004fde:	4b34      	ldr	r3, [pc, #208]	; (80050b0 <ethernetif_update_config+0xf4>)
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d03f      	beq.n	8005066 <ethernetif_update_config+0xaa>
		{
			/* Enable Auto-Negotiation */
			HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8004fe6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004fea:	2100      	movs	r1, #0
 8004fec:	4830      	ldr	r0, [pc, #192]	; (80050b0 <ethernetif_update_config+0xf4>)
 8004fee:	f7fd fc6f 	bl	80028d0 <HAL_ETH_WritePHYRegister>

			/* Get tick */
			tickstart = HAL_GetTick();
 8004ff2:	f7fc fead 	bl	8001d50 <HAL_GetTick>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	60fb      	str	r3, [r7, #12]

			/* Wait until the auto-negotiation will be completed */
			do
			{
				HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004ffa:	f107 0308 	add.w	r3, r7, #8
 8004ffe:	461a      	mov	r2, r3
 8005000:	2101      	movs	r1, #1
 8005002:	482b      	ldr	r0, [pc, #172]	; (80050b0 <ethernetif_update_config+0xf4>)
 8005004:	f7fd fbfc 	bl	8002800 <HAL_ETH_ReadPHYRegister>

				/* Check for the Timeout ( 1s ) */
				if ((HAL_GetTick() - tickstart) > 1000)
 8005008:	f7fc fea2 	bl	8001d50 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005016:	d828      	bhi.n	800506a <ethernetif_update_config+0xae>
				{
					/* In case of timeout */
					goto error;
				}
			} while (((regvalue & PHY_AUTONEGO_COMPLETE)
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	f003 0320 	and.w	r3, r3, #32
					!= PHY_AUTONEGO_COMPLETE));
 800501e:	2b00      	cmp	r3, #0
 8005020:	d0eb      	beq.n	8004ffa <ethernetif_update_config+0x3e>

			/* Read the result of the auto-negotiation */
			HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8005022:	f107 0308 	add.w	r3, r7, #8
 8005026:	461a      	mov	r2, r3
 8005028:	211f      	movs	r1, #31
 800502a:	4821      	ldr	r0, [pc, #132]	; (80050b0 <ethernetif_update_config+0xf4>)
 800502c:	f7fd fbe8 	bl	8002800 <HAL_ETH_ReadPHYRegister>

			/* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
			if ((regvalue & PHY_DUPLEX_STATUS) != (uint32_t) RESET)
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	f003 0310 	and.w	r3, r3, #16
 8005036:	2b00      	cmp	r3, #0
 8005038:	d004      	beq.n	8005044 <ethernetif_update_config+0x88>
			{
				/* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
				heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800503a:	4b1d      	ldr	r3, [pc, #116]	; (80050b0 <ethernetif_update_config+0xf4>)
 800503c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005040:	60da      	str	r2, [r3, #12]
 8005042:	e002      	b.n	800504a <ethernetif_update_config+0x8e>
			}
			else
			{
				/* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
				heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8005044:	4b1a      	ldr	r3, [pc, #104]	; (80050b0 <ethernetif_update_config+0xf4>)
 8005046:	2200      	movs	r2, #0
 8005048:	60da      	str	r2, [r3, #12]
			}
			/* Configure the MAC with the speed fixed by the auto-negotiation process */
			if (regvalue & PHY_SPEED_STATUS)
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	f003 0304 	and.w	r3, r3, #4
 8005050:	2b00      	cmp	r3, #0
 8005052:	d003      	beq.n	800505c <ethernetif_update_config+0xa0>
			{
				/* Set Ethernet speed to 10M following the auto-negotiation */
				heth.Init.Speed = ETH_SPEED_10M;
 8005054:	4b16      	ldr	r3, [pc, #88]	; (80050b0 <ethernetif_update_config+0xf4>)
 8005056:	2200      	movs	r2, #0
 8005058:	609a      	str	r2, [r3, #8]
 800505a:	e016      	b.n	800508a <ethernetif_update_config+0xce>
			}
			else
			{
				/* Set Ethernet speed to 100M following the auto-negotiation */
				heth.Init.Speed = ETH_SPEED_100M;
 800505c:	4b14      	ldr	r3, [pc, #80]	; (80050b0 <ethernetif_update_config+0xf4>)
 800505e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005062:	609a      	str	r2, [r3, #8]
 8005064:	e011      	b.n	800508a <ethernetif_update_config+0xce>
			}
		}
		else /* AutoNegotiation Disable */
		{
			error:
 8005066:	bf00      	nop
 8005068:	e000      	b.n	800506c <ethernetif_update_config+0xb0>
					goto error;
 800506a:	bf00      	nop
			assert_param(IS_ETH_SPEED(heth.Init.Speed));
			assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

			/* Set MAC Speed and Duplex Mode to PHY */
			HAL_ETH_WritePHYRegister(&heth, PHY_BCR,
					((uint16_t) (heth.Init.DuplexMode >> 3)
 800506c:	4b10      	ldr	r3, [pc, #64]	; (80050b0 <ethernetif_update_config+0xf4>)
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	08db      	lsrs	r3, r3, #3
 8005072:	b29a      	uxth	r2, r3
							| (uint16_t) (heth.Init.Speed >> 1)));
 8005074:	4b0e      	ldr	r3, [pc, #56]	; (80050b0 <ethernetif_update_config+0xf4>)
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	085b      	lsrs	r3, r3, #1
 800507a:	b29b      	uxth	r3, r3
			HAL_ETH_WritePHYRegister(&heth, PHY_BCR,
 800507c:	4313      	orrs	r3, r2
 800507e:	b29b      	uxth	r3, r3
 8005080:	461a      	mov	r2, r3
 8005082:	2100      	movs	r1, #0
 8005084:	480a      	ldr	r0, [pc, #40]	; (80050b0 <ethernetif_update_config+0xf4>)
 8005086:	f7fd fc23 	bl	80028d0 <HAL_ETH_WritePHYRegister>
		}

		/* ETHERNET MAC Re-Configuration */
		HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef*) NULL);
 800508a:	2100      	movs	r1, #0
 800508c:	4808      	ldr	r0, [pc, #32]	; (80050b0 <ethernetif_update_config+0xf4>)
 800508e:	f7fd fce3 	bl	8002a58 <HAL_ETH_ConfigMAC>

		/* Restart MAC interface */
		HAL_ETH_Start(&heth);
 8005092:	4807      	ldr	r0, [pc, #28]	; (80050b0 <ethernetif_update_config+0xf4>)
 8005094:	f7fd fc82 	bl	800299c <HAL_ETH_Start>
 8005098:	e002      	b.n	80050a0 <ethernetif_update_config+0xe4>
	}
	else
	{
		/* Stop MAC interface */
		HAL_ETH_Stop(&heth);
 800509a:	4805      	ldr	r0, [pc, #20]	; (80050b0 <ethernetif_update_config+0xf4>)
 800509c:	f7fd fcad 	bl	80029fa <HAL_ETH_Stop>
	}

	ethernetif_notify_conn_changed(netif);
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 f807 	bl	80050b4 <ethernetif_notify_conn_changed>
}
 80050a6:	bf00      	nop
 80050a8:	3710      	adds	r7, #16
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	20006728 	.word	0x20006728

080050b4 <ethernetif_notify_conn_changed>:
 * @brief  This function notify user about link status changement.
 * @param  netif: the network interface
 * @retval None
 */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
	/* NOTE : This is function could be implemented in user file
	 when the callback is needed,
	 */

}
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bc80      	pop	{r7}
 80050c4:	4770      	bx	lr

080050c6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80050c6:	b480      	push	{r7}
 80050c8:	b085      	sub	sp, #20
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	4603      	mov	r3, r0
 80050ce:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80050d0:	2300      	movs	r3, #0
 80050d2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80050d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80050d8:	2b84      	cmp	r3, #132	; 0x84
 80050da:	d005      	beq.n	80050e8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80050dc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	4413      	add	r3, r2
 80050e4:	3303      	adds	r3, #3
 80050e6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80050e8:	68fb      	ldr	r3, [r7, #12]
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3714      	adds	r7, #20
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bc80      	pop	{r7}
 80050f2:	4770      	bx	lr

080050f4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050fa:	f3ef 8305 	mrs	r3, IPSR
 80050fe:	607b      	str	r3, [r7, #4]
  return(result);
 8005100:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005102:	2b00      	cmp	r3, #0
 8005104:	bf14      	ite	ne
 8005106:	2301      	movne	r3, #1
 8005108:	2300      	moveq	r3, #0
 800510a:	b2db      	uxtb	r3, r3
}
 800510c:	4618      	mov	r0, r3
 800510e:	370c      	adds	r7, #12
 8005110:	46bd      	mov	sp, r7
 8005112:	bc80      	pop	{r7}
 8005114:	4770      	bx	lr

08005116 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800511a:	f001 fd45 	bl	8006ba8 <vTaskStartScheduler>
  
  return osOK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	bd80      	pop	{r7, pc}

08005124 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8005128:	f7ff ffe4 	bl	80050f4 <inHandlerMode>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d003      	beq.n	800513a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8005132:	f001 fe55 	bl	8006de0 <xTaskGetTickCountFromISR>
 8005136:	4603      	mov	r3, r0
 8005138:	e002      	b.n	8005140 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800513a:	f001 fe43 	bl	8006dc4 <xTaskGetTickCount>
 800513e:	4603      	mov	r3, r0
  }
}
 8005140:	4618      	mov	r0, r3
 8005142:	bd80      	pop	{r7, pc}

08005144 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005146:	b089      	sub	sp, #36	; 0x24
 8005148:	af04      	add	r7, sp, #16
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d020      	beq.n	8005198 <osThreadCreate+0x54>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d01c      	beq.n	8005198 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	685c      	ldr	r4, [r3, #4]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681d      	ldr	r5, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	691e      	ldr	r6, [r3, #16]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005170:	4618      	mov	r0, r3
 8005172:	f7ff ffa8 	bl	80050c6 <makeFreeRtosPriority>
 8005176:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	695b      	ldr	r3, [r3, #20]
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005180:	9202      	str	r2, [sp, #8]
 8005182:	9301      	str	r3, [sp, #4]
 8005184:	9100      	str	r1, [sp, #0]
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	4632      	mov	r2, r6
 800518a:	4629      	mov	r1, r5
 800518c:	4620      	mov	r0, r4
 800518e:	f001 fb51 	bl	8006834 <xTaskCreateStatic>
 8005192:	4603      	mov	r3, r0
 8005194:	60fb      	str	r3, [r7, #12]
 8005196:	e01c      	b.n	80051d2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685c      	ldr	r4, [r3, #4]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80051a4:	b29e      	uxth	r6, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80051ac:	4618      	mov	r0, r3
 80051ae:	f7ff ff8a 	bl	80050c6 <makeFreeRtosPriority>
 80051b2:	4602      	mov	r2, r0
 80051b4:	f107 030c 	add.w	r3, r7, #12
 80051b8:	9301      	str	r3, [sp, #4]
 80051ba:	9200      	str	r2, [sp, #0]
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	4632      	mov	r2, r6
 80051c0:	4629      	mov	r1, r5
 80051c2:	4620      	mov	r0, r4
 80051c4:	f001 fb8f 	bl	80068e6 <xTaskCreate>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d001      	beq.n	80051d2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80051ce:	2300      	movs	r3, #0
 80051d0:	e000      	b.n	80051d4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80051d2:	68fb      	ldr	r3, [r7, #12]
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	3714      	adds	r7, #20
 80051d8:	46bd      	mov	sp, r7
 80051da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080051dc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d001      	beq.n	80051f2 <osDelay+0x16>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	e000      	b.n	80051f4 <osDelay+0x18>
 80051f2:	2301      	movs	r3, #1
 80051f4:	4618      	mov	r0, r3
 80051f6:	f001 fca3 	bl	8006b40 <vTaskDelay>
  
  return osOK;
 80051fa:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3710      	adds	r7, #16
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b086      	sub	sp, #24
 8005208:	af02      	add	r7, sp, #8
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	460b      	mov	r3, r1
 800520e:	607a      	str	r2, [r7, #4]
 8005210:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d013      	beq.n	8005242 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 800521a:	7afb      	ldrb	r3, [r7, #11]
 800521c:	2b01      	cmp	r3, #1
 800521e:	d101      	bne.n	8005224 <osTimerCreate+0x20>
 8005220:	2101      	movs	r1, #1
 8005222:	e000      	b.n	8005226 <osTimerCreate+0x22>
 8005224:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 800522e:	9201      	str	r2, [sp, #4]
 8005230:	9300      	str	r3, [sp, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	460a      	mov	r2, r1
 8005236:	2101      	movs	r1, #1
 8005238:	480b      	ldr	r0, [pc, #44]	; (8005268 <osTimerCreate+0x64>)
 800523a:	f002 fbaa 	bl	8007992 <xTimerCreateStatic>
 800523e:	4603      	mov	r3, r0
 8005240:	e00e      	b.n	8005260 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8005242:	7afb      	ldrb	r3, [r7, #11]
 8005244:	2b01      	cmp	r3, #1
 8005246:	d101      	bne.n	800524c <osTimerCreate+0x48>
 8005248:	2201      	movs	r2, #1
 800524a:	e000      	b.n	800524e <osTimerCreate+0x4a>
 800524c:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2101      	movs	r1, #1
 8005258:	4803      	ldr	r0, [pc, #12]	; (8005268 <osTimerCreate+0x64>)
 800525a:	f002 fb79 	bl	8007950 <xTimerCreate>
 800525e:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8005260:	4618      	mov	r0, r3
 8005262:	3710      	adds	r7, #16
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	0801e110 	.word	0x0801e110

0800526c <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b088      	sub	sp, #32
 8005270:	af02      	add	r7, sp, #8
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8005276:	2300      	movs	r3, #0
 8005278:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800527a:	2300      	movs	r3, #0
 800527c:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d101      	bne.n	800528c <osTimerStart+0x20>
    ticks = 1;
 8005288:	2301      	movs	r3, #1
 800528a:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 800528c:	f7ff ff32 	bl	80050f4 <inHandlerMode>
 8005290:	4603      	mov	r3, r0
 8005292:	2b00      	cmp	r3, #0
 8005294:	d01b      	beq.n	80052ce <osTimerStart+0x62>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8005296:	f107 020c 	add.w	r2, r7, #12
 800529a:	2300      	movs	r3, #0
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	4613      	mov	r3, r2
 80052a0:	693a      	ldr	r2, [r7, #16]
 80052a2:	2109      	movs	r1, #9
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f002 fbe1 	bl	8007a6c <xTimerGenericCommand>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d002      	beq.n	80052b6 <osTimerStart+0x4a>
    {
      result = osErrorOS;
 80052b0:	23ff      	movs	r3, #255	; 0xff
 80052b2:	617b      	str	r3, [r7, #20]
 80052b4:	e018      	b.n	80052e8 <osTimerStart+0x7c>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d015      	beq.n	80052e8 <osTimerStart+0x7c>
 80052bc:	4b0d      	ldr	r3, [pc, #52]	; (80052f4 <osTimerStart+0x88>)
 80052be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052c2:	601a      	str	r2, [r3, #0]
 80052c4:	f3bf 8f4f 	dsb	sy
 80052c8:	f3bf 8f6f 	isb	sy
 80052cc:	e00c      	b.n	80052e8 <osTimerStart+0x7c>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 80052ce:	2300      	movs	r3, #0
 80052d0:	9300      	str	r3, [sp, #0]
 80052d2:	2300      	movs	r3, #0
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	2104      	movs	r1, #4
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f002 fbc7 	bl	8007a6c <xTimerGenericCommand>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d001      	beq.n	80052e8 <osTimerStart+0x7c>
      result = osErrorOS;
 80052e4:	23ff      	movs	r3, #255	; 0xff
 80052e6:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 80052e8:	697b      	ldr	r3, [r7, #20]
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3718      	adds	r7, #24
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	e000ed04 	.word	0xe000ed04

080052f8 <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b086      	sub	sp, #24
 80052fc:	af02      	add	r7, sp, #8
 80052fe:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005300:	2300      	movs	r3, #0
 8005302:	60fb      	str	r3, [r7, #12]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8005304:	2300      	movs	r3, #0
 8005306:	60bb      	str	r3, [r7, #8]

  if (inHandlerMode()) {
 8005308:	f7ff fef4 	bl	80050f4 <inHandlerMode>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d01a      	beq.n	8005348 <osTimerStop+0x50>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 8005312:	f107 0208 	add.w	r2, r7, #8
 8005316:	2300      	movs	r3, #0
 8005318:	9300      	str	r3, [sp, #0]
 800531a:	4613      	mov	r3, r2
 800531c:	2200      	movs	r2, #0
 800531e:	2108      	movs	r1, #8
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f002 fba3 	bl	8007a6c <xTimerGenericCommand>
 8005326:	4603      	mov	r3, r0
 8005328:	2b01      	cmp	r3, #1
 800532a:	d001      	beq.n	8005330 <osTimerStop+0x38>
      return osErrorOS;
 800532c:	23ff      	movs	r3, #255	; 0xff
 800532e:	e019      	b.n	8005364 <osTimerStop+0x6c>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d015      	beq.n	8005362 <osTimerStop+0x6a>
 8005336:	4b0d      	ldr	r3, [pc, #52]	; (800536c <osTimerStop+0x74>)
 8005338:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800533c:	601a      	str	r2, [r3, #0]
 800533e:	f3bf 8f4f 	dsb	sy
 8005342:	f3bf 8f6f 	isb	sy
 8005346:	e00c      	b.n	8005362 <osTimerStop+0x6a>
  }
  else {
    if (xTimerStop(timer_id, 0) != pdPASS) {
 8005348:	2300      	movs	r3, #0
 800534a:	9300      	str	r3, [sp, #0]
 800534c:	2300      	movs	r3, #0
 800534e:	2200      	movs	r2, #0
 8005350:	2103      	movs	r1, #3
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f002 fb8a 	bl	8007a6c <xTimerGenericCommand>
 8005358:	4603      	mov	r3, r0
 800535a:	2b01      	cmp	r3, #1
 800535c:	d001      	beq.n	8005362 <osTimerStop+0x6a>
      result = osErrorOS;
 800535e:	23ff      	movs	r3, #255	; 0xff
 8005360:	60fb      	str	r3, [r7, #12]
    }
  }
#else 
  result = osErrorOS;
#endif 
  return result;
 8005362:	68fb      	ldr	r3, [r7, #12]
}
 8005364:	4618      	mov	r0, r3
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	e000ed04 	.word	0xe000ed04

08005370 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d007      	beq.n	8005390 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	4619      	mov	r1, r3
 8005386:	2001      	movs	r0, #1
 8005388:	f000 fc3c 	bl	8005c04 <xQueueCreateMutexStatic>
 800538c:	4603      	mov	r3, r0
 800538e:	e003      	b.n	8005398 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005390:	2001      	movs	r0, #1
 8005392:	f000 fc1f 	bl	8005bd4 <xQueueCreateMutex>
 8005396:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005398:	4618      	mov	r0, r3
 800539a:	3708      	adds	r7, #8
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80053aa:	2300      	movs	r3, #0
 80053ac:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d101      	bne.n	80053b8 <osMutexWait+0x18>
    return osErrorParameter;
 80053b4:	2380      	movs	r3, #128	; 0x80
 80053b6:	e03a      	b.n	800542e <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80053b8:	2300      	movs	r3, #0
 80053ba:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053c2:	d103      	bne.n	80053cc <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80053c4:	f04f 33ff 	mov.w	r3, #4294967295
 80053c8:	60fb      	str	r3, [r7, #12]
 80053ca:	e009      	b.n	80053e0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d006      	beq.n	80053e0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d101      	bne.n	80053e0 <osMutexWait+0x40>
      ticks = 1;
 80053dc:	2301      	movs	r3, #1
 80053de:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80053e0:	f7ff fe88 	bl	80050f4 <inHandlerMode>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d017      	beq.n	800541a <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80053ea:	f107 0308 	add.w	r3, r7, #8
 80053ee:	461a      	mov	r2, r3
 80053f0:	2100      	movs	r1, #0
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f001 f81e 	bl	8006434 <xQueueReceiveFromISR>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d001      	beq.n	8005402 <osMutexWait+0x62>
      return osErrorOS;
 80053fe:	23ff      	movs	r3, #255	; 0xff
 8005400:	e015      	b.n	800542e <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d011      	beq.n	800542c <osMutexWait+0x8c>
 8005408:	4b0b      	ldr	r3, [pc, #44]	; (8005438 <osMutexWait+0x98>)
 800540a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800540e:	601a      	str	r2, [r3, #0]
 8005410:	f3bf 8f4f 	dsb	sy
 8005414:	f3bf 8f6f 	isb	sy
 8005418:	e008      	b.n	800542c <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800541a:	68f9      	ldr	r1, [r7, #12]
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 ff01 	bl	8006224 <xQueueSemaphoreTake>
 8005422:	4603      	mov	r3, r0
 8005424:	2b01      	cmp	r3, #1
 8005426:	d001      	beq.n	800542c <osMutexWait+0x8c>
    return osErrorOS;
 8005428:	23ff      	movs	r3, #255	; 0xff
 800542a:	e000      	b.n	800542e <osMutexWait+0x8e>
  }
  
  return osOK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	e000ed04 	.word	0xe000ed04

0800543c <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005444:	2300      	movs	r3, #0
 8005446:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005448:	2300      	movs	r3, #0
 800544a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800544c:	f7ff fe52 	bl	80050f4 <inHandlerMode>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d016      	beq.n	8005484 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005456:	f107 0308 	add.w	r3, r7, #8
 800545a:	4619      	mov	r1, r3
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 fd7b 	bl	8005f58 <xQueueGiveFromISR>
 8005462:	4603      	mov	r3, r0
 8005464:	2b01      	cmp	r3, #1
 8005466:	d001      	beq.n	800546c <osMutexRelease+0x30>
      return osErrorOS;
 8005468:	23ff      	movs	r3, #255	; 0xff
 800546a:	e017      	b.n	800549c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d013      	beq.n	800549a <osMutexRelease+0x5e>
 8005472:	4b0c      	ldr	r3, [pc, #48]	; (80054a4 <osMutexRelease+0x68>)
 8005474:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005478:	601a      	str	r2, [r3, #0]
 800547a:	f3bf 8f4f 	dsb	sy
 800547e:	f3bf 8f6f 	isb	sy
 8005482:	e00a      	b.n	800549a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005484:	2300      	movs	r3, #0
 8005486:	2200      	movs	r2, #0
 8005488:	2100      	movs	r1, #0
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 fbd6 	bl	8005c3c <xQueueGenericSend>
 8005490:	4603      	mov	r3, r0
 8005492:	2b01      	cmp	r3, #1
 8005494:	d001      	beq.n	800549a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8005496:	23ff      	movs	r3, #255	; 0xff
 8005498:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800549a:	68fb      	ldr	r3, [r7, #12]
}
 800549c:	4618      	mov	r0, r3
 800549e:	3710      	adds	r7, #16
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	e000ed04 	.word	0xe000ed04

080054a8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b086      	sub	sp, #24
 80054ac:	af02      	add	r7, sp, #8
 80054ae:	6078      	str	r0, [r7, #4]
 80054b0:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d010      	beq.n	80054dc <osSemaphoreCreate+0x34>
    if (count == 1) {
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d10b      	bne.n	80054d8 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685a      	ldr	r2, [r3, #4]
 80054c4:	2303      	movs	r3, #3
 80054c6:	9300      	str	r3, [sp, #0]
 80054c8:	4613      	mov	r3, r2
 80054ca:	2200      	movs	r2, #0
 80054cc:	2100      	movs	r1, #0
 80054ce:	2001      	movs	r0, #1
 80054d0:	f000 fa98 	bl	8005a04 <xQueueGenericCreateStatic>
 80054d4:	4603      	mov	r3, r0
 80054d6:	e016      	b.n	8005506 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80054d8:	2300      	movs	r3, #0
 80054da:	e014      	b.n	8005506 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d110      	bne.n	8005504 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 80054e2:	2203      	movs	r2, #3
 80054e4:	2100      	movs	r1, #0
 80054e6:	2001      	movs	r0, #1
 80054e8:	f000 fafe 	bl	8005ae8 <xQueueGenericCreate>
 80054ec:	60f8      	str	r0, [r7, #12]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d005      	beq.n	8005500 <osSemaphoreCreate+0x58>
 80054f4:	2300      	movs	r3, #0
 80054f6:	2200      	movs	r2, #0
 80054f8:	2100      	movs	r1, #0
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	f000 fb9e 	bl	8005c3c <xQueueGenericSend>
      return sema;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	e000      	b.n	8005506 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8005504:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8005506:	4618      	mov	r0, r3
 8005508:	3710      	adds	r7, #16
 800550a:	46bd      	mov	sp, r7
 800550c:	bd80      	pop	{r7, pc}
	...

08005510 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800551a:	2300      	movs	r3, #0
 800551c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d101      	bne.n	8005528 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005524:	2380      	movs	r3, #128	; 0x80
 8005526:	e03a      	b.n	800559e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005528:	2300      	movs	r3, #0
 800552a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005532:	d103      	bne.n	800553c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005534:	f04f 33ff 	mov.w	r3, #4294967295
 8005538:	60fb      	str	r3, [r7, #12]
 800553a:	e009      	b.n	8005550 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d006      	beq.n	8005550 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d101      	bne.n	8005550 <osSemaphoreWait+0x40>
      ticks = 1;
 800554c:	2301      	movs	r3, #1
 800554e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005550:	f7ff fdd0 	bl	80050f4 <inHandlerMode>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d017      	beq.n	800558a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800555a:	f107 0308 	add.w	r3, r7, #8
 800555e:	461a      	mov	r2, r3
 8005560:	2100      	movs	r1, #0
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 ff66 	bl	8006434 <xQueueReceiveFromISR>
 8005568:	4603      	mov	r3, r0
 800556a:	2b01      	cmp	r3, #1
 800556c:	d001      	beq.n	8005572 <osSemaphoreWait+0x62>
      return osErrorOS;
 800556e:	23ff      	movs	r3, #255	; 0xff
 8005570:	e015      	b.n	800559e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d011      	beq.n	800559c <osSemaphoreWait+0x8c>
 8005578:	4b0b      	ldr	r3, [pc, #44]	; (80055a8 <osSemaphoreWait+0x98>)
 800557a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800557e:	601a      	str	r2, [r3, #0]
 8005580:	f3bf 8f4f 	dsb	sy
 8005584:	f3bf 8f6f 	isb	sy
 8005588:	e008      	b.n	800559c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800558a:	68f9      	ldr	r1, [r7, #12]
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f000 fe49 	bl	8006224 <xQueueSemaphoreTake>
 8005592:	4603      	mov	r3, r0
 8005594:	2b01      	cmp	r3, #1
 8005596:	d001      	beq.n	800559c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005598:	23ff      	movs	r3, #255	; 0xff
 800559a:	e000      	b.n	800559e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3710      	adds	r7, #16
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}
 80055a6:	bf00      	nop
 80055a8:	e000ed04 	.word	0xe000ed04

080055ac <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80055b4:	2300      	movs	r3, #0
 80055b6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80055b8:	2300      	movs	r3, #0
 80055ba:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80055bc:	f7ff fd9a 	bl	80050f4 <inHandlerMode>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d016      	beq.n	80055f4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80055c6:	f107 0308 	add.w	r3, r7, #8
 80055ca:	4619      	mov	r1, r3
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f000 fcc3 	bl	8005f58 <xQueueGiveFromISR>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d001      	beq.n	80055dc <osSemaphoreRelease+0x30>
      return osErrorOS;
 80055d8:	23ff      	movs	r3, #255	; 0xff
 80055da:	e017      	b.n	800560c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d013      	beq.n	800560a <osSemaphoreRelease+0x5e>
 80055e2:	4b0c      	ldr	r3, [pc, #48]	; (8005614 <osSemaphoreRelease+0x68>)
 80055e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055e8:	601a      	str	r2, [r3, #0]
 80055ea:	f3bf 8f4f 	dsb	sy
 80055ee:	f3bf 8f6f 	isb	sy
 80055f2:	e00a      	b.n	800560a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80055f4:	2300      	movs	r3, #0
 80055f6:	2200      	movs	r2, #0
 80055f8:	2100      	movs	r1, #0
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f000 fb1e 	bl	8005c3c <xQueueGenericSend>
 8005600:	4603      	mov	r3, r0
 8005602:	2b01      	cmp	r3, #1
 8005604:	d001      	beq.n	800560a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8005606:	23ff      	movs	r3, #255	; 0xff
 8005608:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800560a:	68fb      	ldr	r3, [r7, #12]
}
 800560c:	4618      	mov	r0, r3
 800560e:	3710      	adds	r7, #16
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}
 8005614:	e000ed04 	.word	0xe000ed04

08005618 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005618:	b590      	push	{r4, r7, lr}
 800561a:	b085      	sub	sp, #20
 800561c:	af02      	add	r7, sp, #8
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d012      	beq.n	8005650 <osMessageCreate+0x38>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00e      	beq.n	8005650 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6818      	ldr	r0, [r3, #0]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6859      	ldr	r1, [r3, #4]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	689a      	ldr	r2, [r3, #8]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	68dc      	ldr	r4, [r3, #12]
 8005642:	2300      	movs	r3, #0
 8005644:	9300      	str	r3, [sp, #0]
 8005646:	4623      	mov	r3, r4
 8005648:	f000 f9dc 	bl	8005a04 <xQueueGenericCreateStatic>
 800564c:	4603      	mov	r3, r0
 800564e:	e008      	b.n	8005662 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6818      	ldr	r0, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	4619      	mov	r1, r3
 800565c:	f000 fa44 	bl	8005ae8 <xQueueGenericCreate>
 8005660:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005662:	4618      	mov	r0, r3
 8005664:	370c      	adds	r7, #12
 8005666:	46bd      	mov	sp, r7
 8005668:	bd90      	pop	{r4, r7, pc}
	...

0800566c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b086      	sub	sp, #24
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005678:	2300      	movs	r3, #0
 800567a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d101      	bne.n	800568a <osMessagePut+0x1e>
    ticks = 1;
 8005686:	2301      	movs	r3, #1
 8005688:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800568a:	f7ff fd33 	bl	80050f4 <inHandlerMode>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d018      	beq.n	80056c6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005694:	f107 0210 	add.w	r2, r7, #16
 8005698:	f107 0108 	add.w	r1, r7, #8
 800569c:	2300      	movs	r3, #0
 800569e:	68f8      	ldr	r0, [r7, #12]
 80056a0:	f000 fbc6 	bl	8005e30 <xQueueGenericSendFromISR>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d001      	beq.n	80056ae <osMessagePut+0x42>
      return osErrorOS;
 80056aa:	23ff      	movs	r3, #255	; 0xff
 80056ac:	e018      	b.n	80056e0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d014      	beq.n	80056de <osMessagePut+0x72>
 80056b4:	4b0c      	ldr	r3, [pc, #48]	; (80056e8 <osMessagePut+0x7c>)
 80056b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ba:	601a      	str	r2, [r3, #0]
 80056bc:	f3bf 8f4f 	dsb	sy
 80056c0:	f3bf 8f6f 	isb	sy
 80056c4:	e00b      	b.n	80056de <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80056c6:	f107 0108 	add.w	r1, r7, #8
 80056ca:	2300      	movs	r3, #0
 80056cc:	697a      	ldr	r2, [r7, #20]
 80056ce:	68f8      	ldr	r0, [r7, #12]
 80056d0:	f000 fab4 	bl	8005c3c <xQueueGenericSend>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d001      	beq.n	80056de <osMessagePut+0x72>
      return osErrorOS;
 80056da:	23ff      	movs	r3, #255	; 0xff
 80056dc:	e000      	b.n	80056e0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3718      	adds	r7, #24
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	e000ed04 	.word	0xe000ed04

080056ec <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80056ec:	b590      	push	{r4, r7, lr}
 80056ee:	b08b      	sub	sp, #44	; 0x2c
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80056fc:	2300      	movs	r3, #0
 80056fe:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10a      	bne.n	800571c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8005706:	2380      	movs	r3, #128	; 0x80
 8005708:	617b      	str	r3, [r7, #20]
    return event;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	461c      	mov	r4, r3
 800570e:	f107 0314 	add.w	r3, r7, #20
 8005712:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005716:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800571a:	e054      	b.n	80057c6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800571c:	2300      	movs	r3, #0
 800571e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005720:	2300      	movs	r3, #0
 8005722:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800572a:	d103      	bne.n	8005734 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800572c:	f04f 33ff 	mov.w	r3, #4294967295
 8005730:	627b      	str	r3, [r7, #36]	; 0x24
 8005732:	e009      	b.n	8005748 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d006      	beq.n	8005748 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800573e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005740:	2b00      	cmp	r3, #0
 8005742:	d101      	bne.n	8005748 <osMessageGet+0x5c>
      ticks = 1;
 8005744:	2301      	movs	r3, #1
 8005746:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005748:	f7ff fcd4 	bl	80050f4 <inHandlerMode>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d01c      	beq.n	800578c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005752:	f107 0220 	add.w	r2, r7, #32
 8005756:	f107 0314 	add.w	r3, r7, #20
 800575a:	3304      	adds	r3, #4
 800575c:	4619      	mov	r1, r3
 800575e:	68b8      	ldr	r0, [r7, #8]
 8005760:	f000 fe68 	bl	8006434 <xQueueReceiveFromISR>
 8005764:	4603      	mov	r3, r0
 8005766:	2b01      	cmp	r3, #1
 8005768:	d102      	bne.n	8005770 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800576a:	2310      	movs	r3, #16
 800576c:	617b      	str	r3, [r7, #20]
 800576e:	e001      	b.n	8005774 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005770:	2300      	movs	r3, #0
 8005772:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005774:	6a3b      	ldr	r3, [r7, #32]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d01d      	beq.n	80057b6 <osMessageGet+0xca>
 800577a:	4b15      	ldr	r3, [pc, #84]	; (80057d0 <osMessageGet+0xe4>)
 800577c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005780:	601a      	str	r2, [r3, #0]
 8005782:	f3bf 8f4f 	dsb	sy
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	e014      	b.n	80057b6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800578c:	f107 0314 	add.w	r3, r7, #20
 8005790:	3304      	adds	r3, #4
 8005792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005794:	4619      	mov	r1, r3
 8005796:	68b8      	ldr	r0, [r7, #8]
 8005798:	f000 fc68 	bl	800606c <xQueueReceive>
 800579c:	4603      	mov	r3, r0
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d102      	bne.n	80057a8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80057a2:	2310      	movs	r3, #16
 80057a4:	617b      	str	r3, [r7, #20]
 80057a6:	e006      	b.n	80057b6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80057a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d101      	bne.n	80057b2 <osMessageGet+0xc6>
 80057ae:	2300      	movs	r3, #0
 80057b0:	e000      	b.n	80057b4 <osMessageGet+0xc8>
 80057b2:	2340      	movs	r3, #64	; 0x40
 80057b4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	461c      	mov	r4, r3
 80057ba:	f107 0314 	add.w	r3, r7, #20
 80057be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80057c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80057c6:	68f8      	ldr	r0, [r7, #12]
 80057c8:	372c      	adds	r7, #44	; 0x2c
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd90      	pop	{r4, r7, pc}
 80057ce:	bf00      	nop
 80057d0:	e000ed04 	.word	0xe000ed04

080057d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f103 0208 	add.w	r2, r3, #8
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f04f 32ff 	mov.w	r2, #4294967295
 80057ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f103 0208 	add.w	r2, r3, #8
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f103 0208 	add.w	r2, r3, #8
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005808:	bf00      	nop
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	bc80      	pop	{r7}
 8005810:	4770      	bx	lr

08005812 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005812:	b480      	push	{r7}
 8005814:	b083      	sub	sp, #12
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005820:	bf00      	nop
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	bc80      	pop	{r7}
 8005828:	4770      	bx	lr

0800582a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800582a:	b480      	push	{r7}
 800582c:	b085      	sub	sp, #20
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
 8005832:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	689a      	ldr	r2, [r3, #8]
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	683a      	ldr	r2, [r7, #0]
 800584e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	683a      	ldr	r2, [r7, #0]
 8005854:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	1c5a      	adds	r2, r3, #1
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	601a      	str	r2, [r3, #0]
}
 8005866:	bf00      	nop
 8005868:	3714      	adds	r7, #20
 800586a:	46bd      	mov	sp, r7
 800586c:	bc80      	pop	{r7}
 800586e:	4770      	bx	lr

08005870 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005870:	b480      	push	{r7}
 8005872:	b085      	sub	sp, #20
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005886:	d103      	bne.n	8005890 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	60fb      	str	r3, [r7, #12]
 800588e:	e00c      	b.n	80058aa <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	3308      	adds	r3, #8
 8005894:	60fb      	str	r3, [r7, #12]
 8005896:	e002      	b.n	800589e <vListInsert+0x2e>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	60fb      	str	r3, [r7, #12]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68ba      	ldr	r2, [r7, #8]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d2f6      	bcs.n	8005898 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	685a      	ldr	r2, [r3, #4]
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	683a      	ldr	r2, [r7, #0]
 80058c4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	1c5a      	adds	r2, r3, #1
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	601a      	str	r2, [r3, #0]
}
 80058d6:	bf00      	nop
 80058d8:	3714      	adds	r7, #20
 80058da:	46bd      	mov	sp, r7
 80058dc:	bc80      	pop	{r7}
 80058de:	4770      	bx	lr

080058e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	6892      	ldr	r2, [r2, #8]
 80058f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	6852      	ldr	r2, [r2, #4]
 8005900:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	429a      	cmp	r2, r3
 800590a:	d103      	bne.n	8005914 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	689a      	ldr	r2, [r3, #8]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	1e5a      	subs	r2, r3, #1
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
}
 8005928:	4618      	mov	r0, r3
 800592a:	3714      	adds	r7, #20
 800592c:	46bd      	mov	sp, r7
 800592e:	bc80      	pop	{r7}
 8005930:	4770      	bx	lr
	...

08005934 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d109      	bne.n	800595c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800594c:	f383 8811 	msr	BASEPRI, r3
 8005950:	f3bf 8f6f 	isb	sy
 8005954:	f3bf 8f4f 	dsb	sy
 8005958:	60bb      	str	r3, [r7, #8]
 800595a:	e7fe      	b.n	800595a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800595c:	f002 fc3c 	bl	80081d8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005968:	68f9      	ldr	r1, [r7, #12]
 800596a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800596c:	fb01 f303 	mul.w	r3, r1, r3
 8005970:	441a      	add	r2, r3
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2200      	movs	r2, #0
 800597a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800598c:	3b01      	subs	r3, #1
 800598e:	68f9      	ldr	r1, [r7, #12]
 8005990:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005992:	fb01 f303 	mul.w	r3, r1, r3
 8005996:	441a      	add	r2, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	22ff      	movs	r2, #255	; 0xff
 80059a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	22ff      	movs	r2, #255	; 0xff
 80059a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d114      	bne.n	80059dc <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d01a      	beq.n	80059f0 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	3310      	adds	r3, #16
 80059be:	4618      	mov	r0, r3
 80059c0:	f001 fb84 	bl	80070cc <xTaskRemoveFromEventList>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d012      	beq.n	80059f0 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80059ca:	4b0d      	ldr	r3, [pc, #52]	; (8005a00 <xQueueGenericReset+0xcc>)
 80059cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059d0:	601a      	str	r2, [r3, #0]
 80059d2:	f3bf 8f4f 	dsb	sy
 80059d6:	f3bf 8f6f 	isb	sy
 80059da:	e009      	b.n	80059f0 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	3310      	adds	r3, #16
 80059e0:	4618      	mov	r0, r3
 80059e2:	f7ff fef7 	bl	80057d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	3324      	adds	r3, #36	; 0x24
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7ff fef2 	bl	80057d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80059f0:	f002 fc20 	bl	8008234 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80059f4:	2301      	movs	r3, #1
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3710      	adds	r7, #16
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	e000ed04 	.word	0xe000ed04

08005a04 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b08e      	sub	sp, #56	; 0x38
 8005a08:	af02      	add	r7, sp, #8
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
 8005a10:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d109      	bne.n	8005a2c <xQueueGenericCreateStatic+0x28>
 8005a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1c:	f383 8811 	msr	BASEPRI, r3
 8005a20:	f3bf 8f6f 	isb	sy
 8005a24:	f3bf 8f4f 	dsb	sy
 8005a28:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a2a:	e7fe      	b.n	8005a2a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d109      	bne.n	8005a46 <xQueueGenericCreateStatic+0x42>
 8005a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a36:	f383 8811 	msr	BASEPRI, r3
 8005a3a:	f3bf 8f6f 	isb	sy
 8005a3e:	f3bf 8f4f 	dsb	sy
 8005a42:	627b      	str	r3, [r7, #36]	; 0x24
 8005a44:	e7fe      	b.n	8005a44 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d002      	beq.n	8005a52 <xQueueGenericCreateStatic+0x4e>
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d001      	beq.n	8005a56 <xQueueGenericCreateStatic+0x52>
 8005a52:	2301      	movs	r3, #1
 8005a54:	e000      	b.n	8005a58 <xQueueGenericCreateStatic+0x54>
 8005a56:	2300      	movs	r3, #0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d109      	bne.n	8005a70 <xQueueGenericCreateStatic+0x6c>
 8005a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a60:	f383 8811 	msr	BASEPRI, r3
 8005a64:	f3bf 8f6f 	isb	sy
 8005a68:	f3bf 8f4f 	dsb	sy
 8005a6c:	623b      	str	r3, [r7, #32]
 8005a6e:	e7fe      	b.n	8005a6e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d102      	bne.n	8005a7c <xQueueGenericCreateStatic+0x78>
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d101      	bne.n	8005a80 <xQueueGenericCreateStatic+0x7c>
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e000      	b.n	8005a82 <xQueueGenericCreateStatic+0x7e>
 8005a80:	2300      	movs	r3, #0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d109      	bne.n	8005a9a <xQueueGenericCreateStatic+0x96>
 8005a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8a:	f383 8811 	msr	BASEPRI, r3
 8005a8e:	f3bf 8f6f 	isb	sy
 8005a92:	f3bf 8f4f 	dsb	sy
 8005a96:	61fb      	str	r3, [r7, #28]
 8005a98:	e7fe      	b.n	8005a98 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005a9a:	2348      	movs	r3, #72	; 0x48
 8005a9c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	2b48      	cmp	r3, #72	; 0x48
 8005aa2:	d009      	beq.n	8005ab8 <xQueueGenericCreateStatic+0xb4>
 8005aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa8:	f383 8811 	msr	BASEPRI, r3
 8005aac:	f3bf 8f6f 	isb	sy
 8005ab0:	f3bf 8f4f 	dsb	sy
 8005ab4:	61bb      	str	r3, [r7, #24]
 8005ab6:	e7fe      	b.n	8005ab6 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00d      	beq.n	8005ade <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005aca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ad0:	9300      	str	r3, [sp, #0]
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	687a      	ldr	r2, [r7, #4]
 8005ad6:	68b9      	ldr	r1, [r7, #8]
 8005ad8:	68f8      	ldr	r0, [r7, #12]
 8005ada:	f000 f842 	bl	8005b62 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3730      	adds	r7, #48	; 0x30
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b08a      	sub	sp, #40	; 0x28
 8005aec:	af02      	add	r7, sp, #8
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	4613      	mov	r3, r2
 8005af4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d109      	bne.n	8005b10 <xQueueGenericCreate+0x28>
 8005afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b00:	f383 8811 	msr	BASEPRI, r3
 8005b04:	f3bf 8f6f 	isb	sy
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	613b      	str	r3, [r7, #16]
 8005b0e:	e7fe      	b.n	8005b0e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d102      	bne.n	8005b1c <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005b16:	2300      	movs	r3, #0
 8005b18:	61fb      	str	r3, [r7, #28]
 8005b1a:	e004      	b.n	8005b26 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	68ba      	ldr	r2, [r7, #8]
 8005b20:	fb02 f303 	mul.w	r3, r2, r3
 8005b24:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	3348      	adds	r3, #72	; 0x48
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f002 fc4a 	bl	80083c4 <pvPortMalloc>
 8005b30:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d00f      	beq.n	8005b58 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	3348      	adds	r3, #72	; 0x48
 8005b3c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005b46:	79fa      	ldrb	r2, [r7, #7]
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	9300      	str	r3, [sp, #0]
 8005b4c:	4613      	mov	r3, r2
 8005b4e:	697a      	ldr	r2, [r7, #20]
 8005b50:	68b9      	ldr	r1, [r7, #8]
 8005b52:	68f8      	ldr	r0, [r7, #12]
 8005b54:	f000 f805 	bl	8005b62 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005b58:	69bb      	ldr	r3, [r7, #24]
	}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3720      	adds	r7, #32
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b084      	sub	sp, #16
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	60f8      	str	r0, [r7, #12]
 8005b6a:	60b9      	str	r1, [r7, #8]
 8005b6c:	607a      	str	r2, [r7, #4]
 8005b6e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d103      	bne.n	8005b7e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	69ba      	ldr	r2, [r7, #24]
 8005b7a:	601a      	str	r2, [r3, #0]
 8005b7c:	e002      	b.n	8005b84 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	68ba      	ldr	r2, [r7, #8]
 8005b8e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005b90:	2101      	movs	r1, #1
 8005b92:	69b8      	ldr	r0, [r7, #24]
 8005b94:	f7ff fece 	bl	8005934 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005b98:	bf00      	nop
 8005b9a:	3710      	adds	r7, #16
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00e      	beq.n	8005bcc <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	2100      	movs	r1, #0
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 f838 	bl	8005c3c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005bcc:	bf00      	nop
 8005bce:	3708      	adds	r7, #8
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b086      	sub	sp, #24
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	4603      	mov	r3, r0
 8005bdc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005bde:	2301      	movs	r3, #1
 8005be0:	617b      	str	r3, [r7, #20]
 8005be2:	2300      	movs	r3, #0
 8005be4:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005be6:	79fb      	ldrb	r3, [r7, #7]
 8005be8:	461a      	mov	r2, r3
 8005bea:	6939      	ldr	r1, [r7, #16]
 8005bec:	6978      	ldr	r0, [r7, #20]
 8005bee:	f7ff ff7b 	bl	8005ae8 <xQueueGenericCreate>
 8005bf2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8005bf4:	68f8      	ldr	r0, [r7, #12]
 8005bf6:	f7ff ffd3 	bl	8005ba0 <prvInitialiseMutex>

		return pxNewQueue;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
	}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3718      	adds	r7, #24
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b088      	sub	sp, #32
 8005c08:	af02      	add	r7, sp, #8
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	6039      	str	r1, [r7, #0]
 8005c0e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005c10:	2301      	movs	r3, #1
 8005c12:	617b      	str	r3, [r7, #20]
 8005c14:	2300      	movs	r3, #0
 8005c16:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005c18:	79fb      	ldrb	r3, [r7, #7]
 8005c1a:	9300      	str	r3, [sp, #0]
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	6939      	ldr	r1, [r7, #16]
 8005c22:	6978      	ldr	r0, [r7, #20]
 8005c24:	f7ff feee 	bl	8005a04 <xQueueGenericCreateStatic>
 8005c28:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	f7ff ffb8 	bl	8005ba0 <prvInitialiseMutex>

		return pxNewQueue;
 8005c30:	68fb      	ldr	r3, [r7, #12]
	}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3718      	adds	r7, #24
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
	...

08005c3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b08e      	sub	sp, #56	; 0x38
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	607a      	str	r2, [r7, #4]
 8005c48:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d109      	bne.n	8005c6c <xQueueGenericSend+0x30>
 8005c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5c:	f383 8811 	msr	BASEPRI, r3
 8005c60:	f3bf 8f6f 	isb	sy
 8005c64:	f3bf 8f4f 	dsb	sy
 8005c68:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c6a:	e7fe      	b.n	8005c6a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d103      	bne.n	8005c7a <xQueueGenericSend+0x3e>
 8005c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d101      	bne.n	8005c7e <xQueueGenericSend+0x42>
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e000      	b.n	8005c80 <xQueueGenericSend+0x44>
 8005c7e:	2300      	movs	r3, #0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d109      	bne.n	8005c98 <xQueueGenericSend+0x5c>
 8005c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c88:	f383 8811 	msr	BASEPRI, r3
 8005c8c:	f3bf 8f6f 	isb	sy
 8005c90:	f3bf 8f4f 	dsb	sy
 8005c94:	627b      	str	r3, [r7, #36]	; 0x24
 8005c96:	e7fe      	b.n	8005c96 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d103      	bne.n	8005ca6 <xQueueGenericSend+0x6a>
 8005c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d101      	bne.n	8005caa <xQueueGenericSend+0x6e>
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e000      	b.n	8005cac <xQueueGenericSend+0x70>
 8005caa:	2300      	movs	r3, #0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d109      	bne.n	8005cc4 <xQueueGenericSend+0x88>
 8005cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb4:	f383 8811 	msr	BASEPRI, r3
 8005cb8:	f3bf 8f6f 	isb	sy
 8005cbc:	f3bf 8f4f 	dsb	sy
 8005cc0:	623b      	str	r3, [r7, #32]
 8005cc2:	e7fe      	b.n	8005cc2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005cc4:	f001 fbbc 	bl	8007440 <xTaskGetSchedulerState>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d102      	bne.n	8005cd4 <xQueueGenericSend+0x98>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d101      	bne.n	8005cd8 <xQueueGenericSend+0x9c>
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e000      	b.n	8005cda <xQueueGenericSend+0x9e>
 8005cd8:	2300      	movs	r3, #0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d109      	bne.n	8005cf2 <xQueueGenericSend+0xb6>
 8005cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce2:	f383 8811 	msr	BASEPRI, r3
 8005ce6:	f3bf 8f6f 	isb	sy
 8005cea:	f3bf 8f4f 	dsb	sy
 8005cee:	61fb      	str	r3, [r7, #28]
 8005cf0:	e7fe      	b.n	8005cf0 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005cf2:	f002 fa71 	bl	80081d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d302      	bcc.n	8005d08 <xQueueGenericSend+0xcc>
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d129      	bne.n	8005d5c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d08:	683a      	ldr	r2, [r7, #0]
 8005d0a:	68b9      	ldr	r1, [r7, #8]
 8005d0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d0e:	f000 fc25 	bl	800655c <prvCopyDataToQueue>
 8005d12:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d010      	beq.n	8005d3e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d1e:	3324      	adds	r3, #36	; 0x24
 8005d20:	4618      	mov	r0, r3
 8005d22:	f001 f9d3 	bl	80070cc <xTaskRemoveFromEventList>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d013      	beq.n	8005d54 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005d2c:	4b3f      	ldr	r3, [pc, #252]	; (8005e2c <xQueueGenericSend+0x1f0>)
 8005d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d32:	601a      	str	r2, [r3, #0]
 8005d34:	f3bf 8f4f 	dsb	sy
 8005d38:	f3bf 8f6f 	isb	sy
 8005d3c:	e00a      	b.n	8005d54 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d007      	beq.n	8005d54 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005d44:	4b39      	ldr	r3, [pc, #228]	; (8005e2c <xQueueGenericSend+0x1f0>)
 8005d46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d4a:	601a      	str	r2, [r3, #0]
 8005d4c:	f3bf 8f4f 	dsb	sy
 8005d50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005d54:	f002 fa6e 	bl	8008234 <vPortExitCritical>
				return pdPASS;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e063      	b.n	8005e24 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d103      	bne.n	8005d6a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d62:	f002 fa67 	bl	8008234 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005d66:	2300      	movs	r3, #0
 8005d68:	e05c      	b.n	8005e24 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d106      	bne.n	8005d7e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d70:	f107 0314 	add.w	r3, r7, #20
 8005d74:	4618      	mov	r0, r3
 8005d76:	f001 fa0b 	bl	8007190 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d7e:	f002 fa59 	bl	8008234 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d82:	f000 ff75 	bl	8006c70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d86:	f002 fa27 	bl	80081d8 <vPortEnterCritical>
 8005d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d90:	b25b      	sxtb	r3, r3
 8005d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d96:	d103      	bne.n	8005da0 <xQueueGenericSend+0x164>
 8005d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005da6:	b25b      	sxtb	r3, r3
 8005da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dac:	d103      	bne.n	8005db6 <xQueueGenericSend+0x17a>
 8005dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005db6:	f002 fa3d 	bl	8008234 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005dba:	1d3a      	adds	r2, r7, #4
 8005dbc:	f107 0314 	add.w	r3, r7, #20
 8005dc0:	4611      	mov	r1, r2
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f001 f9fa 	bl	80071bc <xTaskCheckForTimeOut>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d124      	bne.n	8005e18 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005dce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dd0:	f000 fcbc 	bl	800674c <prvIsQueueFull>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d018      	beq.n	8005e0c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ddc:	3310      	adds	r3, #16
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	4611      	mov	r1, r2
 8005de2:	4618      	mov	r0, r3
 8005de4:	f001 f924 	bl	8007030 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005de8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dea:	f000 fc47 	bl	800667c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005dee:	f000 ff4d 	bl	8006c8c <xTaskResumeAll>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f47f af7c 	bne.w	8005cf2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8005dfa:	4b0c      	ldr	r3, [pc, #48]	; (8005e2c <xQueueGenericSend+0x1f0>)
 8005dfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e00:	601a      	str	r2, [r3, #0]
 8005e02:	f3bf 8f4f 	dsb	sy
 8005e06:	f3bf 8f6f 	isb	sy
 8005e0a:	e772      	b.n	8005cf2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005e0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e0e:	f000 fc35 	bl	800667c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e12:	f000 ff3b 	bl	8006c8c <xTaskResumeAll>
 8005e16:	e76c      	b.n	8005cf2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005e18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e1a:	f000 fc2f 	bl	800667c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e1e:	f000 ff35 	bl	8006c8c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005e22:	2300      	movs	r3, #0
		}
	}
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3738      	adds	r7, #56	; 0x38
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	e000ed04 	.word	0xe000ed04

08005e30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b08e      	sub	sp, #56	; 0x38
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]
 8005e3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d109      	bne.n	8005e5c <xQueueGenericSendFromISR+0x2c>
 8005e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4c:	f383 8811 	msr	BASEPRI, r3
 8005e50:	f3bf 8f6f 	isb	sy
 8005e54:	f3bf 8f4f 	dsb	sy
 8005e58:	627b      	str	r3, [r7, #36]	; 0x24
 8005e5a:	e7fe      	b.n	8005e5a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d103      	bne.n	8005e6a <xQueueGenericSendFromISR+0x3a>
 8005e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d101      	bne.n	8005e6e <xQueueGenericSendFromISR+0x3e>
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e000      	b.n	8005e70 <xQueueGenericSendFromISR+0x40>
 8005e6e:	2300      	movs	r3, #0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d109      	bne.n	8005e88 <xQueueGenericSendFromISR+0x58>
 8005e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e78:	f383 8811 	msr	BASEPRI, r3
 8005e7c:	f3bf 8f6f 	isb	sy
 8005e80:	f3bf 8f4f 	dsb	sy
 8005e84:	623b      	str	r3, [r7, #32]
 8005e86:	e7fe      	b.n	8005e86 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d103      	bne.n	8005e96 <xQueueGenericSendFromISR+0x66>
 8005e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d101      	bne.n	8005e9a <xQueueGenericSendFromISR+0x6a>
 8005e96:	2301      	movs	r3, #1
 8005e98:	e000      	b.n	8005e9c <xQueueGenericSendFromISR+0x6c>
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d109      	bne.n	8005eb4 <xQueueGenericSendFromISR+0x84>
 8005ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea4:	f383 8811 	msr	BASEPRI, r3
 8005ea8:	f3bf 8f6f 	isb	sy
 8005eac:	f3bf 8f4f 	dsb	sy
 8005eb0:	61fb      	str	r3, [r7, #28]
 8005eb2:	e7fe      	b.n	8005eb2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005eb4:	f002 fa4a 	bl	800834c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005eb8:	f3ef 8211 	mrs	r2, BASEPRI
 8005ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec0:	f383 8811 	msr	BASEPRI, r3
 8005ec4:	f3bf 8f6f 	isb	sy
 8005ec8:	f3bf 8f4f 	dsb	sy
 8005ecc:	61ba      	str	r2, [r7, #24]
 8005ece:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005ed0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d302      	bcc.n	8005ee6 <xQueueGenericSendFromISR+0xb6>
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d12c      	bne.n	8005f40 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005eec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ef0:	683a      	ldr	r2, [r7, #0]
 8005ef2:	68b9      	ldr	r1, [r7, #8]
 8005ef4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ef6:	f000 fb31 	bl	800655c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005efa:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f02:	d112      	bne.n	8005f2a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d016      	beq.n	8005f3a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0e:	3324      	adds	r3, #36	; 0x24
 8005f10:	4618      	mov	r0, r3
 8005f12:	f001 f8db 	bl	80070cc <xTaskRemoveFromEventList>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00e      	beq.n	8005f3a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00b      	beq.n	8005f3a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2201      	movs	r2, #1
 8005f26:	601a      	str	r2, [r3, #0]
 8005f28:	e007      	b.n	8005f3a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005f2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005f2e:	3301      	adds	r3, #1
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	b25a      	sxtb	r2, r3
 8005f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8005f3e:	e001      	b.n	8005f44 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005f40:	2300      	movs	r3, #0
 8005f42:	637b      	str	r3, [r7, #52]	; 0x34
 8005f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f46:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3738      	adds	r7, #56	; 0x38
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b08e      	sub	sp, #56	; 0x38
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d109      	bne.n	8005f80 <xQueueGiveFromISR+0x28>
	__asm volatile
 8005f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f70:	f383 8811 	msr	BASEPRI, r3
 8005f74:	f3bf 8f6f 	isb	sy
 8005f78:	f3bf 8f4f 	dsb	sy
 8005f7c:	623b      	str	r3, [r7, #32]
 8005f7e:	e7fe      	b.n	8005f7e <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d009      	beq.n	8005f9c <xQueueGiveFromISR+0x44>
 8005f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f8c:	f383 8811 	msr	BASEPRI, r3
 8005f90:	f3bf 8f6f 	isb	sy
 8005f94:	f3bf 8f4f 	dsb	sy
 8005f98:	61fb      	str	r3, [r7, #28]
 8005f9a:	e7fe      	b.n	8005f9a <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8005f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d103      	bne.n	8005fac <xQueueGiveFromISR+0x54>
 8005fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d101      	bne.n	8005fb0 <xQueueGiveFromISR+0x58>
 8005fac:	2301      	movs	r3, #1
 8005fae:	e000      	b.n	8005fb2 <xQueueGiveFromISR+0x5a>
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d109      	bne.n	8005fca <xQueueGiveFromISR+0x72>
 8005fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fba:	f383 8811 	msr	BASEPRI, r3
 8005fbe:	f3bf 8f6f 	isb	sy
 8005fc2:	f3bf 8f4f 	dsb	sy
 8005fc6:	61bb      	str	r3, [r7, #24]
 8005fc8:	e7fe      	b.n	8005fc8 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005fca:	f002 f9bf 	bl	800834c <vPortValidateInterruptPriority>
	__asm volatile
 8005fce:	f3ef 8211 	mrs	r2, BASEPRI
 8005fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd6:	f383 8811 	msr	BASEPRI, r3
 8005fda:	f3bf 8f6f 	isb	sy
 8005fde:	f3bf 8f4f 	dsb	sy
 8005fe2:	617a      	str	r2, [r7, #20]
 8005fe4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005fe6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ff4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d22b      	bcs.n	8006052 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006000:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006006:	1c5a      	adds	r2, r3, #1
 8006008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800600a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800600c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006014:	d112      	bne.n	800603c <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601a:	2b00      	cmp	r3, #0
 800601c:	d016      	beq.n	800604c <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800601e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006020:	3324      	adds	r3, #36	; 0x24
 8006022:	4618      	mov	r0, r3
 8006024:	f001 f852 	bl	80070cc <xTaskRemoveFromEventList>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00e      	beq.n	800604c <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d00b      	beq.n	800604c <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	2201      	movs	r2, #1
 8006038:	601a      	str	r2, [r3, #0]
 800603a:	e007      	b.n	800604c <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800603c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006040:	3301      	adds	r3, #1
 8006042:	b2db      	uxtb	r3, r3
 8006044:	b25a      	sxtb	r2, r3
 8006046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006048:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800604c:	2301      	movs	r3, #1
 800604e:	637b      	str	r3, [r7, #52]	; 0x34
 8006050:	e001      	b.n	8006056 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006052:	2300      	movs	r3, #0
 8006054:	637b      	str	r3, [r7, #52]	; 0x34
 8006056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006058:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006062:	4618      	mov	r0, r3
 8006064:	3738      	adds	r7, #56	; 0x38
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}
	...

0800606c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b08c      	sub	sp, #48	; 0x30
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006078:	2300      	movs	r3, #0
 800607a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006082:	2b00      	cmp	r3, #0
 8006084:	d109      	bne.n	800609a <xQueueReceive+0x2e>
	__asm volatile
 8006086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608a:	f383 8811 	msr	BASEPRI, r3
 800608e:	f3bf 8f6f 	isb	sy
 8006092:	f3bf 8f4f 	dsb	sy
 8006096:	623b      	str	r3, [r7, #32]
 8006098:	e7fe      	b.n	8006098 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d103      	bne.n	80060a8 <xQueueReceive+0x3c>
 80060a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d101      	bne.n	80060ac <xQueueReceive+0x40>
 80060a8:	2301      	movs	r3, #1
 80060aa:	e000      	b.n	80060ae <xQueueReceive+0x42>
 80060ac:	2300      	movs	r3, #0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d109      	bne.n	80060c6 <xQueueReceive+0x5a>
 80060b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b6:	f383 8811 	msr	BASEPRI, r3
 80060ba:	f3bf 8f6f 	isb	sy
 80060be:	f3bf 8f4f 	dsb	sy
 80060c2:	61fb      	str	r3, [r7, #28]
 80060c4:	e7fe      	b.n	80060c4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060c6:	f001 f9bb 	bl	8007440 <xTaskGetSchedulerState>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d102      	bne.n	80060d6 <xQueueReceive+0x6a>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d101      	bne.n	80060da <xQueueReceive+0x6e>
 80060d6:	2301      	movs	r3, #1
 80060d8:	e000      	b.n	80060dc <xQueueReceive+0x70>
 80060da:	2300      	movs	r3, #0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d109      	bne.n	80060f4 <xQueueReceive+0x88>
 80060e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e4:	f383 8811 	msr	BASEPRI, r3
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	61bb      	str	r3, [r7, #24]
 80060f2:	e7fe      	b.n	80060f2 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80060f4:	f002 f870 	bl	80081d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006100:	2b00      	cmp	r3, #0
 8006102:	d01f      	beq.n	8006144 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006104:	68b9      	ldr	r1, [r7, #8]
 8006106:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006108:	f000 fa92 	bl	8006630 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800610c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610e:	1e5a      	subs	r2, r3, #1
 8006110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006112:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d00f      	beq.n	800613c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800611c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611e:	3310      	adds	r3, #16
 8006120:	4618      	mov	r0, r3
 8006122:	f000 ffd3 	bl	80070cc <xTaskRemoveFromEventList>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d007      	beq.n	800613c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800612c:	4b3c      	ldr	r3, [pc, #240]	; (8006220 <xQueueReceive+0x1b4>)
 800612e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006132:	601a      	str	r2, [r3, #0]
 8006134:	f3bf 8f4f 	dsb	sy
 8006138:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800613c:	f002 f87a 	bl	8008234 <vPortExitCritical>
				return pdPASS;
 8006140:	2301      	movs	r3, #1
 8006142:	e069      	b.n	8006218 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d103      	bne.n	8006152 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800614a:	f002 f873 	bl	8008234 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800614e:	2300      	movs	r3, #0
 8006150:	e062      	b.n	8006218 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006154:	2b00      	cmp	r3, #0
 8006156:	d106      	bne.n	8006166 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006158:	f107 0310 	add.w	r3, r7, #16
 800615c:	4618      	mov	r0, r3
 800615e:	f001 f817 	bl	8007190 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006162:	2301      	movs	r3, #1
 8006164:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006166:	f002 f865 	bl	8008234 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800616a:	f000 fd81 	bl	8006c70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800616e:	f002 f833 	bl	80081d8 <vPortEnterCritical>
 8006172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006174:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006178:	b25b      	sxtb	r3, r3
 800617a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800617e:	d103      	bne.n	8006188 <xQueueReceive+0x11c>
 8006180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006182:	2200      	movs	r2, #0
 8006184:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800618e:	b25b      	sxtb	r3, r3
 8006190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006194:	d103      	bne.n	800619e <xQueueReceive+0x132>
 8006196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006198:	2200      	movs	r2, #0
 800619a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800619e:	f002 f849 	bl	8008234 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061a2:	1d3a      	adds	r2, r7, #4
 80061a4:	f107 0310 	add.w	r3, r7, #16
 80061a8:	4611      	mov	r1, r2
 80061aa:	4618      	mov	r0, r3
 80061ac:	f001 f806 	bl	80071bc <xTaskCheckForTimeOut>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d123      	bne.n	80061fe <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80061b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061b8:	f000 fab2 	bl	8006720 <prvIsQueueEmpty>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d017      	beq.n	80061f2 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80061c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c4:	3324      	adds	r3, #36	; 0x24
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	4611      	mov	r1, r2
 80061ca:	4618      	mov	r0, r3
 80061cc:	f000 ff30 	bl	8007030 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80061d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061d2:	f000 fa53 	bl	800667c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80061d6:	f000 fd59 	bl	8006c8c <xTaskResumeAll>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d189      	bne.n	80060f4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80061e0:	4b0f      	ldr	r3, [pc, #60]	; (8006220 <xQueueReceive+0x1b4>)
 80061e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061e6:	601a      	str	r2, [r3, #0]
 80061e8:	f3bf 8f4f 	dsb	sy
 80061ec:	f3bf 8f6f 	isb	sy
 80061f0:	e780      	b.n	80060f4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80061f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061f4:	f000 fa42 	bl	800667c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80061f8:	f000 fd48 	bl	8006c8c <xTaskResumeAll>
 80061fc:	e77a      	b.n	80060f4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80061fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006200:	f000 fa3c 	bl	800667c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006204:	f000 fd42 	bl	8006c8c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006208:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800620a:	f000 fa89 	bl	8006720 <prvIsQueueEmpty>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	f43f af6f 	beq.w	80060f4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006216:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006218:	4618      	mov	r0, r3
 800621a:	3730      	adds	r7, #48	; 0x30
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}
 8006220:	e000ed04 	.word	0xe000ed04

08006224 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b08e      	sub	sp, #56	; 0x38
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800622e:	2300      	movs	r3, #0
 8006230:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006236:	2300      	movs	r3, #0
 8006238:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800623a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800623c:	2b00      	cmp	r3, #0
 800623e:	d109      	bne.n	8006254 <xQueueSemaphoreTake+0x30>
 8006240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006244:	f383 8811 	msr	BASEPRI, r3
 8006248:	f3bf 8f6f 	isb	sy
 800624c:	f3bf 8f4f 	dsb	sy
 8006250:	623b      	str	r3, [r7, #32]
 8006252:	e7fe      	b.n	8006252 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006258:	2b00      	cmp	r3, #0
 800625a:	d009      	beq.n	8006270 <xQueueSemaphoreTake+0x4c>
 800625c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006260:	f383 8811 	msr	BASEPRI, r3
 8006264:	f3bf 8f6f 	isb	sy
 8006268:	f3bf 8f4f 	dsb	sy
 800626c:	61fb      	str	r3, [r7, #28]
 800626e:	e7fe      	b.n	800626e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006270:	f001 f8e6 	bl	8007440 <xTaskGetSchedulerState>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d102      	bne.n	8006280 <xQueueSemaphoreTake+0x5c>
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d101      	bne.n	8006284 <xQueueSemaphoreTake+0x60>
 8006280:	2301      	movs	r3, #1
 8006282:	e000      	b.n	8006286 <xQueueSemaphoreTake+0x62>
 8006284:	2300      	movs	r3, #0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d109      	bne.n	800629e <xQueueSemaphoreTake+0x7a>
 800628a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800628e:	f383 8811 	msr	BASEPRI, r3
 8006292:	f3bf 8f6f 	isb	sy
 8006296:	f3bf 8f4f 	dsb	sy
 800629a:	61bb      	str	r3, [r7, #24]
 800629c:	e7fe      	b.n	800629c <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800629e:	f001 ff9b 	bl	80081d8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80062a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80062a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d024      	beq.n	80062f8 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80062ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b0:	1e5a      	subs	r2, r3, #1
 80062b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80062b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d104      	bne.n	80062c8 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80062be:	f001 fa85 	bl	80077cc <pvTaskIncrementMutexHeldCount>
 80062c2:	4602      	mov	r2, r0
 80062c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c6:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d00f      	beq.n	80062f0 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d2:	3310      	adds	r3, #16
 80062d4:	4618      	mov	r0, r3
 80062d6:	f000 fef9 	bl	80070cc <xTaskRemoveFromEventList>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d007      	beq.n	80062f0 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80062e0:	4b53      	ldr	r3, [pc, #332]	; (8006430 <xQueueSemaphoreTake+0x20c>)
 80062e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062e6:	601a      	str	r2, [r3, #0]
 80062e8:	f3bf 8f4f 	dsb	sy
 80062ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80062f0:	f001 ffa0 	bl	8008234 <vPortExitCritical>
				return pdPASS;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e096      	b.n	8006426 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d110      	bne.n	8006320 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80062fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006300:	2b00      	cmp	r3, #0
 8006302:	d009      	beq.n	8006318 <xQueueSemaphoreTake+0xf4>
 8006304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006308:	f383 8811 	msr	BASEPRI, r3
 800630c:	f3bf 8f6f 	isb	sy
 8006310:	f3bf 8f4f 	dsb	sy
 8006314:	617b      	str	r3, [r7, #20]
 8006316:	e7fe      	b.n	8006316 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006318:	f001 ff8c 	bl	8008234 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800631c:	2300      	movs	r3, #0
 800631e:	e082      	b.n	8006426 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006322:	2b00      	cmp	r3, #0
 8006324:	d106      	bne.n	8006334 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006326:	f107 030c 	add.w	r3, r7, #12
 800632a:	4618      	mov	r0, r3
 800632c:	f000 ff30 	bl	8007190 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006330:	2301      	movs	r3, #1
 8006332:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006334:	f001 ff7e 	bl	8008234 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006338:	f000 fc9a 	bl	8006c70 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800633c:	f001 ff4c 	bl	80081d8 <vPortEnterCritical>
 8006340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006342:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006346:	b25b      	sxtb	r3, r3
 8006348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800634c:	d103      	bne.n	8006356 <xQueueSemaphoreTake+0x132>
 800634e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006350:	2200      	movs	r2, #0
 8006352:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006358:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800635c:	b25b      	sxtb	r3, r3
 800635e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006362:	d103      	bne.n	800636c <xQueueSemaphoreTake+0x148>
 8006364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006366:	2200      	movs	r2, #0
 8006368:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800636c:	f001 ff62 	bl	8008234 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006370:	463a      	mov	r2, r7
 8006372:	f107 030c 	add.w	r3, r7, #12
 8006376:	4611      	mov	r1, r2
 8006378:	4618      	mov	r0, r3
 800637a:	f000 ff1f 	bl	80071bc <xTaskCheckForTimeOut>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d132      	bne.n	80063ea <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006384:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006386:	f000 f9cb 	bl	8006720 <prvIsQueueEmpty>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d026      	beq.n	80063de <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d109      	bne.n	80063ac <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8006398:	f001 ff1e 	bl	80081d8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800639c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	4618      	mov	r0, r3
 80063a2:	f001 f86b 	bl	800747c <xTaskPriorityInherit>
 80063a6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80063a8:	f001 ff44 	bl	8008234 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80063ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ae:	3324      	adds	r3, #36	; 0x24
 80063b0:	683a      	ldr	r2, [r7, #0]
 80063b2:	4611      	mov	r1, r2
 80063b4:	4618      	mov	r0, r3
 80063b6:	f000 fe3b 	bl	8007030 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80063ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063bc:	f000 f95e 	bl	800667c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80063c0:	f000 fc64 	bl	8006c8c <xTaskResumeAll>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	f47f af69 	bne.w	800629e <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 80063cc:	4b18      	ldr	r3, [pc, #96]	; (8006430 <xQueueSemaphoreTake+0x20c>)
 80063ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063d2:	601a      	str	r2, [r3, #0]
 80063d4:	f3bf 8f4f 	dsb	sy
 80063d8:	f3bf 8f6f 	isb	sy
 80063dc:	e75f      	b.n	800629e <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80063de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063e0:	f000 f94c 	bl	800667c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80063e4:	f000 fc52 	bl	8006c8c <xTaskResumeAll>
 80063e8:	e759      	b.n	800629e <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80063ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063ec:	f000 f946 	bl	800667c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80063f0:	f000 fc4c 	bl	8006c8c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80063f6:	f000 f993 	bl	8006720 <prvIsQueueEmpty>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f43f af4e 	beq.w	800629e <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006404:	2b00      	cmp	r3, #0
 8006406:	d00d      	beq.n	8006424 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8006408:	f001 fee6 	bl	80081d8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800640c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800640e:	f000 f88e 	bl	800652e <prvGetDisinheritPriorityAfterTimeout>
 8006412:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8006414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800641a:	4618      	mov	r0, r3
 800641c:	f001 f938 	bl	8007690 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006420:	f001 ff08 	bl	8008234 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006424:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006426:	4618      	mov	r0, r3
 8006428:	3738      	adds	r7, #56	; 0x38
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	e000ed04 	.word	0xe000ed04

08006434 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b08e      	sub	sp, #56	; 0x38
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006446:	2b00      	cmp	r3, #0
 8006448:	d109      	bne.n	800645e <xQueueReceiveFromISR+0x2a>
 800644a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644e:	f383 8811 	msr	BASEPRI, r3
 8006452:	f3bf 8f6f 	isb	sy
 8006456:	f3bf 8f4f 	dsb	sy
 800645a:	623b      	str	r3, [r7, #32]
 800645c:	e7fe      	b.n	800645c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d103      	bne.n	800646c <xQueueReceiveFromISR+0x38>
 8006464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006468:	2b00      	cmp	r3, #0
 800646a:	d101      	bne.n	8006470 <xQueueReceiveFromISR+0x3c>
 800646c:	2301      	movs	r3, #1
 800646e:	e000      	b.n	8006472 <xQueueReceiveFromISR+0x3e>
 8006470:	2300      	movs	r3, #0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d109      	bne.n	800648a <xQueueReceiveFromISR+0x56>
 8006476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647a:	f383 8811 	msr	BASEPRI, r3
 800647e:	f3bf 8f6f 	isb	sy
 8006482:	f3bf 8f4f 	dsb	sy
 8006486:	61fb      	str	r3, [r7, #28]
 8006488:	e7fe      	b.n	8006488 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800648a:	f001 ff5f 	bl	800834c <vPortValidateInterruptPriority>
	__asm volatile
 800648e:	f3ef 8211 	mrs	r2, BASEPRI
 8006492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006496:	f383 8811 	msr	BASEPRI, r3
 800649a:	f3bf 8f6f 	isb	sy
 800649e:	f3bf 8f4f 	dsb	sy
 80064a2:	61ba      	str	r2, [r7, #24]
 80064a4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80064a6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80064a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ae:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80064b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d02f      	beq.n	8006516 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80064b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80064c0:	68b9      	ldr	r1, [r7, #8]
 80064c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064c4:	f000 f8b4 	bl	8006630 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80064c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ca:	1e5a      	subs	r2, r3, #1
 80064cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ce:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80064d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80064d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d8:	d112      	bne.n	8006500 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d016      	beq.n	8006510 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e4:	3310      	adds	r3, #16
 80064e6:	4618      	mov	r0, r3
 80064e8:	f000 fdf0 	bl	80070cc <xTaskRemoveFromEventList>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00e      	beq.n	8006510 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00b      	beq.n	8006510 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	601a      	str	r2, [r3, #0]
 80064fe:	e007      	b.n	8006510 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006500:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006504:	3301      	adds	r3, #1
 8006506:	b2db      	uxtb	r3, r3
 8006508:	b25a      	sxtb	r2, r3
 800650a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006510:	2301      	movs	r3, #1
 8006512:	637b      	str	r3, [r7, #52]	; 0x34
 8006514:	e001      	b.n	800651a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8006516:	2300      	movs	r3, #0
 8006518:	637b      	str	r3, [r7, #52]	; 0x34
 800651a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800651c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006526:	4618      	mov	r0, r3
 8006528:	3738      	adds	r7, #56	; 0x38
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}

0800652e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800652e:	b480      	push	{r7}
 8006530:	b085      	sub	sp, #20
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653a:	2b00      	cmp	r3, #0
 800653c:	d006      	beq.n	800654c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f1c3 0307 	rsb	r3, r3, #7
 8006548:	60fb      	str	r3, [r7, #12]
 800654a:	e001      	b.n	8006550 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800654c:	2300      	movs	r3, #0
 800654e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006550:	68fb      	ldr	r3, [r7, #12]
	}
 8006552:	4618      	mov	r0, r3
 8006554:	3714      	adds	r7, #20
 8006556:	46bd      	mov	sp, r7
 8006558:	bc80      	pop	{r7}
 800655a:	4770      	bx	lr

0800655c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b086      	sub	sp, #24
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006568:	2300      	movs	r3, #0
 800656a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006570:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006576:	2b00      	cmp	r3, #0
 8006578:	d10d      	bne.n	8006596 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d14d      	bne.n	800661e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	4618      	mov	r0, r3
 8006588:	f000 fffe 	bl	8007588 <xTaskPriorityDisinherit>
 800658c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2200      	movs	r2, #0
 8006592:	605a      	str	r2, [r3, #4]
 8006594:	e043      	b.n	800661e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d119      	bne.n	80065d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6898      	ldr	r0, [r3, #8]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a4:	461a      	mov	r2, r3
 80065a6:	68b9      	ldr	r1, [r7, #8]
 80065a8:	f013 fa75 	bl	8019a96 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	689a      	ldr	r2, [r3, #8]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b4:	441a      	add	r2, r3
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	689a      	ldr	r2, [r3, #8]
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d32b      	bcc.n	800661e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	609a      	str	r2, [r3, #8]
 80065ce:	e026      	b.n	800661e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	68d8      	ldr	r0, [r3, #12]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d8:	461a      	mov	r2, r3
 80065da:	68b9      	ldr	r1, [r7, #8]
 80065dc:	f013 fa5b 	bl	8019a96 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	68da      	ldr	r2, [r3, #12]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e8:	425b      	negs	r3, r3
 80065ea:	441a      	add	r2, r3
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	68da      	ldr	r2, [r3, #12]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d207      	bcs.n	800660c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	685a      	ldr	r2, [r3, #4]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006604:	425b      	negs	r3, r3
 8006606:	441a      	add	r2, r3
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2b02      	cmp	r3, #2
 8006610:	d105      	bne.n	800661e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d002      	beq.n	800661e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	3b01      	subs	r3, #1
 800661c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	1c5a      	adds	r2, r3, #1
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006626:	697b      	ldr	r3, [r7, #20]
}
 8006628:	4618      	mov	r0, r3
 800662a:	3718      	adds	r7, #24
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663e:	2b00      	cmp	r3, #0
 8006640:	d018      	beq.n	8006674 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	68da      	ldr	r2, [r3, #12]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664a:	441a      	add	r2, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	68da      	ldr	r2, [r3, #12]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	429a      	cmp	r2, r3
 800665a:	d303      	bcc.n	8006664 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	68d9      	ldr	r1, [r3, #12]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666c:	461a      	mov	r2, r3
 800666e:	6838      	ldr	r0, [r7, #0]
 8006670:	f013 fa11 	bl	8019a96 <memcpy>
	}
}
 8006674:	bf00      	nop
 8006676:	3708      	adds	r7, #8
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006684:	f001 fda8 	bl	80081d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800668e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006690:	e011      	b.n	80066b6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006696:	2b00      	cmp	r3, #0
 8006698:	d012      	beq.n	80066c0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	3324      	adds	r3, #36	; 0x24
 800669e:	4618      	mov	r0, r3
 80066a0:	f000 fd14 	bl	80070cc <xTaskRemoveFromEventList>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d001      	beq.n	80066ae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80066aa:	f000 fde7 	bl	800727c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80066ae:	7bfb      	ldrb	r3, [r7, #15]
 80066b0:	3b01      	subs	r3, #1
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80066b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	dce9      	bgt.n	8006692 <prvUnlockQueue+0x16>
 80066be:	e000      	b.n	80066c2 <prvUnlockQueue+0x46>
					break;
 80066c0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	22ff      	movs	r2, #255	; 0xff
 80066c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80066ca:	f001 fdb3 	bl	8008234 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80066ce:	f001 fd83 	bl	80081d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066d8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80066da:	e011      	b.n	8006700 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d012      	beq.n	800670a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	3310      	adds	r3, #16
 80066e8:	4618      	mov	r0, r3
 80066ea:	f000 fcef 	bl	80070cc <xTaskRemoveFromEventList>
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d001      	beq.n	80066f8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80066f4:	f000 fdc2 	bl	800727c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80066f8:	7bbb      	ldrb	r3, [r7, #14]
 80066fa:	3b01      	subs	r3, #1
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006700:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006704:	2b00      	cmp	r3, #0
 8006706:	dce9      	bgt.n	80066dc <prvUnlockQueue+0x60>
 8006708:	e000      	b.n	800670c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800670a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	22ff      	movs	r2, #255	; 0xff
 8006710:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006714:	f001 fd8e 	bl	8008234 <vPortExitCritical>
}
 8006718:	bf00      	nop
 800671a:	3710      	adds	r7, #16
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006728:	f001 fd56 	bl	80081d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006730:	2b00      	cmp	r3, #0
 8006732:	d102      	bne.n	800673a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006734:	2301      	movs	r3, #1
 8006736:	60fb      	str	r3, [r7, #12]
 8006738:	e001      	b.n	800673e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800673a:	2300      	movs	r3, #0
 800673c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800673e:	f001 fd79 	bl	8008234 <vPortExitCritical>

	return xReturn;
 8006742:	68fb      	ldr	r3, [r7, #12]
}
 8006744:	4618      	mov	r0, r3
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006754:	f001 fd40 	bl	80081d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006760:	429a      	cmp	r2, r3
 8006762:	d102      	bne.n	800676a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006764:	2301      	movs	r3, #1
 8006766:	60fb      	str	r3, [r7, #12]
 8006768:	e001      	b.n	800676e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800676a:	2300      	movs	r3, #0
 800676c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800676e:	f001 fd61 	bl	8008234 <vPortExitCritical>

	return xReturn;
 8006772:	68fb      	ldr	r3, [r7, #12]
}
 8006774:	4618      	mov	r0, r3
 8006776:	3710      	adds	r7, #16
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800677c:	b480      	push	{r7}
 800677e:	b085      	sub	sp, #20
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006786:	2300      	movs	r3, #0
 8006788:	60fb      	str	r3, [r7, #12]
 800678a:	e014      	b.n	80067b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800678c:	4a0e      	ldr	r2, [pc, #56]	; (80067c8 <vQueueAddToRegistry+0x4c>)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d10b      	bne.n	80067b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006798:	490b      	ldr	r1, [pc, #44]	; (80067c8 <vQueueAddToRegistry+0x4c>)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	683a      	ldr	r2, [r7, #0]
 800679e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80067a2:	4a09      	ldr	r2, [pc, #36]	; (80067c8 <vQueueAddToRegistry+0x4c>)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	00db      	lsls	r3, r3, #3
 80067a8:	4413      	add	r3, r2
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80067ae:	e005      	b.n	80067bc <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	3301      	adds	r3, #1
 80067b4:	60fb      	str	r3, [r7, #12]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2b07      	cmp	r3, #7
 80067ba:	d9e7      	bls.n	800678c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80067bc:	bf00      	nop
 80067be:	3714      	adds	r7, #20
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bc80      	pop	{r7}
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	20007f40 	.word	0x20007f40

080067cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b086      	sub	sp, #24
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80067dc:	f001 fcfc 	bl	80081d8 <vPortEnterCritical>
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80067e6:	b25b      	sxtb	r3, r3
 80067e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ec:	d103      	bne.n	80067f6 <vQueueWaitForMessageRestricted+0x2a>
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067fc:	b25b      	sxtb	r3, r3
 80067fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006802:	d103      	bne.n	800680c <vQueueWaitForMessageRestricted+0x40>
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	2200      	movs	r2, #0
 8006808:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800680c:	f001 fd12 	bl	8008234 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006814:	2b00      	cmp	r3, #0
 8006816:	d106      	bne.n	8006826 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	3324      	adds	r3, #36	; 0x24
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	68b9      	ldr	r1, [r7, #8]
 8006820:	4618      	mov	r0, r3
 8006822:	f000 fc29 	bl	8007078 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006826:	6978      	ldr	r0, [r7, #20]
 8006828:	f7ff ff28 	bl	800667c <prvUnlockQueue>
	}
 800682c:	bf00      	nop
 800682e:	3718      	adds	r7, #24
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006834:	b580      	push	{r7, lr}
 8006836:	b08e      	sub	sp, #56	; 0x38
 8006838:	af04      	add	r7, sp, #16
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]
 8006840:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006844:	2b00      	cmp	r3, #0
 8006846:	d109      	bne.n	800685c <xTaskCreateStatic+0x28>
	__asm volatile
 8006848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684c:	f383 8811 	msr	BASEPRI, r3
 8006850:	f3bf 8f6f 	isb	sy
 8006854:	f3bf 8f4f 	dsb	sy
 8006858:	623b      	str	r3, [r7, #32]
 800685a:	e7fe      	b.n	800685a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800685c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800685e:	2b00      	cmp	r3, #0
 8006860:	d109      	bne.n	8006876 <xTaskCreateStatic+0x42>
 8006862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006866:	f383 8811 	msr	BASEPRI, r3
 800686a:	f3bf 8f6f 	isb	sy
 800686e:	f3bf 8f4f 	dsb	sy
 8006872:	61fb      	str	r3, [r7, #28]
 8006874:	e7fe      	b.n	8006874 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006876:	2360      	movs	r3, #96	; 0x60
 8006878:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	2b60      	cmp	r3, #96	; 0x60
 800687e:	d009      	beq.n	8006894 <xTaskCreateStatic+0x60>
 8006880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006884:	f383 8811 	msr	BASEPRI, r3
 8006888:	f3bf 8f6f 	isb	sy
 800688c:	f3bf 8f4f 	dsb	sy
 8006890:	61bb      	str	r3, [r7, #24]
 8006892:	e7fe      	b.n	8006892 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006896:	2b00      	cmp	r3, #0
 8006898:	d01e      	beq.n	80068d8 <xTaskCreateStatic+0xa4>
 800689a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800689c:	2b00      	cmp	r3, #0
 800689e:	d01b      	beq.n	80068d8 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80068a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80068a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068a8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80068aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ac:	2202      	movs	r2, #2
 80068ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80068b2:	2300      	movs	r3, #0
 80068b4:	9303      	str	r3, [sp, #12]
 80068b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b8:	9302      	str	r3, [sp, #8]
 80068ba:	f107 0314 	add.w	r3, r7, #20
 80068be:	9301      	str	r3, [sp, #4]
 80068c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c2:	9300      	str	r3, [sp, #0]
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	687a      	ldr	r2, [r7, #4]
 80068c8:	68b9      	ldr	r1, [r7, #8]
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	f000 f850 	bl	8006970 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80068d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068d2:	f000 f8cb 	bl	8006a6c <prvAddNewTaskToReadyList>
 80068d6:	e001      	b.n	80068dc <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80068d8:	2300      	movs	r3, #0
 80068da:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80068dc:	697b      	ldr	r3, [r7, #20]
	}
 80068de:	4618      	mov	r0, r3
 80068e0:	3728      	adds	r7, #40	; 0x28
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b08c      	sub	sp, #48	; 0x30
 80068ea:	af04      	add	r7, sp, #16
 80068ec:	60f8      	str	r0, [r7, #12]
 80068ee:	60b9      	str	r1, [r7, #8]
 80068f0:	603b      	str	r3, [r7, #0]
 80068f2:	4613      	mov	r3, r2
 80068f4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068f6:	88fb      	ldrh	r3, [r7, #6]
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	4618      	mov	r0, r3
 80068fc:	f001 fd62 	bl	80083c4 <pvPortMalloc>
 8006900:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00e      	beq.n	8006926 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006908:	2060      	movs	r0, #96	; 0x60
 800690a:	f001 fd5b 	bl	80083c4 <pvPortMalloc>
 800690e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d003      	beq.n	800691e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	697a      	ldr	r2, [r7, #20]
 800691a:	631a      	str	r2, [r3, #48]	; 0x30
 800691c:	e005      	b.n	800692a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800691e:	6978      	ldr	r0, [r7, #20]
 8006920:	f001 fe12 	bl	8008548 <vPortFree>
 8006924:	e001      	b.n	800692a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006926:	2300      	movs	r3, #0
 8006928:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d017      	beq.n	8006960 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	2200      	movs	r2, #0
 8006934:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006938:	88fa      	ldrh	r2, [r7, #6]
 800693a:	2300      	movs	r3, #0
 800693c:	9303      	str	r3, [sp, #12]
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	9302      	str	r3, [sp, #8]
 8006942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006944:	9301      	str	r3, [sp, #4]
 8006946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006948:	9300      	str	r3, [sp, #0]
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	68b9      	ldr	r1, [r7, #8]
 800694e:	68f8      	ldr	r0, [r7, #12]
 8006950:	f000 f80e 	bl	8006970 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006954:	69f8      	ldr	r0, [r7, #28]
 8006956:	f000 f889 	bl	8006a6c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800695a:	2301      	movs	r3, #1
 800695c:	61bb      	str	r3, [r7, #24]
 800695e:	e002      	b.n	8006966 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006960:	f04f 33ff 	mov.w	r3, #4294967295
 8006964:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006966:	69bb      	ldr	r3, [r7, #24]
	}
 8006968:	4618      	mov	r0, r3
 800696a:	3720      	adds	r7, #32
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b088      	sub	sp, #32
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	607a      	str	r2, [r7, #4]
 800697c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800697e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006980:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006988:	3b01      	subs	r3, #1
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	4413      	add	r3, r2
 800698e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006990:	69bb      	ldr	r3, [r7, #24]
 8006992:	f023 0307 	bic.w	r3, r3, #7
 8006996:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006998:	69bb      	ldr	r3, [r7, #24]
 800699a:	f003 0307 	and.w	r3, r3, #7
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d009      	beq.n	80069b6 <prvInitialiseNewTask+0x46>
 80069a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a6:	f383 8811 	msr	BASEPRI, r3
 80069aa:	f3bf 8f6f 	isb	sy
 80069ae:	f3bf 8f4f 	dsb	sy
 80069b2:	617b      	str	r3, [r7, #20]
 80069b4:	e7fe      	b.n	80069b4 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80069b6:	2300      	movs	r3, #0
 80069b8:	61fb      	str	r3, [r7, #28]
 80069ba:	e012      	b.n	80069e2 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80069bc:	68ba      	ldr	r2, [r7, #8]
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	4413      	add	r3, r2
 80069c2:	7819      	ldrb	r1, [r3, #0]
 80069c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	4413      	add	r3, r2
 80069ca:	3334      	adds	r3, #52	; 0x34
 80069cc:	460a      	mov	r2, r1
 80069ce:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80069d0:	68ba      	ldr	r2, [r7, #8]
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	4413      	add	r3, r2
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d006      	beq.n	80069ea <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80069dc:	69fb      	ldr	r3, [r7, #28]
 80069de:	3301      	adds	r3, #1
 80069e0:	61fb      	str	r3, [r7, #28]
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	2b18      	cmp	r3, #24
 80069e6:	d9e9      	bls.n	80069bc <prvInitialiseNewTask+0x4c>
 80069e8:	e000      	b.n	80069ec <prvInitialiseNewTask+0x7c>
		{
			break;
 80069ea:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80069ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80069f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f6:	2b06      	cmp	r3, #6
 80069f8:	d901      	bls.n	80069fe <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80069fa:	2306      	movs	r3, #6
 80069fc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80069fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a02:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a08:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 8006a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a12:	3304      	adds	r3, #4
 8006a14:	4618      	mov	r0, r3
 8006a16:	f7fe fefc 	bl	8005812 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a1c:	3318      	adds	r3, #24
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7fe fef7 	bl	8005812 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a28:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a2c:	f1c3 0207 	rsb	r2, r3, #7
 8006a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a32:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a38:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a42:	2200      	movs	r2, #0
 8006a44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006a48:	683a      	ldr	r2, [r7, #0]
 8006a4a:	68f9      	ldr	r1, [r7, #12]
 8006a4c:	69b8      	ldr	r0, [r7, #24]
 8006a4e:	f001 fad5 	bl	8007ffc <pxPortInitialiseStack>
 8006a52:	4602      	mov	r2, r0
 8006a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a56:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d002      	beq.n	8006a64 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a62:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a64:	bf00      	nop
 8006a66:	3720      	adds	r7, #32
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b082      	sub	sp, #8
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006a74:	f001 fbb0 	bl	80081d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006a78:	4b2a      	ldr	r3, [pc, #168]	; (8006b24 <prvAddNewTaskToReadyList+0xb8>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	4a29      	ldr	r2, [pc, #164]	; (8006b24 <prvAddNewTaskToReadyList+0xb8>)
 8006a80:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006a82:	4b29      	ldr	r3, [pc, #164]	; (8006b28 <prvAddNewTaskToReadyList+0xbc>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d109      	bne.n	8006a9e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006a8a:	4a27      	ldr	r2, [pc, #156]	; (8006b28 <prvAddNewTaskToReadyList+0xbc>)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006a90:	4b24      	ldr	r3, [pc, #144]	; (8006b24 <prvAddNewTaskToReadyList+0xb8>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d110      	bne.n	8006aba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006a98:	f000 fc14 	bl	80072c4 <prvInitialiseTaskLists>
 8006a9c:	e00d      	b.n	8006aba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006a9e:	4b23      	ldr	r3, [pc, #140]	; (8006b2c <prvAddNewTaskToReadyList+0xc0>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d109      	bne.n	8006aba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006aa6:	4b20      	ldr	r3, [pc, #128]	; (8006b28 <prvAddNewTaskToReadyList+0xbc>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d802      	bhi.n	8006aba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006ab4:	4a1c      	ldr	r2, [pc, #112]	; (8006b28 <prvAddNewTaskToReadyList+0xbc>)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006aba:	4b1d      	ldr	r3, [pc, #116]	; (8006b30 <prvAddNewTaskToReadyList+0xc4>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	3301      	adds	r3, #1
 8006ac0:	4a1b      	ldr	r2, [pc, #108]	; (8006b30 <prvAddNewTaskToReadyList+0xc4>)
 8006ac2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac8:	2201      	movs	r2, #1
 8006aca:	409a      	lsls	r2, r3
 8006acc:	4b19      	ldr	r3, [pc, #100]	; (8006b34 <prvAddNewTaskToReadyList+0xc8>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	4a18      	ldr	r2, [pc, #96]	; (8006b34 <prvAddNewTaskToReadyList+0xc8>)
 8006ad4:	6013      	str	r3, [r2, #0]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ada:	4613      	mov	r3, r2
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	4413      	add	r3, r2
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	4a15      	ldr	r2, [pc, #84]	; (8006b38 <prvAddNewTaskToReadyList+0xcc>)
 8006ae4:	441a      	add	r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	3304      	adds	r3, #4
 8006aea:	4619      	mov	r1, r3
 8006aec:	4610      	mov	r0, r2
 8006aee:	f7fe fe9c 	bl	800582a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006af2:	f001 fb9f 	bl	8008234 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006af6:	4b0d      	ldr	r3, [pc, #52]	; (8006b2c <prvAddNewTaskToReadyList+0xc0>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d00e      	beq.n	8006b1c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006afe:	4b0a      	ldr	r3, [pc, #40]	; (8006b28 <prvAddNewTaskToReadyList+0xbc>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d207      	bcs.n	8006b1c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006b0c:	4b0b      	ldr	r3, [pc, #44]	; (8006b3c <prvAddNewTaskToReadyList+0xd0>)
 8006b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b12:	601a      	str	r2, [r3, #0]
 8006b14:	f3bf 8f4f 	dsb	sy
 8006b18:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b1c:	bf00      	nop
 8006b1e:	3708      	adds	r7, #8
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	200009d8 	.word	0x200009d8
 8006b28:	200008d8 	.word	0x200008d8
 8006b2c:	200009e4 	.word	0x200009e4
 8006b30:	200009f4 	.word	0x200009f4
 8006b34:	200009e0 	.word	0x200009e0
 8006b38:	200008dc 	.word	0x200008dc
 8006b3c:	e000ed04 	.word	0xe000ed04

08006b40 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d016      	beq.n	8006b80 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006b52:	4b13      	ldr	r3, [pc, #76]	; (8006ba0 <vTaskDelay+0x60>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d009      	beq.n	8006b6e <vTaskDelay+0x2e>
 8006b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b5e:	f383 8811 	msr	BASEPRI, r3
 8006b62:	f3bf 8f6f 	isb	sy
 8006b66:	f3bf 8f4f 	dsb	sy
 8006b6a:	60bb      	str	r3, [r7, #8]
 8006b6c:	e7fe      	b.n	8006b6c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006b6e:	f000 f87f 	bl	8006c70 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006b72:	2100      	movs	r1, #0
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 fe3d 	bl	80077f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006b7a:	f000 f887 	bl	8006c8c <xTaskResumeAll>
 8006b7e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d107      	bne.n	8006b96 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006b86:	4b07      	ldr	r3, [pc, #28]	; (8006ba4 <vTaskDelay+0x64>)
 8006b88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b8c:	601a      	str	r2, [r3, #0]
 8006b8e:	f3bf 8f4f 	dsb	sy
 8006b92:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006b96:	bf00      	nop
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}
 8006b9e:	bf00      	nop
 8006ba0:	20000a00 	.word	0x20000a00
 8006ba4:	e000ed04 	.word	0xe000ed04

08006ba8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b08a      	sub	sp, #40	; 0x28
 8006bac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006bb6:	463a      	mov	r2, r7
 8006bb8:	1d39      	adds	r1, r7, #4
 8006bba:	f107 0308 	add.w	r3, r7, #8
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f7fa fcde 	bl	8001580 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006bc4:	6839      	ldr	r1, [r7, #0]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	68ba      	ldr	r2, [r7, #8]
 8006bca:	9202      	str	r2, [sp, #8]
 8006bcc:	9301      	str	r3, [sp, #4]
 8006bce:	2300      	movs	r3, #0
 8006bd0:	9300      	str	r3, [sp, #0]
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	460a      	mov	r2, r1
 8006bd6:	4920      	ldr	r1, [pc, #128]	; (8006c58 <vTaskStartScheduler+0xb0>)
 8006bd8:	4820      	ldr	r0, [pc, #128]	; (8006c5c <vTaskStartScheduler+0xb4>)
 8006bda:	f7ff fe2b 	bl	8006834 <xTaskCreateStatic>
 8006bde:	4602      	mov	r2, r0
 8006be0:	4b1f      	ldr	r3, [pc, #124]	; (8006c60 <vTaskStartScheduler+0xb8>)
 8006be2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006be4:	4b1e      	ldr	r3, [pc, #120]	; (8006c60 <vTaskStartScheduler+0xb8>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d002      	beq.n	8006bf2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006bec:	2301      	movs	r3, #1
 8006bee:	617b      	str	r3, [r7, #20]
 8006bf0:	e001      	b.n	8006bf6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d102      	bne.n	8006c02 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006bfc:	f000 fe60 	bl	80078c0 <xTimerCreateTimerTask>
 8006c00:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d115      	bne.n	8006c34 <vTaskStartScheduler+0x8c>
 8006c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0c:	f383 8811 	msr	BASEPRI, r3
 8006c10:	f3bf 8f6f 	isb	sy
 8006c14:	f3bf 8f4f 	dsb	sy
 8006c18:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006c1a:	4b12      	ldr	r3, [pc, #72]	; (8006c64 <vTaskStartScheduler+0xbc>)
 8006c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8006c20:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006c22:	4b11      	ldr	r3, [pc, #68]	; (8006c68 <vTaskStartScheduler+0xc0>)
 8006c24:	2201      	movs	r2, #1
 8006c26:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006c28:	4b10      	ldr	r3, [pc, #64]	; (8006c6c <vTaskStartScheduler+0xc4>)
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006c2e:	f001 fa63 	bl	80080f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006c32:	e00d      	b.n	8006c50 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c3a:	d109      	bne.n	8006c50 <vTaskStartScheduler+0xa8>
 8006c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c40:	f383 8811 	msr	BASEPRI, r3
 8006c44:	f3bf 8f6f 	isb	sy
 8006c48:	f3bf 8f4f 	dsb	sy
 8006c4c:	60fb      	str	r3, [r7, #12]
 8006c4e:	e7fe      	b.n	8006c4e <vTaskStartScheduler+0xa6>
}
 8006c50:	bf00      	nop
 8006c52:	3718      	adds	r7, #24
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}
 8006c58:	0801e114 	.word	0x0801e114
 8006c5c:	08007295 	.word	0x08007295
 8006c60:	200009fc 	.word	0x200009fc
 8006c64:	200009f8 	.word	0x200009f8
 8006c68:	200009e4 	.word	0x200009e4
 8006c6c:	200009dc 	.word	0x200009dc

08006c70 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006c70:	b480      	push	{r7}
 8006c72:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006c74:	4b04      	ldr	r3, [pc, #16]	; (8006c88 <vTaskSuspendAll+0x18>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	3301      	adds	r3, #1
 8006c7a:	4a03      	ldr	r2, [pc, #12]	; (8006c88 <vTaskSuspendAll+0x18>)
 8006c7c:	6013      	str	r3, [r2, #0]
}
 8006c7e:	bf00      	nop
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bc80      	pop	{r7}
 8006c84:	4770      	bx	lr
 8006c86:	bf00      	nop
 8006c88:	20000a00 	.word	0x20000a00

08006c8c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006c92:	2300      	movs	r3, #0
 8006c94:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006c96:	2300      	movs	r3, #0
 8006c98:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006c9a:	4b41      	ldr	r3, [pc, #260]	; (8006da0 <xTaskResumeAll+0x114>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d109      	bne.n	8006cb6 <xTaskResumeAll+0x2a>
 8006ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca6:	f383 8811 	msr	BASEPRI, r3
 8006caa:	f3bf 8f6f 	isb	sy
 8006cae:	f3bf 8f4f 	dsb	sy
 8006cb2:	603b      	str	r3, [r7, #0]
 8006cb4:	e7fe      	b.n	8006cb4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006cb6:	f001 fa8f 	bl	80081d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006cba:	4b39      	ldr	r3, [pc, #228]	; (8006da0 <xTaskResumeAll+0x114>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	3b01      	subs	r3, #1
 8006cc0:	4a37      	ldr	r2, [pc, #220]	; (8006da0 <xTaskResumeAll+0x114>)
 8006cc2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006cc4:	4b36      	ldr	r3, [pc, #216]	; (8006da0 <xTaskResumeAll+0x114>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d161      	bne.n	8006d90 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006ccc:	4b35      	ldr	r3, [pc, #212]	; (8006da4 <xTaskResumeAll+0x118>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d05d      	beq.n	8006d90 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006cd4:	e02e      	b.n	8006d34 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006cd6:	4b34      	ldr	r3, [pc, #208]	; (8006da8 <xTaskResumeAll+0x11c>)
 8006cd8:	68db      	ldr	r3, [r3, #12]
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	3318      	adds	r3, #24
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f7fe fdfc 	bl	80058e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	3304      	adds	r3, #4
 8006cec:	4618      	mov	r0, r3
 8006cee:	f7fe fdf7 	bl	80058e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	409a      	lsls	r2, r3
 8006cfa:	4b2c      	ldr	r3, [pc, #176]	; (8006dac <xTaskResumeAll+0x120>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	4a2a      	ldr	r2, [pc, #168]	; (8006dac <xTaskResumeAll+0x120>)
 8006d02:	6013      	str	r3, [r2, #0]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d08:	4613      	mov	r3, r2
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	4413      	add	r3, r2
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	4a27      	ldr	r2, [pc, #156]	; (8006db0 <xTaskResumeAll+0x124>)
 8006d12:	441a      	add	r2, r3
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	3304      	adds	r3, #4
 8006d18:	4619      	mov	r1, r3
 8006d1a:	4610      	mov	r0, r2
 8006d1c:	f7fe fd85 	bl	800582a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d24:	4b23      	ldr	r3, [pc, #140]	; (8006db4 <xTaskResumeAll+0x128>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d302      	bcc.n	8006d34 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8006d2e:	4b22      	ldr	r3, [pc, #136]	; (8006db8 <xTaskResumeAll+0x12c>)
 8006d30:	2201      	movs	r2, #1
 8006d32:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d34:	4b1c      	ldr	r3, [pc, #112]	; (8006da8 <xTaskResumeAll+0x11c>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d1cc      	bne.n	8006cd6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d001      	beq.n	8006d46 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006d42:	f000 fb59 	bl	80073f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006d46:	4b1d      	ldr	r3, [pc, #116]	; (8006dbc <xTaskResumeAll+0x130>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d010      	beq.n	8006d74 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006d52:	f000 f857 	bl	8006e04 <xTaskIncrementTick>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d002      	beq.n	8006d62 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8006d5c:	4b16      	ldr	r3, [pc, #88]	; (8006db8 <xTaskResumeAll+0x12c>)
 8006d5e:	2201      	movs	r2, #1
 8006d60:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	3b01      	subs	r3, #1
 8006d66:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d1f1      	bne.n	8006d52 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8006d6e:	4b13      	ldr	r3, [pc, #76]	; (8006dbc <xTaskResumeAll+0x130>)
 8006d70:	2200      	movs	r2, #0
 8006d72:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006d74:	4b10      	ldr	r3, [pc, #64]	; (8006db8 <xTaskResumeAll+0x12c>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d009      	beq.n	8006d90 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006d80:	4b0f      	ldr	r3, [pc, #60]	; (8006dc0 <xTaskResumeAll+0x134>)
 8006d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d86:	601a      	str	r2, [r3, #0]
 8006d88:	f3bf 8f4f 	dsb	sy
 8006d8c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d90:	f001 fa50 	bl	8008234 <vPortExitCritical>

	return xAlreadyYielded;
 8006d94:	68bb      	ldr	r3, [r7, #8]
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3710      	adds	r7, #16
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	20000a00 	.word	0x20000a00
 8006da4:	200009d8 	.word	0x200009d8
 8006da8:	20000998 	.word	0x20000998
 8006dac:	200009e0 	.word	0x200009e0
 8006db0:	200008dc 	.word	0x200008dc
 8006db4:	200008d8 	.word	0x200008d8
 8006db8:	200009ec 	.word	0x200009ec
 8006dbc:	200009e8 	.word	0x200009e8
 8006dc0:	e000ed04 	.word	0xe000ed04

08006dc4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b083      	sub	sp, #12
 8006dc8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006dca:	4b04      	ldr	r3, [pc, #16]	; (8006ddc <xTaskGetTickCount+0x18>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006dd0:	687b      	ldr	r3, [r7, #4]
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	370c      	adds	r7, #12
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bc80      	pop	{r7}
 8006dda:	4770      	bx	lr
 8006ddc:	200009dc 	.word	0x200009dc

08006de0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006de6:	f001 fab1 	bl	800834c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006dea:	2300      	movs	r3, #0
 8006dec:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8006dee:	4b04      	ldr	r3, [pc, #16]	; (8006e00 <xTaskGetTickCountFromISR+0x20>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006df4:	683b      	ldr	r3, [r7, #0]
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3708      	adds	r7, #8
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}
 8006dfe:	bf00      	nop
 8006e00:	200009dc 	.word	0x200009dc

08006e04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b086      	sub	sp, #24
 8006e08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e0e:	4b50      	ldr	r3, [pc, #320]	; (8006f50 <xTaskIncrementTick+0x14c>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	f040 808c 	bne.w	8006f30 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006e18:	4b4e      	ldr	r3, [pc, #312]	; (8006f54 <xTaskIncrementTick+0x150>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006e20:	4a4c      	ldr	r2, [pc, #304]	; (8006f54 <xTaskIncrementTick+0x150>)
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d11f      	bne.n	8006e6c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006e2c:	4b4a      	ldr	r3, [pc, #296]	; (8006f58 <xTaskIncrementTick+0x154>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d009      	beq.n	8006e4a <xTaskIncrementTick+0x46>
 8006e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e3a:	f383 8811 	msr	BASEPRI, r3
 8006e3e:	f3bf 8f6f 	isb	sy
 8006e42:	f3bf 8f4f 	dsb	sy
 8006e46:	603b      	str	r3, [r7, #0]
 8006e48:	e7fe      	b.n	8006e48 <xTaskIncrementTick+0x44>
 8006e4a:	4b43      	ldr	r3, [pc, #268]	; (8006f58 <xTaskIncrementTick+0x154>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	60fb      	str	r3, [r7, #12]
 8006e50:	4b42      	ldr	r3, [pc, #264]	; (8006f5c <xTaskIncrementTick+0x158>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a40      	ldr	r2, [pc, #256]	; (8006f58 <xTaskIncrementTick+0x154>)
 8006e56:	6013      	str	r3, [r2, #0]
 8006e58:	4a40      	ldr	r2, [pc, #256]	; (8006f5c <xTaskIncrementTick+0x158>)
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6013      	str	r3, [r2, #0]
 8006e5e:	4b40      	ldr	r3, [pc, #256]	; (8006f60 <xTaskIncrementTick+0x15c>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	3301      	adds	r3, #1
 8006e64:	4a3e      	ldr	r2, [pc, #248]	; (8006f60 <xTaskIncrementTick+0x15c>)
 8006e66:	6013      	str	r3, [r2, #0]
 8006e68:	f000 fac6 	bl	80073f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006e6c:	4b3d      	ldr	r3, [pc, #244]	; (8006f64 <xTaskIncrementTick+0x160>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	693a      	ldr	r2, [r7, #16]
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d34d      	bcc.n	8006f12 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e76:	4b38      	ldr	r3, [pc, #224]	; (8006f58 <xTaskIncrementTick+0x154>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d101      	bne.n	8006e84 <xTaskIncrementTick+0x80>
 8006e80:	2301      	movs	r3, #1
 8006e82:	e000      	b.n	8006e86 <xTaskIncrementTick+0x82>
 8006e84:	2300      	movs	r3, #0
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d004      	beq.n	8006e94 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e8a:	4b36      	ldr	r3, [pc, #216]	; (8006f64 <xTaskIncrementTick+0x160>)
 8006e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8006e90:	601a      	str	r2, [r3, #0]
					break;
 8006e92:	e03e      	b.n	8006f12 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006e94:	4b30      	ldr	r3, [pc, #192]	; (8006f58 <xTaskIncrementTick+0x154>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	68db      	ldr	r3, [r3, #12]
 8006e9c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006ea4:	693a      	ldr	r2, [r7, #16]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d203      	bcs.n	8006eb4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006eac:	4a2d      	ldr	r2, [pc, #180]	; (8006f64 <xTaskIncrementTick+0x160>)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6013      	str	r3, [r2, #0]
						break;
 8006eb2:	e02e      	b.n	8006f12 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	3304      	adds	r3, #4
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f7fe fd11 	bl	80058e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d004      	beq.n	8006ed0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	3318      	adds	r3, #24
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f7fe fd08 	bl	80058e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	409a      	lsls	r2, r3
 8006ed8:	4b23      	ldr	r3, [pc, #140]	; (8006f68 <xTaskIncrementTick+0x164>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	4a22      	ldr	r2, [pc, #136]	; (8006f68 <xTaskIncrementTick+0x164>)
 8006ee0:	6013      	str	r3, [r2, #0]
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	4413      	add	r3, r2
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	4a1f      	ldr	r2, [pc, #124]	; (8006f6c <xTaskIncrementTick+0x168>)
 8006ef0:	441a      	add	r2, r3
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	3304      	adds	r3, #4
 8006ef6:	4619      	mov	r1, r3
 8006ef8:	4610      	mov	r0, r2
 8006efa:	f7fe fc96 	bl	800582a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f02:	4b1b      	ldr	r3, [pc, #108]	; (8006f70 <xTaskIncrementTick+0x16c>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d3b4      	bcc.n	8006e76 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f10:	e7b1      	b.n	8006e76 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006f12:	4b17      	ldr	r3, [pc, #92]	; (8006f70 <xTaskIncrementTick+0x16c>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f18:	4914      	ldr	r1, [pc, #80]	; (8006f6c <xTaskIncrementTick+0x168>)
 8006f1a:	4613      	mov	r3, r2
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	4413      	add	r3, r2
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	440b      	add	r3, r1
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d907      	bls.n	8006f3a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	617b      	str	r3, [r7, #20]
 8006f2e:	e004      	b.n	8006f3a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006f30:	4b10      	ldr	r3, [pc, #64]	; (8006f74 <xTaskIncrementTick+0x170>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	3301      	adds	r3, #1
 8006f36:	4a0f      	ldr	r2, [pc, #60]	; (8006f74 <xTaskIncrementTick+0x170>)
 8006f38:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006f3a:	4b0f      	ldr	r3, [pc, #60]	; (8006f78 <xTaskIncrementTick+0x174>)
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d001      	beq.n	8006f46 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8006f42:	2301      	movs	r3, #1
 8006f44:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006f46:	697b      	ldr	r3, [r7, #20]
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3718      	adds	r7, #24
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}
 8006f50:	20000a00 	.word	0x20000a00
 8006f54:	200009dc 	.word	0x200009dc
 8006f58:	20000990 	.word	0x20000990
 8006f5c:	20000994 	.word	0x20000994
 8006f60:	200009f0 	.word	0x200009f0
 8006f64:	200009f8 	.word	0x200009f8
 8006f68:	200009e0 	.word	0x200009e0
 8006f6c:	200008dc 	.word	0x200008dc
 8006f70:	200008d8 	.word	0x200008d8
 8006f74:	200009e8 	.word	0x200009e8
 8006f78:	200009ec 	.word	0x200009ec

08006f7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b087      	sub	sp, #28
 8006f80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006f82:	4b26      	ldr	r3, [pc, #152]	; (800701c <vTaskSwitchContext+0xa0>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d003      	beq.n	8006f92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006f8a:	4b25      	ldr	r3, [pc, #148]	; (8007020 <vTaskSwitchContext+0xa4>)
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006f90:	e03e      	b.n	8007010 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8006f92:	4b23      	ldr	r3, [pc, #140]	; (8007020 <vTaskSwitchContext+0xa4>)
 8006f94:	2200      	movs	r2, #0
 8006f96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006f98:	4b22      	ldr	r3, [pc, #136]	; (8007024 <vTaskSwitchContext+0xa8>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	fab3 f383 	clz	r3, r3
 8006fa4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006fa6:	7afb      	ldrb	r3, [r7, #11]
 8006fa8:	f1c3 031f 	rsb	r3, r3, #31
 8006fac:	617b      	str	r3, [r7, #20]
 8006fae:	491e      	ldr	r1, [pc, #120]	; (8007028 <vTaskSwitchContext+0xac>)
 8006fb0:	697a      	ldr	r2, [r7, #20]
 8006fb2:	4613      	mov	r3, r2
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	4413      	add	r3, r2
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	440b      	add	r3, r1
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d109      	bne.n	8006fd6 <vTaskSwitchContext+0x5a>
	__asm volatile
 8006fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc6:	f383 8811 	msr	BASEPRI, r3
 8006fca:	f3bf 8f6f 	isb	sy
 8006fce:	f3bf 8f4f 	dsb	sy
 8006fd2:	607b      	str	r3, [r7, #4]
 8006fd4:	e7fe      	b.n	8006fd4 <vTaskSwitchContext+0x58>
 8006fd6:	697a      	ldr	r2, [r7, #20]
 8006fd8:	4613      	mov	r3, r2
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	4413      	add	r3, r2
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	4a11      	ldr	r2, [pc, #68]	; (8007028 <vTaskSwitchContext+0xac>)
 8006fe2:	4413      	add	r3, r2
 8006fe4:	613b      	str	r3, [r7, #16]
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	685a      	ldr	r2, [r3, #4]
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	605a      	str	r2, [r3, #4]
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	685a      	ldr	r2, [r3, #4]
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	3308      	adds	r3, #8
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d104      	bne.n	8007006 <vTaskSwitchContext+0x8a>
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	685a      	ldr	r2, [r3, #4]
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	605a      	str	r2, [r3, #4]
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	4a07      	ldr	r2, [pc, #28]	; (800702c <vTaskSwitchContext+0xb0>)
 800700e:	6013      	str	r3, [r2, #0]
}
 8007010:	bf00      	nop
 8007012:	371c      	adds	r7, #28
 8007014:	46bd      	mov	sp, r7
 8007016:	bc80      	pop	{r7}
 8007018:	4770      	bx	lr
 800701a:	bf00      	nop
 800701c:	20000a00 	.word	0x20000a00
 8007020:	200009ec 	.word	0x200009ec
 8007024:	200009e0 	.word	0x200009e0
 8007028:	200008dc 	.word	0x200008dc
 800702c:	200008d8 	.word	0x200008d8

08007030 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d109      	bne.n	8007054 <vTaskPlaceOnEventList+0x24>
 8007040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007044:	f383 8811 	msr	BASEPRI, r3
 8007048:	f3bf 8f6f 	isb	sy
 800704c:	f3bf 8f4f 	dsb	sy
 8007050:	60fb      	str	r3, [r7, #12]
 8007052:	e7fe      	b.n	8007052 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007054:	4b07      	ldr	r3, [pc, #28]	; (8007074 <vTaskPlaceOnEventList+0x44>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	3318      	adds	r3, #24
 800705a:	4619      	mov	r1, r3
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f7fe fc07 	bl	8005870 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007062:	2101      	movs	r1, #1
 8007064:	6838      	ldr	r0, [r7, #0]
 8007066:	f000 fbc5 	bl	80077f4 <prvAddCurrentTaskToDelayedList>
}
 800706a:	bf00      	nop
 800706c:	3710      	adds	r7, #16
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	200008d8 	.word	0x200008d8

08007078 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007078:	b580      	push	{r7, lr}
 800707a:	b086      	sub	sp, #24
 800707c:	af00      	add	r7, sp, #0
 800707e:	60f8      	str	r0, [r7, #12]
 8007080:	60b9      	str	r1, [r7, #8]
 8007082:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d109      	bne.n	800709e <vTaskPlaceOnEventListRestricted+0x26>
 800708a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800708e:	f383 8811 	msr	BASEPRI, r3
 8007092:	f3bf 8f6f 	isb	sy
 8007096:	f3bf 8f4f 	dsb	sy
 800709a:	617b      	str	r3, [r7, #20]
 800709c:	e7fe      	b.n	800709c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800709e:	4b0a      	ldr	r3, [pc, #40]	; (80070c8 <vTaskPlaceOnEventListRestricted+0x50>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	3318      	adds	r3, #24
 80070a4:	4619      	mov	r1, r3
 80070a6:	68f8      	ldr	r0, [r7, #12]
 80070a8:	f7fe fbbf 	bl	800582a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d002      	beq.n	80070b8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80070b2:	f04f 33ff 	mov.w	r3, #4294967295
 80070b6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80070b8:	6879      	ldr	r1, [r7, #4]
 80070ba:	68b8      	ldr	r0, [r7, #8]
 80070bc:	f000 fb9a 	bl	80077f4 <prvAddCurrentTaskToDelayedList>
	}
 80070c0:	bf00      	nop
 80070c2:	3718      	adds	r7, #24
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	200008d8 	.word	0x200008d8

080070cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b086      	sub	sp, #24
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d109      	bne.n	80070f6 <xTaskRemoveFromEventList+0x2a>
 80070e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e6:	f383 8811 	msr	BASEPRI, r3
 80070ea:	f3bf 8f6f 	isb	sy
 80070ee:	f3bf 8f4f 	dsb	sy
 80070f2:	60fb      	str	r3, [r7, #12]
 80070f4:	e7fe      	b.n	80070f4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	3318      	adds	r3, #24
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7fe fbf0 	bl	80058e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007100:	4b1d      	ldr	r3, [pc, #116]	; (8007178 <xTaskRemoveFromEventList+0xac>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d11c      	bne.n	8007142 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	3304      	adds	r3, #4
 800710c:	4618      	mov	r0, r3
 800710e:	f7fe fbe7 	bl	80058e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007116:	2201      	movs	r2, #1
 8007118:	409a      	lsls	r2, r3
 800711a:	4b18      	ldr	r3, [pc, #96]	; (800717c <xTaskRemoveFromEventList+0xb0>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4313      	orrs	r3, r2
 8007120:	4a16      	ldr	r2, [pc, #88]	; (800717c <xTaskRemoveFromEventList+0xb0>)
 8007122:	6013      	str	r3, [r2, #0]
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007128:	4613      	mov	r3, r2
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	4413      	add	r3, r2
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	4a13      	ldr	r2, [pc, #76]	; (8007180 <xTaskRemoveFromEventList+0xb4>)
 8007132:	441a      	add	r2, r3
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	3304      	adds	r3, #4
 8007138:	4619      	mov	r1, r3
 800713a:	4610      	mov	r0, r2
 800713c:	f7fe fb75 	bl	800582a <vListInsertEnd>
 8007140:	e005      	b.n	800714e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	3318      	adds	r3, #24
 8007146:	4619      	mov	r1, r3
 8007148:	480e      	ldr	r0, [pc, #56]	; (8007184 <xTaskRemoveFromEventList+0xb8>)
 800714a:	f7fe fb6e 	bl	800582a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007152:	4b0d      	ldr	r3, [pc, #52]	; (8007188 <xTaskRemoveFromEventList+0xbc>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007158:	429a      	cmp	r2, r3
 800715a:	d905      	bls.n	8007168 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800715c:	2301      	movs	r3, #1
 800715e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007160:	4b0a      	ldr	r3, [pc, #40]	; (800718c <xTaskRemoveFromEventList+0xc0>)
 8007162:	2201      	movs	r2, #1
 8007164:	601a      	str	r2, [r3, #0]
 8007166:	e001      	b.n	800716c <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8007168:	2300      	movs	r3, #0
 800716a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800716c:	697b      	ldr	r3, [r7, #20]
}
 800716e:	4618      	mov	r0, r3
 8007170:	3718      	adds	r7, #24
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	20000a00 	.word	0x20000a00
 800717c:	200009e0 	.word	0x200009e0
 8007180:	200008dc 	.word	0x200008dc
 8007184:	20000998 	.word	0x20000998
 8007188:	200008d8 	.word	0x200008d8
 800718c:	200009ec 	.word	0x200009ec

08007190 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007190:	b480      	push	{r7}
 8007192:	b083      	sub	sp, #12
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007198:	4b06      	ldr	r3, [pc, #24]	; (80071b4 <vTaskInternalSetTimeOutState+0x24>)
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80071a0:	4b05      	ldr	r3, [pc, #20]	; (80071b8 <vTaskInternalSetTimeOutState+0x28>)
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	605a      	str	r2, [r3, #4]
}
 80071a8:	bf00      	nop
 80071aa:	370c      	adds	r7, #12
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bc80      	pop	{r7}
 80071b0:	4770      	bx	lr
 80071b2:	bf00      	nop
 80071b4:	200009f0 	.word	0x200009f0
 80071b8:	200009dc 	.word	0x200009dc

080071bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b088      	sub	sp, #32
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d109      	bne.n	80071e0 <xTaskCheckForTimeOut+0x24>
 80071cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d0:	f383 8811 	msr	BASEPRI, r3
 80071d4:	f3bf 8f6f 	isb	sy
 80071d8:	f3bf 8f4f 	dsb	sy
 80071dc:	613b      	str	r3, [r7, #16]
 80071de:	e7fe      	b.n	80071de <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d109      	bne.n	80071fa <xTaskCheckForTimeOut+0x3e>
 80071e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ea:	f383 8811 	msr	BASEPRI, r3
 80071ee:	f3bf 8f6f 	isb	sy
 80071f2:	f3bf 8f4f 	dsb	sy
 80071f6:	60fb      	str	r3, [r7, #12]
 80071f8:	e7fe      	b.n	80071f8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80071fa:	f000 ffed 	bl	80081d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80071fe:	4b1d      	ldr	r3, [pc, #116]	; (8007274 <xTaskCheckForTimeOut+0xb8>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	69ba      	ldr	r2, [r7, #24]
 800720a:	1ad3      	subs	r3, r2, r3
 800720c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007216:	d102      	bne.n	800721e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007218:	2300      	movs	r3, #0
 800721a:	61fb      	str	r3, [r7, #28]
 800721c:	e023      	b.n	8007266 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	4b15      	ldr	r3, [pc, #84]	; (8007278 <xTaskCheckForTimeOut+0xbc>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	429a      	cmp	r2, r3
 8007228:	d007      	beq.n	800723a <xTaskCheckForTimeOut+0x7e>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	69ba      	ldr	r2, [r7, #24]
 8007230:	429a      	cmp	r2, r3
 8007232:	d302      	bcc.n	800723a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007234:	2301      	movs	r3, #1
 8007236:	61fb      	str	r3, [r7, #28]
 8007238:	e015      	b.n	8007266 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	697a      	ldr	r2, [r7, #20]
 8007240:	429a      	cmp	r2, r3
 8007242:	d20b      	bcs.n	800725c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	1ad2      	subs	r2, r2, r3
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f7ff ff9d 	bl	8007190 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007256:	2300      	movs	r3, #0
 8007258:	61fb      	str	r3, [r7, #28]
 800725a:	e004      	b.n	8007266 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	2200      	movs	r2, #0
 8007260:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007262:	2301      	movs	r3, #1
 8007264:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007266:	f000 ffe5 	bl	8008234 <vPortExitCritical>

	return xReturn;
 800726a:	69fb      	ldr	r3, [r7, #28]
}
 800726c:	4618      	mov	r0, r3
 800726e:	3720      	adds	r7, #32
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}
 8007274:	200009dc 	.word	0x200009dc
 8007278:	200009f0 	.word	0x200009f0

0800727c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800727c:	b480      	push	{r7}
 800727e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007280:	4b03      	ldr	r3, [pc, #12]	; (8007290 <vTaskMissedYield+0x14>)
 8007282:	2201      	movs	r2, #1
 8007284:	601a      	str	r2, [r3, #0]
}
 8007286:	bf00      	nop
 8007288:	46bd      	mov	sp, r7
 800728a:	bc80      	pop	{r7}
 800728c:	4770      	bx	lr
 800728e:	bf00      	nop
 8007290:	200009ec 	.word	0x200009ec

08007294 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b082      	sub	sp, #8
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800729c:	f000 f852 	bl	8007344 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80072a0:	4b06      	ldr	r3, [pc, #24]	; (80072bc <prvIdleTask+0x28>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d9f9      	bls.n	800729c <prvIdleTask+0x8>
			{
				taskYIELD();
 80072a8:	4b05      	ldr	r3, [pc, #20]	; (80072c0 <prvIdleTask+0x2c>)
 80072aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072ae:	601a      	str	r2, [r3, #0]
 80072b0:	f3bf 8f4f 	dsb	sy
 80072b4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80072b8:	e7f0      	b.n	800729c <prvIdleTask+0x8>
 80072ba:	bf00      	nop
 80072bc:	200008dc 	.word	0x200008dc
 80072c0:	e000ed04 	.word	0xe000ed04

080072c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072ca:	2300      	movs	r3, #0
 80072cc:	607b      	str	r3, [r7, #4]
 80072ce:	e00c      	b.n	80072ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	4613      	mov	r3, r2
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	4413      	add	r3, r2
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	4a12      	ldr	r2, [pc, #72]	; (8007324 <prvInitialiseTaskLists+0x60>)
 80072dc:	4413      	add	r3, r2
 80072de:	4618      	mov	r0, r3
 80072e0:	f7fe fa78 	bl	80057d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	3301      	adds	r3, #1
 80072e8:	607b      	str	r3, [r7, #4]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2b06      	cmp	r3, #6
 80072ee:	d9ef      	bls.n	80072d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80072f0:	480d      	ldr	r0, [pc, #52]	; (8007328 <prvInitialiseTaskLists+0x64>)
 80072f2:	f7fe fa6f 	bl	80057d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80072f6:	480d      	ldr	r0, [pc, #52]	; (800732c <prvInitialiseTaskLists+0x68>)
 80072f8:	f7fe fa6c 	bl	80057d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80072fc:	480c      	ldr	r0, [pc, #48]	; (8007330 <prvInitialiseTaskLists+0x6c>)
 80072fe:	f7fe fa69 	bl	80057d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007302:	480c      	ldr	r0, [pc, #48]	; (8007334 <prvInitialiseTaskLists+0x70>)
 8007304:	f7fe fa66 	bl	80057d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007308:	480b      	ldr	r0, [pc, #44]	; (8007338 <prvInitialiseTaskLists+0x74>)
 800730a:	f7fe fa63 	bl	80057d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800730e:	4b0b      	ldr	r3, [pc, #44]	; (800733c <prvInitialiseTaskLists+0x78>)
 8007310:	4a05      	ldr	r2, [pc, #20]	; (8007328 <prvInitialiseTaskLists+0x64>)
 8007312:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007314:	4b0a      	ldr	r3, [pc, #40]	; (8007340 <prvInitialiseTaskLists+0x7c>)
 8007316:	4a05      	ldr	r2, [pc, #20]	; (800732c <prvInitialiseTaskLists+0x68>)
 8007318:	601a      	str	r2, [r3, #0]
}
 800731a:	bf00      	nop
 800731c:	3708      	adds	r7, #8
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
 8007322:	bf00      	nop
 8007324:	200008dc 	.word	0x200008dc
 8007328:	20000968 	.word	0x20000968
 800732c:	2000097c 	.word	0x2000097c
 8007330:	20000998 	.word	0x20000998
 8007334:	200009ac 	.word	0x200009ac
 8007338:	200009c4 	.word	0x200009c4
 800733c:	20000990 	.word	0x20000990
 8007340:	20000994 	.word	0x20000994

08007344 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b082      	sub	sp, #8
 8007348:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800734a:	e019      	b.n	8007380 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800734c:	f000 ff44 	bl	80081d8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007350:	4b0f      	ldr	r3, [pc, #60]	; (8007390 <prvCheckTasksWaitingTermination+0x4c>)
 8007352:	68db      	ldr	r3, [r3, #12]
 8007354:	68db      	ldr	r3, [r3, #12]
 8007356:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	3304      	adds	r3, #4
 800735c:	4618      	mov	r0, r3
 800735e:	f7fe fabf 	bl	80058e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007362:	4b0c      	ldr	r3, [pc, #48]	; (8007394 <prvCheckTasksWaitingTermination+0x50>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	3b01      	subs	r3, #1
 8007368:	4a0a      	ldr	r2, [pc, #40]	; (8007394 <prvCheckTasksWaitingTermination+0x50>)
 800736a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800736c:	4b0a      	ldr	r3, [pc, #40]	; (8007398 <prvCheckTasksWaitingTermination+0x54>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	3b01      	subs	r3, #1
 8007372:	4a09      	ldr	r2, [pc, #36]	; (8007398 <prvCheckTasksWaitingTermination+0x54>)
 8007374:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007376:	f000 ff5d 	bl	8008234 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 f80e 	bl	800739c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007380:	4b05      	ldr	r3, [pc, #20]	; (8007398 <prvCheckTasksWaitingTermination+0x54>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d1e1      	bne.n	800734c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007388:	bf00      	nop
 800738a:	3708      	adds	r7, #8
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}
 8007390:	200009ac 	.word	0x200009ac
 8007394:	200009d8 	.word	0x200009d8
 8007398:	200009c0 	.word	0x200009c0

0800739c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d108      	bne.n	80073c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073b2:	4618      	mov	r0, r3
 80073b4:	f001 f8c8 	bl	8008548 <vPortFree>
				vPortFree( pxTCB );
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f001 f8c5 	bl	8008548 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80073be:	e017      	b.n	80073f0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d103      	bne.n	80073d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f001 f8bc 	bl	8008548 <vPortFree>
	}
 80073d0:	e00e      	b.n	80073f0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80073d8:	2b02      	cmp	r3, #2
 80073da:	d009      	beq.n	80073f0 <prvDeleteTCB+0x54>
 80073dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e0:	f383 8811 	msr	BASEPRI, r3
 80073e4:	f3bf 8f6f 	isb	sy
 80073e8:	f3bf 8f4f 	dsb	sy
 80073ec:	60fb      	str	r3, [r7, #12]
 80073ee:	e7fe      	b.n	80073ee <prvDeleteTCB+0x52>
	}
 80073f0:	bf00      	nop
 80073f2:	3710      	adds	r7, #16
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80073f8:	b480      	push	{r7}
 80073fa:	b083      	sub	sp, #12
 80073fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073fe:	4b0e      	ldr	r3, [pc, #56]	; (8007438 <prvResetNextTaskUnblockTime+0x40>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d101      	bne.n	800740c <prvResetNextTaskUnblockTime+0x14>
 8007408:	2301      	movs	r3, #1
 800740a:	e000      	b.n	800740e <prvResetNextTaskUnblockTime+0x16>
 800740c:	2300      	movs	r3, #0
 800740e:	2b00      	cmp	r3, #0
 8007410:	d004      	beq.n	800741c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007412:	4b0a      	ldr	r3, [pc, #40]	; (800743c <prvResetNextTaskUnblockTime+0x44>)
 8007414:	f04f 32ff 	mov.w	r2, #4294967295
 8007418:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800741a:	e008      	b.n	800742e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800741c:	4b06      	ldr	r3, [pc, #24]	; (8007438 <prvResetNextTaskUnblockTime+0x40>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	4a04      	ldr	r2, [pc, #16]	; (800743c <prvResetNextTaskUnblockTime+0x44>)
 800742c:	6013      	str	r3, [r2, #0]
}
 800742e:	bf00      	nop
 8007430:	370c      	adds	r7, #12
 8007432:	46bd      	mov	sp, r7
 8007434:	bc80      	pop	{r7}
 8007436:	4770      	bx	lr
 8007438:	20000990 	.word	0x20000990
 800743c:	200009f8 	.word	0x200009f8

08007440 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007440:	b480      	push	{r7}
 8007442:	b083      	sub	sp, #12
 8007444:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007446:	4b0b      	ldr	r3, [pc, #44]	; (8007474 <xTaskGetSchedulerState+0x34>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d102      	bne.n	8007454 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800744e:	2301      	movs	r3, #1
 8007450:	607b      	str	r3, [r7, #4]
 8007452:	e008      	b.n	8007466 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007454:	4b08      	ldr	r3, [pc, #32]	; (8007478 <xTaskGetSchedulerState+0x38>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d102      	bne.n	8007462 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800745c:	2302      	movs	r3, #2
 800745e:	607b      	str	r3, [r7, #4]
 8007460:	e001      	b.n	8007466 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007462:	2300      	movs	r3, #0
 8007464:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007466:	687b      	ldr	r3, [r7, #4]
	}
 8007468:	4618      	mov	r0, r3
 800746a:	370c      	adds	r7, #12
 800746c:	46bd      	mov	sp, r7
 800746e:	bc80      	pop	{r7}
 8007470:	4770      	bx	lr
 8007472:	bf00      	nop
 8007474:	200009e4 	.word	0x200009e4
 8007478:	20000a00 	.word	0x20000a00

0800747c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800747c:	b580      	push	{r7, lr}
 800747e:	b084      	sub	sp, #16
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007488:	2300      	movs	r3, #0
 800748a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d06e      	beq.n	8007570 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007496:	4b39      	ldr	r3, [pc, #228]	; (800757c <xTaskPriorityInherit+0x100>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749c:	429a      	cmp	r2, r3
 800749e:	d25e      	bcs.n	800755e <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	699b      	ldr	r3, [r3, #24]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	db06      	blt.n	80074b6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074a8:	4b34      	ldr	r3, [pc, #208]	; (800757c <xTaskPriorityInherit+0x100>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ae:	f1c3 0207 	rsb	r2, r3, #7
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	6959      	ldr	r1, [r3, #20]
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074be:	4613      	mov	r3, r2
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	4413      	add	r3, r2
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	4a2e      	ldr	r2, [pc, #184]	; (8007580 <xTaskPriorityInherit+0x104>)
 80074c8:	4413      	add	r3, r2
 80074ca:	4299      	cmp	r1, r3
 80074cc:	d101      	bne.n	80074d2 <xTaskPriorityInherit+0x56>
 80074ce:	2301      	movs	r3, #1
 80074d0:	e000      	b.n	80074d4 <xTaskPriorityInherit+0x58>
 80074d2:	2300      	movs	r3, #0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d03a      	beq.n	800754e <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	3304      	adds	r3, #4
 80074dc:	4618      	mov	r0, r3
 80074de:	f7fe f9ff 	bl	80058e0 <uxListRemove>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d115      	bne.n	8007514 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ec:	4924      	ldr	r1, [pc, #144]	; (8007580 <xTaskPriorityInherit+0x104>)
 80074ee:	4613      	mov	r3, r2
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	4413      	add	r3, r2
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	440b      	add	r3, r1
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d10a      	bne.n	8007514 <xTaskPriorityInherit+0x98>
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007502:	2201      	movs	r2, #1
 8007504:	fa02 f303 	lsl.w	r3, r2, r3
 8007508:	43da      	mvns	r2, r3
 800750a:	4b1e      	ldr	r3, [pc, #120]	; (8007584 <xTaskPriorityInherit+0x108>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4013      	ands	r3, r2
 8007510:	4a1c      	ldr	r2, [pc, #112]	; (8007584 <xTaskPriorityInherit+0x108>)
 8007512:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007514:	4b19      	ldr	r3, [pc, #100]	; (800757c <xTaskPriorityInherit+0x100>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007522:	2201      	movs	r2, #1
 8007524:	409a      	lsls	r2, r3
 8007526:	4b17      	ldr	r3, [pc, #92]	; (8007584 <xTaskPriorityInherit+0x108>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4313      	orrs	r3, r2
 800752c:	4a15      	ldr	r2, [pc, #84]	; (8007584 <xTaskPriorityInherit+0x108>)
 800752e:	6013      	str	r3, [r2, #0]
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007534:	4613      	mov	r3, r2
 8007536:	009b      	lsls	r3, r3, #2
 8007538:	4413      	add	r3, r2
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	4a10      	ldr	r2, [pc, #64]	; (8007580 <xTaskPriorityInherit+0x104>)
 800753e:	441a      	add	r2, r3
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	3304      	adds	r3, #4
 8007544:	4619      	mov	r1, r3
 8007546:	4610      	mov	r0, r2
 8007548:	f7fe f96f 	bl	800582a <vListInsertEnd>
 800754c:	e004      	b.n	8007558 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800754e:	4b0b      	ldr	r3, [pc, #44]	; (800757c <xTaskPriorityInherit+0x100>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007558:	2301      	movs	r3, #1
 800755a:	60fb      	str	r3, [r7, #12]
 800755c:	e008      	b.n	8007570 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007562:	4b06      	ldr	r3, [pc, #24]	; (800757c <xTaskPriorityInherit+0x100>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007568:	429a      	cmp	r2, r3
 800756a:	d201      	bcs.n	8007570 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800756c:	2301      	movs	r3, #1
 800756e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007570:	68fb      	ldr	r3, [r7, #12]
	}
 8007572:	4618      	mov	r0, r3
 8007574:	3710      	adds	r7, #16
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop
 800757c:	200008d8 	.word	0x200008d8
 8007580:	200008dc 	.word	0x200008dc
 8007584:	200009e0 	.word	0x200009e0

08007588 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007588:	b580      	push	{r7, lr}
 800758a:	b086      	sub	sp, #24
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007594:	2300      	movs	r3, #0
 8007596:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d06c      	beq.n	8007678 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800759e:	4b39      	ldr	r3, [pc, #228]	; (8007684 <xTaskPriorityDisinherit+0xfc>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	693a      	ldr	r2, [r7, #16]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d009      	beq.n	80075bc <xTaskPriorityDisinherit+0x34>
 80075a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ac:	f383 8811 	msr	BASEPRI, r3
 80075b0:	f3bf 8f6f 	isb	sy
 80075b4:	f3bf 8f4f 	dsb	sy
 80075b8:	60fb      	str	r3, [r7, #12]
 80075ba:	e7fe      	b.n	80075ba <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d109      	bne.n	80075d8 <xTaskPriorityDisinherit+0x50>
 80075c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c8:	f383 8811 	msr	BASEPRI, r3
 80075cc:	f3bf 8f6f 	isb	sy
 80075d0:	f3bf 8f4f 	dsb	sy
 80075d4:	60bb      	str	r3, [r7, #8]
 80075d6:	e7fe      	b.n	80075d6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075dc:	1e5a      	subs	r2, r3, #1
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d044      	beq.n	8007678 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d140      	bne.n	8007678 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	3304      	adds	r3, #4
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7fe f970 	bl	80058e0 <uxListRemove>
 8007600:	4603      	mov	r3, r0
 8007602:	2b00      	cmp	r3, #0
 8007604:	d115      	bne.n	8007632 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800760a:	491f      	ldr	r1, [pc, #124]	; (8007688 <xTaskPriorityDisinherit+0x100>)
 800760c:	4613      	mov	r3, r2
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	4413      	add	r3, r2
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	440b      	add	r3, r1
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d10a      	bne.n	8007632 <xTaskPriorityDisinherit+0xaa>
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007620:	2201      	movs	r2, #1
 8007622:	fa02 f303 	lsl.w	r3, r2, r3
 8007626:	43da      	mvns	r2, r3
 8007628:	4b18      	ldr	r3, [pc, #96]	; (800768c <xTaskPriorityDisinherit+0x104>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4013      	ands	r3, r2
 800762e:	4a17      	ldr	r2, [pc, #92]	; (800768c <xTaskPriorityDisinherit+0x104>)
 8007630:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763e:	f1c3 0207 	rsb	r2, r3, #7
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800764a:	2201      	movs	r2, #1
 800764c:	409a      	lsls	r2, r3
 800764e:	4b0f      	ldr	r3, [pc, #60]	; (800768c <xTaskPriorityDisinherit+0x104>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4313      	orrs	r3, r2
 8007654:	4a0d      	ldr	r2, [pc, #52]	; (800768c <xTaskPriorityDisinherit+0x104>)
 8007656:	6013      	str	r3, [r2, #0]
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800765c:	4613      	mov	r3, r2
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	4413      	add	r3, r2
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	4a08      	ldr	r2, [pc, #32]	; (8007688 <xTaskPriorityDisinherit+0x100>)
 8007666:	441a      	add	r2, r3
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	3304      	adds	r3, #4
 800766c:	4619      	mov	r1, r3
 800766e:	4610      	mov	r0, r2
 8007670:	f7fe f8db 	bl	800582a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007674:	2301      	movs	r3, #1
 8007676:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007678:	697b      	ldr	r3, [r7, #20]
	}
 800767a:	4618      	mov	r0, r3
 800767c:	3718      	adds	r7, #24
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}
 8007682:	bf00      	nop
 8007684:	200008d8 	.word	0x200008d8
 8007688:	200008dc 	.word	0x200008dc
 800768c:	200009e0 	.word	0x200009e0

08007690 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007690:	b580      	push	{r7, lr}
 8007692:	b088      	sub	sp, #32
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800769e:	2301      	movs	r3, #1
 80076a0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	f000 8086 	beq.w	80077b6 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d109      	bne.n	80076c6 <vTaskPriorityDisinheritAfterTimeout+0x36>
 80076b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b6:	f383 8811 	msr	BASEPRI, r3
 80076ba:	f3bf 8f6f 	isb	sy
 80076be:	f3bf 8f4f 	dsb	sy
 80076c2:	60fb      	str	r3, [r7, #12]
 80076c4:	e7fe      	b.n	80076c4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80076c6:	69bb      	ldr	r3, [r7, #24]
 80076c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076ca:	683a      	ldr	r2, [r7, #0]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d902      	bls.n	80076d6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	61fb      	str	r3, [r7, #28]
 80076d4:	e002      	b.n	80076dc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80076d6:	69bb      	ldr	r3, [r7, #24]
 80076d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076da:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80076dc:	69bb      	ldr	r3, [r7, #24]
 80076de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e0:	69fa      	ldr	r2, [r7, #28]
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d067      	beq.n	80077b6 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80076e6:	69bb      	ldr	r3, [r7, #24]
 80076e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ea:	697a      	ldr	r2, [r7, #20]
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d162      	bne.n	80077b6 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80076f0:	4b33      	ldr	r3, [pc, #204]	; (80077c0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	69ba      	ldr	r2, [r7, #24]
 80076f6:	429a      	cmp	r2, r3
 80076f8:	d109      	bne.n	800770e <vTaskPriorityDisinheritAfterTimeout+0x7e>
 80076fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fe:	f383 8811 	msr	BASEPRI, r3
 8007702:	f3bf 8f6f 	isb	sy
 8007706:	f3bf 8f4f 	dsb	sy
 800770a:	60bb      	str	r3, [r7, #8]
 800770c:	e7fe      	b.n	800770c <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800770e:	69bb      	ldr	r3, [r7, #24]
 8007710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007712:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007714:	69bb      	ldr	r3, [r7, #24]
 8007716:	69fa      	ldr	r2, [r7, #28]
 8007718:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800771a:	69bb      	ldr	r3, [r7, #24]
 800771c:	699b      	ldr	r3, [r3, #24]
 800771e:	2b00      	cmp	r3, #0
 8007720:	db04      	blt.n	800772c <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	f1c3 0207 	rsb	r2, r3, #7
 8007728:	69bb      	ldr	r3, [r7, #24]
 800772a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800772c:	69bb      	ldr	r3, [r7, #24]
 800772e:	6959      	ldr	r1, [r3, #20]
 8007730:	693a      	ldr	r2, [r7, #16]
 8007732:	4613      	mov	r3, r2
 8007734:	009b      	lsls	r3, r3, #2
 8007736:	4413      	add	r3, r2
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	4a22      	ldr	r2, [pc, #136]	; (80077c4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800773c:	4413      	add	r3, r2
 800773e:	4299      	cmp	r1, r3
 8007740:	d101      	bne.n	8007746 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8007742:	2301      	movs	r3, #1
 8007744:	e000      	b.n	8007748 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 8007746:	2300      	movs	r3, #0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d034      	beq.n	80077b6 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800774c:	69bb      	ldr	r3, [r7, #24]
 800774e:	3304      	adds	r3, #4
 8007750:	4618      	mov	r0, r3
 8007752:	f7fe f8c5 	bl	80058e0 <uxListRemove>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d115      	bne.n	8007788 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007760:	4918      	ldr	r1, [pc, #96]	; (80077c4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007762:	4613      	mov	r3, r2
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	4413      	add	r3, r2
 8007768:	009b      	lsls	r3, r3, #2
 800776a:	440b      	add	r3, r1
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d10a      	bne.n	8007788 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 8007772:	69bb      	ldr	r3, [r7, #24]
 8007774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007776:	2201      	movs	r2, #1
 8007778:	fa02 f303 	lsl.w	r3, r2, r3
 800777c:	43da      	mvns	r2, r3
 800777e:	4b12      	ldr	r3, [pc, #72]	; (80077c8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4013      	ands	r3, r2
 8007784:	4a10      	ldr	r2, [pc, #64]	; (80077c8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007786:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007788:	69bb      	ldr	r3, [r7, #24]
 800778a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800778c:	2201      	movs	r2, #1
 800778e:	409a      	lsls	r2, r3
 8007790:	4b0d      	ldr	r3, [pc, #52]	; (80077c8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4313      	orrs	r3, r2
 8007796:	4a0c      	ldr	r2, [pc, #48]	; (80077c8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007798:	6013      	str	r3, [r2, #0]
 800779a:	69bb      	ldr	r3, [r7, #24]
 800779c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800779e:	4613      	mov	r3, r2
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	4413      	add	r3, r2
 80077a4:	009b      	lsls	r3, r3, #2
 80077a6:	4a07      	ldr	r2, [pc, #28]	; (80077c4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80077a8:	441a      	add	r2, r3
 80077aa:	69bb      	ldr	r3, [r7, #24]
 80077ac:	3304      	adds	r3, #4
 80077ae:	4619      	mov	r1, r3
 80077b0:	4610      	mov	r0, r2
 80077b2:	f7fe f83a 	bl	800582a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80077b6:	bf00      	nop
 80077b8:	3720      	adds	r7, #32
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	200008d8 	.word	0x200008d8
 80077c4:	200008dc 	.word	0x200008dc
 80077c8:	200009e0 	.word	0x200009e0

080077cc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80077cc:	b480      	push	{r7}
 80077ce:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80077d0:	4b07      	ldr	r3, [pc, #28]	; (80077f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d004      	beq.n	80077e2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80077d8:	4b05      	ldr	r3, [pc, #20]	; (80077f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80077de:	3201      	adds	r2, #1
 80077e0:	655a      	str	r2, [r3, #84]	; 0x54
		}

		return pxCurrentTCB;
 80077e2:	4b03      	ldr	r3, [pc, #12]	; (80077f0 <pvTaskIncrementMutexHeldCount+0x24>)
 80077e4:	681b      	ldr	r3, [r3, #0]
	}
 80077e6:	4618      	mov	r0, r3
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bc80      	pop	{r7}
 80077ec:	4770      	bx	lr
 80077ee:	bf00      	nop
 80077f0:	200008d8 	.word	0x200008d8

080077f4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80077fe:	4b29      	ldr	r3, [pc, #164]	; (80078a4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007804:	4b28      	ldr	r3, [pc, #160]	; (80078a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	3304      	adds	r3, #4
 800780a:	4618      	mov	r0, r3
 800780c:	f7fe f868 	bl	80058e0 <uxListRemove>
 8007810:	4603      	mov	r3, r0
 8007812:	2b00      	cmp	r3, #0
 8007814:	d10b      	bne.n	800782e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8007816:	4b24      	ldr	r3, [pc, #144]	; (80078a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800781c:	2201      	movs	r2, #1
 800781e:	fa02 f303 	lsl.w	r3, r2, r3
 8007822:	43da      	mvns	r2, r3
 8007824:	4b21      	ldr	r3, [pc, #132]	; (80078ac <prvAddCurrentTaskToDelayedList+0xb8>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4013      	ands	r3, r2
 800782a:	4a20      	ldr	r2, [pc, #128]	; (80078ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800782c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007834:	d10a      	bne.n	800784c <prvAddCurrentTaskToDelayedList+0x58>
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d007      	beq.n	800784c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800783c:	4b1a      	ldr	r3, [pc, #104]	; (80078a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	3304      	adds	r3, #4
 8007842:	4619      	mov	r1, r3
 8007844:	481a      	ldr	r0, [pc, #104]	; (80078b0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007846:	f7fd fff0 	bl	800582a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800784a:	e026      	b.n	800789a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800784c:	68fa      	ldr	r2, [r7, #12]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4413      	add	r3, r2
 8007852:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007854:	4b14      	ldr	r3, [pc, #80]	; (80078a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	68ba      	ldr	r2, [r7, #8]
 800785a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800785c:	68ba      	ldr	r2, [r7, #8]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	429a      	cmp	r2, r3
 8007862:	d209      	bcs.n	8007878 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007864:	4b13      	ldr	r3, [pc, #76]	; (80078b4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	4b0f      	ldr	r3, [pc, #60]	; (80078a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	3304      	adds	r3, #4
 800786e:	4619      	mov	r1, r3
 8007870:	4610      	mov	r0, r2
 8007872:	f7fd fffd 	bl	8005870 <vListInsert>
}
 8007876:	e010      	b.n	800789a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007878:	4b0f      	ldr	r3, [pc, #60]	; (80078b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	4b0a      	ldr	r3, [pc, #40]	; (80078a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	3304      	adds	r3, #4
 8007882:	4619      	mov	r1, r3
 8007884:	4610      	mov	r0, r2
 8007886:	f7fd fff3 	bl	8005870 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800788a:	4b0c      	ldr	r3, [pc, #48]	; (80078bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	68ba      	ldr	r2, [r7, #8]
 8007890:	429a      	cmp	r2, r3
 8007892:	d202      	bcs.n	800789a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007894:	4a09      	ldr	r2, [pc, #36]	; (80078bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	6013      	str	r3, [r2, #0]
}
 800789a:	bf00      	nop
 800789c:	3710      	adds	r7, #16
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	bf00      	nop
 80078a4:	200009dc 	.word	0x200009dc
 80078a8:	200008d8 	.word	0x200008d8
 80078ac:	200009e0 	.word	0x200009e0
 80078b0:	200009c4 	.word	0x200009c4
 80078b4:	20000994 	.word	0x20000994
 80078b8:	20000990 	.word	0x20000990
 80078bc:	200009f8 	.word	0x200009f8

080078c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b08a      	sub	sp, #40	; 0x28
 80078c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80078c6:	2300      	movs	r3, #0
 80078c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80078ca:	f000 fb37 	bl	8007f3c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80078ce:	4b1c      	ldr	r3, [pc, #112]	; (8007940 <xTimerCreateTimerTask+0x80>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d021      	beq.n	800791a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80078d6:	2300      	movs	r3, #0
 80078d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80078da:	2300      	movs	r3, #0
 80078dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80078de:	1d3a      	adds	r2, r7, #4
 80078e0:	f107 0108 	add.w	r1, r7, #8
 80078e4:	f107 030c 	add.w	r3, r7, #12
 80078e8:	4618      	mov	r0, r3
 80078ea:	f7f9 fe61 	bl	80015b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80078ee:	6879      	ldr	r1, [r7, #4]
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	68fa      	ldr	r2, [r7, #12]
 80078f4:	9202      	str	r2, [sp, #8]
 80078f6:	9301      	str	r3, [sp, #4]
 80078f8:	2302      	movs	r3, #2
 80078fa:	9300      	str	r3, [sp, #0]
 80078fc:	2300      	movs	r3, #0
 80078fe:	460a      	mov	r2, r1
 8007900:	4910      	ldr	r1, [pc, #64]	; (8007944 <xTimerCreateTimerTask+0x84>)
 8007902:	4811      	ldr	r0, [pc, #68]	; (8007948 <xTimerCreateTimerTask+0x88>)
 8007904:	f7fe ff96 	bl	8006834 <xTaskCreateStatic>
 8007908:	4602      	mov	r2, r0
 800790a:	4b10      	ldr	r3, [pc, #64]	; (800794c <xTimerCreateTimerTask+0x8c>)
 800790c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800790e:	4b0f      	ldr	r3, [pc, #60]	; (800794c <xTimerCreateTimerTask+0x8c>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d001      	beq.n	800791a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007916:	2301      	movs	r3, #1
 8007918:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d109      	bne.n	8007934 <xTimerCreateTimerTask+0x74>
 8007920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007924:	f383 8811 	msr	BASEPRI, r3
 8007928:	f3bf 8f6f 	isb	sy
 800792c:	f3bf 8f4f 	dsb	sy
 8007930:	613b      	str	r3, [r7, #16]
 8007932:	e7fe      	b.n	8007932 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8007934:	697b      	ldr	r3, [r7, #20]
}
 8007936:	4618      	mov	r0, r3
 8007938:	3718      	adds	r7, #24
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	20000a34 	.word	0x20000a34
 8007944:	0801e11c 	.word	0x0801e11c
 8007948:	08007b85 	.word	0x08007b85
 800794c:	20000a38 	.word	0x20000a38

08007950 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007950:	b580      	push	{r7, lr}
 8007952:	b088      	sub	sp, #32
 8007954:	af02      	add	r7, sp, #8
 8007956:	60f8      	str	r0, [r7, #12]
 8007958:	60b9      	str	r1, [r7, #8]
 800795a:	607a      	str	r2, [r7, #4]
 800795c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800795e:	202c      	movs	r0, #44	; 0x2c
 8007960:	f000 fd30 	bl	80083c4 <pvPortMalloc>
 8007964:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d00d      	beq.n	8007988 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	9301      	str	r3, [sp, #4]
 8007970:	6a3b      	ldr	r3, [r7, #32]
 8007972:	9300      	str	r3, [sp, #0]
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	68b9      	ldr	r1, [r7, #8]
 800797a:	68f8      	ldr	r0, [r7, #12]
 800797c:	f000 f844 	bl	8007a08 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	2200      	movs	r2, #0
 8007984:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8007988:	697b      	ldr	r3, [r7, #20]
	}
 800798a:	4618      	mov	r0, r3
 800798c:	3718      	adds	r7, #24
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8007992:	b580      	push	{r7, lr}
 8007994:	b08a      	sub	sp, #40	; 0x28
 8007996:	af02      	add	r7, sp, #8
 8007998:	60f8      	str	r0, [r7, #12]
 800799a:	60b9      	str	r1, [r7, #8]
 800799c:	607a      	str	r2, [r7, #4]
 800799e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80079a0:	232c      	movs	r3, #44	; 0x2c
 80079a2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	2b2c      	cmp	r3, #44	; 0x2c
 80079a8:	d009      	beq.n	80079be <xTimerCreateStatic+0x2c>
 80079aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ae:	f383 8811 	msr	BASEPRI, r3
 80079b2:	f3bf 8f6f 	isb	sy
 80079b6:	f3bf 8f4f 	dsb	sy
 80079ba:	61bb      	str	r3, [r7, #24]
 80079bc:	e7fe      	b.n	80079bc <xTimerCreateStatic+0x2a>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80079be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d109      	bne.n	80079d8 <xTimerCreateStatic+0x46>
 80079c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c8:	f383 8811 	msr	BASEPRI, r3
 80079cc:	f3bf 8f6f 	isb	sy
 80079d0:	f3bf 8f4f 	dsb	sy
 80079d4:	617b      	str	r3, [r7, #20]
 80079d6:	e7fe      	b.n	80079d6 <xTimerCreateStatic+0x44>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80079d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079da:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d00d      	beq.n	80079fe <xTimerCreateStatic+0x6c>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80079e2:	69fb      	ldr	r3, [r7, #28]
 80079e4:	9301      	str	r3, [sp, #4]
 80079e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e8:	9300      	str	r3, [sp, #0]
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	68b9      	ldr	r1, [r7, #8]
 80079f0:	68f8      	ldr	r0, [r7, #12]
 80079f2:	f000 f809 	bl	8007a08 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 80079f6:	69fb      	ldr	r3, [r7, #28]
 80079f8:	2201      	movs	r2, #1
 80079fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 80079fe:	69fb      	ldr	r3, [r7, #28]
	}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3720      	adds	r7, #32
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b086      	sub	sp, #24
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	60b9      	str	r1, [r7, #8]
 8007a12:	607a      	str	r2, [r7, #4]
 8007a14:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d109      	bne.n	8007a30 <prvInitialiseNewTimer+0x28>
 8007a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a20:	f383 8811 	msr	BASEPRI, r3
 8007a24:	f3bf 8f6f 	isb	sy
 8007a28:	f3bf 8f4f 	dsb	sy
 8007a2c:	617b      	str	r3, [r7, #20]
 8007a2e:	e7fe      	b.n	8007a2e <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8007a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d015      	beq.n	8007a62 <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8007a36:	f000 fa81 	bl	8007f3c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8007a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3c:	68fa      	ldr	r2, [r7, #12]
 8007a3e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a42:	68ba      	ldr	r2, [r7, #8]
 8007a44:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8007a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8007a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4e:	683a      	ldr	r2, [r7, #0]
 8007a50:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a54:	6a3a      	ldr	r2, [r7, #32]
 8007a56:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5a:	3304      	adds	r3, #4
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f7fd fed8 	bl	8005812 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8007a62:	bf00      	nop
 8007a64:	3718      	adds	r7, #24
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
	...

08007a6c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b08a      	sub	sp, #40	; 0x28
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	607a      	str	r2, [r7, #4]
 8007a78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d109      	bne.n	8007a98 <xTimerGenericCommand+0x2c>
 8007a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a88:	f383 8811 	msr	BASEPRI, r3
 8007a8c:	f3bf 8f6f 	isb	sy
 8007a90:	f3bf 8f4f 	dsb	sy
 8007a94:	623b      	str	r3, [r7, #32]
 8007a96:	e7fe      	b.n	8007a96 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007a98:	4b19      	ldr	r3, [pc, #100]	; (8007b00 <xTimerGenericCommand+0x94>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d02a      	beq.n	8007af6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	2b05      	cmp	r3, #5
 8007ab0:	dc18      	bgt.n	8007ae4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007ab2:	f7ff fcc5 	bl	8007440 <xTaskGetSchedulerState>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b02      	cmp	r3, #2
 8007aba:	d109      	bne.n	8007ad0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007abc:	4b10      	ldr	r3, [pc, #64]	; (8007b00 <xTimerGenericCommand+0x94>)
 8007abe:	6818      	ldr	r0, [r3, #0]
 8007ac0:	f107 0114 	add.w	r1, r7, #20
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ac8:	f7fe f8b8 	bl	8005c3c <xQueueGenericSend>
 8007acc:	6278      	str	r0, [r7, #36]	; 0x24
 8007ace:	e012      	b.n	8007af6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007ad0:	4b0b      	ldr	r3, [pc, #44]	; (8007b00 <xTimerGenericCommand+0x94>)
 8007ad2:	6818      	ldr	r0, [r3, #0]
 8007ad4:	f107 0114 	add.w	r1, r7, #20
 8007ad8:	2300      	movs	r3, #0
 8007ada:	2200      	movs	r2, #0
 8007adc:	f7fe f8ae 	bl	8005c3c <xQueueGenericSend>
 8007ae0:	6278      	str	r0, [r7, #36]	; 0x24
 8007ae2:	e008      	b.n	8007af6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007ae4:	4b06      	ldr	r3, [pc, #24]	; (8007b00 <xTimerGenericCommand+0x94>)
 8007ae6:	6818      	ldr	r0, [r3, #0]
 8007ae8:	f107 0114 	add.w	r1, r7, #20
 8007aec:	2300      	movs	r3, #0
 8007aee:	683a      	ldr	r2, [r7, #0]
 8007af0:	f7fe f99e 	bl	8005e30 <xQueueGenericSendFromISR>
 8007af4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3728      	adds	r7, #40	; 0x28
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}
 8007b00:	20000a34 	.word	0x20000a34

08007b04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b088      	sub	sp, #32
 8007b08:	af02      	add	r7, sp, #8
 8007b0a:	6078      	str	r0, [r7, #4]
 8007b0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b0e:	4b1c      	ldr	r3, [pc, #112]	; (8007b80 <prvProcessExpiredTimer+0x7c>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	68db      	ldr	r3, [r3, #12]
 8007b16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	3304      	adds	r3, #4
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f7fd fedf 	bl	80058e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	69db      	ldr	r3, [r3, #28]
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d121      	bne.n	8007b6e <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	699a      	ldr	r2, [r3, #24]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	18d1      	adds	r1, r2, r3
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	683a      	ldr	r2, [r7, #0]
 8007b36:	6978      	ldr	r0, [r7, #20]
 8007b38:	f000 f8c8 	bl	8007ccc <prvInsertTimerInActiveList>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d015      	beq.n	8007b6e <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007b42:	2300      	movs	r3, #0
 8007b44:	9300      	str	r3, [sp, #0]
 8007b46:	2300      	movs	r3, #0
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	2100      	movs	r1, #0
 8007b4c:	6978      	ldr	r0, [r7, #20]
 8007b4e:	f7ff ff8d 	bl	8007a6c <xTimerGenericCommand>
 8007b52:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d109      	bne.n	8007b6e <prvProcessExpiredTimer+0x6a>
 8007b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5e:	f383 8811 	msr	BASEPRI, r3
 8007b62:	f3bf 8f6f 	isb	sy
 8007b66:	f3bf 8f4f 	dsb	sy
 8007b6a:	60fb      	str	r3, [r7, #12]
 8007b6c:	e7fe      	b.n	8007b6c <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b72:	6978      	ldr	r0, [r7, #20]
 8007b74:	4798      	blx	r3
}
 8007b76:	bf00      	nop
 8007b78:	3718      	adds	r7, #24
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	20000a2c 	.word	0x20000a2c

08007b84 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007b8c:	f107 0308 	add.w	r3, r7, #8
 8007b90:	4618      	mov	r0, r3
 8007b92:	f000 f857 	bl	8007c44 <prvGetNextExpireTime>
 8007b96:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	68f8      	ldr	r0, [r7, #12]
 8007b9e:	f000 f803 	bl	8007ba8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007ba2:	f000 f8d5 	bl	8007d50 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007ba6:	e7f1      	b.n	8007b8c <prvTimerTask+0x8>

08007ba8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007bb2:	f7ff f85d 	bl	8006c70 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007bb6:	f107 0308 	add.w	r3, r7, #8
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f000 f866 	bl	8007c8c <prvSampleTimeNow>
 8007bc0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d130      	bne.n	8007c2a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d10a      	bne.n	8007be4 <prvProcessTimerOrBlockTask+0x3c>
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d806      	bhi.n	8007be4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007bd6:	f7ff f859 	bl	8006c8c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007bda:	68f9      	ldr	r1, [r7, #12]
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f7ff ff91 	bl	8007b04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007be2:	e024      	b.n	8007c2e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d008      	beq.n	8007bfc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007bea:	4b13      	ldr	r3, [pc, #76]	; (8007c38 <prvProcessTimerOrBlockTask+0x90>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	bf0c      	ite	eq
 8007bf4:	2301      	moveq	r3, #1
 8007bf6:	2300      	movne	r3, #0
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007bfc:	4b0f      	ldr	r3, [pc, #60]	; (8007c3c <prvProcessTimerOrBlockTask+0x94>)
 8007bfe:	6818      	ldr	r0, [r3, #0]
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	1ad3      	subs	r3, r2, r3
 8007c06:	683a      	ldr	r2, [r7, #0]
 8007c08:	4619      	mov	r1, r3
 8007c0a:	f7fe fddf 	bl	80067cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007c0e:	f7ff f83d 	bl	8006c8c <xTaskResumeAll>
 8007c12:	4603      	mov	r3, r0
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d10a      	bne.n	8007c2e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007c18:	4b09      	ldr	r3, [pc, #36]	; (8007c40 <prvProcessTimerOrBlockTask+0x98>)
 8007c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c1e:	601a      	str	r2, [r3, #0]
 8007c20:	f3bf 8f4f 	dsb	sy
 8007c24:	f3bf 8f6f 	isb	sy
}
 8007c28:	e001      	b.n	8007c2e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007c2a:	f7ff f82f 	bl	8006c8c <xTaskResumeAll>
}
 8007c2e:	bf00      	nop
 8007c30:	3710      	adds	r7, #16
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
 8007c36:	bf00      	nop
 8007c38:	20000a30 	.word	0x20000a30
 8007c3c:	20000a34 	.word	0x20000a34
 8007c40:	e000ed04 	.word	0xe000ed04

08007c44 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007c44:	b480      	push	{r7}
 8007c46:	b085      	sub	sp, #20
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007c4c:	4b0e      	ldr	r3, [pc, #56]	; (8007c88 <prvGetNextExpireTime+0x44>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	bf0c      	ite	eq
 8007c56:	2301      	moveq	r3, #1
 8007c58:	2300      	movne	r3, #0
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d105      	bne.n	8007c76 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c6a:	4b07      	ldr	r3, [pc, #28]	; (8007c88 <prvGetNextExpireTime+0x44>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	60fb      	str	r3, [r7, #12]
 8007c74:	e001      	b.n	8007c7a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007c76:	2300      	movs	r3, #0
 8007c78:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3714      	adds	r7, #20
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bc80      	pop	{r7}
 8007c84:	4770      	bx	lr
 8007c86:	bf00      	nop
 8007c88:	20000a2c 	.word	0x20000a2c

08007c8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007c94:	f7ff f896 	bl	8006dc4 <xTaskGetTickCount>
 8007c98:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007c9a:	4b0b      	ldr	r3, [pc, #44]	; (8007cc8 <prvSampleTimeNow+0x3c>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	68fa      	ldr	r2, [r7, #12]
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d205      	bcs.n	8007cb0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007ca4:	f000 f8ea 	bl	8007e7c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2201      	movs	r2, #1
 8007cac:	601a      	str	r2, [r3, #0]
 8007cae:	e002      	b.n	8007cb6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007cb6:	4a04      	ldr	r2, [pc, #16]	; (8007cc8 <prvSampleTimeNow+0x3c>)
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3710      	adds	r7, #16
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	20000a3c 	.word	0x20000a3c

08007ccc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b086      	sub	sp, #24
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	60f8      	str	r0, [r7, #12]
 8007cd4:	60b9      	str	r1, [r7, #8]
 8007cd6:	607a      	str	r2, [r7, #4]
 8007cd8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	68ba      	ldr	r2, [r7, #8]
 8007ce2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	68fa      	ldr	r2, [r7, #12]
 8007ce8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007cea:	68ba      	ldr	r2, [r7, #8]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d812      	bhi.n	8007d18 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	1ad2      	subs	r2, r2, r3
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	699b      	ldr	r3, [r3, #24]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d302      	bcc.n	8007d06 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007d00:	2301      	movs	r3, #1
 8007d02:	617b      	str	r3, [r7, #20]
 8007d04:	e01b      	b.n	8007d3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007d06:	4b10      	ldr	r3, [pc, #64]	; (8007d48 <prvInsertTimerInActiveList+0x7c>)
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	3304      	adds	r3, #4
 8007d0e:	4619      	mov	r1, r3
 8007d10:	4610      	mov	r0, r2
 8007d12:	f7fd fdad 	bl	8005870 <vListInsert>
 8007d16:	e012      	b.n	8007d3e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d206      	bcs.n	8007d2e <prvInsertTimerInActiveList+0x62>
 8007d20:	68ba      	ldr	r2, [r7, #8]
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d302      	bcc.n	8007d2e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	617b      	str	r3, [r7, #20]
 8007d2c:	e007      	b.n	8007d3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007d2e:	4b07      	ldr	r3, [pc, #28]	; (8007d4c <prvInsertTimerInActiveList+0x80>)
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	3304      	adds	r3, #4
 8007d36:	4619      	mov	r1, r3
 8007d38:	4610      	mov	r0, r2
 8007d3a:	f7fd fd99 	bl	8005870 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007d3e:	697b      	ldr	r3, [r7, #20]
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3718      	adds	r7, #24
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}
 8007d48:	20000a30 	.word	0x20000a30
 8007d4c:	20000a2c 	.word	0x20000a2c

08007d50 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b08c      	sub	sp, #48	; 0x30
 8007d54:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d56:	e07f      	b.n	8007e58 <prvProcessReceivedCommands+0x108>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	db7b      	blt.n	8007e56 <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d64:	695b      	ldr	r3, [r3, #20]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d004      	beq.n	8007d74 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6c:	3304      	adds	r3, #4
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f7fd fdb6 	bl	80058e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d74:	1d3b      	adds	r3, r7, #4
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7ff ff88 	bl	8007c8c <prvSampleTimeNow>
 8007d7c:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	2b09      	cmp	r3, #9
 8007d82:	d869      	bhi.n	8007e58 <prvProcessReceivedCommands+0x108>
 8007d84:	a201      	add	r2, pc, #4	; (adr r2, 8007d8c <prvProcessReceivedCommands+0x3c>)
 8007d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d8a:	bf00      	nop
 8007d8c:	08007db5 	.word	0x08007db5
 8007d90:	08007db5 	.word	0x08007db5
 8007d94:	08007db5 	.word	0x08007db5
 8007d98:	08007e59 	.word	0x08007e59
 8007d9c:	08007e0f 	.word	0x08007e0f
 8007da0:	08007e45 	.word	0x08007e45
 8007da4:	08007db5 	.word	0x08007db5
 8007da8:	08007db5 	.word	0x08007db5
 8007dac:	08007e59 	.word	0x08007e59
 8007db0:	08007e0f 	.word	0x08007e0f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007db4:	68fa      	ldr	r2, [r7, #12]
 8007db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007db8:	699b      	ldr	r3, [r3, #24]
 8007dba:	18d1      	adds	r1, r2, r3
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	6a3a      	ldr	r2, [r7, #32]
 8007dc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007dc2:	f7ff ff83 	bl	8007ccc <prvInsertTimerInActiveList>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d045      	beq.n	8007e58 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007dd2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd6:	69db      	ldr	r3, [r3, #28]
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d13d      	bne.n	8007e58 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007ddc:	68fa      	ldr	r2, [r7, #12]
 8007dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de0:	699b      	ldr	r3, [r3, #24]
 8007de2:	441a      	add	r2, r3
 8007de4:	2300      	movs	r3, #0
 8007de6:	9300      	str	r3, [sp, #0]
 8007de8:	2300      	movs	r3, #0
 8007dea:	2100      	movs	r1, #0
 8007dec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007dee:	f7ff fe3d 	bl	8007a6c <xTimerGenericCommand>
 8007df2:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d12e      	bne.n	8007e58 <prvProcessReceivedCommands+0x108>
 8007dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfe:	f383 8811 	msr	BASEPRI, r3
 8007e02:	f3bf 8f6f 	isb	sy
 8007e06:	f3bf 8f4f 	dsb	sy
 8007e0a:	61bb      	str	r3, [r7, #24]
 8007e0c:	e7fe      	b.n	8007e0c <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007e0e:	68fa      	ldr	r2, [r7, #12]
 8007e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e12:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e16:	699b      	ldr	r3, [r3, #24]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d109      	bne.n	8007e30 <prvProcessReceivedCommands+0xe0>
 8007e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e20:	f383 8811 	msr	BASEPRI, r3
 8007e24:	f3bf 8f6f 	isb	sy
 8007e28:	f3bf 8f4f 	dsb	sy
 8007e2c:	617b      	str	r3, [r7, #20]
 8007e2e:	e7fe      	b.n	8007e2e <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e32:	699a      	ldr	r2, [r3, #24]
 8007e34:	6a3b      	ldr	r3, [r7, #32]
 8007e36:	18d1      	adds	r1, r2, r3
 8007e38:	6a3b      	ldr	r3, [r7, #32]
 8007e3a:	6a3a      	ldr	r2, [r7, #32]
 8007e3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e3e:	f7ff ff45 	bl	8007ccc <prvInsertTimerInActiveList>
					break;
 8007e42:	e009      	b.n	8007e58 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d104      	bne.n	8007e58 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 8007e4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e50:	f000 fb7a 	bl	8008548 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007e54:	e000      	b.n	8007e58 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007e56:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007e58:	4b07      	ldr	r3, [pc, #28]	; (8007e78 <prvProcessReceivedCommands+0x128>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f107 0108 	add.w	r1, r7, #8
 8007e60:	2200      	movs	r2, #0
 8007e62:	4618      	mov	r0, r3
 8007e64:	f7fe f902 	bl	800606c <xQueueReceive>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	f47f af74 	bne.w	8007d58 <prvProcessReceivedCommands+0x8>
	}
}
 8007e70:	bf00      	nop
 8007e72:	3728      	adds	r7, #40	; 0x28
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}
 8007e78:	20000a34 	.word	0x20000a34

08007e7c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b088      	sub	sp, #32
 8007e80:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007e82:	e044      	b.n	8007f0e <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e84:	4b2b      	ldr	r3, [pc, #172]	; (8007f34 <prvSwitchTimerLists+0xb8>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	68db      	ldr	r3, [r3, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e8e:	4b29      	ldr	r3, [pc, #164]	; (8007f34 <prvSwitchTimerLists+0xb8>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	3304      	adds	r3, #4
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f7fd fd1f 	bl	80058e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea6:	68f8      	ldr	r0, [r7, #12]
 8007ea8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	69db      	ldr	r3, [r3, #28]
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	d12d      	bne.n	8007f0e <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	699b      	ldr	r3, [r3, #24]
 8007eb6:	693a      	ldr	r2, [r7, #16]
 8007eb8:	4413      	add	r3, r2
 8007eba:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007ebc:	68ba      	ldr	r2, [r7, #8]
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d90e      	bls.n	8007ee2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	68ba      	ldr	r2, [r7, #8]
 8007ec8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	68fa      	ldr	r2, [r7, #12]
 8007ece:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ed0:	4b18      	ldr	r3, [pc, #96]	; (8007f34 <prvSwitchTimerLists+0xb8>)
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	3304      	adds	r3, #4
 8007ed8:	4619      	mov	r1, r3
 8007eda:	4610      	mov	r0, r2
 8007edc:	f7fd fcc8 	bl	8005870 <vListInsert>
 8007ee0:	e015      	b.n	8007f0e <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	9300      	str	r3, [sp, #0]
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	693a      	ldr	r2, [r7, #16]
 8007eea:	2100      	movs	r1, #0
 8007eec:	68f8      	ldr	r0, [r7, #12]
 8007eee:	f7ff fdbd 	bl	8007a6c <xTimerGenericCommand>
 8007ef2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d109      	bne.n	8007f0e <prvSwitchTimerLists+0x92>
 8007efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007efe:	f383 8811 	msr	BASEPRI, r3
 8007f02:	f3bf 8f6f 	isb	sy
 8007f06:	f3bf 8f4f 	dsb	sy
 8007f0a:	603b      	str	r3, [r7, #0]
 8007f0c:	e7fe      	b.n	8007f0c <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007f0e:	4b09      	ldr	r3, [pc, #36]	; (8007f34 <prvSwitchTimerLists+0xb8>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d1b5      	bne.n	8007e84 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007f18:	4b06      	ldr	r3, [pc, #24]	; (8007f34 <prvSwitchTimerLists+0xb8>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007f1e:	4b06      	ldr	r3, [pc, #24]	; (8007f38 <prvSwitchTimerLists+0xbc>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a04      	ldr	r2, [pc, #16]	; (8007f34 <prvSwitchTimerLists+0xb8>)
 8007f24:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007f26:	4a04      	ldr	r2, [pc, #16]	; (8007f38 <prvSwitchTimerLists+0xbc>)
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	6013      	str	r3, [r2, #0]
}
 8007f2c:	bf00      	nop
 8007f2e:	3718      	adds	r7, #24
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}
 8007f34:	20000a2c 	.word	0x20000a2c
 8007f38:	20000a30 	.word	0x20000a30

08007f3c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b082      	sub	sp, #8
 8007f40:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007f42:	f000 f949 	bl	80081d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007f46:	4b15      	ldr	r3, [pc, #84]	; (8007f9c <prvCheckForValidListAndQueue+0x60>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d120      	bne.n	8007f90 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007f4e:	4814      	ldr	r0, [pc, #80]	; (8007fa0 <prvCheckForValidListAndQueue+0x64>)
 8007f50:	f7fd fc40 	bl	80057d4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007f54:	4813      	ldr	r0, [pc, #76]	; (8007fa4 <prvCheckForValidListAndQueue+0x68>)
 8007f56:	f7fd fc3d 	bl	80057d4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007f5a:	4b13      	ldr	r3, [pc, #76]	; (8007fa8 <prvCheckForValidListAndQueue+0x6c>)
 8007f5c:	4a10      	ldr	r2, [pc, #64]	; (8007fa0 <prvCheckForValidListAndQueue+0x64>)
 8007f5e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007f60:	4b12      	ldr	r3, [pc, #72]	; (8007fac <prvCheckForValidListAndQueue+0x70>)
 8007f62:	4a10      	ldr	r2, [pc, #64]	; (8007fa4 <prvCheckForValidListAndQueue+0x68>)
 8007f64:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007f66:	2300      	movs	r3, #0
 8007f68:	9300      	str	r3, [sp, #0]
 8007f6a:	4b11      	ldr	r3, [pc, #68]	; (8007fb0 <prvCheckForValidListAndQueue+0x74>)
 8007f6c:	4a11      	ldr	r2, [pc, #68]	; (8007fb4 <prvCheckForValidListAndQueue+0x78>)
 8007f6e:	210c      	movs	r1, #12
 8007f70:	200a      	movs	r0, #10
 8007f72:	f7fd fd47 	bl	8005a04 <xQueueGenericCreateStatic>
 8007f76:	4602      	mov	r2, r0
 8007f78:	4b08      	ldr	r3, [pc, #32]	; (8007f9c <prvCheckForValidListAndQueue+0x60>)
 8007f7a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007f7c:	4b07      	ldr	r3, [pc, #28]	; (8007f9c <prvCheckForValidListAndQueue+0x60>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d005      	beq.n	8007f90 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007f84:	4b05      	ldr	r3, [pc, #20]	; (8007f9c <prvCheckForValidListAndQueue+0x60>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	490b      	ldr	r1, [pc, #44]	; (8007fb8 <prvCheckForValidListAndQueue+0x7c>)
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f7fe fbf6 	bl	800677c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007f90:	f000 f950 	bl	8008234 <vPortExitCritical>
}
 8007f94:	bf00      	nop
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	20000a34 	.word	0x20000a34
 8007fa0:	20000a04 	.word	0x20000a04
 8007fa4:	20000a18 	.word	0x20000a18
 8007fa8:	20000a2c 	.word	0x20000a2c
 8007fac:	20000a30 	.word	0x20000a30
 8007fb0:	20000ab8 	.word	0x20000ab8
 8007fb4:	20000a40 	.word	0x20000a40
 8007fb8:	0801e124 	.word	0x0801e124

08007fbc <pvTimerGetTimerID>:
	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b086      	sub	sp, #24
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = ( Timer_t * ) xTimer;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d109      	bne.n	8007fe2 <pvTimerGetTimerID+0x26>
 8007fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd2:	f383 8811 	msr	BASEPRI, r3
 8007fd6:	f3bf 8f6f 	isb	sy
 8007fda:	f3bf 8f4f 	dsb	sy
 8007fde:	60fb      	str	r3, [r7, #12]
 8007fe0:	e7fe      	b.n	8007fe0 <pvTimerGetTimerID+0x24>

	taskENTER_CRITICAL();
 8007fe2:	f000 f8f9 	bl	80081d8 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	6a1b      	ldr	r3, [r3, #32]
 8007fea:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8007fec:	f000 f922 	bl	8008234 <vPortExitCritical>

	return pvReturn;
 8007ff0:	693b      	ldr	r3, [r7, #16]
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3718      	adds	r7, #24
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
	...

08007ffc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b085      	sub	sp, #20
 8008000:	af00      	add	r7, sp, #0
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	60b9      	str	r1, [r7, #8]
 8008006:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	3b04      	subs	r3, #4
 800800c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008014:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	3b04      	subs	r3, #4
 800801a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	f023 0201 	bic.w	r2, r3, #1
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	3b04      	subs	r3, #4
 800802a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800802c:	4a08      	ldr	r2, [pc, #32]	; (8008050 <pxPortInitialiseStack+0x54>)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	3b14      	subs	r3, #20
 8008036:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	3b20      	subs	r3, #32
 8008042:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008044:	68fb      	ldr	r3, [r7, #12]
}
 8008046:	4618      	mov	r0, r3
 8008048:	3714      	adds	r7, #20
 800804a:	46bd      	mov	sp, r7
 800804c:	bc80      	pop	{r7}
 800804e:	4770      	bx	lr
 8008050:	08008055 	.word	0x08008055

08008054 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008054:	b480      	push	{r7}
 8008056:	b085      	sub	sp, #20
 8008058:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800805a:	2300      	movs	r3, #0
 800805c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800805e:	4b10      	ldr	r3, [pc, #64]	; (80080a0 <prvTaskExitError+0x4c>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008066:	d009      	beq.n	800807c <prvTaskExitError+0x28>
 8008068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800806c:	f383 8811 	msr	BASEPRI, r3
 8008070:	f3bf 8f6f 	isb	sy
 8008074:	f3bf 8f4f 	dsb	sy
 8008078:	60fb      	str	r3, [r7, #12]
 800807a:	e7fe      	b.n	800807a <prvTaskExitError+0x26>
 800807c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008080:	f383 8811 	msr	BASEPRI, r3
 8008084:	f3bf 8f6f 	isb	sy
 8008088:	f3bf 8f4f 	dsb	sy
 800808c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800808e:	bf00      	nop
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d0fc      	beq.n	8008090 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008096:	bf00      	nop
 8008098:	3714      	adds	r7, #20
 800809a:	46bd      	mov	sp, r7
 800809c:	bc80      	pop	{r7}
 800809e:	4770      	bx	lr
 80080a0:	2000000c 	.word	0x2000000c
	...

080080b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80080b0:	4b07      	ldr	r3, [pc, #28]	; (80080d0 <pxCurrentTCBConst2>)
 80080b2:	6819      	ldr	r1, [r3, #0]
 80080b4:	6808      	ldr	r0, [r1, #0]
 80080b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80080ba:	f380 8809 	msr	PSP, r0
 80080be:	f3bf 8f6f 	isb	sy
 80080c2:	f04f 0000 	mov.w	r0, #0
 80080c6:	f380 8811 	msr	BASEPRI, r0
 80080ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80080ce:	4770      	bx	lr

080080d0 <pxCurrentTCBConst2>:
 80080d0:	200008d8 	.word	0x200008d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80080d4:	bf00      	nop
 80080d6:	bf00      	nop

080080d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80080d8:	4806      	ldr	r0, [pc, #24]	; (80080f4 <prvPortStartFirstTask+0x1c>)
 80080da:	6800      	ldr	r0, [r0, #0]
 80080dc:	6800      	ldr	r0, [r0, #0]
 80080de:	f380 8808 	msr	MSP, r0
 80080e2:	b662      	cpsie	i
 80080e4:	b661      	cpsie	f
 80080e6:	f3bf 8f4f 	dsb	sy
 80080ea:	f3bf 8f6f 	isb	sy
 80080ee:	df00      	svc	0
 80080f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80080f2:	bf00      	nop
 80080f4:	e000ed08 	.word	0xe000ed08

080080f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b084      	sub	sp, #16
 80080fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80080fe:	4b31      	ldr	r3, [pc, #196]	; (80081c4 <xPortStartScheduler+0xcc>)
 8008100:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	b2db      	uxtb	r3, r3
 8008108:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	22ff      	movs	r2, #255	; 0xff
 800810e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	b2db      	uxtb	r3, r3
 8008116:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008118:	78fb      	ldrb	r3, [r7, #3]
 800811a:	b2db      	uxtb	r3, r3
 800811c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008120:	b2da      	uxtb	r2, r3
 8008122:	4b29      	ldr	r3, [pc, #164]	; (80081c8 <xPortStartScheduler+0xd0>)
 8008124:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008126:	4b29      	ldr	r3, [pc, #164]	; (80081cc <xPortStartScheduler+0xd4>)
 8008128:	2207      	movs	r2, #7
 800812a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800812c:	e009      	b.n	8008142 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800812e:	4b27      	ldr	r3, [pc, #156]	; (80081cc <xPortStartScheduler+0xd4>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	3b01      	subs	r3, #1
 8008134:	4a25      	ldr	r2, [pc, #148]	; (80081cc <xPortStartScheduler+0xd4>)
 8008136:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008138:	78fb      	ldrb	r3, [r7, #3]
 800813a:	b2db      	uxtb	r3, r3
 800813c:	005b      	lsls	r3, r3, #1
 800813e:	b2db      	uxtb	r3, r3
 8008140:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008142:	78fb      	ldrb	r3, [r7, #3]
 8008144:	b2db      	uxtb	r3, r3
 8008146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800814a:	2b80      	cmp	r3, #128	; 0x80
 800814c:	d0ef      	beq.n	800812e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800814e:	4b1f      	ldr	r3, [pc, #124]	; (80081cc <xPortStartScheduler+0xd4>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f1c3 0307 	rsb	r3, r3, #7
 8008156:	2b04      	cmp	r3, #4
 8008158:	d009      	beq.n	800816e <xPortStartScheduler+0x76>
 800815a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800815e:	f383 8811 	msr	BASEPRI, r3
 8008162:	f3bf 8f6f 	isb	sy
 8008166:	f3bf 8f4f 	dsb	sy
 800816a:	60bb      	str	r3, [r7, #8]
 800816c:	e7fe      	b.n	800816c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800816e:	4b17      	ldr	r3, [pc, #92]	; (80081cc <xPortStartScheduler+0xd4>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	021b      	lsls	r3, r3, #8
 8008174:	4a15      	ldr	r2, [pc, #84]	; (80081cc <xPortStartScheduler+0xd4>)
 8008176:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008178:	4b14      	ldr	r3, [pc, #80]	; (80081cc <xPortStartScheduler+0xd4>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008180:	4a12      	ldr	r2, [pc, #72]	; (80081cc <xPortStartScheduler+0xd4>)
 8008182:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	b2da      	uxtb	r2, r3
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800818c:	4b10      	ldr	r3, [pc, #64]	; (80081d0 <xPortStartScheduler+0xd8>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a0f      	ldr	r2, [pc, #60]	; (80081d0 <xPortStartScheduler+0xd8>)
 8008192:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008196:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008198:	4b0d      	ldr	r3, [pc, #52]	; (80081d0 <xPortStartScheduler+0xd8>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a0c      	ldr	r2, [pc, #48]	; (80081d0 <xPortStartScheduler+0xd8>)
 800819e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80081a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80081a4:	f000 f8b0 	bl	8008308 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80081a8:	4b0a      	ldr	r3, [pc, #40]	; (80081d4 <xPortStartScheduler+0xdc>)
 80081aa:	2200      	movs	r2, #0
 80081ac:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80081ae:	f7ff ff93 	bl	80080d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80081b2:	f7fe fee3 	bl	8006f7c <vTaskSwitchContext>
	prvTaskExitError();
 80081b6:	f7ff ff4d 	bl	8008054 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80081ba:	2300      	movs	r3, #0
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3710      	adds	r7, #16
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	e000e400 	.word	0xe000e400
 80081c8:	20000b00 	.word	0x20000b00
 80081cc:	20000b04 	.word	0x20000b04
 80081d0:	e000ed20 	.word	0xe000ed20
 80081d4:	2000000c 	.word	0x2000000c

080081d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80081d8:	b480      	push	{r7}
 80081da:	b083      	sub	sp, #12
 80081dc:	af00      	add	r7, sp, #0
 80081de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081e2:	f383 8811 	msr	BASEPRI, r3
 80081e6:	f3bf 8f6f 	isb	sy
 80081ea:	f3bf 8f4f 	dsb	sy
 80081ee:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80081f0:	4b0e      	ldr	r3, [pc, #56]	; (800822c <vPortEnterCritical+0x54>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	3301      	adds	r3, #1
 80081f6:	4a0d      	ldr	r2, [pc, #52]	; (800822c <vPortEnterCritical+0x54>)
 80081f8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80081fa:	4b0c      	ldr	r3, [pc, #48]	; (800822c <vPortEnterCritical+0x54>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d10e      	bne.n	8008220 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008202:	4b0b      	ldr	r3, [pc, #44]	; (8008230 <vPortEnterCritical+0x58>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	b2db      	uxtb	r3, r3
 8008208:	2b00      	cmp	r3, #0
 800820a:	d009      	beq.n	8008220 <vPortEnterCritical+0x48>
 800820c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008210:	f383 8811 	msr	BASEPRI, r3
 8008214:	f3bf 8f6f 	isb	sy
 8008218:	f3bf 8f4f 	dsb	sy
 800821c:	603b      	str	r3, [r7, #0]
 800821e:	e7fe      	b.n	800821e <vPortEnterCritical+0x46>
	}
}
 8008220:	bf00      	nop
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	bc80      	pop	{r7}
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop
 800822c:	2000000c 	.word	0x2000000c
 8008230:	e000ed04 	.word	0xe000ed04

08008234 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008234:	b480      	push	{r7}
 8008236:	b083      	sub	sp, #12
 8008238:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800823a:	4b10      	ldr	r3, [pc, #64]	; (800827c <vPortExitCritical+0x48>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d109      	bne.n	8008256 <vPortExitCritical+0x22>
 8008242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008246:	f383 8811 	msr	BASEPRI, r3
 800824a:	f3bf 8f6f 	isb	sy
 800824e:	f3bf 8f4f 	dsb	sy
 8008252:	607b      	str	r3, [r7, #4]
 8008254:	e7fe      	b.n	8008254 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8008256:	4b09      	ldr	r3, [pc, #36]	; (800827c <vPortExitCritical+0x48>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	3b01      	subs	r3, #1
 800825c:	4a07      	ldr	r2, [pc, #28]	; (800827c <vPortExitCritical+0x48>)
 800825e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008260:	4b06      	ldr	r3, [pc, #24]	; (800827c <vPortExitCritical+0x48>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d104      	bne.n	8008272 <vPortExitCritical+0x3e>
 8008268:	2300      	movs	r3, #0
 800826a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008272:	bf00      	nop
 8008274:	370c      	adds	r7, #12
 8008276:	46bd      	mov	sp, r7
 8008278:	bc80      	pop	{r7}
 800827a:	4770      	bx	lr
 800827c:	2000000c 	.word	0x2000000c

08008280 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008280:	f3ef 8009 	mrs	r0, PSP
 8008284:	f3bf 8f6f 	isb	sy
 8008288:	4b0d      	ldr	r3, [pc, #52]	; (80082c0 <pxCurrentTCBConst>)
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008290:	6010      	str	r0, [r2, #0]
 8008292:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008296:	f04f 0050 	mov.w	r0, #80	; 0x50
 800829a:	f380 8811 	msr	BASEPRI, r0
 800829e:	f7fe fe6d 	bl	8006f7c <vTaskSwitchContext>
 80082a2:	f04f 0000 	mov.w	r0, #0
 80082a6:	f380 8811 	msr	BASEPRI, r0
 80082aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80082ae:	6819      	ldr	r1, [r3, #0]
 80082b0:	6808      	ldr	r0, [r1, #0]
 80082b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80082b6:	f380 8809 	msr	PSP, r0
 80082ba:	f3bf 8f6f 	isb	sy
 80082be:	4770      	bx	lr

080082c0 <pxCurrentTCBConst>:
 80082c0:	200008d8 	.word	0x200008d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80082c4:	bf00      	nop
 80082c6:	bf00      	nop

080082c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
	__asm volatile
 80082ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d2:	f383 8811 	msr	BASEPRI, r3
 80082d6:	f3bf 8f6f 	isb	sy
 80082da:	f3bf 8f4f 	dsb	sy
 80082de:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80082e0:	f7fe fd90 	bl	8006e04 <xTaskIncrementTick>
 80082e4:	4603      	mov	r3, r0
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d003      	beq.n	80082f2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80082ea:	4b06      	ldr	r3, [pc, #24]	; (8008304 <SysTick_Handler+0x3c>)
 80082ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082f0:	601a      	str	r2, [r3, #0]
 80082f2:	2300      	movs	r3, #0
 80082f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80082fc:	bf00      	nop
 80082fe:	3708      	adds	r7, #8
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}
 8008304:	e000ed04 	.word	0xe000ed04

08008308 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008308:	b480      	push	{r7}
 800830a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800830c:	4b0a      	ldr	r3, [pc, #40]	; (8008338 <vPortSetupTimerInterrupt+0x30>)
 800830e:	2200      	movs	r2, #0
 8008310:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008312:	4b0a      	ldr	r3, [pc, #40]	; (800833c <vPortSetupTimerInterrupt+0x34>)
 8008314:	2200      	movs	r2, #0
 8008316:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008318:	4b09      	ldr	r3, [pc, #36]	; (8008340 <vPortSetupTimerInterrupt+0x38>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a09      	ldr	r2, [pc, #36]	; (8008344 <vPortSetupTimerInterrupt+0x3c>)
 800831e:	fba2 2303 	umull	r2, r3, r2, r3
 8008322:	099b      	lsrs	r3, r3, #6
 8008324:	4a08      	ldr	r2, [pc, #32]	; (8008348 <vPortSetupTimerInterrupt+0x40>)
 8008326:	3b01      	subs	r3, #1
 8008328:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800832a:	4b03      	ldr	r3, [pc, #12]	; (8008338 <vPortSetupTimerInterrupt+0x30>)
 800832c:	2207      	movs	r2, #7
 800832e:	601a      	str	r2, [r3, #0]
}
 8008330:	bf00      	nop
 8008332:	46bd      	mov	sp, r7
 8008334:	bc80      	pop	{r7}
 8008336:	4770      	bx	lr
 8008338:	e000e010 	.word	0xe000e010
 800833c:	e000e018 	.word	0xe000e018
 8008340:	20000000 	.word	0x20000000
 8008344:	10624dd3 	.word	0x10624dd3
 8008348:	e000e014 	.word	0xe000e014

0800834c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800834c:	b480      	push	{r7}
 800834e:	b085      	sub	sp, #20
 8008350:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008352:	f3ef 8305 	mrs	r3, IPSR
 8008356:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2b0f      	cmp	r3, #15
 800835c:	d913      	bls.n	8008386 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800835e:	4a15      	ldr	r2, [pc, #84]	; (80083b4 <vPortValidateInterruptPriority+0x68>)
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	4413      	add	r3, r2
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008368:	4b13      	ldr	r3, [pc, #76]	; (80083b8 <vPortValidateInterruptPriority+0x6c>)
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	7afa      	ldrb	r2, [r7, #11]
 800836e:	429a      	cmp	r2, r3
 8008370:	d209      	bcs.n	8008386 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8008372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008376:	f383 8811 	msr	BASEPRI, r3
 800837a:	f3bf 8f6f 	isb	sy
 800837e:	f3bf 8f4f 	dsb	sy
 8008382:	607b      	str	r3, [r7, #4]
 8008384:	e7fe      	b.n	8008384 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008386:	4b0d      	ldr	r3, [pc, #52]	; (80083bc <vPortValidateInterruptPriority+0x70>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800838e:	4b0c      	ldr	r3, [pc, #48]	; (80083c0 <vPortValidateInterruptPriority+0x74>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	429a      	cmp	r2, r3
 8008394:	d909      	bls.n	80083aa <vPortValidateInterruptPriority+0x5e>
 8008396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800839a:	f383 8811 	msr	BASEPRI, r3
 800839e:	f3bf 8f6f 	isb	sy
 80083a2:	f3bf 8f4f 	dsb	sy
 80083a6:	603b      	str	r3, [r7, #0]
 80083a8:	e7fe      	b.n	80083a8 <vPortValidateInterruptPriority+0x5c>
	}
 80083aa:	bf00      	nop
 80083ac:	3714      	adds	r7, #20
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bc80      	pop	{r7}
 80083b2:	4770      	bx	lr
 80083b4:	e000e3f0 	.word	0xe000e3f0
 80083b8:	20000b00 	.word	0x20000b00
 80083bc:	e000ed0c 	.word	0xe000ed0c
 80083c0:	20000b04 	.word	0x20000b04

080083c4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b08a      	sub	sp, #40	; 0x28
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80083cc:	2300      	movs	r3, #0
 80083ce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80083d0:	f7fe fc4e 	bl	8006c70 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80083d4:	4b57      	ldr	r3, [pc, #348]	; (8008534 <pvPortMalloc+0x170>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d101      	bne.n	80083e0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80083dc:	f000 f90c 	bl	80085f8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80083e0:	4b55      	ldr	r3, [pc, #340]	; (8008538 <pvPortMalloc+0x174>)
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	4013      	ands	r3, r2
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	f040 808c 	bne.w	8008506 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d01c      	beq.n	800842e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80083f4:	2208      	movs	r2, #8
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	4413      	add	r3, r2
 80083fa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f003 0307 	and.w	r3, r3, #7
 8008402:	2b00      	cmp	r3, #0
 8008404:	d013      	beq.n	800842e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f023 0307 	bic.w	r3, r3, #7
 800840c:	3308      	adds	r3, #8
 800840e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f003 0307 	and.w	r3, r3, #7
 8008416:	2b00      	cmp	r3, #0
 8008418:	d009      	beq.n	800842e <pvPortMalloc+0x6a>
 800841a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800841e:	f383 8811 	msr	BASEPRI, r3
 8008422:	f3bf 8f6f 	isb	sy
 8008426:	f3bf 8f4f 	dsb	sy
 800842a:	617b      	str	r3, [r7, #20]
 800842c:	e7fe      	b.n	800842c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d068      	beq.n	8008506 <pvPortMalloc+0x142>
 8008434:	4b41      	ldr	r3, [pc, #260]	; (800853c <pvPortMalloc+0x178>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	687a      	ldr	r2, [r7, #4]
 800843a:	429a      	cmp	r2, r3
 800843c:	d863      	bhi.n	8008506 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800843e:	4b40      	ldr	r3, [pc, #256]	; (8008540 <pvPortMalloc+0x17c>)
 8008440:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008442:	4b3f      	ldr	r3, [pc, #252]	; (8008540 <pvPortMalloc+0x17c>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008448:	e004      	b.n	8008454 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800844a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800844e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	687a      	ldr	r2, [r7, #4]
 800845a:	429a      	cmp	r2, r3
 800845c:	d903      	bls.n	8008466 <pvPortMalloc+0xa2>
 800845e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d1f1      	bne.n	800844a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008466:	4b33      	ldr	r3, [pc, #204]	; (8008534 <pvPortMalloc+0x170>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800846c:	429a      	cmp	r2, r3
 800846e:	d04a      	beq.n	8008506 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008470:	6a3b      	ldr	r3, [r7, #32]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	2208      	movs	r2, #8
 8008476:	4413      	add	r3, r2
 8008478:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800847a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847c:	681a      	ldr	r2, [r3, #0]
 800847e:	6a3b      	ldr	r3, [r7, #32]
 8008480:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008484:	685a      	ldr	r2, [r3, #4]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	1ad2      	subs	r2, r2, r3
 800848a:	2308      	movs	r3, #8
 800848c:	005b      	lsls	r3, r3, #1
 800848e:	429a      	cmp	r2, r3
 8008490:	d91e      	bls.n	80084d0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	4413      	add	r3, r2
 8008498:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800849a:	69bb      	ldr	r3, [r7, #24]
 800849c:	f003 0307 	and.w	r3, r3, #7
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d009      	beq.n	80084b8 <pvPortMalloc+0xf4>
 80084a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a8:	f383 8811 	msr	BASEPRI, r3
 80084ac:	f3bf 8f6f 	isb	sy
 80084b0:	f3bf 8f4f 	dsb	sy
 80084b4:	613b      	str	r3, [r7, #16]
 80084b6:	e7fe      	b.n	80084b6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80084b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ba:	685a      	ldr	r2, [r3, #4]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	1ad2      	subs	r2, r2, r3
 80084c0:	69bb      	ldr	r3, [r7, #24]
 80084c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80084c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80084ca:	69b8      	ldr	r0, [r7, #24]
 80084cc:	f000 f8f6 	bl	80086bc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80084d0:	4b1a      	ldr	r3, [pc, #104]	; (800853c <pvPortMalloc+0x178>)
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	1ad3      	subs	r3, r2, r3
 80084da:	4a18      	ldr	r2, [pc, #96]	; (800853c <pvPortMalloc+0x178>)
 80084dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80084de:	4b17      	ldr	r3, [pc, #92]	; (800853c <pvPortMalloc+0x178>)
 80084e0:	681a      	ldr	r2, [r3, #0]
 80084e2:	4b18      	ldr	r3, [pc, #96]	; (8008544 <pvPortMalloc+0x180>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d203      	bcs.n	80084f2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80084ea:	4b14      	ldr	r3, [pc, #80]	; (800853c <pvPortMalloc+0x178>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a15      	ldr	r2, [pc, #84]	; (8008544 <pvPortMalloc+0x180>)
 80084f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80084f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f4:	685a      	ldr	r2, [r3, #4]
 80084f6:	4b10      	ldr	r3, [pc, #64]	; (8008538 <pvPortMalloc+0x174>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	431a      	orrs	r2, r3
 80084fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008502:	2200      	movs	r2, #0
 8008504:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008506:	f7fe fbc1 	bl	8006c8c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800850a:	69fb      	ldr	r3, [r7, #28]
 800850c:	f003 0307 	and.w	r3, r3, #7
 8008510:	2b00      	cmp	r3, #0
 8008512:	d009      	beq.n	8008528 <pvPortMalloc+0x164>
 8008514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008518:	f383 8811 	msr	BASEPRI, r3
 800851c:	f3bf 8f6f 	isb	sy
 8008520:	f3bf 8f4f 	dsb	sy
 8008524:	60fb      	str	r3, [r7, #12]
 8008526:	e7fe      	b.n	8008526 <pvPortMalloc+0x162>
	return pvReturn;
 8008528:	69fb      	ldr	r3, [r7, #28]
}
 800852a:	4618      	mov	r0, r3
 800852c:	3728      	adds	r7, #40	; 0x28
 800852e:	46bd      	mov	sp, r7
 8008530:	bd80      	pop	{r7, pc}
 8008532:	bf00      	nop
 8008534:	20004710 	.word	0x20004710
 8008538:	2000471c 	.word	0x2000471c
 800853c:	20004714 	.word	0x20004714
 8008540:	20004708 	.word	0x20004708
 8008544:	20004718 	.word	0x20004718

08008548 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b086      	sub	sp, #24
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d046      	beq.n	80085e8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800855a:	2308      	movs	r3, #8
 800855c:	425b      	negs	r3, r3
 800855e:	697a      	ldr	r2, [r7, #20]
 8008560:	4413      	add	r3, r2
 8008562:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	685a      	ldr	r2, [r3, #4]
 800856c:	4b20      	ldr	r3, [pc, #128]	; (80085f0 <vPortFree+0xa8>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4013      	ands	r3, r2
 8008572:	2b00      	cmp	r3, #0
 8008574:	d109      	bne.n	800858a <vPortFree+0x42>
 8008576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800857a:	f383 8811 	msr	BASEPRI, r3
 800857e:	f3bf 8f6f 	isb	sy
 8008582:	f3bf 8f4f 	dsb	sy
 8008586:	60fb      	str	r3, [r7, #12]
 8008588:	e7fe      	b.n	8008588 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d009      	beq.n	80085a6 <vPortFree+0x5e>
 8008592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008596:	f383 8811 	msr	BASEPRI, r3
 800859a:	f3bf 8f6f 	isb	sy
 800859e:	f3bf 8f4f 	dsb	sy
 80085a2:	60bb      	str	r3, [r7, #8]
 80085a4:	e7fe      	b.n	80085a4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	685a      	ldr	r2, [r3, #4]
 80085aa:	4b11      	ldr	r3, [pc, #68]	; (80085f0 <vPortFree+0xa8>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4013      	ands	r3, r2
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d019      	beq.n	80085e8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d115      	bne.n	80085e8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80085bc:	693b      	ldr	r3, [r7, #16]
 80085be:	685a      	ldr	r2, [r3, #4]
 80085c0:	4b0b      	ldr	r3, [pc, #44]	; (80085f0 <vPortFree+0xa8>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	43db      	mvns	r3, r3
 80085c6:	401a      	ands	r2, r3
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80085cc:	f7fe fb50 	bl	8006c70 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	685a      	ldr	r2, [r3, #4]
 80085d4:	4b07      	ldr	r3, [pc, #28]	; (80085f4 <vPortFree+0xac>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4413      	add	r3, r2
 80085da:	4a06      	ldr	r2, [pc, #24]	; (80085f4 <vPortFree+0xac>)
 80085dc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80085de:	6938      	ldr	r0, [r7, #16]
 80085e0:	f000 f86c 	bl	80086bc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80085e4:	f7fe fb52 	bl	8006c8c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80085e8:	bf00      	nop
 80085ea:	3718      	adds	r7, #24
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}
 80085f0:	2000471c 	.word	0x2000471c
 80085f4:	20004714 	.word	0x20004714

080085f8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80085f8:	b480      	push	{r7}
 80085fa:	b085      	sub	sp, #20
 80085fc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80085fe:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008602:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008604:	4b27      	ldr	r3, [pc, #156]	; (80086a4 <prvHeapInit+0xac>)
 8008606:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f003 0307 	and.w	r3, r3, #7
 800860e:	2b00      	cmp	r3, #0
 8008610:	d00c      	beq.n	800862c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	3307      	adds	r3, #7
 8008616:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f023 0307 	bic.w	r3, r3, #7
 800861e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008620:	68ba      	ldr	r2, [r7, #8]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	1ad3      	subs	r3, r2, r3
 8008626:	4a1f      	ldr	r2, [pc, #124]	; (80086a4 <prvHeapInit+0xac>)
 8008628:	4413      	add	r3, r2
 800862a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008630:	4a1d      	ldr	r2, [pc, #116]	; (80086a8 <prvHeapInit+0xb0>)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008636:	4b1c      	ldr	r3, [pc, #112]	; (80086a8 <prvHeapInit+0xb0>)
 8008638:	2200      	movs	r2, #0
 800863a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	68ba      	ldr	r2, [r7, #8]
 8008640:	4413      	add	r3, r2
 8008642:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008644:	2208      	movs	r2, #8
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	1a9b      	subs	r3, r3, r2
 800864a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f023 0307 	bic.w	r3, r3, #7
 8008652:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	4a15      	ldr	r2, [pc, #84]	; (80086ac <prvHeapInit+0xb4>)
 8008658:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800865a:	4b14      	ldr	r3, [pc, #80]	; (80086ac <prvHeapInit+0xb4>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	2200      	movs	r2, #0
 8008660:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008662:	4b12      	ldr	r3, [pc, #72]	; (80086ac <prvHeapInit+0xb4>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	2200      	movs	r2, #0
 8008668:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	68fa      	ldr	r2, [r7, #12]
 8008672:	1ad2      	subs	r2, r2, r3
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008678:	4b0c      	ldr	r3, [pc, #48]	; (80086ac <prvHeapInit+0xb4>)
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	4a0a      	ldr	r2, [pc, #40]	; (80086b0 <prvHeapInit+0xb8>)
 8008686:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	4a09      	ldr	r2, [pc, #36]	; (80086b4 <prvHeapInit+0xbc>)
 800868e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008690:	4b09      	ldr	r3, [pc, #36]	; (80086b8 <prvHeapInit+0xc0>)
 8008692:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008696:	601a      	str	r2, [r3, #0]
}
 8008698:	bf00      	nop
 800869a:	3714      	adds	r7, #20
 800869c:	46bd      	mov	sp, r7
 800869e:	bc80      	pop	{r7}
 80086a0:	4770      	bx	lr
 80086a2:	bf00      	nop
 80086a4:	20000b08 	.word	0x20000b08
 80086a8:	20004708 	.word	0x20004708
 80086ac:	20004710 	.word	0x20004710
 80086b0:	20004718 	.word	0x20004718
 80086b4:	20004714 	.word	0x20004714
 80086b8:	2000471c 	.word	0x2000471c

080086bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80086bc:	b480      	push	{r7}
 80086be:	b085      	sub	sp, #20
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80086c4:	4b27      	ldr	r3, [pc, #156]	; (8008764 <prvInsertBlockIntoFreeList+0xa8>)
 80086c6:	60fb      	str	r3, [r7, #12]
 80086c8:	e002      	b.n	80086d0 <prvInsertBlockIntoFreeList+0x14>
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	60fb      	str	r3, [r7, #12]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d8f7      	bhi.n	80086ca <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	68ba      	ldr	r2, [r7, #8]
 80086e4:	4413      	add	r3, r2
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	429a      	cmp	r2, r3
 80086ea:	d108      	bne.n	80086fe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	685a      	ldr	r2, [r3, #4]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	441a      	add	r2, r3
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	68ba      	ldr	r2, [r7, #8]
 8008708:	441a      	add	r2, r3
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	429a      	cmp	r2, r3
 8008710:	d118      	bne.n	8008744 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681a      	ldr	r2, [r3, #0]
 8008716:	4b14      	ldr	r3, [pc, #80]	; (8008768 <prvInsertBlockIntoFreeList+0xac>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	429a      	cmp	r2, r3
 800871c:	d00d      	beq.n	800873a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	685a      	ldr	r2, [r3, #4]
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	685b      	ldr	r3, [r3, #4]
 8008728:	441a      	add	r2, r3
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	681a      	ldr	r2, [r3, #0]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	601a      	str	r2, [r3, #0]
 8008738:	e008      	b.n	800874c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800873a:	4b0b      	ldr	r3, [pc, #44]	; (8008768 <prvInsertBlockIntoFreeList+0xac>)
 800873c:	681a      	ldr	r2, [r3, #0]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	601a      	str	r2, [r3, #0]
 8008742:	e003      	b.n	800874c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800874c:	68fa      	ldr	r2, [r7, #12]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	429a      	cmp	r2, r3
 8008752:	d002      	beq.n	800875a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800875a:	bf00      	nop
 800875c:	3714      	adds	r7, #20
 800875e:	46bd      	mov	sp, r7
 8008760:	bc80      	pop	{r7}
 8008762:	4770      	bx	lr
 8008764:	20004708 	.word	0x20004708
 8008768:	20004710 	.word	0x20004710

0800876c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b084      	sub	sp, #16
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 8008774:	4b29      	ldr	r3, [pc, #164]	; (800881c <tcpip_thread+0xb0>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d005      	beq.n	8008788 <tcpip_thread+0x1c>
    tcpip_init_done(tcpip_init_done_arg);
 800877c:	4b27      	ldr	r3, [pc, #156]	; (800881c <tcpip_thread+0xb0>)
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a27      	ldr	r2, [pc, #156]	; (8008820 <tcpip_thread+0xb4>)
 8008782:	6812      	ldr	r2, [r2, #0]
 8008784:	4610      	mov	r0, r2
 8008786:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 8008788:	4826      	ldr	r0, [pc, #152]	; (8008824 <tcpip_thread+0xb8>)
 800878a:	f00b fde7 	bl	801435c <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 800878e:	4825      	ldr	r0, [pc, #148]	; (8008824 <tcpip_thread+0xb8>)
 8008790:	f00b fdf3 	bl	801437a <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8008794:	f107 030c 	add.w	r3, r7, #12
 8008798:	4619      	mov	r1, r3
 800879a:	4823      	ldr	r0, [pc, #140]	; (8008828 <tcpip_thread+0xbc>)
 800879c:	f006 fe9a 	bl	800f4d4 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 80087a0:	4820      	ldr	r0, [pc, #128]	; (8008824 <tcpip_thread+0xb8>)
 80087a2:	f00b fddb 	bl	801435c <sys_mutex_lock>
    if (msg == NULL) {
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d106      	bne.n	80087ba <tcpip_thread+0x4e>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80087ac:	4b1f      	ldr	r3, [pc, #124]	; (800882c <tcpip_thread+0xc0>)
 80087ae:	2269      	movs	r2, #105	; 0x69
 80087b0:	491f      	ldr	r1, [pc, #124]	; (8008830 <tcpip_thread+0xc4>)
 80087b2:	4820      	ldr	r0, [pc, #128]	; (8008834 <tcpip_thread+0xc8>)
 80087b4:	f011 ffb2 	bl	801a71c <iprintf>
      continue;
 80087b8:	e02f      	b.n	800881a <tcpip_thread+0xae>
    }
    switch (msg->type) {
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	2b03      	cmp	r3, #3
 80087c0:	d011      	beq.n	80087e6 <tcpip_thread+0x7a>
 80087c2:	2b04      	cmp	r3, #4
 80087c4:	d01b      	beq.n	80087fe <tcpip_thread+0x92>
 80087c6:	2b02      	cmp	r3, #2
 80087c8:	d120      	bne.n	800880c <tcpip_thread+0xa0>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	68db      	ldr	r3, [r3, #12]
 80087ce:	68fa      	ldr	r2, [r7, #12]
 80087d0:	6850      	ldr	r0, [r2, #4]
 80087d2:	68fa      	ldr	r2, [r7, #12]
 80087d4:	6892      	ldr	r2, [r2, #8]
 80087d6:	4611      	mov	r1, r2
 80087d8:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	4619      	mov	r1, r3
 80087de:	2009      	movs	r0, #9
 80087e0:	f001 f826 	bl	8009830 <memp_free>
      break;
 80087e4:	e019      	b.n	800881a <tcpip_thread+0xae>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	68fa      	ldr	r2, [r7, #12]
 80087ec:	6892      	ldr	r2, [r2, #8]
 80087ee:	4610      	mov	r0, r2
 80087f0:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	4619      	mov	r1, r3
 80087f6:	2008      	movs	r0, #8
 80087f8:	f001 f81a 	bl	8009830 <memp_free>
      break;
 80087fc:	e00d      	b.n	800881a <tcpip_thread+0xae>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	68fa      	ldr	r2, [r7, #12]
 8008804:	6892      	ldr	r2, [r2, #8]
 8008806:	4610      	mov	r0, r2
 8008808:	4798      	blx	r3
      break;
 800880a:	e006      	b.n	800881a <tcpip_thread+0xae>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800880c:	4b07      	ldr	r3, [pc, #28]	; (800882c <tcpip_thread+0xc0>)
 800880e:	229b      	movs	r2, #155	; 0x9b
 8008810:	4907      	ldr	r1, [pc, #28]	; (8008830 <tcpip_thread+0xc4>)
 8008812:	4808      	ldr	r0, [pc, #32]	; (8008834 <tcpip_thread+0xc8>)
 8008814:	f011 ff82 	bl	801a71c <iprintf>
      break;
 8008818:	bf00      	nop
    UNLOCK_TCPIP_CORE();
 800881a:	e7b8      	b.n	800878e <tcpip_thread+0x22>
 800881c:	20004720 	.word	0x20004720
 8008820:	20004724 	.word	0x20004724
 8008824:	20007f80 	.word	0x20007f80
 8008828:	20004728 	.word	0x20004728
 800882c:	0801e12c 	.word	0x0801e12c
 8008830:	0801e15c 	.word	0x0801e15c
 8008834:	0801e17c 	.word	0x0801e17c

08008838 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b086      	sub	sp, #24
 800883c:	af00      	add	r7, sp, #0
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	60b9      	str	r1, [r7, #8]
 8008842:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8008844:	481a      	ldr	r0, [pc, #104]	; (80088b0 <tcpip_inpkt+0x78>)
 8008846:	f00b fd4f 	bl	80142e8 <sys_mbox_valid>
 800884a:	4603      	mov	r3, r0
 800884c:	2b00      	cmp	r3, #0
 800884e:	d105      	bne.n	800885c <tcpip_inpkt+0x24>
 8008850:	4b18      	ldr	r3, [pc, #96]	; (80088b4 <tcpip_inpkt+0x7c>)
 8008852:	22b5      	movs	r2, #181	; 0xb5
 8008854:	4918      	ldr	r1, [pc, #96]	; (80088b8 <tcpip_inpkt+0x80>)
 8008856:	4819      	ldr	r0, [pc, #100]	; (80088bc <tcpip_inpkt+0x84>)
 8008858:	f011 ff60 	bl	801a71c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800885c:	2009      	movs	r0, #9
 800885e:	f000 ff95 	bl	800978c <memp_malloc>
 8008862:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d102      	bne.n	8008870 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800886a:	f04f 33ff 	mov.w	r3, #4294967295
 800886e:	e01a      	b.n	80088a6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	2202      	movs	r2, #2
 8008874:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	68fa      	ldr	r2, [r7, #12]
 800887a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	68ba      	ldr	r2, [r7, #8]
 8008880:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	687a      	ldr	r2, [r7, #4]
 8008886:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8008888:	6979      	ldr	r1, [r7, #20]
 800888a:	4809      	ldr	r0, [pc, #36]	; (80088b0 <tcpip_inpkt+0x78>)
 800888c:	f00b fcd3 	bl	8014236 <sys_mbox_trypost>
 8008890:	4603      	mov	r3, r0
 8008892:	2b00      	cmp	r3, #0
 8008894:	d006      	beq.n	80088a4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8008896:	6979      	ldr	r1, [r7, #20]
 8008898:	2009      	movs	r0, #9
 800889a:	f000 ffc9 	bl	8009830 <memp_free>
    return ERR_MEM;
 800889e:	f04f 33ff 	mov.w	r3, #4294967295
 80088a2:	e000      	b.n	80088a6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 80088a4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3718      	adds	r7, #24
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
 80088ae:	bf00      	nop
 80088b0:	20004728 	.word	0x20004728
 80088b4:	0801e12c 	.word	0x0801e12c
 80088b8:	0801e1a4 	.word	0x0801e1a4
 80088bc:	0801e17c 	.word	0x0801e17c

080088c0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80088d0:	f003 0318 	and.w	r3, r3, #24
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d006      	beq.n	80088e6 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 80088d8:	4a08      	ldr	r2, [pc, #32]	; (80088fc <tcpip_input+0x3c>)
 80088da:	6839      	ldr	r1, [r7, #0]
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f7ff ffab 	bl	8008838 <tcpip_inpkt>
 80088e2:	4603      	mov	r3, r0
 80088e4:	e005      	b.n	80088f2 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 80088e6:	4a06      	ldr	r2, [pc, #24]	; (8008900 <tcpip_input+0x40>)
 80088e8:	6839      	ldr	r1, [r7, #0]
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f7ff ffa4 	bl	8008838 <tcpip_inpkt>
 80088f0:	4603      	mov	r3, r0
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3708      	adds	r7, #8
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	08014011 	.word	0x08014011
 8008900:	08012d1d 	.word	0x08012d1d

08008904 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b086      	sub	sp, #24
 8008908:	af00      	add	r7, sp, #0
 800890a:	60f8      	str	r0, [r7, #12]
 800890c:	60b9      	str	r1, [r7, #8]
 800890e:	4613      	mov	r3, r2
 8008910:	71fb      	strb	r3, [r7, #7]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8008912:	481d      	ldr	r0, [pc, #116]	; (8008988 <tcpip_callback_with_block+0x84>)
 8008914:	f00b fce8 	bl	80142e8 <sys_mbox_valid>
 8008918:	4603      	mov	r3, r0
 800891a:	2b00      	cmp	r3, #0
 800891c:	d105      	bne.n	800892a <tcpip_callback_with_block+0x26>
 800891e:	4b1b      	ldr	r3, [pc, #108]	; (800898c <tcpip_callback_with_block+0x88>)
 8008920:	22ee      	movs	r2, #238	; 0xee
 8008922:	491b      	ldr	r1, [pc, #108]	; (8008990 <tcpip_callback_with_block+0x8c>)
 8008924:	481b      	ldr	r0, [pc, #108]	; (8008994 <tcpip_callback_with_block+0x90>)
 8008926:	f011 fef9 	bl	801a71c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800892a:	2008      	movs	r0, #8
 800892c:	f000 ff2e 	bl	800978c <memp_malloc>
 8008930:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d102      	bne.n	800893e <tcpip_callback_with_block+0x3a>
    return ERR_MEM;
 8008938:	f04f 33ff 	mov.w	r3, #4294967295
 800893c:	e01f      	b.n	800897e <tcpip_callback_with_block+0x7a>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	2203      	movs	r2, #3
 8008942:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	68fa      	ldr	r2, [r7, #12]
 8008948:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	68ba      	ldr	r2, [r7, #8]
 800894e:	609a      	str	r2, [r3, #8]
  if (block) {
 8008950:	79fb      	ldrb	r3, [r7, #7]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d004      	beq.n	8008960 <tcpip_callback_with_block+0x5c>
    sys_mbox_post(&mbox, msg);
 8008956:	6979      	ldr	r1, [r7, #20]
 8008958:	480b      	ldr	r0, [pc, #44]	; (8008988 <tcpip_callback_with_block+0x84>)
 800895a:	f00b fc57 	bl	801420c <sys_mbox_post>
 800895e:	e00d      	b.n	800897c <tcpip_callback_with_block+0x78>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8008960:	6979      	ldr	r1, [r7, #20]
 8008962:	4809      	ldr	r0, [pc, #36]	; (8008988 <tcpip_callback_with_block+0x84>)
 8008964:	f00b fc67 	bl	8014236 <sys_mbox_trypost>
 8008968:	4603      	mov	r3, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d006      	beq.n	800897c <tcpip_callback_with_block+0x78>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800896e:	6979      	ldr	r1, [r7, #20]
 8008970:	2008      	movs	r0, #8
 8008972:	f000 ff5d 	bl	8009830 <memp_free>
      return ERR_MEM;
 8008976:	f04f 33ff 	mov.w	r3, #4294967295
 800897a:	e000      	b.n	800897e <tcpip_callback_with_block+0x7a>
    }
  }
  return ERR_OK;
 800897c:	2300      	movs	r3, #0
}
 800897e:	4618      	mov	r0, r3
 8008980:	3718      	adds	r7, #24
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}
 8008986:	bf00      	nop
 8008988:	20004728 	.word	0x20004728
 800898c:	0801e12c 	.word	0x0801e12c
 8008990:	0801e1a4 	.word	0x0801e1a4
 8008994:	0801e17c 	.word	0x0801e17c

08008998 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af02      	add	r7, sp, #8
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
  lwip_init();
 80089a2:	f000 fb2b 	bl	8008ffc <lwip_init>

  tcpip_init_done = initfunc;
 80089a6:	4a17      	ldr	r2, [pc, #92]	; (8008a04 <tcpip_init+0x6c>)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 80089ac:	4a16      	ldr	r2, [pc, #88]	; (8008a08 <tcpip_init+0x70>)
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80089b2:	2106      	movs	r1, #6
 80089b4:	4815      	ldr	r0, [pc, #84]	; (8008a0c <tcpip_init+0x74>)
 80089b6:	f00b fc07 	bl	80141c8 <sys_mbox_new>
 80089ba:	4603      	mov	r3, r0
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d006      	beq.n	80089ce <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80089c0:	4b13      	ldr	r3, [pc, #76]	; (8008a10 <tcpip_init+0x78>)
 80089c2:	f240 12d5 	movw	r2, #469	; 0x1d5
 80089c6:	4913      	ldr	r1, [pc, #76]	; (8008a14 <tcpip_init+0x7c>)
 80089c8:	4813      	ldr	r0, [pc, #76]	; (8008a18 <tcpip_init+0x80>)
 80089ca:	f011 fea7 	bl	801a71c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80089ce:	4813      	ldr	r0, [pc, #76]	; (8008a1c <tcpip_init+0x84>)
 80089d0:	f00b fca8 	bl	8014324 <sys_mutex_new>
 80089d4:	4603      	mov	r3, r0
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d006      	beq.n	80089e8 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80089da:	4b0d      	ldr	r3, [pc, #52]	; (8008a10 <tcpip_init+0x78>)
 80089dc:	f240 12d9 	movw	r2, #473	; 0x1d9
 80089e0:	490f      	ldr	r1, [pc, #60]	; (8008a20 <tcpip_init+0x88>)
 80089e2:	480d      	ldr	r0, [pc, #52]	; (8008a18 <tcpip_init+0x80>)
 80089e4:	f011 fe9a 	bl	801a71c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80089e8:	2300      	movs	r3, #0
 80089ea:	9300      	str	r3, [sp, #0]
 80089ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089f0:	2200      	movs	r2, #0
 80089f2:	490c      	ldr	r1, [pc, #48]	; (8008a24 <tcpip_init+0x8c>)
 80089f4:	480c      	ldr	r0, [pc, #48]	; (8008a28 <tcpip_init+0x90>)
 80089f6:	f00b fccd 	bl	8014394 <sys_thread_new>
}
 80089fa:	bf00      	nop
 80089fc:	3708      	adds	r7, #8
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	20004720 	.word	0x20004720
 8008a08:	20004724 	.word	0x20004724
 8008a0c:	20004728 	.word	0x20004728
 8008a10:	0801e12c 	.word	0x0801e12c
 8008a14:	0801e1b4 	.word	0x0801e1b4
 8008a18:	0801e17c 	.word	0x0801e17c
 8008a1c:	20007f80 	.word	0x20007f80
 8008a20:	0801e1d8 	.word	0x0801e1d8
 8008a24:	0800876d 	.word	0x0800876d
 8008a28:	0801e1fc 	.word	0x0801e1fc

08008a2c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b083      	sub	sp, #12
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	4603      	mov	r3, r0
 8008a34:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 8008a36:	88fb      	ldrh	r3, [r7, #6]
 8008a38:	ba5b      	rev16	r3, r3
 8008a3a:	b29b      	uxth	r3, r3
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	370c      	adds	r7, #12
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bc80      	pop	{r7}
 8008a44:	4770      	bx	lr

08008a46 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8008a46:	b480      	push	{r7}
 8008a48:	b083      	sub	sp, #12
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	061a      	lsls	r2, r3, #24
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	021b      	lsls	r3, r3, #8
 8008a56:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008a5a:	431a      	orrs	r2, r3
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	0a1b      	lsrs	r3, r3, #8
 8008a60:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008a64:	431a      	orrs	r2, r3
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	0e1b      	lsrs	r3, r3, #24
 8008a6a:	4313      	orrs	r3, r2
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	370c      	adds	r7, #12
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bc80      	pop	{r7}
 8008a74:	4770      	bx	lr

08008a76 <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 8008a76:	b480      	push	{r7}
 8008a78:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 8008a7a:	bf00      	nop
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bc80      	pop	{r7}
 8008a80:	4770      	bx	lr
	...

08008a84 <dns_setserver>:
 * @param numdns the index of the DNS server to set must be < DNS_MAX_SERVERS
 * @param dnsserver IP address of the DNS server to set
 */
void
dns_setserver(u8_t numdns, const ip_addr_t *dnsserver)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	6039      	str	r1, [r7, #0]
 8008a8e:	71fb      	strb	r3, [r7, #7]
  if (numdns < DNS_MAX_SERVERS) {
 8008a90:	79fb      	ldrb	r3, [r7, #7]
 8008a92:	2b01      	cmp	r3, #1
 8008a94:	d80f      	bhi.n	8008ab6 <dns_setserver+0x32>
    if (dnsserver != NULL) {
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d006      	beq.n	8008aaa <dns_setserver+0x26>
      dns_servers[numdns] = (*dnsserver);
 8008a9c:	79fb      	ldrb	r3, [r7, #7]
 8008a9e:	4908      	ldr	r1, [pc, #32]	; (8008ac0 <dns_setserver+0x3c>)
 8008aa0:	683a      	ldr	r2, [r7, #0]
 8008aa2:	6812      	ldr	r2, [r2, #0]
 8008aa4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    } else {
      dns_servers[numdns] = *IP_ADDR_ANY;
    }
  }
}
 8008aa8:	e005      	b.n	8008ab6 <dns_setserver+0x32>
      dns_servers[numdns] = *IP_ADDR_ANY;
 8008aaa:	79fb      	ldrb	r3, [r7, #7]
 8008aac:	4904      	ldr	r1, [pc, #16]	; (8008ac0 <dns_setserver+0x3c>)
 8008aae:	4a05      	ldr	r2, [pc, #20]	; (8008ac4 <dns_setserver+0x40>)
 8008ab0:	6812      	ldr	r2, [r2, #0]
 8008ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008ab6:	bf00      	nop
 8008ab8:	370c      	adds	r7, #12
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bc80      	pop	{r7}
 8008abe:	4770      	bx	lr
 8008ac0:	20004bac 	.word	0x20004bac
 8008ac4:	08021d18 	.word	0x08021d18

08008ac8 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 8008acc:	f000 fa82 	bl	8008fd4 <dns_check_entries>
}
 8008ad0:	bf00      	nop
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b090      	sub	sp, #64	; 0x40
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	4603      	mov	r3, r0
 8008adc:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry* entry = &dns_table[idx];
 8008ade:	79fa      	ldrb	r2, [r7, #7]
 8008ae0:	4613      	mov	r3, r2
 8008ae2:	011b      	lsls	r3, r3, #4
 8008ae4:	4413      	add	r3, r2
 8008ae6:	011b      	lsls	r3, r3, #4
 8008ae8:	4a64      	ldr	r2, [pc, #400]	; (8008c7c <dns_send+0x1a8>)
 8008aea:	4413      	add	r3, r2
 8008aec:	633b      	str	r3, [r7, #48]	; 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
              (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8008aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af0:	7adb      	ldrb	r3, [r3, #11]
 8008af2:	2b01      	cmp	r3, #1
 8008af4:	d906      	bls.n	8008b04 <dns_send+0x30>
 8008af6:	4b62      	ldr	r3, [pc, #392]	; (8008c80 <dns_send+0x1ac>)
 8008af8:	f240 22ed 	movw	r2, #749	; 0x2ed
 8008afc:	4961      	ldr	r1, [pc, #388]	; (8008c84 <dns_send+0x1b0>)
 8008afe:	4862      	ldr	r0, [pc, #392]	; (8008c88 <dns_send+0x1b4>)
 8008b00:	f011 fe0c 	bl	801a71c <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 8008b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b06:	7adb      	ldrb	r3, [r3, #11]
 8008b08:	461a      	mov	r2, r3
 8008b0a:	4b60      	ldr	r3, [pc, #384]	; (8008c8c <dns_send+0x1b8>)
 8008b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d109      	bne.n	8008b28 <dns_send+0x54>
      && !entry->is_mdns
#endif
    ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 8008b14:	79fb      	ldrb	r3, [r7, #7]
 8008b16:	2100      	movs	r1, #0
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f000 f8bb 	bl	8008c94 <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 8008b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b20:	2200      	movs	r2, #0
 8008b22:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 8008b24:	2300      	movs	r3, #0
 8008b26:	e0a4      	b.n	8008c72 <dns_send+0x19e>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 8008b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b2a:	3310      	adds	r3, #16
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f7f7 fb4f 	bl	80001d0 <strlen>
 8008b32:	4603      	mov	r3, r0
 8008b34:	b29b      	uxth	r3, r3
 8008b36:	3312      	adds	r3, #18
 8008b38:	b29b      	uxth	r3, r3
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	4619      	mov	r1, r3
 8008b3e:	2000      	movs	r0, #0
 8008b40:	f001 f8c0 	bl	8009cc4 <pbuf_alloc>
 8008b44:	62f8      	str	r0, [r7, #44]	; 0x2c
                 SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 8008b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	f000 808d 	beq.w	8008c68 <dns_send+0x194>
    const ip_addr_t* dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 8008b4e:	f107 0310 	add.w	r3, r7, #16
 8008b52:	220c      	movs	r2, #12
 8008b54:	2100      	movs	r1, #0
 8008b56:	4618      	mov	r0, r3
 8008b58:	f010 ffa8 	bl	8019aac <memset>
    hdr.id = lwip_htons(entry->txid);
 8008b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b5e:	891b      	ldrh	r3, [r3, #8]
 8008b60:	4618      	mov	r0, r3
 8008b62:	f7ff ff63 	bl	8008a2c <lwip_htons>
 8008b66:	4603      	mov	r3, r0
 8008b68:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 8008b6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b72:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 8008b74:	f107 0310 	add.w	r3, r7, #16
 8008b78:	220c      	movs	r2, #12
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008b7e:	f001 fed3 	bl	800a928 <pbuf_take>
    hostname = entry->name;
 8008b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b84:	3310      	adds	r3, #16
 8008b86:	63bb      	str	r3, [r7, #56]	; 0x38
    --hostname;
 8008b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b8a:	3b01      	subs	r3, #1
 8008b8c:	63bb      	str	r3, [r7, #56]	; 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 8008b8e:	230c      	movs	r3, #12
 8008b90:	87bb      	strh	r3, [r7, #60]	; 0x3c
    do {
      ++hostname;
 8008b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b94:	3301      	adds	r3, #1
 8008b96:	63bb      	str	r3, [r7, #56]	; 0x38
      hostname_part = hostname;
 8008b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b9a:	62bb      	str	r3, [r7, #40]	; 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8008ba2:	e007      	b.n	8008bb4 <dns_send+0xe0>
        ++n;
 8008ba4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008ba8:	3301      	adds	r3, #1
 8008baa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8008bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb0:	3301      	adds	r3, #1
 8008bb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8008bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	2b2e      	cmp	r3, #46	; 0x2e
 8008bba:	d003      	beq.n	8008bc4 <dns_send+0xf0>
 8008bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d1ef      	bne.n	8008ba4 <dns_send+0xd0>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 8008bc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc8:	1ad3      	subs	r3, r2, r3
 8008bca:	84fb      	strh	r3, [r7, #38]	; 0x26
      pbuf_put_at(p, query_idx, n);
 8008bcc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8008bd0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008bd6:	f001 ff8b 	bl	800aaf0 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, query_idx + 1);
 8008bda:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008bdc:	3301      	adds	r3, #1
 8008bde:	b29b      	uxth	r3, r3
 8008be0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008be2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008be4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008be6:	f001 ff31 	bl	800aa4c <pbuf_take_at>
      query_idx += n + 1;
 8008bea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008bee:	b29a      	uxth	r2, r3
 8008bf0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008bf2:	4413      	add	r3, r2
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    } while (*hostname != 0);
 8008bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d1c7      	bne.n	8008b92 <dns_send+0xbe>
    pbuf_put_at(p, query_idx, 0);
 8008c02:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008c04:	2200      	movs	r2, #0
 8008c06:	4619      	mov	r1, r3
 8008c08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c0a:	f001 ff71 	bl	800aaf0 <pbuf_put_at>
    query_idx++;
 8008c0e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008c10:	3301      	adds	r3, #1
 8008c12:	87bb      	strh	r3, [r7, #60]	; 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 8008c14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c18:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 8008c1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008c1e:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 8008c20:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008c22:	f107 010c 	add.w	r1, r7, #12
 8008c26:	2204      	movs	r2, #4
 8008c28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c2a:	f001 ff0f 	bl	800aa4c <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 8008c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c30:	7bdb      	ldrb	r3, [r3, #15]
 8008c32:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 8008c36:	2335      	movs	r3, #53	; 0x35
 8008c38:	847b      	strh	r3, [r7, #34]	; 0x22
      dst = &dns_servers[entry->server_idx];
 8008c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c3c:	7adb      	ldrb	r3, [r3, #11]
 8008c3e:	009b      	lsls	r3, r3, #2
 8008c40:	4a12      	ldr	r2, [pc, #72]	; (8008c8c <dns_send+0x1b8>)
 8008c42:	4413      	add	r3, r2
 8008c44:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8008c46:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008c4a:	4a11      	ldr	r2, [pc, #68]	; (8008c90 <dns_send+0x1bc>)
 8008c4c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008c50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008c52:	69fa      	ldr	r2, [r7, #28]
 8008c54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c56:	f006 fdc1 	bl	800f7dc <udp_sendto>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* free pbuf */
    pbuf_free(p);
 8008c60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c62:	f001 fba1 	bl	800a3a8 <pbuf_free>
 8008c66:	e002      	b.n	8008c6e <dns_send+0x19a>
  } else {
    err = ERR_MEM;
 8008c68:	23ff      	movs	r3, #255	; 0xff
 8008c6a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return err;
 8008c6e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3740      	adds	r7, #64	; 0x40
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
 8008c7a:	bf00      	nop
 8008c7c:	2000473c 	.word	0x2000473c
 8008c80:	0801e20c 	.word	0x0801e20c
 8008c84:	0801e23c 	.word	0x0801e23c
 8008c88:	0801e254 	.word	0x0801e254
 8008c8c:	20004bac 	.word	0x20004bac
 8008c90:	2000472c 	.word	0x2000472c

08008c94 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t* addr)
{
 8008c94:	b590      	push	{r4, r7, lr}
 8008c96:	b085      	sub	sp, #20
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	6039      	str	r1, [r7, #0]
 8008c9e:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	73fb      	strb	r3, [r7, #15]
 8008ca4:	e03d      	b.n	8008d22 <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 8008ca6:	7bfa      	ldrb	r2, [r7, #15]
 8008ca8:	4957      	ldr	r1, [pc, #348]	; (8008e08 <dns_call_found+0x174>)
 8008caa:	4613      	mov	r3, r2
 8008cac:	005b      	lsls	r3, r3, #1
 8008cae:	4413      	add	r3, r2
 8008cb0:	009b      	lsls	r3, r3, #2
 8008cb2:	440b      	add	r3, r1
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d030      	beq.n	8008d1c <dns_call_found+0x88>
 8008cba:	7bfa      	ldrb	r2, [r7, #15]
 8008cbc:	4952      	ldr	r1, [pc, #328]	; (8008e08 <dns_call_found+0x174>)
 8008cbe:	4613      	mov	r3, r2
 8008cc0:	005b      	lsls	r3, r3, #1
 8008cc2:	4413      	add	r3, r2
 8008cc4:	009b      	lsls	r3, r3, #2
 8008cc6:	440b      	add	r3, r1
 8008cc8:	3308      	adds	r3, #8
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	79fa      	ldrb	r2, [r7, #7]
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d124      	bne.n	8008d1c <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8008cd2:	7bfa      	ldrb	r2, [r7, #15]
 8008cd4:	494c      	ldr	r1, [pc, #304]	; (8008e08 <dns_call_found+0x174>)
 8008cd6:	4613      	mov	r3, r2
 8008cd8:	005b      	lsls	r3, r3, #1
 8008cda:	4413      	add	r3, r2
 8008cdc:	009b      	lsls	r3, r3, #2
 8008cde:	440b      	add	r3, r1
 8008ce0:	681c      	ldr	r4, [r3, #0]
 8008ce2:	79fa      	ldrb	r2, [r7, #7]
 8008ce4:	4613      	mov	r3, r2
 8008ce6:	011b      	lsls	r3, r3, #4
 8008ce8:	4413      	add	r3, r2
 8008cea:	011b      	lsls	r3, r3, #4
 8008cec:	3310      	adds	r3, #16
 8008cee:	4a47      	ldr	r2, [pc, #284]	; (8008e0c <dns_call_found+0x178>)
 8008cf0:	1898      	adds	r0, r3, r2
 8008cf2:	7bfa      	ldrb	r2, [r7, #15]
 8008cf4:	4944      	ldr	r1, [pc, #272]	; (8008e08 <dns_call_found+0x174>)
 8008cf6:	4613      	mov	r3, r2
 8008cf8:	005b      	lsls	r3, r3, #1
 8008cfa:	4413      	add	r3, r2
 8008cfc:	009b      	lsls	r3, r3, #2
 8008cfe:	440b      	add	r3, r1
 8008d00:	3304      	adds	r3, #4
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	461a      	mov	r2, r3
 8008d06:	6839      	ldr	r1, [r7, #0]
 8008d08:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 8008d0a:	7bfa      	ldrb	r2, [r7, #15]
 8008d0c:	493e      	ldr	r1, [pc, #248]	; (8008e08 <dns_call_found+0x174>)
 8008d0e:	4613      	mov	r3, r2
 8008d10:	005b      	lsls	r3, r3, #1
 8008d12:	4413      	add	r3, r2
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	440b      	add	r3, r1
 8008d18:	2200      	movs	r2, #0
 8008d1a:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8008d1c:	7bfb      	ldrb	r3, [r7, #15]
 8008d1e:	3301      	adds	r3, #1
 8008d20:	73fb      	strb	r3, [r7, #15]
 8008d22:	7bfb      	ldrb	r3, [r7, #15]
 8008d24:	2b03      	cmp	r3, #3
 8008d26:	d9be      	bls.n	8008ca6 <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8008d28:	2300      	movs	r3, #0
 8008d2a:	73fb      	strb	r3, [r7, #15]
 8008d2c:	e031      	b.n	8008d92 <dns_call_found+0xfe>
    if (i == idx) {
 8008d2e:	7bfa      	ldrb	r2, [r7, #15]
 8008d30:	79fb      	ldrb	r3, [r7, #7]
 8008d32:	429a      	cmp	r2, r3
 8008d34:	d029      	beq.n	8008d8a <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 8008d36:	7bfa      	ldrb	r2, [r7, #15]
 8008d38:	4934      	ldr	r1, [pc, #208]	; (8008e0c <dns_call_found+0x178>)
 8008d3a:	4613      	mov	r3, r2
 8008d3c:	011b      	lsls	r3, r3, #4
 8008d3e:	4413      	add	r3, r2
 8008d40:	011b      	lsls	r3, r3, #4
 8008d42:	440b      	add	r3, r1
 8008d44:	330a      	adds	r3, #10
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	2b02      	cmp	r3, #2
 8008d4a:	d11f      	bne.n	8008d8c <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 8008d4c:	7bfa      	ldrb	r2, [r7, #15]
 8008d4e:	492f      	ldr	r1, [pc, #188]	; (8008e0c <dns_call_found+0x178>)
 8008d50:	4613      	mov	r3, r2
 8008d52:	011b      	lsls	r3, r3, #4
 8008d54:	4413      	add	r3, r2
 8008d56:	011b      	lsls	r3, r3, #4
 8008d58:	440b      	add	r3, r1
 8008d5a:	330f      	adds	r3, #15
 8008d5c:	7819      	ldrb	r1, [r3, #0]
 8008d5e:	79fa      	ldrb	r2, [r7, #7]
 8008d60:	482a      	ldr	r0, [pc, #168]	; (8008e0c <dns_call_found+0x178>)
 8008d62:	4613      	mov	r3, r2
 8008d64:	011b      	lsls	r3, r3, #4
 8008d66:	4413      	add	r3, r2
 8008d68:	011b      	lsls	r3, r3, #4
 8008d6a:	4403      	add	r3, r0
 8008d6c:	330f      	adds	r3, #15
 8008d6e:	781b      	ldrb	r3, [r3, #0]
 8008d70:	4299      	cmp	r1, r3
 8008d72:	d10b      	bne.n	8008d8c <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8008d74:	79fa      	ldrb	r2, [r7, #7]
 8008d76:	4925      	ldr	r1, [pc, #148]	; (8008e0c <dns_call_found+0x178>)
 8008d78:	4613      	mov	r3, r2
 8008d7a:	011b      	lsls	r3, r3, #4
 8008d7c:	4413      	add	r3, r2
 8008d7e:	011b      	lsls	r3, r3, #4
 8008d80:	440b      	add	r3, r1
 8008d82:	330f      	adds	r3, #15
 8008d84:	2204      	movs	r2, #4
 8008d86:	701a      	strb	r2, [r3, #0]
        break;
 8008d88:	e006      	b.n	8008d98 <dns_call_found+0x104>
      continue; /* only check other requests */
 8008d8a:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8008d8c:	7bfb      	ldrb	r3, [r7, #15]
 8008d8e:	3301      	adds	r3, #1
 8008d90:	73fb      	strb	r3, [r7, #15]
 8008d92:	7bfb      	ldrb	r3, [r7, #15]
 8008d94:	2b03      	cmp	r3, #3
 8008d96:	d9ca      	bls.n	8008d2e <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 8008d98:	79fa      	ldrb	r2, [r7, #7]
 8008d9a:	491c      	ldr	r1, [pc, #112]	; (8008e0c <dns_call_found+0x178>)
 8008d9c:	4613      	mov	r3, r2
 8008d9e:	011b      	lsls	r3, r3, #4
 8008da0:	4413      	add	r3, r2
 8008da2:	011b      	lsls	r3, r3, #4
 8008da4:	440b      	add	r3, r1
 8008da6:	330f      	adds	r3, #15
 8008da8:	781b      	ldrb	r3, [r3, #0]
 8008daa:	2b03      	cmp	r3, #3
 8008dac:	d827      	bhi.n	8008dfe <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 8008dae:	79fa      	ldrb	r2, [r7, #7]
 8008db0:	4916      	ldr	r1, [pc, #88]	; (8008e0c <dns_call_found+0x178>)
 8008db2:	4613      	mov	r3, r2
 8008db4:	011b      	lsls	r3, r3, #4
 8008db6:	4413      	add	r3, r2
 8008db8:	011b      	lsls	r3, r3, #4
 8008dba:	440b      	add	r3, r1
 8008dbc:	330f      	adds	r3, #15
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	4b13      	ldr	r3, [pc, #76]	; (8008e10 <dns_call_found+0x17c>)
 8008dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f006 fee1 	bl	800fb90 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8008dce:	79fa      	ldrb	r2, [r7, #7]
 8008dd0:	490e      	ldr	r1, [pc, #56]	; (8008e0c <dns_call_found+0x178>)
 8008dd2:	4613      	mov	r3, r2
 8008dd4:	011b      	lsls	r3, r3, #4
 8008dd6:	4413      	add	r3, r2
 8008dd8:	011b      	lsls	r3, r3, #4
 8008dda:	440b      	add	r3, r1
 8008ddc:	330f      	adds	r3, #15
 8008dde:	781b      	ldrb	r3, [r3, #0]
 8008de0:	4619      	mov	r1, r3
 8008de2:	4b0b      	ldr	r3, [pc, #44]	; (8008e10 <dns_call_found+0x17c>)
 8008de4:	2200      	movs	r2, #0
 8008de6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8008dea:	79fa      	ldrb	r2, [r7, #7]
 8008dec:	4907      	ldr	r1, [pc, #28]	; (8008e0c <dns_call_found+0x178>)
 8008dee:	4613      	mov	r3, r2
 8008df0:	011b      	lsls	r3, r3, #4
 8008df2:	4413      	add	r3, r2
 8008df4:	011b      	lsls	r3, r3, #4
 8008df6:	440b      	add	r3, r1
 8008df8:	330f      	adds	r3, #15
 8008dfa:	2204      	movs	r2, #4
 8008dfc:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 8008dfe:	bf00      	nop
 8008e00:	3714      	adds	r7, #20
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd90      	pop	{r4, r7, pc}
 8008e06:	bf00      	nop
 8008e08:	20004b7c 	.word	0x20004b7c
 8008e0c:	2000473c 	.word	0x2000473c
 8008e10:	2000472c 	.word	0x2000472c

08008e14 <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b082      	sub	sp, #8
 8008e18:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 8008e1a:	f011 fcfb 	bl	801a814 <rand>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8008e22:	2300      	movs	r3, #0
 8008e24:	71fb      	strb	r3, [r7, #7]
 8008e26:	e01a      	b.n	8008e5e <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8008e28:	79fa      	ldrb	r2, [r7, #7]
 8008e2a:	4911      	ldr	r1, [pc, #68]	; (8008e70 <dns_create_txid+0x5c>)
 8008e2c:	4613      	mov	r3, r2
 8008e2e:	011b      	lsls	r3, r3, #4
 8008e30:	4413      	add	r3, r2
 8008e32:	011b      	lsls	r3, r3, #4
 8008e34:	440b      	add	r3, r1
 8008e36:	330a      	adds	r3, #10
 8008e38:	781b      	ldrb	r3, [r3, #0]
 8008e3a:	2b02      	cmp	r3, #2
 8008e3c:	d10c      	bne.n	8008e58 <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 8008e3e:	79fa      	ldrb	r2, [r7, #7]
 8008e40:	490b      	ldr	r1, [pc, #44]	; (8008e70 <dns_create_txid+0x5c>)
 8008e42:	4613      	mov	r3, r2
 8008e44:	011b      	lsls	r3, r3, #4
 8008e46:	4413      	add	r3, r2
 8008e48:	011b      	lsls	r3, r3, #4
 8008e4a:	440b      	add	r3, r1
 8008e4c:	3308      	adds	r3, #8
 8008e4e:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8008e50:	88ba      	ldrh	r2, [r7, #4]
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d100      	bne.n	8008e58 <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 8008e56:	e7e0      	b.n	8008e1a <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8008e58:	79fb      	ldrb	r3, [r7, #7]
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	71fb      	strb	r3, [r7, #7]
 8008e5e:	79fb      	ldrb	r3, [r7, #7]
 8008e60:	2b03      	cmp	r3, #3
 8008e62:	d9e1      	bls.n	8008e28 <dns_create_txid+0x14>
    }
  }

  return txid;
 8008e64:	88bb      	ldrh	r3, [r7, #4]
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3708      	adds	r7, #8
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
 8008e6e:	bf00      	nop
 8008e70:	2000473c 	.word	0x2000473c

08008e74 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b084      	sub	sp, #16
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 8008e7e:	79fa      	ldrb	r2, [r7, #7]
 8008e80:	4613      	mov	r3, r2
 8008e82:	011b      	lsls	r3, r3, #4
 8008e84:	4413      	add	r3, r2
 8008e86:	011b      	lsls	r3, r3, #4
 8008e88:	4a4c      	ldr	r2, [pc, #304]	; (8008fbc <dns_check_entry+0x148>)
 8008e8a:	4413      	add	r3, r2
 8008e8c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8008e8e:	79fb      	ldrb	r3, [r7, #7]
 8008e90:	2b03      	cmp	r3, #3
 8008e92:	d906      	bls.n	8008ea2 <dns_check_entry+0x2e>
 8008e94:	4b4a      	ldr	r3, [pc, #296]	; (8008fc0 <dns_check_entry+0x14c>)
 8008e96:	f44f 727e 	mov.w	r2, #1016	; 0x3f8
 8008e9a:	494a      	ldr	r1, [pc, #296]	; (8008fc4 <dns_check_entry+0x150>)
 8008e9c:	484a      	ldr	r0, [pc, #296]	; (8008fc8 <dns_check_entry+0x154>)
 8008e9e:	f011 fc3d 	bl	801a71c <iprintf>

  switch (entry->state) {
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	7a9b      	ldrb	r3, [r3, #10]
 8008ea6:	2b03      	cmp	r3, #3
 8008ea8:	d876      	bhi.n	8008f98 <dns_check_entry+0x124>
 8008eaa:	a201      	add	r2, pc, #4	; (adr r2, 8008eb0 <dns_check_entry+0x3c>)
 8008eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eb0:	08008fa9 	.word	0x08008fa9
 8008eb4:	08008ec1 	.word	0x08008ec1
 8008eb8:	08008ef3 	.word	0x08008ef3
 8008ebc:	08008f77 	.word	0x08008f77
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 8008ec0:	f7ff ffa8 	bl	8008e14 <dns_create_txid>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2202      	movs	r2, #2
 8008ed0:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	2201      	movs	r2, #1
 8008edc:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 8008ee4:	79fb      	ldrb	r3, [r7, #7]
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f7ff fdf4 	bl	8008ad4 <dns_send>
 8008eec:	4603      	mov	r3, r0
 8008eee:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 8008ef0:	e05f      	b.n	8008fb2 <dns_check_entry+0x13e>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	7b1b      	ldrb	r3, [r3, #12]
 8008ef6:	3b01      	subs	r3, #1
 8008ef8:	b2da      	uxtb	r2, r3
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	731a      	strb	r2, [r3, #12]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	7b1b      	ldrb	r3, [r3, #12]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d152      	bne.n	8008fac <dns_check_entry+0x138>
        if (++entry->retries == DNS_MAX_RETRIES) {
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	7b5b      	ldrb	r3, [r3, #13]
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	b2da      	uxtb	r2, r3
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	735a      	strb	r2, [r3, #13]
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	7b5b      	ldrb	r3, [r3, #13]
 8008f16:	2b04      	cmp	r3, #4
 8008f18:	d122      	bne.n	8008f60 <dns_check_entry+0xec>
          if ((entry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[entry->server_idx + 1])
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	7adb      	ldrb	r3, [r3, #11]
 8008f1e:	3301      	adds	r3, #1
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	dc14      	bgt.n	8008f4e <dns_check_entry+0xda>
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	7adb      	ldrb	r3, [r3, #11]
 8008f28:	3301      	adds	r3, #1
 8008f2a:	4a28      	ldr	r2, [pc, #160]	; (8008fcc <dns_check_entry+0x158>)
 8008f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d00c      	beq.n	8008f4e <dns_check_entry+0xda>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
            && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
            ) {
            /* change of server */
            entry->server_idx++;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	7adb      	ldrb	r3, [r3, #11]
 8008f38:	3301      	adds	r3, #1
 8008f3a:	b2da      	uxtb	r2, r3
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2201      	movs	r2, #1
 8008f44:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	735a      	strb	r2, [r3, #13]
 8008f4c:	e00c      	b.n	8008f68 <dns_check_entry+0xf4>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 8008f4e:	79fb      	ldrb	r3, [r7, #7]
 8008f50:	2100      	movs	r1, #0
 8008f52:	4618      	mov	r0, r3
 8008f54:	f7ff fe9e 	bl	8008c94 <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	729a      	strb	r2, [r3, #10]
            break;
 8008f5e:	e028      	b.n	8008fb2 <dns_check_entry+0x13e>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	7b5a      	ldrb	r2, [r3, #13]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 8008f68:	79fb      	ldrb	r3, [r7, #7]
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f7ff fdb2 	bl	8008ad4 <dns_send>
 8008f70:	4603      	mov	r3, r0
 8008f72:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 8008f74:	e01a      	b.n	8008fac <dns_check_entry+0x138>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d008      	beq.n	8008f90 <dns_check_entry+0x11c>
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	1e5a      	subs	r2, r3, #1
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	601a      	str	r2, [r3, #0]
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d10f      	bne.n	8008fb0 <dns_check_entry+0x13c>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2200      	movs	r2, #0
 8008f94:	729a      	strb	r2, [r3, #10]
      }
      break;
 8008f96:	e00b      	b.n	8008fb0 <dns_check_entry+0x13c>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 8008f98:	4b09      	ldr	r3, [pc, #36]	; (8008fc0 <dns_check_entry+0x14c>)
 8008f9a:	f240 4237 	movw	r2, #1079	; 0x437
 8008f9e:	490c      	ldr	r1, [pc, #48]	; (8008fd0 <dns_check_entry+0x15c>)
 8008fa0:	4809      	ldr	r0, [pc, #36]	; (8008fc8 <dns_check_entry+0x154>)
 8008fa2:	f011 fbbb 	bl	801a71c <iprintf>
      break;
 8008fa6:	e004      	b.n	8008fb2 <dns_check_entry+0x13e>
      break;
 8008fa8:	bf00      	nop
 8008faa:	e002      	b.n	8008fb2 <dns_check_entry+0x13e>
      break;
 8008fac:	bf00      	nop
 8008fae:	e000      	b.n	8008fb2 <dns_check_entry+0x13e>
      break;
 8008fb0:	bf00      	nop
  }
}
 8008fb2:	bf00      	nop
 8008fb4:	3710      	adds	r7, #16
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}
 8008fba:	bf00      	nop
 8008fbc:	2000473c 	.word	0x2000473c
 8008fc0:	0801e20c 	.word	0x0801e20c
 8008fc4:	0801e27c 	.word	0x0801e27c
 8008fc8:	0801e254 	.word	0x0801e254
 8008fcc:	20004bac 	.word	0x20004bac
 8008fd0:	0801e298 	.word	0x0801e298

08008fd4 <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b082      	sub	sp, #8
 8008fd8:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8008fda:	2300      	movs	r3, #0
 8008fdc:	71fb      	strb	r3, [r7, #7]
 8008fde:	e006      	b.n	8008fee <dns_check_entries+0x1a>
    dns_check_entry(i);
 8008fe0:	79fb      	ldrb	r3, [r7, #7]
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f7ff ff46 	bl	8008e74 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8008fe8:	79fb      	ldrb	r3, [r7, #7]
 8008fea:	3301      	adds	r3, #1
 8008fec:	71fb      	strb	r3, [r7, #7]
 8008fee:	79fb      	ldrb	r3, [r7, #7]
 8008ff0:	2b03      	cmp	r3, #3
 8008ff2:	d9f5      	bls.n	8008fe0 <dns_check_entries+0xc>
  }
}
 8008ff4:	bf00      	nop
 8008ff6:	3708      	adds	r7, #8
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b082      	sub	sp, #8
 8009000:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8009002:	2300      	movs	r3, #0
 8009004:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8009006:	f00b f97f 	bl	8014308 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800900a:	f000 f8a9 	bl	8009160 <mem_init>
  memp_init();
 800900e:	f000 fb71 	bl	80096f4 <memp_init>
  pbuf_init();
  netif_init();
 8009012:	f000 fc37 	bl	8009884 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8009016:	f006 fa83 	bl	800f520 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800901a:	f001 fd8b 	bl	800ab34 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 800901e:	f7ff fd2a 	bl	8008a76 <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 8009022:	f006 f913 	bl	800f24c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8009026:	bf00      	nop
 8009028:	3708      	adds	r7, #8
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
	...

08009030 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b084      	sub	sp, #16
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009038:	4b40      	ldr	r3, [pc, #256]	; (800913c <plug_holes+0x10c>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	687a      	ldr	r2, [r7, #4]
 800903e:	429a      	cmp	r2, r3
 8009040:	d206      	bcs.n	8009050 <plug_holes+0x20>
 8009042:	4b3f      	ldr	r3, [pc, #252]	; (8009140 <plug_holes+0x110>)
 8009044:	f240 125d 	movw	r2, #349	; 0x15d
 8009048:	493e      	ldr	r1, [pc, #248]	; (8009144 <plug_holes+0x114>)
 800904a:	483f      	ldr	r0, [pc, #252]	; (8009148 <plug_holes+0x118>)
 800904c:	f011 fb66 	bl	801a71c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8009050:	4b3e      	ldr	r3, [pc, #248]	; (800914c <plug_holes+0x11c>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	429a      	cmp	r2, r3
 8009058:	d306      	bcc.n	8009068 <plug_holes+0x38>
 800905a:	4b39      	ldr	r3, [pc, #228]	; (8009140 <plug_holes+0x110>)
 800905c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8009060:	493b      	ldr	r1, [pc, #236]	; (8009150 <plug_holes+0x120>)
 8009062:	4839      	ldr	r0, [pc, #228]	; (8009148 <plug_holes+0x118>)
 8009064:	f011 fb5a 	bl	801a71c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	791b      	ldrb	r3, [r3, #4]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d006      	beq.n	800907e <plug_holes+0x4e>
 8009070:	4b33      	ldr	r3, [pc, #204]	; (8009140 <plug_holes+0x110>)
 8009072:	f240 125f 	movw	r2, #351	; 0x15f
 8009076:	4937      	ldr	r1, [pc, #220]	; (8009154 <plug_holes+0x124>)
 8009078:	4833      	ldr	r0, [pc, #204]	; (8009148 <plug_holes+0x118>)
 800907a:	f011 fb4f 	bl	801a71c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	881b      	ldrh	r3, [r3, #0]
 8009082:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009086:	d906      	bls.n	8009096 <plug_holes+0x66>
 8009088:	4b2d      	ldr	r3, [pc, #180]	; (8009140 <plug_holes+0x110>)
 800908a:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800908e:	4932      	ldr	r1, [pc, #200]	; (8009158 <plug_holes+0x128>)
 8009090:	482d      	ldr	r0, [pc, #180]	; (8009148 <plug_holes+0x118>)
 8009092:	f011 fb43 	bl	801a71c <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 8009096:	4b29      	ldr	r3, [pc, #164]	; (800913c <plug_holes+0x10c>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	8812      	ldrh	r2, [r2, #0]
 800909e:	4413      	add	r3, r2
 80090a0:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d01f      	beq.n	80090ea <plug_holes+0xba>
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	791b      	ldrb	r3, [r3, #4]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d11b      	bne.n	80090ea <plug_holes+0xba>
 80090b2:	4b26      	ldr	r3, [pc, #152]	; (800914c <plug_holes+0x11c>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	68fa      	ldr	r2, [r7, #12]
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d016      	beq.n	80090ea <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80090bc:	4b27      	ldr	r3, [pc, #156]	; (800915c <plug_holes+0x12c>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	68fa      	ldr	r2, [r7, #12]
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d102      	bne.n	80090cc <plug_holes+0x9c>
      lfree = mem;
 80090c6:	4a25      	ldr	r2, [pc, #148]	; (800915c <plug_holes+0x12c>)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	881a      	ldrh	r2, [r3, #0]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	4a19      	ldr	r2, [pc, #100]	; (800913c <plug_holes+0x10c>)
 80090d8:	6812      	ldr	r2, [r2, #0]
 80090da:	1a99      	subs	r1, r3, r2
 80090dc:	4b17      	ldr	r3, [pc, #92]	; (800913c <plug_holes+0x10c>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	68fa      	ldr	r2, [r7, #12]
 80090e2:	8812      	ldrh	r2, [r2, #0]
 80090e4:	4413      	add	r3, r2
 80090e6:	b28a      	uxth	r2, r1
 80090e8:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 80090ea:	4b14      	ldr	r3, [pc, #80]	; (800913c <plug_holes+0x10c>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	687a      	ldr	r2, [r7, #4]
 80090f0:	8852      	ldrh	r2, [r2, #2]
 80090f2:	4413      	add	r3, r2
 80090f4:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80090f6:	68ba      	ldr	r2, [r7, #8]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	429a      	cmp	r2, r3
 80090fc:	d01a      	beq.n	8009134 <plug_holes+0x104>
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	791b      	ldrb	r3, [r3, #4]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d116      	bne.n	8009134 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8009106:	4b15      	ldr	r3, [pc, #84]	; (800915c <plug_holes+0x12c>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	687a      	ldr	r2, [r7, #4]
 800910c:	429a      	cmp	r2, r3
 800910e:	d102      	bne.n	8009116 <plug_holes+0xe6>
      lfree = pmem;
 8009110:	4a12      	ldr	r2, [pc, #72]	; (800915c <plug_holes+0x12c>)
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	881a      	ldrh	r2, [r3, #0]
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	4a06      	ldr	r2, [pc, #24]	; (800913c <plug_holes+0x10c>)
 8009122:	6812      	ldr	r2, [r2, #0]
 8009124:	1a99      	subs	r1, r3, r2
 8009126:	4b05      	ldr	r3, [pc, #20]	; (800913c <plug_holes+0x10c>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	687a      	ldr	r2, [r7, #4]
 800912c:	8812      	ldrh	r2, [r2, #0]
 800912e:	4413      	add	r3, r2
 8009130:	b28a      	uxth	r2, r1
 8009132:	805a      	strh	r2, [r3, #2]
  }
}
 8009134:	bf00      	nop
 8009136:	3710      	adds	r7, #16
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}
 800913c:	20004bb4 	.word	0x20004bb4
 8009140:	0801e2b8 	.word	0x0801e2b8
 8009144:	0801e2e8 	.word	0x0801e2e8
 8009148:	0801e300 	.word	0x0801e300
 800914c:	20004bb8 	.word	0x20004bb8
 8009150:	0801e328 	.word	0x0801e328
 8009154:	0801e344 	.word	0x0801e344
 8009158:	0801e360 	.word	0x0801e360
 800915c:	20004bbc 	.word	0x20004bbc

08009160 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b082      	sub	sp, #8
 8009164:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8009166:	4b1e      	ldr	r3, [pc, #120]	; (80091e0 <mem_init+0x80>)
 8009168:	3303      	adds	r3, #3
 800916a:	f023 0303 	bic.w	r3, r3, #3
 800916e:	461a      	mov	r2, r3
 8009170:	4b1c      	ldr	r3, [pc, #112]	; (80091e4 <mem_init+0x84>)
 8009172:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8009174:	4b1b      	ldr	r3, [pc, #108]	; (80091e4 <mem_init+0x84>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009180:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2200      	movs	r2, #0
 8009186:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2200      	movs	r2, #0
 800918c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800918e:	4b15      	ldr	r3, [pc, #84]	; (80091e4 <mem_init+0x84>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8009196:	4a14      	ldr	r2, [pc, #80]	; (80091e8 <mem_init+0x88>)
 8009198:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800919a:	4b13      	ldr	r3, [pc, #76]	; (80091e8 <mem_init+0x88>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	2201      	movs	r2, #1
 80091a0:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80091a2:	4b11      	ldr	r3, [pc, #68]	; (80091e8 <mem_init+0x88>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80091aa:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80091ac:	4b0e      	ldr	r3, [pc, #56]	; (80091e8 <mem_init+0x88>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80091b4:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80091b6:	4b0b      	ldr	r3, [pc, #44]	; (80091e4 <mem_init+0x84>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4a0c      	ldr	r2, [pc, #48]	; (80091ec <mem_init+0x8c>)
 80091bc:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80091be:	480c      	ldr	r0, [pc, #48]	; (80091f0 <mem_init+0x90>)
 80091c0:	f00b f8b0 	bl	8014324 <sys_mutex_new>
 80091c4:	4603      	mov	r3, r0
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d006      	beq.n	80091d8 <mem_init+0x78>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80091ca:	4b0a      	ldr	r3, [pc, #40]	; (80091f4 <mem_init+0x94>)
 80091cc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80091d0:	4909      	ldr	r1, [pc, #36]	; (80091f8 <mem_init+0x98>)
 80091d2:	480a      	ldr	r0, [pc, #40]	; (80091fc <mem_init+0x9c>)
 80091d4:	f011 faa2 	bl	801a71c <iprintf>
  }
}
 80091d8:	bf00      	nop
 80091da:	3708      	adds	r7, #8
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}
 80091e0:	20007f9c 	.word	0x20007f9c
 80091e4:	20004bb4 	.word	0x20004bb4
 80091e8:	20004bb8 	.word	0x20004bb8
 80091ec:	20004bbc 	.word	0x20004bbc
 80091f0:	20004bc0 	.word	0x20004bc0
 80091f4:	0801e2b8 	.word	0x0801e2b8
 80091f8:	0801e38c 	.word	0x0801e38c
 80091fc:	0801e300 	.word	0x0801e300

08009200 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d050      	beq.n	80092b0 <mem_free+0xb0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f003 0303 	and.w	r3, r3, #3
 8009214:	2b00      	cmp	r3, #0
 8009216:	d006      	beq.n	8009226 <mem_free+0x26>
 8009218:	4b27      	ldr	r3, [pc, #156]	; (80092b8 <mem_free+0xb8>)
 800921a:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800921e:	4927      	ldr	r1, [pc, #156]	; (80092bc <mem_free+0xbc>)
 8009220:	4827      	ldr	r0, [pc, #156]	; (80092c0 <mem_free+0xc0>)
 8009222:	f011 fa7b 	bl	801a71c <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8009226:	4b27      	ldr	r3, [pc, #156]	; (80092c4 <mem_free+0xc4>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	687a      	ldr	r2, [r7, #4]
 800922c:	429a      	cmp	r2, r3
 800922e:	d304      	bcc.n	800923a <mem_free+0x3a>
 8009230:	4b25      	ldr	r3, [pc, #148]	; (80092c8 <mem_free+0xc8>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	687a      	ldr	r2, [r7, #4]
 8009236:	429a      	cmp	r2, r3
 8009238:	d306      	bcc.n	8009248 <mem_free+0x48>
 800923a:	4b1f      	ldr	r3, [pc, #124]	; (80092b8 <mem_free+0xb8>)
 800923c:	f240 12af 	movw	r2, #431	; 0x1af
 8009240:	4922      	ldr	r1, [pc, #136]	; (80092cc <mem_free+0xcc>)
 8009242:	481f      	ldr	r0, [pc, #124]	; (80092c0 <mem_free+0xc0>)
 8009244:	f011 fa6a 	bl	801a71c <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8009248:	4b1e      	ldr	r3, [pc, #120]	; (80092c4 <mem_free+0xc4>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	429a      	cmp	r2, r3
 8009250:	d304      	bcc.n	800925c <mem_free+0x5c>
 8009252:	4b1d      	ldr	r3, [pc, #116]	; (80092c8 <mem_free+0xc8>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	687a      	ldr	r2, [r7, #4]
 8009258:	429a      	cmp	r2, r3
 800925a:	d306      	bcc.n	800926a <mem_free+0x6a>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800925c:	f00b f8c0 	bl	80143e0 <sys_arch_protect>
 8009260:	60b8      	str	r0, [r7, #8]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 8009262:	68b8      	ldr	r0, [r7, #8]
 8009264:	f00b f8ca 	bl	80143fc <sys_arch_unprotect>
    return;
 8009268:	e023      	b.n	80092b2 <mem_free+0xb2>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800926a:	4819      	ldr	r0, [pc, #100]	; (80092d0 <mem_free+0xd0>)
 800926c:	f00b f876 	bl	801435c <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	3b08      	subs	r3, #8
 8009274:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	791b      	ldrb	r3, [r3, #4]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d106      	bne.n	800928c <mem_free+0x8c>
 800927e:	4b0e      	ldr	r3, [pc, #56]	; (80092b8 <mem_free+0xb8>)
 8009280:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8009284:	4913      	ldr	r1, [pc, #76]	; (80092d4 <mem_free+0xd4>)
 8009286:	480e      	ldr	r0, [pc, #56]	; (80092c0 <mem_free+0xc0>)
 8009288:	f011 fa48 	bl	801a71c <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2200      	movs	r2, #0
 8009290:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8009292:	4b11      	ldr	r3, [pc, #68]	; (80092d8 <mem_free+0xd8>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	68fa      	ldr	r2, [r7, #12]
 8009298:	429a      	cmp	r2, r3
 800929a:	d202      	bcs.n	80092a2 <mem_free+0xa2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800929c:	4a0e      	ldr	r2, [pc, #56]	; (80092d8 <mem_free+0xd8>)
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80092a2:	68f8      	ldr	r0, [r7, #12]
 80092a4:	f7ff fec4 	bl	8009030 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80092a8:	4809      	ldr	r0, [pc, #36]	; (80092d0 <mem_free+0xd0>)
 80092aa:	f00b f866 	bl	801437a <sys_mutex_unlock>
 80092ae:	e000      	b.n	80092b2 <mem_free+0xb2>
    return;
 80092b0:	bf00      	nop
}
 80092b2:	3710      	adds	r7, #16
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}
 80092b8:	0801e2b8 	.word	0x0801e2b8
 80092bc:	0801e3a8 	.word	0x0801e3a8
 80092c0:	0801e300 	.word	0x0801e300
 80092c4:	20004bb4 	.word	0x20004bb4
 80092c8:	20004bb8 	.word	0x20004bb8
 80092cc:	0801e3cc 	.word	0x0801e3cc
 80092d0:	20004bc0 	.word	0x20004bc0
 80092d4:	0801e3e4 	.word	0x0801e3e4
 80092d8:	20004bbc 	.word	0x20004bbc

080092dc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b088      	sub	sp, #32
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	460b      	mov	r3, r1
 80092e6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 80092e8:	887b      	ldrh	r3, [r7, #2]
 80092ea:	3303      	adds	r3, #3
 80092ec:	b29b      	uxth	r3, r3
 80092ee:	f023 0303 	bic.w	r3, r3, #3
 80092f2:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 80092f4:	887b      	ldrh	r3, [r7, #2]
 80092f6:	2b0b      	cmp	r3, #11
 80092f8:	d801      	bhi.n	80092fe <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80092fa:	230c      	movs	r3, #12
 80092fc:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 80092fe:	887b      	ldrh	r3, [r7, #2]
 8009300:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009304:	d901      	bls.n	800930a <mem_trim+0x2e>
    return NULL;
 8009306:	2300      	movs	r3, #0
 8009308:	e0bd      	b.n	8009486 <mem_trim+0x1aa>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800930a:	4b61      	ldr	r3, [pc, #388]	; (8009490 <mem_trim+0x1b4>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	687a      	ldr	r2, [r7, #4]
 8009310:	429a      	cmp	r2, r3
 8009312:	d304      	bcc.n	800931e <mem_trim+0x42>
 8009314:	4b5f      	ldr	r3, [pc, #380]	; (8009494 <mem_trim+0x1b8>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	687a      	ldr	r2, [r7, #4]
 800931a:	429a      	cmp	r2, r3
 800931c:	d306      	bcc.n	800932c <mem_trim+0x50>
 800931e:	4b5e      	ldr	r3, [pc, #376]	; (8009498 <mem_trim+0x1bc>)
 8009320:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8009324:	495d      	ldr	r1, [pc, #372]	; (800949c <mem_trim+0x1c0>)
 8009326:	485e      	ldr	r0, [pc, #376]	; (80094a0 <mem_trim+0x1c4>)
 8009328:	f011 f9f8 	bl	801a71c <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800932c:	4b58      	ldr	r3, [pc, #352]	; (8009490 <mem_trim+0x1b4>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	429a      	cmp	r2, r3
 8009334:	d304      	bcc.n	8009340 <mem_trim+0x64>
 8009336:	4b57      	ldr	r3, [pc, #348]	; (8009494 <mem_trim+0x1b8>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	687a      	ldr	r2, [r7, #4]
 800933c:	429a      	cmp	r2, r3
 800933e:	d307      	bcc.n	8009350 <mem_trim+0x74>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 8009340:	f00b f84e 	bl	80143e0 <sys_arch_protect>
 8009344:	60f8      	str	r0, [r7, #12]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 8009346:	68f8      	ldr	r0, [r7, #12]
 8009348:	f00b f858 	bl	80143fc <sys_arch_unprotect>
    return rmem;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	e09a      	b.n	8009486 <mem_trim+0x1aa>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	3b08      	subs	r3, #8
 8009354:	61fb      	str	r3, [r7, #28]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8009356:	69fb      	ldr	r3, [r7, #28]
 8009358:	4a4d      	ldr	r2, [pc, #308]	; (8009490 <mem_trim+0x1b4>)
 800935a:	6812      	ldr	r2, [r2, #0]
 800935c:	1a9b      	subs	r3, r3, r2
 800935e:	837b      	strh	r3, [r7, #26]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8009360:	69fb      	ldr	r3, [r7, #28]
 8009362:	881a      	ldrh	r2, [r3, #0]
 8009364:	8b7b      	ldrh	r3, [r7, #26]
 8009366:	1ad3      	subs	r3, r2, r3
 8009368:	b29b      	uxth	r3, r3
 800936a:	3b08      	subs	r3, #8
 800936c:	833b      	strh	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800936e:	887a      	ldrh	r2, [r7, #2]
 8009370:	8b3b      	ldrh	r3, [r7, #24]
 8009372:	429a      	cmp	r2, r3
 8009374:	d906      	bls.n	8009384 <mem_trim+0xa8>
 8009376:	4b48      	ldr	r3, [pc, #288]	; (8009498 <mem_trim+0x1bc>)
 8009378:	f240 2206 	movw	r2, #518	; 0x206
 800937c:	4949      	ldr	r1, [pc, #292]	; (80094a4 <mem_trim+0x1c8>)
 800937e:	4848      	ldr	r0, [pc, #288]	; (80094a0 <mem_trim+0x1c4>)
 8009380:	f011 f9cc 	bl	801a71c <iprintf>
  if (newsize > size) {
 8009384:	887a      	ldrh	r2, [r7, #2]
 8009386:	8b3b      	ldrh	r3, [r7, #24]
 8009388:	429a      	cmp	r2, r3
 800938a:	d901      	bls.n	8009390 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 800938c:	2300      	movs	r3, #0
 800938e:	e07a      	b.n	8009486 <mem_trim+0x1aa>
  }
  if (newsize == size) {
 8009390:	887a      	ldrh	r2, [r7, #2]
 8009392:	8b3b      	ldrh	r3, [r7, #24]
 8009394:	429a      	cmp	r2, r3
 8009396:	d101      	bne.n	800939c <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	e074      	b.n	8009486 <mem_trim+0x1aa>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800939c:	4842      	ldr	r0, [pc, #264]	; (80094a8 <mem_trim+0x1cc>)
 800939e:	f00a ffdd 	bl	801435c <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 80093a2:	4b3b      	ldr	r3, [pc, #236]	; (8009490 <mem_trim+0x1b4>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	69fa      	ldr	r2, [r7, #28]
 80093a8:	8812      	ldrh	r2, [r2, #0]
 80093aa:	4413      	add	r3, r2
 80093ac:	617b      	str	r3, [r7, #20]
  if (mem2->used == 0) {
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	791b      	ldrb	r3, [r3, #4]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d131      	bne.n	800941a <mem_trim+0x13e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	881b      	ldrh	r3, [r3, #0]
 80093ba:	823b      	strh	r3, [r7, #16]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80093bc:	8b7a      	ldrh	r2, [r7, #26]
 80093be:	887b      	ldrh	r3, [r7, #2]
 80093c0:	4413      	add	r3, r2
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	3308      	adds	r3, #8
 80093c6:	827b      	strh	r3, [r7, #18]
    if (lfree == mem2) {
 80093c8:	4b38      	ldr	r3, [pc, #224]	; (80094ac <mem_trim+0x1d0>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	697a      	ldr	r2, [r7, #20]
 80093ce:	429a      	cmp	r2, r3
 80093d0:	d105      	bne.n	80093de <mem_trim+0x102>
      lfree = (struct mem *)(void *)&ram[ptr2];
 80093d2:	4b2f      	ldr	r3, [pc, #188]	; (8009490 <mem_trim+0x1b4>)
 80093d4:	681a      	ldr	r2, [r3, #0]
 80093d6:	8a7b      	ldrh	r3, [r7, #18]
 80093d8:	4413      	add	r3, r2
 80093da:	4a34      	ldr	r2, [pc, #208]	; (80094ac <mem_trim+0x1d0>)
 80093dc:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 80093de:	4b2c      	ldr	r3, [pc, #176]	; (8009490 <mem_trim+0x1b4>)
 80093e0:	681a      	ldr	r2, [r3, #0]
 80093e2:	8a7b      	ldrh	r3, [r7, #18]
 80093e4:	4413      	add	r3, r2
 80093e6:	617b      	str	r3, [r7, #20]
    mem2->used = 0;
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	2200      	movs	r2, #0
 80093ec:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	8a3a      	ldrh	r2, [r7, #16]
 80093f2:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	8b7a      	ldrh	r2, [r7, #26]
 80093f8:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80093fa:	69fb      	ldr	r3, [r7, #28]
 80093fc:	8a7a      	ldrh	r2, [r7, #18]
 80093fe:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	881b      	ldrh	r3, [r3, #0]
 8009404:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009408:	d039      	beq.n	800947e <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800940a:	4b21      	ldr	r3, [pc, #132]	; (8009490 <mem_trim+0x1b4>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	697a      	ldr	r2, [r7, #20]
 8009410:	8812      	ldrh	r2, [r2, #0]
 8009412:	4413      	add	r3, r2
 8009414:	8a7a      	ldrh	r2, [r7, #18]
 8009416:	805a      	strh	r2, [r3, #2]
 8009418:	e031      	b.n	800947e <mem_trim+0x1a2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800941a:	887b      	ldrh	r3, [r7, #2]
 800941c:	f103 0214 	add.w	r2, r3, #20
 8009420:	8b3b      	ldrh	r3, [r7, #24]
 8009422:	429a      	cmp	r2, r3
 8009424:	d82b      	bhi.n	800947e <mem_trim+0x1a2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8009426:	8b7a      	ldrh	r2, [r7, #26]
 8009428:	887b      	ldrh	r3, [r7, #2]
 800942a:	4413      	add	r3, r2
 800942c:	b29b      	uxth	r3, r3
 800942e:	3308      	adds	r3, #8
 8009430:	827b      	strh	r3, [r7, #18]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8009432:	4b17      	ldr	r3, [pc, #92]	; (8009490 <mem_trim+0x1b4>)
 8009434:	681a      	ldr	r2, [r3, #0]
 8009436:	8a7b      	ldrh	r3, [r7, #18]
 8009438:	4413      	add	r3, r2
 800943a:	617b      	str	r3, [r7, #20]
    if (mem2 < lfree) {
 800943c:	4b1b      	ldr	r3, [pc, #108]	; (80094ac <mem_trim+0x1d0>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	697a      	ldr	r2, [r7, #20]
 8009442:	429a      	cmp	r2, r3
 8009444:	d202      	bcs.n	800944c <mem_trim+0x170>
      lfree = mem2;
 8009446:	4a19      	ldr	r2, [pc, #100]	; (80094ac <mem_trim+0x1d0>)
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	2200      	movs	r2, #0
 8009450:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8009452:	69fb      	ldr	r3, [r7, #28]
 8009454:	881a      	ldrh	r2, [r3, #0]
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	8b7a      	ldrh	r2, [r7, #26]
 800945e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8009460:	69fb      	ldr	r3, [r7, #28]
 8009462:	8a7a      	ldrh	r2, [r7, #18]
 8009464:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	881b      	ldrh	r3, [r3, #0]
 800946a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800946e:	d006      	beq.n	800947e <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8009470:	4b07      	ldr	r3, [pc, #28]	; (8009490 <mem_trim+0x1b4>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	697a      	ldr	r2, [r7, #20]
 8009476:	8812      	ldrh	r2, [r2, #0]
 8009478:	4413      	add	r3, r2
 800947a:	8a7a      	ldrh	r2, [r7, #18]
 800947c:	805a      	strh	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800947e:	480a      	ldr	r0, [pc, #40]	; (80094a8 <mem_trim+0x1cc>)
 8009480:	f00a ff7b 	bl	801437a <sys_mutex_unlock>
  return rmem;
 8009484:	687b      	ldr	r3, [r7, #4]
}
 8009486:	4618      	mov	r0, r3
 8009488:	3720      	adds	r7, #32
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
 800948e:	bf00      	nop
 8009490:	20004bb4 	.word	0x20004bb4
 8009494:	20004bb8 	.word	0x20004bb8
 8009498:	0801e2b8 	.word	0x0801e2b8
 800949c:	0801e3f8 	.word	0x0801e3f8
 80094a0:	0801e300 	.word	0x0801e300
 80094a4:	0801e410 	.word	0x0801e410
 80094a8:	20004bc0 	.word	0x20004bc0
 80094ac:	20004bbc 	.word	0x20004bbc

080094b0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b088      	sub	sp, #32
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	4603      	mov	r3, r0
 80094b8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 80094ba:	88fb      	ldrh	r3, [r7, #6]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d101      	bne.n	80094c4 <mem_malloc+0x14>
    return NULL;
 80094c0:	2300      	movs	r3, #0
 80094c2:	e0d1      	b.n	8009668 <mem_malloc+0x1b8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 80094c4:	88fb      	ldrh	r3, [r7, #6]
 80094c6:	3303      	adds	r3, #3
 80094c8:	b29b      	uxth	r3, r3
 80094ca:	f023 0303 	bic.w	r3, r3, #3
 80094ce:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 80094d0:	88fb      	ldrh	r3, [r7, #6]
 80094d2:	2b0b      	cmp	r3, #11
 80094d4:	d801      	bhi.n	80094da <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80094d6:	230c      	movs	r3, #12
 80094d8:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 80094da:	88fb      	ldrh	r3, [r7, #6]
 80094dc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80094e0:	d901      	bls.n	80094e6 <mem_malloc+0x36>
    return NULL;
 80094e2:	2300      	movs	r3, #0
 80094e4:	e0c0      	b.n	8009668 <mem_malloc+0x1b8>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80094e6:	4862      	ldr	r0, [pc, #392]	; (8009670 <mem_malloc+0x1c0>)
 80094e8:	f00a ff38 	bl	801435c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 80094ec:	4b61      	ldr	r3, [pc, #388]	; (8009674 <mem_malloc+0x1c4>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	461a      	mov	r2, r3
 80094f2:	4b61      	ldr	r3, [pc, #388]	; (8009678 <mem_malloc+0x1c8>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	1ad3      	subs	r3, r2, r3
 80094f8:	83fb      	strh	r3, [r7, #30]
 80094fa:	e0aa      	b.n	8009652 <mem_malloc+0x1a2>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 80094fc:	4b5e      	ldr	r3, [pc, #376]	; (8009678 <mem_malloc+0x1c8>)
 80094fe:	681a      	ldr	r2, [r3, #0]
 8009500:	8bfb      	ldrh	r3, [r7, #30]
 8009502:	4413      	add	r3, r2
 8009504:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	791b      	ldrb	r3, [r3, #4]
 800950a:	2b00      	cmp	r3, #0
 800950c:	f040 809b 	bne.w	8009646 <mem_malloc+0x196>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8009510:	697b      	ldr	r3, [r7, #20]
 8009512:	881b      	ldrh	r3, [r3, #0]
 8009514:	461a      	mov	r2, r3
 8009516:	8bfb      	ldrh	r3, [r7, #30]
 8009518:	1ad3      	subs	r3, r2, r3
 800951a:	f1a3 0208 	sub.w	r2, r3, #8
 800951e:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 8009520:	429a      	cmp	r2, r3
 8009522:	f0c0 8090 	bcc.w	8009646 <mem_malloc+0x196>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	881b      	ldrh	r3, [r3, #0]
 800952a:	461a      	mov	r2, r3
 800952c:	8bfb      	ldrh	r3, [r7, #30]
 800952e:	1ad3      	subs	r3, r2, r3
 8009530:	f1a3 0208 	sub.w	r2, r3, #8
 8009534:	88fb      	ldrh	r3, [r7, #6]
 8009536:	3314      	adds	r3, #20
 8009538:	429a      	cmp	r2, r3
 800953a:	d327      	bcc.n	800958c <mem_malloc+0xdc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800953c:	8bfa      	ldrh	r2, [r7, #30]
 800953e:	88fb      	ldrh	r3, [r7, #6]
 8009540:	4413      	add	r3, r2
 8009542:	b29b      	uxth	r3, r3
 8009544:	3308      	adds	r3, #8
 8009546:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8009548:	4b4b      	ldr	r3, [pc, #300]	; (8009678 <mem_malloc+0x1c8>)
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	8a7b      	ldrh	r3, [r7, #18]
 800954e:	4413      	add	r3, r2
 8009550:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2200      	movs	r2, #0
 8009556:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	881a      	ldrh	r2, [r3, #0]
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	8bfa      	ldrh	r2, [r7, #30]
 8009564:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	8a7a      	ldrh	r2, [r7, #18]
 800956a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	2201      	movs	r2, #1
 8009570:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	881b      	ldrh	r3, [r3, #0]
 8009576:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800957a:	d00a      	beq.n	8009592 <mem_malloc+0xe2>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800957c:	4b3e      	ldr	r3, [pc, #248]	; (8009678 <mem_malloc+0x1c8>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	68fa      	ldr	r2, [r7, #12]
 8009582:	8812      	ldrh	r2, [r2, #0]
 8009584:	4413      	add	r3, r2
 8009586:	8a7a      	ldrh	r2, [r7, #18]
 8009588:	805a      	strh	r2, [r3, #2]
 800958a:	e002      	b.n	8009592 <mem_malloc+0xe2>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	2201      	movs	r2, #1
 8009590:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8009592:	4b38      	ldr	r3, [pc, #224]	; (8009674 <mem_malloc+0x1c4>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	697a      	ldr	r2, [r7, #20]
 8009598:	429a      	cmp	r2, r3
 800959a:	d127      	bne.n	80095ec <mem_malloc+0x13c>
          struct mem *cur = lfree;
 800959c:	4b35      	ldr	r3, [pc, #212]	; (8009674 <mem_malloc+0x1c4>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80095a2:	e005      	b.n	80095b0 <mem_malloc+0x100>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 80095a4:	4b34      	ldr	r3, [pc, #208]	; (8009678 <mem_malloc+0x1c8>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	69ba      	ldr	r2, [r7, #24]
 80095aa:	8812      	ldrh	r2, [r2, #0]
 80095ac:	4413      	add	r3, r2
 80095ae:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 80095b0:	69bb      	ldr	r3, [r7, #24]
 80095b2:	791b      	ldrb	r3, [r3, #4]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d004      	beq.n	80095c2 <mem_malloc+0x112>
 80095b8:	4b30      	ldr	r3, [pc, #192]	; (800967c <mem_malloc+0x1cc>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	69ba      	ldr	r2, [r7, #24]
 80095be:	429a      	cmp	r2, r3
 80095c0:	d1f0      	bne.n	80095a4 <mem_malloc+0xf4>
          }
          lfree = cur;
 80095c2:	4a2c      	ldr	r2, [pc, #176]	; (8009674 <mem_malloc+0x1c4>)
 80095c4:	69bb      	ldr	r3, [r7, #24]
 80095c6:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80095c8:	4b2a      	ldr	r3, [pc, #168]	; (8009674 <mem_malloc+0x1c4>)
 80095ca:	681a      	ldr	r2, [r3, #0]
 80095cc:	4b2b      	ldr	r3, [pc, #172]	; (800967c <mem_malloc+0x1cc>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	429a      	cmp	r2, r3
 80095d2:	d00b      	beq.n	80095ec <mem_malloc+0x13c>
 80095d4:	4b27      	ldr	r3, [pc, #156]	; (8009674 <mem_malloc+0x1c4>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	791b      	ldrb	r3, [r3, #4]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d006      	beq.n	80095ec <mem_malloc+0x13c>
 80095de:	4b28      	ldr	r3, [pc, #160]	; (8009680 <mem_malloc+0x1d0>)
 80095e0:	f240 22cf 	movw	r2, #719	; 0x2cf
 80095e4:	4927      	ldr	r1, [pc, #156]	; (8009684 <mem_malloc+0x1d4>)
 80095e6:	4828      	ldr	r0, [pc, #160]	; (8009688 <mem_malloc+0x1d8>)
 80095e8:	f011 f898 	bl	801a71c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80095ec:	4820      	ldr	r0, [pc, #128]	; (8009670 <mem_malloc+0x1c0>)
 80095ee:	f00a fec4 	bl	801437a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80095f2:	88fa      	ldrh	r2, [r7, #6]
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	4413      	add	r3, r2
 80095f8:	3308      	adds	r3, #8
 80095fa:	4a20      	ldr	r2, [pc, #128]	; (800967c <mem_malloc+0x1cc>)
 80095fc:	6812      	ldr	r2, [r2, #0]
 80095fe:	4293      	cmp	r3, r2
 8009600:	d906      	bls.n	8009610 <mem_malloc+0x160>
 8009602:	4b1f      	ldr	r3, [pc, #124]	; (8009680 <mem_malloc+0x1d0>)
 8009604:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8009608:	4920      	ldr	r1, [pc, #128]	; (800968c <mem_malloc+0x1dc>)
 800960a:	481f      	ldr	r0, [pc, #124]	; (8009688 <mem_malloc+0x1d8>)
 800960c:	f011 f886 	bl	801a71c <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	f003 0303 	and.w	r3, r3, #3
 8009616:	2b00      	cmp	r3, #0
 8009618:	d006      	beq.n	8009628 <mem_malloc+0x178>
 800961a:	4b19      	ldr	r3, [pc, #100]	; (8009680 <mem_malloc+0x1d0>)
 800961c:	f240 22d6 	movw	r2, #726	; 0x2d6
 8009620:	491b      	ldr	r1, [pc, #108]	; (8009690 <mem_malloc+0x1e0>)
 8009622:	4819      	ldr	r0, [pc, #100]	; (8009688 <mem_malloc+0x1d8>)
 8009624:	f011 f87a 	bl	801a71c <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	f003 0303 	and.w	r3, r3, #3
 800962e:	2b00      	cmp	r3, #0
 8009630:	d006      	beq.n	8009640 <mem_malloc+0x190>
 8009632:	4b13      	ldr	r3, [pc, #76]	; (8009680 <mem_malloc+0x1d0>)
 8009634:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 8009638:	4916      	ldr	r1, [pc, #88]	; (8009694 <mem_malloc+0x1e4>)
 800963a:	4813      	ldr	r0, [pc, #76]	; (8009688 <mem_malloc+0x1d8>)
 800963c:	f011 f86e 	bl	801a71c <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	3308      	adds	r3, #8
 8009644:	e010      	b.n	8009668 <mem_malloc+0x1b8>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8009646:	4b0c      	ldr	r3, [pc, #48]	; (8009678 <mem_malloc+0x1c8>)
 8009648:	681a      	ldr	r2, [r3, #0]
 800964a:	8bfb      	ldrh	r3, [r7, #30]
 800964c:	4413      	add	r3, r2
 800964e:	881b      	ldrh	r3, [r3, #0]
 8009650:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8009652:	8bfa      	ldrh	r2, [r7, #30]
 8009654:	88fb      	ldrh	r3, [r7, #6]
 8009656:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800965a:	429a      	cmp	r2, r3
 800965c:	f4ff af4e 	bcc.w	80094fc <mem_malloc+0x4c>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8009660:	4803      	ldr	r0, [pc, #12]	; (8009670 <mem_malloc+0x1c0>)
 8009662:	f00a fe8a 	bl	801437a <sys_mutex_unlock>
  return NULL;
 8009666:	2300      	movs	r3, #0
}
 8009668:	4618      	mov	r0, r3
 800966a:	3720      	adds	r7, #32
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}
 8009670:	20004bc0 	.word	0x20004bc0
 8009674:	20004bbc 	.word	0x20004bbc
 8009678:	20004bb4 	.word	0x20004bb4
 800967c:	20004bb8 	.word	0x20004bb8
 8009680:	0801e2b8 	.word	0x0801e2b8
 8009684:	0801e430 	.word	0x0801e430
 8009688:	0801e300 	.word	0x0801e300
 800968c:	0801e44c 	.word	0x0801e44c
 8009690:	0801e47c 	.word	0x0801e47c
 8009694:	0801e4ac 	.word	0x0801e4ac

08009698 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8009698:	b480      	push	{r7}
 800969a:	b085      	sub	sp, #20
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	689b      	ldr	r3, [r3, #8]
 80096a4:	2200      	movs	r2, #0
 80096a6:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	685b      	ldr	r3, [r3, #4]
 80096ac:	3303      	adds	r3, #3
 80096ae:	f023 0303 	bic.w	r3, r3, #3
 80096b2:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80096b4:	2300      	movs	r3, #0
 80096b6:	60fb      	str	r3, [r7, #12]
 80096b8:	e011      	b.n	80096de <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	689b      	ldr	r3, [r3, #8]
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	689b      	ldr	r3, [r3, #8]
 80096c8:	68ba      	ldr	r2, [r7, #8]
 80096ca:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	881b      	ldrh	r3, [r3, #0]
 80096d0:	461a      	mov	r2, r3
 80096d2:	68bb      	ldr	r3, [r7, #8]
 80096d4:	4413      	add	r3, r2
 80096d6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	3301      	adds	r3, #1
 80096dc:	60fb      	str	r3, [r7, #12]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	885b      	ldrh	r3, [r3, #2]
 80096e2:	461a      	mov	r2, r3
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	4293      	cmp	r3, r2
 80096e8:	dbe7      	blt.n	80096ba <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80096ea:	bf00      	nop
 80096ec:	3714      	adds	r7, #20
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bc80      	pop	{r7}
 80096f2:	4770      	bx	lr

080096f4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b082      	sub	sp, #8
 80096f8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80096fa:	2300      	movs	r3, #0
 80096fc:	80fb      	strh	r3, [r7, #6]
 80096fe:	e009      	b.n	8009714 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8009700:	88fb      	ldrh	r3, [r7, #6]
 8009702:	4a08      	ldr	r2, [pc, #32]	; (8009724 <memp_init+0x30>)
 8009704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009708:	4618      	mov	r0, r3
 800970a:	f7ff ffc5 	bl	8009698 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800970e:	88fb      	ldrh	r3, [r7, #6]
 8009710:	3301      	adds	r3, #1
 8009712:	80fb      	strh	r3, [r7, #6]
 8009714:	88fb      	ldrh	r3, [r7, #6]
 8009716:	2b0d      	cmp	r3, #13
 8009718:	d9f2      	bls.n	8009700 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800971a:	bf00      	nop
 800971c:	3708      	adds	r7, #8
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
 8009722:	bf00      	nop
 8009724:	08021c88 	.word	0x08021c88

08009728 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b084      	sub	sp, #16
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8009730:	f00a fe56 	bl	80143e0 <sys_arch_protect>
 8009734:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	689b      	ldr	r3, [r3, #8]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d015      	beq.n	8009770 <do_memp_malloc_pool+0x48>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	689b      	ldr	r3, [r3, #8]
 8009748:	68ba      	ldr	r2, [r7, #8]
 800974a:	6812      	ldr	r2, [r2, #0]
 800974c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	f003 0303 	and.w	r3, r3, #3
 8009754:	2b00      	cmp	r3, #0
 8009756:	d006      	beq.n	8009766 <do_memp_malloc_pool+0x3e>
 8009758:	4b09      	ldr	r3, [pc, #36]	; (8009780 <do_memp_malloc_pool+0x58>)
 800975a:	f240 1249 	movw	r2, #329	; 0x149
 800975e:	4909      	ldr	r1, [pc, #36]	; (8009784 <do_memp_malloc_pool+0x5c>)
 8009760:	4809      	ldr	r0, [pc, #36]	; (8009788 <do_memp_malloc_pool+0x60>)
 8009762:	f010 ffdb 	bl	801a71c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8009766:	68f8      	ldr	r0, [r7, #12]
 8009768:	f00a fe48 	bl	80143fc <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	e003      	b.n	8009778 <do_memp_malloc_pool+0x50>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 8009770:	68f8      	ldr	r0, [r7, #12]
 8009772:	f00a fe43 	bl	80143fc <sys_arch_unprotect>
  return NULL;
 8009776:	2300      	movs	r3, #0
}
 8009778:	4618      	mov	r0, r3
 800977a:	3710      	adds	r7, #16
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}
 8009780:	0801e4d0 	.word	0x0801e4d0
 8009784:	0801e500 	.word	0x0801e500
 8009788:	0801e524 	.word	0x0801e524

0800978c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b084      	sub	sp, #16
 8009790:	af00      	add	r7, sp, #0
 8009792:	4603      	mov	r3, r0
 8009794:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8009796:	79fb      	ldrb	r3, [r7, #7]
 8009798:	2b0d      	cmp	r3, #13
 800979a:	d908      	bls.n	80097ae <memp_malloc+0x22>
 800979c:	4b0a      	ldr	r3, [pc, #40]	; (80097c8 <memp_malloc+0x3c>)
 800979e:	f240 1287 	movw	r2, #391	; 0x187
 80097a2:	490a      	ldr	r1, [pc, #40]	; (80097cc <memp_malloc+0x40>)
 80097a4:	480a      	ldr	r0, [pc, #40]	; (80097d0 <memp_malloc+0x44>)
 80097a6:	f010 ffb9 	bl	801a71c <iprintf>
 80097aa:	2300      	movs	r3, #0
 80097ac:	e008      	b.n	80097c0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80097ae:	79fb      	ldrb	r3, [r7, #7]
 80097b0:	4a08      	ldr	r2, [pc, #32]	; (80097d4 <memp_malloc+0x48>)
 80097b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097b6:	4618      	mov	r0, r3
 80097b8:	f7ff ffb6 	bl	8009728 <do_memp_malloc_pool>
 80097bc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80097be:	68fb      	ldr	r3, [r7, #12]
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3710      	adds	r7, #16
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}
 80097c8:	0801e4d0 	.word	0x0801e4d0
 80097cc:	0801e560 	.word	0x0801e560
 80097d0:	0801e524 	.word	0x0801e524
 80097d4:	08021c88 	.word	0x08021c88

080097d8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b084      	sub	sp, #16
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	f003 0303 	and.w	r3, r3, #3
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d006      	beq.n	80097fa <do_memp_free_pool+0x22>
 80097ec:	4b0d      	ldr	r3, [pc, #52]	; (8009824 <do_memp_free_pool+0x4c>)
 80097ee:	f240 129d 	movw	r2, #413	; 0x19d
 80097f2:	490d      	ldr	r1, [pc, #52]	; (8009828 <do_memp_free_pool+0x50>)
 80097f4:	480d      	ldr	r0, [pc, #52]	; (800982c <do_memp_free_pool+0x54>)
 80097f6:	f010 ff91 	bl	801a71c <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80097fe:	f00a fdef 	bl	80143e0 <sys_arch_protect>
 8009802:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	689b      	ldr	r3, [r3, #8]
 8009808:	681a      	ldr	r2, [r3, #0]
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	689b      	ldr	r3, [r3, #8]
 8009812:	68fa      	ldr	r2, [r7, #12]
 8009814:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8009816:	68b8      	ldr	r0, [r7, #8]
 8009818:	f00a fdf0 	bl	80143fc <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800981c:	bf00      	nop
 800981e:	3710      	adds	r7, #16
 8009820:	46bd      	mov	sp, r7
 8009822:	bd80      	pop	{r7, pc}
 8009824:	0801e4d0 	.word	0x0801e4d0
 8009828:	0801e580 	.word	0x0801e580
 800982c:	0801e524 	.word	0x0801e524

08009830 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b082      	sub	sp, #8
 8009834:	af00      	add	r7, sp, #0
 8009836:	4603      	mov	r3, r0
 8009838:	6039      	str	r1, [r7, #0]
 800983a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800983c:	79fb      	ldrb	r3, [r7, #7]
 800983e:	2b0d      	cmp	r3, #13
 8009840:	d907      	bls.n	8009852 <memp_free+0x22>
 8009842:	4b0c      	ldr	r3, [pc, #48]	; (8009874 <memp_free+0x44>)
 8009844:	f240 12db 	movw	r2, #475	; 0x1db
 8009848:	490b      	ldr	r1, [pc, #44]	; (8009878 <memp_free+0x48>)
 800984a:	480c      	ldr	r0, [pc, #48]	; (800987c <memp_free+0x4c>)
 800984c:	f010 ff66 	bl	801a71c <iprintf>
 8009850:	e00c      	b.n	800986c <memp_free+0x3c>

  if (mem == NULL) {
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d008      	beq.n	800986a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8009858:	79fb      	ldrb	r3, [r7, #7]
 800985a:	4a09      	ldr	r2, [pc, #36]	; (8009880 <memp_free+0x50>)
 800985c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009860:	6839      	ldr	r1, [r7, #0]
 8009862:	4618      	mov	r0, r3
 8009864:	f7ff ffb8 	bl	80097d8 <do_memp_free_pool>
 8009868:	e000      	b.n	800986c <memp_free+0x3c>
    return;
 800986a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800986c:	3708      	adds	r7, #8
 800986e:	46bd      	mov	sp, r7
 8009870:	bd80      	pop	{r7, pc}
 8009872:	bf00      	nop
 8009874:	0801e4d0 	.word	0x0801e4d0
 8009878:	0801e5a0 	.word	0x0801e5a0
 800987c:	0801e524 	.word	0x0801e524
 8009880:	08021c88 	.word	0x08021c88

08009884 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8009884:	b480      	push	{r7}
 8009886:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8009888:	bf00      	nop
 800988a:	46bd      	mov	sp, r7
 800988c:	bc80      	pop	{r7}
 800988e:	4770      	bx	lr

08009890 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
 8009896:	60f8      	str	r0, [r7, #12]
 8009898:	60b9      	str	r1, [r7, #8]
 800989a:	607a      	str	r2, [r7, #4]
 800989c:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 800989e:	69fb      	ldr	r3, [r7, #28]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d105      	bne.n	80098b0 <netif_add+0x20>
 80098a4:	4b24      	ldr	r3, [pc, #144]	; (8009938 <netif_add+0xa8>)
 80098a6:	22fb      	movs	r2, #251	; 0xfb
 80098a8:	4924      	ldr	r1, [pc, #144]	; (800993c <netif_add+0xac>)
 80098aa:	4825      	ldr	r0, [pc, #148]	; (8009940 <netif_add+0xb0>)
 80098ac:	f010 ff36 	bl	801a71c <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	2200      	movs	r2, #0
 80098b4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2200      	movs	r2, #0
 80098ba:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	2200      	movs	r2, #0
 80098c0:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2200      	movs	r2, #0
 80098c6:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	3324      	adds	r3, #36	; 0x24
 80098ce:	2204      	movs	r2, #4
 80098d0:	2100      	movs	r1, #0
 80098d2:	4618      	mov	r0, r3
 80098d4:	f010 f8ea 	bl	8019aac <memset>
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	2203      	movs	r2, #3
 80098dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	2200      	movs	r2, #0
 80098e4:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	69ba      	ldr	r2, [r7, #24]
 80098ea:	621a      	str	r2, [r3, #32]
  netif->num = netif_num++;
 80098ec:	4b15      	ldr	r3, [pc, #84]	; (8009944 <netif_add+0xb4>)
 80098ee:	781b      	ldrb	r3, [r3, #0]
 80098f0:	1c5a      	adds	r2, r3, #1
 80098f2:	b2d1      	uxtb	r1, r2
 80098f4:	4a13      	ldr	r2, [pc, #76]	; (8009944 <netif_add+0xb4>)
 80098f6:	7011      	strb	r1, [r2, #0]
 80098f8:	68fa      	ldr	r2, [r7, #12]
 80098fa:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36
  netif->input = input;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	6a3a      	ldr	r2, [r7, #32]
 8009902:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	687a      	ldr	r2, [r7, #4]
 8009908:	68b9      	ldr	r1, [r7, #8]
 800990a:	68f8      	ldr	r0, [r7, #12]
 800990c:	f000 f81e 	bl	800994c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8009910:	69fb      	ldr	r3, [r7, #28]
 8009912:	68f8      	ldr	r0, [r7, #12]
 8009914:	4798      	blx	r3
 8009916:	4603      	mov	r3, r0
 8009918:	2b00      	cmp	r3, #0
 800991a:	d001      	beq.n	8009920 <netif_add+0x90>
    return NULL;
 800991c:	2300      	movs	r3, #0
 800991e:	e007      	b.n	8009930 <netif_add+0xa0>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8009920:	4b09      	ldr	r3, [pc, #36]	; (8009948 <netif_add+0xb8>)
 8009922:	681a      	ldr	r2, [r3, #0]
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8009928:	4a07      	ldr	r2, [pc, #28]	; (8009948 <netif_add+0xb8>)
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 800992e:	68fb      	ldr	r3, [r7, #12]
}
 8009930:	4618      	mov	r0, r3
 8009932:	3710      	adds	r7, #16
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}
 8009938:	0801e5bc 	.word	0x0801e5bc
 800993c:	0801e5f0 	.word	0x0801e5f0
 8009940:	0801e608 	.word	0x0801e608
 8009944:	20004bfc 	.word	0x20004bfc
 8009948:	2000b7ec 	.word	0x2000b7ec

0800994c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b084      	sub	sp, #16
 8009950:	af00      	add	r7, sp, #0
 8009952:	60f8      	str	r0, [r7, #12]
 8009954:	60b9      	str	r1, [r7, #8]
 8009956:	607a      	str	r2, [r7, #4]
 8009958:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d003      	beq.n	8009968 <netif_set_addr+0x1c>
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d10c      	bne.n	8009982 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 8009968:	68b9      	ldr	r1, [r7, #8]
 800996a:	68f8      	ldr	r0, [r7, #12]
 800996c:	f000 f81a 	bl	80099a4 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8009970:	6879      	ldr	r1, [r7, #4]
 8009972:	68f8      	ldr	r0, [r7, #12]
 8009974:	f000 f861 	bl	8009a3a <netif_set_netmask>
    netif_set_gw(netif, gw);
 8009978:	6839      	ldr	r1, [r7, #0]
 800997a:	68f8      	ldr	r0, [r7, #12]
 800997c:	f000 f84a 	bl	8009a14 <netif_set_gw>
 8009980:	e00b      	b.n	800999a <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 8009982:	6879      	ldr	r1, [r7, #4]
 8009984:	68f8      	ldr	r0, [r7, #12]
 8009986:	f000 f858 	bl	8009a3a <netif_set_netmask>
    netif_set_gw(netif, gw);
 800998a:	6839      	ldr	r1, [r7, #0]
 800998c:	68f8      	ldr	r0, [r7, #12]
 800998e:	f000 f841 	bl	8009a14 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 8009992:	68b9      	ldr	r1, [r7, #8]
 8009994:	68f8      	ldr	r0, [r7, #12]
 8009996:	f000 f805 	bl	80099a4 <netif_set_ipaddr>
  }
}
 800999a:	bf00      	nop
 800999c:	3710      	adds	r7, #16
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}
	...

080099a4 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b084      	sub	sp, #16
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
 80099ac:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d003      	beq.n	80099bc <netif_set_ipaddr+0x18>
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	60fb      	str	r3, [r7, #12]
 80099ba:	e002      	b.n	80099c2 <netif_set_ipaddr+0x1e>
 80099bc:	4b14      	ldr	r3, [pc, #80]	; (8009a10 <netif_set_ipaddr+0x6c>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 80099c2:	68fa      	ldr	r2, [r7, #12]
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	3304      	adds	r3, #4
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	429a      	cmp	r2, r3
 80099cc:	d01c      	beq.n	8009a08 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	3304      	adds	r3, #4
 80099d2:	f107 020c 	add.w	r2, r7, #12
 80099d6:	4611      	mov	r1, r2
 80099d8:	4618      	mov	r0, r3
 80099da:	f002 fa35 	bl	800be48 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	3304      	adds	r3, #4
 80099e2:	f107 020c 	add.w	r2, r7, #12
 80099e6:	4611      	mov	r1, r2
 80099e8:	4618      	mov	r0, r3
 80099ea:	f006 f91b 	bl	800fc24 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d002      	beq.n	80099fa <netif_set_ipaddr+0x56>
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	e000      	b.n	80099fc <netif_set_ipaddr+0x58>
 80099fa:	2300      	movs	r3, #0
 80099fc:	687a      	ldr	r2, [r7, #4]
 80099fe:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8009a00:	2101      	movs	r1, #1
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 f85d 	bl	8009ac2 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 8009a08:	bf00      	nop
 8009a0a:	3710      	adds	r7, #16
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}
 8009a10:	08021d18 	.word	0x08021d18

08009a14 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b083      	sub	sp, #12
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d002      	beq.n	8009a2a <netif_set_gw+0x16>
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	e000      	b.n	8009a2c <netif_set_gw+0x18>
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	687a      	ldr	r2, [r7, #4]
 8009a2e:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 8009a30:	bf00      	nop
 8009a32:	370c      	adds	r7, #12
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bc80      	pop	{r7}
 8009a38:	4770      	bx	lr

08009a3a <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 8009a3a:	b480      	push	{r7}
 8009a3c:	b083      	sub	sp, #12
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	6078      	str	r0, [r7, #4]
 8009a42:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d002      	beq.n	8009a50 <netif_set_netmask+0x16>
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	e000      	b.n	8009a52 <netif_set_netmask+0x18>
 8009a50:	2300      	movs	r3, #0
 8009a52:	687a      	ldr	r2, [r7, #4]
 8009a54:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 8009a56:	bf00      	nop
 8009a58:	370c      	adds	r7, #12
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bc80      	pop	{r7}
 8009a5e:	4770      	bx	lr

08009a60 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b083      	sub	sp, #12
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8009a68:	4a03      	ldr	r2, [pc, #12]	; (8009a78 <netif_set_default+0x18>)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8009a6e:	bf00      	nop
 8009a70:	370c      	adds	r7, #12
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bc80      	pop	{r7}
 8009a76:	4770      	bx	lr
 8009a78:	2000b7f0 	.word	0x2000b7f0

08009a7c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b082      	sub	sp, #8
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8009a8a:	f003 0301 	and.w	r3, r3, #1
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d113      	bne.n	8009aba <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8009a98:	f043 0301 	orr.w	r3, r3, #1
 8009a9c:	b2da      	uxtb	r2, r3
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8009aaa:	f003 0304 	and.w	r3, r3, #4
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d003      	beq.n	8009aba <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8009ab2:	2103      	movs	r1, #3
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f000 f804 	bl	8009ac2 <netif_issue_reports>
    }
  }
}
 8009aba:	bf00      	nop
 8009abc:	3708      	adds	r7, #8
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}

08009ac2 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 8009ac2:	b580      	push	{r7, lr}
 8009ac4:	b082      	sub	sp, #8
 8009ac6:	af00      	add	r7, sp, #0
 8009ac8:	6078      	str	r0, [r7, #4]
 8009aca:	460b      	mov	r3, r1
 8009acc:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009ace:	78fb      	ldrb	r3, [r7, #3]
 8009ad0:	f003 0301 	and.w	r3, r3, #1
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d011      	beq.n	8009afc <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	3304      	adds	r3, #4
 8009adc:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d00c      	beq.n	8009afc <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8009ae8:	f003 0308 	and.w	r3, r3, #8
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d005      	beq.n	8009afc <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	3304      	adds	r3, #4
 8009af4:	4619      	mov	r1, r3
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f008 ff06 	bl	8012908 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 8009afc:	bf00      	nop
 8009afe:	3708      	adds	r7, #8
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}

08009b04 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b082      	sub	sp, #8
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8009b12:	f003 0301 	and.w	r3, r3, #1
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d012      	beq.n	8009b40 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8009b20:	f023 0301 	bic.w	r3, r3, #1
 8009b24:	b2da      	uxtb	r2, r3
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8009b32:	f003 0308 	and.w	r3, r3, #8
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d002      	beq.n	8009b40 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f008 faa6 	bl	801208c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8009b40:	bf00      	nop
 8009b42:	3708      	adds	r7, #8
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}

08009b48 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b082      	sub	sp, #8
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8009b56:	f003 0304 	and.w	r3, r3, #4
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d11e      	bne.n	8009b9c <netif_set_link_up+0x54>
    netif->flags |= NETIF_FLAG_LINK_UP;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8009b64:	f043 0304 	orr.w	r3, r3, #4
 8009b68:	b2da      	uxtb	r2, r3
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

#if LWIP_DHCP
    dhcp_network_changed(netif);
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f006 fc55 	bl	8010420 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8009b7c:	f003 0301 	and.w	r3, r3, #1
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d003      	beq.n	8009b8c <netif_set_link_up+0x44>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8009b84:	2103      	movs	r1, #3
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f7ff ff9b 	bl	8009ac2 <netif_issue_reports>
    }
    NETIF_LINK_CALLBACK(netif);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	69db      	ldr	r3, [r3, #28]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d003      	beq.n	8009b9c <netif_set_link_up+0x54>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	69db      	ldr	r3, [r3, #28]
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	4798      	blx	r3
  }
}
 8009b9c:	bf00      	nop
 8009b9e:	3708      	adds	r7, #8
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif )
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b082      	sub	sp, #8
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8009bb2:	f003 0304 	and.w	r3, r3, #4
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d010      	beq.n	8009bdc <netif_set_link_down+0x38>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8009bc0:	f023 0304 	bic.w	r3, r3, #4
 8009bc4:	b2da      	uxtb	r2, r3
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    NETIF_LINK_CALLBACK(netif);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	69db      	ldr	r3, [r3, #28]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d003      	beq.n	8009bdc <netif_set_link_down+0x38>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	69db      	ldr	r3, [r3, #28]
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	4798      	blx	r3
  }
}
 8009bdc:	bf00      	nop
 8009bde:	3708      	adds	r7, #8
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}

08009be4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b083      	sub	sp, #12
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	6039      	str	r1, [r7, #0]
  if (netif) {
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d002      	beq.n	8009bfa <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	683a      	ldr	r2, [r7, #0]
 8009bf8:	61da      	str	r2, [r3, #28]
  }
}
 8009bfa:	bf00      	nop
 8009bfc:	370c      	adds	r7, #12
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bc80      	pop	{r7}
 8009c02:	4770      	bx	lr

08009c04 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b082      	sub	sp, #8
 8009c08:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8009c0a:	f00a fbe9 	bl	80143e0 <sys_arch_protect>
 8009c0e:	6038      	str	r0, [r7, #0]
 8009c10:	4b0f      	ldr	r3, [pc, #60]	; (8009c50 <pbuf_free_ooseq+0x4c>)
 8009c12:	2200      	movs	r2, #0
 8009c14:	701a      	strb	r2, [r3, #0]
 8009c16:	6838      	ldr	r0, [r7, #0]
 8009c18:	f00a fbf0 	bl	80143fc <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009c1c:	4b0d      	ldr	r3, [pc, #52]	; (8009c54 <pbuf_free_ooseq+0x50>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	607b      	str	r3, [r7, #4]
 8009c22:	e00f      	b.n	8009c44 <pbuf_free_ooseq+0x40>
    if (NULL != pcb->ooseq) {
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d008      	beq.n	8009c3e <pbuf_free_ooseq+0x3a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c30:	4618      	mov	r0, r3
 8009c32:	f001 fe46 	bl	800b8c2 <tcp_segs_free>
      pcb->ooseq = NULL;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 8009c3c:	e005      	b.n	8009c4a <pbuf_free_ooseq+0x46>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	68db      	ldr	r3, [r3, #12]
 8009c42:	607b      	str	r3, [r7, #4]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d1ec      	bne.n	8009c24 <pbuf_free_ooseq+0x20>
    }
  }
}
 8009c4a:	3708      	adds	r7, #8
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}
 8009c50:	2000b7f4 	.word	0x2000b7f4
 8009c54:	2000b7fc 	.word	0x2000b7fc

08009c58 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b082      	sub	sp, #8
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8009c60:	f7ff ffd0 	bl	8009c04 <pbuf_free_ooseq>
}
 8009c64:	bf00      	nop
 8009c66:	3708      	adds	r7, #8
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}

08009c6c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b082      	sub	sp, #8
 8009c70:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8009c72:	f00a fbb5 	bl	80143e0 <sys_arch_protect>
 8009c76:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8009c78:	4b10      	ldr	r3, [pc, #64]	; (8009cbc <pbuf_pool_is_empty+0x50>)
 8009c7a:	781b      	ldrb	r3, [r3, #0]
 8009c7c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8009c7e:	4b0f      	ldr	r3, [pc, #60]	; (8009cbc <pbuf_pool_is_empty+0x50>)
 8009c80:	2201      	movs	r2, #1
 8009c82:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8009c84:	6878      	ldr	r0, [r7, #4]
 8009c86:	f00a fbb9 	bl	80143fc <sys_arch_unprotect>

  if (!queued) {
 8009c8a:	78fb      	ldrb	r3, [r7, #3]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d110      	bne.n	8009cb2 <pbuf_pool_is_empty+0x46>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8009c90:	2200      	movs	r2, #0
 8009c92:	2100      	movs	r1, #0
 8009c94:	480a      	ldr	r0, [pc, #40]	; (8009cc0 <pbuf_pool_is_empty+0x54>)
 8009c96:	f7fe fe35 	bl	8008904 <tcpip_callback_with_block>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d008      	beq.n	8009cb2 <pbuf_pool_is_empty+0x46>
 8009ca0:	f00a fb9e 	bl	80143e0 <sys_arch_protect>
 8009ca4:	6078      	str	r0, [r7, #4]
 8009ca6:	4b05      	ldr	r3, [pc, #20]	; (8009cbc <pbuf_pool_is_empty+0x50>)
 8009ca8:	2200      	movs	r2, #0
 8009caa:	701a      	strb	r2, [r3, #0]
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f00a fba5 	bl	80143fc <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8009cb2:	bf00      	nop
 8009cb4:	3708      	adds	r7, #8
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}
 8009cba:	bf00      	nop
 8009cbc:	2000b7f4 	.word	0x2000b7f4
 8009cc0:	08009c59 	.word	0x08009c59

08009cc4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b088      	sub	sp, #32
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	4603      	mov	r3, r0
 8009ccc:	71fb      	strb	r3, [r7, #7]
 8009cce:	460b      	mov	r3, r1
 8009cd0:	80bb      	strh	r3, [r7, #4]
 8009cd2:	4613      	mov	r3, r2
 8009cd4:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 8009cd6:	79fb      	ldrb	r3, [r7, #7]
 8009cd8:	2b04      	cmp	r3, #4
 8009cda:	d81c      	bhi.n	8009d16 <pbuf_alloc+0x52>
 8009cdc:	a201      	add	r2, pc, #4	; (adr r2, 8009ce4 <pbuf_alloc+0x20>)
 8009cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ce2:	bf00      	nop
 8009ce4:	08009cf9 	.word	0x08009cf9
 8009ce8:	08009cff 	.word	0x08009cff
 8009cec:	08009d05 	.word	0x08009d05
 8009cf0:	08009d0b 	.word	0x08009d0b
 8009cf4:	08009d11 	.word	0x08009d11
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8009cf8:	2336      	movs	r3, #54	; 0x36
 8009cfa:	82fb      	strh	r3, [r7, #22]
    break;
 8009cfc:	e014      	b.n	8009d28 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8009cfe:	2322      	movs	r3, #34	; 0x22
 8009d00:	82fb      	strh	r3, [r7, #22]
    break;
 8009d02:	e011      	b.n	8009d28 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8009d04:	230e      	movs	r3, #14
 8009d06:	82fb      	strh	r3, [r7, #22]
    break;
 8009d08:	e00e      	b.n	8009d28 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	82fb      	strh	r3, [r7, #22]
    break;
 8009d0e:	e00b      	b.n	8009d28 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 8009d10:	2300      	movs	r3, #0
 8009d12:	82fb      	strh	r3, [r7, #22]
    break;
 8009d14:	e008      	b.n	8009d28 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8009d16:	4ba5      	ldr	r3, [pc, #660]	; (8009fac <pbuf_alloc+0x2e8>)
 8009d18:	f44f 728b 	mov.w	r2, #278	; 0x116
 8009d1c:	49a4      	ldr	r1, [pc, #656]	; (8009fb0 <pbuf_alloc+0x2ec>)
 8009d1e:	48a5      	ldr	r0, [pc, #660]	; (8009fb4 <pbuf_alloc+0x2f0>)
 8009d20:	f010 fcfc 	bl	801a71c <iprintf>
    return NULL;
 8009d24:	2300      	movs	r3, #0
 8009d26:	e15d      	b.n	8009fe4 <pbuf_alloc+0x320>
  }

  switch (type) {
 8009d28:	79bb      	ldrb	r3, [r7, #6]
 8009d2a:	2b03      	cmp	r3, #3
 8009d2c:	f200 8134 	bhi.w	8009f98 <pbuf_alloc+0x2d4>
 8009d30:	a201      	add	r2, pc, #4	; (adr r2, 8009d38 <pbuf_alloc+0x74>)
 8009d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d36:	bf00      	nop
 8009d38:	08009ed9 	.word	0x08009ed9
 8009d3c:	08009f65 	.word	0x08009f65
 8009d40:	08009f65 	.word	0x08009f65
 8009d44:	08009d49 	.word	0x08009d49
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8009d48:	200d      	movs	r0, #13
 8009d4a:	f7ff fd1f 	bl	800978c <memp_malloc>
 8009d4e:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 8009d50:	69fb      	ldr	r3, [r7, #28]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d103      	bne.n	8009d5e <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 8009d56:	f7ff ff89 	bl	8009c6c <pbuf_pool_is_empty>
      return NULL;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	e142      	b.n	8009fe4 <pbuf_alloc+0x320>
    }
    p->type = type;
 8009d5e:	69fb      	ldr	r3, [r7, #28]
 8009d60:	79ba      	ldrb	r2, [r7, #6]
 8009d62:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 8009d64:	69fb      	ldr	r3, [r7, #28]
 8009d66:	2200      	movs	r2, #0
 8009d68:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8009d6a:	8afb      	ldrh	r3, [r7, #22]
 8009d6c:	3310      	adds	r3, #16
 8009d6e:	69fa      	ldr	r2, [r7, #28]
 8009d70:	4413      	add	r3, r2
 8009d72:	3303      	adds	r3, #3
 8009d74:	f023 0303 	bic.w	r3, r3, #3
 8009d78:	461a      	mov	r2, r3
 8009d7a:	69fb      	ldr	r3, [r7, #28]
 8009d7c:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 8009d7e:	69fb      	ldr	r3, [r7, #28]
 8009d80:	685b      	ldr	r3, [r3, #4]
 8009d82:	f003 0303 	and.w	r3, r3, #3
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d006      	beq.n	8009d98 <pbuf_alloc+0xd4>
 8009d8a:	4b88      	ldr	r3, [pc, #544]	; (8009fac <pbuf_alloc+0x2e8>)
 8009d8c:	f240 1229 	movw	r2, #297	; 0x129
 8009d90:	4989      	ldr	r1, [pc, #548]	; (8009fb8 <pbuf_alloc+0x2f4>)
 8009d92:	4888      	ldr	r0, [pc, #544]	; (8009fb4 <pbuf_alloc+0x2f0>)
 8009d94:	f010 fcc2 	bl	801a71c <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 8009d98:	69fb      	ldr	r3, [r7, #28]
 8009d9a:	88ba      	ldrh	r2, [r7, #4]
 8009d9c:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8009d9e:	8afb      	ldrh	r3, [r7, #22]
 8009da0:	3303      	adds	r3, #3
 8009da2:	f023 0303 	bic.w	r3, r3, #3
 8009da6:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 8009daa:	88bb      	ldrh	r3, [r7, #4]
 8009dac:	4293      	cmp	r3, r2
 8009dae:	bf28      	it	cs
 8009db0:	4613      	movcs	r3, r2
 8009db2:	b29a      	uxth	r2, r3
 8009db4:	69fb      	ldr	r3, [r7, #28]
 8009db6:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8009db8:	69fb      	ldr	r3, [r7, #28]
 8009dba:	685b      	ldr	r3, [r3, #4]
 8009dbc:	69fa      	ldr	r2, [r7, #28]
 8009dbe:	8952      	ldrh	r2, [r2, #10]
 8009dc0:	441a      	add	r2, r3
 8009dc2:	69fb      	ldr	r3, [r7, #28]
 8009dc4:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8009dc8:	429a      	cmp	r2, r3
 8009dca:	d906      	bls.n	8009dda <pbuf_alloc+0x116>
 8009dcc:	4b77      	ldr	r3, [pc, #476]	; (8009fac <pbuf_alloc+0x2e8>)
 8009dce:	f44f 7298 	mov.w	r2, #304	; 0x130
 8009dd2:	497a      	ldr	r1, [pc, #488]	; (8009fbc <pbuf_alloc+0x2f8>)
 8009dd4:	4877      	ldr	r0, [pc, #476]	; (8009fb4 <pbuf_alloc+0x2f0>)
 8009dd6:	f010 fca1 	bl	801a71c <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8009dda:	8afb      	ldrh	r3, [r7, #22]
 8009ddc:	3303      	adds	r3, #3
 8009dde:	f023 0303 	bic.w	r3, r3, #3
 8009de2:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8009de6:	d106      	bne.n	8009df6 <pbuf_alloc+0x132>
 8009de8:	4b70      	ldr	r3, [pc, #448]	; (8009fac <pbuf_alloc+0x2e8>)
 8009dea:	f44f 7299 	mov.w	r2, #306	; 0x132
 8009dee:	4974      	ldr	r1, [pc, #464]	; (8009fc0 <pbuf_alloc+0x2fc>)
 8009df0:	4870      	ldr	r0, [pc, #448]	; (8009fb4 <pbuf_alloc+0x2f0>)
 8009df2:	f010 fc93 	bl	801a71c <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 8009df6:	69fb      	ldr	r3, [r7, #28]
 8009df8:	2201      	movs	r2, #1
 8009dfa:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 8009dfc:	69fb      	ldr	r3, [r7, #28]
 8009dfe:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 8009e00:	88bb      	ldrh	r3, [r7, #4]
 8009e02:	69fa      	ldr	r2, [r7, #28]
 8009e04:	8952      	ldrh	r2, [r2, #10]
 8009e06:	1a9b      	subs	r3, r3, r2
 8009e08:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 8009e0a:	e061      	b.n	8009ed0 <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8009e0c:	200d      	movs	r0, #13
 8009e0e:	f7ff fcbd 	bl	800978c <memp_malloc>
 8009e12:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d106      	bne.n	8009e28 <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 8009e1a:	f7ff ff27 	bl	8009c6c <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 8009e1e:	69f8      	ldr	r0, [r7, #28]
 8009e20:	f000 fac2 	bl	800a3a8 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 8009e24:	2300      	movs	r3, #0
 8009e26:	e0dd      	b.n	8009fe4 <pbuf_alloc+0x320>
      }
      q->type = type;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	79ba      	ldrb	r2, [r7, #6]
 8009e2c:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2200      	movs	r2, #0
 8009e32:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	2200      	movs	r2, #0
 8009e38:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 8009e3a:	69bb      	ldr	r3, [r7, #24]
 8009e3c:	68fa      	ldr	r2, [r7, #12]
 8009e3e:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009e46:	4293      	cmp	r3, r2
 8009e48:	dd06      	ble.n	8009e58 <pbuf_alloc+0x194>
 8009e4a:	4b58      	ldr	r3, [pc, #352]	; (8009fac <pbuf_alloc+0x2e8>)
 8009e4c:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8009e50:	495c      	ldr	r1, [pc, #368]	; (8009fc4 <pbuf_alloc+0x300>)
 8009e52:	4858      	ldr	r0, [pc, #352]	; (8009fb4 <pbuf_alloc+0x2f0>)
 8009e54:	f010 fc62 	bl	801a71c <iprintf>
      q->tot_len = (u16_t)rem_len;
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	b29a      	uxth	r2, r3
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	b29b      	uxth	r3, r3
 8009e64:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8009e68:	bf28      	it	cs
 8009e6a:	f44f 7314 	movcs.w	r3, #592	; 0x250
 8009e6e:	b29a      	uxth	r2, r3
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f103 0210 	add.w	r2, r3, #16
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	685b      	ldr	r3, [r3, #4]
 8009e82:	f003 0303 	and.w	r3, r3, #3
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d006      	beq.n	8009e98 <pbuf_alloc+0x1d4>
 8009e8a:	4b48      	ldr	r3, [pc, #288]	; (8009fac <pbuf_alloc+0x2e8>)
 8009e8c:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8009e90:	494d      	ldr	r1, [pc, #308]	; (8009fc8 <pbuf_alloc+0x304>)
 8009e92:	4848      	ldr	r0, [pc, #288]	; (8009fb4 <pbuf_alloc+0x2f0>)
 8009e94:	f010 fc42 	bl	801a71c <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8009e98:	69fb      	ldr	r3, [r7, #28]
 8009e9a:	685b      	ldr	r3, [r3, #4]
 8009e9c:	69fa      	ldr	r2, [r7, #28]
 8009e9e:	8952      	ldrh	r2, [r2, #10]
 8009ea0:	441a      	add	r2, r3
 8009ea2:	69fb      	ldr	r3, [r7, #28]
 8009ea4:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	d906      	bls.n	8009eba <pbuf_alloc+0x1f6>
 8009eac:	4b3f      	ldr	r3, [pc, #252]	; (8009fac <pbuf_alloc+0x2e8>)
 8009eae:	f240 1255 	movw	r2, #341	; 0x155
 8009eb2:	4942      	ldr	r1, [pc, #264]	; (8009fbc <pbuf_alloc+0x2f8>)
 8009eb4:	483f      	ldr	r0, [pc, #252]	; (8009fb4 <pbuf_alloc+0x2f0>)
 8009eb6:	f010 fc31 	bl	801a71c <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	895b      	ldrh	r3, [r3, #10]
 8009ec4:	461a      	mov	r2, r3
 8009ec6:	693b      	ldr	r3, [r7, #16]
 8009ec8:	1a9b      	subs	r3, r3, r2
 8009eca:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 8009ed0:	693b      	ldr	r3, [r7, #16]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	dc9a      	bgt.n	8009e0c <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 8009ed6:	e07e      	b.n	8009fd6 <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8009ed8:	8afb      	ldrh	r3, [r7, #22]
 8009eda:	3313      	adds	r3, #19
 8009edc:	b29b      	uxth	r3, r3
 8009ede:	f023 0303 	bic.w	r3, r3, #3
 8009ee2:	b29a      	uxth	r2, r3
 8009ee4:	88bb      	ldrh	r3, [r7, #4]
 8009ee6:	3303      	adds	r3, #3
 8009ee8:	b29b      	uxth	r3, r3
 8009eea:	f023 0303 	bic.w	r3, r3, #3
 8009eee:	b29b      	uxth	r3, r3
 8009ef0:	4413      	add	r3, r2
 8009ef2:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8009ef4:	897a      	ldrh	r2, [r7, #10]
 8009ef6:	88bb      	ldrh	r3, [r7, #4]
 8009ef8:	3303      	adds	r3, #3
 8009efa:	f023 0303 	bic.w	r3, r3, #3
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d201      	bcs.n	8009f06 <pbuf_alloc+0x242>
        return NULL;
 8009f02:	2300      	movs	r3, #0
 8009f04:	e06e      	b.n	8009fe4 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 8009f06:	897b      	ldrh	r3, [r7, #10]
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f7ff fad1 	bl	80094b0 <mem_malloc>
 8009f0e:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 8009f10:	69fb      	ldr	r3, [r7, #28]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d101      	bne.n	8009f1a <pbuf_alloc+0x256>
      return NULL;
 8009f16:	2300      	movs	r3, #0
 8009f18:	e064      	b.n	8009fe4 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8009f1a:	8afb      	ldrh	r3, [r7, #22]
 8009f1c:	3310      	adds	r3, #16
 8009f1e:	69fa      	ldr	r2, [r7, #28]
 8009f20:	4413      	add	r3, r2
 8009f22:	3303      	adds	r3, #3
 8009f24:	f023 0303 	bic.w	r3, r3, #3
 8009f28:	461a      	mov	r2, r3
 8009f2a:	69fb      	ldr	r3, [r7, #28]
 8009f2c:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8009f2e:	69fb      	ldr	r3, [r7, #28]
 8009f30:	88ba      	ldrh	r2, [r7, #4]
 8009f32:	811a      	strh	r2, [r3, #8]
 8009f34:	69fb      	ldr	r3, [r7, #28]
 8009f36:	891a      	ldrh	r2, [r3, #8]
 8009f38:	69fb      	ldr	r3, [r7, #28]
 8009f3a:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8009f3c:	69fb      	ldr	r3, [r7, #28]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	601a      	str	r2, [r3, #0]
    p->type = type;
 8009f42:	69fb      	ldr	r3, [r7, #28]
 8009f44:	79ba      	ldrb	r2, [r7, #6]
 8009f46:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8009f48:	69fb      	ldr	r3, [r7, #28]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	f003 0303 	and.w	r3, r3, #3
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d03f      	beq.n	8009fd4 <pbuf_alloc+0x310>
 8009f54:	4b15      	ldr	r3, [pc, #84]	; (8009fac <pbuf_alloc+0x2e8>)
 8009f56:	f240 1277 	movw	r2, #375	; 0x177
 8009f5a:	491c      	ldr	r1, [pc, #112]	; (8009fcc <pbuf_alloc+0x308>)
 8009f5c:	4815      	ldr	r0, [pc, #84]	; (8009fb4 <pbuf_alloc+0x2f0>)
 8009f5e:	f010 fbdd 	bl	801a71c <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 8009f62:	e037      	b.n	8009fd4 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8009f64:	200c      	movs	r0, #12
 8009f66:	f7ff fc11 	bl	800978c <memp_malloc>
 8009f6a:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 8009f6c:	69fb      	ldr	r3, [r7, #28]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d101      	bne.n	8009f76 <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 8009f72:	2300      	movs	r3, #0
 8009f74:	e036      	b.n	8009fe4 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 8009f76:	69fb      	ldr	r3, [r7, #28]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8009f7c:	69fb      	ldr	r3, [r7, #28]
 8009f7e:	88ba      	ldrh	r2, [r7, #4]
 8009f80:	811a      	strh	r2, [r3, #8]
 8009f82:	69fb      	ldr	r3, [r7, #28]
 8009f84:	891a      	ldrh	r2, [r3, #8]
 8009f86:	69fb      	ldr	r3, [r7, #28]
 8009f88:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 8009f8a:	69fb      	ldr	r3, [r7, #28]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	601a      	str	r2, [r3, #0]
    p->type = type;
 8009f90:	69fb      	ldr	r3, [r7, #28]
 8009f92:	79ba      	ldrb	r2, [r7, #6]
 8009f94:	731a      	strb	r2, [r3, #12]
    break;
 8009f96:	e01e      	b.n	8009fd6 <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8009f98:	4b04      	ldr	r3, [pc, #16]	; (8009fac <pbuf_alloc+0x2e8>)
 8009f9a:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8009f9e:	490c      	ldr	r1, [pc, #48]	; (8009fd0 <pbuf_alloc+0x30c>)
 8009fa0:	4804      	ldr	r0, [pc, #16]	; (8009fb4 <pbuf_alloc+0x2f0>)
 8009fa2:	f010 fbbb 	bl	801a71c <iprintf>
    return NULL;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	e01c      	b.n	8009fe4 <pbuf_alloc+0x320>
 8009faa:	bf00      	nop
 8009fac:	0801e630 	.word	0x0801e630
 8009fb0:	0801e660 	.word	0x0801e660
 8009fb4:	0801e67c 	.word	0x0801e67c
 8009fb8:	0801e6a4 	.word	0x0801e6a4
 8009fbc:	0801e6d4 	.word	0x0801e6d4
 8009fc0:	0801e708 	.word	0x0801e708
 8009fc4:	0801e73c 	.word	0x0801e73c
 8009fc8:	0801e750 	.word	0x0801e750
 8009fcc:	0801e780 	.word	0x0801e780
 8009fd0:	0801e7ac 	.word	0x0801e7ac
    break;
 8009fd4:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 8009fd6:	69fb      	ldr	r3, [r7, #28]
 8009fd8:	2201      	movs	r2, #1
 8009fda:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 8009fdc:	69fb      	ldr	r3, [r7, #28]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8009fe2:	69fb      	ldr	r3, [r7, #28]
}
 8009fe4:	4618      	mov	r0, r3
 8009fe6:	3720      	adds	r7, #32
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}

08009fec <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b084      	sub	sp, #16
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	603b      	str	r3, [r7, #0]
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	71fb      	strb	r3, [r7, #7]
 8009ff8:	460b      	mov	r3, r1
 8009ffa:	80bb      	strh	r3, [r7, #4]
 8009ffc:	4613      	mov	r3, r2
 8009ffe:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 800a000:	79fb      	ldrb	r3, [r7, #7]
 800a002:	2b04      	cmp	r3, #4
 800a004:	d81b      	bhi.n	800a03e <pbuf_alloced_custom+0x52>
 800a006:	a201      	add	r2, pc, #4	; (adr r2, 800a00c <pbuf_alloced_custom+0x20>)
 800a008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a00c:	0800a021 	.word	0x0800a021
 800a010:	0800a027 	.word	0x0800a027
 800a014:	0800a02d 	.word	0x0800a02d
 800a018:	0800a033 	.word	0x0800a033
 800a01c:	0800a039 	.word	0x0800a039
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800a020:	2336      	movs	r3, #54	; 0x36
 800a022:	81fb      	strh	r3, [r7, #14]
    break;
 800a024:	e014      	b.n	800a050 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800a026:	2322      	movs	r3, #34	; 0x22
 800a028:	81fb      	strh	r3, [r7, #14]
    break;
 800a02a:	e011      	b.n	800a050 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800a02c:	230e      	movs	r3, #14
 800a02e:	81fb      	strh	r3, [r7, #14]
    break;
 800a030:	e00e      	b.n	800a050 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800a032:	2300      	movs	r3, #0
 800a034:	81fb      	strh	r3, [r7, #14]
    break;
 800a036:	e00b      	b.n	800a050 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 800a038:	2300      	movs	r3, #0
 800a03a:	81fb      	strh	r3, [r7, #14]
    break;
 800a03c:	e008      	b.n	800a050 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800a03e:	4b1d      	ldr	r3, [pc, #116]	; (800a0b4 <pbuf_alloced_custom+0xc8>)
 800a040:	f240 12c5 	movw	r2, #453	; 0x1c5
 800a044:	491c      	ldr	r1, [pc, #112]	; (800a0b8 <pbuf_alloced_custom+0xcc>)
 800a046:	481d      	ldr	r0, [pc, #116]	; (800a0bc <pbuf_alloced_custom+0xd0>)
 800a048:	f010 fb68 	bl	801a71c <iprintf>
    return NULL;
 800a04c:	2300      	movs	r3, #0
 800a04e:	e02d      	b.n	800a0ac <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800a050:	89fb      	ldrh	r3, [r7, #14]
 800a052:	3303      	adds	r3, #3
 800a054:	f023 0203 	bic.w	r2, r3, #3
 800a058:	88bb      	ldrh	r3, [r7, #4]
 800a05a:	441a      	add	r2, r3
 800a05c:	8bbb      	ldrh	r3, [r7, #28]
 800a05e:	429a      	cmp	r2, r3
 800a060:	d901      	bls.n	800a066 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800a062:	2300      	movs	r3, #0
 800a064:	e022      	b.n	800a0ac <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	2200      	movs	r2, #0
 800a06a:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 800a06c:	69bb      	ldr	r3, [r7, #24]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d008      	beq.n	800a084 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800a072:	89fb      	ldrh	r3, [r7, #14]
 800a074:	3303      	adds	r3, #3
 800a076:	f023 0303 	bic.w	r3, r3, #3
 800a07a:	69ba      	ldr	r2, [r7, #24]
 800a07c:	441a      	add	r2, r3
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	605a      	str	r2, [r3, #4]
 800a082:	e002      	b.n	800a08a <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	2200      	movs	r2, #0
 800a088:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	2202      	movs	r2, #2
 800a08e:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	88ba      	ldrh	r2, [r7, #4]
 800a094:	811a      	strh	r2, [r3, #8]
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	891a      	ldrh	r2, [r3, #8]
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	79ba      	ldrb	r2, [r7, #6]
 800a0a2:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800a0aa:	683b      	ldr	r3, [r7, #0]
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	3710      	adds	r7, #16
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}
 800a0b4:	0801e630 	.word	0x0801e630
 800a0b8:	0801e7c8 	.word	0x0801e7c8
 800a0bc:	0801e67c 	.word	0x0801e67c

0800a0c0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b086      	sub	sp, #24
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	460b      	mov	r3, r1
 800a0ca:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d106      	bne.n	800a0e0 <pbuf_realloc+0x20>
 800a0d2:	4b4b      	ldr	r3, [pc, #300]	; (800a200 <pbuf_realloc+0x140>)
 800a0d4:	f240 12f3 	movw	r2, #499	; 0x1f3
 800a0d8:	494a      	ldr	r1, [pc, #296]	; (800a204 <pbuf_realloc+0x144>)
 800a0da:	484b      	ldr	r0, [pc, #300]	; (800a208 <pbuf_realloc+0x148>)
 800a0dc:	f010 fb1e 	bl	801a71c <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	7b1b      	ldrb	r3, [r3, #12]
 800a0e4:	2b03      	cmp	r3, #3
 800a0e6:	d012      	beq.n	800a10e <pbuf_realloc+0x4e>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	7b1b      	ldrb	r3, [r3, #12]
 800a0ec:	2b01      	cmp	r3, #1
 800a0ee:	d00e      	beq.n	800a10e <pbuf_realloc+0x4e>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	7b1b      	ldrb	r3, [r3, #12]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d00a      	beq.n	800a10e <pbuf_realloc+0x4e>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	7b1b      	ldrb	r3, [r3, #12]
 800a0fc:	2b02      	cmp	r3, #2
 800a0fe:	d006      	beq.n	800a10e <pbuf_realloc+0x4e>
 800a100:	4b3f      	ldr	r3, [pc, #252]	; (800a200 <pbuf_realloc+0x140>)
 800a102:	f240 12f7 	movw	r2, #503	; 0x1f7
 800a106:	4941      	ldr	r1, [pc, #260]	; (800a20c <pbuf_realloc+0x14c>)
 800a108:	483f      	ldr	r0, [pc, #252]	; (800a208 <pbuf_realloc+0x148>)
 800a10a:	f010 fb07 	bl	801a71c <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	891b      	ldrh	r3, [r3, #8]
 800a112:	887a      	ldrh	r2, [r7, #2]
 800a114:	429a      	cmp	r2, r3
 800a116:	d26f      	bcs.n	800a1f8 <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 800a118:	887b      	ldrh	r3, [r7, #2]
 800a11a:	687a      	ldr	r2, [r7, #4]
 800a11c:	8912      	ldrh	r2, [r2, #8]
 800a11e:	1a9b      	subs	r3, r3, r2
 800a120:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800a122:	887b      	ldrh	r3, [r7, #2]
 800a124:	827b      	strh	r3, [r7, #18]
  q = p;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800a12a:	e025      	b.n	800a178 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	895b      	ldrh	r3, [r3, #10]
 800a130:	8a7a      	ldrh	r2, [r7, #18]
 800a132:	1ad3      	subs	r3, r2, r3
 800a134:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a13c:	4293      	cmp	r3, r2
 800a13e:	dd06      	ble.n	800a14e <pbuf_realloc+0x8e>
 800a140:	4b2f      	ldr	r3, [pc, #188]	; (800a200 <pbuf_realloc+0x140>)
 800a142:	f240 220b 	movw	r2, #523	; 0x20b
 800a146:	4932      	ldr	r1, [pc, #200]	; (800a210 <pbuf_realloc+0x150>)
 800a148:	482f      	ldr	r0, [pc, #188]	; (800a208 <pbuf_realloc+0x148>)
 800a14a:	f010 fae7 	bl	801a71c <iprintf>
    q->tot_len += (u16_t)grow;
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	891a      	ldrh	r2, [r3, #8]
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	b29b      	uxth	r3, r3
 800a156:	4413      	add	r3, r2
 800a158:	b29a      	uxth	r2, r3
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d106      	bne.n	800a178 <pbuf_realloc+0xb8>
 800a16a:	4b25      	ldr	r3, [pc, #148]	; (800a200 <pbuf_realloc+0x140>)
 800a16c:	f240 220f 	movw	r2, #527	; 0x20f
 800a170:	4928      	ldr	r1, [pc, #160]	; (800a214 <pbuf_realloc+0x154>)
 800a172:	4825      	ldr	r0, [pc, #148]	; (800a208 <pbuf_realloc+0x148>)
 800a174:	f010 fad2 	bl	801a71c <iprintf>
  while (rem_len > q->len) {
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	895b      	ldrh	r3, [r3, #10]
 800a17c:	8a7a      	ldrh	r2, [r7, #18]
 800a17e:	429a      	cmp	r2, r3
 800a180:	d8d4      	bhi.n	800a12c <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	7b1b      	ldrb	r3, [r3, #12]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d122      	bne.n	800a1d0 <pbuf_realloc+0x110>
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	895b      	ldrh	r3, [r3, #10]
 800a18e:	8a7a      	ldrh	r2, [r7, #18]
 800a190:	429a      	cmp	r2, r3
 800a192:	d01d      	beq.n	800a1d0 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	7b5b      	ldrb	r3, [r3, #13]
 800a198:	f003 0302 	and.w	r3, r3, #2
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d117      	bne.n	800a1d0 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	461a      	mov	r2, r3
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	1ad3      	subs	r3, r2, r3
 800a1aa:	b29a      	uxth	r2, r3
 800a1ac:	8a7b      	ldrh	r3, [r7, #18]
 800a1ae:	4413      	add	r3, r2
 800a1b0:	b29b      	uxth	r3, r3
 800a1b2:	4619      	mov	r1, r3
 800a1b4:	6978      	ldr	r0, [r7, #20]
 800a1b6:	f7ff f891 	bl	80092dc <mem_trim>
 800a1ba:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d106      	bne.n	800a1d0 <pbuf_realloc+0x110>
 800a1c2:	4b0f      	ldr	r3, [pc, #60]	; (800a200 <pbuf_realloc+0x140>)
 800a1c4:	f240 221d 	movw	r2, #541	; 0x21d
 800a1c8:	4913      	ldr	r1, [pc, #76]	; (800a218 <pbuf_realloc+0x158>)
 800a1ca:	480f      	ldr	r0, [pc, #60]	; (800a208 <pbuf_realloc+0x148>)
 800a1cc:	f010 faa6 	bl	801a71c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800a1d0:	697b      	ldr	r3, [r7, #20]
 800a1d2:	8a7a      	ldrh	r2, [r7, #18]
 800a1d4:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	895a      	ldrh	r2, [r3, #10]
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d004      	beq.n	800a1f0 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f000 f8dc 	bl	800a3a8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	601a      	str	r2, [r3, #0]
 800a1f6:	e000      	b.n	800a1fa <pbuf_realloc+0x13a>
    return;
 800a1f8:	bf00      	nop

}
 800a1fa:	3718      	adds	r7, #24
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}
 800a200:	0801e630 	.word	0x0801e630
 800a204:	0801e7ec 	.word	0x0801e7ec
 800a208:	0801e67c 	.word	0x0801e67c
 800a20c:	0801e804 	.word	0x0801e804
 800a210:	0801e820 	.word	0x0801e820
 800a214:	0801e834 	.word	0x0801e834
 800a218:	0801e84c 	.word	0x0801e84c

0800a21c <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b084      	sub	sp, #16
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	460b      	mov	r3, r1
 800a226:	807b      	strh	r3, [r7, #2]
 800a228:	4613      	mov	r3, r2
 800a22a:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d106      	bne.n	800a240 <pbuf_header_impl+0x24>
 800a232:	4b46      	ldr	r3, [pc, #280]	; (800a34c <pbuf_header_impl+0x130>)
 800a234:	f240 223f 	movw	r2, #575	; 0x23f
 800a238:	4945      	ldr	r1, [pc, #276]	; (800a350 <pbuf_header_impl+0x134>)
 800a23a:	4846      	ldr	r0, [pc, #280]	; (800a354 <pbuf_header_impl+0x138>)
 800a23c:	f010 fa6e 	bl	801a71c <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 800a240:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d002      	beq.n	800a24e <pbuf_header_impl+0x32>
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d101      	bne.n	800a252 <pbuf_header_impl+0x36>
    return 0;
 800a24e:	2300      	movs	r3, #0
 800a250:	e078      	b.n	800a344 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 800a252:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a256:	2b00      	cmp	r3, #0
 800a258:	da10      	bge.n	800a27c <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 800a25a:	887b      	ldrh	r3, [r7, #2]
 800a25c:	425b      	negs	r3, r3
 800a25e:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	895b      	ldrh	r3, [r3, #10]
 800a264:	89fa      	ldrh	r2, [r7, #14]
 800a266:	429a      	cmp	r2, r3
 800a268:	d90a      	bls.n	800a280 <pbuf_header_impl+0x64>
 800a26a:	4b38      	ldr	r3, [pc, #224]	; (800a34c <pbuf_header_impl+0x130>)
 800a26c:	f240 2247 	movw	r2, #583	; 0x247
 800a270:	4939      	ldr	r1, [pc, #228]	; (800a358 <pbuf_header_impl+0x13c>)
 800a272:	4838      	ldr	r0, [pc, #224]	; (800a354 <pbuf_header_impl+0x138>)
 800a274:	f010 fa52 	bl	801a71c <iprintf>
 800a278:	2301      	movs	r3, #1
 800a27a:	e063      	b.n	800a344 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 800a27c:	887b      	ldrh	r3, [r7, #2]
 800a27e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	7b1b      	ldrb	r3, [r3, #12]
 800a284:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800a28c:	89bb      	ldrh	r3, [r7, #12]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d002      	beq.n	800a298 <pbuf_header_impl+0x7c>
 800a292:	89bb      	ldrh	r3, [r7, #12]
 800a294:	2b03      	cmp	r3, #3
 800a296:	d112      	bne.n	800a2be <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	685a      	ldr	r2, [r3, #4]
 800a29c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a2a0:	425b      	negs	r3, r3
 800a2a2:	441a      	add	r2, r3
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	685a      	ldr	r2, [r3, #4]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	3310      	adds	r3, #16
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	d238      	bcs.n	800a326 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	68ba      	ldr	r2, [r7, #8]
 800a2b8:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	e042      	b.n	800a344 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800a2be:	89bb      	ldrh	r3, [r7, #12]
 800a2c0:	2b02      	cmp	r3, #2
 800a2c2:	d002      	beq.n	800a2ca <pbuf_header_impl+0xae>
 800a2c4:	89bb      	ldrh	r3, [r7, #12]
 800a2c6:	2b01      	cmp	r3, #1
 800a2c8:	d124      	bne.n	800a314 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800a2ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	da0d      	bge.n	800a2ee <pbuf_header_impl+0xd2>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	895b      	ldrh	r3, [r3, #10]
 800a2d6:	89fa      	ldrh	r2, [r7, #14]
 800a2d8:	429a      	cmp	r2, r3
 800a2da:	d808      	bhi.n	800a2ee <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	685a      	ldr	r2, [r3, #4]
 800a2e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a2e4:	425b      	negs	r3, r3
 800a2e6:	441a      	add	r2, r3
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	605a      	str	r2, [r3, #4]
 800a2ec:	e011      	b.n	800a312 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 800a2ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	dd0b      	ble.n	800a30e <pbuf_header_impl+0xf2>
 800a2f6:	787b      	ldrb	r3, [r7, #1]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d008      	beq.n	800a30e <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	685a      	ldr	r2, [r3, #4]
 800a300:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a304:	425b      	negs	r3, r3
 800a306:	441a      	add	r2, r3
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	605a      	str	r2, [r3, #4]
 800a30c:	e001      	b.n	800a312 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800a30e:	2301      	movs	r3, #1
 800a310:	e018      	b.n	800a344 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800a312:	e008      	b.n	800a326 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 800a314:	4b0d      	ldr	r3, [pc, #52]	; (800a34c <pbuf_header_impl+0x130>)
 800a316:	f240 2277 	movw	r2, #631	; 0x277
 800a31a:	4910      	ldr	r1, [pc, #64]	; (800a35c <pbuf_header_impl+0x140>)
 800a31c:	480d      	ldr	r0, [pc, #52]	; (800a354 <pbuf_header_impl+0x138>)
 800a31e:	f010 f9fd 	bl	801a71c <iprintf>
    return 1;
 800a322:	2301      	movs	r3, #1
 800a324:	e00e      	b.n	800a344 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	895a      	ldrh	r2, [r3, #10]
 800a32a:	887b      	ldrh	r3, [r7, #2]
 800a32c:	4413      	add	r3, r2
 800a32e:	b29a      	uxth	r2, r3
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	891a      	ldrh	r2, [r3, #8]
 800a338:	887b      	ldrh	r3, [r7, #2]
 800a33a:	4413      	add	r3, r2
 800a33c:	b29a      	uxth	r2, r3
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800a342:	2300      	movs	r3, #0
}
 800a344:	4618      	mov	r0, r3
 800a346:	3710      	adds	r7, #16
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}
 800a34c:	0801e630 	.word	0x0801e630
 800a350:	0801e868 	.word	0x0801e868
 800a354:	0801e67c 	.word	0x0801e67c
 800a358:	0801e874 	.word	0x0801e874
 800a35c:	0801e894 	.word	0x0801e894

0800a360 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b082      	sub	sp, #8
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	460b      	mov	r3, r1
 800a36a:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 800a36c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a370:	2200      	movs	r2, #0
 800a372:	4619      	mov	r1, r3
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f7ff ff51 	bl	800a21c <pbuf_header_impl>
 800a37a:	4603      	mov	r3, r0
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3708      	adds	r7, #8
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}

0800a384 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b082      	sub	sp, #8
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
 800a38c:	460b      	mov	r3, r1
 800a38e:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 800a390:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800a394:	2201      	movs	r2, #1
 800a396:	4619      	mov	r1, r3
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f7ff ff3f 	bl	800a21c <pbuf_header_impl>
 800a39e:	4603      	mov	r3, r0
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3708      	adds	r7, #8
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}

0800a3a8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b088      	sub	sp, #32
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d10b      	bne.n	800a3ce <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d106      	bne.n	800a3ca <pbuf_free+0x22>
 800a3bc:	4b41      	ldr	r3, [pc, #260]	; (800a4c4 <pbuf_free+0x11c>)
 800a3be:	f240 22d2 	movw	r2, #722	; 0x2d2
 800a3c2:	4941      	ldr	r1, [pc, #260]	; (800a4c8 <pbuf_free+0x120>)
 800a3c4:	4841      	ldr	r0, [pc, #260]	; (800a4cc <pbuf_free+0x124>)
 800a3c6:	f010 f9a9 	bl	801a71c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	e076      	b.n	800a4bc <pbuf_free+0x114>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	7b1b      	ldrb	r3, [r3, #12]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d012      	beq.n	800a3fc <pbuf_free+0x54>
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	7b1b      	ldrb	r3, [r3, #12]
 800a3da:	2b01      	cmp	r3, #1
 800a3dc:	d00e      	beq.n	800a3fc <pbuf_free+0x54>
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	7b1b      	ldrb	r3, [r3, #12]
 800a3e2:	2b02      	cmp	r3, #2
 800a3e4:	d00a      	beq.n	800a3fc <pbuf_free+0x54>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	7b1b      	ldrb	r3, [r3, #12]
 800a3ea:	2b03      	cmp	r3, #3
 800a3ec:	d006      	beq.n	800a3fc <pbuf_free+0x54>
 800a3ee:	4b35      	ldr	r3, [pc, #212]	; (800a4c4 <pbuf_free+0x11c>)
 800a3f0:	f240 22de 	movw	r2, #734	; 0x2de
 800a3f4:	4936      	ldr	r1, [pc, #216]	; (800a4d0 <pbuf_free+0x128>)
 800a3f6:	4835      	ldr	r0, [pc, #212]	; (800a4cc <pbuf_free+0x124>)
 800a3f8:	f010 f990 	bl	801a71c <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800a400:	e058      	b.n	800a4b4 <pbuf_free+0x10c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800a402:	f009 ffed 	bl	80143e0 <sys_arch_protect>
 800a406:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	89db      	ldrh	r3, [r3, #14]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d106      	bne.n	800a41e <pbuf_free+0x76>
 800a410:	4b2c      	ldr	r3, [pc, #176]	; (800a4c4 <pbuf_free+0x11c>)
 800a412:	f240 22eb 	movw	r2, #747	; 0x2eb
 800a416:	492f      	ldr	r1, [pc, #188]	; (800a4d4 <pbuf_free+0x12c>)
 800a418:	482c      	ldr	r0, [pc, #176]	; (800a4cc <pbuf_free+0x124>)
 800a41a:	f010 f97f 	bl	801a71c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	89db      	ldrh	r3, [r3, #14]
 800a422:	3b01      	subs	r3, #1
 800a424:	b29a      	uxth	r2, r3
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	81da      	strh	r2, [r3, #14]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	89db      	ldrh	r3, [r3, #14]
 800a42e:	82fb      	strh	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
 800a430:	69b8      	ldr	r0, [r7, #24]
 800a432:	f009 ffe3 	bl	80143fc <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800a436:	8afb      	ldrh	r3, [r7, #22]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d139      	bne.n	800a4b0 <pbuf_free+0x108>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	7b1b      	ldrb	r3, [r3, #12]
 800a446:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	7b5b      	ldrb	r3, [r3, #13]
 800a44c:	f003 0302 	and.w	r3, r3, #2
 800a450:	2b00      	cmp	r3, #0
 800a452:	d011      	beq.n	800a478 <pbuf_free+0xd0>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	691b      	ldr	r3, [r3, #16]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d106      	bne.n	800a46e <pbuf_free+0xc6>
 800a460:	4b18      	ldr	r3, [pc, #96]	; (800a4c4 <pbuf_free+0x11c>)
 800a462:	f240 22f9 	movw	r2, #761	; 0x2f9
 800a466:	491c      	ldr	r1, [pc, #112]	; (800a4d8 <pbuf_free+0x130>)
 800a468:	4818      	ldr	r0, [pc, #96]	; (800a4cc <pbuf_free+0x124>)
 800a46a:	f010 f957 	bl	801a71c <iprintf>
        pc->custom_free_function(p);
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	691b      	ldr	r3, [r3, #16]
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	4798      	blx	r3
 800a476:	e015      	b.n	800a4a4 <pbuf_free+0xfc>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 800a478:	89fb      	ldrh	r3, [r7, #14]
 800a47a:	2b03      	cmp	r3, #3
 800a47c:	d104      	bne.n	800a488 <pbuf_free+0xe0>
          memp_free(MEMP_PBUF_POOL, p);
 800a47e:	6879      	ldr	r1, [r7, #4]
 800a480:	200d      	movs	r0, #13
 800a482:	f7ff f9d5 	bl	8009830 <memp_free>
 800a486:	e00d      	b.n	800a4a4 <pbuf_free+0xfc>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800a488:	89fb      	ldrh	r3, [r7, #14]
 800a48a:	2b01      	cmp	r3, #1
 800a48c:	d002      	beq.n	800a494 <pbuf_free+0xec>
 800a48e:	89fb      	ldrh	r3, [r7, #14]
 800a490:	2b02      	cmp	r3, #2
 800a492:	d104      	bne.n	800a49e <pbuf_free+0xf6>
          memp_free(MEMP_PBUF, p);
 800a494:	6879      	ldr	r1, [r7, #4]
 800a496:	200c      	movs	r0, #12
 800a498:	f7ff f9ca 	bl	8009830 <memp_free>
 800a49c:	e002      	b.n	800a4a4 <pbuf_free+0xfc>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f7fe feae 	bl	8009200 <mem_free>
        }
      }
      count++;
 800a4a4:	7ffb      	ldrb	r3, [r7, #31]
 800a4a6:	3301      	adds	r3, #1
 800a4a8:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	607b      	str	r3, [r7, #4]
 800a4ae:	e001      	b.n	800a4b4 <pbuf_free+0x10c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d1a3      	bne.n	800a402 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800a4ba:	7ffb      	ldrb	r3, [r7, #31]
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3720      	adds	r7, #32
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}
 800a4c4:	0801e630 	.word	0x0801e630
 800a4c8:	0801e868 	.word	0x0801e868
 800a4cc:	0801e67c 	.word	0x0801e67c
 800a4d0:	0801e8a4 	.word	0x0801e8a4
 800a4d4:	0801e8bc 	.word	0x0801e8bc
 800a4d8:	0801e8d4 	.word	0x0801e8d4

0800a4dc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b085      	sub	sp, #20
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800a4e8:	e005      	b.n	800a4f6 <pbuf_clen+0x1a>
    ++len;
 800a4ea:	89fb      	ldrh	r3, [r7, #14]
 800a4ec:	3301      	adds	r3, #1
 800a4ee:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d1f6      	bne.n	800a4ea <pbuf_clen+0xe>
  }
  return len;
 800a4fc:	89fb      	ldrh	r3, [r7, #14]
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3714      	adds	r7, #20
 800a502:	46bd      	mov	sp, r7
 800a504:	bc80      	pop	{r7}
 800a506:	4770      	bx	lr

0800a508 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b084      	sub	sp, #16
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d016      	beq.n	800a544 <pbuf_ref+0x3c>
    SYS_ARCH_INC(p->ref, 1);
 800a516:	f009 ff63 	bl	80143e0 <sys_arch_protect>
 800a51a:	60f8      	str	r0, [r7, #12]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	89db      	ldrh	r3, [r3, #14]
 800a520:	3301      	adds	r3, #1
 800a522:	b29a      	uxth	r2, r3
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	81da      	strh	r2, [r3, #14]
 800a528:	68f8      	ldr	r0, [r7, #12]
 800a52a:	f009 ff67 	bl	80143fc <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	89db      	ldrh	r3, [r3, #14]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d106      	bne.n	800a544 <pbuf_ref+0x3c>
 800a536:	4b05      	ldr	r3, [pc, #20]	; (800a54c <pbuf_ref+0x44>)
 800a538:	f240 3239 	movw	r2, #825	; 0x339
 800a53c:	4904      	ldr	r1, [pc, #16]	; (800a550 <pbuf_ref+0x48>)
 800a53e:	4805      	ldr	r0, [pc, #20]	; (800a554 <pbuf_ref+0x4c>)
 800a540:	f010 f8ec 	bl	801a71c <iprintf>
  }
}
 800a544:	bf00      	nop
 800a546:	3710      	adds	r7, #16
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}
 800a54c:	0801e630 	.word	0x0801e630
 800a550:	0801e8f8 	.word	0x0801e8f8
 800a554:	0801e67c 	.word	0x0801e67c

0800a558 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b084      	sub	sp, #16
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d002      	beq.n	800a56e <pbuf_cat+0x16>
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d107      	bne.n	800a57e <pbuf_cat+0x26>
 800a56e:	4b20      	ldr	r3, [pc, #128]	; (800a5f0 <pbuf_cat+0x98>)
 800a570:	f240 324d 	movw	r2, #845	; 0x34d
 800a574:	491f      	ldr	r1, [pc, #124]	; (800a5f4 <pbuf_cat+0x9c>)
 800a576:	4820      	ldr	r0, [pc, #128]	; (800a5f8 <pbuf_cat+0xa0>)
 800a578:	f010 f8d0 	bl	801a71c <iprintf>
 800a57c:	e034      	b.n	800a5e8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	60fb      	str	r3, [r7, #12]
 800a582:	e00a      	b.n	800a59a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	891a      	ldrh	r2, [r3, #8]
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	891b      	ldrh	r3, [r3, #8]
 800a58c:	4413      	add	r3, r2
 800a58e:	b29a      	uxth	r2, r3
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	60fb      	str	r3, [r7, #12]
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d1f0      	bne.n	800a584 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	891a      	ldrh	r2, [r3, #8]
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	895b      	ldrh	r3, [r3, #10]
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	d006      	beq.n	800a5bc <pbuf_cat+0x64>
 800a5ae:	4b10      	ldr	r3, [pc, #64]	; (800a5f0 <pbuf_cat+0x98>)
 800a5b0:	f240 3255 	movw	r2, #853	; 0x355
 800a5b4:	4911      	ldr	r1, [pc, #68]	; (800a5fc <pbuf_cat+0xa4>)
 800a5b6:	4810      	ldr	r0, [pc, #64]	; (800a5f8 <pbuf_cat+0xa0>)
 800a5b8:	f010 f8b0 	bl	801a71c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d006      	beq.n	800a5d2 <pbuf_cat+0x7a>
 800a5c4:	4b0a      	ldr	r3, [pc, #40]	; (800a5f0 <pbuf_cat+0x98>)
 800a5c6:	f240 3256 	movw	r2, #854	; 0x356
 800a5ca:	490d      	ldr	r1, [pc, #52]	; (800a600 <pbuf_cat+0xa8>)
 800a5cc:	480a      	ldr	r0, [pc, #40]	; (800a5f8 <pbuf_cat+0xa0>)
 800a5ce:	f010 f8a5 	bl	801a71c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	891a      	ldrh	r2, [r3, #8]
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	891b      	ldrh	r3, [r3, #8]
 800a5da:	4413      	add	r3, r2
 800a5dc:	b29a      	uxth	r2, r3
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	683a      	ldr	r2, [r7, #0]
 800a5e6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800a5e8:	3710      	adds	r7, #16
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	bd80      	pop	{r7, pc}
 800a5ee:	bf00      	nop
 800a5f0:	0801e630 	.word	0x0801e630
 800a5f4:	0801e90c 	.word	0x0801e90c
 800a5f8:	0801e67c 	.word	0x0801e67c
 800a5fc:	0801e944 	.word	0x0801e944
 800a600:	0801e974 	.word	0x0801e974

0800a604 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b082      	sub	sp, #8
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
 800a60c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800a60e:	6839      	ldr	r1, [r7, #0]
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f7ff ffa1 	bl	800a558 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800a616:	6838      	ldr	r0, [r7, #0]
 800a618:	f7ff ff76 	bl	800a508 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800a61c:	bf00      	nop
 800a61e:	3708      	adds	r7, #8
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}

0800a624 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b084      	sub	sp, #16
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 800a62e:	2300      	movs	r3, #0
 800a630:	81fb      	strh	r3, [r7, #14]
 800a632:	2300      	movs	r3, #0
 800a634:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d008      	beq.n	800a64e <pbuf_copy+0x2a>
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d005      	beq.n	800a64e <pbuf_copy+0x2a>
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	891a      	ldrh	r2, [r3, #8]
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	891b      	ldrh	r3, [r3, #8]
 800a64a:	429a      	cmp	r2, r3
 800a64c:	d209      	bcs.n	800a662 <pbuf_copy+0x3e>
 800a64e:	4b54      	ldr	r3, [pc, #336]	; (800a7a0 <pbuf_copy+0x17c>)
 800a650:	f240 32bd 	movw	r2, #957	; 0x3bd
 800a654:	4953      	ldr	r1, [pc, #332]	; (800a7a4 <pbuf_copy+0x180>)
 800a656:	4854      	ldr	r0, [pc, #336]	; (800a7a8 <pbuf_copy+0x184>)
 800a658:	f010 f860 	bl	801a71c <iprintf>
 800a65c:	f06f 030f 	mvn.w	r3, #15
 800a660:	e099      	b.n	800a796 <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	895b      	ldrh	r3, [r3, #10]
 800a666:	461a      	mov	r2, r3
 800a668:	89fb      	ldrh	r3, [r7, #14]
 800a66a:	1ad2      	subs	r2, r2, r3
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	895b      	ldrh	r3, [r3, #10]
 800a670:	4619      	mov	r1, r3
 800a672:	89bb      	ldrh	r3, [r7, #12]
 800a674:	1acb      	subs	r3, r1, r3
 800a676:	429a      	cmp	r2, r3
 800a678:	db05      	blt.n	800a686 <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	895a      	ldrh	r2, [r3, #10]
 800a67e:	89bb      	ldrh	r3, [r7, #12]
 800a680:	1ad3      	subs	r3, r2, r3
 800a682:	817b      	strh	r3, [r7, #10]
 800a684:	e004      	b.n	800a690 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	895a      	ldrh	r2, [r3, #10]
 800a68a:	89fb      	ldrh	r3, [r7, #14]
 800a68c:	1ad3      	subs	r3, r2, r3
 800a68e:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	685a      	ldr	r2, [r3, #4]
 800a694:	89fb      	ldrh	r3, [r7, #14]
 800a696:	18d0      	adds	r0, r2, r3
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	685a      	ldr	r2, [r3, #4]
 800a69c:	89bb      	ldrh	r3, [r7, #12]
 800a69e:	4413      	add	r3, r2
 800a6a0:	897a      	ldrh	r2, [r7, #10]
 800a6a2:	4619      	mov	r1, r3
 800a6a4:	f00f f9f7 	bl	8019a96 <memcpy>
    offset_to += len;
 800a6a8:	89fa      	ldrh	r2, [r7, #14]
 800a6aa:	897b      	ldrh	r3, [r7, #10]
 800a6ac:	4413      	add	r3, r2
 800a6ae:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 800a6b0:	89ba      	ldrh	r2, [r7, #12]
 800a6b2:	897b      	ldrh	r3, [r7, #10]
 800a6b4:	4413      	add	r3, r2
 800a6b6:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	895b      	ldrh	r3, [r3, #10]
 800a6bc:	89fa      	ldrh	r2, [r7, #14]
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	d906      	bls.n	800a6d0 <pbuf_copy+0xac>
 800a6c2:	4b37      	ldr	r3, [pc, #220]	; (800a7a0 <pbuf_copy+0x17c>)
 800a6c4:	f240 32cd 	movw	r2, #973	; 0x3cd
 800a6c8:	4938      	ldr	r1, [pc, #224]	; (800a7ac <pbuf_copy+0x188>)
 800a6ca:	4837      	ldr	r0, [pc, #220]	; (800a7a8 <pbuf_copy+0x184>)
 800a6cc:	f010 f826 	bl	801a71c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	895b      	ldrh	r3, [r3, #10]
 800a6d4:	89ba      	ldrh	r2, [r7, #12]
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d906      	bls.n	800a6e8 <pbuf_copy+0xc4>
 800a6da:	4b31      	ldr	r3, [pc, #196]	; (800a7a0 <pbuf_copy+0x17c>)
 800a6dc:	f240 32ce 	movw	r2, #974	; 0x3ce
 800a6e0:	4933      	ldr	r1, [pc, #204]	; (800a7b0 <pbuf_copy+0x18c>)
 800a6e2:	4831      	ldr	r0, [pc, #196]	; (800a7a8 <pbuf_copy+0x184>)
 800a6e4:	f010 f81a 	bl	801a71c <iprintf>
    if (offset_from >= p_from->len) {
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	895b      	ldrh	r3, [r3, #10]
 800a6ec:	89ba      	ldrh	r2, [r7, #12]
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	d304      	bcc.n	800a6fc <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	895b      	ldrh	r3, [r3, #10]
 800a700:	89fa      	ldrh	r2, [r7, #14]
 800a702:	429a      	cmp	r2, r3
 800a704:	d114      	bne.n	800a730 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 800a706:	2300      	movs	r3, #0
 800a708:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d10c      	bne.n	800a730 <pbuf_copy+0x10c>
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d009      	beq.n	800a730 <pbuf_copy+0x10c>
 800a71c:	4b20      	ldr	r3, [pc, #128]	; (800a7a0 <pbuf_copy+0x17c>)
 800a71e:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800a722:	4924      	ldr	r1, [pc, #144]	; (800a7b4 <pbuf_copy+0x190>)
 800a724:	4820      	ldr	r0, [pc, #128]	; (800a7a8 <pbuf_copy+0x184>)
 800a726:	f00f fff9 	bl	801a71c <iprintf>
 800a72a:	f06f 030f 	mvn.w	r3, #15
 800a72e:	e032      	b.n	800a796 <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d013      	beq.n	800a75e <pbuf_copy+0x13a>
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	895a      	ldrh	r2, [r3, #10]
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	891b      	ldrh	r3, [r3, #8]
 800a73e:	429a      	cmp	r2, r3
 800a740:	d10d      	bne.n	800a75e <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d009      	beq.n	800a75e <pbuf_copy+0x13a>
 800a74a:	4b15      	ldr	r3, [pc, #84]	; (800a7a0 <pbuf_copy+0x17c>)
 800a74c:	f240 32de 	movw	r2, #990	; 0x3de
 800a750:	4919      	ldr	r1, [pc, #100]	; (800a7b8 <pbuf_copy+0x194>)
 800a752:	4815      	ldr	r0, [pc, #84]	; (800a7a8 <pbuf_copy+0x184>)
 800a754:	f00f ffe2 	bl	801a71c <iprintf>
 800a758:	f06f 0305 	mvn.w	r3, #5
 800a75c:	e01b      	b.n	800a796 <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d013      	beq.n	800a78c <pbuf_copy+0x168>
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	895a      	ldrh	r2, [r3, #10]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	891b      	ldrh	r3, [r3, #8]
 800a76c:	429a      	cmp	r2, r3
 800a76e:	d10d      	bne.n	800a78c <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d009      	beq.n	800a78c <pbuf_copy+0x168>
 800a778:	4b09      	ldr	r3, [pc, #36]	; (800a7a0 <pbuf_copy+0x17c>)
 800a77a:	f240 32e3 	movw	r2, #995	; 0x3e3
 800a77e:	490e      	ldr	r1, [pc, #56]	; (800a7b8 <pbuf_copy+0x194>)
 800a780:	4809      	ldr	r0, [pc, #36]	; (800a7a8 <pbuf_copy+0x184>)
 800a782:	f00f ffcb 	bl	801a71c <iprintf>
 800a786:	f06f 0305 	mvn.w	r3, #5
 800a78a:	e004      	b.n	800a796 <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	f47f af67 	bne.w	800a662 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800a794:	2300      	movs	r3, #0
}
 800a796:	4618      	mov	r0, r3
 800a798:	3710      	adds	r7, #16
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}
 800a79e:	bf00      	nop
 800a7a0:	0801e630 	.word	0x0801e630
 800a7a4:	0801e9c0 	.word	0x0801e9c0
 800a7a8:	0801e67c 	.word	0x0801e67c
 800a7ac:	0801e9f0 	.word	0x0801e9f0
 800a7b0:	0801ea08 	.word	0x0801ea08
 800a7b4:	0801ea24 	.word	0x0801ea24
 800a7b8:	0801ea34 	.word	0x0801ea34

0800a7bc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b088      	sub	sp, #32
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	60f8      	str	r0, [r7, #12]
 800a7c4:	60b9      	str	r1, [r7, #8]
 800a7c6:	4611      	mov	r1, r2
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	460b      	mov	r3, r1
 800a7cc:	80fb      	strh	r3, [r7, #6]
 800a7ce:	4613      	mov	r3, r2
 800a7d0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d108      	bne.n	800a7ee <pbuf_copy_partial+0x32>
 800a7dc:	4b30      	ldr	r3, [pc, #192]	; (800a8a0 <pbuf_copy_partial+0xe4>)
 800a7de:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800a7e2:	4930      	ldr	r1, [pc, #192]	; (800a8a4 <pbuf_copy_partial+0xe8>)
 800a7e4:	4830      	ldr	r0, [pc, #192]	; (800a8a8 <pbuf_copy_partial+0xec>)
 800a7e6:	f00f ff99 	bl	801a71c <iprintf>
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	e054      	b.n	800a898 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d108      	bne.n	800a806 <pbuf_copy_partial+0x4a>
 800a7f4:	4b2a      	ldr	r3, [pc, #168]	; (800a8a0 <pbuf_copy_partial+0xe4>)
 800a7f6:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800a7fa:	492c      	ldr	r1, [pc, #176]	; (800a8ac <pbuf_copy_partial+0xf0>)
 800a7fc:	482a      	ldr	r0, [pc, #168]	; (800a8a8 <pbuf_copy_partial+0xec>)
 800a7fe:	f00f ff8d 	bl	801a71c <iprintf>
 800a802:	2300      	movs	r3, #0
 800a804:	e048      	b.n	800a898 <pbuf_copy_partial+0xdc>

  left = 0;
 800a806:	2300      	movs	r3, #0
 800a808:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d002      	beq.n	800a816 <pbuf_copy_partial+0x5a>
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d101      	bne.n	800a81a <pbuf_copy_partial+0x5e>
    return 0;
 800a816:	2300      	movs	r3, #0
 800a818:	e03e      	b.n	800a898 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	61fb      	str	r3, [r7, #28]
 800a81e:	e034      	b.n	800a88a <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 800a820:	88bb      	ldrh	r3, [r7, #4]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d00a      	beq.n	800a83c <pbuf_copy_partial+0x80>
 800a826:	69fb      	ldr	r3, [r7, #28]
 800a828:	895b      	ldrh	r3, [r3, #10]
 800a82a:	88ba      	ldrh	r2, [r7, #4]
 800a82c:	429a      	cmp	r2, r3
 800a82e:	d305      	bcc.n	800a83c <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 800a830:	69fb      	ldr	r3, [r7, #28]
 800a832:	895b      	ldrh	r3, [r3, #10]
 800a834:	88ba      	ldrh	r2, [r7, #4]
 800a836:	1ad3      	subs	r3, r2, r3
 800a838:	80bb      	strh	r3, [r7, #4]
 800a83a:	e023      	b.n	800a884 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 800a83c:	69fb      	ldr	r3, [r7, #28]
 800a83e:	895a      	ldrh	r2, [r3, #10]
 800a840:	88bb      	ldrh	r3, [r7, #4]
 800a842:	1ad3      	subs	r3, r2, r3
 800a844:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800a846:	8b3a      	ldrh	r2, [r7, #24]
 800a848:	88fb      	ldrh	r3, [r7, #6]
 800a84a:	429a      	cmp	r2, r3
 800a84c:	d901      	bls.n	800a852 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 800a84e:	88fb      	ldrh	r3, [r7, #6]
 800a850:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800a852:	8b7b      	ldrh	r3, [r7, #26]
 800a854:	68ba      	ldr	r2, [r7, #8]
 800a856:	18d0      	adds	r0, r2, r3
 800a858:	69fb      	ldr	r3, [r7, #28]
 800a85a:	685a      	ldr	r2, [r3, #4]
 800a85c:	88bb      	ldrh	r3, [r7, #4]
 800a85e:	4413      	add	r3, r2
 800a860:	8b3a      	ldrh	r2, [r7, #24]
 800a862:	4619      	mov	r1, r3
 800a864:	f00f f917 	bl	8019a96 <memcpy>
      copied_total += buf_copy_len;
 800a868:	8afa      	ldrh	r2, [r7, #22]
 800a86a:	8b3b      	ldrh	r3, [r7, #24]
 800a86c:	4413      	add	r3, r2
 800a86e:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 800a870:	8b7a      	ldrh	r2, [r7, #26]
 800a872:	8b3b      	ldrh	r3, [r7, #24]
 800a874:	4413      	add	r3, r2
 800a876:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 800a878:	88fa      	ldrh	r2, [r7, #6]
 800a87a:	8b3b      	ldrh	r3, [r7, #24]
 800a87c:	1ad3      	subs	r3, r2, r3
 800a87e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800a880:	2300      	movs	r3, #0
 800a882:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800a884:	69fb      	ldr	r3, [r7, #28]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	61fb      	str	r3, [r7, #28]
 800a88a:	88fb      	ldrh	r3, [r7, #6]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d002      	beq.n	800a896 <pbuf_copy_partial+0xda>
 800a890:	69fb      	ldr	r3, [r7, #28]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d1c4      	bne.n	800a820 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 800a896:	8afb      	ldrh	r3, [r7, #22]
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3720      	adds	r7, #32
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}
 800a8a0:	0801e630 	.word	0x0801e630
 800a8a4:	0801ea60 	.word	0x0801ea60
 800a8a8:	0801e67c 	.word	0x0801e67c
 800a8ac:	0801ea80 	.word	0x0801ea80

0800a8b0 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf*
pbuf_skip_const(const struct pbuf* in, u16_t in_offset, u16_t* out_offset)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b087      	sub	sp, #28
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	60f8      	str	r0, [r7, #12]
 800a8b8:	460b      	mov	r3, r1
 800a8ba:	607a      	str	r2, [r7, #4]
 800a8bc:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 800a8be:	897b      	ldrh	r3, [r7, #10]
 800a8c0:	82fb      	strh	r3, [r7, #22]
  const struct pbuf* q = in;
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800a8c6:	e007      	b.n	800a8d8 <pbuf_skip_const+0x28>
    offset_left -= q->len;
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	895b      	ldrh	r3, [r3, #10]
 800a8cc:	8afa      	ldrh	r2, [r7, #22]
 800a8ce:	1ad3      	subs	r3, r2, r3
 800a8d0:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d004      	beq.n	800a8e8 <pbuf_skip_const+0x38>
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	895b      	ldrh	r3, [r3, #10]
 800a8e2:	8afa      	ldrh	r2, [r7, #22]
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	d2ef      	bcs.n	800a8c8 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d002      	beq.n	800a8f4 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	8afa      	ldrh	r2, [r7, #22]
 800a8f2:	801a      	strh	r2, [r3, #0]
  }
  return q;
 800a8f4:	693b      	ldr	r3, [r7, #16]
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	371c      	adds	r7, #28
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bc80      	pop	{r7}
 800a8fe:	4770      	bx	lr

0800a900 <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf*
pbuf_skip(struct pbuf* in, u16_t in_offset, u16_t* out_offset)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b086      	sub	sp, #24
 800a904:	af00      	add	r7, sp, #0
 800a906:	60f8      	str	r0, [r7, #12]
 800a908:	460b      	mov	r3, r1
 800a90a:	607a      	str	r2, [r7, #4]
 800a90c:	817b      	strh	r3, [r7, #10]
  const struct pbuf* out = pbuf_skip_const(in, in_offset, out_offset);
 800a90e:	897b      	ldrh	r3, [r7, #10]
 800a910:	687a      	ldr	r2, [r7, #4]
 800a912:	4619      	mov	r1, r3
 800a914:	68f8      	ldr	r0, [r7, #12]
 800a916:	f7ff ffcb 	bl	800a8b0 <pbuf_skip_const>
 800a91a:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf*, out);
 800a91c:	697b      	ldr	r3, [r7, #20]
}
 800a91e:	4618      	mov	r0, r3
 800a920:	3718      	adds	r7, #24
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}
	...

0800a928 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b088      	sub	sp, #32
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	60f8      	str	r0, [r7, #12]
 800a930:	60b9      	str	r1, [r7, #8]
 800a932:	4613      	mov	r3, r2
 800a934:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  u16_t buf_copy_len;
  u16_t total_copy_len = len;
 800a936:	88fb      	ldrh	r3, [r7, #6]
 800a938:	833b      	strh	r3, [r7, #24]
  u16_t copied_total = 0;
 800a93a:	2300      	movs	r3, #0
 800a93c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d109      	bne.n	800a958 <pbuf_take+0x30>
 800a944:	4b3a      	ldr	r3, [pc, #232]	; (800aa30 <pbuf_take+0x108>)
 800a946:	f240 4284 	movw	r2, #1156	; 0x484
 800a94a:	493a      	ldr	r1, [pc, #232]	; (800aa34 <pbuf_take+0x10c>)
 800a94c:	483a      	ldr	r0, [pc, #232]	; (800aa38 <pbuf_take+0x110>)
 800a94e:	f00f fee5 	bl	801a71c <iprintf>
 800a952:	f06f 030f 	mvn.w	r3, #15
 800a956:	e066      	b.n	800aa26 <pbuf_take+0xfe>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d109      	bne.n	800a972 <pbuf_take+0x4a>
 800a95e:	4b34      	ldr	r3, [pc, #208]	; (800aa30 <pbuf_take+0x108>)
 800a960:	f240 4285 	movw	r2, #1157	; 0x485
 800a964:	4935      	ldr	r1, [pc, #212]	; (800aa3c <pbuf_take+0x114>)
 800a966:	4834      	ldr	r0, [pc, #208]	; (800aa38 <pbuf_take+0x110>)
 800a968:	f00f fed8 	bl	801a71c <iprintf>
 800a96c:	f06f 030f 	mvn.w	r3, #15
 800a970:	e059      	b.n	800aa26 <pbuf_take+0xfe>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	891b      	ldrh	r3, [r3, #8]
 800a976:	88fa      	ldrh	r2, [r7, #6]
 800a978:	429a      	cmp	r2, r3
 800a97a:	d909      	bls.n	800a990 <pbuf_take+0x68>
 800a97c:	4b2c      	ldr	r3, [pc, #176]	; (800aa30 <pbuf_take+0x108>)
 800a97e:	f240 4286 	movw	r2, #1158	; 0x486
 800a982:	492f      	ldr	r1, [pc, #188]	; (800aa40 <pbuf_take+0x118>)
 800a984:	482c      	ldr	r0, [pc, #176]	; (800aa38 <pbuf_take+0x110>)
 800a986:	f00f fec9 	bl	801a71c <iprintf>
 800a98a:	f04f 33ff 	mov.w	r3, #4294967295
 800a98e:	e04a      	b.n	800aa26 <pbuf_take+0xfe>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d007      	beq.n	800a9a6 <pbuf_take+0x7e>
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d004      	beq.n	800a9a6 <pbuf_take+0x7e>
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	891b      	ldrh	r3, [r3, #8]
 800a9a0:	88fa      	ldrh	r2, [r7, #6]
 800a9a2:	429a      	cmp	r2, r3
 800a9a4:	d902      	bls.n	800a9ac <pbuf_take+0x84>
    return ERR_ARG;
 800a9a6:	f06f 030f 	mvn.w	r3, #15
 800a9aa:	e03c      	b.n	800aa26 <pbuf_take+0xfe>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	61fb      	str	r3, [r7, #28]
 800a9b0:	e027      	b.n	800aa02 <pbuf_take+0xda>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800a9b2:	69fb      	ldr	r3, [r7, #28]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d106      	bne.n	800a9c6 <pbuf_take+0x9e>
 800a9b8:	4b1d      	ldr	r3, [pc, #116]	; (800aa30 <pbuf_take+0x108>)
 800a9ba:	f240 428e 	movw	r2, #1166	; 0x48e
 800a9be:	4921      	ldr	r1, [pc, #132]	; (800aa44 <pbuf_take+0x11c>)
 800a9c0:	481d      	ldr	r0, [pc, #116]	; (800aa38 <pbuf_take+0x110>)
 800a9c2:	f00f feab 	bl	801a71c <iprintf>
    buf_copy_len = total_copy_len;
 800a9c6:	8b3b      	ldrh	r3, [r7, #24]
 800a9c8:	837b      	strh	r3, [r7, #26]
    if (buf_copy_len > p->len) {
 800a9ca:	69fb      	ldr	r3, [r7, #28]
 800a9cc:	895b      	ldrh	r3, [r3, #10]
 800a9ce:	8b7a      	ldrh	r2, [r7, #26]
 800a9d0:	429a      	cmp	r2, r3
 800a9d2:	d902      	bls.n	800a9da <pbuf_take+0xb2>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800a9d4:	69fb      	ldr	r3, [r7, #28]
 800a9d6:	895b      	ldrh	r3, [r3, #10]
 800a9d8:	837b      	strh	r3, [r7, #26]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char*)dataptr)[copied_total], buf_copy_len);
 800a9da:	69fb      	ldr	r3, [r7, #28]
 800a9dc:	6858      	ldr	r0, [r3, #4]
 800a9de:	8afb      	ldrh	r3, [r7, #22]
 800a9e0:	68ba      	ldr	r2, [r7, #8]
 800a9e2:	4413      	add	r3, r2
 800a9e4:	8b7a      	ldrh	r2, [r7, #26]
 800a9e6:	4619      	mov	r1, r3
 800a9e8:	f00f f855 	bl	8019a96 <memcpy>
    total_copy_len -= buf_copy_len;
 800a9ec:	8b3a      	ldrh	r2, [r7, #24]
 800a9ee:	8b7b      	ldrh	r3, [r7, #26]
 800a9f0:	1ad3      	subs	r3, r2, r3
 800a9f2:	833b      	strh	r3, [r7, #24]
    copied_total += buf_copy_len;
 800a9f4:	8afa      	ldrh	r2, [r7, #22]
 800a9f6:	8b7b      	ldrh	r3, [r7, #26]
 800a9f8:	4413      	add	r3, r2
 800a9fa:	82fb      	strh	r3, [r7, #22]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800a9fc:	69fb      	ldr	r3, [r7, #28]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	61fb      	str	r3, [r7, #28]
 800aa02:	8b3b      	ldrh	r3, [r7, #24]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d1d4      	bne.n	800a9b2 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800aa08:	8b3b      	ldrh	r3, [r7, #24]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d103      	bne.n	800aa16 <pbuf_take+0xee>
 800aa0e:	8afa      	ldrh	r2, [r7, #22]
 800aa10:	88fb      	ldrh	r3, [r7, #6]
 800aa12:	429a      	cmp	r2, r3
 800aa14:	d006      	beq.n	800aa24 <pbuf_take+0xfc>
 800aa16:	4b06      	ldr	r3, [pc, #24]	; (800aa30 <pbuf_take+0x108>)
 800aa18:	f240 4299 	movw	r2, #1177	; 0x499
 800aa1c:	490a      	ldr	r1, [pc, #40]	; (800aa48 <pbuf_take+0x120>)
 800aa1e:	4806      	ldr	r0, [pc, #24]	; (800aa38 <pbuf_take+0x110>)
 800aa20:	f00f fe7c 	bl	801a71c <iprintf>
  return ERR_OK;
 800aa24:	2300      	movs	r3, #0
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	3720      	adds	r7, #32
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}
 800aa2e:	bf00      	nop
 800aa30:	0801e630 	.word	0x0801e630
 800aa34:	0801eaa4 	.word	0x0801eaa4
 800aa38:	0801e67c 	.word	0x0801e67c
 800aa3c:	0801eabc 	.word	0x0801eabc
 800aa40:	0801ead8 	.word	0x0801ead8
 800aa44:	0801eaf8 	.word	0x0801eaf8
 800aa48:	0801eb10 	.word	0x0801eb10

0800aa4c <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b088      	sub	sp, #32
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	60f8      	str	r0, [r7, #12]
 800aa54:	60b9      	str	r1, [r7, #8]
 800aa56:	4611      	mov	r1, r2
 800aa58:	461a      	mov	r2, r3
 800aa5a:	460b      	mov	r3, r1
 800aa5c:	80fb      	strh	r3, [r7, #6]
 800aa5e:	4613      	mov	r3, r2
 800aa60:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf* q = pbuf_skip(buf, offset, &target_offset);
 800aa62:	f107 0210 	add.w	r2, r7, #16
 800aa66:	88bb      	ldrh	r3, [r7, #4]
 800aa68:	4619      	mov	r1, r3
 800aa6a:	68f8      	ldr	r0, [r7, #12]
 800aa6c:	f7ff ff48 	bl	800a900 <pbuf_skip>
 800aa70:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 800aa72:	69fb      	ldr	r3, [r7, #28]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d035      	beq.n	800aae4 <pbuf_take_at+0x98>
 800aa78:	69fb      	ldr	r3, [r7, #28]
 800aa7a:	891b      	ldrh	r3, [r3, #8]
 800aa7c:	461a      	mov	r2, r3
 800aa7e:	8a3b      	ldrh	r3, [r7, #16]
 800aa80:	4619      	mov	r1, r3
 800aa82:	88fb      	ldrh	r3, [r7, #6]
 800aa84:	440b      	add	r3, r1
 800aa86:	429a      	cmp	r2, r3
 800aa88:	db2c      	blt.n	800aae4 <pbuf_take_at+0x98>
    u16_t remaining_len = len;
 800aa8a:	88fb      	ldrh	r3, [r7, #6]
 800aa8c:	837b      	strh	r3, [r7, #26]
    const u8_t* src_ptr = (const u8_t*)dataptr;
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len = LWIP_MIN(q->len - target_offset, len);
 800aa92:	88fa      	ldrh	r2, [r7, #6]
 800aa94:	69fb      	ldr	r3, [r7, #28]
 800aa96:	895b      	ldrh	r3, [r3, #10]
 800aa98:	4619      	mov	r1, r3
 800aa9a:	8a3b      	ldrh	r3, [r7, #16]
 800aa9c:	1acb      	subs	r3, r1, r3
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	bfa8      	it	ge
 800aaa2:	4613      	movge	r3, r2
 800aaa4:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t*)q->payload) + target_offset, dataptr, first_copy_len);
 800aaa6:	69fb      	ldr	r3, [r7, #28]
 800aaa8:	685b      	ldr	r3, [r3, #4]
 800aaaa:	8a3a      	ldrh	r2, [r7, #16]
 800aaac:	4413      	add	r3, r2
 800aaae:	8a7a      	ldrh	r2, [r7, #18]
 800aab0:	68b9      	ldr	r1, [r7, #8]
 800aab2:	4618      	mov	r0, r3
 800aab4:	f00e ffef 	bl	8019a96 <memcpy>
    remaining_len -= first_copy_len;
 800aab8:	8b7a      	ldrh	r2, [r7, #26]
 800aaba:	8a7b      	ldrh	r3, [r7, #18]
 800aabc:	1ad3      	subs	r3, r2, r3
 800aabe:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 800aac0:	8a7b      	ldrh	r3, [r7, #18]
 800aac2:	697a      	ldr	r2, [r7, #20]
 800aac4:	4413      	add	r3, r2
 800aac6:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 800aac8:	8b7b      	ldrh	r3, [r7, #26]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d008      	beq.n	800aae0 <pbuf_take_at+0x94>
      return pbuf_take(q->next, src_ptr, remaining_len);
 800aace:	69fb      	ldr	r3, [r7, #28]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	8b7a      	ldrh	r2, [r7, #26]
 800aad4:	6979      	ldr	r1, [r7, #20]
 800aad6:	4618      	mov	r0, r3
 800aad8:	f7ff ff26 	bl	800a928 <pbuf_take>
 800aadc:	4603      	mov	r3, r0
 800aade:	e003      	b.n	800aae8 <pbuf_take_at+0x9c>
    }
    return ERR_OK;
 800aae0:	2300      	movs	r3, #0
 800aae2:	e001      	b.n	800aae8 <pbuf_take_at+0x9c>
  }
  return ERR_MEM;
 800aae4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3720      	adds	r7, #32
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}

0800aaf0 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf* p, u16_t offset, u8_t data)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b084      	sub	sp, #16
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	460b      	mov	r3, r1
 800aafa:	807b      	strh	r3, [r7, #2]
 800aafc:	4613      	mov	r3, r2
 800aafe:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf* q = pbuf_skip(p, offset, &q_idx);
 800ab00:	f107 020a 	add.w	r2, r7, #10
 800ab04:	887b      	ldrh	r3, [r7, #2]
 800ab06:	4619      	mov	r1, r3
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f7ff fef9 	bl	800a900 <pbuf_skip>
 800ab0e:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d00a      	beq.n	800ab2c <pbuf_put_at+0x3c>
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	895a      	ldrh	r2, [r3, #10]
 800ab1a:	897b      	ldrh	r3, [r7, #10]
 800ab1c:	429a      	cmp	r2, r3
 800ab1e:	d905      	bls.n	800ab2c <pbuf_put_at+0x3c>
    ((u8_t*)q->payload)[q_idx] = data;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	685b      	ldr	r3, [r3, #4]
 800ab24:	897a      	ldrh	r2, [r7, #10]
 800ab26:	4413      	add	r3, r2
 800ab28:	787a      	ldrb	r2, [r7, #1]
 800ab2a:	701a      	strb	r2, [r3, #0]
  }
}
 800ab2c:	bf00      	nop
 800ab2e:	3710      	adds	r7, #16
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}

0800ab34 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800ab34:	b480      	push	{r7}
 800ab36:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800ab38:	bf00      	nop
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bc80      	pop	{r7}
 800ab3e:	4770      	bx	lr

0800ab40 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800ab44:	f000 fdf0 	bl	800b728 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800ab48:	4b07      	ldr	r3, [pc, #28]	; (800ab68 <tcp_tmr+0x28>)
 800ab4a:	781b      	ldrb	r3, [r3, #0]
 800ab4c:	3301      	adds	r3, #1
 800ab4e:	b2da      	uxtb	r2, r3
 800ab50:	4b05      	ldr	r3, [pc, #20]	; (800ab68 <tcp_tmr+0x28>)
 800ab52:	701a      	strb	r2, [r3, #0]
 800ab54:	4b04      	ldr	r3, [pc, #16]	; (800ab68 <tcp_tmr+0x28>)
 800ab56:	781b      	ldrb	r3, [r3, #0]
 800ab58:	f003 0301 	and.w	r3, r3, #1
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d001      	beq.n	800ab64 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800ab60:	f000 fb22 	bl	800b1a8 <tcp_slowtmr>
  }
}
 800ab64:	bf00      	nop
 800ab66:	bd80      	pop	{r7, pc}
 800ab68:	20004bfd 	.word	0x20004bfd

0800ab6c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b085      	sub	sp, #20
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	60fb      	str	r3, [r7, #12]
 800ab7a:	e00a      	b.n	800ab92 <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ab80:	683a      	ldr	r2, [r7, #0]
 800ab82:	429a      	cmp	r2, r3
 800ab84:	d102      	bne.n	800ab8c <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	68db      	ldr	r3, [r3, #12]
 800ab90:	60fb      	str	r3, [r7, #12]
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d1f1      	bne.n	800ab7c <tcp_remove_listener+0x10>
      }
   }
}
 800ab98:	bf00      	nop
 800ab9a:	3714      	adds	r7, #20
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bc80      	pop	{r7}
 800aba0:	4770      	bx	lr
	...

0800aba4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b084      	sub	sp, #16
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d105      	bne.n	800abbe <tcp_listen_closed+0x1a>
 800abb2:	4b13      	ldr	r3, [pc, #76]	; (800ac00 <tcp_listen_closed+0x5c>)
 800abb4:	22c0      	movs	r2, #192	; 0xc0
 800abb6:	4913      	ldr	r1, [pc, #76]	; (800ac04 <tcp_listen_closed+0x60>)
 800abb8:	4813      	ldr	r0, [pc, #76]	; (800ac08 <tcp_listen_closed+0x64>)
 800abba:	f00f fdaf 	bl	801a71c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	7d1b      	ldrb	r3, [r3, #20]
 800abc2:	2b01      	cmp	r3, #1
 800abc4:	d005      	beq.n	800abd2 <tcp_listen_closed+0x2e>
 800abc6:	4b0e      	ldr	r3, [pc, #56]	; (800ac00 <tcp_listen_closed+0x5c>)
 800abc8:	22c1      	movs	r2, #193	; 0xc1
 800abca:	4910      	ldr	r1, [pc, #64]	; (800ac0c <tcp_listen_closed+0x68>)
 800abcc:	480e      	ldr	r0, [pc, #56]	; (800ac08 <tcp_listen_closed+0x64>)
 800abce:	f00f fda5 	bl	801a71c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800abd2:	2301      	movs	r3, #1
 800abd4:	60fb      	str	r3, [r7, #12]
 800abd6:	e00b      	b.n	800abf0 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800abd8:	4a0d      	ldr	r2, [pc, #52]	; (800ac10 <tcp_listen_closed+0x6c>)
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	6879      	ldr	r1, [r7, #4]
 800abe4:	4618      	mov	r0, r3
 800abe6:	f7ff ffc1 	bl	800ab6c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	3301      	adds	r3, #1
 800abee:	60fb      	str	r3, [r7, #12]
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	2b03      	cmp	r3, #3
 800abf4:	d9f0      	bls.n	800abd8 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800abf6:	bf00      	nop
 800abf8:	3710      	adds	r7, #16
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd80      	pop	{r7, pc}
 800abfe:	bf00      	nop
 800ac00:	0801ebb4 	.word	0x0801ebb4
 800ac04:	0801ebe4 	.word	0x0801ebe4
 800ac08:	0801ebf0 	.word	0x0801ebf0
 800ac0c:	0801ec18 	.word	0x0801ec18
 800ac10:	08021cd8 	.word	0x08021cd8

0800ac14 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800ac14:	b5b0      	push	{r4, r5, r7, lr}
 800ac16:	b086      	sub	sp, #24
 800ac18:	af02      	add	r7, sp, #8
 800ac1a:	6078      	str	r0, [r7, #4]
 800ac1c:	460b      	mov	r3, r1
 800ac1e:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800ac20:	78fb      	ldrb	r3, [r7, #3]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d075      	beq.n	800ad12 <tcp_close_shutdown+0xfe>
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	7d1b      	ldrb	r3, [r3, #20]
 800ac2a:	2b04      	cmp	r3, #4
 800ac2c:	d003      	beq.n	800ac36 <tcp_close_shutdown+0x22>
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	7d1b      	ldrb	r3, [r3, #20]
 800ac32:	2b07      	cmp	r3, #7
 800ac34:	d16d      	bne.n	800ad12 <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d104      	bne.n	800ac48 <tcp_close_shutdown+0x34>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac42:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ac46:	d064      	beq.n	800ad12 <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	7e9b      	ldrb	r3, [r3, #26]
 800ac4c:	f003 0310 	and.w	r3, r3, #16
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d106      	bne.n	800ac62 <tcp_close_shutdown+0x4e>
 800ac54:	4b59      	ldr	r3, [pc, #356]	; (800adbc <tcp_close_shutdown+0x1a8>)
 800ac56:	f240 120f 	movw	r2, #271	; 0x10f
 800ac5a:	4959      	ldr	r1, [pc, #356]	; (800adc0 <tcp_close_shutdown+0x1ac>)
 800ac5c:	4859      	ldr	r0, [pc, #356]	; (800adc4 <tcp_close_shutdown+0x1b0>)
 800ac5e:	f00f fd5d 	bl	801a71c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800ac6a:	687c      	ldr	r4, [r7, #4]
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	1d1d      	adds	r5, r3, #4
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	8adb      	ldrh	r3, [r3, #22]
 800ac74:	687a      	ldr	r2, [r7, #4]
 800ac76:	8b12      	ldrh	r2, [r2, #24]
 800ac78:	9201      	str	r2, [sp, #4]
 800ac7a:	9300      	str	r3, [sp, #0]
 800ac7c:	462b      	mov	r3, r5
 800ac7e:	4622      	mov	r2, r4
 800ac80:	f004 f85e 	bl	800ed40 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f000 ffc5 	bl	800bc14 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800ac8a:	4b4f      	ldr	r3, [pc, #316]	; (800adc8 <tcp_close_shutdown+0x1b4>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	687a      	ldr	r2, [r7, #4]
 800ac90:	429a      	cmp	r2, r3
 800ac92:	d105      	bne.n	800aca0 <tcp_close_shutdown+0x8c>
 800ac94:	4b4c      	ldr	r3, [pc, #304]	; (800adc8 <tcp_close_shutdown+0x1b4>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	68db      	ldr	r3, [r3, #12]
 800ac9a:	4a4b      	ldr	r2, [pc, #300]	; (800adc8 <tcp_close_shutdown+0x1b4>)
 800ac9c:	6013      	str	r3, [r2, #0]
 800ac9e:	e013      	b.n	800acc8 <tcp_close_shutdown+0xb4>
 800aca0:	4b49      	ldr	r3, [pc, #292]	; (800adc8 <tcp_close_shutdown+0x1b4>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	60fb      	str	r3, [r7, #12]
 800aca6:	e00c      	b.n	800acc2 <tcp_close_shutdown+0xae>
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	68db      	ldr	r3, [r3, #12]
 800acac:	687a      	ldr	r2, [r7, #4]
 800acae:	429a      	cmp	r2, r3
 800acb0:	d104      	bne.n	800acbc <tcp_close_shutdown+0xa8>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	68da      	ldr	r2, [r3, #12]
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	60da      	str	r2, [r3, #12]
 800acba:	e005      	b.n	800acc8 <tcp_close_shutdown+0xb4>
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	68db      	ldr	r3, [r3, #12]
 800acc0:	60fb      	str	r3, [r7, #12]
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d1ef      	bne.n	800aca8 <tcp_close_shutdown+0x94>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2200      	movs	r2, #0
 800accc:	60da      	str	r2, [r3, #12]
 800acce:	4b3f      	ldr	r3, [pc, #252]	; (800adcc <tcp_close_shutdown+0x1b8>)
 800acd0:	2201      	movs	r2, #1
 800acd2:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	7d1b      	ldrb	r3, [r3, #20]
 800acd8:	2b04      	cmp	r3, #4
 800acda:	d10c      	bne.n	800acf6 <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	220a      	movs	r2, #10
 800ace0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ace2:	4b3b      	ldr	r3, [pc, #236]	; (800add0 <tcp_close_shutdown+0x1bc>)
 800ace4:	681a      	ldr	r2, [r3, #0]
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	60da      	str	r2, [r3, #12]
 800acea:	4a39      	ldr	r2, [pc, #228]	; (800add0 <tcp_close_shutdown+0x1bc>)
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	6013      	str	r3, [r2, #0]
 800acf0:	f004 fa76 	bl	800f1e0 <tcp_timer_needed>
 800acf4:	e00b      	b.n	800ad0e <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 800acf6:	4b37      	ldr	r3, [pc, #220]	; (800add4 <tcp_close_shutdown+0x1c0>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	687a      	ldr	r2, [r7, #4]
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d102      	bne.n	800ad06 <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 800ad00:	f003 fae8 	bl	800e2d4 <tcp_trigger_input_pcb_close>
 800ad04:	e003      	b.n	800ad0e <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 800ad06:	6879      	ldr	r1, [r7, #4]
 800ad08:	2001      	movs	r0, #1
 800ad0a:	f7fe fd91 	bl	8009830 <memp_free>
        }
      }
      return ERR_OK;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	e050      	b.n	800adb4 <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	7d1b      	ldrb	r3, [r3, #20]
 800ad16:	2b01      	cmp	r3, #1
 800ad18:	d02e      	beq.n	800ad78 <tcp_close_shutdown+0x164>
 800ad1a:	2b02      	cmp	r3, #2
 800ad1c:	d038      	beq.n	800ad90 <tcp_close_shutdown+0x17c>
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d142      	bne.n	800ada8 <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	8adb      	ldrh	r3, [r3, #22]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d021      	beq.n	800ad6e <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800ad2a:	4b2b      	ldr	r3, [pc, #172]	; (800add8 <tcp_close_shutdown+0x1c4>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	687a      	ldr	r2, [r7, #4]
 800ad30:	429a      	cmp	r2, r3
 800ad32:	d105      	bne.n	800ad40 <tcp_close_shutdown+0x12c>
 800ad34:	4b28      	ldr	r3, [pc, #160]	; (800add8 <tcp_close_shutdown+0x1c4>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	68db      	ldr	r3, [r3, #12]
 800ad3a:	4a27      	ldr	r2, [pc, #156]	; (800add8 <tcp_close_shutdown+0x1c4>)
 800ad3c:	6013      	str	r3, [r2, #0]
 800ad3e:	e013      	b.n	800ad68 <tcp_close_shutdown+0x154>
 800ad40:	4b25      	ldr	r3, [pc, #148]	; (800add8 <tcp_close_shutdown+0x1c4>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	60bb      	str	r3, [r7, #8]
 800ad46:	e00c      	b.n	800ad62 <tcp_close_shutdown+0x14e>
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	68db      	ldr	r3, [r3, #12]
 800ad4c:	687a      	ldr	r2, [r7, #4]
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	d104      	bne.n	800ad5c <tcp_close_shutdown+0x148>
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	68da      	ldr	r2, [r3, #12]
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	60da      	str	r2, [r3, #12]
 800ad5a:	e005      	b.n	800ad68 <tcp_close_shutdown+0x154>
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	68db      	ldr	r3, [r3, #12]
 800ad60:	60bb      	str	r3, [r7, #8]
 800ad62:	68bb      	ldr	r3, [r7, #8]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d1ef      	bne.n	800ad48 <tcp_close_shutdown+0x134>
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 800ad6e:	6879      	ldr	r1, [r7, #4]
 800ad70:	2001      	movs	r0, #1
 800ad72:	f7fe fd5d 	bl	8009830 <memp_free>
    break;
 800ad76:	e01c      	b.n	800adb2 <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f7ff ff13 	bl	800aba4 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800ad7e:	6879      	ldr	r1, [r7, #4]
 800ad80:	4816      	ldr	r0, [pc, #88]	; (800addc <tcp_close_shutdown+0x1c8>)
 800ad82:	f000 ff89 	bl	800bc98 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800ad86:	6879      	ldr	r1, [r7, #4]
 800ad88:	2002      	movs	r0, #2
 800ad8a:	f7fe fd51 	bl	8009830 <memp_free>
    break;
 800ad8e:	e010      	b.n	800adb2 <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 800ad90:	6879      	ldr	r1, [r7, #4]
 800ad92:	480d      	ldr	r0, [pc, #52]	; (800adc8 <tcp_close_shutdown+0x1b4>)
 800ad94:	f000 ff80 	bl	800bc98 <tcp_pcb_remove>
 800ad98:	4b0c      	ldr	r3, [pc, #48]	; (800adcc <tcp_close_shutdown+0x1b8>)
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 800ad9e:	6879      	ldr	r1, [r7, #4]
 800ada0:	2001      	movs	r0, #1
 800ada2:	f7fe fd45 	bl	8009830 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 800ada6:	e004      	b.n	800adb2 <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f000 f819 	bl	800ade0 <tcp_close_shutdown_fin>
 800adae:	4603      	mov	r3, r0
 800adb0:	e000      	b.n	800adb4 <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 800adb2:	2300      	movs	r3, #0
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	3710      	adds	r7, #16
 800adb8:	46bd      	mov	sp, r7
 800adba:	bdb0      	pop	{r4, r5, r7, pc}
 800adbc:	0801ebb4 	.word	0x0801ebb4
 800adc0:	0801ec30 	.word	0x0801ec30
 800adc4:	0801ebf0 	.word	0x0801ebf0
 800adc8:	2000b7fc 	.word	0x2000b7fc
 800adcc:	2000b7f8 	.word	0x2000b7f8
 800add0:	2000b80c 	.word	0x2000b80c
 800add4:	2000b810 	.word	0x2000b810
 800add8:	2000b808 	.word	0x2000b808
 800addc:	2000b804 	.word	0x2000b804

0800ade0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b084      	sub	sp, #16
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d106      	bne.n	800adfc <tcp_close_shutdown_fin+0x1c>
 800adee:	4b2c      	ldr	r3, [pc, #176]	; (800aea0 <tcp_close_shutdown_fin+0xc0>)
 800adf0:	f240 124d 	movw	r2, #333	; 0x14d
 800adf4:	492b      	ldr	r1, [pc, #172]	; (800aea4 <tcp_close_shutdown_fin+0xc4>)
 800adf6:	482c      	ldr	r0, [pc, #176]	; (800aea8 <tcp_close_shutdown_fin+0xc8>)
 800adf8:	f00f fc90 	bl	801a71c <iprintf>

  switch (pcb->state) {
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	7d1b      	ldrb	r3, [r3, #20]
 800ae00:	2b04      	cmp	r3, #4
 800ae02:	d010      	beq.n	800ae26 <tcp_close_shutdown_fin+0x46>
 800ae04:	2b07      	cmp	r3, #7
 800ae06:	d01b      	beq.n	800ae40 <tcp_close_shutdown_fin+0x60>
 800ae08:	2b03      	cmp	r3, #3
 800ae0a:	d126      	bne.n	800ae5a <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f003 faed 	bl	800e3ec <tcp_send_fin>
 800ae12:	4603      	mov	r3, r0
 800ae14:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ae16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d11f      	bne.n	800ae5e <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2205      	movs	r2, #5
 800ae22:	751a      	strb	r2, [r3, #20]
    }
    break;
 800ae24:	e01b      	b.n	800ae5e <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f003 fae0 	bl	800e3ec <tcp_send_fin>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ae30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d114      	bne.n	800ae62 <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2205      	movs	r2, #5
 800ae3c:	751a      	strb	r2, [r3, #20]
    }
    break;
 800ae3e:	e010      	b.n	800ae62 <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f003 fad3 	bl	800e3ec <tcp_send_fin>
 800ae46:	4603      	mov	r3, r0
 800ae48:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ae4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d109      	bne.n	800ae66 <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2209      	movs	r2, #9
 800ae56:	751a      	strb	r2, [r3, #20]
    }
    break;
 800ae58:	e005      	b.n	800ae66 <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	e01c      	b.n	800ae98 <tcp_close_shutdown_fin+0xb8>
    break;
 800ae5e:	bf00      	nop
 800ae60:	e002      	b.n	800ae68 <tcp_close_shutdown_fin+0x88>
    break;
 800ae62:	bf00      	nop
 800ae64:	e000      	b.n	800ae68 <tcp_close_shutdown_fin+0x88>
    break;
 800ae66:	bf00      	nop
  }

  if (err == ERR_OK) {
 800ae68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d103      	bne.n	800ae78 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800ae70:	6878      	ldr	r0, [r7, #4]
 800ae72:	f003 fcdb 	bl	800e82c <tcp_output>
 800ae76:	e00d      	b.n	800ae94 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800ae78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae80:	d108      	bne.n	800ae94 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	7e9b      	ldrb	r3, [r3, #26]
 800ae86:	f043 0308 	orr.w	r3, r3, #8
 800ae8a:	b2da      	uxtb	r2, r3
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800ae90:	2300      	movs	r3, #0
 800ae92:	e001      	b.n	800ae98 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800ae94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3710      	adds	r7, #16
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}
 800aea0:	0801ebb4 	.word	0x0801ebb4
 800aea4:	0801ebe4 	.word	0x0801ebe4
 800aea8:	0801ebf0 	.word	0x0801ebf0

0800aeac <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b082      	sub	sp, #8
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	7d1b      	ldrb	r3, [r3, #20]
 800aeb8:	2b01      	cmp	r3, #1
 800aeba:	d006      	beq.n	800aeca <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	7e9b      	ldrb	r3, [r3, #26]
 800aec0:	f043 0310 	orr.w	r3, r3, #16
 800aec4:	b2da      	uxtb	r2, r3
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800aeca:	2101      	movs	r1, #1
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f7ff fea1 	bl	800ac14 <tcp_close_shutdown>
 800aed2:	4603      	mov	r3, r0
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	3708      	adds	r7, #8
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}

0800aedc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b08c      	sub	sp, #48	; 0x30
 800aee0:	af02      	add	r7, sp, #8
 800aee2:	6078      	str	r0, [r7, #4]
 800aee4:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	7d1b      	ldrb	r3, [r3, #20]
 800aeea:	2b01      	cmp	r3, #1
 800aeec:	d106      	bne.n	800aefc <tcp_abandon+0x20>
 800aeee:	4b4d      	ldr	r3, [pc, #308]	; (800b024 <tcp_abandon+0x148>)
 800aef0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800aef4:	494c      	ldr	r1, [pc, #304]	; (800b028 <tcp_abandon+0x14c>)
 800aef6:	484d      	ldr	r0, [pc, #308]	; (800b02c <tcp_abandon+0x150>)
 800aef8:	f00f fc10 	bl	801a71c <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	7d1b      	ldrb	r3, [r3, #20]
 800af00:	2b0a      	cmp	r3, #10
 800af02:	d108      	bne.n	800af16 <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800af04:	6879      	ldr	r1, [r7, #4]
 800af06:	484a      	ldr	r0, [pc, #296]	; (800b030 <tcp_abandon+0x154>)
 800af08:	f000 fec6 	bl	800bc98 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800af0c:	6879      	ldr	r1, [r7, #4]
 800af0e:	2001      	movs	r0, #1
 800af10:	f7fe fc8e 	bl	8009830 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 800af14:	e081      	b.n	800b01a <tcp_abandon+0x13e>
    int send_rst = 0;
 800af16:	2300      	movs	r3, #0
 800af18:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800af1a:	2300      	movs	r3, #0
 800af1c:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af22:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af28:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af30:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	691b      	ldr	r3, [r3, #16]
 800af36:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	7d1b      	ldrb	r3, [r3, #20]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d126      	bne.n	800af8e <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	8adb      	ldrh	r3, [r3, #22]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d02e      	beq.n	800afa6 <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800af48:	4b3a      	ldr	r3, [pc, #232]	; (800b034 <tcp_abandon+0x158>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	687a      	ldr	r2, [r7, #4]
 800af4e:	429a      	cmp	r2, r3
 800af50:	d105      	bne.n	800af5e <tcp_abandon+0x82>
 800af52:	4b38      	ldr	r3, [pc, #224]	; (800b034 <tcp_abandon+0x158>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	68db      	ldr	r3, [r3, #12]
 800af58:	4a36      	ldr	r2, [pc, #216]	; (800b034 <tcp_abandon+0x158>)
 800af5a:	6013      	str	r3, [r2, #0]
 800af5c:	e013      	b.n	800af86 <tcp_abandon+0xaa>
 800af5e:	4b35      	ldr	r3, [pc, #212]	; (800b034 <tcp_abandon+0x158>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	61fb      	str	r3, [r7, #28]
 800af64:	e00c      	b.n	800af80 <tcp_abandon+0xa4>
 800af66:	69fb      	ldr	r3, [r7, #28]
 800af68:	68db      	ldr	r3, [r3, #12]
 800af6a:	687a      	ldr	r2, [r7, #4]
 800af6c:	429a      	cmp	r2, r3
 800af6e:	d104      	bne.n	800af7a <tcp_abandon+0x9e>
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	68da      	ldr	r2, [r3, #12]
 800af74:	69fb      	ldr	r3, [r7, #28]
 800af76:	60da      	str	r2, [r3, #12]
 800af78:	e005      	b.n	800af86 <tcp_abandon+0xaa>
 800af7a:	69fb      	ldr	r3, [r7, #28]
 800af7c:	68db      	ldr	r3, [r3, #12]
 800af7e:	61fb      	str	r3, [r7, #28]
 800af80:	69fb      	ldr	r3, [r7, #28]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d1ef      	bne.n	800af66 <tcp_abandon+0x8a>
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2200      	movs	r2, #0
 800af8a:	60da      	str	r2, [r3, #12]
 800af8c:	e00b      	b.n	800afa6 <tcp_abandon+0xca>
      send_rst = reset;
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	8adb      	ldrh	r3, [r3, #22]
 800af96:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800af98:	6879      	ldr	r1, [r7, #4]
 800af9a:	4827      	ldr	r0, [pc, #156]	; (800b038 <tcp_abandon+0x15c>)
 800af9c:	f000 fe7c 	bl	800bc98 <tcp_pcb_remove>
 800afa0:	4b26      	ldr	r3, [pc, #152]	; (800b03c <tcp_abandon+0x160>)
 800afa2:	2201      	movs	r2, #1
 800afa4:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d004      	beq.n	800afb8 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afb2:	4618      	mov	r0, r3
 800afb4:	f000 fc85 	bl	800b8c2 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d004      	beq.n	800afca <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800afc4:	4618      	mov	r0, r3
 800afc6:	f000 fc7c 	bl	800b8c2 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d004      	beq.n	800afdc <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afd6:	4618      	mov	r0, r3
 800afd8:	f000 fc73 	bl	800b8c2 <tcp_segs_free>
    if (send_rst) {
 800afdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d00c      	beq.n	800affc <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800afe2:	687a      	ldr	r2, [r7, #4]
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	1d19      	adds	r1, r3, #4
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	8b1b      	ldrh	r3, [r3, #24]
 800afec:	9301      	str	r3, [sp, #4]
 800afee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aff0:	9300      	str	r3, [sp, #0]
 800aff2:	460b      	mov	r3, r1
 800aff4:	6979      	ldr	r1, [r7, #20]
 800aff6:	69b8      	ldr	r0, [r7, #24]
 800aff8:	f003 fea2 	bl	800ed40 <tcp_rst>
    last_state = pcb->state;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	7d1b      	ldrb	r3, [r3, #20]
 800b000:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 800b002:	6879      	ldr	r1, [r7, #4]
 800b004:	2001      	movs	r0, #1
 800b006:	f7fe fc13 	bl	8009830 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d004      	beq.n	800b01a <tcp_abandon+0x13e>
 800b010:	693b      	ldr	r3, [r7, #16]
 800b012:	f06f 010c 	mvn.w	r1, #12
 800b016:	68f8      	ldr	r0, [r7, #12]
 800b018:	4798      	blx	r3
}
 800b01a:	bf00      	nop
 800b01c:	3728      	adds	r7, #40	; 0x28
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}
 800b022:	bf00      	nop
 800b024:	0801ebb4 	.word	0x0801ebb4
 800b028:	0801ec4c 	.word	0x0801ec4c
 800b02c:	0801ebf0 	.word	0x0801ebf0
 800b030:	2000b80c 	.word	0x2000b80c
 800b034:	2000b808 	.word	0x2000b808
 800b038:	2000b7fc 	.word	0x2000b7fc
 800b03c:	2000b7f8 	.word	0x2000b7f8

0800b040 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800b040:	b580      	push	{r7, lr}
 800b042:	b082      	sub	sp, #8
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800b048:	2101      	movs	r1, #1
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f7ff ff46 	bl	800aedc <tcp_abandon>
}
 800b050:	bf00      	nop
 800b052:	3708      	adds	r7, #8
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}

0800b058 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b084      	sub	sp, #16
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b064:	687a      	ldr	r2, [r7, #4]
 800b066:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800b068:	4413      	add	r3, r2
 800b06a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b070:	687a      	ldr	r2, [r7, #4]
 800b072:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800b074:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800b078:	bf28      	it	cs
 800b07a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800b07e:	b292      	uxth	r2, r2
 800b080:	4413      	add	r3, r2
 800b082:	68fa      	ldr	r2, [r7, #12]
 800b084:	1ad3      	subs	r3, r2, r3
 800b086:	2b00      	cmp	r3, #0
 800b088:	db08      	blt.n	800b09c <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b096:	68fa      	ldr	r2, [r7, #12]
 800b098:	1ad3      	subs	r3, r2, r3
 800b09a:	e020      	b.n	800b0de <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0a4:	1ad3      	subs	r3, r2, r3
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	dd03      	ble.n	800b0b2 <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b0b0:	e014      	b.n	800b0dc <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ba:	1ad3      	subs	r3, r2, r3
 800b0bc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0c4:	d306      	bcc.n	800b0d4 <tcp_update_rcv_ann_wnd+0x7c>
 800b0c6:	4b08      	ldr	r3, [pc, #32]	; (800b0e8 <tcp_update_rcv_ann_wnd+0x90>)
 800b0c8:	f44f 7242 	mov.w	r2, #776	; 0x308
 800b0cc:	4907      	ldr	r1, [pc, #28]	; (800b0ec <tcp_update_rcv_ann_wnd+0x94>)
 800b0ce:	4808      	ldr	r0, [pc, #32]	; (800b0f0 <tcp_update_rcv_ann_wnd+0x98>)
 800b0d0:	f00f fb24 	bl	801a71c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	b29a      	uxth	r2, r3
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800b0dc:	2300      	movs	r3, #0
  }
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3710      	adds	r7, #16
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}
 800b0e6:	bf00      	nop
 800b0e8:	0801ebb4 	.word	0x0801ebb4
 800b0ec:	0801eccc 	.word	0x0801eccc
 800b0f0:	0801ebf0 	.word	0x0801ebf0

0800b0f4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b084      	sub	sp, #16
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
 800b0fc:	460b      	mov	r3, r1
 800b0fe:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	7d1b      	ldrb	r3, [r3, #20]
 800b104:	2b01      	cmp	r3, #1
 800b106:	d106      	bne.n	800b116 <tcp_recved+0x22>
 800b108:	4b23      	ldr	r3, [pc, #140]	; (800b198 <tcp_recved+0xa4>)
 800b10a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800b10e:	4923      	ldr	r1, [pc, #140]	; (800b19c <tcp_recved+0xa8>)
 800b110:	4823      	ldr	r0, [pc, #140]	; (800b1a0 <tcp_recved+0xac>)
 800b112:	f00f fb03 	bl	801a71c <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800b11a:	887b      	ldrh	r3, [r7, #2]
 800b11c:	4413      	add	r3, r2
 800b11e:	b29a      	uxth	r2, r3
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b128:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b12c:	d904      	bls.n	800b138 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800b134:	851a      	strh	r2, [r3, #40]	; 0x28
 800b136:	e017      	b.n	800b168 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d113      	bne.n	800b168 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	7d1b      	ldrb	r3, [r3, #20]
 800b144:	2b07      	cmp	r3, #7
 800b146:	d003      	beq.n	800b150 <tcp_recved+0x5c>
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	7d1b      	ldrb	r3, [r3, #20]
 800b14c:	2b09      	cmp	r3, #9
 800b14e:	d104      	bne.n	800b15a <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800b156:	851a      	strh	r2, [r3, #40]	; 0x28
 800b158:	e006      	b.n	800b168 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800b15a:	4b0f      	ldr	r3, [pc, #60]	; (800b198 <tcp_recved+0xa4>)
 800b15c:	f240 322d 	movw	r2, #813	; 0x32d
 800b160:	4910      	ldr	r1, [pc, #64]	; (800b1a4 <tcp_recved+0xb0>)
 800b162:	480f      	ldr	r0, [pc, #60]	; (800b1a0 <tcp_recved+0xac>)
 800b164:	f00f fada 	bl	801a71c <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	f7ff ff75 	bl	800b058 <tcp_update_rcv_ann_wnd>
 800b16e:	4603      	mov	r3, r0
 800b170:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800b178:	db09      	blt.n	800b18e <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	7e9b      	ldrb	r3, [r3, #26]
 800b17e:	f043 0302 	orr.w	r3, r3, #2
 800b182:	b2da      	uxtb	r2, r3
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f003 fb4f 	bl	800e82c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800b18e:	bf00      	nop
 800b190:	3710      	adds	r7, #16
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}
 800b196:	bf00      	nop
 800b198:	0801ebb4 	.word	0x0801ebb4
 800b19c:	0801ece8 	.word	0x0801ece8
 800b1a0:	0801ebf0 	.word	0x0801ebf0
 800b1a4:	0801ed10 	.word	0x0801ed10

0800b1a8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800b1a8:	b5b0      	push	{r4, r5, r7, lr}
 800b1aa:	b08c      	sub	sp, #48	; 0x30
 800b1ac:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 800b1b2:	4b97      	ldr	r3, [pc, #604]	; (800b410 <tcp_slowtmr+0x268>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	3301      	adds	r3, #1
 800b1b8:	4a95      	ldr	r2, [pc, #596]	; (800b410 <tcp_slowtmr+0x268>)
 800b1ba:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800b1bc:	4b95      	ldr	r3, [pc, #596]	; (800b414 <tcp_slowtmr+0x26c>)
 800b1be:	781b      	ldrb	r3, [r3, #0]
 800b1c0:	3301      	adds	r3, #1
 800b1c2:	b2da      	uxtb	r2, r3
 800b1c4:	4b93      	ldr	r3, [pc, #588]	; (800b414 <tcp_slowtmr+0x26c>)
 800b1c6:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 800b1cc:	4b92      	ldr	r3, [pc, #584]	; (800b418 <tcp_slowtmr+0x270>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800b1d2:	e227      	b.n	800b624 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800b1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d6:	7d1b      	ldrb	r3, [r3, #20]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d106      	bne.n	800b1ea <tcp_slowtmr+0x42>
 800b1dc:	4b8f      	ldr	r3, [pc, #572]	; (800b41c <tcp_slowtmr+0x274>)
 800b1de:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800b1e2:	498f      	ldr	r1, [pc, #572]	; (800b420 <tcp_slowtmr+0x278>)
 800b1e4:	488f      	ldr	r0, [pc, #572]	; (800b424 <tcp_slowtmr+0x27c>)
 800b1e6:	f00f fa99 	bl	801a71c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800b1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ec:	7d1b      	ldrb	r3, [r3, #20]
 800b1ee:	2b01      	cmp	r3, #1
 800b1f0:	d106      	bne.n	800b200 <tcp_slowtmr+0x58>
 800b1f2:	4b8a      	ldr	r3, [pc, #552]	; (800b41c <tcp_slowtmr+0x274>)
 800b1f4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800b1f8:	498b      	ldr	r1, [pc, #556]	; (800b428 <tcp_slowtmr+0x280>)
 800b1fa:	488a      	ldr	r0, [pc, #552]	; (800b424 <tcp_slowtmr+0x27c>)
 800b1fc:	f00f fa8e 	bl	801a71c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800b200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b202:	7d1b      	ldrb	r3, [r3, #20]
 800b204:	2b0a      	cmp	r3, #10
 800b206:	d106      	bne.n	800b216 <tcp_slowtmr+0x6e>
 800b208:	4b84      	ldr	r3, [pc, #528]	; (800b41c <tcp_slowtmr+0x274>)
 800b20a:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800b20e:	4987      	ldr	r1, [pc, #540]	; (800b42c <tcp_slowtmr+0x284>)
 800b210:	4884      	ldr	r0, [pc, #528]	; (800b424 <tcp_slowtmr+0x27c>)
 800b212:	f00f fa83 	bl	801a71c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800b216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b218:	7f5a      	ldrb	r2, [r3, #29]
 800b21a:	4b7e      	ldr	r3, [pc, #504]	; (800b414 <tcp_slowtmr+0x26c>)
 800b21c:	781b      	ldrb	r3, [r3, #0]
 800b21e:	429a      	cmp	r2, r3
 800b220:	d103      	bne.n	800b22a <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 800b222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b224:	68db      	ldr	r3, [r3, #12]
 800b226:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 800b228:	e1fc      	b.n	800b624 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 800b22a:	4b7a      	ldr	r3, [pc, #488]	; (800b414 <tcp_slowtmr+0x26c>)
 800b22c:	781a      	ldrb	r2, [r3, #0]
 800b22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b230:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 800b232:	2300      	movs	r3, #0
 800b234:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 800b236:	2300      	movs	r3, #0
 800b238:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800b23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b23c:	7d1b      	ldrb	r3, [r3, #20]
 800b23e:	2b02      	cmp	r3, #2
 800b240:	d108      	bne.n	800b254 <tcp_slowtmr+0xac>
 800b242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b244:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b248:	2b05      	cmp	r3, #5
 800b24a:	d903      	bls.n	800b254 <tcp_slowtmr+0xac>
      ++pcb_remove;
 800b24c:	7ffb      	ldrb	r3, [r7, #31]
 800b24e:	3301      	adds	r3, #1
 800b250:	77fb      	strb	r3, [r7, #31]
 800b252:	e0a2      	b.n	800b39a <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800b254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b256:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b25a:	2b0b      	cmp	r3, #11
 800b25c:	d903      	bls.n	800b266 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800b25e:	7ffb      	ldrb	r3, [r7, #31]
 800b260:	3301      	adds	r3, #1
 800b262:	77fb      	strb	r3, [r7, #31]
 800b264:	e099      	b.n	800b39a <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800b266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b268:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d032      	beq.n	800b2d6 <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800b270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b272:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800b276:	3b01      	subs	r3, #1
 800b278:	4a6d      	ldr	r2, [pc, #436]	; (800b430 <tcp_slowtmr+0x288>)
 800b27a:	5cd3      	ldrb	r3, [r2, r3]
 800b27c:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 800b27e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b280:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800b284:	7cfa      	ldrb	r2, [r7, #19]
 800b286:	429a      	cmp	r2, r3
 800b288:	d907      	bls.n	800b29a <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 800b28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b28c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800b290:	3301      	adds	r3, #1
 800b292:	b2da      	uxtb	r2, r3
 800b294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b296:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 800b29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b29c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800b2a0:	7cfa      	ldrb	r2, [r7, #19]
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	d879      	bhi.n	800b39a <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800b2a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b2a8:	f003 feda 	bl	800f060 <tcp_zero_window_probe>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d173      	bne.n	800b39a <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 800b2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800b2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2bc:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800b2c0:	2b06      	cmp	r3, #6
 800b2c2:	d86a      	bhi.n	800b39a <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 800b2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2c6:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800b2ca:	3301      	adds	r3, #1
 800b2cc:	b2da      	uxtb	r2, r3
 800b2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d0:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800b2d4:	e061      	b.n	800b39a <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 800b2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	db08      	blt.n	800b2f2 <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 800b2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b2e6:	b29b      	uxth	r3, r3
 800b2e8:	3301      	adds	r3, #1
 800b2ea:	b29b      	uxth	r3, r3
 800b2ec:	b21a      	sxth	r2, r3
 800b2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f0:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800b2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d04f      	beq.n	800b39a <tcp_slowtmr+0x1f2>
 800b2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2fc:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800b300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b302:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b306:	429a      	cmp	r2, r3
 800b308:	db47      	blt.n	800b39a <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 800b30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b30c:	7d1b      	ldrb	r3, [r3, #20]
 800b30e:	2b02      	cmp	r3, #2
 800b310:	d018      	beq.n	800b344 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 800b312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b314:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b318:	2b0c      	cmp	r3, #12
 800b31a:	bf28      	it	cs
 800b31c:	230c      	movcs	r3, #12
 800b31e:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800b320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b322:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800b326:	10db      	asrs	r3, r3, #3
 800b328:	b21b      	sxth	r3, r3
 800b32a:	461a      	mov	r2, r3
 800b32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b32e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800b332:	4413      	add	r3, r2
 800b334:	7dfa      	ldrb	r2, [r7, #23]
 800b336:	493f      	ldr	r1, [pc, #252]	; (800b434 <tcp_slowtmr+0x28c>)
 800b338:	5c8a      	ldrb	r2, [r1, r2]
 800b33a:	4093      	lsls	r3, r2
 800b33c:	b21a      	sxth	r2, r3
 800b33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b340:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 800b344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b346:	2200      	movs	r2, #0
 800b348:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800b34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b34c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b352:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b356:	4293      	cmp	r3, r2
 800b358:	bf28      	it	cs
 800b35a:	4613      	movcs	r3, r2
 800b35c:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 800b35e:	8abb      	ldrh	r3, [r7, #20]
 800b360:	085b      	lsrs	r3, r3, #1
 800b362:	b29a      	uxth	r2, r3
 800b364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b366:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800b36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b36c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b372:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b374:	005b      	lsls	r3, r3, #1
 800b376:	b29b      	uxth	r3, r3
 800b378:	429a      	cmp	r2, r3
 800b37a:	d206      	bcs.n	800b38a <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 800b37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b37e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b380:	005b      	lsls	r3, r3, #1
 800b382:	b29a      	uxth	r2, r3
 800b384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b386:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 800b38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b38c:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800b38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b390:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 800b394:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b396:	f003 fd49 	bl	800ee2c <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800b39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b39c:	7d1b      	ldrb	r3, [r3, #20]
 800b39e:	2b06      	cmp	r3, #6
 800b3a0:	d10f      	bne.n	800b3c2 <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800b3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a4:	7e9b      	ldrb	r3, [r3, #26]
 800b3a6:	f003 0310 	and.w	r3, r3, #16
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d009      	beq.n	800b3c2 <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b3ae:	4b18      	ldr	r3, [pc, #96]	; (800b410 <tcp_slowtmr+0x268>)
 800b3b0:	681a      	ldr	r2, [r3, #0]
 800b3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b4:	6a1b      	ldr	r3, [r3, #32]
 800b3b6:	1ad3      	subs	r3, r2, r3
 800b3b8:	2b28      	cmp	r3, #40	; 0x28
 800b3ba:	d902      	bls.n	800b3c2 <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800b3bc:	7ffb      	ldrb	r3, [r7, #31]
 800b3be:	3301      	adds	r3, #1
 800b3c0:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c4:	7a1b      	ldrb	r3, [r3, #8]
 800b3c6:	f003 0308 	and.w	r3, r3, #8
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d05d      	beq.n	800b48a <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 800b3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d0:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800b3d2:	2b04      	cmp	r3, #4
 800b3d4:	d003      	beq.n	800b3de <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 800b3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d8:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 800b3da:	2b07      	cmp	r3, #7
 800b3dc:	d155      	bne.n	800b48a <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b3de:	4b0c      	ldr	r3, [pc, #48]	; (800b410 <tcp_slowtmr+0x268>)
 800b3e0:	681a      	ldr	r2, [r3, #0]
 800b3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3e4:	6a1b      	ldr	r3, [r3, #32]
 800b3e6:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800b3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3ee:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800b3f2:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800b3f6:	4910      	ldr	r1, [pc, #64]	; (800b438 <tcp_slowtmr+0x290>)
 800b3f8:	fba1 1303 	umull	r1, r3, r1, r3
 800b3fc:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b3fe:	429a      	cmp	r2, r3
 800b400:	d91c      	bls.n	800b43c <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800b402:	7ffb      	ldrb	r3, [r7, #31]
 800b404:	3301      	adds	r3, #1
 800b406:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 800b408:	7fbb      	ldrb	r3, [r7, #30]
 800b40a:	3301      	adds	r3, #1
 800b40c:	77bb      	strb	r3, [r7, #30]
 800b40e:	e03c      	b.n	800b48a <tcp_slowtmr+0x2e2>
 800b410:	2000b800 	.word	0x2000b800
 800b414:	20004bfe 	.word	0x20004bfe
 800b418:	2000b7fc 	.word	0x2000b7fc
 800b41c:	0801ebb4 	.word	0x0801ebb4
 800b420:	0801ed64 	.word	0x0801ed64
 800b424:	0801ebf0 	.word	0x0801ebf0
 800b428:	0801ed90 	.word	0x0801ed90
 800b42c:	0801edbc 	.word	0x0801edbc
 800b430:	08021cd0 	.word	0x08021cd0
 800b434:	08021cc0 	.word	0x08021cc0
 800b438:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b43c:	4b97      	ldr	r3, [pc, #604]	; (800b69c <tcp_slowtmr+0x4f4>)
 800b43e:	681a      	ldr	r2, [r3, #0]
 800b440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b442:	6a1b      	ldr	r3, [r3, #32]
 800b444:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800b446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b448:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800b44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b44e:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800b452:	4618      	mov	r0, r3
 800b454:	4b92      	ldr	r3, [pc, #584]	; (800b6a0 <tcp_slowtmr+0x4f8>)
 800b456:	fb03 f300 	mul.w	r3, r3, r0
 800b45a:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 800b45c:	4991      	ldr	r1, [pc, #580]	; (800b6a4 <tcp_slowtmr+0x4fc>)
 800b45e:	fba1 1303 	umull	r1, r3, r1, r3
 800b462:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b464:	429a      	cmp	r2, r3
 800b466:	d910      	bls.n	800b48a <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 800b468:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b46a:	f003 fdbc 	bl	800efe6 <tcp_keepalive>
 800b46e:	4603      	mov	r3, r0
 800b470:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 800b472:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d107      	bne.n	800b48a <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 800b47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b47c:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800b480:	3301      	adds	r3, #1
 800b482:	b2da      	uxtb	r2, r3
 800b484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b486:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800b48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b48c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d016      	beq.n	800b4c0 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800b492:	4b82      	ldr	r3, [pc, #520]	; (800b69c <tcp_slowtmr+0x4f4>)
 800b494:	681a      	ldr	r2, [r3, #0]
 800b496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b498:	6a1b      	ldr	r3, [r3, #32]
 800b49a:	1ad2      	subs	r2, r2, r3
 800b49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b49e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800b4a2:	4619      	mov	r1, r3
 800b4a4:	460b      	mov	r3, r1
 800b4a6:	005b      	lsls	r3, r3, #1
 800b4a8:	440b      	add	r3, r1
 800b4aa:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d307      	bcc.n	800b4c0 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 800b4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	f000 fa04 	bl	800b8c2 <tcp_segs_free>
      pcb->ooseq = NULL;
 800b4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4bc:	2200      	movs	r2, #0
 800b4be:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800b4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c2:	7d1b      	ldrb	r3, [r3, #20]
 800b4c4:	2b03      	cmp	r3, #3
 800b4c6:	d109      	bne.n	800b4dc <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800b4c8:	4b74      	ldr	r3, [pc, #464]	; (800b69c <tcp_slowtmr+0x4f4>)
 800b4ca:	681a      	ldr	r2, [r3, #0]
 800b4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ce:	6a1b      	ldr	r3, [r3, #32]
 800b4d0:	1ad3      	subs	r3, r2, r3
 800b4d2:	2b28      	cmp	r3, #40	; 0x28
 800b4d4:	d902      	bls.n	800b4dc <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800b4d6:	7ffb      	ldrb	r3, [r7, #31]
 800b4d8:	3301      	adds	r3, #1
 800b4da:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800b4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4de:	7d1b      	ldrb	r3, [r3, #20]
 800b4e0:	2b09      	cmp	r3, #9
 800b4e2:	d109      	bne.n	800b4f8 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b4e4:	4b6d      	ldr	r3, [pc, #436]	; (800b69c <tcp_slowtmr+0x4f4>)
 800b4e6:	681a      	ldr	r2, [r3, #0]
 800b4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ea:	6a1b      	ldr	r3, [r3, #32]
 800b4ec:	1ad3      	subs	r3, r2, r3
 800b4ee:	2bf0      	cmp	r3, #240	; 0xf0
 800b4f0:	d902      	bls.n	800b4f8 <tcp_slowtmr+0x350>
        ++pcb_remove;
 800b4f2:	7ffb      	ldrb	r3, [r7, #31]
 800b4f4:	3301      	adds	r3, #1
 800b4f6:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b4f8:	7ffb      	ldrb	r3, [r7, #31]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d05d      	beq.n	800b5ba <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800b4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b500:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b504:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800b506:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b508:	f000 fb84 	bl	800bc14 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800b50c:	6a3b      	ldr	r3, [r7, #32]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d010      	beq.n	800b534 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800b512:	4b65      	ldr	r3, [pc, #404]	; (800b6a8 <tcp_slowtmr+0x500>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b518:	429a      	cmp	r2, r3
 800b51a:	d106      	bne.n	800b52a <tcp_slowtmr+0x382>
 800b51c:	4b63      	ldr	r3, [pc, #396]	; (800b6ac <tcp_slowtmr+0x504>)
 800b51e:	f240 4289 	movw	r2, #1161	; 0x489
 800b522:	4963      	ldr	r1, [pc, #396]	; (800b6b0 <tcp_slowtmr+0x508>)
 800b524:	4863      	ldr	r0, [pc, #396]	; (800b6b4 <tcp_slowtmr+0x50c>)
 800b526:	f00f f8f9 	bl	801a71c <iprintf>
        prev->next = pcb->next;
 800b52a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b52c:	68da      	ldr	r2, [r3, #12]
 800b52e:	6a3b      	ldr	r3, [r7, #32]
 800b530:	60da      	str	r2, [r3, #12]
 800b532:	e00f      	b.n	800b554 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800b534:	4b5c      	ldr	r3, [pc, #368]	; (800b6a8 <tcp_slowtmr+0x500>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b53a:	429a      	cmp	r2, r3
 800b53c:	d006      	beq.n	800b54c <tcp_slowtmr+0x3a4>
 800b53e:	4b5b      	ldr	r3, [pc, #364]	; (800b6ac <tcp_slowtmr+0x504>)
 800b540:	f240 428d 	movw	r2, #1165	; 0x48d
 800b544:	495c      	ldr	r1, [pc, #368]	; (800b6b8 <tcp_slowtmr+0x510>)
 800b546:	485b      	ldr	r0, [pc, #364]	; (800b6b4 <tcp_slowtmr+0x50c>)
 800b548:	f00f f8e8 	bl	801a71c <iprintf>
        tcp_active_pcbs = pcb->next;
 800b54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b54e:	68db      	ldr	r3, [r3, #12]
 800b550:	4a55      	ldr	r2, [pc, #340]	; (800b6a8 <tcp_slowtmr+0x500>)
 800b552:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800b554:	7fbb      	ldrb	r3, [r7, #30]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d010      	beq.n	800b57c <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800b55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b55c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800b55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b560:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800b562:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800b564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b566:	1d1d      	adds	r5, r3, #4
 800b568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b56a:	8adb      	ldrh	r3, [r3, #22]
 800b56c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b56e:	8b12      	ldrh	r2, [r2, #24]
 800b570:	9201      	str	r2, [sp, #4]
 800b572:	9300      	str	r3, [sp, #0]
 800b574:	462b      	mov	r3, r5
 800b576:	4622      	mov	r2, r4
 800b578:	f003 fbe2 	bl	800ed40 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800b57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b57e:	691b      	ldr	r3, [r3, #16]
 800b580:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800b582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b584:	7d1b      	ldrb	r3, [r3, #20]
 800b586:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800b588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b58a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800b58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b58e:	68db      	ldr	r3, [r3, #12]
 800b590:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800b592:	6839      	ldr	r1, [r7, #0]
 800b594:	2001      	movs	r0, #1
 800b596:	f7fe f94b 	bl	8009830 <memp_free>

      tcp_active_pcbs_changed = 0;
 800b59a:	4b48      	ldr	r3, [pc, #288]	; (800b6bc <tcp_slowtmr+0x514>)
 800b59c:	2200      	movs	r2, #0
 800b59e:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d004      	beq.n	800b5b0 <tcp_slowtmr+0x408>
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	f06f 010c 	mvn.w	r1, #12
 800b5ac:	68b8      	ldr	r0, [r7, #8]
 800b5ae:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800b5b0:	4b42      	ldr	r3, [pc, #264]	; (800b6bc <tcp_slowtmr+0x514>)
 800b5b2:	781b      	ldrb	r3, [r3, #0]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d035      	beq.n	800b624 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 800b5b8:	e606      	b.n	800b1c8 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800b5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5bc:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800b5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c0:	68db      	ldr	r3, [r3, #12]
 800b5c2:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800b5c4:	6a3b      	ldr	r3, [r7, #32]
 800b5c6:	7edb      	ldrb	r3, [r3, #27]
 800b5c8:	3301      	adds	r3, #1
 800b5ca:	b2da      	uxtb	r2, r3
 800b5cc:	6a3b      	ldr	r3, [r7, #32]
 800b5ce:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800b5d0:	6a3b      	ldr	r3, [r7, #32]
 800b5d2:	7eda      	ldrb	r2, [r3, #27]
 800b5d4:	6a3b      	ldr	r3, [r7, #32]
 800b5d6:	7f1b      	ldrb	r3, [r3, #28]
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	d323      	bcc.n	800b624 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 800b5dc:	6a3b      	ldr	r3, [r7, #32]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800b5e2:	4b36      	ldr	r3, [pc, #216]	; (800b6bc <tcp_slowtmr+0x514>)
 800b5e4:	2200      	movs	r2, #0
 800b5e6:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800b5e8:	6a3b      	ldr	r3, [r7, #32]
 800b5ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d00a      	beq.n	800b608 <tcp_slowtmr+0x460>
 800b5f2:	6a3b      	ldr	r3, [r7, #32]
 800b5f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5f8:	6a3a      	ldr	r2, [r7, #32]
 800b5fa:	6912      	ldr	r2, [r2, #16]
 800b5fc:	6a39      	ldr	r1, [r7, #32]
 800b5fe:	4610      	mov	r0, r2
 800b600:	4798      	blx	r3
 800b602:	4603      	mov	r3, r0
 800b604:	777b      	strb	r3, [r7, #29]
 800b606:	e001      	b.n	800b60c <tcp_slowtmr+0x464>
 800b608:	2300      	movs	r3, #0
 800b60a:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 800b60c:	4b2b      	ldr	r3, [pc, #172]	; (800b6bc <tcp_slowtmr+0x514>)
 800b60e:	781b      	ldrb	r3, [r3, #0]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d000      	beq.n	800b616 <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 800b614:	e5d8      	b.n	800b1c8 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800b616:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d102      	bne.n	800b624 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 800b61e:	6a38      	ldr	r0, [r7, #32]
 800b620:	f003 f904 	bl	800e82c <tcp_output>
  while (pcb != NULL) {
 800b624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b626:	2b00      	cmp	r3, #0
 800b628:	f47f add4 	bne.w	800b1d4 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800b62c:	2300      	movs	r3, #0
 800b62e:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 800b630:	4b23      	ldr	r3, [pc, #140]	; (800b6c0 <tcp_slowtmr+0x518>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800b636:	e068      	b.n	800b70a <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800b638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b63a:	7d1b      	ldrb	r3, [r3, #20]
 800b63c:	2b0a      	cmp	r3, #10
 800b63e:	d006      	beq.n	800b64e <tcp_slowtmr+0x4a6>
 800b640:	4b1a      	ldr	r3, [pc, #104]	; (800b6ac <tcp_slowtmr+0x504>)
 800b642:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800b646:	491f      	ldr	r1, [pc, #124]	; (800b6c4 <tcp_slowtmr+0x51c>)
 800b648:	481a      	ldr	r0, [pc, #104]	; (800b6b4 <tcp_slowtmr+0x50c>)
 800b64a:	f00f f867 	bl	801a71c <iprintf>
    pcb_remove = 0;
 800b64e:	2300      	movs	r3, #0
 800b650:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800b652:	4b12      	ldr	r3, [pc, #72]	; (800b69c <tcp_slowtmr+0x4f4>)
 800b654:	681a      	ldr	r2, [r3, #0]
 800b656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b658:	6a1b      	ldr	r3, [r3, #32]
 800b65a:	1ad3      	subs	r3, r2, r3
 800b65c:	2bf0      	cmp	r3, #240	; 0xf0
 800b65e:	d902      	bls.n	800b666 <tcp_slowtmr+0x4be>
      ++pcb_remove;
 800b660:	7ffb      	ldrb	r3, [r7, #31]
 800b662:	3301      	adds	r3, #1
 800b664:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800b666:	7ffb      	ldrb	r3, [r7, #31]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d049      	beq.n	800b700 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800b66c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b66e:	f000 fad1 	bl	800bc14 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800b672:	6a3b      	ldr	r3, [r7, #32]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d029      	beq.n	800b6cc <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800b678:	4b11      	ldr	r3, [pc, #68]	; (800b6c0 <tcp_slowtmr+0x518>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b67e:	429a      	cmp	r2, r3
 800b680:	d106      	bne.n	800b690 <tcp_slowtmr+0x4e8>
 800b682:	4b0a      	ldr	r3, [pc, #40]	; (800b6ac <tcp_slowtmr+0x504>)
 800b684:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800b688:	490f      	ldr	r1, [pc, #60]	; (800b6c8 <tcp_slowtmr+0x520>)
 800b68a:	480a      	ldr	r0, [pc, #40]	; (800b6b4 <tcp_slowtmr+0x50c>)
 800b68c:	f00f f846 	bl	801a71c <iprintf>
        prev->next = pcb->next;
 800b690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b692:	68da      	ldr	r2, [r3, #12]
 800b694:	6a3b      	ldr	r3, [r7, #32]
 800b696:	60da      	str	r2, [r3, #12]
 800b698:	e028      	b.n	800b6ec <tcp_slowtmr+0x544>
 800b69a:	bf00      	nop
 800b69c:	2000b800 	.word	0x2000b800
 800b6a0:	000124f8 	.word	0x000124f8
 800b6a4:	10624dd3 	.word	0x10624dd3
 800b6a8:	2000b7fc 	.word	0x2000b7fc
 800b6ac:	0801ebb4 	.word	0x0801ebb4
 800b6b0:	0801edec 	.word	0x0801edec
 800b6b4:	0801ebf0 	.word	0x0801ebf0
 800b6b8:	0801ee18 	.word	0x0801ee18
 800b6bc:	2000b7f8 	.word	0x2000b7f8
 800b6c0:	2000b80c 	.word	0x2000b80c
 800b6c4:	0801ee44 	.word	0x0801ee44
 800b6c8:	0801ee74 	.word	0x0801ee74
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800b6cc:	4b12      	ldr	r3, [pc, #72]	; (800b718 <tcp_slowtmr+0x570>)
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6d2:	429a      	cmp	r2, r3
 800b6d4:	d006      	beq.n	800b6e4 <tcp_slowtmr+0x53c>
 800b6d6:	4b11      	ldr	r3, [pc, #68]	; (800b71c <tcp_slowtmr+0x574>)
 800b6d8:	f240 42cf 	movw	r2, #1231	; 0x4cf
 800b6dc:	4910      	ldr	r1, [pc, #64]	; (800b720 <tcp_slowtmr+0x578>)
 800b6de:	4811      	ldr	r0, [pc, #68]	; (800b724 <tcp_slowtmr+0x57c>)
 800b6e0:	f00f f81c 	bl	801a71c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800b6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e6:	68db      	ldr	r3, [r3, #12]
 800b6e8:	4a0b      	ldr	r2, [pc, #44]	; (800b718 <tcp_slowtmr+0x570>)
 800b6ea:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800b6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ee:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 800b6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f2:	68db      	ldr	r3, [r3, #12]
 800b6f4:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800b6f6:	69b9      	ldr	r1, [r7, #24]
 800b6f8:	2001      	movs	r0, #1
 800b6fa:	f7fe f899 	bl	8009830 <memp_free>
 800b6fe:	e004      	b.n	800b70a <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 800b700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b702:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800b704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b706:	68db      	ldr	r3, [r3, #12]
 800b708:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800b70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d193      	bne.n	800b638 <tcp_slowtmr+0x490>
    }
  }
}
 800b710:	bf00      	nop
 800b712:	3728      	adds	r7, #40	; 0x28
 800b714:	46bd      	mov	sp, r7
 800b716:	bdb0      	pop	{r4, r5, r7, pc}
 800b718:	2000b80c 	.word	0x2000b80c
 800b71c:	0801ebb4 	.word	0x0801ebb4
 800b720:	0801ee9c 	.word	0x0801ee9c
 800b724:	0801ebf0 	.word	0x0801ebf0

0800b728 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b082      	sub	sp, #8
 800b72c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800b72e:	4b2d      	ldr	r3, [pc, #180]	; (800b7e4 <tcp_fasttmr+0xbc>)
 800b730:	781b      	ldrb	r3, [r3, #0]
 800b732:	3301      	adds	r3, #1
 800b734:	b2da      	uxtb	r2, r3
 800b736:	4b2b      	ldr	r3, [pc, #172]	; (800b7e4 <tcp_fasttmr+0xbc>)
 800b738:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800b73a:	4b2b      	ldr	r3, [pc, #172]	; (800b7e8 <tcp_fasttmr+0xc0>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800b740:	e048      	b.n	800b7d4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	7f5a      	ldrb	r2, [r3, #29]
 800b746:	4b27      	ldr	r3, [pc, #156]	; (800b7e4 <tcp_fasttmr+0xbc>)
 800b748:	781b      	ldrb	r3, [r3, #0]
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d03f      	beq.n	800b7ce <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800b74e:	4b25      	ldr	r3, [pc, #148]	; (800b7e4 <tcp_fasttmr+0xbc>)
 800b750:	781a      	ldrb	r2, [r3, #0]
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	7e9b      	ldrb	r3, [r3, #26]
 800b75a:	f003 0301 	and.w	r3, r3, #1
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d010      	beq.n	800b784 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	7e9b      	ldrb	r3, [r3, #26]
 800b766:	f043 0302 	orr.w	r3, r3, #2
 800b76a:	b2da      	uxtb	r2, r3
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	f003 f85b 	bl	800e82c <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	7e9b      	ldrb	r3, [r3, #26]
 800b77a:	f023 0303 	bic.w	r3, r3, #3
 800b77e:	b2da      	uxtb	r2, r3
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	7e9b      	ldrb	r3, [r3, #26]
 800b788:	f003 0308 	and.w	r3, r3, #8
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d009      	beq.n	800b7a4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	7e9b      	ldrb	r3, [r3, #26]
 800b794:	f023 0308 	bic.w	r3, r3, #8
 800b798:	b2da      	uxtb	r2, r3
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f7ff fb1e 	bl	800ade0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	68db      	ldr	r3, [r3, #12]
 800b7a8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d00a      	beq.n	800b7c8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800b7b2:	4b0e      	ldr	r3, [pc, #56]	; (800b7ec <tcp_fasttmr+0xc4>)
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f000 f819 	bl	800b7f0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800b7be:	4b0b      	ldr	r3, [pc, #44]	; (800b7ec <tcp_fasttmr+0xc4>)
 800b7c0:	781b      	ldrb	r3, [r3, #0]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d000      	beq.n	800b7c8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800b7c6:	e7b8      	b.n	800b73a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	607b      	str	r3, [r7, #4]
 800b7cc:	e002      	b.n	800b7d4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	68db      	ldr	r3, [r3, #12]
 800b7d2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d1b3      	bne.n	800b742 <tcp_fasttmr+0x1a>
    }
  }
}
 800b7da:	bf00      	nop
 800b7dc:	3708      	adds	r7, #8
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}
 800b7e2:	bf00      	nop
 800b7e4:	20004bfe 	.word	0x20004bfe
 800b7e8:	2000b7fc 	.word	0x2000b7fc
 800b7ec:	2000b7f8 	.word	0x2000b7f8

0800b7f0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800b7f0:	b590      	push	{r4, r7, lr}
 800b7f2:	b085      	sub	sp, #20
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b7fc:	7b5b      	ldrb	r3, [r3, #13]
 800b7fe:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b804:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2200      	movs	r2, #0
 800b80a:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b812:	2b00      	cmp	r3, #0
 800b814:	d00b      	beq.n	800b82e <tcp_process_refused_data+0x3e>
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	6918      	ldr	r0, [r3, #16]
 800b820:	2300      	movs	r3, #0
 800b822:	68ba      	ldr	r2, [r7, #8]
 800b824:	6879      	ldr	r1, [r7, #4]
 800b826:	47a0      	blx	r4
 800b828:	4603      	mov	r3, r0
 800b82a:	73fb      	strb	r3, [r7, #15]
 800b82c:	e007      	b.n	800b83e <tcp_process_refused_data+0x4e>
 800b82e:	2300      	movs	r3, #0
 800b830:	68ba      	ldr	r2, [r7, #8]
 800b832:	6879      	ldr	r1, [r7, #4]
 800b834:	2000      	movs	r0, #0
 800b836:	f000 f88c 	bl	800b952 <tcp_recv_null>
 800b83a:	4603      	mov	r3, r0
 800b83c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800b83e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d12a      	bne.n	800b89c <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800b846:	7bbb      	ldrb	r3, [r7, #14]
 800b848:	f003 0320 	and.w	r3, r3, #32
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d033      	beq.n	800b8b8 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b854:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800b858:	d005      	beq.n	800b866 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b85e:	3301      	adds	r3, #1
 800b860:	b29a      	uxth	r2, r3
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d00b      	beq.n	800b888 <tcp_process_refused_data+0x98>
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6918      	ldr	r0, [r3, #16]
 800b87a:	2300      	movs	r3, #0
 800b87c:	2200      	movs	r2, #0
 800b87e:	6879      	ldr	r1, [r7, #4]
 800b880:	47a0      	blx	r4
 800b882:	4603      	mov	r3, r0
 800b884:	73fb      	strb	r3, [r7, #15]
 800b886:	e001      	b.n	800b88c <tcp_process_refused_data+0x9c>
 800b888:	2300      	movs	r3, #0
 800b88a:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800b88c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b890:	f113 0f0d 	cmn.w	r3, #13
 800b894:	d110      	bne.n	800b8b8 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 800b896:	f06f 030c 	mvn.w	r3, #12
 800b89a:	e00e      	b.n	800b8ba <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 800b89c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8a0:	f113 0f0d 	cmn.w	r3, #13
 800b8a4:	d102      	bne.n	800b8ac <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800b8a6:	f06f 030c 	mvn.w	r3, #12
 800b8aa:	e006      	b.n	800b8ba <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	68ba      	ldr	r2, [r7, #8]
 800b8b0:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 800b8b2:	f06f 0304 	mvn.w	r3, #4
 800b8b6:	e000      	b.n	800b8ba <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 800b8b8:	2300      	movs	r3, #0
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3714      	adds	r7, #20
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd90      	pop	{r4, r7, pc}

0800b8c2 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800b8c2:	b580      	push	{r7, lr}
 800b8c4:	b084      	sub	sp, #16
 800b8c6:	af00      	add	r7, sp, #0
 800b8c8:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800b8ca:	e007      	b.n	800b8dc <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f000 f809 	bl	800b8ea <tcp_seg_free>
    seg = next;
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d1f4      	bne.n	800b8cc <tcp_segs_free+0xa>
  }
}
 800b8e2:	bf00      	nop
 800b8e4:	3710      	adds	r7, #16
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	bd80      	pop	{r7, pc}

0800b8ea <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800b8ea:	b580      	push	{r7, lr}
 800b8ec:	b082      	sub	sp, #8
 800b8ee:	af00      	add	r7, sp, #0
 800b8f0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d00c      	beq.n	800b912 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	685b      	ldr	r3, [r3, #4]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d004      	beq.n	800b90a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	685b      	ldr	r3, [r3, #4]
 800b904:	4618      	mov	r0, r3
 800b906:	f7fe fd4f 	bl	800a3a8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800b90a:	6879      	ldr	r1, [r7, #4]
 800b90c:	2003      	movs	r0, #3
 800b90e:	f7fd ff8f 	bl	8009830 <memp_free>
  }
}
 800b912:	bf00      	nop
 800b914:	3708      	adds	r7, #8
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}

0800b91a <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800b91a:	b580      	push	{r7, lr}
 800b91c:	b084      	sub	sp, #16
 800b91e:	af00      	add	r7, sp, #0
 800b920:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800b922:	2003      	movs	r0, #3
 800b924:	f7fd ff32 	bl	800978c <memp_malloc>
 800b928:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d101      	bne.n	800b934 <tcp_seg_copy+0x1a>
    return NULL;
 800b930:	2300      	movs	r3, #0
 800b932:	e00a      	b.n	800b94a <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800b934:	2210      	movs	r2, #16
 800b936:	6879      	ldr	r1, [r7, #4]
 800b938:	68f8      	ldr	r0, [r7, #12]
 800b93a:	f00e f8ac 	bl	8019a96 <memcpy>
  pbuf_ref(cseg->p);
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	685b      	ldr	r3, [r3, #4]
 800b942:	4618      	mov	r0, r3
 800b944:	f7fe fde0 	bl	800a508 <pbuf_ref>
  return cseg;
 800b948:	68fb      	ldr	r3, [r7, #12]
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3710      	adds	r7, #16
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}

0800b952 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b952:	b580      	push	{r7, lr}
 800b954:	b084      	sub	sp, #16
 800b956:	af00      	add	r7, sp, #0
 800b958:	60f8      	str	r0, [r7, #12]
 800b95a:	60b9      	str	r1, [r7, #8]
 800b95c:	607a      	str	r2, [r7, #4]
 800b95e:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d009      	beq.n	800b97a <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	891b      	ldrh	r3, [r3, #8]
 800b96a:	4619      	mov	r1, r3
 800b96c:	68b8      	ldr	r0, [r7, #8]
 800b96e:	f7ff fbc1 	bl	800b0f4 <tcp_recved>
    pbuf_free(p);
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f7fe fd18 	bl	800a3a8 <pbuf_free>
 800b978:	e008      	b.n	800b98c <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 800b97a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d104      	bne.n	800b98c <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 800b982:	68b8      	ldr	r0, [r7, #8]
 800b984:	f7ff fa92 	bl	800aeac <tcp_close>
 800b988:	4603      	mov	r3, r0
 800b98a:	e000      	b.n	800b98e <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 800b98c:	2300      	movs	r3, #0
}
 800b98e:	4618      	mov	r0, r3
 800b990:	3710      	adds	r7, #16
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}
	...

0800b998 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b086      	sub	sp, #24
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	4603      	mov	r3, r0
 800b9a0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800b9a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	db01      	blt.n	800b9ae <tcp_kill_prio+0x16>
 800b9aa:	79fb      	ldrb	r3, [r7, #7]
 800b9ac:	e000      	b.n	800b9b0 <tcp_kill_prio+0x18>
 800b9ae:	237f      	movs	r3, #127	; 0x7f
 800b9b0:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b9ba:	4b16      	ldr	r3, [pc, #88]	; (800ba14 <tcp_kill_prio+0x7c>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	617b      	str	r3, [r7, #20]
 800b9c0:	e01a      	b.n	800b9f8 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 800b9c2:	697b      	ldr	r3, [r7, #20]
 800b9c4:	7d5b      	ldrb	r3, [r3, #21]
 800b9c6:	7afa      	ldrb	r2, [r7, #11]
 800b9c8:	429a      	cmp	r2, r3
 800b9ca:	d312      	bcc.n	800b9f2 <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b9cc:	4b12      	ldr	r3, [pc, #72]	; (800ba18 <tcp_kill_prio+0x80>)
 800b9ce:	681a      	ldr	r2, [r3, #0]
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	6a1b      	ldr	r3, [r3, #32]
 800b9d4:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 800b9d6:	68fa      	ldr	r2, [r7, #12]
 800b9d8:	429a      	cmp	r2, r3
 800b9da:	d80a      	bhi.n	800b9f2 <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 800b9dc:	4b0e      	ldr	r3, [pc, #56]	; (800ba18 <tcp_kill_prio+0x80>)
 800b9de:	681a      	ldr	r2, [r3, #0]
 800b9e0:	697b      	ldr	r3, [r7, #20]
 800b9e2:	6a1b      	ldr	r3, [r3, #32]
 800b9e4:	1ad3      	subs	r3, r2, r3
 800b9e6:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 800b9e8:	697b      	ldr	r3, [r7, #20]
 800b9ea:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 800b9ec:	697b      	ldr	r3, [r7, #20]
 800b9ee:	7d5b      	ldrb	r3, [r3, #21]
 800b9f0:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b9f2:	697b      	ldr	r3, [r7, #20]
 800b9f4:	68db      	ldr	r3, [r3, #12]
 800b9f6:	617b      	str	r3, [r7, #20]
 800b9f8:	697b      	ldr	r3, [r7, #20]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d1e1      	bne.n	800b9c2 <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d002      	beq.n	800ba0a <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ba04:	6938      	ldr	r0, [r7, #16]
 800ba06:	f7ff fb1b 	bl	800b040 <tcp_abort>
  }
}
 800ba0a:	bf00      	nop
 800ba0c:	3718      	adds	r7, #24
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}
 800ba12:	bf00      	nop
 800ba14:	2000b7fc 	.word	0x2000b7fc
 800ba18:	2000b800 	.word	0x2000b800

0800ba1c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b086      	sub	sp, #24
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	4603      	mov	r3, r0
 800ba24:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ba26:	79fb      	ldrb	r3, [r7, #7]
 800ba28:	2b08      	cmp	r3, #8
 800ba2a:	d009      	beq.n	800ba40 <tcp_kill_state+0x24>
 800ba2c:	79fb      	ldrb	r3, [r7, #7]
 800ba2e:	2b09      	cmp	r3, #9
 800ba30:	d006      	beq.n	800ba40 <tcp_kill_state+0x24>
 800ba32:	4b1a      	ldr	r3, [pc, #104]	; (800ba9c <tcp_kill_state+0x80>)
 800ba34:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800ba38:	4919      	ldr	r1, [pc, #100]	; (800baa0 <tcp_kill_state+0x84>)
 800ba3a:	481a      	ldr	r0, [pc, #104]	; (800baa4 <tcp_kill_state+0x88>)
 800ba3c:	f00e fe6e 	bl	801a71c <iprintf>

  inactivity = 0;
 800ba40:	2300      	movs	r3, #0
 800ba42:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ba44:	2300      	movs	r3, #0
 800ba46:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ba48:	4b17      	ldr	r3, [pc, #92]	; (800baa8 <tcp_kill_state+0x8c>)
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	617b      	str	r3, [r7, #20]
 800ba4e:	e017      	b.n	800ba80 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	7d1b      	ldrb	r3, [r3, #20]
 800ba54:	79fa      	ldrb	r2, [r7, #7]
 800ba56:	429a      	cmp	r2, r3
 800ba58:	d10f      	bne.n	800ba7a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ba5a:	4b14      	ldr	r3, [pc, #80]	; (800baac <tcp_kill_state+0x90>)
 800ba5c:	681a      	ldr	r2, [r3, #0]
 800ba5e:	697b      	ldr	r3, [r7, #20]
 800ba60:	6a1b      	ldr	r3, [r3, #32]
 800ba62:	1ad3      	subs	r3, r2, r3
 800ba64:	68fa      	ldr	r2, [r7, #12]
 800ba66:	429a      	cmp	r2, r3
 800ba68:	d807      	bhi.n	800ba7a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800ba6a:	4b10      	ldr	r3, [pc, #64]	; (800baac <tcp_kill_state+0x90>)
 800ba6c:	681a      	ldr	r2, [r3, #0]
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	6a1b      	ldr	r3, [r3, #32]
 800ba72:	1ad3      	subs	r3, r2, r3
 800ba74:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	68db      	ldr	r3, [r3, #12]
 800ba7e:	617b      	str	r3, [r7, #20]
 800ba80:	697b      	ldr	r3, [r7, #20]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d1e4      	bne.n	800ba50 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800ba86:	693b      	ldr	r3, [r7, #16]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d003      	beq.n	800ba94 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800ba8c:	2100      	movs	r1, #0
 800ba8e:	6938      	ldr	r0, [r7, #16]
 800ba90:	f7ff fa24 	bl	800aedc <tcp_abandon>
  }
}
 800ba94:	bf00      	nop
 800ba96:	3718      	adds	r7, #24
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	bd80      	pop	{r7, pc}
 800ba9c:	0801ebb4 	.word	0x0801ebb4
 800baa0:	0801eec4 	.word	0x0801eec4
 800baa4:	0801ebf0 	.word	0x0801ebf0
 800baa8:	2000b7fc 	.word	0x2000b7fc
 800baac:	2000b800 	.word	0x2000b800

0800bab0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b084      	sub	sp, #16
 800bab4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800bab6:	2300      	movs	r3, #0
 800bab8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800baba:	2300      	movs	r3, #0
 800babc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800babe:	4b12      	ldr	r3, [pc, #72]	; (800bb08 <tcp_kill_timewait+0x58>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	60fb      	str	r3, [r7, #12]
 800bac4:	e012      	b.n	800baec <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800bac6:	4b11      	ldr	r3, [pc, #68]	; (800bb0c <tcp_kill_timewait+0x5c>)
 800bac8:	681a      	ldr	r2, [r3, #0]
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	6a1b      	ldr	r3, [r3, #32]
 800bace:	1ad3      	subs	r3, r2, r3
 800bad0:	687a      	ldr	r2, [r7, #4]
 800bad2:	429a      	cmp	r2, r3
 800bad4:	d807      	bhi.n	800bae6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800bad6:	4b0d      	ldr	r3, [pc, #52]	; (800bb0c <tcp_kill_timewait+0x5c>)
 800bad8:	681a      	ldr	r2, [r3, #0]
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	6a1b      	ldr	r3, [r3, #32]
 800bade:	1ad3      	subs	r3, r2, r3
 800bae0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	68db      	ldr	r3, [r3, #12]
 800baea:	60fb      	str	r3, [r7, #12]
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d1e9      	bne.n	800bac6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800baf2:	68bb      	ldr	r3, [r7, #8]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d002      	beq.n	800bafe <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800baf8:	68b8      	ldr	r0, [r7, #8]
 800bafa:	f7ff faa1 	bl	800b040 <tcp_abort>
  }
}
 800bafe:	bf00      	nop
 800bb00:	3710      	adds	r7, #16
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}
 800bb06:	bf00      	nop
 800bb08:	2000b80c 	.word	0x2000b80c
 800bb0c:	2000b800 	.word	0x2000b800

0800bb10 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	b084      	sub	sp, #16
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	4603      	mov	r3, r0
 800bb18:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bb1a:	2001      	movs	r0, #1
 800bb1c:	f7fd fe36 	bl	800978c <memp_malloc>
 800bb20:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d124      	bne.n	800bb72 <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800bb28:	f7ff ffc2 	bl	800bab0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bb2c:	2001      	movs	r0, #1
 800bb2e:	f7fd fe2d 	bl	800978c <memp_malloc>
 800bb32:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d11b      	bne.n	800bb72 <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800bb3a:	2009      	movs	r0, #9
 800bb3c:	f7ff ff6e 	bl	800ba1c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bb40:	2001      	movs	r0, #1
 800bb42:	f7fd fe23 	bl	800978c <memp_malloc>
 800bb46:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d111      	bne.n	800bb72 <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800bb4e:	2008      	movs	r0, #8
 800bb50:	f7ff ff64 	bl	800ba1c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bb54:	2001      	movs	r0, #1
 800bb56:	f7fd fe19 	bl	800978c <memp_malloc>
 800bb5a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d107      	bne.n	800bb72 <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800bb62:	79fb      	ldrb	r3, [r7, #7]
 800bb64:	4618      	mov	r0, r3
 800bb66:	f7ff ff17 	bl	800b998 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800bb6a:	2001      	movs	r0, #1
 800bb6c:	f7fd fe0e 	bl	800978c <memp_malloc>
 800bb70:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d03f      	beq.n	800bbf8 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800bb78:	2298      	movs	r2, #152	; 0x98
 800bb7a:	2100      	movs	r1, #0
 800bb7c:	68f8      	ldr	r0, [r7, #12]
 800bb7e:	f00d ff95 	bl	8019aac <memset>
    pcb->prio = prio;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	79fa      	ldrb	r2, [r7, #7]
 800bb86:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800bb8e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800bb98:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	22ff      	movs	r2, #255	; 0xff
 800bba6:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	f44f 7206 	mov.w	r2, #536	; 0x218
 800bbae:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	2206      	movs	r2, #6
 800bbb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	2206      	movs	r2, #6
 800bbbc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bbc4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	2201      	movs	r2, #1
 800bbca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800bbce:	4b0d      	ldr	r3, [pc, #52]	; (800bc04 <tcp_alloc+0xf4>)
 800bbd0:	681a      	ldr	r2, [r3, #0]
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800bbd6:	4b0c      	ldr	r3, [pc, #48]	; (800bc08 <tcp_alloc+0xf8>)
 800bbd8:	781a      	ldrb	r2, [r3, #0]
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800bbe4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	4a08      	ldr	r2, [pc, #32]	; (800bc0c <tcp_alloc+0xfc>)
 800bbec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	4a07      	ldr	r2, [pc, #28]	; (800bc10 <tcp_alloc+0x100>)
 800bbf4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3710      	adds	r7, #16
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}
 800bc02:	bf00      	nop
 800bc04:	2000b800 	.word	0x2000b800
 800bc08:	20004bfe 	.word	0x20004bfe
 800bc0c:	0800b953 	.word	0x0800b953
 800bc10:	006ddd00 	.word	0x006ddd00

0800bc14 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b082      	sub	sp, #8
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	7d1b      	ldrb	r3, [r3, #20]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d034      	beq.n	800bc8e <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800bc28:	2b0a      	cmp	r3, #10
 800bc2a:	d030      	beq.n	800bc8e <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 800bc30:	2b01      	cmp	r3, #1
 800bc32:	d02c      	beq.n	800bc8e <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d007      	beq.n	800bc4c <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc40:	4618      	mov	r0, r3
 800bc42:	f7fe fbb1 	bl	800a3a8 <pbuf_free>
      pcb->refused_data = NULL;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2200      	movs	r2, #0
 800bc4a:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc50:	4618      	mov	r0, r3
 800bc52:	f7ff fe36 	bl	800b8c2 <tcp_segs_free>
    pcb->ooseq = NULL;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	2200      	movs	r2, #0
 800bc5a:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bc62:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f7ff fe2a 	bl	800b8c2 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc72:	4618      	mov	r0, r3
 800bc74:	f7ff fe25 	bl	800b8c2 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	669a      	str	r2, [r3, #104]	; 0x68
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2200      	movs	r2, #0
 800bc8a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 800bc8e:	bf00      	nop
 800bc90:	3708      	adds	r7, #8
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}
	...

0800bc98 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b084      	sub	sp, #16
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
 800bca0:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	683a      	ldr	r2, [r7, #0]
 800bca8:	429a      	cmp	r2, r3
 800bcaa:	d105      	bne.n	800bcb8 <tcp_pcb_remove+0x20>
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	68da      	ldr	r2, [r3, #12]
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	601a      	str	r2, [r3, #0]
 800bcb6:	e013      	b.n	800bce0 <tcp_pcb_remove+0x48>
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	60fb      	str	r3, [r7, #12]
 800bcbe:	e00c      	b.n	800bcda <tcp_pcb_remove+0x42>
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	68db      	ldr	r3, [r3, #12]
 800bcc4:	683a      	ldr	r2, [r7, #0]
 800bcc6:	429a      	cmp	r2, r3
 800bcc8:	d104      	bne.n	800bcd4 <tcp_pcb_remove+0x3c>
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	68da      	ldr	r2, [r3, #12]
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	60da      	str	r2, [r3, #12]
 800bcd2:	e005      	b.n	800bce0 <tcp_pcb_remove+0x48>
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	68db      	ldr	r3, [r3, #12]
 800bcd8:	60fb      	str	r3, [r7, #12]
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d1ef      	bne.n	800bcc0 <tcp_pcb_remove+0x28>
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	2200      	movs	r2, #0
 800bce4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800bce6:	6838      	ldr	r0, [r7, #0]
 800bce8:	f7ff ff94 	bl	800bc14 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	7d1b      	ldrb	r3, [r3, #20]
 800bcf0:	2b0a      	cmp	r3, #10
 800bcf2:	d013      	beq.n	800bd1c <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 800bcf8:	2b01      	cmp	r3, #1
 800bcfa:	d00f      	beq.n	800bd1c <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	7e9b      	ldrb	r3, [r3, #26]
 800bd00:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d009      	beq.n	800bd1c <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	7e9b      	ldrb	r3, [r3, #26]
 800bd0c:	f043 0302 	orr.w	r3, r3, #2
 800bd10:	b2da      	uxtb	r2, r3
 800bd12:	683b      	ldr	r3, [r7, #0]
 800bd14:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800bd16:	6838      	ldr	r0, [r7, #0]
 800bd18:	f002 fd88 	bl	800e82c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	7d1b      	ldrb	r3, [r3, #20]
 800bd20:	2b01      	cmp	r3, #1
 800bd22:	d020      	beq.n	800bd66 <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800bd24:	683b      	ldr	r3, [r7, #0]
 800bd26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d006      	beq.n	800bd3a <tcp_pcb_remove+0xa2>
 800bd2c:	4b13      	ldr	r3, [pc, #76]	; (800bd7c <tcp_pcb_remove+0xe4>)
 800bd2e:	f240 7253 	movw	r2, #1875	; 0x753
 800bd32:	4913      	ldr	r1, [pc, #76]	; (800bd80 <tcp_pcb_remove+0xe8>)
 800bd34:	4813      	ldr	r0, [pc, #76]	; (800bd84 <tcp_pcb_remove+0xec>)
 800bd36:	f00e fcf1 	bl	801a71c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d006      	beq.n	800bd50 <tcp_pcb_remove+0xb8>
 800bd42:	4b0e      	ldr	r3, [pc, #56]	; (800bd7c <tcp_pcb_remove+0xe4>)
 800bd44:	f240 7254 	movw	r2, #1876	; 0x754
 800bd48:	490f      	ldr	r1, [pc, #60]	; (800bd88 <tcp_pcb_remove+0xf0>)
 800bd4a:	480e      	ldr	r0, [pc, #56]	; (800bd84 <tcp_pcb_remove+0xec>)
 800bd4c:	f00e fce6 	bl	801a71c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d006      	beq.n	800bd66 <tcp_pcb_remove+0xce>
 800bd58:	4b08      	ldr	r3, [pc, #32]	; (800bd7c <tcp_pcb_remove+0xe4>)
 800bd5a:	f240 7256 	movw	r2, #1878	; 0x756
 800bd5e:	490b      	ldr	r1, [pc, #44]	; (800bd8c <tcp_pcb_remove+0xf4>)
 800bd60:	4808      	ldr	r0, [pc, #32]	; (800bd84 <tcp_pcb_remove+0xec>)
 800bd62:	f00e fcdb 	bl	801a71c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	2200      	movs	r2, #0
 800bd6a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	2200      	movs	r2, #0
 800bd70:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800bd72:	bf00      	nop
 800bd74:	3710      	adds	r7, #16
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}
 800bd7a:	bf00      	nop
 800bd7c:	0801ebb4 	.word	0x0801ebb4
 800bd80:	0801ef6c 	.word	0x0801ef6c
 800bd84:	0801ebf0 	.word	0x0801ebf0
 800bd88:	0801ef84 	.word	0x0801ef84
 800bd8c:	0801efa0 	.word	0x0801efa0

0800bd90 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800bd90:	b480      	push	{r7}
 800bd92:	b083      	sub	sp, #12
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800bd98:	4b06      	ldr	r3, [pc, #24]	; (800bdb4 <tcp_next_iss+0x24>)
 800bd9a:	681a      	ldr	r2, [r3, #0]
 800bd9c:	4b06      	ldr	r3, [pc, #24]	; (800bdb8 <tcp_next_iss+0x28>)
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	4413      	add	r3, r2
 800bda2:	4a04      	ldr	r2, [pc, #16]	; (800bdb4 <tcp_next_iss+0x24>)
 800bda4:	6013      	str	r3, [r2, #0]
  return iss;
 800bda6:	4b03      	ldr	r3, [pc, #12]	; (800bdb4 <tcp_next_iss+0x24>)
 800bda8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	370c      	adds	r7, #12
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bc80      	pop	{r7}
 800bdb2:	4770      	bx	lr
 800bdb4:	20000010 	.word	0x20000010
 800bdb8:	2000b800 	.word	0x2000b800

0800bdbc <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b084      	sub	sp, #16
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	6039      	str	r1, [r7, #0]
 800bdc6:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 800bdc8:	6838      	ldr	r0, [r7, #0]
 800bdca:	f006 ff3d 	bl	8012c48 <ip4_route>
 800bdce:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d101      	bne.n	800bdda <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 800bdd6:	88fb      	ldrh	r3, [r7, #6]
 800bdd8:	e010      	b.n	800bdfc <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bdde:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800bde0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d008      	beq.n	800bdfa <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 800bde8:	897b      	ldrh	r3, [r7, #10]
 800bdea:	3b28      	subs	r3, #40	; 0x28
 800bdec:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800bdee:	893a      	ldrh	r2, [r7, #8]
 800bdf0:	88fb      	ldrh	r3, [r7, #6]
 800bdf2:	4293      	cmp	r3, r2
 800bdf4:	bf28      	it	cs
 800bdf6:	4613      	movcs	r3, r2
 800bdf8:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 800bdfa:	88fb      	ldrh	r3, [r7, #6]
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3710      	adds	r7, #16
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}

0800be04 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b084      	sub	sp, #16
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
 800be0c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800be12:	e011      	b.n	800be38 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	681a      	ldr	r2, [r3, #0]
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	429a      	cmp	r2, r3
 800be1e:	d108      	bne.n	800be32 <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	68db      	ldr	r3, [r3, #12]
 800be24:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800be26:	68f8      	ldr	r0, [r7, #12]
 800be28:	f7ff f90a 	bl	800b040 <tcp_abort>
      pcb = next;
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	60fb      	str	r3, [r7, #12]
 800be30:	e002      	b.n	800be38 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	68db      	ldr	r3, [r3, #12]
 800be36:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d1ea      	bne.n	800be14 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 800be3e:	bf00      	nop
 800be40:	3710      	adds	r7, #16
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}
	...

0800be48 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b084      	sub	sp, #16
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
 800be50:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d02c      	beq.n	800beb2 <tcp_netif_ip_addr_changed+0x6a>
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d028      	beq.n	800beb2 <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800be60:	4b16      	ldr	r3, [pc, #88]	; (800bebc <tcp_netif_ip_addr_changed+0x74>)
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	4619      	mov	r1, r3
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f7ff ffcc 	bl	800be04 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800be6c:	4b14      	ldr	r3, [pc, #80]	; (800bec0 <tcp_netif_ip_addr_changed+0x78>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	4619      	mov	r1, r3
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f7ff ffc6 	bl	800be04 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d019      	beq.n	800beb2 <tcp_netif_ip_addr_changed+0x6a>
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d015      	beq.n	800beb2 <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800be86:	4b0f      	ldr	r3, [pc, #60]	; (800bec4 <tcp_netif_ip_addr_changed+0x7c>)
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	60fb      	str	r3, [r7, #12]
 800be8c:	e00e      	b.n	800beac <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	68db      	ldr	r3, [r3, #12]
 800be92:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	681a      	ldr	r2, [r3, #0]
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	429a      	cmp	r2, r3
 800be9e:	d103      	bne.n	800bea8 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800bea0:	683b      	ldr	r3, [r7, #0]
 800bea2:	681a      	ldr	r2, [r3, #0]
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	60fb      	str	r3, [r7, #12]
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d1ed      	bne.n	800be8e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800beb2:	bf00      	nop
 800beb4:	3710      	adds	r7, #16
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}
 800beba:	bf00      	nop
 800bebc:	2000b7fc 	.word	0x2000b7fc
 800bec0:	2000b808 	.word	0x2000b808
 800bec4:	2000b804 	.word	0x2000b804

0800bec8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800bec8:	b590      	push	{r4, r7, lr}
 800beca:	b08b      	sub	sp, #44	; 0x2c
 800becc:	af02      	add	r7, sp, #8
 800bece:	6078      	str	r0, [r7, #4]
 800bed0:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	685b      	ldr	r3, [r3, #4]
 800bed6:	4a82      	ldr	r2, [pc, #520]	; (800c0e0 <tcp_input+0x218>)
 800bed8:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	895b      	ldrh	r3, [r3, #10]
 800bede:	2b13      	cmp	r3, #19
 800bee0:	f240 838a 	bls.w	800c5f8 <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800bee4:	4b7f      	ldr	r3, [pc, #508]	; (800c0e4 <tcp_input+0x21c>)
 800bee6:	695a      	ldr	r2, [r3, #20]
 800bee8:	4b7e      	ldr	r3, [pc, #504]	; (800c0e4 <tcp_input+0x21c>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	4619      	mov	r1, r3
 800beee:	4610      	mov	r0, r2
 800bef0:	f007 f942 	bl	8013178 <ip4_addr_isbroadcast_u32>
 800bef4:	4603      	mov	r3, r0
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	f040 8380 	bne.w	800c5fc <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800befc:	4b79      	ldr	r3, [pc, #484]	; (800c0e4 <tcp_input+0x21c>)
 800befe:	695b      	ldr	r3, [r3, #20]
 800bf00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800bf04:	2be0      	cmp	r3, #224	; 0xe0
 800bf06:	f000 8379 	beq.w	800c5fc <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800bf0a:	4b75      	ldr	r3, [pc, #468]	; (800c0e0 <tcp_input+0x218>)
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	899b      	ldrh	r3, [r3, #12]
 800bf10:	b29b      	uxth	r3, r3
 800bf12:	4618      	mov	r0, r3
 800bf14:	f7fc fd8a 	bl	8008a2c <lwip_htons>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	0b1b      	lsrs	r3, r3, #12
 800bf1c:	b29b      	uxth	r3, r3
 800bf1e:	b2db      	uxtb	r3, r3
 800bf20:	009b      	lsls	r3, r3, #2
 800bf22:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800bf24:	7cbb      	ldrb	r3, [r7, #18]
 800bf26:	2b13      	cmp	r3, #19
 800bf28:	f240 8368 	bls.w	800c5fc <tcp_input+0x734>
 800bf2c:	7cbb      	ldrb	r3, [r7, #18]
 800bf2e:	b29a      	uxth	r2, r3
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	891b      	ldrh	r3, [r3, #8]
 800bf34:	429a      	cmp	r2, r3
 800bf36:	f200 8361 	bhi.w	800c5fc <tcp_input+0x734>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800bf3a:	7cbb      	ldrb	r3, [r7, #18]
 800bf3c:	b29b      	uxth	r3, r3
 800bf3e:	3b14      	subs	r3, #20
 800bf40:	b29a      	uxth	r2, r3
 800bf42:	4b69      	ldr	r3, [pc, #420]	; (800c0e8 <tcp_input+0x220>)
 800bf44:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800bf46:	4b69      	ldr	r3, [pc, #420]	; (800c0ec <tcp_input+0x224>)
 800bf48:	2200      	movs	r2, #0
 800bf4a:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	895a      	ldrh	r2, [r3, #10]
 800bf50:	7cbb      	ldrb	r3, [r7, #18]
 800bf52:	b29b      	uxth	r3, r3
 800bf54:	429a      	cmp	r2, r3
 800bf56:	d30d      	bcc.n	800bf74 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800bf58:	4b63      	ldr	r3, [pc, #396]	; (800c0e8 <tcp_input+0x220>)
 800bf5a:	881a      	ldrh	r2, [r3, #0]
 800bf5c:	4b64      	ldr	r3, [pc, #400]	; (800c0f0 <tcp_input+0x228>)
 800bf5e:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800bf60:	7cbb      	ldrb	r3, [r7, #18]
 800bf62:	b29b      	uxth	r3, r3
 800bf64:	425b      	negs	r3, r3
 800bf66:	b29b      	uxth	r3, r3
 800bf68:	b21b      	sxth	r3, r3
 800bf6a:	4619      	mov	r1, r3
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f7fe f9f7 	bl	800a360 <pbuf_header>
 800bf72:	e055      	b.n	800c020 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d105      	bne.n	800bf88 <tcp_input+0xc0>
 800bf7c:	4b5d      	ldr	r3, [pc, #372]	; (800c0f4 <tcp_input+0x22c>)
 800bf7e:	22b2      	movs	r2, #178	; 0xb2
 800bf80:	495d      	ldr	r1, [pc, #372]	; (800c0f8 <tcp_input+0x230>)
 800bf82:	485e      	ldr	r0, [pc, #376]	; (800c0fc <tcp_input+0x234>)
 800bf84:	f00e fbca 	bl	801a71c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 800bf88:	f06f 0113 	mvn.w	r1, #19
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f7fe f9e7 	bl	800a360 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	895a      	ldrh	r2, [r3, #10]
 800bf96:	4b56      	ldr	r3, [pc, #344]	; (800c0f0 <tcp_input+0x228>)
 800bf98:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800bf9a:	4b53      	ldr	r3, [pc, #332]	; (800c0e8 <tcp_input+0x220>)
 800bf9c:	881a      	ldrh	r2, [r3, #0]
 800bf9e:	4b54      	ldr	r3, [pc, #336]	; (800c0f0 <tcp_input+0x228>)
 800bfa0:	881b      	ldrh	r3, [r3, #0]
 800bfa2:	1ad3      	subs	r3, r2, r3
 800bfa4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800bfa6:	4b52      	ldr	r3, [pc, #328]	; (800c0f0 <tcp_input+0x228>)
 800bfa8:	881b      	ldrh	r3, [r3, #0]
 800bfaa:	425b      	negs	r3, r3
 800bfac:	b29b      	uxth	r3, r3
 800bfae:	b21b      	sxth	r3, r3
 800bfb0:	4619      	mov	r1, r3
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f7fe f9d4 	bl	800a360 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	895b      	ldrh	r3, [r3, #10]
 800bfbe:	8a3a      	ldrh	r2, [r7, #16]
 800bfc0:	429a      	cmp	r2, r3
 800bfc2:	f200 831d 	bhi.w	800c600 <tcp_input+0x738>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	685b      	ldr	r3, [r3, #4]
 800bfcc:	4a47      	ldr	r2, [pc, #284]	; (800c0ec <tcp_input+0x224>)
 800bfce:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681a      	ldr	r2, [r3, #0]
 800bfd4:	8a3b      	ldrh	r3, [r7, #16]
 800bfd6:	425b      	negs	r3, r3
 800bfd8:	b29b      	uxth	r3, r3
 800bfda:	b21b      	sxth	r3, r3
 800bfdc:	4619      	mov	r1, r3
 800bfde:	4610      	mov	r0, r2
 800bfe0:	f7fe f9be 	bl	800a360 <pbuf_header>
    p->tot_len -= opt2len;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	891a      	ldrh	r2, [r3, #8]
 800bfe8:	8a3b      	ldrh	r3, [r7, #16]
 800bfea:	1ad3      	subs	r3, r2, r3
 800bfec:	b29a      	uxth	r2, r3
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	895b      	ldrh	r3, [r3, #10]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d005      	beq.n	800c006 <tcp_input+0x13e>
 800bffa:	4b3e      	ldr	r3, [pc, #248]	; (800c0f4 <tcp_input+0x22c>)
 800bffc:	22cf      	movs	r2, #207	; 0xcf
 800bffe:	4940      	ldr	r1, [pc, #256]	; (800c100 <tcp_input+0x238>)
 800c000:	483e      	ldr	r0, [pc, #248]	; (800c0fc <tcp_input+0x234>)
 800c002:	f00e fb8b 	bl	801a71c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	891a      	ldrh	r2, [r3, #8]
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	891b      	ldrh	r3, [r3, #8]
 800c010:	429a      	cmp	r2, r3
 800c012:	d005      	beq.n	800c020 <tcp_input+0x158>
 800c014:	4b37      	ldr	r3, [pc, #220]	; (800c0f4 <tcp_input+0x22c>)
 800c016:	22d0      	movs	r2, #208	; 0xd0
 800c018:	493a      	ldr	r1, [pc, #232]	; (800c104 <tcp_input+0x23c>)
 800c01a:	4838      	ldr	r0, [pc, #224]	; (800c0fc <tcp_input+0x234>)
 800c01c:	f00e fb7e 	bl	801a71c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800c020:	4b2f      	ldr	r3, [pc, #188]	; (800c0e0 <tcp_input+0x218>)
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	881b      	ldrh	r3, [r3, #0]
 800c026:	b29a      	uxth	r2, r3
 800c028:	4b2d      	ldr	r3, [pc, #180]	; (800c0e0 <tcp_input+0x218>)
 800c02a:	681c      	ldr	r4, [r3, #0]
 800c02c:	4610      	mov	r0, r2
 800c02e:	f7fc fcfd 	bl	8008a2c <lwip_htons>
 800c032:	4603      	mov	r3, r0
 800c034:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800c036:	4b2a      	ldr	r3, [pc, #168]	; (800c0e0 <tcp_input+0x218>)
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	885b      	ldrh	r3, [r3, #2]
 800c03c:	b29a      	uxth	r2, r3
 800c03e:	4b28      	ldr	r3, [pc, #160]	; (800c0e0 <tcp_input+0x218>)
 800c040:	681c      	ldr	r4, [r3, #0]
 800c042:	4610      	mov	r0, r2
 800c044:	f7fc fcf2 	bl	8008a2c <lwip_htons>
 800c048:	4603      	mov	r3, r0
 800c04a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800c04c:	4b24      	ldr	r3, [pc, #144]	; (800c0e0 <tcp_input+0x218>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	685a      	ldr	r2, [r3, #4]
 800c052:	4b23      	ldr	r3, [pc, #140]	; (800c0e0 <tcp_input+0x218>)
 800c054:	681c      	ldr	r4, [r3, #0]
 800c056:	4610      	mov	r0, r2
 800c058:	f7fc fcf5 	bl	8008a46 <lwip_htonl>
 800c05c:	4603      	mov	r3, r0
 800c05e:	6063      	str	r3, [r4, #4]
 800c060:	6863      	ldr	r3, [r4, #4]
 800c062:	4a29      	ldr	r2, [pc, #164]	; (800c108 <tcp_input+0x240>)
 800c064:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800c066:	4b1e      	ldr	r3, [pc, #120]	; (800c0e0 <tcp_input+0x218>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	689a      	ldr	r2, [r3, #8]
 800c06c:	4b1c      	ldr	r3, [pc, #112]	; (800c0e0 <tcp_input+0x218>)
 800c06e:	681c      	ldr	r4, [r3, #0]
 800c070:	4610      	mov	r0, r2
 800c072:	f7fc fce8 	bl	8008a46 <lwip_htonl>
 800c076:	4603      	mov	r3, r0
 800c078:	60a3      	str	r3, [r4, #8]
 800c07a:	68a3      	ldr	r3, [r4, #8]
 800c07c:	4a23      	ldr	r2, [pc, #140]	; (800c10c <tcp_input+0x244>)
 800c07e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800c080:	4b17      	ldr	r3, [pc, #92]	; (800c0e0 <tcp_input+0x218>)
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	89db      	ldrh	r3, [r3, #14]
 800c086:	b29a      	uxth	r2, r3
 800c088:	4b15      	ldr	r3, [pc, #84]	; (800c0e0 <tcp_input+0x218>)
 800c08a:	681c      	ldr	r4, [r3, #0]
 800c08c:	4610      	mov	r0, r2
 800c08e:	f7fc fccd 	bl	8008a2c <lwip_htons>
 800c092:	4603      	mov	r3, r0
 800c094:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800c096:	4b12      	ldr	r3, [pc, #72]	; (800c0e0 <tcp_input+0x218>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	899b      	ldrh	r3, [r3, #12]
 800c09c:	b29b      	uxth	r3, r3
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f7fc fcc4 	bl	8008a2c <lwip_htons>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	b2db      	uxtb	r3, r3
 800c0a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c0ac:	b2da      	uxtb	r2, r3
 800c0ae:	4b18      	ldr	r3, [pc, #96]	; (800c110 <tcp_input+0x248>)
 800c0b0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	891a      	ldrh	r2, [r3, #8]
 800c0b6:	4b16      	ldr	r3, [pc, #88]	; (800c110 <tcp_input+0x248>)
 800c0b8:	781b      	ldrb	r3, [r3, #0]
 800c0ba:	f003 0303 	and.w	r3, r3, #3
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	bf14      	ite	ne
 800c0c2:	2301      	movne	r3, #1
 800c0c4:	2300      	moveq	r3, #0
 800c0c6:	b2db      	uxtb	r3, r3
 800c0c8:	b29b      	uxth	r3, r3
 800c0ca:	4413      	add	r3, r2
 800c0cc:	b29a      	uxth	r2, r3
 800c0ce:	4b11      	ldr	r3, [pc, #68]	; (800c114 <tcp_input+0x24c>)
 800c0d0:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c0d6:	4b10      	ldr	r3, [pc, #64]	; (800c118 <tcp_input+0x250>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	61fb      	str	r3, [r7, #28]
 800c0dc:	e082      	b.n	800c1e4 <tcp_input+0x31c>
 800c0de:	bf00      	nop
 800c0e0:	20004c10 	.word	0x20004c10
 800c0e4:	20007f84 	.word	0x20007f84
 800c0e8:	20004c14 	.word	0x20004c14
 800c0ec:	20004c18 	.word	0x20004c18
 800c0f0:	20004c16 	.word	0x20004c16
 800c0f4:	0801efb8 	.word	0x0801efb8
 800c0f8:	0801efec 	.word	0x0801efec
 800c0fc:	0801effc 	.word	0x0801effc
 800c100:	0801f024 	.word	0x0801f024
 800c104:	0801f030 	.word	0x0801f030
 800c108:	20004c20 	.word	0x20004c20
 800c10c:	20004c24 	.word	0x20004c24
 800c110:	20004c2c 	.word	0x20004c2c
 800c114:	20004c2a 	.word	0x20004c2a
 800c118:	2000b7fc 	.word	0x2000b7fc
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800c11c:	69fb      	ldr	r3, [r7, #28]
 800c11e:	7d1b      	ldrb	r3, [r3, #20]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d105      	bne.n	800c130 <tcp_input+0x268>
 800c124:	4b8f      	ldr	r3, [pc, #572]	; (800c364 <tcp_input+0x49c>)
 800c126:	22e2      	movs	r2, #226	; 0xe2
 800c128:	498f      	ldr	r1, [pc, #572]	; (800c368 <tcp_input+0x4a0>)
 800c12a:	4890      	ldr	r0, [pc, #576]	; (800c36c <tcp_input+0x4a4>)
 800c12c:	f00e faf6 	bl	801a71c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800c130:	69fb      	ldr	r3, [r7, #28]
 800c132:	7d1b      	ldrb	r3, [r3, #20]
 800c134:	2b0a      	cmp	r3, #10
 800c136:	d105      	bne.n	800c144 <tcp_input+0x27c>
 800c138:	4b8a      	ldr	r3, [pc, #552]	; (800c364 <tcp_input+0x49c>)
 800c13a:	22e3      	movs	r2, #227	; 0xe3
 800c13c:	498c      	ldr	r1, [pc, #560]	; (800c370 <tcp_input+0x4a8>)
 800c13e:	488b      	ldr	r0, [pc, #556]	; (800c36c <tcp_input+0x4a4>)
 800c140:	f00e faec 	bl	801a71c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800c144:	69fb      	ldr	r3, [r7, #28]
 800c146:	7d1b      	ldrb	r3, [r3, #20]
 800c148:	2b01      	cmp	r3, #1
 800c14a:	d105      	bne.n	800c158 <tcp_input+0x290>
 800c14c:	4b85      	ldr	r3, [pc, #532]	; (800c364 <tcp_input+0x49c>)
 800c14e:	22e4      	movs	r2, #228	; 0xe4
 800c150:	4988      	ldr	r1, [pc, #544]	; (800c374 <tcp_input+0x4ac>)
 800c152:	4886      	ldr	r0, [pc, #536]	; (800c36c <tcp_input+0x4a4>)
 800c154:	f00e fae2 	bl	801a71c <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 800c158:	69fb      	ldr	r3, [r7, #28]
 800c15a:	8b1a      	ldrh	r2, [r3, #24]
 800c15c:	4b86      	ldr	r3, [pc, #536]	; (800c378 <tcp_input+0x4b0>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	881b      	ldrh	r3, [r3, #0]
 800c162:	b29b      	uxth	r3, r3
 800c164:	429a      	cmp	r2, r3
 800c166:	d138      	bne.n	800c1da <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 800c168:	69fb      	ldr	r3, [r7, #28]
 800c16a:	8ada      	ldrh	r2, [r3, #22]
 800c16c:	4b82      	ldr	r3, [pc, #520]	; (800c378 <tcp_input+0x4b0>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	885b      	ldrh	r3, [r3, #2]
 800c172:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800c174:	429a      	cmp	r2, r3
 800c176:	d130      	bne.n	800c1da <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c178:	69fb      	ldr	r3, [r7, #28]
 800c17a:	685a      	ldr	r2, [r3, #4]
 800c17c:	4b7f      	ldr	r3, [pc, #508]	; (800c37c <tcp_input+0x4b4>)
 800c17e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800c180:	429a      	cmp	r2, r3
 800c182:	d12a      	bne.n	800c1da <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c184:	69fb      	ldr	r3, [r7, #28]
 800c186:	681a      	ldr	r2, [r3, #0]
 800c188:	4b7c      	ldr	r3, [pc, #496]	; (800c37c <tcp_input+0x4b4>)
 800c18a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c18c:	429a      	cmp	r2, r3
 800c18e:	d124      	bne.n	800c1da <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800c190:	69fb      	ldr	r3, [r7, #28]
 800c192:	68db      	ldr	r3, [r3, #12]
 800c194:	69fa      	ldr	r2, [r7, #28]
 800c196:	429a      	cmp	r2, r3
 800c198:	d105      	bne.n	800c1a6 <tcp_input+0x2de>
 800c19a:	4b72      	ldr	r3, [pc, #456]	; (800c364 <tcp_input+0x49c>)
 800c19c:	22ec      	movs	r2, #236	; 0xec
 800c19e:	4978      	ldr	r1, [pc, #480]	; (800c380 <tcp_input+0x4b8>)
 800c1a0:	4872      	ldr	r0, [pc, #456]	; (800c36c <tcp_input+0x4a4>)
 800c1a2:	f00e fabb 	bl	801a71c <iprintf>
      if (prev != NULL) {
 800c1a6:	69bb      	ldr	r3, [r7, #24]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d00a      	beq.n	800c1c2 <tcp_input+0x2fa>
        prev->next = pcb->next;
 800c1ac:	69fb      	ldr	r3, [r7, #28]
 800c1ae:	68da      	ldr	r2, [r3, #12]
 800c1b0:	69bb      	ldr	r3, [r7, #24]
 800c1b2:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800c1b4:	4b73      	ldr	r3, [pc, #460]	; (800c384 <tcp_input+0x4bc>)
 800c1b6:	681a      	ldr	r2, [r3, #0]
 800c1b8:	69fb      	ldr	r3, [r7, #28]
 800c1ba:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800c1bc:	4a71      	ldr	r2, [pc, #452]	; (800c384 <tcp_input+0x4bc>)
 800c1be:	69fb      	ldr	r3, [r7, #28]
 800c1c0:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800c1c2:	69fb      	ldr	r3, [r7, #28]
 800c1c4:	68db      	ldr	r3, [r3, #12]
 800c1c6:	69fa      	ldr	r2, [r7, #28]
 800c1c8:	429a      	cmp	r2, r3
 800c1ca:	d10f      	bne.n	800c1ec <tcp_input+0x324>
 800c1cc:	4b65      	ldr	r3, [pc, #404]	; (800c364 <tcp_input+0x49c>)
 800c1ce:	22f4      	movs	r2, #244	; 0xf4
 800c1d0:	496d      	ldr	r1, [pc, #436]	; (800c388 <tcp_input+0x4c0>)
 800c1d2:	4866      	ldr	r0, [pc, #408]	; (800c36c <tcp_input+0x4a4>)
 800c1d4:	f00e faa2 	bl	801a71c <iprintf>
      break;
 800c1d8:	e008      	b.n	800c1ec <tcp_input+0x324>
    }
    prev = pcb;
 800c1da:	69fb      	ldr	r3, [r7, #28]
 800c1dc:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c1de:	69fb      	ldr	r3, [r7, #28]
 800c1e0:	68db      	ldr	r3, [r3, #12]
 800c1e2:	61fb      	str	r3, [r7, #28]
 800c1e4:	69fb      	ldr	r3, [r7, #28]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d198      	bne.n	800c11c <tcp_input+0x254>
 800c1ea:	e000      	b.n	800c1ee <tcp_input+0x326>
      break;
 800c1ec:	bf00      	nop
  }

  if (pcb == NULL) {
 800c1ee:	69fb      	ldr	r3, [r7, #28]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d173      	bne.n	800c2dc <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c1f4:	4b65      	ldr	r3, [pc, #404]	; (800c38c <tcp_input+0x4c4>)
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	61fb      	str	r3, [r7, #28]
 800c1fa:	e02f      	b.n	800c25c <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c1fc:	69fb      	ldr	r3, [r7, #28]
 800c1fe:	7d1b      	ldrb	r3, [r3, #20]
 800c200:	2b0a      	cmp	r3, #10
 800c202:	d005      	beq.n	800c210 <tcp_input+0x348>
 800c204:	4b57      	ldr	r3, [pc, #348]	; (800c364 <tcp_input+0x49c>)
 800c206:	22fe      	movs	r2, #254	; 0xfe
 800c208:	4961      	ldr	r1, [pc, #388]	; (800c390 <tcp_input+0x4c8>)
 800c20a:	4858      	ldr	r0, [pc, #352]	; (800c36c <tcp_input+0x4a4>)
 800c20c:	f00e fa86 	bl	801a71c <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 800c210:	69fb      	ldr	r3, [r7, #28]
 800c212:	8b1a      	ldrh	r2, [r3, #24]
 800c214:	4b58      	ldr	r3, [pc, #352]	; (800c378 <tcp_input+0x4b0>)
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	881b      	ldrh	r3, [r3, #0]
 800c21a:	b29b      	uxth	r3, r3
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d11a      	bne.n	800c256 <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 800c220:	69fb      	ldr	r3, [r7, #28]
 800c222:	8ada      	ldrh	r2, [r3, #22]
 800c224:	4b54      	ldr	r3, [pc, #336]	; (800c378 <tcp_input+0x4b0>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	885b      	ldrh	r3, [r3, #2]
 800c22a:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800c22c:	429a      	cmp	r2, r3
 800c22e:	d112      	bne.n	800c256 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c230:	69fb      	ldr	r3, [r7, #28]
 800c232:	685a      	ldr	r2, [r3, #4]
 800c234:	4b51      	ldr	r3, [pc, #324]	; (800c37c <tcp_input+0x4b4>)
 800c236:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800c238:	429a      	cmp	r2, r3
 800c23a:	d10c      	bne.n	800c256 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800c23c:	69fb      	ldr	r3, [r7, #28]
 800c23e:	681a      	ldr	r2, [r3, #0]
 800c240:	4b4e      	ldr	r3, [pc, #312]	; (800c37c <tcp_input+0x4b4>)
 800c242:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800c244:	429a      	cmp	r2, r3
 800c246:	d106      	bne.n	800c256 <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 800c248:	69f8      	ldr	r0, [r7, #28]
 800c24a:	f000 fb15 	bl	800c878 <tcp_timewait_input>
        pbuf_free(p);
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f7fe f8aa 	bl	800a3a8 <pbuf_free>
        return;
 800c254:	e1da      	b.n	800c60c <tcp_input+0x744>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800c256:	69fb      	ldr	r3, [r7, #28]
 800c258:	68db      	ldr	r3, [r3, #12]
 800c25a:	61fb      	str	r3, [r7, #28]
 800c25c:	69fb      	ldr	r3, [r7, #28]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d1cc      	bne.n	800c1fc <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800c262:	2300      	movs	r3, #0
 800c264:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c266:	4b4b      	ldr	r3, [pc, #300]	; (800c394 <tcp_input+0x4cc>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	617b      	str	r3, [r7, #20]
 800c26c:	e019      	b.n	800c2a2 <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 800c26e:	697b      	ldr	r3, [r7, #20]
 800c270:	8ada      	ldrh	r2, [r3, #22]
 800c272:	4b41      	ldr	r3, [pc, #260]	; (800c378 <tcp_input+0x4b0>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	885b      	ldrh	r3, [r3, #2]
 800c278:	b29b      	uxth	r3, r3
 800c27a:	429a      	cmp	r2, r3
 800c27c:	d10c      	bne.n	800c298 <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800c27e:	697b      	ldr	r3, [r7, #20]
 800c280:	681a      	ldr	r2, [r3, #0]
 800c282:	4b3e      	ldr	r3, [pc, #248]	; (800c37c <tcp_input+0x4b4>)
 800c284:	695b      	ldr	r3, [r3, #20]
 800c286:	429a      	cmp	r2, r3
 800c288:	d00f      	beq.n	800c2aa <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800c28a:	697b      	ldr	r3, [r7, #20]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d00d      	beq.n	800c2ac <tcp_input+0x3e4>
 800c290:	697b      	ldr	r3, [r7, #20]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d009      	beq.n	800c2ac <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800c298:	697b      	ldr	r3, [r7, #20]
 800c29a:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800c29c:	697b      	ldr	r3, [r7, #20]
 800c29e:	68db      	ldr	r3, [r3, #12]
 800c2a0:	617b      	str	r3, [r7, #20]
 800c2a2:	697b      	ldr	r3, [r7, #20]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d1e2      	bne.n	800c26e <tcp_input+0x3a6>
 800c2a8:	e000      	b.n	800c2ac <tcp_input+0x3e4>
            break;
 800c2aa:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800c2ac:	697b      	ldr	r3, [r7, #20]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d014      	beq.n	800c2dc <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800c2b2:	69bb      	ldr	r3, [r7, #24]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d00a      	beq.n	800c2ce <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800c2b8:	697b      	ldr	r3, [r7, #20]
 800c2ba:	68da      	ldr	r2, [r3, #12]
 800c2bc:	69bb      	ldr	r3, [r7, #24]
 800c2be:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800c2c0:	4b34      	ldr	r3, [pc, #208]	; (800c394 <tcp_input+0x4cc>)
 800c2c2:	681a      	ldr	r2, [r3, #0]
 800c2c4:	697b      	ldr	r3, [r7, #20]
 800c2c6:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800c2c8:	4a32      	ldr	r2, [pc, #200]	; (800c394 <tcp_input+0x4cc>)
 800c2ca:	697b      	ldr	r3, [r7, #20]
 800c2cc:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 800c2ce:	6978      	ldr	r0, [r7, #20]
 800c2d0:	f000 f9f0 	bl	800c6b4 <tcp_listen_input>
      pbuf_free(p);
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	f7fe f867 	bl	800a3a8 <pbuf_free>
      return;
 800c2da:	e197      	b.n	800c60c <tcp_input+0x744>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 800c2dc:	69fb      	ldr	r3, [r7, #28]
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	f000 8164 	beq.w	800c5ac <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800c2e4:	4b2c      	ldr	r3, [pc, #176]	; (800c398 <tcp_input+0x4d0>)
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	891a      	ldrh	r2, [r3, #8]
 800c2ee:	4b2a      	ldr	r3, [pc, #168]	; (800c398 <tcp_input+0x4d0>)
 800c2f0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800c2f2:	4a29      	ldr	r2, [pc, #164]	; (800c398 <tcp_input+0x4d0>)
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800c2f8:	4b1f      	ldr	r3, [pc, #124]	; (800c378 <tcp_input+0x4b0>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	4a26      	ldr	r2, [pc, #152]	; (800c398 <tcp_input+0x4d0>)
 800c2fe:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800c300:	4b26      	ldr	r3, [pc, #152]	; (800c39c <tcp_input+0x4d4>)
 800c302:	2200      	movs	r2, #0
 800c304:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800c306:	4b26      	ldr	r3, [pc, #152]	; (800c3a0 <tcp_input+0x4d8>)
 800c308:	2200      	movs	r2, #0
 800c30a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800c30c:	4b25      	ldr	r3, [pc, #148]	; (800c3a4 <tcp_input+0x4dc>)
 800c30e:	2200      	movs	r2, #0
 800c310:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800c312:	4b25      	ldr	r3, [pc, #148]	; (800c3a8 <tcp_input+0x4e0>)
 800c314:	781b      	ldrb	r3, [r3, #0]
 800c316:	f003 0308 	and.w	r3, r3, #8
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d006      	beq.n	800c32c <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	7b5b      	ldrb	r3, [r3, #13]
 800c322:	f043 0301 	orr.w	r3, r3, #1
 800c326:	b2da      	uxtb	r2, r3
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800c32c:	69fb      	ldr	r3, [r7, #28]
 800c32e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c330:	2b00      	cmp	r3, #0
 800c332:	d03d      	beq.n	800c3b0 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c334:	69f8      	ldr	r0, [r7, #28]
 800c336:	f7ff fa5b 	bl	800b7f0 <tcp_process_refused_data>
 800c33a:	4603      	mov	r3, r0
 800c33c:	f113 0f0d 	cmn.w	r3, #13
 800c340:	d007      	beq.n	800c352 <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c342:	69fb      	ldr	r3, [r7, #28]
 800c344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800c346:	2b00      	cmp	r3, #0
 800c348:	d032      	beq.n	800c3b0 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800c34a:	4b18      	ldr	r3, [pc, #96]	; (800c3ac <tcp_input+0x4e4>)
 800c34c:	881b      	ldrh	r3, [r3, #0]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d02e      	beq.n	800c3b0 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800c352:	69fb      	ldr	r3, [r7, #28]
 800c354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c356:	2b00      	cmp	r3, #0
 800c358:	f040 8108 	bne.w	800c56c <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800c35c:	69f8      	ldr	r0, [r7, #28]
 800c35e:	f002 fa09 	bl	800e774 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800c362:	e103      	b.n	800c56c <tcp_input+0x6a4>
 800c364:	0801efb8 	.word	0x0801efb8
 800c368:	0801f050 	.word	0x0801f050
 800c36c:	0801effc 	.word	0x0801effc
 800c370:	0801f078 	.word	0x0801f078
 800c374:	0801f0a4 	.word	0x0801f0a4
 800c378:	20004c10 	.word	0x20004c10
 800c37c:	20007f84 	.word	0x20007f84
 800c380:	0801f0cc 	.word	0x0801f0cc
 800c384:	2000b7fc 	.word	0x2000b7fc
 800c388:	0801f0f8 	.word	0x0801f0f8
 800c38c:	2000b80c 	.word	0x2000b80c
 800c390:	0801f124 	.word	0x0801f124
 800c394:	2000b804 	.word	0x2000b804
 800c398:	20004c00 	.word	0x20004c00
 800c39c:	20004c30 	.word	0x20004c30
 800c3a0:	20004c2d 	.word	0x20004c2d
 800c3a4:	20004c28 	.word	0x20004c28
 800c3a8:	20004c2c 	.word	0x20004c2c
 800c3ac:	20004c2a 	.word	0x20004c2a
      }
    }
    tcp_input_pcb = pcb;
 800c3b0:	4a98      	ldr	r2, [pc, #608]	; (800c614 <tcp_input+0x74c>)
 800c3b2:	69fb      	ldr	r3, [r7, #28]
 800c3b4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800c3b6:	69f8      	ldr	r0, [r7, #28]
 800c3b8:	f000 fac6 	bl	800c948 <tcp_process>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800c3c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c3c4:	f113 0f0d 	cmn.w	r3, #13
 800c3c8:	f000 80d2 	beq.w	800c570 <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 800c3cc:	4b92      	ldr	r3, [pc, #584]	; (800c618 <tcp_input+0x750>)
 800c3ce:	781b      	ldrb	r3, [r3, #0]
 800c3d0:	f003 0308 	and.w	r3, r3, #8
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d016      	beq.n	800c406 <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800c3d8:	69fb      	ldr	r3, [r7, #28]
 800c3da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d008      	beq.n	800c3f4 <tcp_input+0x52c>
 800c3e2:	69fb      	ldr	r3, [r7, #28]
 800c3e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c3e8:	69fa      	ldr	r2, [r7, #28]
 800c3ea:	6912      	ldr	r2, [r2, #16]
 800c3ec:	f06f 010d 	mvn.w	r1, #13
 800c3f0:	4610      	mov	r0, r2
 800c3f2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c3f4:	69f9      	ldr	r1, [r7, #28]
 800c3f6:	4889      	ldr	r0, [pc, #548]	; (800c61c <tcp_input+0x754>)
 800c3f8:	f7ff fc4e 	bl	800bc98 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800c3fc:	69f9      	ldr	r1, [r7, #28]
 800c3fe:	2001      	movs	r0, #1
 800c400:	f7fd fa16 	bl	8009830 <memp_free>
 800c404:	e0bf      	b.n	800c586 <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 800c406:	2300      	movs	r3, #0
 800c408:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800c40a:	4b85      	ldr	r3, [pc, #532]	; (800c620 <tcp_input+0x758>)
 800c40c:	881b      	ldrh	r3, [r3, #0]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d01b      	beq.n	800c44a <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800c412:	4b83      	ldr	r3, [pc, #524]	; (800c620 <tcp_input+0x758>)
 800c414:	881b      	ldrh	r3, [r3, #0]
 800c416:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800c418:	69fb      	ldr	r3, [r7, #28]
 800c41a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d009      	beq.n	800c434 <tcp_input+0x56c>
 800c420:	69fb      	ldr	r3, [r7, #28]
 800c422:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c424:	69fa      	ldr	r2, [r7, #28]
 800c426:	6910      	ldr	r0, [r2, #16]
 800c428:	89fa      	ldrh	r2, [r7, #14]
 800c42a:	69f9      	ldr	r1, [r7, #28]
 800c42c:	4798      	blx	r3
 800c42e:	4603      	mov	r3, r0
 800c430:	74fb      	strb	r3, [r7, #19]
 800c432:	e001      	b.n	800c438 <tcp_input+0x570>
 800c434:	2300      	movs	r3, #0
 800c436:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c438:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c43c:	f113 0f0d 	cmn.w	r3, #13
 800c440:	f000 8098 	beq.w	800c574 <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 800c444:	4b76      	ldr	r3, [pc, #472]	; (800c620 <tcp_input+0x758>)
 800c446:	2200      	movs	r2, #0
 800c448:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800c44a:	69f8      	ldr	r0, [r7, #28]
 800c44c:	f000 f900 	bl	800c650 <tcp_input_delayed_close>
 800c450:	4603      	mov	r3, r0
 800c452:	2b00      	cmp	r3, #0
 800c454:	f040 8090 	bne.w	800c578 <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800c458:	4b72      	ldr	r3, [pc, #456]	; (800c624 <tcp_input+0x75c>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d041      	beq.n	800c4e4 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800c460:	69fb      	ldr	r3, [r7, #28]
 800c462:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c464:	2b00      	cmp	r3, #0
 800c466:	d006      	beq.n	800c476 <tcp_input+0x5ae>
 800c468:	4b6f      	ldr	r3, [pc, #444]	; (800c628 <tcp_input+0x760>)
 800c46a:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800c46e:	496f      	ldr	r1, [pc, #444]	; (800c62c <tcp_input+0x764>)
 800c470:	486f      	ldr	r0, [pc, #444]	; (800c630 <tcp_input+0x768>)
 800c472:	f00e f953 	bl	801a71c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800c476:	69fb      	ldr	r3, [r7, #28]
 800c478:	7e9b      	ldrb	r3, [r3, #26]
 800c47a:	f003 0310 	and.w	r3, r3, #16
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d008      	beq.n	800c494 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800c482:	4b68      	ldr	r3, [pc, #416]	; (800c624 <tcp_input+0x75c>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	4618      	mov	r0, r3
 800c488:	f7fd ff8e 	bl	800a3a8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800c48c:	69f8      	ldr	r0, [r7, #28]
 800c48e:	f7fe fdd7 	bl	800b040 <tcp_abort>
            goto aborted;
 800c492:	e078      	b.n	800c586 <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800c494:	69fb      	ldr	r3, [r7, #28]
 800c496:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d00c      	beq.n	800c4b8 <tcp_input+0x5f0>
 800c49e:	69fb      	ldr	r3, [r7, #28]
 800c4a0:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800c4a4:	69fb      	ldr	r3, [r7, #28]
 800c4a6:	6918      	ldr	r0, [r3, #16]
 800c4a8:	4b5e      	ldr	r3, [pc, #376]	; (800c624 <tcp_input+0x75c>)
 800c4aa:	681a      	ldr	r2, [r3, #0]
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	69f9      	ldr	r1, [r7, #28]
 800c4b0:	47a0      	blx	r4
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	74fb      	strb	r3, [r7, #19]
 800c4b6:	e008      	b.n	800c4ca <tcp_input+0x602>
 800c4b8:	4b5a      	ldr	r3, [pc, #360]	; (800c624 <tcp_input+0x75c>)
 800c4ba:	681a      	ldr	r2, [r3, #0]
 800c4bc:	2300      	movs	r3, #0
 800c4be:	69f9      	ldr	r1, [r7, #28]
 800c4c0:	2000      	movs	r0, #0
 800c4c2:	f7ff fa46 	bl	800b952 <tcp_recv_null>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800c4ca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c4ce:	f113 0f0d 	cmn.w	r3, #13
 800c4d2:	d053      	beq.n	800c57c <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800c4d4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d003      	beq.n	800c4e4 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800c4dc:	4b51      	ldr	r3, [pc, #324]	; (800c624 <tcp_input+0x75c>)
 800c4de:	681a      	ldr	r2, [r3, #0]
 800c4e0:	69fb      	ldr	r3, [r7, #28]
 800c4e2:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800c4e4:	4b4c      	ldr	r3, [pc, #304]	; (800c618 <tcp_input+0x750>)
 800c4e6:	781b      	ldrb	r3, [r3, #0]
 800c4e8:	f003 0320 	and.w	r3, r3, #32
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d030      	beq.n	800c552 <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 800c4f0:	69fb      	ldr	r3, [r7, #28]
 800c4f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d009      	beq.n	800c50c <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800c4f8:	69fb      	ldr	r3, [r7, #28]
 800c4fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4fc:	7b5a      	ldrb	r2, [r3, #13]
 800c4fe:	69fb      	ldr	r3, [r7, #28]
 800c500:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c502:	f042 0220 	orr.w	r2, r2, #32
 800c506:	b2d2      	uxtb	r2, r2
 800c508:	735a      	strb	r2, [r3, #13]
 800c50a:	e022      	b.n	800c552 <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c50c:	69fb      	ldr	r3, [r7, #28]
 800c50e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c510:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c514:	d005      	beq.n	800c522 <tcp_input+0x65a>
              pcb->rcv_wnd++;
 800c516:	69fb      	ldr	r3, [r7, #28]
 800c518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c51a:	3301      	adds	r3, #1
 800c51c:	b29a      	uxth	r2, r3
 800c51e:	69fb      	ldr	r3, [r7, #28]
 800c520:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800c522:	69fb      	ldr	r3, [r7, #28]
 800c524:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d00b      	beq.n	800c544 <tcp_input+0x67c>
 800c52c:	69fb      	ldr	r3, [r7, #28]
 800c52e:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800c532:	69fb      	ldr	r3, [r7, #28]
 800c534:	6918      	ldr	r0, [r3, #16]
 800c536:	2300      	movs	r3, #0
 800c538:	2200      	movs	r2, #0
 800c53a:	69f9      	ldr	r1, [r7, #28]
 800c53c:	47a0      	blx	r4
 800c53e:	4603      	mov	r3, r0
 800c540:	74fb      	strb	r3, [r7, #19]
 800c542:	e001      	b.n	800c548 <tcp_input+0x680>
 800c544:	2300      	movs	r3, #0
 800c546:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c548:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c54c:	f113 0f0d 	cmn.w	r3, #13
 800c550:	d016      	beq.n	800c580 <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800c552:	4b30      	ldr	r3, [pc, #192]	; (800c614 <tcp_input+0x74c>)
 800c554:	2200      	movs	r2, #0
 800c556:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800c558:	69f8      	ldr	r0, [r7, #28]
 800c55a:	f000 f879 	bl	800c650 <tcp_input_delayed_close>
 800c55e:	4603      	mov	r3, r0
 800c560:	2b00      	cmp	r3, #0
 800c562:	d10f      	bne.n	800c584 <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800c564:	69f8      	ldr	r0, [r7, #28]
 800c566:	f002 f961 	bl	800e82c <tcp_output>
 800c56a:	e00c      	b.n	800c586 <tcp_input+0x6be>
        goto aborted;
 800c56c:	bf00      	nop
 800c56e:	e00a      	b.n	800c586 <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800c570:	bf00      	nop
 800c572:	e008      	b.n	800c586 <tcp_input+0x6be>
              goto aborted;
 800c574:	bf00      	nop
 800c576:	e006      	b.n	800c586 <tcp_input+0x6be>
          goto aborted;
 800c578:	bf00      	nop
 800c57a:	e004      	b.n	800c586 <tcp_input+0x6be>
            goto aborted;
 800c57c:	bf00      	nop
 800c57e:	e002      	b.n	800c586 <tcp_input+0x6be>
              goto aborted;
 800c580:	bf00      	nop
 800c582:	e000      	b.n	800c586 <tcp_input+0x6be>
          goto aborted;
 800c584:	bf00      	nop
    tcp_input_pcb = NULL;
 800c586:	4b23      	ldr	r3, [pc, #140]	; (800c614 <tcp_input+0x74c>)
 800c588:	2200      	movs	r2, #0
 800c58a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800c58c:	4b25      	ldr	r3, [pc, #148]	; (800c624 <tcp_input+0x75c>)
 800c58e:	2200      	movs	r2, #0
 800c590:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800c592:	4b28      	ldr	r3, [pc, #160]	; (800c634 <tcp_input+0x76c>)
 800c594:	685b      	ldr	r3, [r3, #4]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d037      	beq.n	800c60a <tcp_input+0x742>
    {
      pbuf_free(inseg.p);
 800c59a:	4b26      	ldr	r3, [pc, #152]	; (800c634 <tcp_input+0x76c>)
 800c59c:	685b      	ldr	r3, [r3, #4]
 800c59e:	4618      	mov	r0, r3
 800c5a0:	f7fd ff02 	bl	800a3a8 <pbuf_free>
      inseg.p = NULL;
 800c5a4:	4b23      	ldr	r3, [pc, #140]	; (800c634 <tcp_input+0x76c>)
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800c5aa:	e02e      	b.n	800c60a <tcp_input+0x742>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800c5ac:	4b22      	ldr	r3, [pc, #136]	; (800c638 <tcp_input+0x770>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	899b      	ldrh	r3, [r3, #12]
 800c5b2:	b29b      	uxth	r3, r3
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	f7fc fa39 	bl	8008a2c <lwip_htons>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	f003 0304 	and.w	r3, r3, #4
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d115      	bne.n	800c5f0 <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c5c4:	4b1d      	ldr	r3, [pc, #116]	; (800c63c <tcp_input+0x774>)
 800c5c6:	6818      	ldr	r0, [r3, #0]
 800c5c8:	4b1d      	ldr	r3, [pc, #116]	; (800c640 <tcp_input+0x778>)
 800c5ca:	881b      	ldrh	r3, [r3, #0]
 800c5cc:	461a      	mov	r2, r3
 800c5ce:	4b1d      	ldr	r3, [pc, #116]	; (800c644 <tcp_input+0x77c>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c5d4:	4b18      	ldr	r3, [pc, #96]	; (800c638 <tcp_input+0x770>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c5d8:	885b      	ldrh	r3, [r3, #2]
 800c5da:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c5dc:	4a16      	ldr	r2, [pc, #88]	; (800c638 <tcp_input+0x770>)
 800c5de:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c5e0:	8812      	ldrh	r2, [r2, #0]
 800c5e2:	b292      	uxth	r2, r2
 800c5e4:	9201      	str	r2, [sp, #4]
 800c5e6:	9300      	str	r3, [sp, #0]
 800c5e8:	4b17      	ldr	r3, [pc, #92]	; (800c648 <tcp_input+0x780>)
 800c5ea:	4a18      	ldr	r2, [pc, #96]	; (800c64c <tcp_input+0x784>)
 800c5ec:	f002 fba8 	bl	800ed40 <tcp_rst>
    pbuf_free(p);
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	f7fd fed9 	bl	800a3a8 <pbuf_free>
  return;
 800c5f6:	e008      	b.n	800c60a <tcp_input+0x742>
    goto dropped;
 800c5f8:	bf00      	nop
 800c5fa:	e002      	b.n	800c602 <tcp_input+0x73a>
dropped:
 800c5fc:	bf00      	nop
 800c5fe:	e000      	b.n	800c602 <tcp_input+0x73a>
      goto dropped;
 800c600:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f7fd fed0 	bl	800a3a8 <pbuf_free>
 800c608:	e000      	b.n	800c60c <tcp_input+0x744>
  return;
 800c60a:	bf00      	nop
}
 800c60c:	3724      	adds	r7, #36	; 0x24
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd90      	pop	{r4, r7, pc}
 800c612:	bf00      	nop
 800c614:	2000b810 	.word	0x2000b810
 800c618:	20004c2d 	.word	0x20004c2d
 800c61c:	2000b7fc 	.word	0x2000b7fc
 800c620:	20004c28 	.word	0x20004c28
 800c624:	20004c30 	.word	0x20004c30
 800c628:	0801efb8 	.word	0x0801efb8
 800c62c:	0801f154 	.word	0x0801f154
 800c630:	0801effc 	.word	0x0801effc
 800c634:	20004c00 	.word	0x20004c00
 800c638:	20004c10 	.word	0x20004c10
 800c63c:	20004c24 	.word	0x20004c24
 800c640:	20004c2a 	.word	0x20004c2a
 800c644:	20004c20 	.word	0x20004c20
 800c648:	20007f94 	.word	0x20007f94
 800c64c:	20007f98 	.word	0x20007f98

0800c650 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b082      	sub	sp, #8
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 800c658:	4b14      	ldr	r3, [pc, #80]	; (800c6ac <tcp_input_delayed_close+0x5c>)
 800c65a:	781b      	ldrb	r3, [r3, #0]
 800c65c:	f003 0310 	and.w	r3, r3, #16
 800c660:	2b00      	cmp	r3, #0
 800c662:	d01d      	beq.n	800c6a0 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	7e9b      	ldrb	r3, [r3, #26]
 800c668:	f003 0310 	and.w	r3, r3, #16
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d10d      	bne.n	800c68c <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c676:	2b00      	cmp	r3, #0
 800c678:	d008      	beq.n	800c68c <tcp_input_delayed_close+0x3c>
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c680:	687a      	ldr	r2, [r7, #4]
 800c682:	6912      	ldr	r2, [r2, #16]
 800c684:	f06f 010e 	mvn.w	r1, #14
 800c688:	4610      	mov	r0, r2
 800c68a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c68c:	6879      	ldr	r1, [r7, #4]
 800c68e:	4808      	ldr	r0, [pc, #32]	; (800c6b0 <tcp_input_delayed_close+0x60>)
 800c690:	f7ff fb02 	bl	800bc98 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800c694:	6879      	ldr	r1, [r7, #4]
 800c696:	2001      	movs	r0, #1
 800c698:	f7fd f8ca 	bl	8009830 <memp_free>
    return 1;
 800c69c:	2301      	movs	r3, #1
 800c69e:	e000      	b.n	800c6a2 <tcp_input_delayed_close+0x52>
  }
  return 0;
 800c6a0:	2300      	movs	r3, #0
}
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	3708      	adds	r7, #8
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}
 800c6aa:	bf00      	nop
 800c6ac:	20004c2d 	.word	0x20004c2d
 800c6b0:	2000b7fc 	.word	0x2000b7fc

0800c6b4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b088      	sub	sp, #32
 800c6b8:	af02      	add	r7, sp, #8
 800c6ba:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800c6bc:	4b64      	ldr	r3, [pc, #400]	; (800c850 <tcp_listen_input+0x19c>)
 800c6be:	781b      	ldrb	r3, [r3, #0]
 800c6c0:	f003 0304 	and.w	r3, r3, #4
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	f040 80bc 	bne.w	800c842 <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800c6ca:	4b61      	ldr	r3, [pc, #388]	; (800c850 <tcp_listen_input+0x19c>)
 800c6cc:	781b      	ldrb	r3, [r3, #0]
 800c6ce:	f003 0310 	and.w	r3, r3, #16
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d016      	beq.n	800c704 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c6d6:	4b5f      	ldr	r3, [pc, #380]	; (800c854 <tcp_listen_input+0x1a0>)
 800c6d8:	6818      	ldr	r0, [r3, #0]
 800c6da:	4b5f      	ldr	r3, [pc, #380]	; (800c858 <tcp_listen_input+0x1a4>)
 800c6dc:	881b      	ldrh	r3, [r3, #0]
 800c6de:	461a      	mov	r2, r3
 800c6e0:	4b5e      	ldr	r3, [pc, #376]	; (800c85c <tcp_listen_input+0x1a8>)
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c6e6:	4b5e      	ldr	r3, [pc, #376]	; (800c860 <tcp_listen_input+0x1ac>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c6ea:	885b      	ldrh	r3, [r3, #2]
 800c6ec:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c6ee:	4a5c      	ldr	r2, [pc, #368]	; (800c860 <tcp_listen_input+0x1ac>)
 800c6f0:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c6f2:	8812      	ldrh	r2, [r2, #0]
 800c6f4:	b292      	uxth	r2, r2
 800c6f6:	9201      	str	r2, [sp, #4]
 800c6f8:	9300      	str	r3, [sp, #0]
 800c6fa:	4b5a      	ldr	r3, [pc, #360]	; (800c864 <tcp_listen_input+0x1b0>)
 800c6fc:	4a5a      	ldr	r2, [pc, #360]	; (800c868 <tcp_listen_input+0x1b4>)
 800c6fe:	f002 fb1f 	bl	800ed40 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800c702:	e0a0      	b.n	800c846 <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 800c704:	4b52      	ldr	r3, [pc, #328]	; (800c850 <tcp_listen_input+0x19c>)
 800c706:	781b      	ldrb	r3, [r3, #0]
 800c708:	f003 0302 	and.w	r3, r3, #2
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	f000 809a 	beq.w	800c846 <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	7d5b      	ldrb	r3, [r3, #21]
 800c716:	4618      	mov	r0, r3
 800c718:	f7ff f9fa 	bl	800bb10 <tcp_alloc>
 800c71c:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800c71e:	697b      	ldr	r3, [r7, #20]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d111      	bne.n	800c748 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	699b      	ldr	r3, [r3, #24]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d00a      	beq.n	800c742 <tcp_listen_input+0x8e>
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	699b      	ldr	r3, [r3, #24]
 800c730:	687a      	ldr	r2, [r7, #4]
 800c732:	6910      	ldr	r0, [r2, #16]
 800c734:	f04f 32ff 	mov.w	r2, #4294967295
 800c738:	2100      	movs	r1, #0
 800c73a:	4798      	blx	r3
 800c73c:	4603      	mov	r3, r0
 800c73e:	73bb      	strb	r3, [r7, #14]
      return;
 800c740:	e082      	b.n	800c848 <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c742:	23f0      	movs	r3, #240	; 0xf0
 800c744:	73bb      	strb	r3, [r7, #14]
      return;
 800c746:	e07f      	b.n	800c848 <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800c748:	4b48      	ldr	r3, [pc, #288]	; (800c86c <tcp_listen_input+0x1b8>)
 800c74a:	695a      	ldr	r2, [r3, #20]
 800c74c:	697b      	ldr	r3, [r7, #20]
 800c74e:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800c750:	4b46      	ldr	r3, [pc, #280]	; (800c86c <tcp_listen_input+0x1b8>)
 800c752:	691a      	ldr	r2, [r3, #16]
 800c754:	697b      	ldr	r3, [r7, #20]
 800c756:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	8ada      	ldrh	r2, [r3, #22]
 800c75c:	697b      	ldr	r3, [r7, #20]
 800c75e:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800c760:	4b3f      	ldr	r3, [pc, #252]	; (800c860 <tcp_listen_input+0x1ac>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	881b      	ldrh	r3, [r3, #0]
 800c766:	b29a      	uxth	r2, r3
 800c768:	697b      	ldr	r3, [r7, #20]
 800c76a:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800c76c:	697b      	ldr	r3, [r7, #20]
 800c76e:	2203      	movs	r2, #3
 800c770:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800c772:	4b3a      	ldr	r3, [pc, #232]	; (800c85c <tcp_listen_input+0x1a8>)
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	1c5a      	adds	r2, r3, #1
 800c778:	697b      	ldr	r3, [r7, #20]
 800c77a:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c780:	697b      	ldr	r3, [r7, #20]
 800c782:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800c784:	6978      	ldr	r0, [r7, #20]
 800c786:	f7ff fb03 	bl	800bd90 <tcp_next_iss>
 800c78a:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800c78c:	697b      	ldr	r3, [r7, #20]
 800c78e:	693a      	ldr	r2, [r7, #16]
 800c790:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 800c792:	697b      	ldr	r3, [r7, #20]
 800c794:	693a      	ldr	r2, [r7, #16]
 800c796:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 800c798:	697b      	ldr	r3, [r7, #20]
 800c79a:	693a      	ldr	r2, [r7, #16]
 800c79c:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800c79e:	697b      	ldr	r3, [r7, #20]
 800c7a0:	693a      	ldr	r2, [r7, #16]
 800c7a2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800c7a4:	4b2d      	ldr	r3, [pc, #180]	; (800c85c <tcp_listen_input+0x1a8>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	1e5a      	subs	r2, r3, #1
 800c7aa:	697b      	ldr	r3, [r7, #20]
 800c7ac:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	691a      	ldr	r2, [r3, #16]
 800c7b2:	697b      	ldr	r3, [r7, #20]
 800c7b4:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800c7b6:	697b      	ldr	r3, [r7, #20]
 800c7b8:	687a      	ldr	r2, [r7, #4]
 800c7ba:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	7a1b      	ldrb	r3, [r3, #8]
 800c7c0:	f003 030c 	and.w	r3, r3, #12
 800c7c4:	b2da      	uxtb	r2, r3
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800c7ca:	4b29      	ldr	r3, [pc, #164]	; (800c870 <tcp_listen_input+0x1bc>)
 800c7cc:	681a      	ldr	r2, [r3, #0]
 800c7ce:	697b      	ldr	r3, [r7, #20]
 800c7d0:	60da      	str	r2, [r3, #12]
 800c7d2:	4a27      	ldr	r2, [pc, #156]	; (800c870 <tcp_listen_input+0x1bc>)
 800c7d4:	697b      	ldr	r3, [r7, #20]
 800c7d6:	6013      	str	r3, [r2, #0]
 800c7d8:	f002 fd02 	bl	800f1e0 <tcp_timer_needed>
 800c7dc:	4b25      	ldr	r3, [pc, #148]	; (800c874 <tcp_listen_input+0x1c0>)
 800c7de:	2201      	movs	r2, #1
 800c7e0:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800c7e2:	6978      	ldr	r0, [r7, #20]
 800c7e4:	f001 fd12 	bl	800e20c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800c7e8:	4b1d      	ldr	r3, [pc, #116]	; (800c860 <tcp_listen_input+0x1ac>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	89db      	ldrh	r3, [r3, #14]
 800c7ee:	b29a      	uxth	r2, r3
 800c7f0:	697b      	ldr	r3, [r7, #20]
 800c7f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800c7f6:	697b      	ldr	r3, [r7, #20]
 800c7f8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c7fc:	697b      	ldr	r3, [r7, #20]
 800c7fe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800c802:	697b      	ldr	r3, [r7, #20]
 800c804:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800c806:	697b      	ldr	r3, [r7, #20]
 800c808:	3304      	adds	r3, #4
 800c80a:	4619      	mov	r1, r3
 800c80c:	4610      	mov	r0, r2
 800c80e:	f7ff fad5 	bl	800bdbc <tcp_eff_send_mss_impl>
 800c812:	4603      	mov	r3, r0
 800c814:	461a      	mov	r2, r3
 800c816:	697b      	ldr	r3, [r7, #20]
 800c818:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800c81a:	2112      	movs	r1, #18
 800c81c:	6978      	ldr	r0, [r7, #20]
 800c81e:	f001 fead 	bl	800e57c <tcp_enqueue_flags>
 800c822:	4603      	mov	r3, r0
 800c824:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800c826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d004      	beq.n	800c838 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 800c82e:	2100      	movs	r1, #0
 800c830:	6978      	ldr	r0, [r7, #20]
 800c832:	f7fe fb53 	bl	800aedc <tcp_abandon>
      return;
 800c836:	e007      	b.n	800c848 <tcp_listen_input+0x194>
    tcp_output(npcb);
 800c838:	6978      	ldr	r0, [r7, #20]
 800c83a:	f001 fff7 	bl	800e82c <tcp_output>
  return;
 800c83e:	bf00      	nop
 800c840:	e001      	b.n	800c846 <tcp_listen_input+0x192>
    return;
 800c842:	bf00      	nop
 800c844:	e000      	b.n	800c848 <tcp_listen_input+0x194>
  return;
 800c846:	bf00      	nop
}
 800c848:	3718      	adds	r7, #24
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}
 800c84e:	bf00      	nop
 800c850:	20004c2c 	.word	0x20004c2c
 800c854:	20004c24 	.word	0x20004c24
 800c858:	20004c2a 	.word	0x20004c2a
 800c85c:	20004c20 	.word	0x20004c20
 800c860:	20004c10 	.word	0x20004c10
 800c864:	20007f94 	.word	0x20007f94
 800c868:	20007f98 	.word	0x20007f98
 800c86c:	20007f84 	.word	0x20007f84
 800c870:	2000b7fc 	.word	0x2000b7fc
 800c874:	2000b7f8 	.word	0x2000b7f8

0800c878 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b084      	sub	sp, #16
 800c87c:	af02      	add	r7, sp, #8
 800c87e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800c880:	4b29      	ldr	r3, [pc, #164]	; (800c928 <tcp_timewait_input+0xb0>)
 800c882:	781b      	ldrb	r3, [r3, #0]
 800c884:	f003 0304 	and.w	r3, r3, #4
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d147      	bne.n	800c91c <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800c88c:	4b26      	ldr	r3, [pc, #152]	; (800c928 <tcp_timewait_input+0xb0>)
 800c88e:	781b      	ldrb	r3, [r3, #0]
 800c890:	f003 0302 	and.w	r3, r3, #2
 800c894:	2b00      	cmp	r3, #0
 800c896:	d027      	beq.n	800c8e8 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800c898:	4b24      	ldr	r3, [pc, #144]	; (800c92c <tcp_timewait_input+0xb4>)
 800c89a:	681a      	ldr	r2, [r3, #0]
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8a0:	1ad3      	subs	r3, r2, r3
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	db2a      	blt.n	800c8fc <tcp_timewait_input+0x84>
 800c8a6:	4b21      	ldr	r3, [pc, #132]	; (800c92c <tcp_timewait_input+0xb4>)
 800c8a8:	681a      	ldr	r2, [r3, #0]
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8ae:	6879      	ldr	r1, [r7, #4]
 800c8b0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c8b2:	440b      	add	r3, r1
 800c8b4:	1ad3      	subs	r3, r2, r3
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	dc20      	bgt.n	800c8fc <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c8ba:	4b1d      	ldr	r3, [pc, #116]	; (800c930 <tcp_timewait_input+0xb8>)
 800c8bc:	6818      	ldr	r0, [r3, #0]
 800c8be:	4b1d      	ldr	r3, [pc, #116]	; (800c934 <tcp_timewait_input+0xbc>)
 800c8c0:	881b      	ldrh	r3, [r3, #0]
 800c8c2:	461a      	mov	r2, r3
 800c8c4:	4b19      	ldr	r3, [pc, #100]	; (800c92c <tcp_timewait_input+0xb4>)
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c8ca:	4b1b      	ldr	r3, [pc, #108]	; (800c938 <tcp_timewait_input+0xc0>)
 800c8cc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c8ce:	885b      	ldrh	r3, [r3, #2]
 800c8d0:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c8d2:	4a19      	ldr	r2, [pc, #100]	; (800c938 <tcp_timewait_input+0xc0>)
 800c8d4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800c8d6:	8812      	ldrh	r2, [r2, #0]
 800c8d8:	b292      	uxth	r2, r2
 800c8da:	9201      	str	r2, [sp, #4]
 800c8dc:	9300      	str	r3, [sp, #0]
 800c8de:	4b17      	ldr	r3, [pc, #92]	; (800c93c <tcp_timewait_input+0xc4>)
 800c8e0:	4a17      	ldr	r2, [pc, #92]	; (800c940 <tcp_timewait_input+0xc8>)
 800c8e2:	f002 fa2d 	bl	800ed40 <tcp_rst>
      return;
 800c8e6:	e01c      	b.n	800c922 <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 800c8e8:	4b0f      	ldr	r3, [pc, #60]	; (800c928 <tcp_timewait_input+0xb0>)
 800c8ea:	781b      	ldrb	r3, [r3, #0]
 800c8ec:	f003 0301 	and.w	r3, r3, #1
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d003      	beq.n	800c8fc <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800c8f4:	4b13      	ldr	r3, [pc, #76]	; (800c944 <tcp_timewait_input+0xcc>)
 800c8f6:	681a      	ldr	r2, [r3, #0]
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800c8fc:	4b0d      	ldr	r3, [pc, #52]	; (800c934 <tcp_timewait_input+0xbc>)
 800c8fe:	881b      	ldrh	r3, [r3, #0]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d00d      	beq.n	800c920 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	7e9b      	ldrb	r3, [r3, #26]
 800c908:	f043 0302 	orr.w	r3, r3, #2
 800c90c:	b2da      	uxtb	r2, r3
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800c912:	6878      	ldr	r0, [r7, #4]
 800c914:	f001 ff8a 	bl	800e82c <tcp_output>
  }
  return;
 800c918:	bf00      	nop
 800c91a:	e001      	b.n	800c920 <tcp_timewait_input+0xa8>
    return;
 800c91c:	bf00      	nop
 800c91e:	e000      	b.n	800c922 <tcp_timewait_input+0xaa>
  return;
 800c920:	bf00      	nop
}
 800c922:	3708      	adds	r7, #8
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}
 800c928:	20004c2c 	.word	0x20004c2c
 800c92c:	20004c20 	.word	0x20004c20
 800c930:	20004c24 	.word	0x20004c24
 800c934:	20004c2a 	.word	0x20004c2a
 800c938:	20004c10 	.word	0x20004c10
 800c93c:	20007f94 	.word	0x20007f94
 800c940:	20007f98 	.word	0x20007f98
 800c944:	2000b800 	.word	0x2000b800

0800c948 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b08a      	sub	sp, #40	; 0x28
 800c94c:	af02      	add	r7, sp, #8
 800c94e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800c950:	2300      	movs	r3, #0
 800c952:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800c954:	2300      	movs	r3, #0
 800c956:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800c958:	4ba4      	ldr	r3, [pc, #656]	; (800cbec <tcp_process+0x2a4>)
 800c95a:	781b      	ldrb	r3, [r3, #0]
 800c95c:	f003 0304 	and.w	r3, r3, #4
 800c960:	2b00      	cmp	r3, #0
 800c962:	d04e      	beq.n	800ca02 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	7d1b      	ldrb	r3, [r3, #20]
 800c968:	2b02      	cmp	r3, #2
 800c96a:	d108      	bne.n	800c97e <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c970:	4b9f      	ldr	r3, [pc, #636]	; (800cbf0 <tcp_process+0x2a8>)
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	429a      	cmp	r2, r3
 800c976:	d123      	bne.n	800c9c0 <tcp_process+0x78>
        acceptable = 1;
 800c978:	2301      	movs	r3, #1
 800c97a:	76fb      	strb	r3, [r7, #27]
 800c97c:	e020      	b.n	800c9c0 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c982:	4b9c      	ldr	r3, [pc, #624]	; (800cbf4 <tcp_process+0x2ac>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	429a      	cmp	r2, r3
 800c988:	d102      	bne.n	800c990 <tcp_process+0x48>
        acceptable = 1;
 800c98a:	2301      	movs	r3, #1
 800c98c:	76fb      	strb	r3, [r7, #27]
 800c98e:	e017      	b.n	800c9c0 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c990:	4b98      	ldr	r3, [pc, #608]	; (800cbf4 <tcp_process+0x2ac>)
 800c992:	681a      	ldr	r2, [r3, #0]
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c998:	1ad3      	subs	r3, r2, r3
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	db10      	blt.n	800c9c0 <tcp_process+0x78>
 800c99e:	4b95      	ldr	r3, [pc, #596]	; (800cbf4 <tcp_process+0x2ac>)
 800c9a0:	681a      	ldr	r2, [r3, #0]
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9a6:	6879      	ldr	r1, [r7, #4]
 800c9a8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c9aa:	440b      	add	r3, r1
 800c9ac:	1ad3      	subs	r3, r2, r3
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	dc06      	bgt.n	800c9c0 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	7e9b      	ldrb	r3, [r3, #26]
 800c9b6:	f043 0302 	orr.w	r3, r3, #2
 800c9ba:	b2da      	uxtb	r2, r3
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800c9c0:	7efb      	ldrb	r3, [r7, #27]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d01b      	beq.n	800c9fe <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	7d1b      	ldrb	r3, [r3, #20]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d106      	bne.n	800c9dc <tcp_process+0x94>
 800c9ce:	4b8a      	ldr	r3, [pc, #552]	; (800cbf8 <tcp_process+0x2b0>)
 800c9d0:	f240 22e7 	movw	r2, #743	; 0x2e7
 800c9d4:	4989      	ldr	r1, [pc, #548]	; (800cbfc <tcp_process+0x2b4>)
 800c9d6:	488a      	ldr	r0, [pc, #552]	; (800cc00 <tcp_process+0x2b8>)
 800c9d8:	f00d fea0 	bl	801a71c <iprintf>
      recv_flags |= TF_RESET;
 800c9dc:	4b89      	ldr	r3, [pc, #548]	; (800cc04 <tcp_process+0x2bc>)
 800c9de:	781b      	ldrb	r3, [r3, #0]
 800c9e0:	f043 0308 	orr.w	r3, r3, #8
 800c9e4:	b2da      	uxtb	r2, r3
 800c9e6:	4b87      	ldr	r3, [pc, #540]	; (800cc04 <tcp_process+0x2bc>)
 800c9e8:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	7e9b      	ldrb	r3, [r3, #26]
 800c9ee:	f023 0301 	bic.w	r3, r3, #1
 800c9f2:	b2da      	uxtb	r2, r3
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 800c9f8:	f06f 030d 	mvn.w	r3, #13
 800c9fc:	e34d      	b.n	800d09a <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 800c9fe:	2300      	movs	r3, #0
 800ca00:	e34b      	b.n	800d09a <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800ca02:	4b7a      	ldr	r3, [pc, #488]	; (800cbec <tcp_process+0x2a4>)
 800ca04:	781b      	ldrb	r3, [r3, #0]
 800ca06:	f003 0302 	and.w	r3, r3, #2
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d010      	beq.n	800ca30 <tcp_process+0xe8>
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	7d1b      	ldrb	r3, [r3, #20]
 800ca12:	2b02      	cmp	r3, #2
 800ca14:	d00c      	beq.n	800ca30 <tcp_process+0xe8>
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	7d1b      	ldrb	r3, [r3, #20]
 800ca1a:	2b03      	cmp	r3, #3
 800ca1c:	d008      	beq.n	800ca30 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	7e9b      	ldrb	r3, [r3, #26]
 800ca22:	f043 0302 	orr.w	r3, r3, #2
 800ca26:	b2da      	uxtb	r2, r3
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	e334      	b.n	800d09a <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	7e9b      	ldrb	r3, [r3, #26]
 800ca34:	f003 0310 	and.w	r3, r3, #16
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d103      	bne.n	800ca44 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ca3c:	4b72      	ldr	r3, [pc, #456]	; (800cc08 <tcp_process+0x2c0>)
 800ca3e:	681a      	ldr	r2, [r3, #0]
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2200      	movs	r2, #0
 800ca48:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 800ca4c:	6878      	ldr	r0, [r7, #4]
 800ca4e:	f001 fbdd 	bl	800e20c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	7d1b      	ldrb	r3, [r3, #20]
 800ca56:	3b02      	subs	r3, #2
 800ca58:	2b07      	cmp	r3, #7
 800ca5a:	f200 830e 	bhi.w	800d07a <tcp_process+0x732>
 800ca5e:	a201      	add	r2, pc, #4	; (adr r2, 800ca64 <tcp_process+0x11c>)
 800ca60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca64:	0800ca85 	.word	0x0800ca85
 800ca68:	0800cc7d 	.word	0x0800cc7d
 800ca6c:	0800cdd5 	.word	0x0800cdd5
 800ca70:	0800cdff 	.word	0x0800cdff
 800ca74:	0800cf29 	.word	0x0800cf29
 800ca78:	0800cdd5 	.word	0x0800cdd5
 800ca7c:	0800cfb5 	.word	0x0800cfb5
 800ca80:	0800d045 	.word	0x0800d045
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800ca84:	4b59      	ldr	r3, [pc, #356]	; (800cbec <tcp_process+0x2a4>)
 800ca86:	781b      	ldrb	r3, [r3, #0]
 800ca88:	f003 0310 	and.w	r3, r3, #16
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	f000 80cb 	beq.w	800cc28 <tcp_process+0x2e0>
 800ca92:	4b56      	ldr	r3, [pc, #344]	; (800cbec <tcp_process+0x2a4>)
 800ca94:	781b      	ldrb	r3, [r3, #0]
 800ca96:	f003 0302 	and.w	r3, r3, #2
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	f000 80c4 	beq.w	800cc28 <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800caa4:	1c5a      	adds	r2, r3, #1
 800caa6:	4b52      	ldr	r3, [pc, #328]	; (800cbf0 <tcp_process+0x2a8>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	429a      	cmp	r2, r3
 800caac:	f040 80bc 	bne.w	800cc28 <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 800cab0:	4b50      	ldr	r3, [pc, #320]	; (800cbf4 <tcp_process+0x2ac>)
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	1c5a      	adds	r2, r3, #1
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 800cac2:	4b4b      	ldr	r3, [pc, #300]	; (800cbf0 <tcp_process+0x2a8>)
 800cac4:	681a      	ldr	r2, [r3, #0]
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 800caca:	4b50      	ldr	r3, [pc, #320]	; (800cc0c <tcp_process+0x2c4>)
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	89db      	ldrh	r3, [r3, #14]
 800cad0:	b29a      	uxth	r2, r3
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800cae4:	4b43      	ldr	r3, [pc, #268]	; (800cbf4 <tcp_process+0x2ac>)
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	1e5a      	subs	r2, r3, #1
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	2204      	movs	r2, #4
 800caf2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	3304      	adds	r3, #4
 800cafc:	4619      	mov	r1, r3
 800cafe:	4610      	mov	r0, r2
 800cb00:	f7ff f95c 	bl	800bdbc <tcp_eff_send_mss_impl>
 800cb04:	4603      	mov	r3, r0
 800cb06:	461a      	mov	r2, r3
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cb10:	005b      	lsls	r3, r3, #1
 800cb12:	f241 121c 	movw	r2, #4380	; 0x111c
 800cb16:	429a      	cmp	r2, r3
 800cb18:	bf38      	it	cc
 800cb1a:	461a      	movcc	r2, r3
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cb20:	009b      	lsls	r3, r3, #2
 800cb22:	4293      	cmp	r3, r2
 800cb24:	bf28      	it	cs
 800cb26:	4613      	movcs	r3, r2
 800cb28:	b29a      	uxth	r2, r3
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d106      	bne.n	800cb48 <tcp_process+0x200>
 800cb3a:	4b2f      	ldr	r3, [pc, #188]	; (800cbf8 <tcp_process+0x2b0>)
 800cb3c:	f240 321a 	movw	r2, #794	; 0x31a
 800cb40:	4933      	ldr	r1, [pc, #204]	; (800cc10 <tcp_process+0x2c8>)
 800cb42:	482f      	ldr	r0, [pc, #188]	; (800cc00 <tcp_process+0x2b8>)
 800cb44:	f00d fdea 	bl	801a71c <iprintf>
      --pcb->snd_queuelen;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cb4e:	3b01      	subs	r3, #1
 800cb50:	b29a      	uxth	r2, r3
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb5c:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 800cb5e:	69fb      	ldr	r3, [r7, #28]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d111      	bne.n	800cb88 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cb68:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800cb6a:	69fb      	ldr	r3, [r7, #28]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d106      	bne.n	800cb7e <tcp_process+0x236>
 800cb70:	4b21      	ldr	r3, [pc, #132]	; (800cbf8 <tcp_process+0x2b0>)
 800cb72:	f240 3222 	movw	r2, #802	; 0x322
 800cb76:	4927      	ldr	r1, [pc, #156]	; (800cc14 <tcp_process+0x2cc>)
 800cb78:	4821      	ldr	r0, [pc, #132]	; (800cc00 <tcp_process+0x2b8>)
 800cb7a:	f00d fdcf 	bl	801a71c <iprintf>
        pcb->unsent = rseg->next;
 800cb7e:	69fb      	ldr	r3, [r7, #28]
 800cb80:	681a      	ldr	r2, [r3, #0]
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	669a      	str	r2, [r3, #104]	; 0x68
 800cb86:	e003      	b.n	800cb90 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 800cb88:	69fb      	ldr	r3, [r7, #28]
 800cb8a:	681a      	ldr	r2, [r3, #0]
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 800cb90:	69f8      	ldr	r0, [r7, #28]
 800cb92:	f7fe feaa 	bl	800b8ea <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d104      	bne.n	800cba8 <tcp_process+0x260>
        pcb->rtime = -1;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cba4:	861a      	strh	r2, [r3, #48]	; 0x30
 800cba6:	e006      	b.n	800cbb6 <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2200      	movs	r2, #0
 800cbac:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d00a      	beq.n	800cbd6 <tcp_process+0x28e>
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cbc6:	687a      	ldr	r2, [r7, #4]
 800cbc8:	6910      	ldr	r0, [r2, #16]
 800cbca:	2200      	movs	r2, #0
 800cbcc:	6879      	ldr	r1, [r7, #4]
 800cbce:	4798      	blx	r3
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	76bb      	strb	r3, [r7, #26]
 800cbd4:	e001      	b.n	800cbda <tcp_process+0x292>
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 800cbda:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800cbde:	f113 0f0d 	cmn.w	r3, #13
 800cbe2:	d119      	bne.n	800cc18 <tcp_process+0x2d0>
        return ERR_ABRT;
 800cbe4:	f06f 030c 	mvn.w	r3, #12
 800cbe8:	e257      	b.n	800d09a <tcp_process+0x752>
 800cbea:	bf00      	nop
 800cbec:	20004c2c 	.word	0x20004c2c
 800cbf0:	20004c24 	.word	0x20004c24
 800cbf4:	20004c20 	.word	0x20004c20
 800cbf8:	0801efb8 	.word	0x0801efb8
 800cbfc:	0801f170 	.word	0x0801f170
 800cc00:	0801effc 	.word	0x0801effc
 800cc04:	20004c2d 	.word	0x20004c2d
 800cc08:	2000b800 	.word	0x2000b800
 800cc0c:	20004c10 	.word	0x20004c10
 800cc10:	0801f190 	.word	0x0801f190
 800cc14:	0801f1a8 	.word	0x0801f1a8
      }
      tcp_ack_now(pcb);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	7e9b      	ldrb	r3, [r3, #26]
 800cc1c:	f043 0302 	orr.w	r3, r3, #2
 800cc20:	b2da      	uxtb	r2, r3
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 800cc26:	e22a      	b.n	800d07e <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 800cc28:	4b9f      	ldr	r3, [pc, #636]	; (800cea8 <tcp_process+0x560>)
 800cc2a:	781b      	ldrb	r3, [r3, #0]
 800cc2c:	f003 0310 	and.w	r3, r3, #16
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	f000 8224 	beq.w	800d07e <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800cc36:	4b9d      	ldr	r3, [pc, #628]	; (800ceac <tcp_process+0x564>)
 800cc38:	6818      	ldr	r0, [r3, #0]
 800cc3a:	4b9d      	ldr	r3, [pc, #628]	; (800ceb0 <tcp_process+0x568>)
 800cc3c:	881b      	ldrh	r3, [r3, #0]
 800cc3e:	461a      	mov	r2, r3
 800cc40:	4b9c      	ldr	r3, [pc, #624]	; (800ceb4 <tcp_process+0x56c>)
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cc46:	4b9c      	ldr	r3, [pc, #624]	; (800ceb8 <tcp_process+0x570>)
 800cc48:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800cc4a:	885b      	ldrh	r3, [r3, #2]
 800cc4c:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cc4e:	4a9a      	ldr	r2, [pc, #616]	; (800ceb8 <tcp_process+0x570>)
 800cc50:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800cc52:	8812      	ldrh	r2, [r2, #0]
 800cc54:	b292      	uxth	r2, r2
 800cc56:	9201      	str	r2, [sp, #4]
 800cc58:	9300      	str	r3, [sp, #0]
 800cc5a:	4b98      	ldr	r3, [pc, #608]	; (800cebc <tcp_process+0x574>)
 800cc5c:	4a98      	ldr	r2, [pc, #608]	; (800cec0 <tcp_process+0x578>)
 800cc5e:	f002 f86f 	bl	800ed40 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cc68:	2b05      	cmp	r3, #5
 800cc6a:	f200 8208 	bhi.w	800d07e <tcp_process+0x736>
        pcb->rtime = 0;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	2200      	movs	r2, #0
 800cc72:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800cc74:	6878      	ldr	r0, [r7, #4]
 800cc76:	f002 f8d9 	bl	800ee2c <tcp_rexmit_rto>
    break;
 800cc7a:	e200      	b.n	800d07e <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 800cc7c:	4b8a      	ldr	r3, [pc, #552]	; (800cea8 <tcp_process+0x560>)
 800cc7e:	781b      	ldrb	r3, [r3, #0]
 800cc80:	f003 0310 	and.w	r3, r3, #16
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	f000 8091 	beq.w	800cdac <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800cc8a:	4b88      	ldr	r3, [pc, #544]	; (800ceac <tcp_process+0x564>)
 800cc8c:	681a      	ldr	r2, [r3, #0]
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc92:	1ad3      	subs	r3, r2, r3
 800cc94:	3b01      	subs	r3, #1
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	db71      	blt.n	800cd7e <tcp_process+0x436>
 800cc9a:	4b84      	ldr	r3, [pc, #528]	; (800ceac <tcp_process+0x564>)
 800cc9c:	681a      	ldr	r2, [r3, #0]
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cca2:	1ad3      	subs	r3, r2, r3
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	dc6a      	bgt.n	800cd7e <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2204      	movs	r2, #4
 800ccac:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d00b      	beq.n	800ccce <tcp_process+0x386>
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ccba:	699b      	ldr	r3, [r3, #24]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d106      	bne.n	800ccce <tcp_process+0x386>
 800ccc0:	4b80      	ldr	r3, [pc, #512]	; (800cec4 <tcp_process+0x57c>)
 800ccc2:	f240 3251 	movw	r2, #849	; 0x351
 800ccc6:	4980      	ldr	r1, [pc, #512]	; (800cec8 <tcp_process+0x580>)
 800ccc8:	4880      	ldr	r0, [pc, #512]	; (800cecc <tcp_process+0x584>)
 800ccca:	f00d fd27 	bl	801a71c <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d102      	bne.n	800ccdc <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 800ccd6:	23fa      	movs	r3, #250	; 0xfa
 800ccd8:	76bb      	strb	r3, [r7, #26]
 800ccda:	e011      	b.n	800cd00 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cce0:	699b      	ldr	r3, [r3, #24]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d00a      	beq.n	800ccfc <tcp_process+0x3b4>
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ccea:	699b      	ldr	r3, [r3, #24]
 800ccec:	687a      	ldr	r2, [r7, #4]
 800ccee:	6910      	ldr	r0, [r2, #16]
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	6879      	ldr	r1, [r7, #4]
 800ccf4:	4798      	blx	r3
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	76bb      	strb	r3, [r7, #26]
 800ccfa:	e001      	b.n	800cd00 <tcp_process+0x3b8>
 800ccfc:	23f0      	movs	r3, #240	; 0xf0
 800ccfe:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 800cd00:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d00a      	beq.n	800cd1e <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 800cd08:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800cd0c:	f113 0f0d 	cmn.w	r3, #13
 800cd10:	d002      	beq.n	800cd18 <tcp_process+0x3d0>
            tcp_abort(pcb);
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	f7fe f994 	bl	800b040 <tcp_abort>
          }
          return ERR_ABRT;
 800cd18:	f06f 030c 	mvn.w	r3, #12
 800cd1c:	e1bd      	b.n	800d09a <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f000 fa42 	bl	800d1a8 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 800cd24:	4b6a      	ldr	r3, [pc, #424]	; (800ced0 <tcp_process+0x588>)
 800cd26:	881b      	ldrh	r3, [r3, #0]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d005      	beq.n	800cd38 <tcp_process+0x3f0>
          recv_acked--;
 800cd2c:	4b68      	ldr	r3, [pc, #416]	; (800ced0 <tcp_process+0x588>)
 800cd2e:	881b      	ldrh	r3, [r3, #0]
 800cd30:	3b01      	subs	r3, #1
 800cd32:	b29a      	uxth	r2, r3
 800cd34:	4b66      	ldr	r3, [pc, #408]	; (800ced0 <tcp_process+0x588>)
 800cd36:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cd3c:	005b      	lsls	r3, r3, #1
 800cd3e:	f241 121c 	movw	r2, #4380	; 0x111c
 800cd42:	429a      	cmp	r2, r3
 800cd44:	bf38      	it	cc
 800cd46:	461a      	movcc	r2, r3
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cd4c:	009b      	lsls	r3, r3, #2
 800cd4e:	4293      	cmp	r3, r2
 800cd50:	bf28      	it	cs
 800cd52:	4613      	movcs	r3, r2
 800cd54:	b29a      	uxth	r2, r3
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 800cd5c:	4b5d      	ldr	r3, [pc, #372]	; (800ced4 <tcp_process+0x58c>)
 800cd5e:	781b      	ldrb	r3, [r3, #0]
 800cd60:	f003 0320 	and.w	r3, r3, #32
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d034      	beq.n	800cdd2 <tcp_process+0x48a>
          tcp_ack_now(pcb);
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	7e9b      	ldrb	r3, [r3, #26]
 800cd6c:	f043 0302 	orr.w	r3, r3, #2
 800cd70:	b2da      	uxtb	r2, r3
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2207      	movs	r2, #7
 800cd7a:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 800cd7c:	e029      	b.n	800cdd2 <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800cd7e:	4b4b      	ldr	r3, [pc, #300]	; (800ceac <tcp_process+0x564>)
 800cd80:	6818      	ldr	r0, [r3, #0]
 800cd82:	4b4b      	ldr	r3, [pc, #300]	; (800ceb0 <tcp_process+0x568>)
 800cd84:	881b      	ldrh	r3, [r3, #0]
 800cd86:	461a      	mov	r2, r3
 800cd88:	4b4a      	ldr	r3, [pc, #296]	; (800ceb4 <tcp_process+0x56c>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cd8e:	4b4a      	ldr	r3, [pc, #296]	; (800ceb8 <tcp_process+0x570>)
 800cd90:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800cd92:	885b      	ldrh	r3, [r3, #2]
 800cd94:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800cd96:	4a48      	ldr	r2, [pc, #288]	; (800ceb8 <tcp_process+0x570>)
 800cd98:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800cd9a:	8812      	ldrh	r2, [r2, #0]
 800cd9c:	b292      	uxth	r2, r2
 800cd9e:	9201      	str	r2, [sp, #4]
 800cda0:	9300      	str	r3, [sp, #0]
 800cda2:	4b46      	ldr	r3, [pc, #280]	; (800cebc <tcp_process+0x574>)
 800cda4:	4a46      	ldr	r2, [pc, #280]	; (800cec0 <tcp_process+0x578>)
 800cda6:	f001 ffcb 	bl	800ed40 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 800cdaa:	e16a      	b.n	800d082 <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800cdac:	4b3e      	ldr	r3, [pc, #248]	; (800cea8 <tcp_process+0x560>)
 800cdae:	781b      	ldrb	r3, [r3, #0]
 800cdb0:	f003 0302 	and.w	r3, r3, #2
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	f000 8164 	beq.w	800d082 <tcp_process+0x73a>
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdbe:	1e5a      	subs	r2, r3, #1
 800cdc0:	4b3c      	ldr	r3, [pc, #240]	; (800ceb4 <tcp_process+0x56c>)
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	429a      	cmp	r2, r3
 800cdc6:	f040 815c 	bne.w	800d082 <tcp_process+0x73a>
      tcp_rexmit(pcb);
 800cdca:	6878      	ldr	r0, [r7, #4]
 800cdcc:	f002 f864 	bl	800ee98 <tcp_rexmit>
    break;
 800cdd0:	e157      	b.n	800d082 <tcp_process+0x73a>
 800cdd2:	e156      	b.n	800d082 <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 800cdd4:	6878      	ldr	r0, [r7, #4]
 800cdd6:	f000 f9e7 	bl	800d1a8 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800cdda:	4b3e      	ldr	r3, [pc, #248]	; (800ced4 <tcp_process+0x58c>)
 800cddc:	781b      	ldrb	r3, [r3, #0]
 800cdde:	f003 0320 	and.w	r3, r3, #32
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	f000 814f 	beq.w	800d086 <tcp_process+0x73e>
      tcp_ack_now(pcb);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	7e9b      	ldrb	r3, [r3, #26]
 800cdec:	f043 0302 	orr.w	r3, r3, #2
 800cdf0:	b2da      	uxtb	r2, r3
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	2207      	movs	r2, #7
 800cdfa:	751a      	strb	r2, [r3, #20]
    }
    break;
 800cdfc:	e143      	b.n	800d086 <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 800cdfe:	6878      	ldr	r0, [r7, #4]
 800ce00:	f000 f9d2 	bl	800d1a8 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800ce04:	4b33      	ldr	r3, [pc, #204]	; (800ced4 <tcp_process+0x58c>)
 800ce06:	781b      	ldrb	r3, [r3, #0]
 800ce08:	f003 0320 	and.w	r3, r3, #32
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d074      	beq.n	800cefa <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ce10:	4b25      	ldr	r3, [pc, #148]	; (800cea8 <tcp_process+0x560>)
 800ce12:	781b      	ldrb	r3, [r3, #0]
 800ce14:	f003 0310 	and.w	r3, r3, #16
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d063      	beq.n	800cee4 <tcp_process+0x59c>
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ce20:	4b22      	ldr	r3, [pc, #136]	; (800ceac <tcp_process+0x564>)
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	429a      	cmp	r2, r3
 800ce26:	d15d      	bne.n	800cee4 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d159      	bne.n	800cee4 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	7e9b      	ldrb	r3, [r3, #26]
 800ce34:	f043 0302 	orr.w	r3, r3, #2
 800ce38:	b2da      	uxtb	r2, r3
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	f7fe fee8 	bl	800bc14 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ce44:	4b24      	ldr	r3, [pc, #144]	; (800ced8 <tcp_process+0x590>)
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	687a      	ldr	r2, [r7, #4]
 800ce4a:	429a      	cmp	r2, r3
 800ce4c:	d105      	bne.n	800ce5a <tcp_process+0x512>
 800ce4e:	4b22      	ldr	r3, [pc, #136]	; (800ced8 <tcp_process+0x590>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	68db      	ldr	r3, [r3, #12]
 800ce54:	4a20      	ldr	r2, [pc, #128]	; (800ced8 <tcp_process+0x590>)
 800ce56:	6013      	str	r3, [r2, #0]
 800ce58:	e013      	b.n	800ce82 <tcp_process+0x53a>
 800ce5a:	4b1f      	ldr	r3, [pc, #124]	; (800ced8 <tcp_process+0x590>)
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	617b      	str	r3, [r7, #20]
 800ce60:	e00c      	b.n	800ce7c <tcp_process+0x534>
 800ce62:	697b      	ldr	r3, [r7, #20]
 800ce64:	68db      	ldr	r3, [r3, #12]
 800ce66:	687a      	ldr	r2, [r7, #4]
 800ce68:	429a      	cmp	r2, r3
 800ce6a:	d104      	bne.n	800ce76 <tcp_process+0x52e>
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	68da      	ldr	r2, [r3, #12]
 800ce70:	697b      	ldr	r3, [r7, #20]
 800ce72:	60da      	str	r2, [r3, #12]
 800ce74:	e005      	b.n	800ce82 <tcp_process+0x53a>
 800ce76:	697b      	ldr	r3, [r7, #20]
 800ce78:	68db      	ldr	r3, [r3, #12]
 800ce7a:	617b      	str	r3, [r7, #20]
 800ce7c:	697b      	ldr	r3, [r7, #20]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d1ef      	bne.n	800ce62 <tcp_process+0x51a>
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	2200      	movs	r2, #0
 800ce86:	60da      	str	r2, [r3, #12]
 800ce88:	4b14      	ldr	r3, [pc, #80]	; (800cedc <tcp_process+0x594>)
 800ce8a:	2201      	movs	r2, #1
 800ce8c:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	220a      	movs	r2, #10
 800ce92:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ce94:	4b12      	ldr	r3, [pc, #72]	; (800cee0 <tcp_process+0x598>)
 800ce96:	681a      	ldr	r2, [r3, #0]
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	60da      	str	r2, [r3, #12]
 800ce9c:	4a10      	ldr	r2, [pc, #64]	; (800cee0 <tcp_process+0x598>)
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6013      	str	r3, [r2, #0]
 800cea2:	f002 f99d 	bl	800f1e0 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 800cea6:	e0f0      	b.n	800d08a <tcp_process+0x742>
 800cea8:	20004c2c 	.word	0x20004c2c
 800ceac:	20004c24 	.word	0x20004c24
 800ceb0:	20004c2a 	.word	0x20004c2a
 800ceb4:	20004c20 	.word	0x20004c20
 800ceb8:	20004c10 	.word	0x20004c10
 800cebc:	20007f94 	.word	0x20007f94
 800cec0:	20007f98 	.word	0x20007f98
 800cec4:	0801efb8 	.word	0x0801efb8
 800cec8:	0801f1bc 	.word	0x0801f1bc
 800cecc:	0801effc 	.word	0x0801effc
 800ced0:	20004c28 	.word	0x20004c28
 800ced4:	20004c2d 	.word	0x20004c2d
 800ced8:	2000b7fc 	.word	0x2000b7fc
 800cedc:	2000b7f8 	.word	0x2000b7f8
 800cee0:	2000b80c 	.word	0x2000b80c
        tcp_ack_now(pcb);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	7e9b      	ldrb	r3, [r3, #26]
 800cee8:	f043 0302 	orr.w	r3, r3, #2
 800ceec:	b2da      	uxtb	r2, r3
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	2208      	movs	r2, #8
 800cef6:	751a      	strb	r2, [r3, #20]
    break;
 800cef8:	e0c7      	b.n	800d08a <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800cefa:	4b6a      	ldr	r3, [pc, #424]	; (800d0a4 <tcp_process+0x75c>)
 800cefc:	781b      	ldrb	r3, [r3, #0]
 800cefe:	f003 0310 	and.w	r3, r3, #16
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	f000 80c1 	beq.w	800d08a <tcp_process+0x742>
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cf0c:	4b66      	ldr	r3, [pc, #408]	; (800d0a8 <tcp_process+0x760>)
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	429a      	cmp	r2, r3
 800cf12:	f040 80ba 	bne.w	800d08a <tcp_process+0x742>
               pcb->unsent == NULL) {
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	f040 80b5 	bne.w	800d08a <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2206      	movs	r2, #6
 800cf24:	751a      	strb	r2, [r3, #20]
    break;
 800cf26:	e0b0      	b.n	800d08a <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 800cf28:	6878      	ldr	r0, [r7, #4]
 800cf2a:	f000 f93d 	bl	800d1a8 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800cf2e:	4b5f      	ldr	r3, [pc, #380]	; (800d0ac <tcp_process+0x764>)
 800cf30:	781b      	ldrb	r3, [r3, #0]
 800cf32:	f003 0320 	and.w	r3, r3, #32
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	f000 80a9 	beq.w	800d08e <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	7e9b      	ldrb	r3, [r3, #26]
 800cf40:	f043 0302 	orr.w	r3, r3, #2
 800cf44:	b2da      	uxtb	r2, r3
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 800cf4a:	6878      	ldr	r0, [r7, #4]
 800cf4c:	f7fe fe62 	bl	800bc14 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800cf50:	4b57      	ldr	r3, [pc, #348]	; (800d0b0 <tcp_process+0x768>)
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	687a      	ldr	r2, [r7, #4]
 800cf56:	429a      	cmp	r2, r3
 800cf58:	d105      	bne.n	800cf66 <tcp_process+0x61e>
 800cf5a:	4b55      	ldr	r3, [pc, #340]	; (800d0b0 <tcp_process+0x768>)
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	68db      	ldr	r3, [r3, #12]
 800cf60:	4a53      	ldr	r2, [pc, #332]	; (800d0b0 <tcp_process+0x768>)
 800cf62:	6013      	str	r3, [r2, #0]
 800cf64:	e013      	b.n	800cf8e <tcp_process+0x646>
 800cf66:	4b52      	ldr	r3, [pc, #328]	; (800d0b0 <tcp_process+0x768>)
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	613b      	str	r3, [r7, #16]
 800cf6c:	e00c      	b.n	800cf88 <tcp_process+0x640>
 800cf6e:	693b      	ldr	r3, [r7, #16]
 800cf70:	68db      	ldr	r3, [r3, #12]
 800cf72:	687a      	ldr	r2, [r7, #4]
 800cf74:	429a      	cmp	r2, r3
 800cf76:	d104      	bne.n	800cf82 <tcp_process+0x63a>
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	68da      	ldr	r2, [r3, #12]
 800cf7c:	693b      	ldr	r3, [r7, #16]
 800cf7e:	60da      	str	r2, [r3, #12]
 800cf80:	e005      	b.n	800cf8e <tcp_process+0x646>
 800cf82:	693b      	ldr	r3, [r7, #16]
 800cf84:	68db      	ldr	r3, [r3, #12]
 800cf86:	613b      	str	r3, [r7, #16]
 800cf88:	693b      	ldr	r3, [r7, #16]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d1ef      	bne.n	800cf6e <tcp_process+0x626>
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	2200      	movs	r2, #0
 800cf92:	60da      	str	r2, [r3, #12]
 800cf94:	4b47      	ldr	r3, [pc, #284]	; (800d0b4 <tcp_process+0x76c>)
 800cf96:	2201      	movs	r2, #1
 800cf98:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	220a      	movs	r2, #10
 800cf9e:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800cfa0:	4b45      	ldr	r3, [pc, #276]	; (800d0b8 <tcp_process+0x770>)
 800cfa2:	681a      	ldr	r2, [r3, #0]
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	60da      	str	r2, [r3, #12]
 800cfa8:	4a43      	ldr	r2, [pc, #268]	; (800d0b8 <tcp_process+0x770>)
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	6013      	str	r3, [r2, #0]
 800cfae:	f002 f917 	bl	800f1e0 <tcp_timer_needed>
    }
    break;
 800cfb2:	e06c      	b.n	800d08e <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 800cfb4:	6878      	ldr	r0, [r7, #4]
 800cfb6:	f000 f8f7 	bl	800d1a8 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800cfba:	4b3a      	ldr	r3, [pc, #232]	; (800d0a4 <tcp_process+0x75c>)
 800cfbc:	781b      	ldrb	r3, [r3, #0]
 800cfbe:	f003 0310 	and.w	r3, r3, #16
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d065      	beq.n	800d092 <tcp_process+0x74a>
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cfca:	4b37      	ldr	r3, [pc, #220]	; (800d0a8 <tcp_process+0x760>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	429a      	cmp	r2, r3
 800cfd0:	d15f      	bne.n	800d092 <tcp_process+0x74a>
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d15b      	bne.n	800d092 <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 800cfda:	6878      	ldr	r0, [r7, #4]
 800cfdc:	f7fe fe1a 	bl	800bc14 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800cfe0:	4b33      	ldr	r3, [pc, #204]	; (800d0b0 <tcp_process+0x768>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	687a      	ldr	r2, [r7, #4]
 800cfe6:	429a      	cmp	r2, r3
 800cfe8:	d105      	bne.n	800cff6 <tcp_process+0x6ae>
 800cfea:	4b31      	ldr	r3, [pc, #196]	; (800d0b0 <tcp_process+0x768>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	68db      	ldr	r3, [r3, #12]
 800cff0:	4a2f      	ldr	r2, [pc, #188]	; (800d0b0 <tcp_process+0x768>)
 800cff2:	6013      	str	r3, [r2, #0]
 800cff4:	e013      	b.n	800d01e <tcp_process+0x6d6>
 800cff6:	4b2e      	ldr	r3, [pc, #184]	; (800d0b0 <tcp_process+0x768>)
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	60fb      	str	r3, [r7, #12]
 800cffc:	e00c      	b.n	800d018 <tcp_process+0x6d0>
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	68db      	ldr	r3, [r3, #12]
 800d002:	687a      	ldr	r2, [r7, #4]
 800d004:	429a      	cmp	r2, r3
 800d006:	d104      	bne.n	800d012 <tcp_process+0x6ca>
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	68da      	ldr	r2, [r3, #12]
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	60da      	str	r2, [r3, #12]
 800d010:	e005      	b.n	800d01e <tcp_process+0x6d6>
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	68db      	ldr	r3, [r3, #12]
 800d016:	60fb      	str	r3, [r7, #12]
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d1ef      	bne.n	800cffe <tcp_process+0x6b6>
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	2200      	movs	r2, #0
 800d022:	60da      	str	r2, [r3, #12]
 800d024:	4b23      	ldr	r3, [pc, #140]	; (800d0b4 <tcp_process+0x76c>)
 800d026:	2201      	movs	r2, #1
 800d028:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	220a      	movs	r2, #10
 800d02e:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800d030:	4b21      	ldr	r3, [pc, #132]	; (800d0b8 <tcp_process+0x770>)
 800d032:	681a      	ldr	r2, [r3, #0]
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	60da      	str	r2, [r3, #12]
 800d038:	4a1f      	ldr	r2, [pc, #124]	; (800d0b8 <tcp_process+0x770>)
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	6013      	str	r3, [r2, #0]
 800d03e:	f002 f8cf 	bl	800f1e0 <tcp_timer_needed>
    }
    break;
 800d042:	e026      	b.n	800d092 <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 800d044:	6878      	ldr	r0, [r7, #4]
 800d046:	f000 f8af 	bl	800d1a8 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800d04a:	4b16      	ldr	r3, [pc, #88]	; (800d0a4 <tcp_process+0x75c>)
 800d04c:	781b      	ldrb	r3, [r3, #0]
 800d04e:	f003 0310 	and.w	r3, r3, #16
 800d052:	2b00      	cmp	r3, #0
 800d054:	d01f      	beq.n	800d096 <tcp_process+0x74e>
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d05a:	4b13      	ldr	r3, [pc, #76]	; (800d0a8 <tcp_process+0x760>)
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	429a      	cmp	r2, r3
 800d060:	d119      	bne.n	800d096 <tcp_process+0x74e>
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d066:	2b00      	cmp	r3, #0
 800d068:	d115      	bne.n	800d096 <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 800d06a:	4b10      	ldr	r3, [pc, #64]	; (800d0ac <tcp_process+0x764>)
 800d06c:	781b      	ldrb	r3, [r3, #0]
 800d06e:	f043 0310 	orr.w	r3, r3, #16
 800d072:	b2da      	uxtb	r2, r3
 800d074:	4b0d      	ldr	r3, [pc, #52]	; (800d0ac <tcp_process+0x764>)
 800d076:	701a      	strb	r2, [r3, #0]
    }
    break;
 800d078:	e00d      	b.n	800d096 <tcp_process+0x74e>
  default:
    break;
 800d07a:	bf00      	nop
 800d07c:	e00c      	b.n	800d098 <tcp_process+0x750>
    break;
 800d07e:	bf00      	nop
 800d080:	e00a      	b.n	800d098 <tcp_process+0x750>
    break;
 800d082:	bf00      	nop
 800d084:	e008      	b.n	800d098 <tcp_process+0x750>
    break;
 800d086:	bf00      	nop
 800d088:	e006      	b.n	800d098 <tcp_process+0x750>
    break;
 800d08a:	bf00      	nop
 800d08c:	e004      	b.n	800d098 <tcp_process+0x750>
    break;
 800d08e:	bf00      	nop
 800d090:	e002      	b.n	800d098 <tcp_process+0x750>
    break;
 800d092:	bf00      	nop
 800d094:	e000      	b.n	800d098 <tcp_process+0x750>
    break;
 800d096:	bf00      	nop
  }
  return ERR_OK;
 800d098:	2300      	movs	r3, #0
}
 800d09a:	4618      	mov	r0, r3
 800d09c:	3720      	adds	r7, #32
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd80      	pop	{r7, pc}
 800d0a2:	bf00      	nop
 800d0a4:	20004c2c 	.word	0x20004c2c
 800d0a8:	20004c24 	.word	0x20004c24
 800d0ac:	20004c2d 	.word	0x20004c2d
 800d0b0:	2000b7fc 	.word	0x2000b7fc
 800d0b4:	2000b7f8 	.word	0x2000b7f8
 800d0b8:	2000b80c 	.word	0x2000b80c

0800d0bc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800d0bc:	b590      	push	{r4, r7, lr}
 800d0be:	b085      	sub	sp, #20
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
 800d0c4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	68db      	ldr	r3, [r3, #12]
 800d0ca:	899b      	ldrh	r3, [r3, #12]
 800d0cc:	b29b      	uxth	r3, r3
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	f7fb fcac 	bl	8008a2c <lwip_htons>
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	f003 0301 	and.w	r3, r3, #1
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d027      	beq.n	800d12e <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800d0de:	6838      	ldr	r0, [r7, #0]
 800d0e0:	f7fe fbef 	bl	800b8c2 <tcp_segs_free>
    next = NULL;
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	603b      	str	r3, [r7, #0]
 800d0e8:	e055      	b.n	800d196 <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	68db      	ldr	r3, [r3, #12]
 800d0ee:	899b      	ldrh	r3, [r3, #12]
 800d0f0:	b29b      	uxth	r3, r3
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	f7fb fc9a 	bl	8008a2c <lwip_htons>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	f003 0301 	and.w	r3, r3, #1
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d00d      	beq.n	800d11e <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	68db      	ldr	r3, [r3, #12]
 800d106:	899b      	ldrh	r3, [r3, #12]
 800d108:	b29c      	uxth	r4, r3
 800d10a:	2001      	movs	r0, #1
 800d10c:	f7fb fc8e 	bl	8008a2c <lwip_htons>
 800d110:	4603      	mov	r3, r0
 800d112:	461a      	mov	r2, r3
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	68db      	ldr	r3, [r3, #12]
 800d118:	4322      	orrs	r2, r4
 800d11a:	b292      	uxth	r2, r2
 800d11c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800d122:	683b      	ldr	r3, [r7, #0]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800d128:	68f8      	ldr	r0, [r7, #12]
 800d12a:	f7fe fbde 	bl	800b8ea <tcp_seg_free>
    while (next &&
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d00e      	beq.n	800d152 <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	891b      	ldrh	r3, [r3, #8]
 800d138:	461a      	mov	r2, r3
 800d13a:	4b1a      	ldr	r3, [pc, #104]	; (800d1a4 <tcp_oos_insert_segment+0xe8>)
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	441a      	add	r2, r3
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	68db      	ldr	r3, [r3, #12]
 800d144:	685b      	ldr	r3, [r3, #4]
 800d146:	6839      	ldr	r1, [r7, #0]
 800d148:	8909      	ldrh	r1, [r1, #8]
 800d14a:	440b      	add	r3, r1
 800d14c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800d14e:	2b00      	cmp	r3, #0
 800d150:	dacb      	bge.n	800d0ea <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d01e      	beq.n	800d196 <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	891b      	ldrh	r3, [r3, #8]
 800d15c:	461a      	mov	r2, r3
 800d15e:	4b11      	ldr	r3, [pc, #68]	; (800d1a4 <tcp_oos_insert_segment+0xe8>)
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	441a      	add	r2, r3
 800d164:	683b      	ldr	r3, [r7, #0]
 800d166:	68db      	ldr	r3, [r3, #12]
 800d168:	685b      	ldr	r3, [r3, #4]
 800d16a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	dd12      	ble.n	800d196 <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	68db      	ldr	r3, [r3, #12]
 800d174:	685b      	ldr	r3, [r3, #4]
 800d176:	b29a      	uxth	r2, r3
 800d178:	4b0a      	ldr	r3, [pc, #40]	; (800d1a4 <tcp_oos_insert_segment+0xe8>)
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	b29b      	uxth	r3, r3
 800d17e:	1ad3      	subs	r3, r2, r3
 800d180:	b29a      	uxth	r2, r3
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	685a      	ldr	r2, [r3, #4]
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	891b      	ldrh	r3, [r3, #8]
 800d18e:	4619      	mov	r1, r3
 800d190:	4610      	mov	r0, r2
 800d192:	f7fc ff95 	bl	800a0c0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	683a      	ldr	r2, [r7, #0]
 800d19a:	601a      	str	r2, [r3, #0]
}
 800d19c:	bf00      	nop
 800d19e:	3714      	adds	r7, #20
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	bd90      	pop	{r4, r7, pc}
 800d1a4:	20004c20 	.word	0x20004c20

0800d1a8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800d1a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1aa:	b08d      	sub	sp, #52	; 0x34
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	7d1b      	ldrb	r3, [r3, #20]
 800d1b8:	2b03      	cmp	r3, #3
 800d1ba:	d806      	bhi.n	800d1ca <tcp_receive+0x22>
 800d1bc:	4ba6      	ldr	r3, [pc, #664]	; (800d458 <tcp_receive+0x2b0>)
 800d1be:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800d1c2:	49a6      	ldr	r1, [pc, #664]	; (800d45c <tcp_receive+0x2b4>)
 800d1c4:	48a6      	ldr	r0, [pc, #664]	; (800d460 <tcp_receive+0x2b8>)
 800d1c6:	f00d faa9 	bl	801a71c <iprintf>

  if (flags & TCP_ACK) {
 800d1ca:	4ba6      	ldr	r3, [pc, #664]	; (800d464 <tcp_receive+0x2bc>)
 800d1cc:	781b      	ldrb	r3, [r3, #0]
 800d1ce:	f003 0310 	and.w	r3, r3, #16
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	f000 82bf 	beq.w	800d756 <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d1de:	461a      	mov	r2, r3
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d1e4:	4413      	add	r3, r2
 800d1e6:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d1ec:	4b9e      	ldr	r3, [pc, #632]	; (800d468 <tcp_receive+0x2c0>)
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	1ad3      	subs	r3, r2, r3
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	db1b      	blt.n	800d22e <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d1fa:	4b9b      	ldr	r3, [pc, #620]	; (800d468 <tcp_receive+0x2c0>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800d1fe:	429a      	cmp	r2, r3
 800d200:	d106      	bne.n	800d210 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d206:	4b99      	ldr	r3, [pc, #612]	; (800d46c <tcp_receive+0x2c4>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	1ad3      	subs	r3, r2, r3
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	db0e      	blt.n	800d22e <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d214:	4b95      	ldr	r3, [pc, #596]	; (800d46c <tcp_receive+0x2c4>)
 800d216:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800d218:	429a      	cmp	r2, r3
 800d21a:	d141      	bne.n	800d2a0 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800d21c:	4b94      	ldr	r3, [pc, #592]	; (800d470 <tcp_receive+0x2c8>)
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	89db      	ldrh	r3, [r3, #14]
 800d222:	b29a      	uxth	r2, r3
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d22a:	429a      	cmp	r2, r3
 800d22c:	d938      	bls.n	800d2a0 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800d22e:	4b90      	ldr	r3, [pc, #576]	; (800d470 <tcp_receive+0x2c8>)
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	89db      	ldrh	r3, [r3, #14]
 800d234:	b29a      	uxth	r2, r3
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d248:	429a      	cmp	r2, r3
 800d24a:	d205      	bcs.n	800d258 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 800d258:	4b83      	ldr	r3, [pc, #524]	; (800d468 <tcp_receive+0x2c0>)
 800d25a:	681a      	ldr	r2, [r3, #0]
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 800d260:	4b82      	ldr	r3, [pc, #520]	; (800d46c <tcp_receive+0x2c4>)
 800d262:	681a      	ldr	r2, [r3, #0]
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d10d      	bne.n	800d28e <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d111      	bne.n	800d2a0 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	2200      	movs	r2, #0
 800d280:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	2201      	movs	r2, #1
 800d288:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800d28c:	e008      	b.n	800d2a0 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800d294:	2b00      	cmp	r3, #0
 800d296:	d003      	beq.n	800d2a0 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2200      	movs	r2, #0
 800d29c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800d2a0:	4b72      	ldr	r3, [pc, #456]	; (800d46c <tcp_receive+0x2c4>)
 800d2a2:	681a      	ldr	r2, [r3, #0]
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2a8:	1ad3      	subs	r3, r2, r3
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	dc53      	bgt.n	800d356 <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 800d2ae:	4b71      	ldr	r3, [pc, #452]	; (800d474 <tcp_receive+0x2cc>)
 800d2b0:	881b      	ldrh	r3, [r3, #0]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d146      	bne.n	800d344 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2ba:	687a      	ldr	r2, [r7, #4]
 800d2bc:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800d2c0:	4413      	add	r3, r2
 800d2c2:	697a      	ldr	r2, [r7, #20]
 800d2c4:	429a      	cmp	r2, r3
 800d2c6:	d13d      	bne.n	800d344 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	db38      	blt.n	800d344 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d2d6:	4b65      	ldr	r3, [pc, #404]	; (800d46c <tcp_receive+0x2c4>)
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	429a      	cmp	r2, r3
 800d2dc:	d132      	bne.n	800d344 <tcp_receive+0x19c>
              found_dupack = 1;
 800d2de:	2301      	movs	r3, #1
 800d2e0:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d2e8:	2bff      	cmp	r3, #255	; 0xff
 800d2ea:	d007      	beq.n	800d2fc <tcp_receive+0x154>
                ++pcb->dupacks;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d2f2:	3301      	adds	r3, #1
 800d2f4:	b2da      	uxtb	r2, r3
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d302:	2b03      	cmp	r3, #3
 800d304:	d916      	bls.n	800d334 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d310:	4413      	add	r3, r2
 800d312:	b29a      	uxth	r2, r3
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d31a:	429a      	cmp	r2, r3
 800d31c:	d912      	bls.n	800d344 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d328:	4413      	add	r3, r2
 800d32a:	b29a      	uxth	r2, r3
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d332:	e007      	b.n	800d344 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d33a:	2b03      	cmp	r3, #3
 800d33c:	d102      	bne.n	800d344 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 800d33e:	6878      	ldr	r0, [r7, #4]
 800d340:	f001 fdfa 	bl	800ef38 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800d344:	69fb      	ldr	r3, [r7, #28]
 800d346:	2b00      	cmp	r3, #0
 800d348:	f040 8169 	bne.w	800d61e <tcp_receive+0x476>
        pcb->dupacks = 0;
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	2200      	movs	r2, #0
 800d350:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d354:	e163      	b.n	800d61e <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800d356:	4b45      	ldr	r3, [pc, #276]	; (800d46c <tcp_receive+0x2c4>)
 800d358:	681a      	ldr	r2, [r3, #0]
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d35e:	1ad3      	subs	r3, r2, r3
 800d360:	3b01      	subs	r3, #1
 800d362:	2b00      	cmp	r3, #0
 800d364:	f2c0 8107 	blt.w	800d576 <tcp_receive+0x3ce>
 800d368:	4b40      	ldr	r3, [pc, #256]	; (800d46c <tcp_receive+0x2c4>)
 800d36a:	681a      	ldr	r2, [r3, #0]
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d370:	1ad3      	subs	r3, r2, r3
 800d372:	2b00      	cmp	r3, #0
 800d374:	f300 80ff 	bgt.w	800d576 <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	7e9b      	ldrb	r3, [r3, #26]
 800d37c:	f003 0304 	and.w	r3, r3, #4
 800d380:	2b00      	cmp	r3, #0
 800d382:	d00c      	beq.n	800d39e <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	7e9b      	ldrb	r3, [r3, #26]
 800d388:	f023 0304 	bic.w	r3, r3, #4
 800d38c:	b2da      	uxtb	r2, r3
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d3ac:	10db      	asrs	r3, r3, #3
 800d3ae:	b21b      	sxth	r3, r3
 800d3b0:	b29a      	uxth	r2, r3
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d3b8:	b29b      	uxth	r3, r3
 800d3ba:	4413      	add	r3, r2
 800d3bc:	b29b      	uxth	r3, r3
 800d3be:	b21a      	sxth	r2, r3
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	2200      	movs	r2, #0
 800d3ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800d3ce:	4b27      	ldr	r3, [pc, #156]	; (800d46c <tcp_receive+0x2c4>)
 800d3d0:	681a      	ldr	r2, [r3, #0]
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	7d1b      	ldrb	r3, [r3, #20]
 800d3da:	2b03      	cmp	r3, #3
 800d3dc:	f240 8094 	bls.w	800d508 <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d3ec:	429a      	cmp	r2, r3
 800d3ee:	d216      	bcs.n	800d41e <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d3fa:	4413      	add	r3, r2
 800d3fc:	b29a      	uxth	r2, r3
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d404:	429a      	cmp	r2, r3
 800d406:	d97f      	bls.n	800d508 <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d412:	4413      	add	r3, r2
 800d414:	b29a      	uxth	r2, r3
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d41c:	e074      	b.n	800d508 <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d428:	4619      	mov	r1, r3
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d42e:	fb03 f301 	mul.w	r3, r3, r1
 800d432:	6879      	ldr	r1, [r7, #4]
 800d434:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 800d438:	fb93 f3f1 	sdiv	r3, r3, r1
 800d43c:	b29b      	uxth	r3, r3
 800d43e:	4413      	add	r3, r2
 800d440:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d448:	8a7a      	ldrh	r2, [r7, #18]
 800d44a:	429a      	cmp	r2, r3
 800d44c:	d95c      	bls.n	800d508 <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	8a7a      	ldrh	r2, [r7, #18]
 800d452:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 800d456:	e057      	b.n	800d508 <tcp_receive+0x360>
 800d458:	0801efb8 	.word	0x0801efb8
 800d45c:	0801f1dc 	.word	0x0801f1dc
 800d460:	0801effc 	.word	0x0801effc
 800d464:	20004c2c 	.word	0x20004c2c
 800d468:	20004c20 	.word	0x20004c20
 800d46c:	20004c24 	.word	0x20004c24
 800d470:	20004c10 	.word	0x20004c10
 800d474:	20004c2a 	.word	0x20004c2a
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d47c:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d482:	681a      	ldr	r2, [r3, #0]
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800d48e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d490:	685b      	ldr	r3, [r3, #4]
 800d492:	4618      	mov	r0, r3
 800d494:	f7fd f822 	bl	800a4dc <pbuf_clen>
 800d498:	4603      	mov	r3, r0
 800d49a:	429c      	cmp	r4, r3
 800d49c:	d206      	bcs.n	800d4ac <tcp_receive+0x304>
 800d49e:	4b70      	ldr	r3, [pc, #448]	; (800d660 <tcp_receive+0x4b8>)
 800d4a0:	f240 429e 	movw	r2, #1182	; 0x49e
 800d4a4:	496f      	ldr	r1, [pc, #444]	; (800d664 <tcp_receive+0x4bc>)
 800d4a6:	4870      	ldr	r0, [pc, #448]	; (800d668 <tcp_receive+0x4c0>)
 800d4a8:	f00d f938 	bl	801a71c <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 800d4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4ae:	685b      	ldr	r3, [r3, #4]
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	f7fd f813 	bl	800a4dc <pbuf_clen>
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	461a      	mov	r2, r3
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d4c0:	1a9b      	subs	r3, r3, r2
 800d4c2:	b29a      	uxth	r2, r3
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 800d4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4cc:	891a      	ldrh	r2, [r3, #8]
 800d4ce:	4b67      	ldr	r3, [pc, #412]	; (800d66c <tcp_receive+0x4c4>)
 800d4d0:	881b      	ldrh	r3, [r3, #0]
 800d4d2:	4413      	add	r3, r2
 800d4d4:	b29a      	uxth	r2, r3
 800d4d6:	4b65      	ldr	r3, [pc, #404]	; (800d66c <tcp_receive+0x4c4>)
 800d4d8:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 800d4da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d4dc:	f7fe fa05 	bl	800b8ea <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d00e      	beq.n	800d508 <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d10a      	bne.n	800d508 <tcp_receive+0x360>
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d106      	bne.n	800d508 <tcp_receive+0x360>
 800d4fa:	4b59      	ldr	r3, [pc, #356]	; (800d660 <tcp_receive+0x4b8>)
 800d4fc:	f240 42a7 	movw	r2, #1191	; 0x4a7
 800d500:	495b      	ldr	r1, [pc, #364]	; (800d670 <tcp_receive+0x4c8>)
 800d502:	4859      	ldr	r0, [pc, #356]	; (800d668 <tcp_receive+0x4c0>)
 800d504:	f00d f90a 	bl	801a71c <iprintf>
      while (pcb->unacked != NULL &&
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d022      	beq.n	800d556 <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d514:	68db      	ldr	r3, [r3, #12]
 800d516:	685b      	ldr	r3, [r3, #4]
 800d518:	4618      	mov	r0, r3
 800d51a:	f7fb fa94 	bl	8008a46 <lwip_htonl>
 800d51e:	4604      	mov	r4, r0
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d524:	891b      	ldrh	r3, [r3, #8]
 800d526:	461d      	mov	r5, r3
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d52c:	68db      	ldr	r3, [r3, #12]
 800d52e:	899b      	ldrh	r3, [r3, #12]
 800d530:	b29b      	uxth	r3, r3
 800d532:	4618      	mov	r0, r3
 800d534:	f7fb fa7a 	bl	8008a2c <lwip_htons>
 800d538:	4603      	mov	r3, r0
 800d53a:	f003 0303 	and.w	r3, r3, #3
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d001      	beq.n	800d546 <tcp_receive+0x39e>
 800d542:	2301      	movs	r3, #1
 800d544:	e000      	b.n	800d548 <tcp_receive+0x3a0>
 800d546:	2300      	movs	r3, #0
 800d548:	442b      	add	r3, r5
 800d54a:	18e2      	adds	r2, r4, r3
 800d54c:	4b49      	ldr	r3, [pc, #292]	; (800d674 <tcp_receive+0x4cc>)
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 800d552:	2b00      	cmp	r3, #0
 800d554:	dd90      	ble.n	800d478 <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d104      	bne.n	800d568 <tcp_receive+0x3c0>
        pcb->rtime = -1;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d564:	861a      	strh	r2, [r3, #48]	; 0x30
 800d566:	e002      	b.n	800d56e <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2200      	movs	r2, #0
 800d56c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	2200      	movs	r2, #0
 800d572:	76da      	strb	r2, [r3, #27]
 800d574:	e002      	b.n	800d57c <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800d576:	6878      	ldr	r0, [r7, #4]
 800d578:	f001 f8fc 	bl	800e774 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 800d57c:	e04f      	b.n	800d61e <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d582:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d588:	681a      	ldr	r2, [r3, #0]
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d592:	2b00      	cmp	r3, #0
 800d594:	d103      	bne.n	800d59e <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	2200      	movs	r2, #0
 800d59a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800d5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5a6:	685b      	ldr	r3, [r3, #4]
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	f7fc ff97 	bl	800a4dc <pbuf_clen>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	429c      	cmp	r4, r3
 800d5b2:	d206      	bcs.n	800d5c2 <tcp_receive+0x41a>
 800d5b4:	4b2a      	ldr	r3, [pc, #168]	; (800d660 <tcp_receive+0x4b8>)
 800d5b6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800d5ba:	492a      	ldr	r1, [pc, #168]	; (800d664 <tcp_receive+0x4bc>)
 800d5bc:	482a      	ldr	r0, [pc, #168]	; (800d668 <tcp_receive+0x4c0>)
 800d5be:	f00d f8ad 	bl	801a71c <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800d5c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5c4:	685b      	ldr	r3, [r3, #4]
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f7fc ff88 	bl	800a4dc <pbuf_clen>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	461a      	mov	r2, r3
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d5d6:	1a9b      	subs	r3, r3, r2
 800d5d8:	b29a      	uxth	r2, r3
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 800d5e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5e2:	891a      	ldrh	r2, [r3, #8]
 800d5e4:	4b21      	ldr	r3, [pc, #132]	; (800d66c <tcp_receive+0x4c4>)
 800d5e6:	881b      	ldrh	r3, [r3, #0]
 800d5e8:	4413      	add	r3, r2
 800d5ea:	b29a      	uxth	r2, r3
 800d5ec:	4b1f      	ldr	r3, [pc, #124]	; (800d66c <tcp_receive+0x4c4>)
 800d5ee:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 800d5f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d5f2:	f7fe f97a 	bl	800b8ea <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d00e      	beq.n	800d61e <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d604:	2b00      	cmp	r3, #0
 800d606:	d10a      	bne.n	800d61e <tcp_receive+0x476>
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d106      	bne.n	800d61e <tcp_receive+0x476>
 800d610:	4b13      	ldr	r3, [pc, #76]	; (800d660 <tcp_receive+0x4b8>)
 800d612:	f240 42dd 	movw	r2, #1245	; 0x4dd
 800d616:	4916      	ldr	r1, [pc, #88]	; (800d670 <tcp_receive+0x4c8>)
 800d618:	4813      	ldr	r0, [pc, #76]	; (800d668 <tcp_receive+0x4c0>)
 800d61a:	f00d f87f 	bl	801a71c <iprintf>
    while (pcb->unsent != NULL &&
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d622:	2b00      	cmp	r3, #0
 800d624:	d036      	beq.n	800d694 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800d626:	4b13      	ldr	r3, [pc, #76]	; (800d674 <tcp_receive+0x4cc>)
 800d628:	681c      	ldr	r4, [r3, #0]
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d62e:	68db      	ldr	r3, [r3, #12]
 800d630:	685b      	ldr	r3, [r3, #4]
 800d632:	4618      	mov	r0, r3
 800d634:	f7fb fa07 	bl	8008a46 <lwip_htonl>
 800d638:	4605      	mov	r5, r0
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d63e:	891b      	ldrh	r3, [r3, #8]
 800d640:	461e      	mov	r6, r3
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d646:	68db      	ldr	r3, [r3, #12]
 800d648:	899b      	ldrh	r3, [r3, #12]
 800d64a:	b29b      	uxth	r3, r3
 800d64c:	4618      	mov	r0, r3
 800d64e:	f7fb f9ed 	bl	8008a2c <lwip_htons>
 800d652:	4603      	mov	r3, r0
 800d654:	f003 0303 	and.w	r3, r3, #3
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d00d      	beq.n	800d678 <tcp_receive+0x4d0>
 800d65c:	2301      	movs	r3, #1
 800d65e:	e00c      	b.n	800d67a <tcp_receive+0x4d2>
 800d660:	0801efb8 	.word	0x0801efb8
 800d664:	0801f1f8 	.word	0x0801f1f8
 800d668:	0801effc 	.word	0x0801effc
 800d66c:	20004c28 	.word	0x20004c28
 800d670:	0801f220 	.word	0x0801f220
 800d674:	20004c24 	.word	0x20004c24
 800d678:	2300      	movs	r3, #0
 800d67a:	4433      	add	r3, r6
 800d67c:	442b      	add	r3, r5
 800d67e:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 800d680:	2b00      	cmp	r3, #0
 800d682:	db07      	blt.n	800d694 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800d684:	4b8d      	ldr	r3, [pc, #564]	; (800d8bc <tcp_receive+0x714>)
 800d686:	681a      	ldr	r2, [r3, #0]
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d68c:	1ad3      	subs	r3, r2, r3
 800d68e:	2b00      	cmp	r3, #0
 800d690:	f77f af75 	ble.w	800d57e <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d69a:	4b89      	ldr	r3, [pc, #548]	; (800d8c0 <tcp_receive+0x718>)
 800d69c:	881b      	ldrh	r3, [r3, #0]
 800d69e:	4413      	add	r3, r2
 800d6a0:	b29a      	uxth	r2, r3
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d052      	beq.n	800d756 <tcp_receive+0x5ae>
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d6b4:	4b81      	ldr	r3, [pc, #516]	; (800d8bc <tcp_receive+0x714>)
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	1ad3      	subs	r3, r2, r3
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	da4b      	bge.n	800d756 <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800d6be:	4b81      	ldr	r3, [pc, #516]	; (800d8c4 <tcp_receive+0x71c>)
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	b29a      	uxth	r2, r3
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6c8:	b29b      	uxth	r3, r3
 800d6ca:	1ad3      	subs	r3, r2, r3
 800d6cc:	b29b      	uxth	r3, r3
 800d6ce:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 800d6d0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d6d8:	10db      	asrs	r3, r3, #3
 800d6da:	b21b      	sxth	r3, r3
 800d6dc:	b29b      	uxth	r3, r3
 800d6de:	1ad3      	subs	r3, r2, r3
 800d6e0:	b29b      	uxth	r3, r3
 800d6e2:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d6ea:	b29a      	uxth	r2, r3
 800d6ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d6ee:	4413      	add	r3, r2
 800d6f0:	b29b      	uxth	r3, r3
 800d6f2:	b21a      	sxth	r2, r3
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800d6f8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	da03      	bge.n	800d708 <tcp_receive+0x560>
        m = -m;
 800d700:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d702:	425b      	negs	r3, r3
 800d704:	b29b      	uxth	r3, r3
 800d706:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 800d708:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d710:	109b      	asrs	r3, r3, #2
 800d712:	b21b      	sxth	r3, r3
 800d714:	b29b      	uxth	r3, r3
 800d716:	1ad3      	subs	r3, r2, r3
 800d718:	b29b      	uxth	r3, r3
 800d71a:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d722:	b29a      	uxth	r2, r3
 800d724:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d726:	4413      	add	r3, r2
 800d728:	b29b      	uxth	r3, r3
 800d72a:	b21a      	sxth	r2, r3
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d736:	10db      	asrs	r3, r3, #3
 800d738:	b21b      	sxth	r3, r3
 800d73a:	b29a      	uxth	r2, r3
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d742:	b29b      	uxth	r3, r3
 800d744:	4413      	add	r3, r2
 800d746:	b29b      	uxth	r3, r3
 800d748:	b21a      	sxth	r2, r3
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2200      	movs	r2, #0
 800d754:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800d756:	4b5c      	ldr	r3, [pc, #368]	; (800d8c8 <tcp_receive+0x720>)
 800d758:	881b      	ldrh	r3, [r3, #0]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	f000 84f1 	beq.w	800e142 <tcp_receive+0xf9a>
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	7d1b      	ldrb	r3, [r3, #20]
 800d764:	2b06      	cmp	r3, #6
 800d766:	f200 84ec 	bhi.w	800e142 <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d76e:	4b57      	ldr	r3, [pc, #348]	; (800d8cc <tcp_receive+0x724>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	1ad3      	subs	r3, r2, r3
 800d774:	3b01      	subs	r3, #1
 800d776:	2b00      	cmp	r3, #0
 800d778:	f2c0 80b8 	blt.w	800d8ec <tcp_receive+0x744>
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d780:	4b51      	ldr	r3, [pc, #324]	; (800d8c8 <tcp_receive+0x720>)
 800d782:	881b      	ldrh	r3, [r3, #0]
 800d784:	4619      	mov	r1, r3
 800d786:	4b51      	ldr	r3, [pc, #324]	; (800d8cc <tcp_receive+0x724>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	440b      	add	r3, r1
 800d78c:	1ad3      	subs	r3, r2, r3
 800d78e:	3301      	adds	r3, #1
 800d790:	2b00      	cmp	r3, #0
 800d792:	f300 80ab 	bgt.w	800d8ec <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800d796:	4b4e      	ldr	r3, [pc, #312]	; (800d8d0 <tcp_receive+0x728>)
 800d798:	685b      	ldr	r3, [r3, #4]
 800d79a:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d7a0:	4b4a      	ldr	r3, [pc, #296]	; (800d8cc <tcp_receive+0x724>)
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	1ad3      	subs	r3, r2, r3
 800d7a6:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800d7a8:	4b49      	ldr	r3, [pc, #292]	; (800d8d0 <tcp_receive+0x728>)
 800d7aa:	685b      	ldr	r3, [r3, #4]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d106      	bne.n	800d7be <tcp_receive+0x616>
 800d7b0:	4b48      	ldr	r3, [pc, #288]	; (800d8d4 <tcp_receive+0x72c>)
 800d7b2:	f240 523c 	movw	r2, #1340	; 0x53c
 800d7b6:	4948      	ldr	r1, [pc, #288]	; (800d8d8 <tcp_receive+0x730>)
 800d7b8:	4848      	ldr	r0, [pc, #288]	; (800d8dc <tcp_receive+0x734>)
 800d7ba:	f00c ffaf 	bl	801a71c <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800d7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c0:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800d7c4:	4293      	cmp	r3, r2
 800d7c6:	dd06      	ble.n	800d7d6 <tcp_receive+0x62e>
 800d7c8:	4b42      	ldr	r3, [pc, #264]	; (800d8d4 <tcp_receive+0x72c>)
 800d7ca:	f240 523d 	movw	r2, #1341	; 0x53d
 800d7ce:	4944      	ldr	r1, [pc, #272]	; (800d8e0 <tcp_receive+0x738>)
 800d7d0:	4842      	ldr	r0, [pc, #264]	; (800d8dc <tcp_receive+0x734>)
 800d7d2:	f00c ffa3 	bl	801a71c <iprintf>
      if (inseg.p->len < off) {
 800d7d6:	4b3e      	ldr	r3, [pc, #248]	; (800d8d0 <tcp_receive+0x728>)
 800d7d8:	685b      	ldr	r3, [r3, #4]
 800d7da:	895b      	ldrh	r3, [r3, #10]
 800d7dc:	461a      	mov	r2, r3
 800d7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7e0:	4293      	cmp	r3, r2
 800d7e2:	dd3e      	ble.n	800d862 <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800d7e4:	4b3a      	ldr	r3, [pc, #232]	; (800d8d0 <tcp_receive+0x728>)
 800d7e6:	685b      	ldr	r3, [r3, #4]
 800d7e8:	891b      	ldrh	r3, [r3, #8]
 800d7ea:	461a      	mov	r2, r3
 800d7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7ee:	4293      	cmp	r3, r2
 800d7f0:	dd06      	ble.n	800d800 <tcp_receive+0x658>
 800d7f2:	4b38      	ldr	r3, [pc, #224]	; (800d8d4 <tcp_receive+0x72c>)
 800d7f4:	f240 523f 	movw	r2, #1343	; 0x53f
 800d7f8:	493a      	ldr	r1, [pc, #232]	; (800d8e4 <tcp_receive+0x73c>)
 800d7fa:	4838      	ldr	r0, [pc, #224]	; (800d8dc <tcp_receive+0x734>)
 800d7fc:	f00c ff8e 	bl	801a71c <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800d800:	4b33      	ldr	r3, [pc, #204]	; (800d8d0 <tcp_receive+0x728>)
 800d802:	685b      	ldr	r3, [r3, #4]
 800d804:	891a      	ldrh	r2, [r3, #8]
 800d806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d808:	b29b      	uxth	r3, r3
 800d80a:	1ad3      	subs	r3, r2, r3
 800d80c:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 800d80e:	e00e      	b.n	800d82e <tcp_receive+0x686>
          off -= p->len;
 800d810:	69bb      	ldr	r3, [r7, #24]
 800d812:	895b      	ldrh	r3, [r3, #10]
 800d814:	461a      	mov	r2, r3
 800d816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d818:	1a9b      	subs	r3, r3, r2
 800d81a:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 800d81c:	69bb      	ldr	r3, [r7, #24]
 800d81e:	8a3a      	ldrh	r2, [r7, #16]
 800d820:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 800d822:	69bb      	ldr	r3, [r7, #24]
 800d824:	2200      	movs	r2, #0
 800d826:	815a      	strh	r2, [r3, #10]
          p = p->next;
 800d828:	69bb      	ldr	r3, [r7, #24]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 800d82e:	69bb      	ldr	r3, [r7, #24]
 800d830:	895b      	ldrh	r3, [r3, #10]
 800d832:	461a      	mov	r2, r3
 800d834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d836:	4293      	cmp	r3, r2
 800d838:	dcea      	bgt.n	800d810 <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800d83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d83c:	b29b      	uxth	r3, r3
 800d83e:	425b      	negs	r3, r3
 800d840:	b29b      	uxth	r3, r3
 800d842:	b21b      	sxth	r3, r3
 800d844:	4619      	mov	r1, r3
 800d846:	69b8      	ldr	r0, [r7, #24]
 800d848:	f7fc fd8a 	bl	800a360 <pbuf_header>
 800d84c:	4603      	mov	r3, r0
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d01c      	beq.n	800d88c <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800d852:	4b20      	ldr	r3, [pc, #128]	; (800d8d4 <tcp_receive+0x72c>)
 800d854:	f240 524c 	movw	r2, #1356	; 0x54c
 800d858:	4923      	ldr	r1, [pc, #140]	; (800d8e8 <tcp_receive+0x740>)
 800d85a:	4820      	ldr	r0, [pc, #128]	; (800d8dc <tcp_receive+0x734>)
 800d85c:	f00c ff5e 	bl	801a71c <iprintf>
 800d860:	e014      	b.n	800d88c <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800d862:	4b1b      	ldr	r3, [pc, #108]	; (800d8d0 <tcp_receive+0x728>)
 800d864:	685b      	ldr	r3, [r3, #4]
 800d866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d868:	b292      	uxth	r2, r2
 800d86a:	4252      	negs	r2, r2
 800d86c:	b292      	uxth	r2, r2
 800d86e:	b212      	sxth	r2, r2
 800d870:	4611      	mov	r1, r2
 800d872:	4618      	mov	r0, r3
 800d874:	f7fc fd74 	bl	800a360 <pbuf_header>
 800d878:	4603      	mov	r3, r0
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d006      	beq.n	800d88c <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800d87e:	4b15      	ldr	r3, [pc, #84]	; (800d8d4 <tcp_receive+0x72c>)
 800d880:	f240 5251 	movw	r2, #1361	; 0x551
 800d884:	4918      	ldr	r1, [pc, #96]	; (800d8e8 <tcp_receive+0x740>)
 800d886:	4815      	ldr	r0, [pc, #84]	; (800d8dc <tcp_receive+0x734>)
 800d888:	f00c ff48 	bl	801a71c <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800d88c:	4b10      	ldr	r3, [pc, #64]	; (800d8d0 <tcp_receive+0x728>)
 800d88e:	891a      	ldrh	r2, [r3, #8]
 800d890:	4b0e      	ldr	r3, [pc, #56]	; (800d8cc <tcp_receive+0x724>)
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	b299      	uxth	r1, r3
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d89a:	b29b      	uxth	r3, r3
 800d89c:	1acb      	subs	r3, r1, r3
 800d89e:	b29b      	uxth	r3, r3
 800d8a0:	4413      	add	r3, r2
 800d8a2:	b29a      	uxth	r2, r3
 800d8a4:	4b0a      	ldr	r3, [pc, #40]	; (800d8d0 <tcp_receive+0x728>)
 800d8a6:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8ac:	4a07      	ldr	r2, [pc, #28]	; (800d8cc <tcp_receive+0x724>)
 800d8ae:	6013      	str	r3, [r2, #0]
 800d8b0:	4b07      	ldr	r3, [pc, #28]	; (800d8d0 <tcp_receive+0x728>)
 800d8b2:	68db      	ldr	r3, [r3, #12]
 800d8b4:	4a05      	ldr	r2, [pc, #20]	; (800d8cc <tcp_receive+0x724>)
 800d8b6:	6812      	ldr	r2, [r2, #0]
 800d8b8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d8ba:	e025      	b.n	800d908 <tcp_receive+0x760>
 800d8bc:	20004c24 	.word	0x20004c24
 800d8c0:	20004c28 	.word	0x20004c28
 800d8c4:	2000b800 	.word	0x2000b800
 800d8c8:	20004c2a 	.word	0x20004c2a
 800d8cc:	20004c20 	.word	0x20004c20
 800d8d0:	20004c00 	.word	0x20004c00
 800d8d4:	0801efb8 	.word	0x0801efb8
 800d8d8:	0801f240 	.word	0x0801f240
 800d8dc:	0801effc 	.word	0x0801effc
 800d8e0:	0801f250 	.word	0x0801f250
 800d8e4:	0801f260 	.word	0x0801f260
 800d8e8:	0801f270 	.word	0x0801f270
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800d8ec:	4b87      	ldr	r3, [pc, #540]	; (800db0c <tcp_receive+0x964>)
 800d8ee:	681a      	ldr	r2, [r3, #0]
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8f4:	1ad3      	subs	r3, r2, r3
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	da06      	bge.n	800d908 <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	7e9b      	ldrb	r3, [r3, #26]
 800d8fe:	f043 0302 	orr.w	r3, r3, #2
 800d902:	b2da      	uxtb	r2, r3
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d908:	4b80      	ldr	r3, [pc, #512]	; (800db0c <tcp_receive+0x964>)
 800d90a:	681a      	ldr	r2, [r3, #0]
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d910:	1ad3      	subs	r3, r2, r3
 800d912:	2b00      	cmp	r3, #0
 800d914:	f2c0 8410 	blt.w	800e138 <tcp_receive+0xf90>
 800d918:	4b7c      	ldr	r3, [pc, #496]	; (800db0c <tcp_receive+0x964>)
 800d91a:	681a      	ldr	r2, [r3, #0]
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d920:	6879      	ldr	r1, [r7, #4]
 800d922:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d924:	440b      	add	r3, r1
 800d926:	1ad3      	subs	r3, r2, r3
 800d928:	3301      	adds	r3, #1
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	f300 8404 	bgt.w	800e138 <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d934:	4b75      	ldr	r3, [pc, #468]	; (800db0c <tcp_receive+0x964>)
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	429a      	cmp	r2, r3
 800d93a:	f040 8287 	bne.w	800de4c <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800d93e:	4b74      	ldr	r3, [pc, #464]	; (800db10 <tcp_receive+0x968>)
 800d940:	891c      	ldrh	r4, [r3, #8]
 800d942:	4b73      	ldr	r3, [pc, #460]	; (800db10 <tcp_receive+0x968>)
 800d944:	68db      	ldr	r3, [r3, #12]
 800d946:	899b      	ldrh	r3, [r3, #12]
 800d948:	b29b      	uxth	r3, r3
 800d94a:	4618      	mov	r0, r3
 800d94c:	f7fb f86e 	bl	8008a2c <lwip_htons>
 800d950:	4603      	mov	r3, r0
 800d952:	f003 0303 	and.w	r3, r3, #3
 800d956:	2b00      	cmp	r3, #0
 800d958:	d001      	beq.n	800d95e <tcp_receive+0x7b6>
 800d95a:	2301      	movs	r3, #1
 800d95c:	e000      	b.n	800d960 <tcp_receive+0x7b8>
 800d95e:	2300      	movs	r3, #0
 800d960:	4423      	add	r3, r4
 800d962:	b29a      	uxth	r2, r3
 800d964:	4b6b      	ldr	r3, [pc, #428]	; (800db14 <tcp_receive+0x96c>)
 800d966:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d96c:	4b69      	ldr	r3, [pc, #420]	; (800db14 <tcp_receive+0x96c>)
 800d96e:	881b      	ldrh	r3, [r3, #0]
 800d970:	429a      	cmp	r2, r3
 800d972:	d26e      	bcs.n	800da52 <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d974:	4b66      	ldr	r3, [pc, #408]	; (800db10 <tcp_receive+0x968>)
 800d976:	68db      	ldr	r3, [r3, #12]
 800d978:	899b      	ldrh	r3, [r3, #12]
 800d97a:	b29b      	uxth	r3, r3
 800d97c:	4618      	mov	r0, r3
 800d97e:	f7fb f855 	bl	8008a2c <lwip_htons>
 800d982:	4603      	mov	r3, r0
 800d984:	f003 0301 	and.w	r3, r3, #1
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d01b      	beq.n	800d9c4 <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800d98c:	4b60      	ldr	r3, [pc, #384]	; (800db10 <tcp_receive+0x968>)
 800d98e:	68db      	ldr	r3, [r3, #12]
 800d990:	899b      	ldrh	r3, [r3, #12]
 800d992:	b29b      	uxth	r3, r3
 800d994:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d998:	b29c      	uxth	r4, r3
 800d99a:	4b5d      	ldr	r3, [pc, #372]	; (800db10 <tcp_receive+0x968>)
 800d99c:	68db      	ldr	r3, [r3, #12]
 800d99e:	899b      	ldrh	r3, [r3, #12]
 800d9a0:	b29b      	uxth	r3, r3
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f7fb f842 	bl	8008a2c <lwip_htons>
 800d9a8:	4603      	mov	r3, r0
 800d9aa:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800d9ae:	b29b      	uxth	r3, r3
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	f7fb f83b 	bl	8008a2c <lwip_htons>
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	461a      	mov	r2, r3
 800d9ba:	4b55      	ldr	r3, [pc, #340]	; (800db10 <tcp_receive+0x968>)
 800d9bc:	68db      	ldr	r3, [r3, #12]
 800d9be:	4322      	orrs	r2, r4
 800d9c0:	b292      	uxth	r2, r2
 800d9c2:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d9c8:	4b51      	ldr	r3, [pc, #324]	; (800db10 <tcp_receive+0x968>)
 800d9ca:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d9cc:	4b50      	ldr	r3, [pc, #320]	; (800db10 <tcp_receive+0x968>)
 800d9ce:	68db      	ldr	r3, [r3, #12]
 800d9d0:	899b      	ldrh	r3, [r3, #12]
 800d9d2:	b29b      	uxth	r3, r3
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	f7fb f829 	bl	8008a2c <lwip_htons>
 800d9da:	4603      	mov	r3, r0
 800d9dc:	f003 0302 	and.w	r3, r3, #2
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d005      	beq.n	800d9f0 <tcp_receive+0x848>
            inseg.len -= 1;
 800d9e4:	4b4a      	ldr	r3, [pc, #296]	; (800db10 <tcp_receive+0x968>)
 800d9e6:	891b      	ldrh	r3, [r3, #8]
 800d9e8:	3b01      	subs	r3, #1
 800d9ea:	b29a      	uxth	r2, r3
 800d9ec:	4b48      	ldr	r3, [pc, #288]	; (800db10 <tcp_receive+0x968>)
 800d9ee:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800d9f0:	4b47      	ldr	r3, [pc, #284]	; (800db10 <tcp_receive+0x968>)
 800d9f2:	685a      	ldr	r2, [r3, #4]
 800d9f4:	4b46      	ldr	r3, [pc, #280]	; (800db10 <tcp_receive+0x968>)
 800d9f6:	891b      	ldrh	r3, [r3, #8]
 800d9f8:	4619      	mov	r1, r3
 800d9fa:	4610      	mov	r0, r2
 800d9fc:	f7fc fb60 	bl	800a0c0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800da00:	4b43      	ldr	r3, [pc, #268]	; (800db10 <tcp_receive+0x968>)
 800da02:	891c      	ldrh	r4, [r3, #8]
 800da04:	4b42      	ldr	r3, [pc, #264]	; (800db10 <tcp_receive+0x968>)
 800da06:	68db      	ldr	r3, [r3, #12]
 800da08:	899b      	ldrh	r3, [r3, #12]
 800da0a:	b29b      	uxth	r3, r3
 800da0c:	4618      	mov	r0, r3
 800da0e:	f7fb f80d 	bl	8008a2c <lwip_htons>
 800da12:	4603      	mov	r3, r0
 800da14:	f003 0303 	and.w	r3, r3, #3
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d001      	beq.n	800da20 <tcp_receive+0x878>
 800da1c:	2301      	movs	r3, #1
 800da1e:	e000      	b.n	800da22 <tcp_receive+0x87a>
 800da20:	2300      	movs	r3, #0
 800da22:	4423      	add	r3, r4
 800da24:	b29a      	uxth	r2, r3
 800da26:	4b3b      	ldr	r3, [pc, #236]	; (800db14 <tcp_receive+0x96c>)
 800da28:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800da2a:	4b3a      	ldr	r3, [pc, #232]	; (800db14 <tcp_receive+0x96c>)
 800da2c:	881b      	ldrh	r3, [r3, #0]
 800da2e:	461a      	mov	r2, r3
 800da30:	4b36      	ldr	r3, [pc, #216]	; (800db0c <tcp_receive+0x964>)
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	441a      	add	r2, r3
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da3a:	6879      	ldr	r1, [r7, #4]
 800da3c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800da3e:	440b      	add	r3, r1
 800da40:	429a      	cmp	r2, r3
 800da42:	d006      	beq.n	800da52 <tcp_receive+0x8aa>
 800da44:	4b34      	ldr	r3, [pc, #208]	; (800db18 <tcp_receive+0x970>)
 800da46:	f240 527f 	movw	r2, #1407	; 0x57f
 800da4a:	4934      	ldr	r1, [pc, #208]	; (800db1c <tcp_receive+0x974>)
 800da4c:	4834      	ldr	r0, [pc, #208]	; (800db20 <tcp_receive+0x978>)
 800da4e:	f00c fe65 	bl	801a71c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da56:	2b00      	cmp	r3, #0
 800da58:	f000 80e1 	beq.w	800dc1e <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800da5c:	4b2c      	ldr	r3, [pc, #176]	; (800db10 <tcp_receive+0x968>)
 800da5e:	68db      	ldr	r3, [r3, #12]
 800da60:	899b      	ldrh	r3, [r3, #12]
 800da62:	b29b      	uxth	r3, r3
 800da64:	4618      	mov	r0, r3
 800da66:	f7fa ffe1 	bl	8008a2c <lwip_htons>
 800da6a:	4603      	mov	r3, r0
 800da6c:	f003 0301 	and.w	r3, r3, #1
 800da70:	2b00      	cmp	r3, #0
 800da72:	d010      	beq.n	800da96 <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800da74:	e00a      	b.n	800da8c <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da7a:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da80:	681a      	ldr	r2, [r3, #0]
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800da86:	68b8      	ldr	r0, [r7, #8]
 800da88:	f7fd ff2f 	bl	800b8ea <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da90:	2b00      	cmp	r3, #0
 800da92:	d1f0      	bne.n	800da76 <tcp_receive+0x8ce>
 800da94:	e0c3      	b.n	800dc1e <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da9a:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800da9c:	e04f      	b.n	800db3e <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800da9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daa0:	68db      	ldr	r3, [r3, #12]
 800daa2:	899b      	ldrh	r3, [r3, #12]
 800daa4:	b29b      	uxth	r3, r3
 800daa6:	4618      	mov	r0, r3
 800daa8:	f7fa ffc0 	bl	8008a2c <lwip_htons>
 800daac:	4603      	mov	r3, r0
 800daae:	f003 0301 	and.w	r3, r3, #1
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d03b      	beq.n	800db2e <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800dab6:	4b16      	ldr	r3, [pc, #88]	; (800db10 <tcp_receive+0x968>)
 800dab8:	68db      	ldr	r3, [r3, #12]
 800daba:	899b      	ldrh	r3, [r3, #12]
 800dabc:	b29b      	uxth	r3, r3
 800dabe:	4618      	mov	r0, r3
 800dac0:	f7fa ffb4 	bl	8008a2c <lwip_htons>
 800dac4:	4603      	mov	r3, r0
 800dac6:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d12f      	bne.n	800db2e <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800dace:	4b10      	ldr	r3, [pc, #64]	; (800db10 <tcp_receive+0x968>)
 800dad0:	68db      	ldr	r3, [r3, #12]
 800dad2:	899b      	ldrh	r3, [r3, #12]
 800dad4:	b29c      	uxth	r4, r3
 800dad6:	2001      	movs	r0, #1
 800dad8:	f7fa ffa8 	bl	8008a2c <lwip_htons>
 800dadc:	4603      	mov	r3, r0
 800dade:	461a      	mov	r2, r3
 800dae0:	4b0b      	ldr	r3, [pc, #44]	; (800db10 <tcp_receive+0x968>)
 800dae2:	68db      	ldr	r3, [r3, #12]
 800dae4:	4322      	orrs	r2, r4
 800dae6:	b292      	uxth	r2, r2
 800dae8:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800daea:	4b09      	ldr	r3, [pc, #36]	; (800db10 <tcp_receive+0x968>)
 800daec:	891c      	ldrh	r4, [r3, #8]
 800daee:	4b08      	ldr	r3, [pc, #32]	; (800db10 <tcp_receive+0x968>)
 800daf0:	68db      	ldr	r3, [r3, #12]
 800daf2:	899b      	ldrh	r3, [r3, #12]
 800daf4:	b29b      	uxth	r3, r3
 800daf6:	4618      	mov	r0, r3
 800daf8:	f7fa ff98 	bl	8008a2c <lwip_htons>
 800dafc:	4603      	mov	r3, r0
 800dafe:	f003 0303 	and.w	r3, r3, #3
 800db02:	2b00      	cmp	r3, #0
 800db04:	d00e      	beq.n	800db24 <tcp_receive+0x97c>
 800db06:	2301      	movs	r3, #1
 800db08:	e00d      	b.n	800db26 <tcp_receive+0x97e>
 800db0a:	bf00      	nop
 800db0c:	20004c20 	.word	0x20004c20
 800db10:	20004c00 	.word	0x20004c00
 800db14:	20004c2a 	.word	0x20004c2a
 800db18:	0801efb8 	.word	0x0801efb8
 800db1c:	0801f284 	.word	0x0801f284
 800db20:	0801effc 	.word	0x0801effc
 800db24:	2300      	movs	r3, #0
 800db26:	4423      	add	r3, r4
 800db28:	b29a      	uxth	r2, r3
 800db2a:	4b95      	ldr	r3, [pc, #596]	; (800dd80 <tcp_receive+0xbd8>)
 800db2c:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 800db2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db30:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 800db32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 800db38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db3a:	f7fd fed6 	bl	800b8ea <tcp_seg_free>
            while (next &&
 800db3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db40:	2b00      	cmp	r3, #0
 800db42:	d00e      	beq.n	800db62 <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800db44:	4b8e      	ldr	r3, [pc, #568]	; (800dd80 <tcp_receive+0xbd8>)
 800db46:	881b      	ldrh	r3, [r3, #0]
 800db48:	461a      	mov	r2, r3
 800db4a:	4b8e      	ldr	r3, [pc, #568]	; (800dd84 <tcp_receive+0xbdc>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	441a      	add	r2, r3
 800db50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db52:	68db      	ldr	r3, [r3, #12]
 800db54:	685b      	ldr	r3, [r3, #4]
 800db56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800db58:	8909      	ldrh	r1, [r1, #8]
 800db5a:	440b      	add	r3, r1
 800db5c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800db5e:	2b00      	cmp	r3, #0
 800db60:	da9d      	bge.n	800da9e <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800db62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db64:	2b00      	cmp	r3, #0
 800db66:	d057      	beq.n	800dc18 <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 800db68:	4b85      	ldr	r3, [pc, #532]	; (800dd80 <tcp_receive+0xbd8>)
 800db6a:	881b      	ldrh	r3, [r3, #0]
 800db6c:	461a      	mov	r2, r3
 800db6e:	4b85      	ldr	r3, [pc, #532]	; (800dd84 <tcp_receive+0xbdc>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	441a      	add	r2, r3
 800db74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db76:	68db      	ldr	r3, [r3, #12]
 800db78:	685b      	ldr	r3, [r3, #4]
 800db7a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	dd4b      	ble.n	800dc18 <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800db80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db82:	68db      	ldr	r3, [r3, #12]
 800db84:	685b      	ldr	r3, [r3, #4]
 800db86:	b29a      	uxth	r2, r3
 800db88:	4b7e      	ldr	r3, [pc, #504]	; (800dd84 <tcp_receive+0xbdc>)
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	b29b      	uxth	r3, r3
 800db8e:	1ad3      	subs	r3, r2, r3
 800db90:	b29a      	uxth	r2, r3
 800db92:	4b7d      	ldr	r3, [pc, #500]	; (800dd88 <tcp_receive+0xbe0>)
 800db94:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800db96:	4b7c      	ldr	r3, [pc, #496]	; (800dd88 <tcp_receive+0xbe0>)
 800db98:	68db      	ldr	r3, [r3, #12]
 800db9a:	899b      	ldrh	r3, [r3, #12]
 800db9c:	b29b      	uxth	r3, r3
 800db9e:	4618      	mov	r0, r3
 800dba0:	f7fa ff44 	bl	8008a2c <lwip_htons>
 800dba4:	4603      	mov	r3, r0
 800dba6:	f003 0302 	and.w	r3, r3, #2
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d005      	beq.n	800dbba <tcp_receive+0xa12>
                inseg.len -= 1;
 800dbae:	4b76      	ldr	r3, [pc, #472]	; (800dd88 <tcp_receive+0xbe0>)
 800dbb0:	891b      	ldrh	r3, [r3, #8]
 800dbb2:	3b01      	subs	r3, #1
 800dbb4:	b29a      	uxth	r2, r3
 800dbb6:	4b74      	ldr	r3, [pc, #464]	; (800dd88 <tcp_receive+0xbe0>)
 800dbb8:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800dbba:	4b73      	ldr	r3, [pc, #460]	; (800dd88 <tcp_receive+0xbe0>)
 800dbbc:	685a      	ldr	r2, [r3, #4]
 800dbbe:	4b72      	ldr	r3, [pc, #456]	; (800dd88 <tcp_receive+0xbe0>)
 800dbc0:	891b      	ldrh	r3, [r3, #8]
 800dbc2:	4619      	mov	r1, r3
 800dbc4:	4610      	mov	r0, r2
 800dbc6:	f7fc fa7b 	bl	800a0c0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800dbca:	4b6f      	ldr	r3, [pc, #444]	; (800dd88 <tcp_receive+0xbe0>)
 800dbcc:	891c      	ldrh	r4, [r3, #8]
 800dbce:	4b6e      	ldr	r3, [pc, #440]	; (800dd88 <tcp_receive+0xbe0>)
 800dbd0:	68db      	ldr	r3, [r3, #12]
 800dbd2:	899b      	ldrh	r3, [r3, #12]
 800dbd4:	b29b      	uxth	r3, r3
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	f7fa ff28 	bl	8008a2c <lwip_htons>
 800dbdc:	4603      	mov	r3, r0
 800dbde:	f003 0303 	and.w	r3, r3, #3
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d001      	beq.n	800dbea <tcp_receive+0xa42>
 800dbe6:	2301      	movs	r3, #1
 800dbe8:	e000      	b.n	800dbec <tcp_receive+0xa44>
 800dbea:	2300      	movs	r3, #0
 800dbec:	4423      	add	r3, r4
 800dbee:	b29a      	uxth	r2, r3
 800dbf0:	4b63      	ldr	r3, [pc, #396]	; (800dd80 <tcp_receive+0xbd8>)
 800dbf2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800dbf4:	4b62      	ldr	r3, [pc, #392]	; (800dd80 <tcp_receive+0xbd8>)
 800dbf6:	881b      	ldrh	r3, [r3, #0]
 800dbf8:	461a      	mov	r2, r3
 800dbfa:	4b62      	ldr	r3, [pc, #392]	; (800dd84 <tcp_receive+0xbdc>)
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	441a      	add	r2, r3
 800dc00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc02:	68db      	ldr	r3, [r3, #12]
 800dc04:	685b      	ldr	r3, [r3, #4]
 800dc06:	429a      	cmp	r2, r3
 800dc08:	d006      	beq.n	800dc18 <tcp_receive+0xa70>
 800dc0a:	4b60      	ldr	r3, [pc, #384]	; (800dd8c <tcp_receive+0xbe4>)
 800dc0c:	f240 52af 	movw	r2, #1455	; 0x5af
 800dc10:	495f      	ldr	r1, [pc, #380]	; (800dd90 <tcp_receive+0xbe8>)
 800dc12:	4860      	ldr	r0, [pc, #384]	; (800dd94 <tcp_receive+0xbec>)
 800dc14:	f00c fd82 	bl	801a71c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc1c:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800dc1e:	4b58      	ldr	r3, [pc, #352]	; (800dd80 <tcp_receive+0xbd8>)
 800dc20:	881b      	ldrh	r3, [r3, #0]
 800dc22:	461a      	mov	r2, r3
 800dc24:	4b57      	ldr	r3, [pc, #348]	; (800dd84 <tcp_receive+0xbdc>)
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	441a      	add	r2, r3
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800dc32:	4b53      	ldr	r3, [pc, #332]	; (800dd80 <tcp_receive+0xbd8>)
 800dc34:	881b      	ldrh	r3, [r3, #0]
 800dc36:	429a      	cmp	r2, r3
 800dc38:	d206      	bcs.n	800dc48 <tcp_receive+0xaa0>
 800dc3a:	4b54      	ldr	r3, [pc, #336]	; (800dd8c <tcp_receive+0xbe4>)
 800dc3c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800dc40:	4955      	ldr	r1, [pc, #340]	; (800dd98 <tcp_receive+0xbf0>)
 800dc42:	4854      	ldr	r0, [pc, #336]	; (800dd94 <tcp_receive+0xbec>)
 800dc44:	f00c fd6a 	bl	801a71c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800dc4c:	4b4c      	ldr	r3, [pc, #304]	; (800dd80 <tcp_receive+0xbd8>)
 800dc4e:	881b      	ldrh	r3, [r3, #0]
 800dc50:	1ad3      	subs	r3, r2, r3
 800dc52:	b29a      	uxth	r2, r3
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800dc58:	6878      	ldr	r0, [r7, #4]
 800dc5a:	f7fd f9fd 	bl	800b058 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800dc5e:	4b4a      	ldr	r3, [pc, #296]	; (800dd88 <tcp_receive+0xbe0>)
 800dc60:	685b      	ldr	r3, [r3, #4]
 800dc62:	891b      	ldrh	r3, [r3, #8]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d006      	beq.n	800dc76 <tcp_receive+0xace>
          recv_data = inseg.p;
 800dc68:	4b47      	ldr	r3, [pc, #284]	; (800dd88 <tcp_receive+0xbe0>)
 800dc6a:	685b      	ldr	r3, [r3, #4]
 800dc6c:	4a4b      	ldr	r2, [pc, #300]	; (800dd9c <tcp_receive+0xbf4>)
 800dc6e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800dc70:	4b45      	ldr	r3, [pc, #276]	; (800dd88 <tcp_receive+0xbe0>)
 800dc72:	2200      	movs	r2, #0
 800dc74:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800dc76:	4b44      	ldr	r3, [pc, #272]	; (800dd88 <tcp_receive+0xbe0>)
 800dc78:	68db      	ldr	r3, [r3, #12]
 800dc7a:	899b      	ldrh	r3, [r3, #12]
 800dc7c:	b29b      	uxth	r3, r3
 800dc7e:	4618      	mov	r0, r3
 800dc80:	f7fa fed4 	bl	8008a2c <lwip_htons>
 800dc84:	4603      	mov	r3, r0
 800dc86:	f003 0301 	and.w	r3, r3, #1
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	f000 80b4 	beq.w	800ddf8 <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800dc90:	4b43      	ldr	r3, [pc, #268]	; (800dda0 <tcp_receive+0xbf8>)
 800dc92:	781b      	ldrb	r3, [r3, #0]
 800dc94:	f043 0320 	orr.w	r3, r3, #32
 800dc98:	b2da      	uxtb	r2, r3
 800dc9a:	4b41      	ldr	r3, [pc, #260]	; (800dda0 <tcp_receive+0xbf8>)
 800dc9c:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800dc9e:	e0ab      	b.n	800ddf8 <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dca4:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dcaa:	68db      	ldr	r3, [r3, #12]
 800dcac:	685b      	ldr	r3, [r3, #4]
 800dcae:	4a35      	ldr	r2, [pc, #212]	; (800dd84 <tcp_receive+0xbdc>)
 800dcb0:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	891b      	ldrh	r3, [r3, #8]
 800dcb6:	461c      	mov	r4, r3
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	68db      	ldr	r3, [r3, #12]
 800dcbc:	899b      	ldrh	r3, [r3, #12]
 800dcbe:	b29b      	uxth	r3, r3
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	f7fa feb3 	bl	8008a2c <lwip_htons>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	f003 0303 	and.w	r3, r3, #3
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d001      	beq.n	800dcd4 <tcp_receive+0xb2c>
 800dcd0:	2301      	movs	r3, #1
 800dcd2:	e000      	b.n	800dcd6 <tcp_receive+0xb2e>
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	191a      	adds	r2, r3, r4
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcdc:	441a      	add	r2, r3
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dce6:	461c      	mov	r4, r3
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	891b      	ldrh	r3, [r3, #8]
 800dcec:	461d      	mov	r5, r3
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	68db      	ldr	r3, [r3, #12]
 800dcf2:	899b      	ldrh	r3, [r3, #12]
 800dcf4:	b29b      	uxth	r3, r3
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f7fa fe98 	bl	8008a2c <lwip_htons>
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	f003 0303 	and.w	r3, r3, #3
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d001      	beq.n	800dd0a <tcp_receive+0xb62>
 800dd06:	2301      	movs	r3, #1
 800dd08:	e000      	b.n	800dd0c <tcp_receive+0xb64>
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	442b      	add	r3, r5
 800dd0e:	429c      	cmp	r4, r3
 800dd10:	d206      	bcs.n	800dd20 <tcp_receive+0xb78>
 800dd12:	4b1e      	ldr	r3, [pc, #120]	; (800dd8c <tcp_receive+0xbe4>)
 800dd14:	f240 52de 	movw	r2, #1502	; 0x5de
 800dd18:	4922      	ldr	r1, [pc, #136]	; (800dda4 <tcp_receive+0xbfc>)
 800dd1a:	481e      	ldr	r0, [pc, #120]	; (800dd94 <tcp_receive+0xbec>)
 800dd1c:	f00c fcfe 	bl	801a71c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	891b      	ldrh	r3, [r3, #8]
 800dd24:	461c      	mov	r4, r3
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	68db      	ldr	r3, [r3, #12]
 800dd2a:	899b      	ldrh	r3, [r3, #12]
 800dd2c:	b29b      	uxth	r3, r3
 800dd2e:	4618      	mov	r0, r3
 800dd30:	f7fa fe7c 	bl	8008a2c <lwip_htons>
 800dd34:	4603      	mov	r3, r0
 800dd36:	f003 0303 	and.w	r3, r3, #3
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d001      	beq.n	800dd42 <tcp_receive+0xb9a>
 800dd3e:	2301      	movs	r3, #1
 800dd40:	e000      	b.n	800dd44 <tcp_receive+0xb9c>
 800dd42:	2300      	movs	r3, #0
 800dd44:	1919      	adds	r1, r3, r4
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800dd4a:	b28b      	uxth	r3, r1
 800dd4c:	1ad3      	subs	r3, r2, r3
 800dd4e:	b29a      	uxth	r2, r3
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800dd54:	6878      	ldr	r0, [r7, #4]
 800dd56:	f7fd f97f 	bl	800b058 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	685b      	ldr	r3, [r3, #4]
 800dd5e:	891b      	ldrh	r3, [r3, #8]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d028      	beq.n	800ddb6 <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800dd64:	4b0d      	ldr	r3, [pc, #52]	; (800dd9c <tcp_receive+0xbf4>)
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d01d      	beq.n	800dda8 <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 800dd6c:	4b0b      	ldr	r3, [pc, #44]	; (800dd9c <tcp_receive+0xbf4>)
 800dd6e:	681a      	ldr	r2, [r3, #0]
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	685b      	ldr	r3, [r3, #4]
 800dd74:	4619      	mov	r1, r3
 800dd76:	4610      	mov	r0, r2
 800dd78:	f7fc fbee 	bl	800a558 <pbuf_cat>
 800dd7c:	e018      	b.n	800ddb0 <tcp_receive+0xc08>
 800dd7e:	bf00      	nop
 800dd80:	20004c2a 	.word	0x20004c2a
 800dd84:	20004c20 	.word	0x20004c20
 800dd88:	20004c00 	.word	0x20004c00
 800dd8c:	0801efb8 	.word	0x0801efb8
 800dd90:	0801f2bc 	.word	0x0801f2bc
 800dd94:	0801effc 	.word	0x0801effc
 800dd98:	0801f2f8 	.word	0x0801f2f8
 800dd9c:	20004c30 	.word	0x20004c30
 800dda0:	20004c2d 	.word	0x20004c2d
 800dda4:	0801f318 	.word	0x0801f318
            } else {
              recv_data = cseg->p;
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	685b      	ldr	r3, [r3, #4]
 800ddac:	4a71      	ldr	r2, [pc, #452]	; (800df74 <tcp_receive+0xdcc>)
 800ddae:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	68db      	ldr	r3, [r3, #12]
 800ddba:	899b      	ldrh	r3, [r3, #12]
 800ddbc:	b29b      	uxth	r3, r3
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	f7fa fe34 	bl	8008a2c <lwip_htons>
 800ddc4:	4603      	mov	r3, r0
 800ddc6:	f003 0301 	and.w	r3, r3, #1
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d00d      	beq.n	800ddea <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800ddce:	4b6a      	ldr	r3, [pc, #424]	; (800df78 <tcp_receive+0xdd0>)
 800ddd0:	781b      	ldrb	r3, [r3, #0]
 800ddd2:	f043 0320 	orr.w	r3, r3, #32
 800ddd6:	b2da      	uxtb	r2, r3
 800ddd8:	4b67      	ldr	r3, [pc, #412]	; (800df78 <tcp_receive+0xdd0>)
 800ddda:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	7d1b      	ldrb	r3, [r3, #20]
 800dde0:	2b04      	cmp	r3, #4
 800dde2:	d102      	bne.n	800ddea <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2207      	movs	r2, #7
 800dde8:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	681a      	ldr	r2, [r3, #0]
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 800ddf2:	68f8      	ldr	r0, [r7, #12]
 800ddf4:	f7fd fd79 	bl	800b8ea <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d008      	beq.n	800de12 <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de04:	68db      	ldr	r3, [r3, #12]
 800de06:	685a      	ldr	r2, [r3, #4]
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800de0c:	429a      	cmp	r2, r3
 800de0e:	f43f af47 	beq.w	800dca0 <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	7e9b      	ldrb	r3, [r3, #26]
 800de16:	f003 0301 	and.w	r3, r3, #1
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d00e      	beq.n	800de3c <tcp_receive+0xc94>
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	7e9b      	ldrb	r3, [r3, #26]
 800de22:	f023 0301 	bic.w	r3, r3, #1
 800de26:	b2da      	uxtb	r2, r3
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	769a      	strb	r2, [r3, #26]
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	7e9b      	ldrb	r3, [r3, #26]
 800de30:	f043 0302 	orr.w	r3, r3, #2
 800de34:	b2da      	uxtb	r2, r3
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800de3a:	e181      	b.n	800e140 <tcp_receive+0xf98>
        tcp_ack(pcb);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	7e9b      	ldrb	r3, [r3, #26]
 800de40:	f043 0301 	orr.w	r3, r3, #1
 800de44:	b2da      	uxtb	r2, r3
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800de4a:	e179      	b.n	800e140 <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 800de4c:	6878      	ldr	r0, [r7, #4]
 800de4e:	f000 fc91 	bl	800e774 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de56:	2b00      	cmp	r3, #0
 800de58:	d106      	bne.n	800de68 <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800de5a:	4848      	ldr	r0, [pc, #288]	; (800df7c <tcp_receive+0xdd4>)
 800de5c:	f7fd fd5d 	bl	800b91a <tcp_seg_copy>
 800de60:	4602      	mov	r2, r0
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 800de66:	e16b      	b.n	800e140 <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 800de68:	2300      	movs	r3, #0
 800de6a:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de70:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de72:	e150      	b.n	800e116 <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 800de74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de76:	68db      	ldr	r3, [r3, #12]
 800de78:	685a      	ldr	r2, [r3, #4]
 800de7a:	4b41      	ldr	r3, [pc, #260]	; (800df80 <tcp_receive+0xdd8>)
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	429a      	cmp	r2, r3
 800de80:	d11d      	bne.n	800debe <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800de82:	4b3e      	ldr	r3, [pc, #248]	; (800df7c <tcp_receive+0xdd4>)
 800de84:	891a      	ldrh	r2, [r3, #8]
 800de86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de88:	891b      	ldrh	r3, [r3, #8]
 800de8a:	429a      	cmp	r2, r3
 800de8c:	f240 8148 	bls.w	800e120 <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 800de90:	483a      	ldr	r0, [pc, #232]	; (800df7c <tcp_receive+0xdd4>)
 800de92:	f7fd fd42 	bl	800b91a <tcp_seg_copy>
 800de96:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	f000 8142 	beq.w	800e124 <tcp_receive+0xf7c>
                  if (prev != NULL) {
 800dea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d003      	beq.n	800deae <tcp_receive+0xd06>
                    prev->next = cseg;
 800dea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dea8:	68fa      	ldr	r2, [r7, #12]
 800deaa:	601a      	str	r2, [r3, #0]
 800deac:	e002      	b.n	800deb4 <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	68fa      	ldr	r2, [r7, #12]
 800deb2:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 800deb4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800deb6:	68f8      	ldr	r0, [r7, #12]
 800deb8:	f7ff f900 	bl	800d0bc <tcp_oos_insert_segment>
                }
                break;
 800debc:	e132      	b.n	800e124 <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800debe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d117      	bne.n	800def4 <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800dec4:	4b2e      	ldr	r3, [pc, #184]	; (800df80 <tcp_receive+0xdd8>)
 800dec6:	681a      	ldr	r2, [r3, #0]
 800dec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deca:	68db      	ldr	r3, [r3, #12]
 800decc:	685b      	ldr	r3, [r3, #4]
 800dece:	1ad3      	subs	r3, r2, r3
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	da57      	bge.n	800df84 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 800ded4:	4829      	ldr	r0, [pc, #164]	; (800df7c <tcp_receive+0xdd4>)
 800ded6:	f7fd fd20 	bl	800b91a <tcp_seg_copy>
 800deda:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	f000 8122 	beq.w	800e128 <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	68fa      	ldr	r2, [r7, #12]
 800dee8:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 800deea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800deec:	68f8      	ldr	r0, [r7, #12]
 800deee:	f7ff f8e5 	bl	800d0bc <tcp_oos_insert_segment>
                  }
                  break;
 800def2:	e119      	b.n	800e128 <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 800def4:	4b22      	ldr	r3, [pc, #136]	; (800df80 <tcp_receive+0xdd8>)
 800def6:	681a      	ldr	r2, [r3, #0]
 800def8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800defa:	68db      	ldr	r3, [r3, #12]
 800defc:	685b      	ldr	r3, [r3, #4]
 800defe:	1ad3      	subs	r3, r2, r3
 800df00:	3b01      	subs	r3, #1
 800df02:	2b00      	cmp	r3, #0
 800df04:	db3e      	blt.n	800df84 <tcp_receive+0xddc>
 800df06:	4b1e      	ldr	r3, [pc, #120]	; (800df80 <tcp_receive+0xdd8>)
 800df08:	681a      	ldr	r2, [r3, #0]
 800df0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df0c:	68db      	ldr	r3, [r3, #12]
 800df0e:	685b      	ldr	r3, [r3, #4]
 800df10:	1ad3      	subs	r3, r2, r3
 800df12:	3301      	adds	r3, #1
 800df14:	2b00      	cmp	r3, #0
 800df16:	dc35      	bgt.n	800df84 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 800df18:	4818      	ldr	r0, [pc, #96]	; (800df7c <tcp_receive+0xdd4>)
 800df1a:	f7fd fcfe 	bl	800b91a <tcp_seg_copy>
 800df1e:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	2b00      	cmp	r3, #0
 800df24:	f000 8102 	beq.w	800e12c <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800df28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df2a:	68db      	ldr	r3, [r3, #12]
 800df2c:	685b      	ldr	r3, [r3, #4]
 800df2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df30:	8912      	ldrh	r2, [r2, #8]
 800df32:	441a      	add	r2, r3
 800df34:	4b12      	ldr	r3, [pc, #72]	; (800df80 <tcp_receive+0xdd8>)
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	1ad3      	subs	r3, r2, r3
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	dd12      	ble.n	800df64 <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800df3e:	4b10      	ldr	r3, [pc, #64]	; (800df80 <tcp_receive+0xdd8>)
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	b29a      	uxth	r2, r3
 800df44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df46:	68db      	ldr	r3, [r3, #12]
 800df48:	685b      	ldr	r3, [r3, #4]
 800df4a:	b29b      	uxth	r3, r3
 800df4c:	1ad3      	subs	r3, r2, r3
 800df4e:	b29a      	uxth	r2, r3
 800df50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df52:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800df54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df56:	685a      	ldr	r2, [r3, #4]
 800df58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df5a:	891b      	ldrh	r3, [r3, #8]
 800df5c:	4619      	mov	r1, r3
 800df5e:	4610      	mov	r0, r2
 800df60:	f7fc f8ae 	bl	800a0c0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800df64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df66:	68fa      	ldr	r2, [r7, #12]
 800df68:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800df6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800df6c:	68f8      	ldr	r0, [r7, #12]
 800df6e:	f7ff f8a5 	bl	800d0bc <tcp_oos_insert_segment>
                  }
                  break;
 800df72:	e0db      	b.n	800e12c <tcp_receive+0xf84>
 800df74:	20004c30 	.word	0x20004c30
 800df78:	20004c2d 	.word	0x20004c2d
 800df7c:	20004c00 	.word	0x20004c00
 800df80:	20004c20 	.word	0x20004c20
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800df84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	f040 80bf 	bne.w	800e10c <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800df8e:	4b7c      	ldr	r3, [pc, #496]	; (800e180 <tcp_receive+0xfd8>)
 800df90:	681a      	ldr	r2, [r3, #0]
 800df92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df94:	68db      	ldr	r3, [r3, #12]
 800df96:	685b      	ldr	r3, [r3, #4]
 800df98:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	f340 80b6 	ble.w	800e10c <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800dfa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfa2:	68db      	ldr	r3, [r3, #12]
 800dfa4:	899b      	ldrh	r3, [r3, #12]
 800dfa6:	b29b      	uxth	r3, r3
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	f7fa fd3f 	bl	8008a2c <lwip_htons>
 800dfae:	4603      	mov	r3, r0
 800dfb0:	f003 0301 	and.w	r3, r3, #1
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	f040 80bb 	bne.w	800e130 <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800dfba:	4872      	ldr	r0, [pc, #456]	; (800e184 <tcp_receive+0xfdc>)
 800dfbc:	f7fd fcad 	bl	800b91a <tcp_seg_copy>
 800dfc0:	4602      	mov	r2, r0
 800dfc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfc4:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800dfc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	f000 80b2 	beq.w	800e134 <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800dfd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfd2:	68db      	ldr	r3, [r3, #12]
 800dfd4:	685b      	ldr	r3, [r3, #4]
 800dfd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dfd8:	8912      	ldrh	r2, [r2, #8]
 800dfda:	441a      	add	r2, r3
 800dfdc:	4b68      	ldr	r3, [pc, #416]	; (800e180 <tcp_receive+0xfd8>)
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	1ad3      	subs	r3, r2, r3
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	dd12      	ble.n	800e00c <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800dfe6:	4b66      	ldr	r3, [pc, #408]	; (800e180 <tcp_receive+0xfd8>)
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	b29a      	uxth	r2, r3
 800dfec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfee:	68db      	ldr	r3, [r3, #12]
 800dff0:	685b      	ldr	r3, [r3, #4]
 800dff2:	b29b      	uxth	r3, r3
 800dff4:	1ad3      	subs	r3, r2, r3
 800dff6:	b29a      	uxth	r2, r3
 800dff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dffa:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800dffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dffe:	685a      	ldr	r2, [r3, #4]
 800e000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e002:	891b      	ldrh	r3, [r3, #8]
 800e004:	4619      	mov	r1, r3
 800e006:	4610      	mov	r0, r2
 800e008:	f7fc f85a 	bl	800a0c0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800e00c:	4b5e      	ldr	r3, [pc, #376]	; (800e188 <tcp_receive+0xfe0>)
 800e00e:	881b      	ldrh	r3, [r3, #0]
 800e010:	461a      	mov	r2, r3
 800e012:	4b5b      	ldr	r3, [pc, #364]	; (800e180 <tcp_receive+0xfd8>)
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	441a      	add	r2, r3
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e01c:	6879      	ldr	r1, [r7, #4]
 800e01e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e020:	440b      	add	r3, r1
 800e022:	1ad3      	subs	r3, r2, r3
 800e024:	2b00      	cmp	r3, #0
 800e026:	f340 8085 	ble.w	800e134 <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800e02a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	68db      	ldr	r3, [r3, #12]
 800e030:	899b      	ldrh	r3, [r3, #12]
 800e032:	b29b      	uxth	r3, r3
 800e034:	4618      	mov	r0, r3
 800e036:	f7fa fcf9 	bl	8008a2c <lwip_htons>
 800e03a:	4603      	mov	r3, r0
 800e03c:	f003 0301 	and.w	r3, r3, #1
 800e040:	2b00      	cmp	r3, #0
 800e042:	d01e      	beq.n	800e082 <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800e044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	68db      	ldr	r3, [r3, #12]
 800e04a:	899b      	ldrh	r3, [r3, #12]
 800e04c:	b29b      	uxth	r3, r3
 800e04e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e052:	b29c      	uxth	r4, r3
 800e054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	68db      	ldr	r3, [r3, #12]
 800e05a:	899b      	ldrh	r3, [r3, #12]
 800e05c:	b29b      	uxth	r3, r3
 800e05e:	4618      	mov	r0, r3
 800e060:	f7fa fce4 	bl	8008a2c <lwip_htons>
 800e064:	4603      	mov	r3, r0
 800e066:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800e06a:	b29b      	uxth	r3, r3
 800e06c:	4618      	mov	r0, r3
 800e06e:	f7fa fcdd 	bl	8008a2c <lwip_htons>
 800e072:	4603      	mov	r3, r0
 800e074:	461a      	mov	r2, r3
 800e076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	68db      	ldr	r3, [r3, #12]
 800e07c:	4322      	orrs	r2, r4
 800e07e:	b292      	uxth	r2, r2
 800e080:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e086:	b29a      	uxth	r2, r3
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e08c:	4413      	add	r3, r2
 800e08e:	b299      	uxth	r1, r3
 800e090:	4b3b      	ldr	r3, [pc, #236]	; (800e180 <tcp_receive+0xfd8>)
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	b29a      	uxth	r2, r3
 800e096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	1a8a      	subs	r2, r1, r2
 800e09c:	b292      	uxth	r2, r2
 800e09e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800e0a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	685a      	ldr	r2, [r3, #4]
 800e0a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	891b      	ldrh	r3, [r3, #8]
 800e0ac:	4619      	mov	r1, r3
 800e0ae:	4610      	mov	r0, r2
 800e0b0:	f7fc f806 	bl	800a0c0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800e0b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	891c      	ldrh	r4, [r3, #8]
 800e0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	68db      	ldr	r3, [r3, #12]
 800e0c0:	899b      	ldrh	r3, [r3, #12]
 800e0c2:	b29b      	uxth	r3, r3
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f7fa fcb1 	bl	8008a2c <lwip_htons>
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	f003 0303 	and.w	r3, r3, #3
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d001      	beq.n	800e0d8 <tcp_receive+0xf30>
 800e0d4:	2301      	movs	r3, #1
 800e0d6:	e000      	b.n	800e0da <tcp_receive+0xf32>
 800e0d8:	2300      	movs	r3, #0
 800e0da:	4423      	add	r3, r4
 800e0dc:	b29a      	uxth	r2, r3
 800e0de:	4b2a      	ldr	r3, [pc, #168]	; (800e188 <tcp_receive+0xfe0>)
 800e0e0:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800e0e2:	4b29      	ldr	r3, [pc, #164]	; (800e188 <tcp_receive+0xfe0>)
 800e0e4:	881b      	ldrh	r3, [r3, #0]
 800e0e6:	461a      	mov	r2, r3
 800e0e8:	4b25      	ldr	r3, [pc, #148]	; (800e180 <tcp_receive+0xfd8>)
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	441a      	add	r2, r3
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0f2:	6879      	ldr	r1, [r7, #4]
 800e0f4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e0f6:	440b      	add	r3, r1
 800e0f8:	429a      	cmp	r2, r3
 800e0fa:	d01b      	beq.n	800e134 <tcp_receive+0xf8c>
 800e0fc:	4b23      	ldr	r3, [pc, #140]	; (800e18c <tcp_receive+0xfe4>)
 800e0fe:	f240 627b 	movw	r2, #1659	; 0x67b
 800e102:	4923      	ldr	r1, [pc, #140]	; (800e190 <tcp_receive+0xfe8>)
 800e104:	4823      	ldr	r0, [pc, #140]	; (800e194 <tcp_receive+0xfec>)
 800e106:	f00c fb09 	bl	801a71c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800e10a:	e013      	b.n	800e134 <tcp_receive+0xf8c>
              }
            }
            prev = next;
 800e10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e10e:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800e110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e118:	2b00      	cmp	r3, #0
 800e11a:	f47f aeab 	bne.w	800de74 <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 800e11e:	e00f      	b.n	800e140 <tcp_receive+0xf98>
                break;
 800e120:	bf00      	nop
 800e122:	e00d      	b.n	800e140 <tcp_receive+0xf98>
                break;
 800e124:	bf00      	nop
 800e126:	e00b      	b.n	800e140 <tcp_receive+0xf98>
                  break;
 800e128:	bf00      	nop
 800e12a:	e009      	b.n	800e140 <tcp_receive+0xf98>
                  break;
 800e12c:	bf00      	nop
 800e12e:	e007      	b.n	800e140 <tcp_receive+0xf98>
                  break;
 800e130:	bf00      	nop
 800e132:	e005      	b.n	800e140 <tcp_receive+0xf98>
                break;
 800e134:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 800e136:	e003      	b.n	800e140 <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800e138:	6878      	ldr	r0, [r7, #4]
 800e13a:	f000 fb1b 	bl	800e774 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e13e:	e01a      	b.n	800e176 <tcp_receive+0xfce>
 800e140:	e019      	b.n	800e176 <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800e142:	4b0f      	ldr	r3, [pc, #60]	; (800e180 <tcp_receive+0xfd8>)
 800e144:	681a      	ldr	r2, [r3, #0]
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e14a:	1ad3      	subs	r3, r2, r3
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	db0a      	blt.n	800e166 <tcp_receive+0xfbe>
 800e150:	4b0b      	ldr	r3, [pc, #44]	; (800e180 <tcp_receive+0xfd8>)
 800e152:	681a      	ldr	r2, [r3, #0]
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e158:	6879      	ldr	r1, [r7, #4]
 800e15a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e15c:	440b      	add	r3, r1
 800e15e:	1ad3      	subs	r3, r2, r3
 800e160:	3301      	adds	r3, #1
 800e162:	2b00      	cmp	r3, #0
 800e164:	dd07      	ble.n	800e176 <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	7e9b      	ldrb	r3, [r3, #26]
 800e16a:	f043 0302 	orr.w	r3, r3, #2
 800e16e:	b2da      	uxtb	r2, r3
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	769a      	strb	r2, [r3, #26]
    }
  }
}
 800e174:	e7ff      	b.n	800e176 <tcp_receive+0xfce>
 800e176:	bf00      	nop
 800e178:	3734      	adds	r7, #52	; 0x34
 800e17a:	46bd      	mov	sp, r7
 800e17c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e17e:	bf00      	nop
 800e180:	20004c20 	.word	0x20004c20
 800e184:	20004c00 	.word	0x20004c00
 800e188:	20004c2a 	.word	0x20004c2a
 800e18c:	0801efb8 	.word	0x0801efb8
 800e190:	0801f284 	.word	0x0801f284
 800e194:	0801effc 	.word	0x0801effc

0800e198 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 800e198:	b480      	push	{r7}
 800e19a:	b083      	sub	sp, #12
 800e19c:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 800e19e:	4b17      	ldr	r3, [pc, #92]	; (800e1fc <tcp_getoptbyte+0x64>)
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d005      	beq.n	800e1b2 <tcp_getoptbyte+0x1a>
 800e1a6:	4b16      	ldr	r3, [pc, #88]	; (800e200 <tcp_getoptbyte+0x68>)
 800e1a8:	881a      	ldrh	r2, [r3, #0]
 800e1aa:	4b16      	ldr	r3, [pc, #88]	; (800e204 <tcp_getoptbyte+0x6c>)
 800e1ac:	881b      	ldrh	r3, [r3, #0]
 800e1ae:	429a      	cmp	r2, r3
 800e1b0:	d20e      	bcs.n	800e1d0 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800e1b2:	4b15      	ldr	r3, [pc, #84]	; (800e208 <tcp_getoptbyte+0x70>)
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	3314      	adds	r3, #20
 800e1b8:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 800e1ba:	4b11      	ldr	r3, [pc, #68]	; (800e200 <tcp_getoptbyte+0x68>)
 800e1bc:	881b      	ldrh	r3, [r3, #0]
 800e1be:	1c5a      	adds	r2, r3, #1
 800e1c0:	b291      	uxth	r1, r2
 800e1c2:	4a0f      	ldr	r2, [pc, #60]	; (800e200 <tcp_getoptbyte+0x68>)
 800e1c4:	8011      	strh	r1, [r2, #0]
 800e1c6:	461a      	mov	r2, r3
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	4413      	add	r3, r2
 800e1cc:	781b      	ldrb	r3, [r3, #0]
 800e1ce:	e010      	b.n	800e1f2 <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800e1d0:	4b0b      	ldr	r3, [pc, #44]	; (800e200 <tcp_getoptbyte+0x68>)
 800e1d2:	881b      	ldrh	r3, [r3, #0]
 800e1d4:	1c5a      	adds	r2, r3, #1
 800e1d6:	b291      	uxth	r1, r2
 800e1d8:	4a09      	ldr	r2, [pc, #36]	; (800e200 <tcp_getoptbyte+0x68>)
 800e1da:	8011      	strh	r1, [r2, #0]
 800e1dc:	b2da      	uxtb	r2, r3
 800e1de:	4b09      	ldr	r3, [pc, #36]	; (800e204 <tcp_getoptbyte+0x6c>)
 800e1e0:	881b      	ldrh	r3, [r3, #0]
 800e1e2:	b2db      	uxtb	r3, r3
 800e1e4:	1ad3      	subs	r3, r2, r3
 800e1e6:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 800e1e8:	4b04      	ldr	r3, [pc, #16]	; (800e1fc <tcp_getoptbyte+0x64>)
 800e1ea:	681a      	ldr	r2, [r3, #0]
 800e1ec:	79fb      	ldrb	r3, [r7, #7]
 800e1ee:	4413      	add	r3, r2
 800e1f0:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	370c      	adds	r7, #12
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	bc80      	pop	{r7}
 800e1fa:	4770      	bx	lr
 800e1fc:	20004c18 	.word	0x20004c18
 800e200:	20004c1c 	.word	0x20004c1c
 800e204:	20004c16 	.word	0x20004c16
 800e208:	20004c10 	.word	0x20004c10

0800e20c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b084      	sub	sp, #16
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800e214:	4b2d      	ldr	r3, [pc, #180]	; (800e2cc <tcp_parseopt+0xc0>)
 800e216:	881b      	ldrh	r3, [r3, #0]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d053      	beq.n	800e2c4 <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e21c:	4b2c      	ldr	r3, [pc, #176]	; (800e2d0 <tcp_parseopt+0xc4>)
 800e21e:	2200      	movs	r2, #0
 800e220:	801a      	strh	r2, [r3, #0]
 800e222:	e043      	b.n	800e2ac <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 800e224:	f7ff ffb8 	bl	800e198 <tcp_getoptbyte>
 800e228:	4603      	mov	r3, r0
 800e22a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800e22c:	7bfb      	ldrb	r3, [r7, #15]
 800e22e:	2b01      	cmp	r3, #1
 800e230:	d03c      	beq.n	800e2ac <tcp_parseopt+0xa0>
 800e232:	2b02      	cmp	r3, #2
 800e234:	d002      	beq.n	800e23c <tcp_parseopt+0x30>
 800e236:	2b00      	cmp	r3, #0
 800e238:	d03f      	beq.n	800e2ba <tcp_parseopt+0xae>
 800e23a:	e026      	b.n	800e28a <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800e23c:	f7ff ffac 	bl	800e198 <tcp_getoptbyte>
 800e240:	4603      	mov	r3, r0
 800e242:	2b04      	cmp	r3, #4
 800e244:	d13b      	bne.n	800e2be <tcp_parseopt+0xb2>
 800e246:	4b22      	ldr	r3, [pc, #136]	; (800e2d0 <tcp_parseopt+0xc4>)
 800e248:	881b      	ldrh	r3, [r3, #0]
 800e24a:	3302      	adds	r3, #2
 800e24c:	4a1f      	ldr	r2, [pc, #124]	; (800e2cc <tcp_parseopt+0xc0>)
 800e24e:	8812      	ldrh	r2, [r2, #0]
 800e250:	4293      	cmp	r3, r2
 800e252:	dc34      	bgt.n	800e2be <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 800e254:	f7ff ffa0 	bl	800e198 <tcp_getoptbyte>
 800e258:	4603      	mov	r3, r0
 800e25a:	b29b      	uxth	r3, r3
 800e25c:	021b      	lsls	r3, r3, #8
 800e25e:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 800e260:	f7ff ff9a 	bl	800e198 <tcp_getoptbyte>
 800e264:	4603      	mov	r3, r0
 800e266:	b29a      	uxth	r2, r3
 800e268:	89bb      	ldrh	r3, [r7, #12]
 800e26a:	4313      	orrs	r3, r2
 800e26c:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800e26e:	89bb      	ldrh	r3, [r7, #12]
 800e270:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e274:	d804      	bhi.n	800e280 <tcp_parseopt+0x74>
 800e276:	89bb      	ldrh	r3, [r7, #12]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d001      	beq.n	800e280 <tcp_parseopt+0x74>
 800e27c:	89ba      	ldrh	r2, [r7, #12]
 800e27e:	e001      	b.n	800e284 <tcp_parseopt+0x78>
 800e280:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 800e288:	e010      	b.n	800e2ac <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 800e28a:	f7ff ff85 	bl	800e198 <tcp_getoptbyte>
 800e28e:	4603      	mov	r3, r0
 800e290:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 800e292:	7afb      	ldrb	r3, [r7, #11]
 800e294:	2b01      	cmp	r3, #1
 800e296:	d914      	bls.n	800e2c2 <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 800e298:	7afb      	ldrb	r3, [r7, #11]
 800e29a:	b29a      	uxth	r2, r3
 800e29c:	4b0c      	ldr	r3, [pc, #48]	; (800e2d0 <tcp_parseopt+0xc4>)
 800e29e:	881b      	ldrh	r3, [r3, #0]
 800e2a0:	4413      	add	r3, r2
 800e2a2:	b29b      	uxth	r3, r3
 800e2a4:	3b02      	subs	r3, #2
 800e2a6:	b29a      	uxth	r2, r3
 800e2a8:	4b09      	ldr	r3, [pc, #36]	; (800e2d0 <tcp_parseopt+0xc4>)
 800e2aa:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800e2ac:	4b08      	ldr	r3, [pc, #32]	; (800e2d0 <tcp_parseopt+0xc4>)
 800e2ae:	881a      	ldrh	r2, [r3, #0]
 800e2b0:	4b06      	ldr	r3, [pc, #24]	; (800e2cc <tcp_parseopt+0xc0>)
 800e2b2:	881b      	ldrh	r3, [r3, #0]
 800e2b4:	429a      	cmp	r2, r3
 800e2b6:	d3b5      	bcc.n	800e224 <tcp_parseopt+0x18>
 800e2b8:	e004      	b.n	800e2c4 <tcp_parseopt+0xb8>
        return;
 800e2ba:	bf00      	nop
 800e2bc:	e002      	b.n	800e2c4 <tcp_parseopt+0xb8>
          return;
 800e2be:	bf00      	nop
 800e2c0:	e000      	b.n	800e2c4 <tcp_parseopt+0xb8>
          return;
 800e2c2:	bf00      	nop
      }
    }
  }
}
 800e2c4:	3710      	adds	r7, #16
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	bd80      	pop	{r7, pc}
 800e2ca:	bf00      	nop
 800e2cc:	20004c14 	.word	0x20004c14
 800e2d0:	20004c1c 	.word	0x20004c1c

0800e2d4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800e2d4:	b480      	push	{r7}
 800e2d6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800e2d8:	4b05      	ldr	r3, [pc, #20]	; (800e2f0 <tcp_trigger_input_pcb_close+0x1c>)
 800e2da:	781b      	ldrb	r3, [r3, #0]
 800e2dc:	f043 0310 	orr.w	r3, r3, #16
 800e2e0:	b2da      	uxtb	r2, r3
 800e2e2:	4b03      	ldr	r3, [pc, #12]	; (800e2f0 <tcp_trigger_input_pcb_close+0x1c>)
 800e2e4:	701a      	strb	r2, [r3, #0]
}
 800e2e6:	bf00      	nop
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	bc80      	pop	{r7}
 800e2ec:	4770      	bx	lr
 800e2ee:	bf00      	nop
 800e2f0:	20004c2d 	.word	0x20004c2d

0800e2f4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b086      	sub	sp, #24
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	60f8      	str	r0, [r7, #12]
 800e2fc:	607b      	str	r3, [r7, #4]
 800e2fe:	460b      	mov	r3, r1
 800e300:	817b      	strh	r3, [r7, #10]
 800e302:	4613      	mov	r3, r2
 800e304:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800e306:	897a      	ldrh	r2, [r7, #10]
 800e308:	893b      	ldrh	r3, [r7, #8]
 800e30a:	4413      	add	r3, r2
 800e30c:	b29b      	uxth	r3, r3
 800e30e:	3314      	adds	r3, #20
 800e310:	b29b      	uxth	r3, r3
 800e312:	2200      	movs	r2, #0
 800e314:	4619      	mov	r1, r3
 800e316:	2001      	movs	r0, #1
 800e318:	f7fb fcd4 	bl	8009cc4 <pbuf_alloc>
 800e31c:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800e31e:	697b      	ldr	r3, [r7, #20]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d057      	beq.n	800e3d4 <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800e324:	697b      	ldr	r3, [r7, #20]
 800e326:	895b      	ldrh	r3, [r3, #10]
 800e328:	461a      	mov	r2, r3
 800e32a:	897b      	ldrh	r3, [r7, #10]
 800e32c:	3314      	adds	r3, #20
 800e32e:	429a      	cmp	r2, r3
 800e330:	da05      	bge.n	800e33e <tcp_output_alloc_header+0x4a>
 800e332:	4b2b      	ldr	r3, [pc, #172]	; (800e3e0 <tcp_output_alloc_header+0xec>)
 800e334:	2273      	movs	r2, #115	; 0x73
 800e336:	492b      	ldr	r1, [pc, #172]	; (800e3e4 <tcp_output_alloc_header+0xf0>)
 800e338:	482b      	ldr	r0, [pc, #172]	; (800e3e8 <tcp_output_alloc_header+0xf4>)
 800e33a:	f00c f9ef 	bl	801a71c <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800e33e:	697b      	ldr	r3, [r7, #20]
 800e340:	685b      	ldr	r3, [r3, #4]
 800e342:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	8adb      	ldrh	r3, [r3, #22]
 800e348:	4618      	mov	r0, r3
 800e34a:	f7fa fb6f 	bl	8008a2c <lwip_htons>
 800e34e:	4603      	mov	r3, r0
 800e350:	461a      	mov	r2, r3
 800e352:	693b      	ldr	r3, [r7, #16]
 800e354:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	8b1b      	ldrh	r3, [r3, #24]
 800e35a:	4618      	mov	r0, r3
 800e35c:	f7fa fb66 	bl	8008a2c <lwip_htons>
 800e360:	4603      	mov	r3, r0
 800e362:	461a      	mov	r2, r3
 800e364:	693b      	ldr	r3, [r7, #16]
 800e366:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800e368:	693b      	ldr	r3, [r7, #16]
 800e36a:	687a      	ldr	r2, [r7, #4]
 800e36c:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e372:	4618      	mov	r0, r3
 800e374:	f7fa fb67 	bl	8008a46 <lwip_htonl>
 800e378:	4602      	mov	r2, r0
 800e37a:	693b      	ldr	r3, [r7, #16]
 800e37c:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 800e37e:	897b      	ldrh	r3, [r7, #10]
 800e380:	089b      	lsrs	r3, r3, #2
 800e382:	b29b      	uxth	r3, r3
 800e384:	3305      	adds	r3, #5
 800e386:	b29b      	uxth	r3, r3
 800e388:	031b      	lsls	r3, r3, #12
 800e38a:	b29b      	uxth	r3, r3
 800e38c:	f043 0310 	orr.w	r3, r3, #16
 800e390:	b29b      	uxth	r3, r3
 800e392:	4618      	mov	r0, r3
 800e394:	f7fa fb4a 	bl	8008a2c <lwip_htons>
 800e398:	4603      	mov	r3, r0
 800e39a:	461a      	mov	r2, r3
 800e39c:	693b      	ldr	r3, [r7, #16]
 800e39e:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	f7fa fb41 	bl	8008a2c <lwip_htons>
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	461a      	mov	r2, r3
 800e3ae:	693b      	ldr	r3, [r7, #16]
 800e3b0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800e3b2:	693b      	ldr	r3, [r7, #16]
 800e3b4:	2200      	movs	r2, #0
 800e3b6:	741a      	strb	r2, [r3, #16]
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800e3bc:	693b      	ldr	r3, [r7, #16]
 800e3be:	2200      	movs	r2, #0
 800e3c0:	749a      	strb	r2, [r3, #18]
 800e3c2:	2200      	movs	r2, #0
 800e3c4:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3ca:	68fa      	ldr	r2, [r7, #12]
 800e3cc:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800e3ce:	441a      	add	r2, r3
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800e3d4:	697b      	ldr	r3, [r7, #20]
}
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	3718      	adds	r7, #24
 800e3da:	46bd      	mov	sp, r7
 800e3dc:	bd80      	pop	{r7, pc}
 800e3de:	bf00      	nop
 800e3e0:	0801f340 	.word	0x0801f340
 800e3e4:	0801f374 	.word	0x0801f374
 800e3e8:	0801f3a4 	.word	0x0801f3a4

0800e3ec <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800e3ec:	b590      	push	{r4, r7, lr}
 800e3ee:	b085      	sub	sp, #20
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d02d      	beq.n	800e458 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e400:	60fb      	str	r3, [r7, #12]
 800e402:	e002      	b.n	800e40a <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d1f8      	bne.n	800e404 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	68db      	ldr	r3, [r3, #12]
 800e416:	899b      	ldrh	r3, [r3, #12]
 800e418:	b29b      	uxth	r3, r3
 800e41a:	4618      	mov	r0, r3
 800e41c:	f7fa fb06 	bl	8008a2c <lwip_htons>
 800e420:	4603      	mov	r3, r0
 800e422:	f003 0307 	and.w	r3, r3, #7
 800e426:	2b00      	cmp	r3, #0
 800e428:	d116      	bne.n	800e458 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	68db      	ldr	r3, [r3, #12]
 800e42e:	899b      	ldrh	r3, [r3, #12]
 800e430:	b29c      	uxth	r4, r3
 800e432:	2001      	movs	r0, #1
 800e434:	f7fa fafa 	bl	8008a2c <lwip_htons>
 800e438:	4603      	mov	r3, r0
 800e43a:	461a      	mov	r2, r3
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	68db      	ldr	r3, [r3, #12]
 800e440:	4322      	orrs	r2, r4
 800e442:	b292      	uxth	r2, r2
 800e444:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	7e9b      	ldrb	r3, [r3, #26]
 800e44a:	f043 0320 	orr.w	r3, r3, #32
 800e44e:	b2da      	uxtb	r2, r3
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 800e454:	2300      	movs	r3, #0
 800e456:	e004      	b.n	800e462 <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800e458:	2101      	movs	r1, #1
 800e45a:	6878      	ldr	r0, [r7, #4]
 800e45c:	f000 f88e 	bl	800e57c <tcp_enqueue_flags>
 800e460:	4603      	mov	r3, r0
}
 800e462:	4618      	mov	r0, r3
 800e464:	3714      	adds	r7, #20
 800e466:	46bd      	mov	sp, r7
 800e468:	bd90      	pop	{r4, r7, pc}
	...

0800e46c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 800e46c:	b590      	push	{r4, r7, lr}
 800e46e:	b087      	sub	sp, #28
 800e470:	af00      	add	r7, sp, #0
 800e472:	60f8      	str	r0, [r7, #12]
 800e474:	60b9      	str	r1, [r7, #8]
 800e476:	603b      	str	r3, [r7, #0]
 800e478:	4613      	mov	r3, r2
 800e47a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800e47c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e480:	009b      	lsls	r3, r3, #2
 800e482:	b2db      	uxtb	r3, r3
 800e484:	f003 0304 	and.w	r3, r3, #4
 800e488:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800e48a:	2003      	movs	r0, #3
 800e48c:	f7fb f97e 	bl	800978c <memp_malloc>
 800e490:	6138      	str	r0, [r7, #16]
 800e492:	693b      	ldr	r3, [r7, #16]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d104      	bne.n	800e4a2 <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800e498:	68b8      	ldr	r0, [r7, #8]
 800e49a:	f7fb ff85 	bl	800a3a8 <pbuf_free>
    return NULL;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	e061      	b.n	800e566 <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 800e4a2:	693b      	ldr	r3, [r7, #16]
 800e4a4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e4a8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800e4aa:	693b      	ldr	r3, [r7, #16]
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800e4b0:	693b      	ldr	r3, [r7, #16]
 800e4b2:	68ba      	ldr	r2, [r7, #8]
 800e4b4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800e4b6:	68bb      	ldr	r3, [r7, #8]
 800e4b8:	891a      	ldrh	r2, [r3, #8]
 800e4ba:	7dfb      	ldrb	r3, [r7, #23]
 800e4bc:	b29b      	uxth	r3, r3
 800e4be:	429a      	cmp	r2, r3
 800e4c0:	d205      	bcs.n	800e4ce <tcp_create_segment+0x62>
 800e4c2:	4b2b      	ldr	r3, [pc, #172]	; (800e570 <tcp_create_segment+0x104>)
 800e4c4:	22ba      	movs	r2, #186	; 0xba
 800e4c6:	492b      	ldr	r1, [pc, #172]	; (800e574 <tcp_create_segment+0x108>)
 800e4c8:	482b      	ldr	r0, [pc, #172]	; (800e578 <tcp_create_segment+0x10c>)
 800e4ca:	f00c f927 	bl	801a71c <iprintf>
  seg->len = p->tot_len - optlen;
 800e4ce:	68bb      	ldr	r3, [r7, #8]
 800e4d0:	891a      	ldrh	r2, [r3, #8]
 800e4d2:	7dfb      	ldrb	r3, [r7, #23]
 800e4d4:	b29b      	uxth	r3, r3
 800e4d6:	1ad3      	subs	r3, r2, r3
 800e4d8:	b29a      	uxth	r2, r3
 800e4da:	693b      	ldr	r3, [r7, #16]
 800e4dc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 800e4de:	2114      	movs	r1, #20
 800e4e0:	68b8      	ldr	r0, [r7, #8]
 800e4e2:	f7fb ff3d 	bl	800a360 <pbuf_header>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d004      	beq.n	800e4f6 <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800e4ec:	6938      	ldr	r0, [r7, #16]
 800e4ee:	f7fd f9fc 	bl	800b8ea <tcp_seg_free>
    return NULL;
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	e037      	b.n	800e566 <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800e4f6:	693b      	ldr	r3, [r7, #16]
 800e4f8:	685b      	ldr	r3, [r3, #4]
 800e4fa:	685a      	ldr	r2, [r3, #4]
 800e4fc:	693b      	ldr	r3, [r7, #16]
 800e4fe:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	8ada      	ldrh	r2, [r3, #22]
 800e504:	693b      	ldr	r3, [r7, #16]
 800e506:	68dc      	ldr	r4, [r3, #12]
 800e508:	4610      	mov	r0, r2
 800e50a:	f7fa fa8f 	bl	8008a2c <lwip_htons>
 800e50e:	4603      	mov	r3, r0
 800e510:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	8b1a      	ldrh	r2, [r3, #24]
 800e516:	693b      	ldr	r3, [r7, #16]
 800e518:	68dc      	ldr	r4, [r3, #12]
 800e51a:	4610      	mov	r0, r2
 800e51c:	f7fa fa86 	bl	8008a2c <lwip_htons>
 800e520:	4603      	mov	r3, r0
 800e522:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800e524:	693b      	ldr	r3, [r7, #16]
 800e526:	68dc      	ldr	r4, [r3, #12]
 800e528:	6838      	ldr	r0, [r7, #0]
 800e52a:	f7fa fa8c 	bl	8008a46 <lwip_htonl>
 800e52e:	4603      	mov	r3, r0
 800e530:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800e532:	7dfb      	ldrb	r3, [r7, #23]
 800e534:	089b      	lsrs	r3, r3, #2
 800e536:	b2db      	uxtb	r3, r3
 800e538:	b29b      	uxth	r3, r3
 800e53a:	3305      	adds	r3, #5
 800e53c:	b29b      	uxth	r3, r3
 800e53e:	031b      	lsls	r3, r3, #12
 800e540:	b29a      	uxth	r2, r3
 800e542:	79fb      	ldrb	r3, [r7, #7]
 800e544:	b29b      	uxth	r3, r3
 800e546:	4313      	orrs	r3, r2
 800e548:	b29a      	uxth	r2, r3
 800e54a:	693b      	ldr	r3, [r7, #16]
 800e54c:	68dc      	ldr	r4, [r3, #12]
 800e54e:	4610      	mov	r0, r2
 800e550:	f7fa fa6c 	bl	8008a2c <lwip_htons>
 800e554:	4603      	mov	r3, r0
 800e556:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800e558:	693b      	ldr	r3, [r7, #16]
 800e55a:	68db      	ldr	r3, [r3, #12]
 800e55c:	2200      	movs	r2, #0
 800e55e:	749a      	strb	r2, [r3, #18]
 800e560:	2200      	movs	r2, #0
 800e562:	74da      	strb	r2, [r3, #19]
  return seg;
 800e564:	693b      	ldr	r3, [r7, #16]
}
 800e566:	4618      	mov	r0, r3
 800e568:	371c      	adds	r7, #28
 800e56a:	46bd      	mov	sp, r7
 800e56c:	bd90      	pop	{r4, r7, pc}
 800e56e:	bf00      	nop
 800e570:	0801f340 	.word	0x0801f340
 800e574:	0801f3cc 	.word	0x0801f3cc
 800e578:	0801f3a4 	.word	0x0801f3a4

0800e57c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b08a      	sub	sp, #40	; 0x28
 800e580:	af02      	add	r7, sp, #8
 800e582:	6078      	str	r0, [r7, #4]
 800e584:	460b      	mov	r3, r1
 800e586:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800e588:	2300      	movs	r3, #0
 800e58a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800e58c:	2300      	movs	r3, #0
 800e58e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800e590:	78fb      	ldrb	r3, [r7, #3]
 800e592:	f003 0303 	and.w	r3, r3, #3
 800e596:	2b00      	cmp	r3, #0
 800e598:	d106      	bne.n	800e5a8 <tcp_enqueue_flags+0x2c>
 800e59a:	4b6f      	ldr	r3, [pc, #444]	; (800e758 <tcp_enqueue_flags+0x1dc>)
 800e59c:	f240 321b 	movw	r2, #795	; 0x31b
 800e5a0:	496e      	ldr	r1, [pc, #440]	; (800e75c <tcp_enqueue_flags+0x1e0>)
 800e5a2:	486f      	ldr	r0, [pc, #444]	; (800e760 <tcp_enqueue_flags+0x1e4>)
 800e5a4:	f00c f8ba 	bl	801a71c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e5ae:	2b08      	cmp	r3, #8
 800e5b0:	d806      	bhi.n	800e5c0 <tcp_enqueue_flags+0x44>
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e5b8:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800e5bc:	4293      	cmp	r3, r2
 800e5be:	d90e      	bls.n	800e5de <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 800e5c0:	78fb      	ldrb	r3, [r7, #3]
 800e5c2:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d109      	bne.n	800e5de <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	7e9b      	ldrb	r3, [r3, #26]
 800e5ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e5d2:	b2da      	uxtb	r2, r3
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 800e5d8:	f04f 33ff 	mov.w	r3, #4294967295
 800e5dc:	e0b7      	b.n	800e74e <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 800e5de:	78fb      	ldrb	r3, [r7, #3]
 800e5e0:	f003 0302 	and.w	r3, r3, #2
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d001      	beq.n	800e5ec <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 800e5e8:	2301      	movs	r3, #1
 800e5ea:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800e5ec:	7ffb      	ldrb	r3, [r7, #31]
 800e5ee:	009b      	lsls	r3, r3, #2
 800e5f0:	b2db      	uxtb	r3, r3
 800e5f2:	f003 0304 	and.w	r3, r3, #4
 800e5f6:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800e5f8:	7dfb      	ldrb	r3, [r7, #23]
 800e5fa:	b29b      	uxth	r3, r3
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	4619      	mov	r1, r3
 800e600:	2000      	movs	r0, #0
 800e602:	f7fb fb5f 	bl	8009cc4 <pbuf_alloc>
 800e606:	6138      	str	r0, [r7, #16]
 800e608:	693b      	ldr	r3, [r7, #16]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d109      	bne.n	800e622 <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	7e9b      	ldrb	r3, [r3, #26]
 800e612:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e616:	b2da      	uxtb	r2, r3
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e61c:	f04f 33ff 	mov.w	r3, #4294967295
 800e620:	e095      	b.n	800e74e <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800e622:	693b      	ldr	r3, [r7, #16]
 800e624:	895a      	ldrh	r2, [r3, #10]
 800e626:	7dfb      	ldrb	r3, [r7, #23]
 800e628:	b29b      	uxth	r3, r3
 800e62a:	429a      	cmp	r2, r3
 800e62c:	d206      	bcs.n	800e63c <tcp_enqueue_flags+0xc0>
 800e62e:	4b4a      	ldr	r3, [pc, #296]	; (800e758 <tcp_enqueue_flags+0x1dc>)
 800e630:	f240 3241 	movw	r2, #833	; 0x341
 800e634:	494b      	ldr	r1, [pc, #300]	; (800e764 <tcp_enqueue_flags+0x1e8>)
 800e636:	484a      	ldr	r0, [pc, #296]	; (800e760 <tcp_enqueue_flags+0x1e4>)
 800e638:	f00c f870 	bl	801a71c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	6d99      	ldr	r1, [r3, #88]	; 0x58
 800e640:	78fa      	ldrb	r2, [r7, #3]
 800e642:	7ffb      	ldrb	r3, [r7, #31]
 800e644:	9300      	str	r3, [sp, #0]
 800e646:	460b      	mov	r3, r1
 800e648:	6939      	ldr	r1, [r7, #16]
 800e64a:	6878      	ldr	r0, [r7, #4]
 800e64c:	f7ff ff0e 	bl	800e46c <tcp_create_segment>
 800e650:	60f8      	str	r0, [r7, #12]
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d109      	bne.n	800e66c <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	7e9b      	ldrb	r3, [r3, #26]
 800e65c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e660:	b2da      	uxtb	r2, r3
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800e666:	f04f 33ff 	mov.w	r3, #4294967295
 800e66a:	e070      	b.n	800e74e <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	68db      	ldr	r3, [r3, #12]
 800e670:	f003 0303 	and.w	r3, r3, #3
 800e674:	2b00      	cmp	r3, #0
 800e676:	d006      	beq.n	800e686 <tcp_enqueue_flags+0x10a>
 800e678:	4b37      	ldr	r3, [pc, #220]	; (800e758 <tcp_enqueue_flags+0x1dc>)
 800e67a:	f240 3249 	movw	r2, #841	; 0x349
 800e67e:	493a      	ldr	r1, [pc, #232]	; (800e768 <tcp_enqueue_flags+0x1ec>)
 800e680:	4837      	ldr	r0, [pc, #220]	; (800e760 <tcp_enqueue_flags+0x1e4>)
 800e682:	f00c f84b 	bl	801a71c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	891b      	ldrh	r3, [r3, #8]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d006      	beq.n	800e69c <tcp_enqueue_flags+0x120>
 800e68e:	4b32      	ldr	r3, [pc, #200]	; (800e758 <tcp_enqueue_flags+0x1dc>)
 800e690:	f240 324a 	movw	r2, #842	; 0x34a
 800e694:	4935      	ldr	r1, [pc, #212]	; (800e76c <tcp_enqueue_flags+0x1f0>)
 800e696:	4832      	ldr	r0, [pc, #200]	; (800e760 <tcp_enqueue_flags+0x1e4>)
 800e698:	f00c f840 	bl	801a71c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d103      	bne.n	800e6ac <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	68fa      	ldr	r2, [r7, #12]
 800e6a8:	669a      	str	r2, [r3, #104]	; 0x68
 800e6aa:	e00d      	b.n	800e6c8 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e6b0:	61bb      	str	r3, [r7, #24]
 800e6b2:	e002      	b.n	800e6ba <tcp_enqueue_flags+0x13e>
 800e6b4:	69bb      	ldr	r3, [r7, #24]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	61bb      	str	r3, [r7, #24]
 800e6ba:	69bb      	ldr	r3, [r7, #24]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d1f8      	bne.n	800e6b4 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 800e6c2:	69bb      	ldr	r3, [r7, #24]
 800e6c4:	68fa      	ldr	r2, [r7, #12]
 800e6c6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800e6d0:	78fb      	ldrb	r3, [r7, #3]
 800e6d2:	f003 0302 	and.w	r3, r3, #2
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d104      	bne.n	800e6e4 <tcp_enqueue_flags+0x168>
 800e6da:	78fb      	ldrb	r3, [r7, #3]
 800e6dc:	f003 0301 	and.w	r3, r3, #1
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d004      	beq.n	800e6ee <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e6e8:	1c5a      	adds	r2, r3, #1
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800e6ee:	78fb      	ldrb	r3, [r7, #3]
 800e6f0:	f003 0301 	and.w	r3, r3, #1
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d006      	beq.n	800e706 <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	7e9b      	ldrb	r3, [r3, #26]
 800e6fc:	f043 0320 	orr.w	r3, r3, #32
 800e700:	b2da      	uxtb	r2, r3
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	685b      	ldr	r3, [r3, #4]
 800e70a:	4618      	mov	r0, r3
 800e70c:	f7fb fee6 	bl	800a4dc <pbuf_clen>
 800e710:	4603      	mov	r3, r0
 800e712:	461a      	mov	r2, r3
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e71a:	4413      	add	r3, r2
 800e71c:	b29a      	uxth	r2, r3
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d00e      	beq.n	800e74c <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e732:	2b00      	cmp	r3, #0
 800e734:	d10a      	bne.n	800e74c <tcp_enqueue_flags+0x1d0>
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d106      	bne.n	800e74c <tcp_enqueue_flags+0x1d0>
 800e73e:	4b06      	ldr	r3, [pc, #24]	; (800e758 <tcp_enqueue_flags+0x1dc>)
 800e740:	f240 326d 	movw	r2, #877	; 0x36d
 800e744:	490a      	ldr	r1, [pc, #40]	; (800e770 <tcp_enqueue_flags+0x1f4>)
 800e746:	4806      	ldr	r0, [pc, #24]	; (800e760 <tcp_enqueue_flags+0x1e4>)
 800e748:	f00b ffe8 	bl	801a71c <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800e74c:	2300      	movs	r3, #0
}
 800e74e:	4618      	mov	r0, r3
 800e750:	3720      	adds	r7, #32
 800e752:	46bd      	mov	sp, r7
 800e754:	bd80      	pop	{r7, pc}
 800e756:	bf00      	nop
 800e758:	0801f340 	.word	0x0801f340
 800e75c:	0801f644 	.word	0x0801f644
 800e760:	0801f3a4 	.word	0x0801f3a4
 800e764:	0801f69c 	.word	0x0801f69c
 800e768:	0801f6d8 	.word	0x0801f6d8
 800e76c:	0801f6f0 	.word	0x0801f6f0
 800e770:	0801f71c 	.word	0x0801f71c

0800e774 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800e774:	b590      	push	{r4, r7, lr}
 800e776:	b08b      	sub	sp, #44	; 0x2c
 800e778:	af04      	add	r7, sp, #16
 800e77a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 800e77c:	2300      	movs	r3, #0
 800e77e:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800e780:	7dbb      	ldrb	r3, [r7, #22]
 800e782:	b29c      	uxth	r4, r3
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e788:	4618      	mov	r0, r3
 800e78a:	f7fa f95c 	bl	8008a46 <lwip_htonl>
 800e78e:	4603      	mov	r3, r0
 800e790:	2200      	movs	r2, #0
 800e792:	4621      	mov	r1, r4
 800e794:	6878      	ldr	r0, [r7, #4]
 800e796:	f7ff fdad 	bl	800e2f4 <tcp_output_alloc_header>
 800e79a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e79c:	693b      	ldr	r3, [r7, #16]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d109      	bne.n	800e7b6 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	7e9b      	ldrb	r3, [r3, #26]
 800e7a6:	f043 0303 	orr.w	r3, r3, #3
 800e7aa:	b2da      	uxtb	r2, r3
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800e7b0:	f06f 0301 	mvn.w	r3, #1
 800e7b4:	e036      	b.n	800e824 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	3304      	adds	r3, #4
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	f004 fa44 	bl	8012c48 <ip4_route>
 800e7c0:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d102      	bne.n	800e7ce <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 800e7c8:	23fc      	movs	r3, #252	; 0xfc
 800e7ca:	75fb      	strb	r3, [r7, #23]
 800e7cc:	e012      	b.n	800e7f4 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 800e7ce:	6879      	ldr	r1, [r7, #4]
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	1d18      	adds	r0, r3, #4
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	7a9c      	ldrb	r4, [r3, #10]
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	7a5b      	ldrb	r3, [r3, #9]
 800e7dc:	68fa      	ldr	r2, [r7, #12]
 800e7de:	9202      	str	r2, [sp, #8]
 800e7e0:	2206      	movs	r2, #6
 800e7e2:	9201      	str	r2, [sp, #4]
 800e7e4:	9300      	str	r3, [sp, #0]
 800e7e6:	4623      	mov	r3, r4
 800e7e8:	4602      	mov	r2, r0
 800e7ea:	6938      	ldr	r0, [r7, #16]
 800e7ec:	f004 fbf2 	bl	8012fd4 <ip4_output_if>
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800e7f4:	6938      	ldr	r0, [r7, #16]
 800e7f6:	f7fb fdd7 	bl	800a3a8 <pbuf_free>

  if (err != ERR_OK) {
 800e7fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d007      	beq.n	800e812 <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	7e9b      	ldrb	r3, [r3, #26]
 800e806:	f043 0303 	orr.w	r3, r3, #3
 800e80a:	b2da      	uxtb	r2, r3
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	769a      	strb	r2, [r3, #26]
 800e810:	e006      	b.n	800e820 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	7e9b      	ldrb	r3, [r3, #26]
 800e816:	f023 0303 	bic.w	r3, r3, #3
 800e81a:	b2da      	uxtb	r2, r3
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	769a      	strb	r2, [r3, #26]
  }

  return err;
 800e820:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e824:	4618      	mov	r0, r3
 800e826:	371c      	adds	r7, #28
 800e828:	46bd      	mov	sp, r7
 800e82a:	bd90      	pop	{r4, r7, pc}

0800e82c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800e82c:	b5b0      	push	{r4, r5, r7, lr}
 800e82e:	b08a      	sub	sp, #40	; 0x28
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	7d1b      	ldrb	r3, [r3, #20]
 800e838:	2b01      	cmp	r3, #1
 800e83a:	d106      	bne.n	800e84a <tcp_output+0x1e>
 800e83c:	4b9b      	ldr	r3, [pc, #620]	; (800eaac <tcp_output+0x280>)
 800e83e:	f240 32ed 	movw	r2, #1005	; 0x3ed
 800e842:	499b      	ldr	r1, [pc, #620]	; (800eab0 <tcp_output+0x284>)
 800e844:	489b      	ldr	r0, [pc, #620]	; (800eab4 <tcp_output+0x288>)
 800e846:	f00b ff69 	bl	801a71c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800e84a:	4b9b      	ldr	r3, [pc, #620]	; (800eab8 <tcp_output+0x28c>)
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	687a      	ldr	r2, [r7, #4]
 800e850:	429a      	cmp	r2, r3
 800e852:	d101      	bne.n	800e858 <tcp_output+0x2c>
    return ERR_OK;
 800e854:	2300      	movs	r3, #0
 800e856:	e1cf      	b.n	800ebf8 <tcp_output+0x3cc>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e864:	429a      	cmp	r2, r3
 800e866:	d203      	bcs.n	800e870 <tcp_output+0x44>
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e86e:	e002      	b.n	800e876 <tcp_output+0x4a>
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e876:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e87c:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	7e9b      	ldrb	r3, [r3, #26]
 800e882:	f003 0302 	and.w	r3, r3, #2
 800e886:	2b00      	cmp	r3, #0
 800e888:	d017      	beq.n	800e8ba <tcp_output+0x8e>
 800e88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d00f      	beq.n	800e8b0 <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800e890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e892:	68db      	ldr	r3, [r3, #12]
 800e894:	685b      	ldr	r3, [r3, #4]
 800e896:	4618      	mov	r0, r3
 800e898:	f7fa f8d5 	bl	8008a46 <lwip_htonl>
 800e89c:	4602      	mov	r2, r0
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8a2:	1ad3      	subs	r3, r2, r3
 800e8a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8a6:	8912      	ldrh	r2, [r2, #8]
 800e8a8:	4413      	add	r3, r2
     (seg == NULL ||
 800e8aa:	69ba      	ldr	r2, [r7, #24]
 800e8ac:	429a      	cmp	r2, r3
 800e8ae:	d204      	bcs.n	800e8ba <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 800e8b0:	6878      	ldr	r0, [r7, #4]
 800e8b2:	f7ff ff5f 	bl	800e774 <tcp_send_empty_ack>
 800e8b6:	4603      	mov	r3, r0
 800e8b8:	e19e      	b.n	800ebf8 <tcp_output+0x3cc>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8be:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800e8c0:	6a3b      	ldr	r3, [r7, #32]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d007      	beq.n	800e8d6 <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 800e8c6:	e002      	b.n	800e8ce <tcp_output+0xa2>
 800e8c8:	6a3b      	ldr	r3, [r7, #32]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	623b      	str	r3, [r7, #32]
 800e8ce:	6a3b      	ldr	r3, [r7, #32]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d1f8      	bne.n	800e8c8 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	3304      	adds	r3, #4
 800e8da:	4618      	mov	r0, r3
 800e8dc:	f004 f9b4 	bl	8012c48 <ip4_route>
 800e8e0:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800e8e2:	697b      	ldr	r3, [r7, #20]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d102      	bne.n	800e8ee <tcp_output+0xc2>
    return ERR_RTE;
 800e8e8:	f06f 0303 	mvn.w	r3, #3
 800e8ec:	e184      	b.n	800ebf8 <tcp_output+0x3cc>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d003      	beq.n	800e8fc <tcp_output+0xd0>
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d111      	bne.n	800e920 <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800e8fc:	697b      	ldr	r3, [r7, #20]
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d002      	beq.n	800e908 <tcp_output+0xdc>
 800e902:	697b      	ldr	r3, [r7, #20]
 800e904:	3304      	adds	r3, #4
 800e906:	e000      	b.n	800e90a <tcp_output+0xde>
 800e908:	2300      	movs	r3, #0
 800e90a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800e90c:	693b      	ldr	r3, [r7, #16]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d102      	bne.n	800e918 <tcp_output+0xec>
      return ERR_RTE;
 800e912:	f06f 0303 	mvn.w	r3, #3
 800e916:	e16f      	b.n	800ebf8 <tcp_output+0x3cc>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e918:	693b      	ldr	r3, [r7, #16]
 800e91a:	681a      	ldr	r2, [r3, #0]
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 800e920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e922:	2b00      	cmp	r3, #0
 800e924:	f000 813e 	beq.w	800eba4 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800e928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e92a:	68db      	ldr	r3, [r3, #12]
 800e92c:	685b      	ldr	r3, [r3, #4]
 800e92e:	4618      	mov	r0, r3
 800e930:	f7fa f889 	bl	8008a46 <lwip_htonl>
 800e934:	4602      	mov	r2, r0
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e93a:	1ad3      	subs	r3, r2, r3
 800e93c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e93e:	8912      	ldrh	r2, [r2, #8]
 800e940:	4413      	add	r3, r2
  if (seg != NULL &&
 800e942:	69ba      	ldr	r2, [r7, #24]
 800e944:	429a      	cmp	r2, r3
 800e946:	f080 812d 	bcs.w	800eba4 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 800e94a:	69bb      	ldr	r3, [r7, #24]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	f000 8129 	beq.w	800eba4 <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e958:	461a      	mov	r2, r3
 800e95a:	69bb      	ldr	r3, [r7, #24]
 800e95c:	4293      	cmp	r3, r2
 800e95e:	f040 8121 	bne.w	800eba4 <tcp_output+0x378>
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e966:	2b00      	cmp	r3, #0
 800e968:	f040 811c 	bne.w	800eba4 <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800e972:	2b00      	cmp	r3, #0
 800e974:	f040 812b 	bne.w	800ebce <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	2200      	movs	r2, #0
 800e97c:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	2201      	movs	r2, #1
 800e984:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 800e988:	e121      	b.n	800ebce <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800e98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e98c:	68db      	ldr	r3, [r3, #12]
 800e98e:	899b      	ldrh	r3, [r3, #12]
 800e990:	b29b      	uxth	r3, r3
 800e992:	4618      	mov	r0, r3
 800e994:	f7fa f84a 	bl	8008a2c <lwip_htons>
 800e998:	4603      	mov	r3, r0
 800e99a:	f003 0304 	and.w	r3, r3, #4
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d006      	beq.n	800e9b0 <tcp_output+0x184>
 800e9a2:	4b42      	ldr	r3, [pc, #264]	; (800eaac <tcp_output+0x280>)
 800e9a4:	f240 4246 	movw	r2, #1094	; 0x446
 800e9a8:	4944      	ldr	r1, [pc, #272]	; (800eabc <tcp_output+0x290>)
 800e9aa:	4842      	ldr	r0, [pc, #264]	; (800eab4 <tcp_output+0x288>)
 800e9ac:	f00b feb6 	bl	801a71c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d01f      	beq.n	800e9f8 <tcp_output+0x1cc>
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	7e9b      	ldrb	r3, [r3, #26]
 800e9bc:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d119      	bne.n	800e9f8 <tcp_output+0x1cc>
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d00b      	beq.n	800e9e4 <tcp_output+0x1b8>
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d110      	bne.n	800e9f8 <tcp_output+0x1cc>
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e9da:	891a      	ldrh	r2, [r3, #8]
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e9e0:	429a      	cmp	r2, r3
 800e9e2:	d209      	bcs.n	800e9f8 <tcp_output+0x1cc>
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d004      	beq.n	800e9f8 <tcp_output+0x1cc>
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e9f4:	2b08      	cmp	r3, #8
 800e9f6:	d901      	bls.n	800e9fc <tcp_output+0x1d0>
 800e9f8:	2301      	movs	r3, #1
 800e9fa:	e000      	b.n	800e9fe <tcp_output+0x1d2>
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d106      	bne.n	800ea10 <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	7e9b      	ldrb	r3, [r3, #26]
 800ea06:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	f000 80e1 	beq.w	800ebd2 <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	7d1b      	ldrb	r3, [r3, #20]
 800ea14:	2b02      	cmp	r3, #2
 800ea16:	d00d      	beq.n	800ea34 <tcp_output+0x208>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800ea18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea1a:	68db      	ldr	r3, [r3, #12]
 800ea1c:	899b      	ldrh	r3, [r3, #12]
 800ea1e:	b29c      	uxth	r4, r3
 800ea20:	2010      	movs	r0, #16
 800ea22:	f7fa f803 	bl	8008a2c <lwip_htons>
 800ea26:	4603      	mov	r3, r0
 800ea28:	461a      	mov	r2, r3
 800ea2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea2c:	68db      	ldr	r3, [r3, #12]
 800ea2e:	4322      	orrs	r2, r4
 800ea30:	b292      	uxth	r2, r2
 800ea32:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 800ea34:	697a      	ldr	r2, [r7, #20]
 800ea36:	6879      	ldr	r1, [r7, #4]
 800ea38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ea3a:	f000 f8e1 	bl	800ec00 <tcp_output_segment>
 800ea3e:	4603      	mov	r3, r0
 800ea40:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800ea42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d009      	beq.n	800ea5e <tcp_output+0x232>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	7e9b      	ldrb	r3, [r3, #26]
 800ea4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ea52:	b2da      	uxtb	r2, r3
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	769a      	strb	r2, [r3, #26]
      return err;
 800ea58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea5c:	e0cc      	b.n	800ebf8 <tcp_output+0x3cc>
    }
    pcb->unsent = seg->next;
 800ea5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea60:	681a      	ldr	r2, [r3, #0]
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	7d1b      	ldrb	r3, [r3, #20]
 800ea6a:	2b02      	cmp	r3, #2
 800ea6c:	d006      	beq.n	800ea7c <tcp_output+0x250>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	7e9b      	ldrb	r3, [r3, #26]
 800ea72:	f023 0303 	bic.w	r3, r3, #3
 800ea76:	b2da      	uxtb	r2, r3
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800ea7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea7e:	68db      	ldr	r3, [r3, #12]
 800ea80:	685b      	ldr	r3, [r3, #4]
 800ea82:	4618      	mov	r0, r3
 800ea84:	f7f9 ffdf 	bl	8008a46 <lwip_htonl>
 800ea88:	4604      	mov	r4, r0
 800ea8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea8c:	891b      	ldrh	r3, [r3, #8]
 800ea8e:	461d      	mov	r5, r3
 800ea90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea92:	68db      	ldr	r3, [r3, #12]
 800ea94:	899b      	ldrh	r3, [r3, #12]
 800ea96:	b29b      	uxth	r3, r3
 800ea98:	4618      	mov	r0, r3
 800ea9a:	f7f9 ffc7 	bl	8008a2c <lwip_htons>
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	f003 0303 	and.w	r3, r3, #3
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d00b      	beq.n	800eac0 <tcp_output+0x294>
 800eaa8:	2301      	movs	r3, #1
 800eaaa:	e00a      	b.n	800eac2 <tcp_output+0x296>
 800eaac:	0801f340 	.word	0x0801f340
 800eab0:	0801f744 	.word	0x0801f744
 800eab4:	0801f3a4 	.word	0x0801f3a4
 800eab8:	2000b810 	.word	0x2000b810
 800eabc:	0801f76c 	.word	0x0801f76c
 800eac0:	2300      	movs	r3, #0
 800eac2:	442b      	add	r3, r5
 800eac4:	4423      	add	r3, r4
 800eac6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eacc:	68bb      	ldr	r3, [r7, #8]
 800eace:	1ad3      	subs	r3, r2, r3
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	da02      	bge.n	800eada <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	68ba      	ldr	r2, [r7, #8]
 800ead8:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800eada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eadc:	891b      	ldrh	r3, [r3, #8]
 800eade:	461c      	mov	r4, r3
 800eae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eae2:	68db      	ldr	r3, [r3, #12]
 800eae4:	899b      	ldrh	r3, [r3, #12]
 800eae6:	b29b      	uxth	r3, r3
 800eae8:	4618      	mov	r0, r3
 800eaea:	f7f9 ff9f 	bl	8008a2c <lwip_htons>
 800eaee:	4603      	mov	r3, r0
 800eaf0:	f003 0303 	and.w	r3, r3, #3
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d001      	beq.n	800eafc <tcp_output+0x2d0>
 800eaf8:	2301      	movs	r3, #1
 800eafa:	e000      	b.n	800eafe <tcp_output+0x2d2>
 800eafc:	2300      	movs	r3, #0
 800eafe:	4423      	add	r3, r4
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d049      	beq.n	800eb98 <tcp_output+0x36c>
      seg->next = NULL;
 800eb04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb06:	2200      	movs	r2, #0
 800eb08:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d105      	bne.n	800eb1e <tcp_output+0x2f2>
        pcb->unacked = seg;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb16:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 800eb18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb1a:	623b      	str	r3, [r7, #32]
 800eb1c:	e03f      	b.n	800eb9e <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800eb1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb20:	68db      	ldr	r3, [r3, #12]
 800eb22:	685b      	ldr	r3, [r3, #4]
 800eb24:	4618      	mov	r0, r3
 800eb26:	f7f9 ff8e 	bl	8008a46 <lwip_htonl>
 800eb2a:	4604      	mov	r4, r0
 800eb2c:	6a3b      	ldr	r3, [r7, #32]
 800eb2e:	68db      	ldr	r3, [r3, #12]
 800eb30:	685b      	ldr	r3, [r3, #4]
 800eb32:	4618      	mov	r0, r3
 800eb34:	f7f9 ff87 	bl	8008a46 <lwip_htonl>
 800eb38:	4603      	mov	r3, r0
 800eb3a:	1ae3      	subs	r3, r4, r3
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	da24      	bge.n	800eb8a <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	336c      	adds	r3, #108	; 0x6c
 800eb44:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800eb46:	e002      	b.n	800eb4e <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 800eb48:	69fb      	ldr	r3, [r7, #28]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800eb4e:	69fb      	ldr	r3, [r7, #28]
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d011      	beq.n	800eb7a <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800eb56:	69fb      	ldr	r3, [r7, #28]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	68db      	ldr	r3, [r3, #12]
 800eb5c:	685b      	ldr	r3, [r3, #4]
 800eb5e:	4618      	mov	r0, r3
 800eb60:	f7f9 ff71 	bl	8008a46 <lwip_htonl>
 800eb64:	4604      	mov	r4, r0
 800eb66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb68:	68db      	ldr	r3, [r3, #12]
 800eb6a:	685b      	ldr	r3, [r3, #4]
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	f7f9 ff6a 	bl	8008a46 <lwip_htonl>
 800eb72:	4603      	mov	r3, r0
 800eb74:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	dbe6      	blt.n	800eb48 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 800eb7a:	69fb      	ldr	r3, [r7, #28]
 800eb7c:	681a      	ldr	r2, [r3, #0]
 800eb7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb80:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800eb82:	69fb      	ldr	r3, [r7, #28]
 800eb84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb86:	601a      	str	r2, [r3, #0]
 800eb88:	e009      	b.n	800eb9e <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800eb8a:	6a3b      	ldr	r3, [r7, #32]
 800eb8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb8e:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800eb90:	6a3b      	ldr	r3, [r7, #32]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	623b      	str	r3, [r7, #32]
 800eb96:	e002      	b.n	800eb9e <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800eb98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eb9a:	f7fc fea6 	bl	800b8ea <tcp_seg_free>
    }
    seg = pcb->unsent;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eba2:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800eba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d015      	beq.n	800ebd6 <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800ebaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebac:	68db      	ldr	r3, [r3, #12]
 800ebae:	685b      	ldr	r3, [r3, #4]
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	f7f9 ff48 	bl	8008a46 <lwip_htonl>
 800ebb6:	4602      	mov	r2, r0
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ebbc:	1ad3      	subs	r3, r2, r3
 800ebbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebc0:	8912      	ldrh	r2, [r2, #8]
 800ebc2:	4413      	add	r3, r2
  while (seg != NULL &&
 800ebc4:	69ba      	ldr	r2, [r7, #24]
 800ebc6:	429a      	cmp	r2, r3
 800ebc8:	f4bf aedf 	bcs.w	800e98a <tcp_output+0x15e>
  }
output_done:
 800ebcc:	e003      	b.n	800ebd6 <tcp_output+0x3aa>
    goto output_done;
 800ebce:	bf00      	nop
 800ebd0:	e002      	b.n	800ebd8 <tcp_output+0x3ac>
      break;
 800ebd2:	bf00      	nop
 800ebd4:	e000      	b.n	800ebd8 <tcp_output+0x3ac>
output_done:
 800ebd6:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d103      	bne.n	800ebe8 <tcp_output+0x3bc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	7e9b      	ldrb	r3, [r3, #26]
 800ebec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ebf0:	b2da      	uxtb	r2, r3
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 800ebf6:	2300      	movs	r3, #0
}
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	3728      	adds	r7, #40	; 0x28
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	bdb0      	pop	{r4, r5, r7, pc}

0800ec00 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800ec00:	b5b0      	push	{r4, r5, r7, lr}
 800ec02:	b08c      	sub	sp, #48	; 0x30
 800ec04:	af04      	add	r7, sp, #16
 800ec06:	60f8      	str	r0, [r7, #12]
 800ec08:	60b9      	str	r1, [r7, #8]
 800ec0a:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	685b      	ldr	r3, [r3, #4]
 800ec10:	89db      	ldrh	r3, [r3, #14]
 800ec12:	2b01      	cmp	r3, #1
 800ec14:	d001      	beq.n	800ec1a <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 800ec16:	2300      	movs	r3, #0
 800ec18:	e08b      	b.n	800ed32 <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800ec1a:	68bb      	ldr	r3, [r7, #8]
 800ec1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	68dc      	ldr	r4, [r3, #12]
 800ec22:	4610      	mov	r0, r2
 800ec24:	f7f9 ff0f 	bl	8008a46 <lwip_htonl>
 800ec28:	4603      	mov	r3, r0
 800ec2a:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800ec2c:	68bb      	ldr	r3, [r7, #8]
 800ec2e:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	68dc      	ldr	r4, [r3, #12]
 800ec34:	4610      	mov	r0, r2
 800ec36:	f7f9 fef9 	bl	8008a2c <lwip_htons>
 800ec3a:	4603      	mov	r3, r0
 800ec3c:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800ec3e:	68bb      	ldr	r3, [r7, #8]
 800ec40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec42:	68ba      	ldr	r2, [r7, #8]
 800ec44:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800ec46:	441a      	add	r2, r3
 800ec48:	68bb      	ldr	r3, [r7, #8]
 800ec4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	68db      	ldr	r3, [r3, #12]
 800ec50:	3314      	adds	r3, #20
 800ec52:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	7a9b      	ldrb	r3, [r3, #10]
 800ec58:	f003 0301 	and.w	r3, r3, #1
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d014      	beq.n	800ec8a <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 800ec60:	68bb      	ldr	r3, [r7, #8]
 800ec62:	3304      	adds	r3, #4
 800ec64:	4619      	mov	r1, r3
 800ec66:	f44f 7006 	mov.w	r0, #536	; 0x218
 800ec6a:	f7fd f8a7 	bl	800bdbc <tcp_eff_send_mss_impl>
 800ec6e:	4603      	mov	r3, r0
 800ec70:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800ec72:	8b7b      	ldrh	r3, [r7, #26]
 800ec74:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800ec78:	4618      	mov	r0, r3
 800ec7a:	f7f9 fee4 	bl	8008a46 <lwip_htonl>
 800ec7e:	4602      	mov	r2, r0
 800ec80:	69fb      	ldr	r3, [r7, #28]
 800ec82:	601a      	str	r2, [r3, #0]
    opts += 1;
 800ec84:	69fb      	ldr	r3, [r7, #28]
 800ec86:	3304      	adds	r3, #4
 800ec88:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800ec8a:	68bb      	ldr	r3, [r7, #8]
 800ec8c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	da02      	bge.n	800ec9a <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 800ec94:	68bb      	ldr	r3, [r7, #8]
 800ec96:	2200      	movs	r2, #0
 800ec98:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800ec9a:	68bb      	ldr	r3, [r7, #8]
 800ec9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d10c      	bne.n	800ecbc <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 800eca2:	4b26      	ldr	r3, [pc, #152]	; (800ed3c <tcp_output_segment+0x13c>)
 800eca4:	681a      	ldr	r2, [r3, #0]
 800eca6:	68bb      	ldr	r3, [r7, #8]
 800eca8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	68db      	ldr	r3, [r3, #12]
 800ecae:	685b      	ldr	r3, [r3, #4]
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	f7f9 fec8 	bl	8008a46 <lwip_htonl>
 800ecb6:	4602      	mov	r2, r0
 800ecb8:	68bb      	ldr	r3, [r7, #8]
 800ecba:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	68db      	ldr	r3, [r3, #12]
 800ecc0:	461a      	mov	r2, r3
 800ecc2:	68fb      	ldr	r3, [r7, #12]
 800ecc4:	685b      	ldr	r3, [r3, #4]
 800ecc6:	685b      	ldr	r3, [r3, #4]
 800ecc8:	1ad3      	subs	r3, r2, r3
 800ecca:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	685b      	ldr	r3, [r3, #4]
 800ecd0:	8959      	ldrh	r1, [r3, #10]
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	685b      	ldr	r3, [r3, #4]
 800ecd6:	8b3a      	ldrh	r2, [r7, #24]
 800ecd8:	1a8a      	subs	r2, r1, r2
 800ecda:	b292      	uxth	r2, r2
 800ecdc:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	685b      	ldr	r3, [r3, #4]
 800ece2:	8919      	ldrh	r1, [r3, #8]
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	685b      	ldr	r3, [r3, #4]
 800ece8:	8b3a      	ldrh	r2, [r7, #24]
 800ecea:	1a8a      	subs	r2, r1, r2
 800ecec:	b292      	uxth	r2, r2
 800ecee:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	685b      	ldr	r3, [r3, #4]
 800ecf4:	68fa      	ldr	r2, [r7, #12]
 800ecf6:	68d2      	ldr	r2, [r2, #12]
 800ecf8:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	68db      	ldr	r3, [r3, #12]
 800ecfe:	2200      	movs	r2, #0
 800ed00:	741a      	strb	r2, [r3, #16]
 800ed02:	2200      	movs	r2, #0
 800ed04:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	6858      	ldr	r0, [r3, #4]
 800ed0a:	68b9      	ldr	r1, [r7, #8]
 800ed0c:	68bb      	ldr	r3, [r7, #8]
 800ed0e:	1d1c      	adds	r4, r3, #4
 800ed10:	68bb      	ldr	r3, [r7, #8]
 800ed12:	7a9d      	ldrb	r5, [r3, #10]
 800ed14:	68bb      	ldr	r3, [r7, #8]
 800ed16:	7a5b      	ldrb	r3, [r3, #9]
 800ed18:	687a      	ldr	r2, [r7, #4]
 800ed1a:	9202      	str	r2, [sp, #8]
 800ed1c:	2206      	movs	r2, #6
 800ed1e:	9201      	str	r2, [sp, #4]
 800ed20:	9300      	str	r3, [sp, #0]
 800ed22:	462b      	mov	r3, r5
 800ed24:	4622      	mov	r2, r4
 800ed26:	f004 f955 	bl	8012fd4 <ip4_output_if>
 800ed2a:	4603      	mov	r3, r0
 800ed2c:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 800ed2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ed32:	4618      	mov	r0, r3
 800ed34:	3720      	adds	r7, #32
 800ed36:	46bd      	mov	sp, r7
 800ed38:	bdb0      	pop	{r4, r5, r7, pc}
 800ed3a:	bf00      	nop
 800ed3c:	2000b800 	.word	0x2000b800

0800ed40 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 800ed40:	b580      	push	{r7, lr}
 800ed42:	b08c      	sub	sp, #48	; 0x30
 800ed44:	af04      	add	r7, sp, #16
 800ed46:	60f8      	str	r0, [r7, #12]
 800ed48:	60b9      	str	r1, [r7, #8]
 800ed4a:	607a      	str	r2, [r7, #4]
 800ed4c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 800ed4e:	2200      	movs	r2, #0
 800ed50:	2114      	movs	r1, #20
 800ed52:	2001      	movs	r0, #1
 800ed54:	f7fa ffb6 	bl	8009cc4 <pbuf_alloc>
 800ed58:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 800ed5a:	69fb      	ldr	r3, [r7, #28]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d05b      	beq.n	800ee18 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800ed60:	69fb      	ldr	r3, [r7, #28]
 800ed62:	895b      	ldrh	r3, [r3, #10]
 800ed64:	2b13      	cmp	r3, #19
 800ed66:	d806      	bhi.n	800ed76 <tcp_rst+0x36>
 800ed68:	4b2d      	ldr	r3, [pc, #180]	; (800ee20 <tcp_rst+0xe0>)
 800ed6a:	f240 524d 	movw	r2, #1357	; 0x54d
 800ed6e:	492d      	ldr	r1, [pc, #180]	; (800ee24 <tcp_rst+0xe4>)
 800ed70:	482d      	ldr	r0, [pc, #180]	; (800ee28 <tcp_rst+0xe8>)
 800ed72:	f00b fcd3 	bl	801a71c <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800ed76:	69fb      	ldr	r3, [r7, #28]
 800ed78:	685b      	ldr	r3, [r3, #4]
 800ed7a:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 800ed7c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ed7e:	4618      	mov	r0, r3
 800ed80:	f7f9 fe54 	bl	8008a2c <lwip_htons>
 800ed84:	4603      	mov	r3, r0
 800ed86:	461a      	mov	r2, r3
 800ed88:	69bb      	ldr	r3, [r7, #24]
 800ed8a:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 800ed8c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ed8e:	4618      	mov	r0, r3
 800ed90:	f7f9 fe4c 	bl	8008a2c <lwip_htons>
 800ed94:	4603      	mov	r3, r0
 800ed96:	461a      	mov	r2, r3
 800ed98:	69bb      	ldr	r3, [r7, #24]
 800ed9a:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 800ed9c:	68f8      	ldr	r0, [r7, #12]
 800ed9e:	f7f9 fe52 	bl	8008a46 <lwip_htonl>
 800eda2:	4602      	mov	r2, r0
 800eda4:	69bb      	ldr	r3, [r7, #24]
 800eda6:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 800eda8:	68b8      	ldr	r0, [r7, #8]
 800edaa:	f7f9 fe4c 	bl	8008a46 <lwip_htonl>
 800edae:	4602      	mov	r2, r0
 800edb0:	69bb      	ldr	r3, [r7, #24]
 800edb2:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800edb4:	f245 0014 	movw	r0, #20500	; 0x5014
 800edb8:	f7f9 fe38 	bl	8008a2c <lwip_htons>
 800edbc:	4603      	mov	r3, r0
 800edbe:	461a      	mov	r2, r3
 800edc0:	69bb      	ldr	r3, [r7, #24]
 800edc2:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800edc4:	69bb      	ldr	r3, [r7, #24]
 800edc6:	2200      	movs	r2, #0
 800edc8:	f042 0208 	orr.w	r2, r2, #8
 800edcc:	739a      	strb	r2, [r3, #14]
 800edce:	2200      	movs	r2, #0
 800edd0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800edd4:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 800edd6:	69bb      	ldr	r3, [r7, #24]
 800edd8:	2200      	movs	r2, #0
 800edda:	741a      	strb	r2, [r3, #16]
 800eddc:	2200      	movs	r2, #0
 800edde:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 800ede0:	69bb      	ldr	r3, [r7, #24]
 800ede2:	2200      	movs	r2, #0
 800ede4:	749a      	strb	r2, [r3, #18]
 800ede6:	2200      	movs	r2, #0
 800ede8:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 800edea:	6838      	ldr	r0, [r7, #0]
 800edec:	f003 ff2c 	bl	8012c48 <ip4_route>
 800edf0:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 800edf2:	697b      	ldr	r3, [r7, #20]
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d00b      	beq.n	800ee10 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 800edf8:	697b      	ldr	r3, [r7, #20]
 800edfa:	9302      	str	r3, [sp, #8]
 800edfc:	2306      	movs	r3, #6
 800edfe:	9301      	str	r3, [sp, #4]
 800ee00:	2300      	movs	r3, #0
 800ee02:	9300      	str	r3, [sp, #0]
 800ee04:	23ff      	movs	r3, #255	; 0xff
 800ee06:	683a      	ldr	r2, [r7, #0]
 800ee08:	6879      	ldr	r1, [r7, #4]
 800ee0a:	69f8      	ldr	r0, [r7, #28]
 800ee0c:	f004 f8e2 	bl	8012fd4 <ip4_output_if>
  }
  pbuf_free(p);
 800ee10:	69f8      	ldr	r0, [r7, #28]
 800ee12:	f7fb fac9 	bl	800a3a8 <pbuf_free>
 800ee16:	e000      	b.n	800ee1a <tcp_rst+0xda>
    return;
 800ee18:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800ee1a:	3720      	adds	r7, #32
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	bd80      	pop	{r7, pc}
 800ee20:	0801f340 	.word	0x0801f340
 800ee24:	0801f374 	.word	0x0801f374
 800ee28:	0801f3a4 	.word	0x0801f3a4

0800ee2c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800ee2c:	b580      	push	{r7, lr}
 800ee2e:	b084      	sub	sp, #16
 800ee30:	af00      	add	r7, sp, #0
 800ee32:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d029      	beq.n	800ee90 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee40:	60fb      	str	r3, [r7, #12]
 800ee42:	e002      	b.n	800ee4a <tcp_rexmit_rto+0x1e>
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	60fb      	str	r3, [r7, #12]
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d1f8      	bne.n	800ee44 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	2200      	movs	r2, #0
 800ee66:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ee6e:	2bff      	cmp	r3, #255	; 0xff
 800ee70:	d007      	beq.n	800ee82 <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ee78:	3301      	adds	r3, #1
 800ee7a:	b2da      	uxtb	r2, r3
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	2200      	movs	r2, #0
 800ee86:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 800ee88:	6878      	ldr	r0, [r7, #4]
 800ee8a:	f7ff fccf 	bl	800e82c <tcp_output>
 800ee8e:	e000      	b.n	800ee92 <tcp_rexmit_rto+0x66>
    return;
 800ee90:	bf00      	nop
}
 800ee92:	3710      	adds	r7, #16
 800ee94:	46bd      	mov	sp, r7
 800ee96:	bd80      	pop	{r7, pc}

0800ee98 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 800ee98:	b590      	push	{r4, r7, lr}
 800ee9a:	b085      	sub	sp, #20
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d043      	beq.n	800ef30 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eeac:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 800eeae:	68bb      	ldr	r3, [r7, #8]
 800eeb0:	681a      	ldr	r2, [r3, #0]
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	3368      	adds	r3, #104	; 0x68
 800eeba:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800eebc:	e002      	b.n	800eec4 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d011      	beq.n	800eef0 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	68db      	ldr	r3, [r3, #12]
 800eed2:	685b      	ldr	r3, [r3, #4]
 800eed4:	4618      	mov	r0, r3
 800eed6:	f7f9 fdb6 	bl	8008a46 <lwip_htonl>
 800eeda:	4604      	mov	r4, r0
 800eedc:	68bb      	ldr	r3, [r7, #8]
 800eede:	68db      	ldr	r3, [r3, #12]
 800eee0:	685b      	ldr	r3, [r3, #4]
 800eee2:	4618      	mov	r0, r3
 800eee4:	f7f9 fdaf 	bl	8008a46 <lwip_htonl>
 800eee8:	4603      	mov	r3, r0
 800eeea:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	dbe6      	blt.n	800eebe <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	681a      	ldr	r2, [r3, #0]
 800eef4:	68bb      	ldr	r3, [r7, #8]
 800eef6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	68ba      	ldr	r2, [r7, #8]
 800eefc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800eefe:	68bb      	ldr	r3, [r7, #8]
 800ef00:	681b      	ldr	r3, [r3, #0]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d103      	bne.n	800ef0e <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	2200      	movs	r2, #0
 800ef0a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ef14:	2bff      	cmp	r3, #255	; 0xff
 800ef16:	d007      	beq.n	800ef28 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ef1e:	3301      	adds	r3, #1
 800ef20:	b2da      	uxtb	r2, r3
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	2200      	movs	r2, #0
 800ef2c:	635a      	str	r2, [r3, #52]	; 0x34
 800ef2e:	e000      	b.n	800ef32 <tcp_rexmit+0x9a>
    return;
 800ef30:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 800ef32:	3714      	adds	r7, #20
 800ef34:	46bd      	mov	sp, r7
 800ef36:	bd90      	pop	{r4, r7, pc}

0800ef38 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b082      	sub	sp, #8
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d04a      	beq.n	800efde <tcp_rexmit_fast+0xa6>
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	7e9b      	ldrb	r3, [r3, #26]
 800ef4c:	f003 0304 	and.w	r3, r3, #4
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d144      	bne.n	800efde <tcp_rexmit_fast+0xa6>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800ef54:	6878      	ldr	r0, [r7, #4]
 800ef56:	f7ff ff9f 	bl	800ee98 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ef66:	429a      	cmp	r2, r3
 800ef68:	d207      	bcs.n	800ef7a <tcp_rexmit_fast+0x42>
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ef70:	0fda      	lsrs	r2, r3, #31
 800ef72:	4413      	add	r3, r2
 800ef74:	105b      	asrs	r3, r3, #1
 800ef76:	b29b      	uxth	r3, r3
 800ef78:	e006      	b.n	800ef88 <tcp_rexmit_fast+0x50>
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ef80:	0fda      	lsrs	r2, r3, #31
 800ef82:	4413      	add	r3, r2
 800ef84:	105b      	asrs	r3, r3, #1
 800ef86:	b29b      	uxth	r3, r3
 800ef88:	687a      	ldr	r2, [r7, #4]
 800ef8a:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ef94:	461a      	mov	r2, r3
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ef9a:	005b      	lsls	r3, r3, #1
 800ef9c:	429a      	cmp	r2, r3
 800ef9e:	d206      	bcs.n	800efae <tcp_rexmit_fast+0x76>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800efa4:	005b      	lsls	r3, r3, #1
 800efa6:	b29a      	uxth	r2, r3
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800efb8:	4619      	mov	r1, r3
 800efba:	0049      	lsls	r1, r1, #1
 800efbc:	440b      	add	r3, r1
 800efbe:	b29b      	uxth	r3, r3
 800efc0:	4413      	add	r3, r2
 800efc2:	b29a      	uxth	r2, r3
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	7e9b      	ldrb	r3, [r3, #26]
 800efce:	f043 0304 	orr.w	r3, r3, #4
 800efd2:	b2da      	uxtb	r2, r3
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	2200      	movs	r2, #0
 800efdc:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 800efde:	bf00      	nop
 800efe0:	3708      	adds	r7, #8
 800efe2:	46bd      	mov	sp, r7
 800efe4:	bd80      	pop	{r7, pc}

0800efe6 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800efe6:	b580      	push	{r7, lr}
 800efe8:	b08a      	sub	sp, #40	; 0x28
 800efea:	af04      	add	r7, sp, #16
 800efec:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eff2:	3b01      	subs	r3, #1
 800eff4:	4618      	mov	r0, r3
 800eff6:	f7f9 fd26 	bl	8008a46 <lwip_htonl>
 800effa:	4603      	mov	r3, r0
 800effc:	2200      	movs	r2, #0
 800effe:	2100      	movs	r1, #0
 800f000:	6878      	ldr	r0, [r7, #4]
 800f002:	f7ff f977 	bl	800e2f4 <tcp_output_alloc_header>
 800f006:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f008:	693b      	ldr	r3, [r7, #16]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d102      	bne.n	800f014 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800f00e:	f04f 33ff 	mov.w	r3, #4294967295
 800f012:	e021      	b.n	800f058 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	3304      	adds	r3, #4
 800f018:	4618      	mov	r0, r3
 800f01a:	f003 fe15 	bl	8012c48 <ip4_route>
 800f01e:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	2b00      	cmp	r3, #0
 800f024:	d102      	bne.n	800f02c <tcp_keepalive+0x46>
    err = ERR_RTE;
 800f026:	23fc      	movs	r3, #252	; 0xfc
 800f028:	75fb      	strb	r3, [r7, #23]
 800f02a:	e010      	b.n	800f04e <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800f02c:	6879      	ldr	r1, [r7, #4]
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	1d1a      	adds	r2, r3, #4
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	7a98      	ldrb	r0, [r3, #10]
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	9302      	str	r3, [sp, #8]
 800f03a:	2306      	movs	r3, #6
 800f03c:	9301      	str	r3, [sp, #4]
 800f03e:	2300      	movs	r3, #0
 800f040:	9300      	str	r3, [sp, #0]
 800f042:	4603      	mov	r3, r0
 800f044:	6938      	ldr	r0, [r7, #16]
 800f046:	f003 ffc5 	bl	8012fd4 <ip4_output_if>
 800f04a:	4603      	mov	r3, r0
 800f04c:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800f04e:	6938      	ldr	r0, [r7, #16]
 800f050:	f7fb f9aa 	bl	800a3a8 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f054:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f058:	4618      	mov	r0, r3
 800f05a:	3718      	adds	r7, #24
 800f05c:	46bd      	mov	sp, r7
 800f05e:	bd80      	pop	{r7, pc}

0800f060 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800f060:	b590      	push	{r4, r7, lr}
 800f062:	b08f      	sub	sp, #60	; 0x3c
 800f064:	af04      	add	r7, sp, #16
 800f066:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f06c:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 800f06e:	6a3b      	ldr	r3, [r7, #32]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d102      	bne.n	800f07a <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f078:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 800f07a:	6a3b      	ldr	r3, [r7, #32]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d101      	bne.n	800f084 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 800f080:	2300      	movs	r3, #0
 800f082:	e085      	b.n	800f190 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800f084:	6a3b      	ldr	r3, [r7, #32]
 800f086:	68db      	ldr	r3, [r3, #12]
 800f088:	899b      	ldrh	r3, [r3, #12]
 800f08a:	b29b      	uxth	r3, r3
 800f08c:	4618      	mov	r0, r3
 800f08e:	f7f9 fccd 	bl	8008a2c <lwip_htons>
 800f092:	4603      	mov	r3, r0
 800f094:	f003 0301 	and.w	r3, r3, #1
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d005      	beq.n	800f0a8 <tcp_zero_window_probe+0x48>
 800f09c:	6a3b      	ldr	r3, [r7, #32]
 800f09e:	891b      	ldrh	r3, [r3, #8]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d101      	bne.n	800f0a8 <tcp_zero_window_probe+0x48>
 800f0a4:	2301      	movs	r3, #1
 800f0a6:	e000      	b.n	800f0aa <tcp_zero_window_probe+0x4a>
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800f0ac:	7ffb      	ldrb	r3, [r7, #31]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	bf0c      	ite	eq
 800f0b2:	2301      	moveq	r3, #1
 800f0b4:	2300      	movne	r3, #0
 800f0b6:	b2db      	uxtb	r3, r3
 800f0b8:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800f0ba:	6a3b      	ldr	r3, [r7, #32]
 800f0bc:	68db      	ldr	r3, [r3, #12]
 800f0be:	685b      	ldr	r3, [r3, #4]
 800f0c0:	8bba      	ldrh	r2, [r7, #28]
 800f0c2:	2100      	movs	r1, #0
 800f0c4:	6878      	ldr	r0, [r7, #4]
 800f0c6:	f7ff f915 	bl	800e2f4 <tcp_output_alloc_header>
 800f0ca:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800f0cc:	69bb      	ldr	r3, [r7, #24]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d102      	bne.n	800f0d8 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800f0d2:	f04f 33ff 	mov.w	r3, #4294967295
 800f0d6:	e05b      	b.n	800f190 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800f0d8:	69bb      	ldr	r3, [r7, #24]
 800f0da:	685b      	ldr	r3, [r3, #4]
 800f0dc:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800f0de:	7ffb      	ldrb	r3, [r7, #31]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d00e      	beq.n	800f102 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800f0e4:	697b      	ldr	r3, [r7, #20]
 800f0e6:	899b      	ldrh	r3, [r3, #12]
 800f0e8:	b29b      	uxth	r3, r3
 800f0ea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f0ee:	b29c      	uxth	r4, r3
 800f0f0:	2011      	movs	r0, #17
 800f0f2:	f7f9 fc9b 	bl	8008a2c <lwip_htons>
 800f0f6:	4603      	mov	r3, r0
 800f0f8:	4323      	orrs	r3, r4
 800f0fa:	b29a      	uxth	r2, r3
 800f0fc:	697b      	ldr	r3, [r7, #20]
 800f0fe:	819a      	strh	r2, [r3, #12]
 800f100:	e010      	b.n	800f124 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800f102:	69bb      	ldr	r3, [r7, #24]
 800f104:	685b      	ldr	r3, [r3, #4]
 800f106:	3314      	adds	r3, #20
 800f108:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800f10a:	6a3b      	ldr	r3, [r7, #32]
 800f10c:	6858      	ldr	r0, [r3, #4]
 800f10e:	6a3b      	ldr	r3, [r7, #32]
 800f110:	685b      	ldr	r3, [r3, #4]
 800f112:	891a      	ldrh	r2, [r3, #8]
 800f114:	6a3b      	ldr	r3, [r7, #32]
 800f116:	891b      	ldrh	r3, [r3, #8]
 800f118:	1ad3      	subs	r3, r2, r3
 800f11a:	b29b      	uxth	r3, r3
 800f11c:	2201      	movs	r2, #1
 800f11e:	6939      	ldr	r1, [r7, #16]
 800f120:	f7fb fb4c 	bl	800a7bc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800f124:	6a3b      	ldr	r3, [r7, #32]
 800f126:	68db      	ldr	r3, [r3, #12]
 800f128:	685b      	ldr	r3, [r3, #4]
 800f12a:	4618      	mov	r0, r3
 800f12c:	f7f9 fc8b 	bl	8008a46 <lwip_htonl>
 800f130:	4603      	mov	r3, r0
 800f132:	3301      	adds	r3, #1
 800f134:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	1ad3      	subs	r3, r2, r3
 800f13e:	2b00      	cmp	r3, #0
 800f140:	da02      	bge.n	800f148 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	68fa      	ldr	r2, [r7, #12]
 800f146:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	3304      	adds	r3, #4
 800f14c:	4618      	mov	r0, r3
 800f14e:	f003 fd7b 	bl	8012c48 <ip4_route>
 800f152:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 800f154:	68bb      	ldr	r3, [r7, #8]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d103      	bne.n	800f162 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 800f15a:	23fc      	movs	r3, #252	; 0xfc
 800f15c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f160:	e011      	b.n	800f186 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800f162:	6879      	ldr	r1, [r7, #4]
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	1d1a      	adds	r2, r3, #4
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	7a98      	ldrb	r0, [r3, #10]
 800f16c:	68bb      	ldr	r3, [r7, #8]
 800f16e:	9302      	str	r3, [sp, #8]
 800f170:	2306      	movs	r3, #6
 800f172:	9301      	str	r3, [sp, #4]
 800f174:	2300      	movs	r3, #0
 800f176:	9300      	str	r3, [sp, #0]
 800f178:	4603      	mov	r3, r0
 800f17a:	69b8      	ldr	r0, [r7, #24]
 800f17c:	f003 ff2a 	bl	8012fd4 <ip4_output_if>
 800f180:	4603      	mov	r3, r0
 800f182:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800f186:	69b8      	ldr	r0, [r7, #24]
 800f188:	f7fb f90e 	bl	800a3a8 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800f18c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f190:	4618      	mov	r0, r3
 800f192:	372c      	adds	r7, #44	; 0x2c
 800f194:	46bd      	mov	sp, r7
 800f196:	bd90      	pop	{r4, r7, pc}

0800f198 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800f198:	b580      	push	{r7, lr}
 800f19a:	b082      	sub	sp, #8
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800f1a0:	f7fb fcce 	bl	800ab40 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800f1a4:	4b0a      	ldr	r3, [pc, #40]	; (800f1d0 <tcpip_tcp_timer+0x38>)
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d103      	bne.n	800f1b4 <tcpip_tcp_timer+0x1c>
 800f1ac:	4b09      	ldr	r3, [pc, #36]	; (800f1d4 <tcpip_tcp_timer+0x3c>)
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d005      	beq.n	800f1c0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	4908      	ldr	r1, [pc, #32]	; (800f1d8 <tcpip_tcp_timer+0x40>)
 800f1b8:	20fa      	movs	r0, #250	; 0xfa
 800f1ba:	f000 f86f 	bl	800f29c <sys_timeout>
 800f1be:	e002      	b.n	800f1c6 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800f1c0:	4b06      	ldr	r3, [pc, #24]	; (800f1dc <tcpip_tcp_timer+0x44>)
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	601a      	str	r2, [r3, #0]
  }
}
 800f1c6:	bf00      	nop
 800f1c8:	3708      	adds	r7, #8
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	bd80      	pop	{r7, pc}
 800f1ce:	bf00      	nop
 800f1d0:	2000b7fc 	.word	0x2000b7fc
 800f1d4:	2000b80c 	.word	0x2000b80c
 800f1d8:	0800f199 	.word	0x0800f199
 800f1dc:	20004c3c 	.word	0x20004c3c

0800f1e0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800f1e4:	4b0a      	ldr	r3, [pc, #40]	; (800f210 <tcp_timer_needed+0x30>)
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d10f      	bne.n	800f20c <tcp_timer_needed+0x2c>
 800f1ec:	4b09      	ldr	r3, [pc, #36]	; (800f214 <tcp_timer_needed+0x34>)
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d103      	bne.n	800f1fc <tcp_timer_needed+0x1c>
 800f1f4:	4b08      	ldr	r3, [pc, #32]	; (800f218 <tcp_timer_needed+0x38>)
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d007      	beq.n	800f20c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800f1fc:	4b04      	ldr	r3, [pc, #16]	; (800f210 <tcp_timer_needed+0x30>)
 800f1fe:	2201      	movs	r2, #1
 800f200:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800f202:	2200      	movs	r2, #0
 800f204:	4905      	ldr	r1, [pc, #20]	; (800f21c <tcp_timer_needed+0x3c>)
 800f206:	20fa      	movs	r0, #250	; 0xfa
 800f208:	f000 f848 	bl	800f29c <sys_timeout>
  }
}
 800f20c:	bf00      	nop
 800f20e:	bd80      	pop	{r7, pc}
 800f210:	20004c3c 	.word	0x20004c3c
 800f214:	2000b7fc 	.word	0x2000b7fc
 800f218:	2000b80c 	.word	0x2000b80c
 800f21c:	0800f199 	.word	0x0800f199

0800f220 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 800f220:	b580      	push	{r7, lr}
 800f222:	b084      	sub	sp, #16
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	685b      	ldr	r3, [r3, #4]
 800f230:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	687a      	ldr	r2, [r7, #4]
 800f238:	4903      	ldr	r1, [pc, #12]	; (800f248 <cyclic_timer+0x28>)
 800f23a:	4618      	mov	r0, r3
 800f23c:	f000 f82e 	bl	800f29c <sys_timeout>
}
 800f240:	bf00      	nop
 800f242:	3710      	adds	r7, #16
 800f244:	46bd      	mov	sp, r7
 800f246:	bd80      	pop	{r7, pc}
 800f248:	0800f221 	.word	0x0800f221

0800f24c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800f24c:	b580      	push	{r7, lr}
 800f24e:	b082      	sub	sp, #8
 800f250:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f252:	2301      	movs	r3, #1
 800f254:	607b      	str	r3, [r7, #4]
 800f256:	e00e      	b.n	800f276 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800f258:	4a0d      	ldr	r2, [pc, #52]	; (800f290 <sys_timeouts_init+0x44>)
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	00db      	lsls	r3, r3, #3
 800f264:	4a0a      	ldr	r2, [pc, #40]	; (800f290 <sys_timeouts_init+0x44>)
 800f266:	4413      	add	r3, r2
 800f268:	461a      	mov	r2, r3
 800f26a:	490a      	ldr	r1, [pc, #40]	; (800f294 <sys_timeouts_init+0x48>)
 800f26c:	f000 f816 	bl	800f29c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	3301      	adds	r3, #1
 800f274:	607b      	str	r3, [r7, #4]
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	2b05      	cmp	r3, #5
 800f27a:	d9ed      	bls.n	800f258 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 800f27c:	f7f5 fe5a 	bl	8004f34 <sys_now>
 800f280:	4602      	mov	r2, r0
 800f282:	4b05      	ldr	r3, [pc, #20]	; (800f298 <sys_timeouts_init+0x4c>)
 800f284:	601a      	str	r2, [r3, #0]
}
 800f286:	bf00      	nop
 800f288:	3708      	adds	r7, #8
 800f28a:	46bd      	mov	sp, r7
 800f28c:	bd80      	pop	{r7, pc}
 800f28e:	bf00      	nop
 800f290:	08021ce8 	.word	0x08021ce8
 800f294:	0800f221 	.word	0x0800f221
 800f298:	20004c38 	.word	0x20004c38

0800f29c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800f29c:	b580      	push	{r7, lr}
 800f29e:	b088      	sub	sp, #32
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	60f8      	str	r0, [r7, #12]
 800f2a4:	60b9      	str	r1, [r7, #8]
 800f2a6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800f2a8:	200a      	movs	r0, #10
 800f2aa:	f7fa fa6f 	bl	800978c <memp_malloc>
 800f2ae:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 800f2b0:	697b      	ldr	r3, [r7, #20]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d10a      	bne.n	800f2cc <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800f2b6:	697b      	ldr	r3, [r7, #20]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	f040 8084 	bne.w	800f3c6 <sys_timeout+0x12a>
 800f2be:	4b44      	ldr	r3, [pc, #272]	; (800f3d0 <sys_timeout+0x134>)
 800f2c0:	22d4      	movs	r2, #212	; 0xd4
 800f2c2:	4944      	ldr	r1, [pc, #272]	; (800f3d4 <sys_timeout+0x138>)
 800f2c4:	4844      	ldr	r0, [pc, #272]	; (800f3d8 <sys_timeout+0x13c>)
 800f2c6:	f00b fa29 	bl	801a71c <iprintf>
    return;
 800f2ca:	e07c      	b.n	800f3c6 <sys_timeout+0x12a>
  }

  now = sys_now();
 800f2cc:	f7f5 fe32 	bl	8004f34 <sys_now>
 800f2d0:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 800f2d2:	4b42      	ldr	r3, [pc, #264]	; (800f3dc <sys_timeout+0x140>)
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d105      	bne.n	800f2e6 <sys_timeout+0x4a>
    diff = 0;
 800f2da:	2300      	movs	r3, #0
 800f2dc:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 800f2de:	4a40      	ldr	r2, [pc, #256]	; (800f3e0 <sys_timeout+0x144>)
 800f2e0:	693b      	ldr	r3, [r7, #16]
 800f2e2:	6013      	str	r3, [r2, #0]
 800f2e4:	e004      	b.n	800f2f0 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 800f2e6:	4b3e      	ldr	r3, [pc, #248]	; (800f3e0 <sys_timeout+0x144>)
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	693a      	ldr	r2, [r7, #16]
 800f2ec:	1ad3      	subs	r3, r2, r3
 800f2ee:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 800f2f0:	697b      	ldr	r3, [r7, #20]
 800f2f2:	2200      	movs	r2, #0
 800f2f4:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800f2f6:	697b      	ldr	r3, [r7, #20]
 800f2f8:	68ba      	ldr	r2, [r7, #8]
 800f2fa:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800f2fc:	697b      	ldr	r3, [r7, #20]
 800f2fe:	687a      	ldr	r2, [r7, #4]
 800f300:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 800f302:	68fa      	ldr	r2, [r7, #12]
 800f304:	69bb      	ldr	r3, [r7, #24]
 800f306:	441a      	add	r2, r3
 800f308:	697b      	ldr	r3, [r7, #20]
 800f30a:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800f30c:	4b33      	ldr	r3, [pc, #204]	; (800f3dc <sys_timeout+0x140>)
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	2b00      	cmp	r3, #0
 800f312:	d103      	bne.n	800f31c <sys_timeout+0x80>
    next_timeout = timeout;
 800f314:	4a31      	ldr	r2, [pc, #196]	; (800f3dc <sys_timeout+0x140>)
 800f316:	697b      	ldr	r3, [r7, #20]
 800f318:	6013      	str	r3, [r2, #0]
    return;
 800f31a:	e055      	b.n	800f3c8 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 800f31c:	4b2f      	ldr	r3, [pc, #188]	; (800f3dc <sys_timeout+0x140>)
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	685b      	ldr	r3, [r3, #4]
 800f322:	68fa      	ldr	r2, [r7, #12]
 800f324:	429a      	cmp	r2, r3
 800f326:	d20f      	bcs.n	800f348 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 800f328:	4b2c      	ldr	r3, [pc, #176]	; (800f3dc <sys_timeout+0x140>)
 800f32a:	681b      	ldr	r3, [r3, #0]
 800f32c:	6859      	ldr	r1, [r3, #4]
 800f32e:	4b2b      	ldr	r3, [pc, #172]	; (800f3dc <sys_timeout+0x140>)
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	68fa      	ldr	r2, [r7, #12]
 800f334:	1a8a      	subs	r2, r1, r2
 800f336:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 800f338:	4b28      	ldr	r3, [pc, #160]	; (800f3dc <sys_timeout+0x140>)
 800f33a:	681a      	ldr	r2, [r3, #0]
 800f33c:	697b      	ldr	r3, [r7, #20]
 800f33e:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800f340:	4a26      	ldr	r2, [pc, #152]	; (800f3dc <sys_timeout+0x140>)
 800f342:	697b      	ldr	r3, [r7, #20]
 800f344:	6013      	str	r3, [r2, #0]
 800f346:	e03f      	b.n	800f3c8 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800f348:	4b24      	ldr	r3, [pc, #144]	; (800f3dc <sys_timeout+0x140>)
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	61fb      	str	r3, [r7, #28]
 800f34e:	e036      	b.n	800f3be <sys_timeout+0x122>
      timeout->time -= t->time;
 800f350:	697b      	ldr	r3, [r7, #20]
 800f352:	685a      	ldr	r2, [r3, #4]
 800f354:	69fb      	ldr	r3, [r7, #28]
 800f356:	685b      	ldr	r3, [r3, #4]
 800f358:	1ad2      	subs	r2, r2, r3
 800f35a:	697b      	ldr	r3, [r7, #20]
 800f35c:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800f35e:	69fb      	ldr	r3, [r7, #28]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d006      	beq.n	800f374 <sys_timeout+0xd8>
 800f366:	69fb      	ldr	r3, [r7, #28]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	685a      	ldr	r2, [r3, #4]
 800f36c:	697b      	ldr	r3, [r7, #20]
 800f36e:	685b      	ldr	r3, [r3, #4]
 800f370:	429a      	cmp	r2, r3
 800f372:	d921      	bls.n	800f3b8 <sys_timeout+0x11c>
        if (t->next != NULL) {
 800f374:	69fb      	ldr	r3, [r7, #28]
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d009      	beq.n	800f390 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 800f37c:	69fb      	ldr	r3, [r7, #28]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	6859      	ldr	r1, [r3, #4]
 800f382:	697b      	ldr	r3, [r7, #20]
 800f384:	685a      	ldr	r2, [r3, #4]
 800f386:	69fb      	ldr	r3, [r7, #28]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	1a8a      	subs	r2, r1, r2
 800f38c:	605a      	str	r2, [r3, #4]
 800f38e:	e00b      	b.n	800f3a8 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 800f390:	697b      	ldr	r3, [r7, #20]
 800f392:	685b      	ldr	r3, [r3, #4]
 800f394:	68fa      	ldr	r2, [r7, #12]
 800f396:	429a      	cmp	r2, r3
 800f398:	d206      	bcs.n	800f3a8 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 800f39a:	4b10      	ldr	r3, [pc, #64]	; (800f3dc <sys_timeout+0x140>)
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	685a      	ldr	r2, [r3, #4]
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	441a      	add	r2, r3
 800f3a4:	697b      	ldr	r3, [r7, #20]
 800f3a6:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 800f3a8:	69fb      	ldr	r3, [r7, #28]
 800f3aa:	681a      	ldr	r2, [r3, #0]
 800f3ac:	697b      	ldr	r3, [r7, #20]
 800f3ae:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800f3b0:	69fb      	ldr	r3, [r7, #28]
 800f3b2:	697a      	ldr	r2, [r7, #20]
 800f3b4:	601a      	str	r2, [r3, #0]
        break;
 800f3b6:	e007      	b.n	800f3c8 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 800f3b8:	69fb      	ldr	r3, [r7, #28]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	61fb      	str	r3, [r7, #28]
 800f3be:	69fb      	ldr	r3, [r7, #28]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d1c5      	bne.n	800f350 <sys_timeout+0xb4>
 800f3c4:	e000      	b.n	800f3c8 <sys_timeout+0x12c>
    return;
 800f3c6:	bf00      	nop
      }
    }
  }
}
 800f3c8:	3720      	adds	r7, #32
 800f3ca:	46bd      	mov	sp, r7
 800f3cc:	bd80      	pop	{r7, pc}
 800f3ce:	bf00      	nop
 800f3d0:	0801f784 	.word	0x0801f784
 800f3d4:	0801f7b8 	.word	0x0801f7b8
 800f3d8:	0801f7f8 	.word	0x0801f7f8
 800f3dc:	20004c34 	.word	0x20004c34
 800f3e0:	20004c38 	.word	0x20004c38

0800f3e4 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b086      	sub	sp, #24
 800f3e8:	af00      	add	r7, sp, #0
  if (next_timeout) {
 800f3ea:	4b24      	ldr	r3, [pc, #144]	; (800f47c <sys_check_timeouts+0x98>)
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d03f      	beq.n	800f472 <sys_check_timeouts+0x8e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 800f3f2:	f7f5 fd9f 	bl	8004f34 <sys_now>
 800f3f6:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 800f3f8:	4b21      	ldr	r3, [pc, #132]	; (800f480 <sys_check_timeouts+0x9c>)
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	68fa      	ldr	r2, [r7, #12]
 800f3fe:	1ad3      	subs	r3, r2, r3
 800f400:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 800f402:	2300      	movs	r3, #0
 800f404:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 800f406:	4b1d      	ldr	r3, [pc, #116]	; (800f47c <sys_check_timeouts+0x98>)
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800f40c:	68bb      	ldr	r3, [r7, #8]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d02c      	beq.n	800f46c <sys_check_timeouts+0x88>
 800f412:	68bb      	ldr	r3, [r7, #8]
 800f414:	685b      	ldr	r3, [r3, #4]
 800f416:	697a      	ldr	r2, [r7, #20]
 800f418:	429a      	cmp	r2, r3
 800f41a:	d327      	bcc.n	800f46c <sys_check_timeouts+0x88>
        /* timeout has expired */
        had_one = 1;
 800f41c:	2301      	movs	r3, #1
 800f41e:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 800f420:	68bb      	ldr	r3, [r7, #8]
 800f422:	685a      	ldr	r2, [r3, #4]
 800f424:	4b16      	ldr	r3, [pc, #88]	; (800f480 <sys_check_timeouts+0x9c>)
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	4413      	add	r3, r2
 800f42a:	4a15      	ldr	r2, [pc, #84]	; (800f480 <sys_check_timeouts+0x9c>)
 800f42c:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 800f42e:	68bb      	ldr	r3, [r7, #8]
 800f430:	685b      	ldr	r3, [r3, #4]
 800f432:	697a      	ldr	r2, [r7, #20]
 800f434:	1ad3      	subs	r3, r2, r3
 800f436:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 800f438:	68bb      	ldr	r3, [r7, #8]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	4a0f      	ldr	r2, [pc, #60]	; (800f47c <sys_check_timeouts+0x98>)
 800f43e:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 800f440:	68bb      	ldr	r3, [r7, #8]
 800f442:	689b      	ldr	r3, [r3, #8]
 800f444:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 800f446:	68bb      	ldr	r3, [r7, #8]
 800f448:	68db      	ldr	r3, [r3, #12]
 800f44a:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800f44c:	68b9      	ldr	r1, [r7, #8]
 800f44e:	200a      	movs	r0, #10
 800f450:	f7fa f9ee 	bl	8009830 <memp_free>
        if (handler != NULL) {
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d008      	beq.n	800f46c <sys_check_timeouts+0x88>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
 800f45a:	480a      	ldr	r0, [pc, #40]	; (800f484 <sys_check_timeouts+0xa0>)
 800f45c:	f004 ff7e 	bl	801435c <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	6838      	ldr	r0, [r7, #0]
 800f464:	4798      	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
 800f466:	4807      	ldr	r0, [pc, #28]	; (800f484 <sys_check_timeouts+0xa0>)
 800f468:	f004 ff87 	bl	801437a <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 800f46c:	7cfb      	ldrb	r3, [r7, #19]
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d1c7      	bne.n	800f402 <sys_check_timeouts+0x1e>
  }
}
 800f472:	bf00      	nop
 800f474:	3718      	adds	r7, #24
 800f476:	46bd      	mov	sp, r7
 800f478:	bd80      	pop	{r7, pc}
 800f47a:	bf00      	nop
 800f47c:	20004c34 	.word	0x20004c34
 800f480:	20004c38 	.word	0x20004c38
 800f484:	20007f80 	.word	0x20007f80

0800f488 <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 800f488:	b580      	push	{r7, lr}
 800f48a:	b082      	sub	sp, #8
 800f48c:	af00      	add	r7, sp, #0
  u32_t diff;
  if (next_timeout == NULL) {
 800f48e:	4b0f      	ldr	r3, [pc, #60]	; (800f4cc <sys_timeouts_sleeptime+0x44>)
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d102      	bne.n	800f49c <sys_timeouts_sleeptime+0x14>
    return 0xffffffff;
 800f496:	f04f 33ff 	mov.w	r3, #4294967295
 800f49a:	e013      	b.n	800f4c4 <sys_timeouts_sleeptime+0x3c>
  }
  diff = sys_now() - timeouts_last_time;
 800f49c:	f7f5 fd4a 	bl	8004f34 <sys_now>
 800f4a0:	4602      	mov	r2, r0
 800f4a2:	4b0b      	ldr	r3, [pc, #44]	; (800f4d0 <sys_timeouts_sleeptime+0x48>)
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	1ad3      	subs	r3, r2, r3
 800f4a8:	607b      	str	r3, [r7, #4]
  if (diff > next_timeout->time) {
 800f4aa:	4b08      	ldr	r3, [pc, #32]	; (800f4cc <sys_timeouts_sleeptime+0x44>)
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	685b      	ldr	r3, [r3, #4]
 800f4b0:	687a      	ldr	r2, [r7, #4]
 800f4b2:	429a      	cmp	r2, r3
 800f4b4:	d901      	bls.n	800f4ba <sys_timeouts_sleeptime+0x32>
    return 0;
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	e004      	b.n	800f4c4 <sys_timeouts_sleeptime+0x3c>
  } else {
    return next_timeout->time - diff;
 800f4ba:	4b04      	ldr	r3, [pc, #16]	; (800f4cc <sys_timeouts_sleeptime+0x44>)
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	685a      	ldr	r2, [r3, #4]
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	1ad3      	subs	r3, r2, r3
  }
}
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	3708      	adds	r7, #8
 800f4c8:	46bd      	mov	sp, r7
 800f4ca:	bd80      	pop	{r7, pc}
 800f4cc:	20004c34 	.word	0x20004c34
 800f4d0:	20004c38 	.word	0x20004c38

0800f4d4 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b084      	sub	sp, #16
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
 800f4dc:	6039      	str	r1, [r7, #0]
  u32_t sleeptime;

again:
  if (!next_timeout) {
 800f4de:	4b0f      	ldr	r3, [pc, #60]	; (800f51c <sys_timeouts_mbox_fetch+0x48>)
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d105      	bne.n	800f4f2 <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	6839      	ldr	r1, [r7, #0]
 800f4ea:	6878      	ldr	r0, [r7, #4]
 800f4ec:	f004 febd 	bl	801426a <sys_arch_mbox_fetch>
    return;
 800f4f0:	e011      	b.n	800f516 <sys_timeouts_mbox_fetch+0x42>
  }

  sleeptime = sys_timeouts_sleeptime();
 800f4f2:	f7ff ffc9 	bl	800f488 <sys_timeouts_sleeptime>
 800f4f6:	60f8      	str	r0, [r7, #12]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d008      	beq.n	800f510 <sys_timeouts_mbox_fetch+0x3c>
 800f4fe:	68fa      	ldr	r2, [r7, #12]
 800f500:	6839      	ldr	r1, [r7, #0]
 800f502:	6878      	ldr	r0, [r7, #4]
 800f504:	f004 feb1 	bl	801426a <sys_arch_mbox_fetch>
 800f508:	4603      	mov	r3, r0
 800f50a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f50e:	d102      	bne.n	800f516 <sys_timeouts_mbox_fetch+0x42>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800f510:	f7ff ff68 	bl	800f3e4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800f514:	e7e3      	b.n	800f4de <sys_timeouts_mbox_fetch+0xa>
  }
}
 800f516:	3710      	adds	r7, #16
 800f518:	46bd      	mov	sp, r7
 800f51a:	bd80      	pop	{r7, pc}
 800f51c:	20004c34 	.word	0x20004c34

0800f520 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800f520:	b480      	push	{r7}
 800f522:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800f524:	bf00      	nop
 800f526:	46bd      	mov	sp, r7
 800f528:	bc80      	pop	{r7}
 800f52a:	4770      	bx	lr

0800f52c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800f52c:	b480      	push	{r7}
 800f52e:	b083      	sub	sp, #12
 800f530:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800f532:	2300      	movs	r3, #0
 800f534:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800f536:	4b17      	ldr	r3, [pc, #92]	; (800f594 <udp_new_port+0x68>)
 800f538:	881b      	ldrh	r3, [r3, #0]
 800f53a:	1c5a      	adds	r2, r3, #1
 800f53c:	b291      	uxth	r1, r2
 800f53e:	4a15      	ldr	r2, [pc, #84]	; (800f594 <udp_new_port+0x68>)
 800f540:	8011      	strh	r1, [r2, #0]
 800f542:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f546:	4293      	cmp	r3, r2
 800f548:	d103      	bne.n	800f552 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800f54a:	4b12      	ldr	r3, [pc, #72]	; (800f594 <udp_new_port+0x68>)
 800f54c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800f550:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f552:	4b11      	ldr	r3, [pc, #68]	; (800f598 <udp_new_port+0x6c>)
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	603b      	str	r3, [r7, #0]
 800f558:	e011      	b.n	800f57e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800f55a:	683b      	ldr	r3, [r7, #0]
 800f55c:	8a5a      	ldrh	r2, [r3, #18]
 800f55e:	4b0d      	ldr	r3, [pc, #52]	; (800f594 <udp_new_port+0x68>)
 800f560:	881b      	ldrh	r3, [r3, #0]
 800f562:	429a      	cmp	r2, r3
 800f564:	d108      	bne.n	800f578 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800f566:	88fb      	ldrh	r3, [r7, #6]
 800f568:	3301      	adds	r3, #1
 800f56a:	80fb      	strh	r3, [r7, #6]
 800f56c:	88fb      	ldrh	r3, [r7, #6]
 800f56e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f572:	d3e0      	bcc.n	800f536 <udp_new_port+0xa>
        return 0;
 800f574:	2300      	movs	r3, #0
 800f576:	e007      	b.n	800f588 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f578:	683b      	ldr	r3, [r7, #0]
 800f57a:	68db      	ldr	r3, [r3, #12]
 800f57c:	603b      	str	r3, [r7, #0]
 800f57e:	683b      	ldr	r3, [r7, #0]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d1ea      	bne.n	800f55a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800f584:	4b03      	ldr	r3, [pc, #12]	; (800f594 <udp_new_port+0x68>)
 800f586:	881b      	ldrh	r3, [r3, #0]
}
 800f588:	4618      	mov	r0, r3
 800f58a:	370c      	adds	r7, #12
 800f58c:	46bd      	mov	sp, r7
 800f58e:	bc80      	pop	{r7}
 800f590:	4770      	bx	lr
 800f592:	bf00      	nop
 800f594:	20000014 	.word	0x20000014
 800f598:	2000b814 	.word	0x2000b814

0800f59c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800f59c:	b480      	push	{r7}
 800f59e:	b085      	sub	sp, #20
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	60f8      	str	r0, [r7, #12]
 800f5a4:	60b9      	str	r1, [r7, #8]
 800f5a6:	4613      	mov	r3, r2
 800f5a8:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800f5aa:	79fb      	ldrb	r3, [r7, #7]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d018      	beq.n	800f5e2 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d013      	beq.n	800f5de <udp_input_local_match+0x42>
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d00f      	beq.n	800f5de <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f5be:	4b13      	ldr	r3, [pc, #76]	; (800f60c <udp_input_local_match+0x70>)
 800f5c0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f5c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5c6:	d00a      	beq.n	800f5de <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	681a      	ldr	r2, [r3, #0]
 800f5cc:	4b0f      	ldr	r3, [pc, #60]	; (800f60c <udp_input_local_match+0x70>)
 800f5ce:	695b      	ldr	r3, [r3, #20]
 800f5d0:	405a      	eors	r2, r3
 800f5d2:	68bb      	ldr	r3, [r7, #8]
 800f5d4:	3308      	adds	r3, #8
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d110      	bne.n	800f600 <udp_input_local_match+0x64>
          return 1;
 800f5de:	2301      	movs	r3, #1
 800f5e0:	e00f      	b.n	800f602 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d009      	beq.n	800f5fc <udp_input_local_match+0x60>
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d005      	beq.n	800f5fc <udp_input_local_match+0x60>
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	681a      	ldr	r2, [r3, #0]
 800f5f4:	4b05      	ldr	r3, [pc, #20]	; (800f60c <udp_input_local_match+0x70>)
 800f5f6:	695b      	ldr	r3, [r3, #20]
 800f5f8:	429a      	cmp	r2, r3
 800f5fa:	d101      	bne.n	800f600 <udp_input_local_match+0x64>
      return 1;
 800f5fc:	2301      	movs	r3, #1
 800f5fe:	e000      	b.n	800f602 <udp_input_local_match+0x66>
    }
  }

  return 0;
 800f600:	2300      	movs	r3, #0
}
 800f602:	4618      	mov	r0, r3
 800f604:	3714      	adds	r7, #20
 800f606:	46bd      	mov	sp, r7
 800f608:	bc80      	pop	{r7}
 800f60a:	4770      	bx	lr
 800f60c:	20007f84 	.word	0x20007f84

0800f610 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800f610:	b590      	push	{r4, r7, lr}
 800f612:	b08d      	sub	sp, #52	; 0x34
 800f614:	af02      	add	r7, sp, #8
 800f616:	6078      	str	r0, [r7, #4]
 800f618:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800f61a:	2300      	movs	r3, #0
 800f61c:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	895b      	ldrh	r3, [r3, #10]
 800f622:	2b07      	cmp	r3, #7
 800f624:	d803      	bhi.n	800f62e <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800f626:	6878      	ldr	r0, [r7, #4]
 800f628:	f7fa febe 	bl	800a3a8 <pbuf_free>
    goto end;
 800f62c:	e0c6      	b.n	800f7bc <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	685b      	ldr	r3, [r3, #4]
 800f632:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800f634:	4b63      	ldr	r3, [pc, #396]	; (800f7c4 <udp_input+0x1b4>)
 800f636:	695a      	ldr	r2, [r3, #20]
 800f638:	4b62      	ldr	r3, [pc, #392]	; (800f7c4 <udp_input+0x1b4>)
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	4619      	mov	r1, r3
 800f63e:	4610      	mov	r0, r2
 800f640:	f003 fd9a 	bl	8013178 <ip4_addr_isbroadcast_u32>
 800f644:	4603      	mov	r3, r0
 800f646:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800f648:	697b      	ldr	r3, [r7, #20]
 800f64a:	881b      	ldrh	r3, [r3, #0]
 800f64c:	b29b      	uxth	r3, r3
 800f64e:	4618      	mov	r0, r3
 800f650:	f7f9 f9ec 	bl	8008a2c <lwip_htons>
 800f654:	4603      	mov	r3, r0
 800f656:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800f658:	697b      	ldr	r3, [r7, #20]
 800f65a:	885b      	ldrh	r3, [r3, #2]
 800f65c:	b29b      	uxth	r3, r3
 800f65e:	4618      	mov	r0, r3
 800f660:	f7f9 f9e4 	bl	8008a2c <lwip_htons>
 800f664:	4603      	mov	r3, r0
 800f666:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800f668:	2300      	movs	r3, #0
 800f66a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800f66c:	2300      	movs	r3, #0
 800f66e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800f670:	2300      	movs	r3, #0
 800f672:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f674:	4b54      	ldr	r3, [pc, #336]	; (800f7c8 <udp_input+0x1b8>)
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	627b      	str	r3, [r7, #36]	; 0x24
 800f67a:	e03b      	b.n	800f6f4 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800f67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f67e:	8a5b      	ldrh	r3, [r3, #18]
 800f680:	89fa      	ldrh	r2, [r7, #14]
 800f682:	429a      	cmp	r2, r3
 800f684:	d131      	bne.n	800f6ea <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800f686:	7cfb      	ldrb	r3, [r7, #19]
 800f688:	461a      	mov	r2, r3
 800f68a:	6839      	ldr	r1, [r7, #0]
 800f68c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f68e:	f7ff ff85 	bl	800f59c <udp_input_local_match>
 800f692:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800f694:	2b00      	cmp	r3, #0
 800f696:	d028      	beq.n	800f6ea <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800f698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f69a:	7c1b      	ldrb	r3, [r3, #16]
 800f69c:	f003 0304 	and.w	r3, r3, #4
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d104      	bne.n	800f6ae <udp_input+0x9e>
 800f6a4:	69fb      	ldr	r3, [r7, #28]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d101      	bne.n	800f6ae <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 800f6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6ac:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800f6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6b0:	8a9b      	ldrh	r3, [r3, #20]
 800f6b2:	8a3a      	ldrh	r2, [r7, #16]
 800f6b4:	429a      	cmp	r2, r3
 800f6b6:	d118      	bne.n	800f6ea <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6ba:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d005      	beq.n	800f6cc <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800f6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6c2:	685a      	ldr	r2, [r3, #4]
 800f6c4:	4b3f      	ldr	r3, [pc, #252]	; (800f7c4 <udp_input+0x1b4>)
 800f6c6:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800f6c8:	429a      	cmp	r2, r3
 800f6ca:	d10e      	bne.n	800f6ea <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800f6cc:	6a3b      	ldr	r3, [r7, #32]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d014      	beq.n	800f6fc <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800f6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6d4:	68da      	ldr	r2, [r3, #12]
 800f6d6:	6a3b      	ldr	r3, [r7, #32]
 800f6d8:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800f6da:	4b3b      	ldr	r3, [pc, #236]	; (800f7c8 <udp_input+0x1b8>)
 800f6dc:	681a      	ldr	r2, [r3, #0]
 800f6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6e0:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800f6e2:	4a39      	ldr	r2, [pc, #228]	; (800f7c8 <udp_input+0x1b8>)
 800f6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6e6:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800f6e8:	e008      	b.n	800f6fc <udp_input+0xec>
      }
    }

    prev = pcb;
 800f6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6ec:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800f6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6f0:	68db      	ldr	r3, [r3, #12]
 800f6f2:	627b      	str	r3, [r7, #36]	; 0x24
 800f6f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d1c0      	bne.n	800f67c <udp_input+0x6c>
 800f6fa:	e000      	b.n	800f6fe <udp_input+0xee>
        break;
 800f6fc:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800f6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f700:	2b00      	cmp	r3, #0
 800f702:	d101      	bne.n	800f708 <udp_input+0xf8>
    pcb = uncon_pcb;
 800f704:	69fb      	ldr	r3, [r7, #28]
 800f706:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800f708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d002      	beq.n	800f714 <udp_input+0x104>
    for_us = 1;
 800f70e:	2301      	movs	r3, #1
 800f710:	76fb      	strb	r3, [r7, #27]
 800f712:	e00a      	b.n	800f72a <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800f714:	683b      	ldr	r3, [r7, #0]
 800f716:	3304      	adds	r3, #4
 800f718:	681a      	ldr	r2, [r3, #0]
 800f71a:	4b2a      	ldr	r3, [pc, #168]	; (800f7c4 <udp_input+0x1b4>)
 800f71c:	695b      	ldr	r3, [r3, #20]
 800f71e:	429a      	cmp	r2, r3
 800f720:	bf0c      	ite	eq
 800f722:	2301      	moveq	r3, #1
 800f724:	2300      	movne	r3, #0
 800f726:	b2db      	uxtb	r3, r3
 800f728:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800f72a:	7efb      	ldrb	r3, [r7, #27]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d042      	beq.n	800f7b6 <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 800f730:	f06f 0107 	mvn.w	r1, #7
 800f734:	6878      	ldr	r0, [r7, #4]
 800f736:	f7fa fe13 	bl	800a360 <pbuf_header>
 800f73a:	4603      	mov	r3, r0
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d00a      	beq.n	800f756 <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800f740:	4b22      	ldr	r3, [pc, #136]	; (800f7cc <udp_input+0x1bc>)
 800f742:	f240 1255 	movw	r2, #341	; 0x155
 800f746:	4922      	ldr	r1, [pc, #136]	; (800f7d0 <udp_input+0x1c0>)
 800f748:	4822      	ldr	r0, [pc, #136]	; (800f7d4 <udp_input+0x1c4>)
 800f74a:	f00a ffe7 	bl	801a71c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800f74e:	6878      	ldr	r0, [r7, #4]
 800f750:	f7fa fe2a 	bl	800a3a8 <pbuf_free>
      goto end;
 800f754:	e032      	b.n	800f7bc <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 800f756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d012      	beq.n	800f782 <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800f75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f75e:	699b      	ldr	r3, [r3, #24]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d00a      	beq.n	800f77a <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800f764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f766:	699c      	ldr	r4, [r3, #24]
 800f768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f76a:	69d8      	ldr	r0, [r3, #28]
 800f76c:	8a3b      	ldrh	r3, [r7, #16]
 800f76e:	9300      	str	r3, [sp, #0]
 800f770:	4b19      	ldr	r3, [pc, #100]	; (800f7d8 <udp_input+0x1c8>)
 800f772:	687a      	ldr	r2, [r7, #4]
 800f774:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f776:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800f778:	e021      	b.n	800f7be <udp_input+0x1ae>
        pbuf_free(p);
 800f77a:	6878      	ldr	r0, [r7, #4]
 800f77c:	f7fa fe14 	bl	800a3a8 <pbuf_free>
        goto end;
 800f780:	e01c      	b.n	800f7bc <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800f782:	7cfb      	ldrb	r3, [r7, #19]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d112      	bne.n	800f7ae <udp_input+0x19e>
 800f788:	4b0e      	ldr	r3, [pc, #56]	; (800f7c4 <udp_input+0x1b4>)
 800f78a:	695b      	ldr	r3, [r3, #20]
 800f78c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f790:	2be0      	cmp	r3, #224	; 0xe0
 800f792:	d00c      	beq.n	800f7ae <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800f794:	4b0b      	ldr	r3, [pc, #44]	; (800f7c4 <udp_input+0x1b4>)
 800f796:	899b      	ldrh	r3, [r3, #12]
 800f798:	3308      	adds	r3, #8
 800f79a:	b29b      	uxth	r3, r3
 800f79c:	b21b      	sxth	r3, r3
 800f79e:	4619      	mov	r1, r3
 800f7a0:	6878      	ldr	r0, [r7, #4]
 800f7a2:	f7fa fdef 	bl	800a384 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800f7a6:	2103      	movs	r1, #3
 800f7a8:	6878      	ldr	r0, [r7, #4]
 800f7aa:	f003 f9c5 	bl	8012b38 <icmp_dest_unreach>
      pbuf_free(p);
 800f7ae:	6878      	ldr	r0, [r7, #4]
 800f7b0:	f7fa fdfa 	bl	800a3a8 <pbuf_free>
  return;
 800f7b4:	e003      	b.n	800f7be <udp_input+0x1ae>
    pbuf_free(p);
 800f7b6:	6878      	ldr	r0, [r7, #4]
 800f7b8:	f7fa fdf6 	bl	800a3a8 <pbuf_free>
  return;
 800f7bc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800f7be:	372c      	adds	r7, #44	; 0x2c
 800f7c0:	46bd      	mov	sp, r7
 800f7c2:	bd90      	pop	{r4, r7, pc}
 800f7c4:	20007f84 	.word	0x20007f84
 800f7c8:	2000b814 	.word	0x2000b814
 800f7cc:	0801f820 	.word	0x0801f820
 800f7d0:	0801f850 	.word	0x0801f850
 800f7d4:	0801f864 	.word	0x0801f864
 800f7d8:	20007f94 	.word	0x20007f94

0800f7dc <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port)
{
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b088      	sub	sp, #32
 800f7e0:	af02      	add	r7, sp, #8
 800f7e2:	60f8      	str	r0, [r7, #12]
 800f7e4:	60b9      	str	r1, [r7, #8]
 800f7e6:	607a      	str	r2, [r7, #4]
 800f7e8:	807b      	strh	r3, [r7, #2]
udp_sendto_chksum(struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *dst_ip,
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;
  const ip_addr_t *dst_ip_route = dst_ip;
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	617b      	str	r3, [r7, #20]

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d002      	beq.n	800f7fa <udp_sendto+0x1e>
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d102      	bne.n	800f800 <udp_sendto+0x24>
    return ERR_VAL;
 800f7fa:	f06f 0305 	mvn.w	r3, #5
 800f7fe:	e013      	b.n	800f828 <udp_sendto+0x4c>
  /* find the outgoing network interface for this packet */
  if(IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    /* Don't call ip_route() with IP_ANY_TYPE */
    netif = ip_route(IP46_ADDR_ANY(IP_GET_TYPE(dst_ip_route)), dst_ip_route);
  } else {
    netif = ip_route(&pcb->local_ip, dst_ip_route);
 800f800:	6978      	ldr	r0, [r7, #20]
 800f802:	f003 fa21 	bl	8012c48 <ip4_route>
 800f806:	6138      	str	r0, [r7, #16]
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800f808:	693b      	ldr	r3, [r7, #16]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d102      	bne.n	800f814 <udp_sendto+0x38>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800f80e:	f06f 0303 	mvn.w	r3, #3
 800f812:	e009      	b.n	800f828 <udp_sendto+0x4c>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800f814:	887a      	ldrh	r2, [r7, #2]
 800f816:	693b      	ldr	r3, [r7, #16]
 800f818:	9300      	str	r3, [sp, #0]
 800f81a:	4613      	mov	r3, r2
 800f81c:	687a      	ldr	r2, [r7, #4]
 800f81e:	68b9      	ldr	r1, [r7, #8]
 800f820:	68f8      	ldr	r0, [r7, #12]
 800f822:	f000 f805 	bl	800f830 <udp_sendto_if>
 800f826:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800f828:	4618      	mov	r0, r3
 800f82a:	3718      	adds	r7, #24
 800f82c:	46bd      	mov	sp, r7
 800f82e:	bd80      	pop	{r7, pc}

0800f830 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800f830:	b580      	push	{r7, lr}
 800f832:	b088      	sub	sp, #32
 800f834:	af02      	add	r7, sp, #8
 800f836:	60f8      	str	r0, [r7, #12]
 800f838:	60b9      	str	r1, [r7, #8]
 800f83a:	607a      	str	r2, [r7, #4]
 800f83c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d002      	beq.n	800f84a <udp_sendto_if+0x1a>
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d102      	bne.n	800f850 <udp_sendto_if+0x20>
    return ERR_VAL;
 800f84a:	f06f 0305 	mvn.w	r3, #5
 800f84e:	e028      	b.n	800f8a2 <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d009      	beq.n	800f86a <udp_sendto_if+0x3a>
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d005      	beq.n	800f86a <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800f866:	2be0      	cmp	r3, #224	; 0xe0
 800f868:	d103      	bne.n	800f872 <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 800f86a:	6a3b      	ldr	r3, [r7, #32]
 800f86c:	3304      	adds	r3, #4
 800f86e:	617b      	str	r3, [r7, #20]
 800f870:	e00b      	b.n	800f88a <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	681a      	ldr	r2, [r3, #0]
 800f876:	6a3b      	ldr	r3, [r7, #32]
 800f878:	3304      	adds	r3, #4
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	429a      	cmp	r2, r3
 800f87e:	d002      	beq.n	800f886 <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 800f880:	f06f 0303 	mvn.w	r3, #3
 800f884:	e00d      	b.n	800f8a2 <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800f88a:	887a      	ldrh	r2, [r7, #2]
 800f88c:	697b      	ldr	r3, [r7, #20]
 800f88e:	9301      	str	r3, [sp, #4]
 800f890:	6a3b      	ldr	r3, [r7, #32]
 800f892:	9300      	str	r3, [sp, #0]
 800f894:	4613      	mov	r3, r2
 800f896:	687a      	ldr	r2, [r7, #4]
 800f898:	68b9      	ldr	r1, [r7, #8]
 800f89a:	68f8      	ldr	r0, [r7, #12]
 800f89c:	f000 f806 	bl	800f8ac <udp_sendto_if_src>
 800f8a0:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	3718      	adds	r7, #24
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	bd80      	pop	{r7, pc}
	...

0800f8ac <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800f8ac:	b580      	push	{r7, lr}
 800f8ae:	b08c      	sub	sp, #48	; 0x30
 800f8b0:	af04      	add	r7, sp, #16
 800f8b2:	60f8      	str	r0, [r7, #12]
 800f8b4:	60b9      	str	r1, [r7, #8]
 800f8b6:	607a      	str	r2, [r7, #4]
 800f8b8:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d002      	beq.n	800f8c6 <udp_sendto_if_src+0x1a>
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d102      	bne.n	800f8cc <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 800f8c6:	f06f 0305 	mvn.w	r3, #5
 800f8ca:	e07e      	b.n	800f9ca <udp_sendto_if_src+0x11e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	8a5b      	ldrh	r3, [r3, #18]
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d10f      	bne.n	800f8f4 <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800f8d4:	68f9      	ldr	r1, [r7, #12]
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	8a5b      	ldrh	r3, [r3, #18]
 800f8da:	461a      	mov	r2, r3
 800f8dc:	68f8      	ldr	r0, [r7, #12]
 800f8de:	f000 f87f 	bl	800f9e0 <udp_bind>
 800f8e2:	4603      	mov	r3, r0
 800f8e4:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800f8e6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f8ea:	2b00      	cmp	r3, #0
 800f8ec:	d002      	beq.n	800f8f4 <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800f8ee:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f8f2:	e06a      	b.n	800f9ca <udp_sendto_if_src+0x11e>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 800f8f4:	2108      	movs	r1, #8
 800f8f6:	68b8      	ldr	r0, [r7, #8]
 800f8f8:	f7fa fd32 	bl	800a360 <pbuf_header>
 800f8fc:	4603      	mov	r3, r0
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d014      	beq.n	800f92c <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800f902:	2200      	movs	r2, #0
 800f904:	2108      	movs	r1, #8
 800f906:	2001      	movs	r0, #1
 800f908:	f7fa f9dc 	bl	8009cc4 <pbuf_alloc>
 800f90c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800f90e:	69fb      	ldr	r3, [r7, #28]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d102      	bne.n	800f91a <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800f914:	f04f 33ff 	mov.w	r3, #4294967295
 800f918:	e057      	b.n	800f9ca <udp_sendto_if_src+0x11e>
    }
    if (p->tot_len != 0) {
 800f91a:	68bb      	ldr	r3, [r7, #8]
 800f91c:	891b      	ldrh	r3, [r3, #8]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d006      	beq.n	800f930 <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800f922:	68b9      	ldr	r1, [r7, #8]
 800f924:	69f8      	ldr	r0, [r7, #28]
 800f926:	f7fa fe6d 	bl	800a604 <pbuf_chain>
 800f92a:	e001      	b.n	800f930 <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800f92c:	68bb      	ldr	r3, [r7, #8]
 800f92e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800f930:	69fb      	ldr	r3, [r7, #28]
 800f932:	895b      	ldrh	r3, [r3, #10]
 800f934:	2b07      	cmp	r3, #7
 800f936:	d806      	bhi.n	800f946 <udp_sendto_if_src+0x9a>
 800f938:	4b26      	ldr	r3, [pc, #152]	; (800f9d4 <udp_sendto_if_src+0x128>)
 800f93a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800f93e:	4926      	ldr	r1, [pc, #152]	; (800f9d8 <udp_sendto_if_src+0x12c>)
 800f940:	4826      	ldr	r0, [pc, #152]	; (800f9dc <udp_sendto_if_src+0x130>)
 800f942:	f00a feeb 	bl	801a71c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800f946:	69fb      	ldr	r3, [r7, #28]
 800f948:	685b      	ldr	r3, [r3, #4]
 800f94a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	8a5b      	ldrh	r3, [r3, #18]
 800f950:	4618      	mov	r0, r3
 800f952:	f7f9 f86b 	bl	8008a2c <lwip_htons>
 800f956:	4603      	mov	r3, r0
 800f958:	461a      	mov	r2, r3
 800f95a:	697b      	ldr	r3, [r7, #20]
 800f95c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800f95e:	887b      	ldrh	r3, [r7, #2]
 800f960:	4618      	mov	r0, r3
 800f962:	f7f9 f863 	bl	8008a2c <lwip_htons>
 800f966:	4603      	mov	r3, r0
 800f968:	461a      	mov	r2, r3
 800f96a:	697b      	ldr	r3, [r7, #20]
 800f96c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800f96e:	697b      	ldr	r3, [r7, #20]
 800f970:	2200      	movs	r2, #0
 800f972:	719a      	strb	r2, [r3, #6]
 800f974:	2200      	movs	r2, #0
 800f976:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800f978:	69fb      	ldr	r3, [r7, #28]
 800f97a:	891b      	ldrh	r3, [r3, #8]
 800f97c:	4618      	mov	r0, r3
 800f97e:	f7f9 f855 	bl	8008a2c <lwip_htons>
 800f982:	4603      	mov	r3, r0
 800f984:	461a      	mov	r2, r3
 800f986:	697b      	ldr	r3, [r7, #20]
 800f988:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800f98a:	2311      	movs	r3, #17
 800f98c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	7a9b      	ldrb	r3, [r3, #10]
 800f992:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	7a5b      	ldrb	r3, [r3, #9]
 800f998:	7cb9      	ldrb	r1, [r7, #18]
 800f99a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f99c:	9202      	str	r2, [sp, #8]
 800f99e:	7cfa      	ldrb	r2, [r7, #19]
 800f9a0:	9201      	str	r2, [sp, #4]
 800f9a2:	9300      	str	r3, [sp, #0]
 800f9a4:	460b      	mov	r3, r1
 800f9a6:	687a      	ldr	r2, [r7, #4]
 800f9a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f9aa:	69f8      	ldr	r0, [r7, #28]
 800f9ac:	f003 fb3c 	bl	8013028 <ip4_output_if_src>
 800f9b0:	4603      	mov	r3, r0
 800f9b2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800f9b4:	69fa      	ldr	r2, [r7, #28]
 800f9b6:	68bb      	ldr	r3, [r7, #8]
 800f9b8:	429a      	cmp	r2, r3
 800f9ba:	d004      	beq.n	800f9c6 <udp_sendto_if_src+0x11a>
    /* free the header pbuf */
    pbuf_free(q);
 800f9bc:	69f8      	ldr	r0, [r7, #28]
 800f9be:	f7fa fcf3 	bl	800a3a8 <pbuf_free>
    q = NULL;
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800f9c6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	3720      	adds	r7, #32
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	bd80      	pop	{r7, pc}
 800f9d2:	bf00      	nop
 800f9d4:	0801f820 	.word	0x0801f820
 800f9d8:	0801f88c 	.word	0x0801f88c
 800f9dc:	0801f864 	.word	0x0801f864

0800f9e0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b086      	sub	sp, #24
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	60f8      	str	r0, [r7, #12]
 800f9e8:	60b9      	str	r1, [r7, #8]
 800f9ea:	4613      	mov	r3, r2
 800f9ec:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f9ee:	68bb      	ldr	r3, [r7, #8]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d101      	bne.n	800f9f8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800f9f4:	4b30      	ldr	r3, [pc, #192]	; (800fab8 <udp_bind+0xd8>)
 800f9f6:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d002      	beq.n	800fa04 <udp_bind+0x24>
 800f9fe:	68bb      	ldr	r3, [r7, #8]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d102      	bne.n	800fa0a <udp_bind+0x2a>
    return ERR_VAL;
 800fa04:	f06f 0305 	mvn.w	r3, #5
 800fa08:	e052      	b.n	800fab0 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800fa0e:	4b2b      	ldr	r3, [pc, #172]	; (800fabc <udp_bind+0xdc>)
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	617b      	str	r3, [r7, #20]
 800fa14:	e009      	b.n	800fa2a <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800fa16:	68fa      	ldr	r2, [r7, #12]
 800fa18:	697b      	ldr	r3, [r7, #20]
 800fa1a:	429a      	cmp	r2, r3
 800fa1c:	d102      	bne.n	800fa24 <udp_bind+0x44>
      rebind = 1;
 800fa1e:	2301      	movs	r3, #1
 800fa20:	74fb      	strb	r3, [r7, #19]
      break;
 800fa22:	e005      	b.n	800fa30 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800fa24:	697b      	ldr	r3, [r7, #20]
 800fa26:	68db      	ldr	r3, [r3, #12]
 800fa28:	617b      	str	r3, [r7, #20]
 800fa2a:	697b      	ldr	r3, [r7, #20]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d1f2      	bne.n	800fa16 <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 800fa30:	88fb      	ldrh	r3, [r7, #6]
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d109      	bne.n	800fa4a <udp_bind+0x6a>
    port = udp_new_port();
 800fa36:	f7ff fd79 	bl	800f52c <udp_new_port>
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800fa3e:	88fb      	ldrh	r3, [r7, #6]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d11e      	bne.n	800fa82 <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800fa44:	f06f 0307 	mvn.w	r3, #7
 800fa48:	e032      	b.n	800fab0 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800fa4a:	4b1c      	ldr	r3, [pc, #112]	; (800fabc <udp_bind+0xdc>)
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	617b      	str	r3, [r7, #20]
 800fa50:	e014      	b.n	800fa7c <udp_bind+0x9c>
      if (pcb != ipcb) {
 800fa52:	68fa      	ldr	r2, [r7, #12]
 800fa54:	697b      	ldr	r3, [r7, #20]
 800fa56:	429a      	cmp	r2, r3
 800fa58:	d00d      	beq.n	800fa76 <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800fa5a:	697b      	ldr	r3, [r7, #20]
 800fa5c:	8a5b      	ldrh	r3, [r3, #18]
 800fa5e:	88fa      	ldrh	r2, [r7, #6]
 800fa60:	429a      	cmp	r2, r3
 800fa62:	d108      	bne.n	800fa76 <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 800fa64:	697b      	ldr	r3, [r7, #20]
 800fa66:	681a      	ldr	r2, [r3, #0]
 800fa68:	68bb      	ldr	r3, [r7, #8]
 800fa6a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800fa6c:	429a      	cmp	r2, r3
 800fa6e:	d102      	bne.n	800fa76 <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800fa70:	f06f 0307 	mvn.w	r3, #7
 800fa74:	e01c      	b.n	800fab0 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800fa76:	697b      	ldr	r3, [r7, #20]
 800fa78:	68db      	ldr	r3, [r3, #12]
 800fa7a:	617b      	str	r3, [r7, #20]
 800fa7c:	697b      	ldr	r3, [r7, #20]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d1e7      	bne.n	800fa52 <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800fa82:	68bb      	ldr	r3, [r7, #8]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d002      	beq.n	800fa8e <udp_bind+0xae>
 800fa88:	68bb      	ldr	r3, [r7, #8]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	e000      	b.n	800fa90 <udp_bind+0xb0>
 800fa8e:	2300      	movs	r3, #0
 800fa90:	68fa      	ldr	r2, [r7, #12]
 800fa92:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	88fa      	ldrh	r2, [r7, #6]
 800fa98:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800fa9a:	7cfb      	ldrb	r3, [r7, #19]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d106      	bne.n	800faae <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800faa0:	4b06      	ldr	r3, [pc, #24]	; (800fabc <udp_bind+0xdc>)
 800faa2:	681a      	ldr	r2, [r3, #0]
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800faa8:	4a04      	ldr	r2, [pc, #16]	; (800fabc <udp_bind+0xdc>)
 800faaa:	68fb      	ldr	r3, [r7, #12]
 800faac:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800faae:	2300      	movs	r3, #0
}
 800fab0:	4618      	mov	r0, r3
 800fab2:	3718      	adds	r7, #24
 800fab4:	46bd      	mov	sp, r7
 800fab6:	bd80      	pop	{r7, pc}
 800fab8:	08021d18 	.word	0x08021d18
 800fabc:	2000b814 	.word	0x2000b814

0800fac0 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b086      	sub	sp, #24
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	60f8      	str	r0, [r7, #12]
 800fac8:	60b9      	str	r1, [r7, #8]
 800faca:	4613      	mov	r3, r2
 800facc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d002      	beq.n	800fada <udp_connect+0x1a>
 800fad4:	68bb      	ldr	r3, [r7, #8]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d102      	bne.n	800fae0 <udp_connect+0x20>
    return ERR_VAL;
 800fada:	f06f 0305 	mvn.w	r3, #5
 800fade:	e03e      	b.n	800fb5e <udp_connect+0x9e>
  }

  if (pcb->local_port == 0) {
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	8a5b      	ldrh	r3, [r3, #18]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d10f      	bne.n	800fb08 <udp_connect+0x48>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800fae8:	68f9      	ldr	r1, [r7, #12]
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	8a5b      	ldrh	r3, [r3, #18]
 800faee:	461a      	mov	r2, r3
 800faf0:	68f8      	ldr	r0, [r7, #12]
 800faf2:	f7ff ff75 	bl	800f9e0 <udp_bind>
 800faf6:	4603      	mov	r3, r0
 800faf8:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800fafa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d002      	beq.n	800fb08 <udp_connect+0x48>
      return err;
 800fb02:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fb06:	e02a      	b.n	800fb5e <udp_connect+0x9e>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800fb08:	68bb      	ldr	r3, [r7, #8]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d002      	beq.n	800fb14 <udp_connect+0x54>
 800fb0e:	68bb      	ldr	r3, [r7, #8]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	e000      	b.n	800fb16 <udp_connect+0x56>
 800fb14:	2300      	movs	r3, #0
 800fb16:	68fa      	ldr	r2, [r7, #12]
 800fb18:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	88fa      	ldrh	r2, [r7, #6]
 800fb1e:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	7c1b      	ldrb	r3, [r3, #16]
 800fb24:	f043 0304 	orr.w	r3, r3, #4
 800fb28:	b2da      	uxtb	r2, r3
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800fb2e:	4b0e      	ldr	r3, [pc, #56]	; (800fb68 <udp_connect+0xa8>)
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	617b      	str	r3, [r7, #20]
 800fb34:	e008      	b.n	800fb48 <udp_connect+0x88>
    if (pcb == ipcb) {
 800fb36:	68fa      	ldr	r2, [r7, #12]
 800fb38:	697b      	ldr	r3, [r7, #20]
 800fb3a:	429a      	cmp	r2, r3
 800fb3c:	d101      	bne.n	800fb42 <udp_connect+0x82>
      /* already on the list, just return */
      return ERR_OK;
 800fb3e:	2300      	movs	r3, #0
 800fb40:	e00d      	b.n	800fb5e <udp_connect+0x9e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800fb42:	697b      	ldr	r3, [r7, #20]
 800fb44:	68db      	ldr	r3, [r3, #12]
 800fb46:	617b      	str	r3, [r7, #20]
 800fb48:	697b      	ldr	r3, [r7, #20]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d1f3      	bne.n	800fb36 <udp_connect+0x76>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800fb4e:	4b06      	ldr	r3, [pc, #24]	; (800fb68 <udp_connect+0xa8>)
 800fb50:	681a      	ldr	r2, [r3, #0]
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800fb56:	4a04      	ldr	r2, [pc, #16]	; (800fb68 <udp_connect+0xa8>)
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800fb5c:	2300      	movs	r3, #0
}
 800fb5e:	4618      	mov	r0, r3
 800fb60:	3718      	adds	r7, #24
 800fb62:	46bd      	mov	sp, r7
 800fb64:	bd80      	pop	{r7, pc}
 800fb66:	bf00      	nop
 800fb68:	2000b814 	.word	0x2000b814

0800fb6c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800fb6c:	b480      	push	{r7}
 800fb6e:	b085      	sub	sp, #20
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	60f8      	str	r0, [r7, #12]
 800fb74:	60b9      	str	r1, [r7, #8]
 800fb76:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	68ba      	ldr	r2, [r7, #8]
 800fb7c:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	687a      	ldr	r2, [r7, #4]
 800fb82:	61da      	str	r2, [r3, #28]
}
 800fb84:	bf00      	nop
 800fb86:	3714      	adds	r7, #20
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	bc80      	pop	{r7}
 800fb8c:	4770      	bx	lr
	...

0800fb90 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b084      	sub	sp, #16
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800fb98:	4b15      	ldr	r3, [pc, #84]	; (800fbf0 <udp_remove+0x60>)
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	687a      	ldr	r2, [r7, #4]
 800fb9e:	429a      	cmp	r2, r3
 800fba0:	d105      	bne.n	800fbae <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800fba2:	4b13      	ldr	r3, [pc, #76]	; (800fbf0 <udp_remove+0x60>)
 800fba4:	681b      	ldr	r3, [r3, #0]
 800fba6:	68db      	ldr	r3, [r3, #12]
 800fba8:	4a11      	ldr	r2, [pc, #68]	; (800fbf0 <udp_remove+0x60>)
 800fbaa:	6013      	str	r3, [r2, #0]
 800fbac:	e017      	b.n	800fbde <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800fbae:	4b10      	ldr	r3, [pc, #64]	; (800fbf0 <udp_remove+0x60>)
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	60fb      	str	r3, [r7, #12]
 800fbb4:	e010      	b.n	800fbd8 <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	68db      	ldr	r3, [r3, #12]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d009      	beq.n	800fbd2 <udp_remove+0x42>
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	68db      	ldr	r3, [r3, #12]
 800fbc2:	687a      	ldr	r2, [r7, #4]
 800fbc4:	429a      	cmp	r2, r3
 800fbc6:	d104      	bne.n	800fbd2 <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	68da      	ldr	r2, [r3, #12]
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	60da      	str	r2, [r3, #12]
        break;
 800fbd0:	e005      	b.n	800fbde <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	68db      	ldr	r3, [r3, #12]
 800fbd6:	60fb      	str	r3, [r7, #12]
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d1eb      	bne.n	800fbb6 <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800fbde:	6879      	ldr	r1, [r7, #4]
 800fbe0:	2000      	movs	r0, #0
 800fbe2:	f7f9 fe25 	bl	8009830 <memp_free>
}
 800fbe6:	bf00      	nop
 800fbe8:	3710      	adds	r7, #16
 800fbea:	46bd      	mov	sp, r7
 800fbec:	bd80      	pop	{r7, pc}
 800fbee:	bf00      	nop
 800fbf0:	2000b814 	.word	0x2000b814

0800fbf4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b082      	sub	sp, #8
 800fbf8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800fbfa:	2000      	movs	r0, #0
 800fbfc:	f7f9 fdc6 	bl	800978c <memp_malloc>
 800fc00:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d007      	beq.n	800fc18 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800fc08:	2220      	movs	r2, #32
 800fc0a:	2100      	movs	r1, #0
 800fc0c:	6878      	ldr	r0, [r7, #4]
 800fc0e:	f009 ff4d 	bl	8019aac <memset>
    pcb->ttl = UDP_TTL;
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	22ff      	movs	r2, #255	; 0xff
 800fc16:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800fc18:	687b      	ldr	r3, [r7, #4]
}
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	3708      	adds	r7, #8
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	bd80      	pop	{r7, pc}
	...

0800fc24 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800fc24:	b480      	push	{r7}
 800fc26:	b085      	sub	sp, #20
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	6078      	str	r0, [r7, #4]
 800fc2c:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d01e      	beq.n	800fc72 <udp_netif_ip_addr_changed+0x4e>
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d01a      	beq.n	800fc72 <udp_netif_ip_addr_changed+0x4e>
 800fc3c:	683b      	ldr	r3, [r7, #0]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d017      	beq.n	800fc72 <udp_netif_ip_addr_changed+0x4e>
 800fc42:	683b      	ldr	r3, [r7, #0]
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d013      	beq.n	800fc72 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800fc4a:	4b0c      	ldr	r3, [pc, #48]	; (800fc7c <udp_netif_ip_addr_changed+0x58>)
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	60fb      	str	r3, [r7, #12]
 800fc50:	e00c      	b.n	800fc6c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	681a      	ldr	r2, [r3, #0]
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	429a      	cmp	r2, r3
 800fc5c:	d103      	bne.n	800fc66 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800fc5e:	683b      	ldr	r3, [r7, #0]
 800fc60:	681a      	ldr	r2, [r3, #0]
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	68db      	ldr	r3, [r3, #12]
 800fc6a:	60fb      	str	r3, [r7, #12]
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d1ef      	bne.n	800fc52 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800fc72:	bf00      	nop
 800fc74:	3714      	adds	r7, #20
 800fc76:	46bd      	mov	sp, r7
 800fc78:	bc80      	pop	{r7}
 800fc7a:	4770      	bx	lr
 800fc7c:	2000b814 	.word	0x2000b814

0800fc80 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(struct dhcp *dhcp);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800fc80:	b580      	push	{r7, lr}
 800fc82:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800fc84:	4b20      	ldr	r3, [pc, #128]	; (800fd08 <dhcp_inc_pcb_refcount+0x88>)
 800fc86:	781b      	ldrb	r3, [r3, #0]
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d133      	bne.n	800fcf4 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800fc8c:	4b1f      	ldr	r3, [pc, #124]	; (800fd0c <dhcp_inc_pcb_refcount+0x8c>)
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d005      	beq.n	800fca0 <dhcp_inc_pcb_refcount+0x20>
 800fc94:	4b1e      	ldr	r3, [pc, #120]	; (800fd10 <dhcp_inc_pcb_refcount+0x90>)
 800fc96:	22d9      	movs	r2, #217	; 0xd9
 800fc98:	491e      	ldr	r1, [pc, #120]	; (800fd14 <dhcp_inc_pcb_refcount+0x94>)
 800fc9a:	481f      	ldr	r0, [pc, #124]	; (800fd18 <dhcp_inc_pcb_refcount+0x98>)
 800fc9c:	f00a fd3e 	bl	801a71c <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800fca0:	f7ff ffa8 	bl	800fbf4 <udp_new>
 800fca4:	4602      	mov	r2, r0
 800fca6:	4b19      	ldr	r3, [pc, #100]	; (800fd0c <dhcp_inc_pcb_refcount+0x8c>)
 800fca8:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 800fcaa:	4b18      	ldr	r3, [pc, #96]	; (800fd0c <dhcp_inc_pcb_refcount+0x8c>)
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d102      	bne.n	800fcb8 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800fcb2:	f04f 33ff 	mov.w	r3, #4294967295
 800fcb6:	e024      	b.n	800fd02 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800fcb8:	4b14      	ldr	r3, [pc, #80]	; (800fd0c <dhcp_inc_pcb_refcount+0x8c>)
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	7a1a      	ldrb	r2, [r3, #8]
 800fcbe:	4b13      	ldr	r3, [pc, #76]	; (800fd0c <dhcp_inc_pcb_refcount+0x8c>)
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	f042 0220 	orr.w	r2, r2, #32
 800fcc6:	b2d2      	uxtb	r2, r2
 800fcc8:	721a      	strb	r2, [r3, #8]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
 800fcca:	4b10      	ldr	r3, [pc, #64]	; (800fd0c <dhcp_inc_pcb_refcount+0x8c>)
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	2244      	movs	r2, #68	; 0x44
 800fcd0:	4912      	ldr	r1, [pc, #72]	; (800fd1c <dhcp_inc_pcb_refcount+0x9c>)
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	f7ff fe84 	bl	800f9e0 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, DHCP_SERVER_PORT);
 800fcd8:	4b0c      	ldr	r3, [pc, #48]	; (800fd0c <dhcp_inc_pcb_refcount+0x8c>)
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	2243      	movs	r2, #67	; 0x43
 800fcde:	490f      	ldr	r1, [pc, #60]	; (800fd1c <dhcp_inc_pcb_refcount+0x9c>)
 800fce0:	4618      	mov	r0, r3
 800fce2:	f7ff feed 	bl	800fac0 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800fce6:	4b09      	ldr	r3, [pc, #36]	; (800fd0c <dhcp_inc_pcb_refcount+0x8c>)
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	2200      	movs	r2, #0
 800fcec:	490c      	ldr	r1, [pc, #48]	; (800fd20 <dhcp_inc_pcb_refcount+0xa0>)
 800fcee:	4618      	mov	r0, r3
 800fcf0:	f7ff ff3c 	bl	800fb6c <udp_recv>
  }

  dhcp_pcb_refcount++;
 800fcf4:	4b04      	ldr	r3, [pc, #16]	; (800fd08 <dhcp_inc_pcb_refcount+0x88>)
 800fcf6:	781b      	ldrb	r3, [r3, #0]
 800fcf8:	3301      	adds	r3, #1
 800fcfa:	b2da      	uxtb	r2, r3
 800fcfc:	4b02      	ldr	r3, [pc, #8]	; (800fd08 <dhcp_inc_pcb_refcount+0x88>)
 800fcfe:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800fd00:	2300      	movs	r3, #0
}
 800fd02:	4618      	mov	r0, r3
 800fd04:	bd80      	pop	{r7, pc}
 800fd06:	bf00      	nop
 800fd08:	20004c44 	.word	0x20004c44
 800fd0c:	20004c40 	.word	0x20004c40
 800fd10:	0801f8bc 	.word	0x0801f8bc
 800fd14:	0801f8f4 	.word	0x0801f8f4
 800fd18:	0801f91c 	.word	0x0801f91c
 800fd1c:	08021d18 	.word	0x08021d18
 800fd20:	080114e9 	.word	0x080114e9

0800fd24 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800fd24:	b580      	push	{r7, lr}
 800fd26:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800fd28:	4b0e      	ldr	r3, [pc, #56]	; (800fd64 <dhcp_dec_pcb_refcount+0x40>)
 800fd2a:	781b      	ldrb	r3, [r3, #0]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d105      	bne.n	800fd3c <dhcp_dec_pcb_refcount+0x18>
 800fd30:	4b0d      	ldr	r3, [pc, #52]	; (800fd68 <dhcp_dec_pcb_refcount+0x44>)
 800fd32:	22f3      	movs	r2, #243	; 0xf3
 800fd34:	490d      	ldr	r1, [pc, #52]	; (800fd6c <dhcp_dec_pcb_refcount+0x48>)
 800fd36:	480e      	ldr	r0, [pc, #56]	; (800fd70 <dhcp_dec_pcb_refcount+0x4c>)
 800fd38:	f00a fcf0 	bl	801a71c <iprintf>
  dhcp_pcb_refcount--;
 800fd3c:	4b09      	ldr	r3, [pc, #36]	; (800fd64 <dhcp_dec_pcb_refcount+0x40>)
 800fd3e:	781b      	ldrb	r3, [r3, #0]
 800fd40:	3b01      	subs	r3, #1
 800fd42:	b2da      	uxtb	r2, r3
 800fd44:	4b07      	ldr	r3, [pc, #28]	; (800fd64 <dhcp_dec_pcb_refcount+0x40>)
 800fd46:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800fd48:	4b06      	ldr	r3, [pc, #24]	; (800fd64 <dhcp_dec_pcb_refcount+0x40>)
 800fd4a:	781b      	ldrb	r3, [r3, #0]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d107      	bne.n	800fd60 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800fd50:	4b08      	ldr	r3, [pc, #32]	; (800fd74 <dhcp_dec_pcb_refcount+0x50>)
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	4618      	mov	r0, r3
 800fd56:	f7ff ff1b 	bl	800fb90 <udp_remove>
    dhcp_pcb = NULL;
 800fd5a:	4b06      	ldr	r3, [pc, #24]	; (800fd74 <dhcp_dec_pcb_refcount+0x50>)
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	601a      	str	r2, [r3, #0]
  }
}
 800fd60:	bf00      	nop
 800fd62:	bd80      	pop	{r7, pc}
 800fd64:	20004c44 	.word	0x20004c44
 800fd68:	0801f8bc 	.word	0x0801f8bc
 800fd6c:	0801f944 	.word	0x0801f944
 800fd70:	0801f91c 	.word	0x0801f91c
 800fd74:	20004c40 	.word	0x20004c40

0800fd78 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b084      	sub	sp, #16
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd84:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800fd86:	210c      	movs	r1, #12
 800fd88:	68f8      	ldr	r0, [r7, #12]
 800fd8a:	f000 ffe3 	bl	8010d54 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800fd8e:	4b06      	ldr	r3, [pc, #24]	; (800fda8 <dhcp_handle_nak+0x30>)
 800fd90:	4a05      	ldr	r2, [pc, #20]	; (800fda8 <dhcp_handle_nak+0x30>)
 800fd92:	4905      	ldr	r1, [pc, #20]	; (800fda8 <dhcp_handle_nak+0x30>)
 800fd94:	6878      	ldr	r0, [r7, #4]
 800fd96:	f7f9 fdd9 	bl	800994c <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800fd9a:	6878      	ldr	r0, [r7, #4]
 800fd9c:	f000 fc14 	bl	80105c8 <dhcp_discover>
}
 800fda0:	bf00      	nop
 800fda2:	3710      	adds	r7, #16
 800fda4:	46bd      	mov	sp, r7
 800fda6:	bd80      	pop	{r7, pc}
 800fda8:	08021d18 	.word	0x08021d18

0800fdac <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b084      	sub	sp, #16
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdb8:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800fdba:	2108      	movs	r1, #8
 800fdbc:	68f8      	ldr	r0, [r7, #12]
 800fdbe:	f000 ffc9 	bl	8010d54 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	3328      	adds	r3, #40	; 0x28
 800fdc6:	2200      	movs	r2, #0
 800fdc8:	4619      	mov	r1, r3
 800fdca:	6878      	ldr	r0, [r7, #4]
 800fdcc:	f002 fba4 	bl	8012518 <etharp_query>
 800fdd0:	4603      	mov	r3, r0
 800fdd2:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	7a9b      	ldrb	r3, [r3, #10]
 800fdd8:	2bff      	cmp	r3, #255	; 0xff
 800fdda:	d005      	beq.n	800fde8 <dhcp_check+0x3c>
    dhcp->tries++;
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	7a9b      	ldrb	r3, [r3, #10]
 800fde0:	3301      	adds	r3, #1
 800fde2:	b2da      	uxtb	r2, r3
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	729a      	strb	r2, [r3, #10]
  }
  msecs = 500;
 800fde8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800fdec:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800fdee:	893b      	ldrh	r3, [r7, #8]
 800fdf0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800fdf4:	4a06      	ldr	r2, [pc, #24]	; (800fe10 <dhcp_check+0x64>)
 800fdf6:	fb82 1203 	smull	r1, r2, r2, r3
 800fdfa:	1152      	asrs	r2, r2, #5
 800fdfc:	17db      	asrs	r3, r3, #31
 800fdfe:	1ad3      	subs	r3, r2, r3
 800fe00:	b29a      	uxth	r2, r3
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800fe06:	bf00      	nop
 800fe08:	3710      	adds	r7, #16
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	bd80      	pop	{r7, pc}
 800fe0e:	bf00      	nop
 800fe10:	10624dd3 	.word	0x10624dd3

0800fe14 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif)
{
 800fe14:	b580      	push	{r7, lr}
 800fe16:	b084      	sub	sp, #16
 800fe18:	af00      	add	r7, sp, #0
 800fe1a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe20:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800fe22:	4b0c      	ldr	r3, [pc, #48]	; (800fe54 <dhcp_handle_offer+0x40>)
 800fe24:	789b      	ldrb	r3, [r3, #2]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d00f      	beq.n	800fe4a <dhcp_handle_offer+0x36>
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800fe2a:	4b0b      	ldr	r3, [pc, #44]	; (800fe58 <dhcp_handle_offer+0x44>)
 800fe2c:	689b      	ldr	r3, [r3, #8]
 800fe2e:	4618      	mov	r0, r3
 800fe30:	f7f8 fe09 	bl	8008a46 <lwip_htonl>
 800fe34:	4602      	mov	r2, r0
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	625a      	str	r2, [r3, #36]	; 0x24
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
      ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	685b      	ldr	r3, [r3, #4]
 800fe3e:	691a      	ldr	r2, [r3, #16]
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	629a      	str	r2, [r3, #40]	; 0x28
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800fe44:	6878      	ldr	r0, [r7, #4]
 800fe46:	f000 f809 	bl	800fe5c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void*)netif));
  }
}
 800fe4a:	bf00      	nop
 800fe4c:	3710      	adds	r7, #16
 800fe4e:	46bd      	mov	sp, r7
 800fe50:	bd80      	pop	{r7, pc}
 800fe52:	bf00      	nop
 800fe54:	2000b818 	.word	0x2000b818
 800fe58:	2000b824 	.word	0x2000b824

0800fe5c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b088      	sub	sp, #32
 800fe60:	af02      	add	r7, sp, #8
 800fe62:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe68:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800fe6a:	2101      	movs	r1, #1
 800fe6c:	6938      	ldr	r0, [r7, #16]
 800fe6e:	f000 ff71 	bl	8010d54 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800fe72:	2203      	movs	r2, #3
 800fe74:	6939      	ldr	r1, [r7, #16]
 800fe76:	6878      	ldr	r0, [r7, #4]
 800fe78:	f001 fc1a 	bl	80116b0 <dhcp_create_msg>
 800fe7c:	4603      	mov	r3, r0
 800fe7e:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800fe80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d159      	bne.n	800ff3c <dhcp_select+0xe0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800fe88:	2202      	movs	r2, #2
 800fe8a:	2139      	movs	r1, #57	; 0x39
 800fe8c:	6938      	ldr	r0, [r7, #16]
 800fe8e:	f000 ff7b 	bl	8010d88 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fe96:	4619      	mov	r1, r3
 800fe98:	6938      	ldr	r0, [r7, #16]
 800fe9a:	f000 ffd7 	bl	8010e4c <dhcp_option_short>

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 800fe9e:	2204      	movs	r2, #4
 800fea0:	2132      	movs	r1, #50	; 0x32
 800fea2:	6938      	ldr	r0, [r7, #16]
 800fea4:	f000 ff70 	bl	8010d88 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800fea8:	693b      	ldr	r3, [r7, #16]
 800feaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800feac:	4618      	mov	r0, r3
 800feae:	f7f8 fdca 	bl	8008a46 <lwip_htonl>
 800feb2:	4603      	mov	r3, r0
 800feb4:	4619      	mov	r1, r3
 800feb6:	6938      	ldr	r0, [r7, #16]
 800feb8:	f001 f802 	bl	8010ec0 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 800febc:	2204      	movs	r2, #4
 800febe:	2136      	movs	r1, #54	; 0x36
 800fec0:	6938      	ldr	r0, [r7, #16]
 800fec2:	f000 ff61 	bl	8010d88 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800fec6:	693b      	ldr	r3, [r7, #16]
 800fec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800feca:	4618      	mov	r0, r3
 800fecc:	f7f8 fdbb 	bl	8008a46 <lwip_htonl>
 800fed0:	4603      	mov	r3, r0
 800fed2:	4619      	mov	r1, r3
 800fed4:	6938      	ldr	r0, [r7, #16]
 800fed6:	f000 fff3 	bl	8010ec0 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800feda:	2204      	movs	r2, #4
 800fedc:	2137      	movs	r1, #55	; 0x37
 800fede:	6938      	ldr	r0, [r7, #16]
 800fee0:	f000 ff52 	bl	8010d88 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fee4:	2300      	movs	r3, #0
 800fee6:	75fb      	strb	r3, [r7, #23]
 800fee8:	e009      	b.n	800fefe <dhcp_select+0xa2>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800feea:	7dfb      	ldrb	r3, [r7, #23]
 800feec:	4a29      	ldr	r2, [pc, #164]	; (800ff94 <dhcp_select+0x138>)
 800feee:	5cd3      	ldrb	r3, [r2, r3]
 800fef0:	4619      	mov	r1, r3
 800fef2:	6938      	ldr	r0, [r7, #16]
 800fef4:	f000 ff82 	bl	8010dfc <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800fef8:	7dfb      	ldrb	r3, [r7, #23]
 800fefa:	3301      	adds	r3, #1
 800fefc:	75fb      	strb	r3, [r7, #23]
 800fefe:	7dfb      	ldrb	r3, [r7, #23]
 800ff00:	2b03      	cmp	r3, #3
 800ff02:	d9f2      	bls.n	800feea <dhcp_select+0x8e>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 800ff04:	6938      	ldr	r0, [r7, #16]
 800ff06:	f001 fd77 	bl	80119f8 <dhcp_option_trailer>
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800ff0a:	693b      	ldr	r3, [r7, #16]
 800ff0c:	68da      	ldr	r2, [r3, #12]
 800ff0e:	693b      	ldr	r3, [r7, #16]
 800ff10:	8a9b      	ldrh	r3, [r3, #20]
 800ff12:	33f0      	adds	r3, #240	; 0xf0
 800ff14:	b29b      	uxth	r3, r3
 800ff16:	4619      	mov	r1, r3
 800ff18:	4610      	mov	r0, r2
 800ff1a:	f7fa f8d1 	bl	800a0c0 <pbuf_realloc>

    /* send broadcast to any DHCP server */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 800ff1e:	4b1e      	ldr	r3, [pc, #120]	; (800ff98 <dhcp_select+0x13c>)
 800ff20:	6818      	ldr	r0, [r3, #0]
 800ff22:	693b      	ldr	r3, [r7, #16]
 800ff24:	68d9      	ldr	r1, [r3, #12]
 800ff26:	4b1d      	ldr	r3, [pc, #116]	; (800ff9c <dhcp_select+0x140>)
 800ff28:	9301      	str	r3, [sp, #4]
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	9300      	str	r3, [sp, #0]
 800ff2e:	2343      	movs	r3, #67	; 0x43
 800ff30:	4a1b      	ldr	r2, [pc, #108]	; (800ffa0 <dhcp_select+0x144>)
 800ff32:	f7ff fcbb 	bl	800f8ac <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 800ff36:	6938      	ldr	r0, [r7, #16]
 800ff38:	f001 fd1c 	bl	8011974 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800ff3c:	693b      	ldr	r3, [r7, #16]
 800ff3e:	7a9b      	ldrb	r3, [r3, #10]
 800ff40:	2bff      	cmp	r3, #255	; 0xff
 800ff42:	d005      	beq.n	800ff50 <dhcp_select+0xf4>
    dhcp->tries++;
 800ff44:	693b      	ldr	r3, [r7, #16]
 800ff46:	7a9b      	ldrb	r3, [r3, #10]
 800ff48:	3301      	adds	r3, #1
 800ff4a:	b2da      	uxtb	r2, r3
 800ff4c:	693b      	ldr	r3, [r7, #16]
 800ff4e:	729a      	strb	r2, [r3, #10]
  }
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 800ff50:	693b      	ldr	r3, [r7, #16]
 800ff52:	7a9b      	ldrb	r3, [r3, #10]
 800ff54:	2b05      	cmp	r3, #5
 800ff56:	d807      	bhi.n	800ff68 <dhcp_select+0x10c>
 800ff58:	693b      	ldr	r3, [r7, #16]
 800ff5a:	7a9b      	ldrb	r3, [r3, #10]
 800ff5c:	461a      	mov	r2, r3
 800ff5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ff62:	4093      	lsls	r3, r2
 800ff64:	b29b      	uxth	r3, r3
 800ff66:	e001      	b.n	800ff6c <dhcp_select+0x110>
 800ff68:	f64e 2360 	movw	r3, #60000	; 0xea60
 800ff6c:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800ff6e:	89bb      	ldrh	r3, [r7, #12]
 800ff70:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800ff74:	4a0b      	ldr	r2, [pc, #44]	; (800ffa4 <dhcp_select+0x148>)
 800ff76:	fb82 1203 	smull	r1, r2, r2, r3
 800ff7a:	1152      	asrs	r2, r2, #5
 800ff7c:	17db      	asrs	r3, r3, #31
 800ff7e:	1ad3      	subs	r3, r2, r3
 800ff80:	b29a      	uxth	r2, r3
 800ff82:	693b      	ldr	r3, [r7, #16]
 800ff84:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800ff86:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	3718      	adds	r7, #24
 800ff8e:	46bd      	mov	sp, r7
 800ff90:	bd80      	pop	{r7, pc}
 800ff92:	bf00      	nop
 800ff94:	20000018 	.word	0x20000018
 800ff98:	20004c40 	.word	0x20004c40
 800ff9c:	08021d18 	.word	0x08021d18
 800ffa0:	08021d1c 	.word	0x08021d1c
 800ffa4:	10624dd3 	.word	0x10624dd3

0800ffa8 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	b082      	sub	sp, #8
 800ffac:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 800ffae:	4b27      	ldr	r3, [pc, #156]	; (801004c <dhcp_coarse_tmr+0xa4>)
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
 800ffb4:	e042      	b.n	801003c <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffba:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800ffbc:	683b      	ldr	r3, [r7, #0]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d039      	beq.n	8010036 <dhcp_coarse_tmr+0x8e>
 800ffc2:	683b      	ldr	r3, [r7, #0]
 800ffc4:	7a5b      	ldrb	r3, [r3, #9]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d035      	beq.n	8010036 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800ffca:	683b      	ldr	r3, [r7, #0]
 800ffcc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d012      	beq.n	800fff8 <dhcp_coarse_tmr+0x50>
 800ffd2:	683b      	ldr	r3, [r7, #0]
 800ffd4:	8c1b      	ldrh	r3, [r3, #32]
 800ffd6:	3301      	adds	r3, #1
 800ffd8:	b29a      	uxth	r2, r3
 800ffda:	683b      	ldr	r3, [r7, #0]
 800ffdc:	841a      	strh	r2, [r3, #32]
 800ffde:	683b      	ldr	r3, [r7, #0]
 800ffe0:	8c1a      	ldrh	r2, [r3, #32]
 800ffe2:	683b      	ldr	r3, [r7, #0]
 800ffe4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800ffe6:	429a      	cmp	r2, r3
 800ffe8:	d106      	bne.n	800fff8 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release(netif);
 800ffea:	6878      	ldr	r0, [r7, #4]
 800ffec:	f000 fdf2 	bl	8010bd4 <dhcp_release>
        dhcp_discover(netif);
 800fff0:	6878      	ldr	r0, [r7, #4]
 800fff2:	f000 fae9 	bl	80105c8 <dhcp_discover>
 800fff6:	e01e      	b.n	8010036 <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800fff8:	683b      	ldr	r3, [r7, #0]
 800fffa:	8bdb      	ldrh	r3, [r3, #30]
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d00b      	beq.n	8010018 <dhcp_coarse_tmr+0x70>
 8010000:	683b      	ldr	r3, [r7, #0]
 8010002:	8bdb      	ldrh	r3, [r3, #30]
 8010004:	1e5a      	subs	r2, r3, #1
 8010006:	b291      	uxth	r1, r2
 8010008:	683a      	ldr	r2, [r7, #0]
 801000a:	83d1      	strh	r1, [r2, #30]
 801000c:	2b01      	cmp	r3, #1
 801000e:	d103      	bne.n	8010018 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8010010:	6878      	ldr	r0, [r7, #4]
 8010012:	f000 f8c6 	bl	80101a2 <dhcp_t2_timeout>
 8010016:	e00e      	b.n	8010036 <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8010018:	683b      	ldr	r3, [r7, #0]
 801001a:	8b9b      	ldrh	r3, [r3, #28]
 801001c:	2b00      	cmp	r3, #0
 801001e:	d00a      	beq.n	8010036 <dhcp_coarse_tmr+0x8e>
 8010020:	683b      	ldr	r3, [r7, #0]
 8010022:	8b9b      	ldrh	r3, [r3, #28]
 8010024:	1e5a      	subs	r2, r3, #1
 8010026:	b291      	uxth	r1, r2
 8010028:	683a      	ldr	r2, [r7, #0]
 801002a:	8391      	strh	r1, [r2, #28]
 801002c:	2b01      	cmp	r3, #1
 801002e:	d102      	bne.n	8010036 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8010030:	6878      	ldr	r0, [r7, #4]
 8010032:	f000 f888 	bl	8010146 <dhcp_t1_timeout>
      }
    }
    /* proceed to next netif */
    netif = netif->next;
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	2b00      	cmp	r3, #0
 8010040:	d1b9      	bne.n	800ffb6 <dhcp_coarse_tmr+0xe>
  }
}
 8010042:	bf00      	nop
 8010044:	3708      	adds	r7, #8
 8010046:	46bd      	mov	sp, r7
 8010048:	bd80      	pop	{r7, pc}
 801004a:	bf00      	nop
 801004c:	2000b7ec 	.word	0x2000b7ec

08010050 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8010050:	b580      	push	{r7, lr}
 8010052:	b082      	sub	sp, #8
 8010054:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 8010056:	4b16      	ldr	r3, [pc, #88]	; (80100b0 <dhcp_fine_tmr+0x60>)
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	607b      	str	r3, [r7, #4]
  /* loop through netif's */
  while (netif != NULL) {
 801005c:	e020      	b.n	80100a0 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010062:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8010064:	683b      	ldr	r3, [r7, #0]
 8010066:	2b00      	cmp	r3, #0
 8010068:	d017      	beq.n	801009a <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801006a:	683b      	ldr	r3, [r7, #0]
 801006c:	8adb      	ldrh	r3, [r3, #22]
 801006e:	2b01      	cmp	r3, #1
 8010070:	d906      	bls.n	8010080 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8010072:	683b      	ldr	r3, [r7, #0]
 8010074:	8adb      	ldrh	r3, [r3, #22]
 8010076:	3b01      	subs	r3, #1
 8010078:	b29a      	uxth	r2, r3
 801007a:	683b      	ldr	r3, [r7, #0]
 801007c:	82da      	strh	r2, [r3, #22]
 801007e:	e00c      	b.n	801009a <dhcp_fine_tmr+0x4a>
      }
      else if (dhcp->request_timeout == 1) {
 8010080:	683b      	ldr	r3, [r7, #0]
 8010082:	8adb      	ldrh	r3, [r3, #22]
 8010084:	2b01      	cmp	r3, #1
 8010086:	d108      	bne.n	801009a <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8010088:	683b      	ldr	r3, [r7, #0]
 801008a:	8adb      	ldrh	r3, [r3, #22]
 801008c:	3b01      	subs	r3, #1
 801008e:	b29a      	uxth	r2, r3
 8010090:	683b      	ldr	r3, [r7, #0]
 8010092:	82da      	strh	r2, [r3, #22]
        /* { netif->dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8010094:	6878      	ldr	r0, [r7, #4]
 8010096:	f000 f80d 	bl	80100b4 <dhcp_timeout>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d1db      	bne.n	801005e <dhcp_fine_tmr+0xe>
  }
}
 80100a6:	bf00      	nop
 80100a8:	3708      	adds	r7, #8
 80100aa:	46bd      	mov	sp, r7
 80100ac:	bd80      	pop	{r7, pc}
 80100ae:	bf00      	nop
 80100b0:	2000b7ec 	.word	0x2000b7ec

080100b4 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 80100b4:	b580      	push	{r7, lr}
 80100b6:	b084      	sub	sp, #16
 80100b8:	af00      	add	r7, sp, #0
 80100ba:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100c0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	7a5b      	ldrb	r3, [r3, #9]
 80100c6:	2b0c      	cmp	r3, #12
 80100c8:	d003      	beq.n	80100d2 <dhcp_timeout+0x1e>
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	7a5b      	ldrb	r3, [r3, #9]
 80100ce:	2b06      	cmp	r3, #6
 80100d0:	d103      	bne.n	80100da <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 80100d2:	6878      	ldr	r0, [r7, #4]
 80100d4:	f000 fa78 	bl	80105c8 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 80100d8:	e031      	b.n	801013e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	7a5b      	ldrb	r3, [r3, #9]
 80100de:	2b01      	cmp	r3, #1
 80100e0:	d10e      	bne.n	8010100 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	7a9b      	ldrb	r3, [r3, #10]
 80100e6:	2b05      	cmp	r3, #5
 80100e8:	d803      	bhi.n	80100f2 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 80100ea:	6878      	ldr	r0, [r7, #4]
 80100ec:	f7ff feb6 	bl	800fe5c <dhcp_select>
}
 80100f0:	e025      	b.n	801013e <dhcp_timeout+0x8a>
      dhcp_release(netif);
 80100f2:	6878      	ldr	r0, [r7, #4]
 80100f4:	f000 fd6e 	bl	8010bd4 <dhcp_release>
      dhcp_discover(netif);
 80100f8:	6878      	ldr	r0, [r7, #4]
 80100fa:	f000 fa65 	bl	80105c8 <dhcp_discover>
}
 80100fe:	e01e      	b.n	801013e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	7a5b      	ldrb	r3, [r3, #9]
 8010104:	2b08      	cmp	r3, #8
 8010106:	d10b      	bne.n	8010120 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	7a9b      	ldrb	r3, [r3, #10]
 801010c:	2b01      	cmp	r3, #1
 801010e:	d803      	bhi.n	8010118 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8010110:	6878      	ldr	r0, [r7, #4]
 8010112:	f7ff fe4b 	bl	800fdac <dhcp_check>
}
 8010116:	e012      	b.n	801013e <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8010118:	6878      	ldr	r0, [r7, #4]
 801011a:	f000 fae1 	bl	80106e0 <dhcp_bind>
}
 801011e:	e00e      	b.n	801013e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	7a5b      	ldrb	r3, [r3, #9]
 8010124:	2b03      	cmp	r3, #3
 8010126:	d10a      	bne.n	801013e <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	7a9b      	ldrb	r3, [r3, #10]
 801012c:	2b01      	cmp	r3, #1
 801012e:	d803      	bhi.n	8010138 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8010130:	6878      	ldr	r0, [r7, #4]
 8010132:	f000 fcbb 	bl	8010aac <dhcp_reboot>
}
 8010136:	e002      	b.n	801013e <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8010138:	6878      	ldr	r0, [r7, #4]
 801013a:	f000 fa45 	bl	80105c8 <dhcp_discover>
}
 801013e:	bf00      	nop
 8010140:	3710      	adds	r7, #16
 8010142:	46bd      	mov	sp, r7
 8010144:	bd80      	pop	{r7, pc}

08010146 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8010146:	b580      	push	{r7, lr}
 8010148:	b084      	sub	sp, #16
 801014a:	af00      	add	r7, sp, #0
 801014c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010152:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	7a5b      	ldrb	r3, [r3, #9]
 8010158:	2b01      	cmp	r3, #1
 801015a:	d007      	beq.n	801016c <dhcp_t1_timeout+0x26>
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	7a5b      	ldrb	r3, [r3, #9]
 8010160:	2b0a      	cmp	r3, #10
 8010162:	d003      	beq.n	801016c <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8010168:	2b05      	cmp	r3, #5
 801016a:	d116      	bne.n	801019a <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 801016c:	6878      	ldr	r0, [r7, #4]
 801016e:	f000 fb91 	bl	8010894 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	8b5b      	ldrh	r3, [r3, #26]
 8010176:	461a      	mov	r2, r3
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	8c1b      	ldrh	r3, [r3, #32]
 801017c:	1ad3      	subs	r3, r2, r3
 801017e:	2b01      	cmp	r3, #1
 8010180:	dd0b      	ble.n	801019a <dhcp_t1_timeout+0x54>
    {
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	8b5b      	ldrh	r3, [r3, #26]
 8010186:	461a      	mov	r2, r3
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	8c1b      	ldrh	r3, [r3, #32]
 801018c:	1ad3      	subs	r3, r2, r3
 801018e:	0fda      	lsrs	r2, r3, #31
 8010190:	4413      	add	r3, r2
 8010192:	105b      	asrs	r3, r3, #1
 8010194:	b29a      	uxth	r2, r3
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	839a      	strh	r2, [r3, #28]
    }
  }
}
 801019a:	bf00      	nop
 801019c:	3710      	adds	r7, #16
 801019e:	46bd      	mov	sp, r7
 80101a0:	bd80      	pop	{r7, pc}

080101a2 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 80101a2:	b580      	push	{r7, lr}
 80101a4:	b084      	sub	sp, #16
 80101a6:	af00      	add	r7, sp, #0
 80101a8:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101ae:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	7a5b      	ldrb	r3, [r3, #9]
 80101b4:	2b01      	cmp	r3, #1
 80101b6:	d00b      	beq.n	80101d0 <dhcp_t2_timeout+0x2e>
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	7a5b      	ldrb	r3, [r3, #9]
 80101bc:	2b0a      	cmp	r3, #10
 80101be:	d007      	beq.n	80101d0 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80101c4:	2b05      	cmp	r3, #5
 80101c6:	d003      	beq.n	80101d0 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	7a5b      	ldrb	r3, [r3, #9]
 80101cc:	2b04      	cmp	r3, #4
 80101ce:	d116      	bne.n	80101fe <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 80101d0:	6878      	ldr	r0, [r7, #4]
 80101d2:	f000 fbe5 	bl	80109a0 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80101da:	461a      	mov	r2, r3
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	8c1b      	ldrh	r3, [r3, #32]
 80101e0:	1ad3      	subs	r3, r2, r3
 80101e2:	2b01      	cmp	r3, #1
 80101e4:	dd0b      	ble.n	80101fe <dhcp_t2_timeout+0x5c>
    {
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80101ea:	461a      	mov	r2, r3
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	8c1b      	ldrh	r3, [r3, #32]
 80101f0:	1ad3      	subs	r3, r2, r3
 80101f2:	0fda      	lsrs	r2, r3, #31
 80101f4:	4413      	add	r3, r2
 80101f6:	105b      	asrs	r3, r3, #1
 80101f8:	b29a      	uxth	r2, r3
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	83da      	strh	r2, [r3, #30]
    }
  }
}
 80101fe:	bf00      	nop
 8010200:	3710      	adds	r7, #16
 8010202:	46bd      	mov	sp, r7
 8010204:	bd80      	pop	{r7, pc}
	...

08010208 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif)
{
 8010208:	b580      	push	{r7, lr}
 801020a:	b086      	sub	sp, #24
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010214:	613b      	str	r3, [r7, #16]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8010216:	693b      	ldr	r3, [r7, #16]
 8010218:	2200      	movs	r2, #0
 801021a:	62da      	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801021c:	693b      	ldr	r3, [r7, #16]
 801021e:	2200      	movs	r2, #0
 8010220:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8010222:	4b37      	ldr	r3, [pc, #220]	; (8010300 <dhcp_handle_ack+0xf8>)
 8010224:	78db      	ldrb	r3, [r3, #3]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d003      	beq.n	8010232 <dhcp_handle_ack+0x2a>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 801022a:	4b36      	ldr	r3, [pc, #216]	; (8010304 <dhcp_handle_ack+0xfc>)
 801022c:	68da      	ldr	r2, [r3, #12]
 801022e:	693b      	ldr	r3, [r7, #16]
 8010230:	635a      	str	r2, [r3, #52]	; 0x34
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8010232:	4b33      	ldr	r3, [pc, #204]	; (8010300 <dhcp_handle_ack+0xf8>)
 8010234:	791b      	ldrb	r3, [r3, #4]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d004      	beq.n	8010244 <dhcp_handle_ack+0x3c>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 801023a:	4b32      	ldr	r3, [pc, #200]	; (8010304 <dhcp_handle_ack+0xfc>)
 801023c:	691a      	ldr	r2, [r3, #16]
 801023e:	693b      	ldr	r3, [r7, #16]
 8010240:	639a      	str	r2, [r3, #56]	; 0x38
 8010242:	e004      	b.n	801024e <dhcp_handle_ack+0x46>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8010244:	693b      	ldr	r3, [r7, #16]
 8010246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010248:	085a      	lsrs	r2, r3, #1
 801024a:	693b      	ldr	r3, [r7, #16]
 801024c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801024e:	4b2c      	ldr	r3, [pc, #176]	; (8010300 <dhcp_handle_ack+0xf8>)
 8010250:	795b      	ldrb	r3, [r3, #5]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d004      	beq.n	8010260 <dhcp_handle_ack+0x58>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8010256:	4b2b      	ldr	r3, [pc, #172]	; (8010304 <dhcp_handle_ack+0xfc>)
 8010258:	695a      	ldr	r2, [r3, #20]
 801025a:	693b      	ldr	r3, [r7, #16]
 801025c:	63da      	str	r2, [r3, #60]	; 0x3c
 801025e:	e007      	b.n	8010270 <dhcp_handle_ack+0x68>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8010260:	693b      	ldr	r3, [r7, #16]
 8010262:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010264:	4613      	mov	r3, r2
 8010266:	00db      	lsls	r3, r3, #3
 8010268:	1a9b      	subs	r3, r3, r2
 801026a:	08da      	lsrs	r2, r3, #3
 801026c:	693b      	ldr	r3, [r7, #16]
 801026e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 8010270:	693b      	ldr	r3, [r7, #16]
 8010272:	685b      	ldr	r3, [r3, #4]
 8010274:	691a      	ldr	r2, [r3, #16]
 8010276:	693b      	ldr	r3, [r7, #16]
 8010278:	629a      	str	r2, [r3, #40]	; 0x28
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801027a:	4b21      	ldr	r3, [pc, #132]	; (8010300 <dhcp_handle_ack+0xf8>)
 801027c:	799b      	ldrb	r3, [r3, #6]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d00b      	beq.n	801029a <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8010282:	4b20      	ldr	r3, [pc, #128]	; (8010304 <dhcp_handle_ack+0xfc>)
 8010284:	699b      	ldr	r3, [r3, #24]
 8010286:	4618      	mov	r0, r3
 8010288:	f7f8 fbdd 	bl	8008a46 <lwip_htonl>
 801028c:	4602      	mov	r2, r0
 801028e:	693b      	ldr	r3, [r7, #16]
 8010290:	62da      	str	r2, [r3, #44]	; 0x2c
    dhcp->subnet_mask_given = 1;
 8010292:	693b      	ldr	r3, [r7, #16]
 8010294:	2201      	movs	r2, #1
 8010296:	72da      	strb	r2, [r3, #11]
 8010298:	e002      	b.n	80102a0 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801029a:	693b      	ldr	r3, [r7, #16]
 801029c:	2200      	movs	r2, #0
 801029e:	72da      	strb	r2, [r3, #11]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 80102a0:	4b17      	ldr	r3, [pc, #92]	; (8010300 <dhcp_handle_ack+0xf8>)
 80102a2:	79db      	ldrb	r3, [r3, #7]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d007      	beq.n	80102b8 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 80102a8:	4b16      	ldr	r3, [pc, #88]	; (8010304 <dhcp_handle_ack+0xfc>)
 80102aa:	69db      	ldr	r3, [r3, #28]
 80102ac:	4618      	mov	r0, r3
 80102ae:	f7f8 fbca 	bl	8008a46 <lwip_htonl>
 80102b2:	4602      	mov	r2, r0
 80102b4:	693b      	ldr	r3, [r7, #16]
 80102b6:	631a      	str	r2, [r3, #48]	; 0x30
  dhcp_set_ntp_servers(n, ntp_server_addrs);
#endif /* LWIP_DHCP_GET_NTP_SRV */

#if LWIP_DHCP_PROVIDE_DNS_SERVERS
  /* DNS servers */
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 80102b8:	2300      	movs	r3, #0
 80102ba:	75fb      	strb	r3, [r7, #23]
 80102bc:	e013      	b.n	80102e6 <dhcp_handle_ack+0xde>
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32(&dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 80102be:	7dfb      	ldrb	r3, [r7, #23]
 80102c0:	3308      	adds	r3, #8
 80102c2:	4a10      	ldr	r2, [pc, #64]	; (8010304 <dhcp_handle_ack+0xfc>)
 80102c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102c8:	4618      	mov	r0, r3
 80102ca:	f7f8 fbbc 	bl	8008a46 <lwip_htonl>
 80102ce:	4603      	mov	r3, r0
 80102d0:	60fb      	str	r3, [r7, #12]
    dns_setserver(n, &dns_addr);
 80102d2:	f107 020c 	add.w	r2, r7, #12
 80102d6:	7dfb      	ldrb	r3, [r7, #23]
 80102d8:	4611      	mov	r1, r2
 80102da:	4618      	mov	r0, r3
 80102dc:	f7f8 fbd2 	bl	8008a84 <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 80102e0:	7dfb      	ldrb	r3, [r7, #23]
 80102e2:	3301      	adds	r3, #1
 80102e4:	75fb      	strb	r3, [r7, #23]
 80102e6:	7dfb      	ldrb	r3, [r7, #23]
 80102e8:	2b01      	cmp	r3, #1
 80102ea:	d805      	bhi.n	80102f8 <dhcp_handle_ack+0xf0>
 80102ec:	7dfb      	ldrb	r3, [r7, #23]
 80102ee:	3308      	adds	r3, #8
 80102f0:	4a03      	ldr	r2, [pc, #12]	; (8010300 <dhcp_handle_ack+0xf8>)
 80102f2:	5cd3      	ldrb	r3, [r2, r3]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d1e2      	bne.n	80102be <dhcp_handle_ack+0xb6>
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 80102f8:	bf00      	nop
 80102fa:	3718      	adds	r7, #24
 80102fc:	46bd      	mov	sp, r7
 80102fe:	bd80      	pop	{r7, pc}
 8010300:	2000b818 	.word	0x2000b818
 8010304:	2000b824 	.word	0x2000b824

08010308 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8010308:	b580      	push	{r7, lr}
 801030a:	b084      	sub	sp, #16
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d109      	bne.n	801032a <dhcp_start+0x22>
 8010316:	4b3c      	ldr	r3, [pc, #240]	; (8010408 <dhcp_start+0x100>)
 8010318:	f240 22d6 	movw	r2, #726	; 0x2d6
 801031c:	493b      	ldr	r1, [pc, #236]	; (801040c <dhcp_start+0x104>)
 801031e:	483c      	ldr	r0, [pc, #240]	; (8010410 <dhcp_start+0x108>)
 8010320:	f00a f9fc 	bl	801a71c <iprintf>
 8010324:	f06f 030f 	mvn.w	r3, #15
 8010328:	e069      	b.n	80103fe <dhcp_start+0xf6>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8010330:	f003 0301 	and.w	r3, r3, #1
 8010334:	2b00      	cmp	r3, #0
 8010336:	d109      	bne.n	801034c <dhcp_start+0x44>
 8010338:	4b33      	ldr	r3, [pc, #204]	; (8010408 <dhcp_start+0x100>)
 801033a:	f240 22d7 	movw	r2, #727	; 0x2d7
 801033e:	4935      	ldr	r1, [pc, #212]	; (8010414 <dhcp_start+0x10c>)
 8010340:	4833      	ldr	r0, [pc, #204]	; (8010410 <dhcp_start+0x108>)
 8010342:	f00a f9eb 	bl	801a71c <iprintf>
 8010346:	f06f 030f 	mvn.w	r3, #15
 801034a:	e058      	b.n	80103fe <dhcp_start+0xf6>
  dhcp = netif_dhcp_data(netif);
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010350:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8010356:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801035a:	d202      	bcs.n	8010362 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 801035c:	f04f 33ff 	mov.w	r3, #4294967295
 8010360:	e04d      	b.n	80103fe <dhcp_start+0xf6>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d10d      	bne.n	8010384 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8010368:	2040      	movs	r0, #64	; 0x40
 801036a:	f7f9 f8a1 	bl	80094b0 <mem_malloc>
 801036e:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	2b00      	cmp	r3, #0
 8010374:	d102      	bne.n	801037c <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8010376:	f04f 33ff 	mov.w	r3, #4294967295
 801037a:	e040      	b.n	80103fe <dhcp_start+0xf6>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	68fa      	ldr	r2, [r7, #12]
 8010380:	625a      	str	r2, [r3, #36]	; 0x24
 8010382:	e01b      	b.n	80103bc <dhcp_start+0xb4>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
  /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	68db      	ldr	r3, [r3, #12]
 8010388:	2b00      	cmp	r3, #0
 801038a:	d006      	beq.n	801039a <dhcp_start+0x92>
 801038c:	4b1e      	ldr	r3, [pc, #120]	; (8010408 <dhcp_start+0x100>)
 801038e:	f44f 723c 	mov.w	r2, #752	; 0x2f0
 8010392:	4921      	ldr	r1, [pc, #132]	; (8010418 <dhcp_start+0x110>)
 8010394:	481e      	ldr	r0, [pc, #120]	; (8010410 <dhcp_start+0x108>)
 8010396:	f00a f9c1 	bl	801a71c <iprintf>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	685b      	ldr	r3, [r3, #4]
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d006      	beq.n	80103b0 <dhcp_start+0xa8>
 80103a2:	4b19      	ldr	r3, [pc, #100]	; (8010408 <dhcp_start+0x100>)
 80103a4:	f240 22f1 	movw	r2, #753	; 0x2f1
 80103a8:	491c      	ldr	r1, [pc, #112]	; (801041c <dhcp_start+0x114>)
 80103aa:	4819      	ldr	r0, [pc, #100]	; (8010410 <dhcp_start+0x108>)
 80103ac:	f00a f9b6 	bl	801a71c <iprintf>

    if (dhcp->pcb_allocated != 0) {
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	7a1b      	ldrb	r3, [r3, #8]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d001      	beq.n	80103bc <dhcp_start+0xb4>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80103b8:	f7ff fcb4 	bl	800fd24 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 80103bc:	2240      	movs	r2, #64	; 0x40
 80103be:	2100      	movs	r1, #0
 80103c0:	68f8      	ldr	r0, [r7, #12]
 80103c2:	f009 fb73 	bl	8019aac <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 80103c6:	f7ff fc5b 	bl	800fc80 <dhcp_inc_pcb_refcount>
 80103ca:	4603      	mov	r3, r0
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d002      	beq.n	80103d6 <dhcp_start+0xce>
    return ERR_MEM;
 80103d0:	f04f 33ff 	mov.w	r3, #4294967295
 80103d4:	e013      	b.n	80103fe <dhcp_start+0xf6>
  }
  dhcp->pcb_allocated = 1;
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	2201      	movs	r2, #1
 80103da:	721a      	strb	r2, [r3, #8]
  }
#endif /* LWIP_DHCP_CHECK_LINK_UP */


  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 80103dc:	6878      	ldr	r0, [r7, #4]
 80103de:	f000 f8f3 	bl	80105c8 <dhcp_discover>
 80103e2:	4603      	mov	r3, r0
 80103e4:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 80103e6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d005      	beq.n	80103fa <dhcp_start+0xf2>
    /* free resources allocated above */
    dhcp_stop(netif);
 80103ee:	6878      	ldr	r0, [r7, #4]
 80103f0:	f000 fc78 	bl	8010ce4 <dhcp_stop>
    return ERR_MEM;
 80103f4:	f04f 33ff 	mov.w	r3, #4294967295
 80103f8:	e001      	b.n	80103fe <dhcp_start+0xf6>
  }
  return result;
 80103fa:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80103fe:	4618      	mov	r0, r3
 8010400:	3710      	adds	r7, #16
 8010402:	46bd      	mov	sp, r7
 8010404:	bd80      	pop	{r7, pc}
 8010406:	bf00      	nop
 8010408:	0801f8bc 	.word	0x0801f8bc
 801040c:	0801f968 	.word	0x0801f968
 8010410:	0801f91c 	.word	0x0801f91c
 8010414:	0801f9ac 	.word	0x0801f9ac
 8010418:	0801f9d0 	.word	0x0801f9d0
 801041c:	0801f9e8 	.word	0x0801f9e8

08010420 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8010420:	b580      	push	{r7, lr}
 8010422:	b084      	sub	sp, #16
 8010424:	af00      	add	r7, sp, #0
 8010426:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801042c:	60fb      	str	r3, [r7, #12]

  if (!dhcp)
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	2b00      	cmp	r3, #0
 8010432:	d02c      	beq.n	801048e <dhcp_network_changed+0x6e>
    return;
  switch (dhcp->state) {
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	7a5b      	ldrb	r3, [r3, #9]
 8010438:	2b0a      	cmp	r3, #10
 801043a:	d820      	bhi.n	801047e <dhcp_network_changed+0x5e>
 801043c:	a201      	add	r2, pc, #4	; (adr r2, 8010444 <dhcp_network_changed+0x24>)
 801043e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010442:	bf00      	nop
 8010444:	08010493 	.word	0x08010493
 8010448:	0801047f 	.word	0x0801047f
 801044c:	0801047f 	.word	0x0801047f
 8010450:	08010471 	.word	0x08010471
 8010454:	08010471 	.word	0x08010471
 8010458:	08010471 	.word	0x08010471
 801045c:	0801047f 	.word	0x0801047f
 8010460:	0801047f 	.word	0x0801047f
 8010464:	0801047f 	.word	0x0801047f
 8010468:	0801047f 	.word	0x0801047f
 801046c:	08010471 	.word	0x08010471
  case DHCP_STATE_REBINDING:
  case DHCP_STATE_RENEWING:
  case DHCP_STATE_BOUND:
  case DHCP_STATE_REBOOTING:
    dhcp->tries = 0;
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	2200      	movs	r2, #0
 8010474:	729a      	strb	r2, [r3, #10]
    dhcp_reboot(netif);
 8010476:	6878      	ldr	r0, [r7, #4]
 8010478:	f000 fb18 	bl	8010aac <dhcp_reboot>
    break;
 801047c:	e00a      	b.n	8010494 <dhcp_network_changed+0x74>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */
    /* ensure we start with short timeouts, even if already discovering */
    dhcp->tries = 0;
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	2200      	movs	r2, #0
 8010482:	729a      	strb	r2, [r3, #10]
    dhcp_discover(netif);
 8010484:	6878      	ldr	r0, [r7, #4]
 8010486:	f000 f89f 	bl	80105c8 <dhcp_discover>
    break;
 801048a:	bf00      	nop
 801048c:	e002      	b.n	8010494 <dhcp_network_changed+0x74>
    return;
 801048e:	bf00      	nop
 8010490:	e000      	b.n	8010494 <dhcp_network_changed+0x74>
    break;
 8010492:	bf00      	nop
  }
}
 8010494:	3710      	adds	r7, #16
 8010496:	46bd      	mov	sp, r7
 8010498:	bd80      	pop	{r7, pc}
 801049a:	bf00      	nop

0801049c <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 801049c:	b580      	push	{r7, lr}
 801049e:	b084      	sub	sp, #16
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	6078      	str	r0, [r7, #4]
 80104a4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d107      	bne.n	80104bc <dhcp_arp_reply+0x20>
 80104ac:	4b0e      	ldr	r3, [pc, #56]	; (80104e8 <dhcp_arp_reply+0x4c>)
 80104ae:	f240 327b 	movw	r2, #891	; 0x37b
 80104b2:	490e      	ldr	r1, [pc, #56]	; (80104ec <dhcp_arp_reply+0x50>)
 80104b4:	480e      	ldr	r0, [pc, #56]	; (80104f0 <dhcp_arp_reply+0x54>)
 80104b6:	f00a f931 	bl	801a71c <iprintf>
 80104ba:	e012      	b.n	80104e2 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104c0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d00c      	beq.n	80104e2 <dhcp_arp_reply+0x46>
 80104c8:	68fb      	ldr	r3, [r7, #12]
 80104ca:	7a5b      	ldrb	r3, [r3, #9]
 80104cc:	2b08      	cmp	r3, #8
 80104ce:	d108      	bne.n	80104e2 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 80104d0:	683b      	ldr	r3, [r7, #0]
 80104d2:	681a      	ldr	r2, [r3, #0]
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104d8:	429a      	cmp	r2, r3
 80104da:	d102      	bne.n	80104e2 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 80104dc:	6878      	ldr	r0, [r7, #4]
 80104de:	f000 f809 	bl	80104f4 <dhcp_decline>
    }
  }
}
 80104e2:	3710      	adds	r7, #16
 80104e4:	46bd      	mov	sp, r7
 80104e6:	bd80      	pop	{r7, pc}
 80104e8:	0801f8bc 	.word	0x0801f8bc
 80104ec:	0801f968 	.word	0x0801f968
 80104f0:	0801f91c 	.word	0x0801f91c

080104f4 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 80104f4:	b580      	push	{r7, lr}
 80104f6:	b086      	sub	sp, #24
 80104f8:	af02      	add	r7, sp, #8
 80104fa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010500:	60fb      	str	r3, [r7, #12]
  err_t result = ERR_OK;
 8010502:	2300      	movs	r3, #0
 8010504:	72fb      	strb	r3, [r7, #11]
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8010506:	210c      	movs	r1, #12
 8010508:	68f8      	ldr	r0, [r7, #12]
 801050a:	f000 fc23 	bl	8010d54 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 801050e:	2204      	movs	r2, #4
 8010510:	68f9      	ldr	r1, [r7, #12]
 8010512:	6878      	ldr	r0, [r7, #4]
 8010514:	f001 f8cc 	bl	80116b0 <dhcp_create_msg>
 8010518:	4603      	mov	r3, r0
 801051a:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
 801051c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d12a      	bne.n	801057a <dhcp_decline+0x86>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8010524:	2204      	movs	r2, #4
 8010526:	2132      	movs	r1, #50	; 0x32
 8010528:	68f8      	ldr	r0, [r7, #12]
 801052a:	f000 fc2d 	bl	8010d88 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010532:	4618      	mov	r0, r3
 8010534:	f7f8 fa87 	bl	8008a46 <lwip_htonl>
 8010538:	4603      	mov	r3, r0
 801053a:	4619      	mov	r1, r3
 801053c:	68f8      	ldr	r0, [r7, #12]
 801053e:	f000 fcbf 	bl	8010ec0 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 8010542:	68f8      	ldr	r0, [r7, #12]
 8010544:	f001 fa58 	bl	80119f8 <dhcp_option_trailer>
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	68da      	ldr	r2, [r3, #12]
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	8a9b      	ldrh	r3, [r3, #20]
 8010550:	33f0      	adds	r3, #240	; 0xf0
 8010552:	b29b      	uxth	r3, r3
 8010554:	4619      	mov	r1, r3
 8010556:	4610      	mov	r0, r2
 8010558:	f7f9 fdb2 	bl	800a0c0 <pbuf_realloc>

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 801055c:	4b16      	ldr	r3, [pc, #88]	; (80105b8 <dhcp_decline+0xc4>)
 801055e:	6818      	ldr	r0, [r3, #0]
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	68d9      	ldr	r1, [r3, #12]
 8010564:	4b15      	ldr	r3, [pc, #84]	; (80105bc <dhcp_decline+0xc8>)
 8010566:	9301      	str	r3, [sp, #4]
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	9300      	str	r3, [sp, #0]
 801056c:	2343      	movs	r3, #67	; 0x43
 801056e:	4a14      	ldr	r2, [pc, #80]	; (80105c0 <dhcp_decline+0xcc>)
 8010570:	f7ff f99c 	bl	800f8ac <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 8010574:	68f8      	ldr	r0, [r7, #12]
 8010576:	f001 f9fd 	bl	8011974 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	7a9b      	ldrb	r3, [r3, #10]
 801057e:	2bff      	cmp	r3, #255	; 0xff
 8010580:	d005      	beq.n	801058e <dhcp_decline+0x9a>
    dhcp->tries++;
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	7a9b      	ldrb	r3, [r3, #10]
 8010586:	3301      	adds	r3, #1
 8010588:	b2da      	uxtb	r2, r3
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	729a      	strb	r2, [r3, #10]
  }
  msecs = 10*1000;
 801058e:	f242 7310 	movw	r3, #10000	; 0x2710
 8010592:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8010594:	893b      	ldrh	r3, [r7, #8]
 8010596:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801059a:	4a0a      	ldr	r2, [pc, #40]	; (80105c4 <dhcp_decline+0xd0>)
 801059c:	fb82 1203 	smull	r1, r2, r2, r3
 80105a0:	1152      	asrs	r2, r2, #5
 80105a2:	17db      	asrs	r3, r3, #31
 80105a4:	1ad3      	subs	r3, r2, r3
 80105a6:	b29a      	uxth	r2, r3
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80105ac:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80105b0:	4618      	mov	r0, r3
 80105b2:	3710      	adds	r7, #16
 80105b4:	46bd      	mov	sp, r7
 80105b6:	bd80      	pop	{r7, pc}
 80105b8:	20004c40 	.word	0x20004c40
 80105bc:	08021d18 	.word	0x08021d18
 80105c0:	08021d1c 	.word	0x08021d1c
 80105c4:	10624dd3 	.word	0x10624dd3

080105c8 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b088      	sub	sp, #32
 80105cc:	af02      	add	r7, sp, #8
 80105ce:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105d4:	613b      	str	r3, [r7, #16]
  err_t result = ERR_OK;
 80105d6:	2300      	movs	r3, #0
 80105d8:	73fb      	strb	r3, [r7, #15]
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 80105da:	693b      	ldr	r3, [r7, #16]
 80105dc:	2200      	movs	r2, #0
 80105de:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 80105e0:	2106      	movs	r1, #6
 80105e2:	6938      	ldr	r0, [r7, #16]
 80105e4:	f000 fbb6 	bl	8010d54 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 80105e8:	2201      	movs	r2, #1
 80105ea:	6939      	ldr	r1, [r7, #16]
 80105ec:	6878      	ldr	r0, [r7, #4]
 80105ee:	f001 f85f 	bl	80116b0 <dhcp_create_msg>
 80105f2:	4603      	mov	r3, r0
 80105f4:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 80105f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d13b      	bne.n	8010676 <dhcp_discover+0xae>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80105fe:	2202      	movs	r2, #2
 8010600:	2139      	movs	r1, #57	; 0x39
 8010602:	6938      	ldr	r0, [r7, #16]
 8010604:	f000 fbc0 	bl	8010d88 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801060c:	4619      	mov	r1, r3
 801060e:	6938      	ldr	r0, [r7, #16]
 8010610:	f000 fc1c 	bl	8010e4c <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8010614:	2204      	movs	r2, #4
 8010616:	2137      	movs	r1, #55	; 0x37
 8010618:	6938      	ldr	r0, [r7, #16]
 801061a:	f000 fbb5 	bl	8010d88 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801061e:	2300      	movs	r3, #0
 8010620:	75fb      	strb	r3, [r7, #23]
 8010622:	e009      	b.n	8010638 <dhcp_discover+0x70>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8010624:	7dfb      	ldrb	r3, [r7, #23]
 8010626:	4a29      	ldr	r2, [pc, #164]	; (80106cc <dhcp_discover+0x104>)
 8010628:	5cd3      	ldrb	r3, [r2, r3]
 801062a:	4619      	mov	r1, r3
 801062c:	6938      	ldr	r0, [r7, #16]
 801062e:	f000 fbe5 	bl	8010dfc <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010632:	7dfb      	ldrb	r3, [r7, #23]
 8010634:	3301      	adds	r3, #1
 8010636:	75fb      	strb	r3, [r7, #23]
 8010638:	7dfb      	ldrb	r3, [r7, #23]
 801063a:	2b03      	cmp	r3, #3
 801063c:	d9f2      	bls.n	8010624 <dhcp_discover+0x5c>
    }
    dhcp_option_trailer(dhcp);
 801063e:	6938      	ldr	r0, [r7, #16]
 8010640:	f001 f9da 	bl	80119f8 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8010644:	693b      	ldr	r3, [r7, #16]
 8010646:	68da      	ldr	r2, [r3, #12]
 8010648:	693b      	ldr	r3, [r7, #16]
 801064a:	8a9b      	ldrh	r3, [r3, #20]
 801064c:	33f0      	adds	r3, #240	; 0xf0
 801064e:	b29b      	uxth	r3, r3
 8010650:	4619      	mov	r1, r3
 8010652:	4610      	mov	r0, r2
 8010654:	f7f9 fd34 	bl	800a0c0 <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8010658:	4b1d      	ldr	r3, [pc, #116]	; (80106d0 <dhcp_discover+0x108>)
 801065a:	6818      	ldr	r0, [r3, #0]
 801065c:	693b      	ldr	r3, [r7, #16]
 801065e:	68d9      	ldr	r1, [r3, #12]
 8010660:	4b1c      	ldr	r3, [pc, #112]	; (80106d4 <dhcp_discover+0x10c>)
 8010662:	9301      	str	r3, [sp, #4]
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	9300      	str	r3, [sp, #0]
 8010668:	2343      	movs	r3, #67	; 0x43
 801066a:	4a1b      	ldr	r2, [pc, #108]	; (80106d8 <dhcp_discover+0x110>)
 801066c:	f7ff f91e 	bl	800f8ac <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
 8010670:	6938      	ldr	r0, [r7, #16]
 8010672:	f001 f97f 	bl	8011974 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8010676:	693b      	ldr	r3, [r7, #16]
 8010678:	7a9b      	ldrb	r3, [r3, #10]
 801067a:	2bff      	cmp	r3, #255	; 0xff
 801067c:	d005      	beq.n	801068a <dhcp_discover+0xc2>
    dhcp->tries++;
 801067e:	693b      	ldr	r3, [r7, #16]
 8010680:	7a9b      	ldrb	r3, [r3, #10]
 8010682:	3301      	adds	r3, #1
 8010684:	b2da      	uxtb	r2, r3
 8010686:	693b      	ldr	r3, [r7, #16]
 8010688:	729a      	strb	r2, [r3, #10]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 801068a:	693b      	ldr	r3, [r7, #16]
 801068c:	7a9b      	ldrb	r3, [r3, #10]
 801068e:	2b05      	cmp	r3, #5
 8010690:	d807      	bhi.n	80106a2 <dhcp_discover+0xda>
 8010692:	693b      	ldr	r3, [r7, #16]
 8010694:	7a9b      	ldrb	r3, [r3, #10]
 8010696:	461a      	mov	r2, r3
 8010698:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801069c:	4093      	lsls	r3, r2
 801069e:	b29b      	uxth	r3, r3
 80106a0:	e001      	b.n	80106a6 <dhcp_discover+0xde>
 80106a2:	f64e 2360 	movw	r3, #60000	; 0xea60
 80106a6:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 80106a8:	89bb      	ldrh	r3, [r7, #12]
 80106aa:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80106ae:	4a0b      	ldr	r2, [pc, #44]	; (80106dc <dhcp_discover+0x114>)
 80106b0:	fb82 1203 	smull	r1, r2, r2, r3
 80106b4:	1152      	asrs	r2, r2, #5
 80106b6:	17db      	asrs	r3, r3, #31
 80106b8:	1ad3      	subs	r3, r2, r3
 80106ba:	b29a      	uxth	r2, r3
 80106bc:	693b      	ldr	r3, [r7, #16]
 80106be:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80106c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80106c4:	4618      	mov	r0, r3
 80106c6:	3718      	adds	r7, #24
 80106c8:	46bd      	mov	sp, r7
 80106ca:	bd80      	pop	{r7, pc}
 80106cc:	20000018 	.word	0x20000018
 80106d0:	20004c40 	.word	0x20004c40
 80106d4:	08021d18 	.word	0x08021d18
 80106d8:	08021d1c 	.word	0x08021d1c
 80106dc:	10624dd3 	.word	0x10624dd3

080106e0 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 80106e0:	b580      	push	{r7, lr}
 80106e2:	b088      	sub	sp, #32
 80106e4:	af00      	add	r7, sp, #0
 80106e6:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d107      	bne.n	80106fe <dhcp_bind+0x1e>
 80106ee:	4b64      	ldr	r3, [pc, #400]	; (8010880 <dhcp_bind+0x1a0>)
 80106f0:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80106f4:	4963      	ldr	r1, [pc, #396]	; (8010884 <dhcp_bind+0x1a4>)
 80106f6:	4864      	ldr	r0, [pc, #400]	; (8010888 <dhcp_bind+0x1a8>)
 80106f8:	f00a f810 	bl	801a71c <iprintf>
 80106fc:	e0bc      	b.n	8010878 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010702:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8010704:	69bb      	ldr	r3, [r7, #24]
 8010706:	2b00      	cmp	r3, #0
 8010708:	d107      	bne.n	801071a <dhcp_bind+0x3a>
 801070a:	4b5d      	ldr	r3, [pc, #372]	; (8010880 <dhcp_bind+0x1a0>)
 801070c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010710:	495e      	ldr	r1, [pc, #376]	; (801088c <dhcp_bind+0x1ac>)
 8010712:	485d      	ldr	r0, [pc, #372]	; (8010888 <dhcp_bind+0x1a8>)
 8010714:	f00a f802 	bl	801a71c <iprintf>
 8010718:	e0ae      	b.n	8010878 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801071a:	69bb      	ldr	r3, [r7, #24]
 801071c:	2200      	movs	r2, #0
 801071e:	841a      	strh	r2, [r3, #32]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8010720:	69bb      	ldr	r3, [r7, #24]
 8010722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010728:	d019      	beq.n	801075e <dhcp_bind+0x7e>
     /* set renewal period timer */
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801072a:	69bb      	ldr	r3, [r7, #24]
 801072c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801072e:	331e      	adds	r3, #30
 8010730:	4a57      	ldr	r2, [pc, #348]	; (8010890 <dhcp_bind+0x1b0>)
 8010732:	fba2 2303 	umull	r2, r3, r2, r3
 8010736:	095b      	lsrs	r3, r3, #5
 8010738:	61fb      	str	r3, [r7, #28]
     if (timeout > 0xffff) {
 801073a:	69fb      	ldr	r3, [r7, #28]
 801073c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010740:	d302      	bcc.n	8010748 <dhcp_bind+0x68>
       timeout = 0xffff;
 8010742:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010746:	61fb      	str	r3, [r7, #28]
     }
     dhcp->t0_timeout = (u16_t)timeout;
 8010748:	69fb      	ldr	r3, [r7, #28]
 801074a:	b29a      	uxth	r2, r3
 801074c:	69bb      	ldr	r3, [r7, #24]
 801074e:	845a      	strh	r2, [r3, #34]	; 0x22
     if (dhcp->t0_timeout == 0) {
 8010750:	69bb      	ldr	r3, [r7, #24]
 8010752:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8010754:	2b00      	cmp	r3, #0
 8010756:	d102      	bne.n	801075e <dhcp_bind+0x7e>
       dhcp->t0_timeout = 1;
 8010758:	69bb      	ldr	r3, [r7, #24]
 801075a:	2201      	movs	r2, #1
 801075c:	845a      	strh	r2, [r3, #34]	; 0x22
     }
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease*1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801075e:	69bb      	ldr	r3, [r7, #24]
 8010760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010766:	d01d      	beq.n	80107a4 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8010768:	69bb      	ldr	r3, [r7, #24]
 801076a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801076c:	331e      	adds	r3, #30
 801076e:	4a48      	ldr	r2, [pc, #288]	; (8010890 <dhcp_bind+0x1b0>)
 8010770:	fba2 2303 	umull	r2, r3, r2, r3
 8010774:	095b      	lsrs	r3, r3, #5
 8010776:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8010778:	69fb      	ldr	r3, [r7, #28]
 801077a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801077e:	d302      	bcc.n	8010786 <dhcp_bind+0xa6>
      timeout = 0xffff;
 8010780:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010784:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8010786:	69fb      	ldr	r3, [r7, #28]
 8010788:	b29a      	uxth	r2, r3
 801078a:	69bb      	ldr	r3, [r7, #24]
 801078c:	831a      	strh	r2, [r3, #24]
    if (dhcp->t1_timeout == 0) {
 801078e:	69bb      	ldr	r3, [r7, #24]
 8010790:	8b1b      	ldrh	r3, [r3, #24]
 8010792:	2b00      	cmp	r3, #0
 8010794:	d102      	bne.n	801079c <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8010796:	69bb      	ldr	r3, [r7, #24]
 8010798:	2201      	movs	r2, #1
 801079a:	831a      	strh	r2, [r3, #24]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801079c:	69bb      	ldr	r3, [r7, #24]
 801079e:	8b1a      	ldrh	r2, [r3, #24]
 80107a0:	69bb      	ldr	r3, [r7, #24]
 80107a2:	839a      	strh	r2, [r3, #28]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80107a4:	69bb      	ldr	r3, [r7, #24]
 80107a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80107a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107ac:	d01d      	beq.n	80107ea <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80107ae:	69bb      	ldr	r3, [r7, #24]
 80107b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80107b2:	331e      	adds	r3, #30
 80107b4:	4a36      	ldr	r2, [pc, #216]	; (8010890 <dhcp_bind+0x1b0>)
 80107b6:	fba2 2303 	umull	r2, r3, r2, r3
 80107ba:	095b      	lsrs	r3, r3, #5
 80107bc:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80107be:	69fb      	ldr	r3, [r7, #28]
 80107c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80107c4:	d302      	bcc.n	80107cc <dhcp_bind+0xec>
      timeout = 0xffff;
 80107c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80107ca:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 80107cc:	69fb      	ldr	r3, [r7, #28]
 80107ce:	b29a      	uxth	r2, r3
 80107d0:	69bb      	ldr	r3, [r7, #24]
 80107d2:	835a      	strh	r2, [r3, #26]
    if (dhcp->t2_timeout == 0) {
 80107d4:	69bb      	ldr	r3, [r7, #24]
 80107d6:	8b5b      	ldrh	r3, [r3, #26]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d102      	bne.n	80107e2 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 80107dc:	69bb      	ldr	r3, [r7, #24]
 80107de:	2201      	movs	r2, #1
 80107e0:	835a      	strh	r2, [r3, #26]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80107e2:	69bb      	ldr	r3, [r7, #24]
 80107e4:	8b5a      	ldrh	r2, [r3, #26]
 80107e6:	69bb      	ldr	r3, [r7, #24]
 80107e8:	83da      	strh	r2, [r3, #30]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80107ea:	69bb      	ldr	r3, [r7, #24]
 80107ec:	8b1a      	ldrh	r2, [r3, #24]
 80107ee:	69bb      	ldr	r3, [r7, #24]
 80107f0:	8b5b      	ldrh	r3, [r3, #26]
 80107f2:	429a      	cmp	r2, r3
 80107f4:	d306      	bcc.n	8010804 <dhcp_bind+0x124>
 80107f6:	69bb      	ldr	r3, [r7, #24]
 80107f8:	8b5b      	ldrh	r3, [r3, #26]
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d002      	beq.n	8010804 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 80107fe:	69bb      	ldr	r3, [r7, #24]
 8010800:	2200      	movs	r2, #0
 8010802:	831a      	strh	r2, [r3, #24]
  }

  if (dhcp->subnet_mask_given) {
 8010804:	69bb      	ldr	r3, [r7, #24]
 8010806:	7adb      	ldrb	r3, [r3, #11]
 8010808:	2b00      	cmp	r3, #0
 801080a:	d003      	beq.n	8010814 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801080c:	69bb      	ldr	r3, [r7, #24]
 801080e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010810:	613b      	str	r3, [r7, #16]
 8010812:	e014      	b.n	801083e <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8010814:	69bb      	ldr	r3, [r7, #24]
 8010816:	3328      	adds	r3, #40	; 0x28
 8010818:	781b      	ldrb	r3, [r3, #0]
 801081a:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801081c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010820:	2b00      	cmp	r3, #0
 8010822:	db02      	blt.n	801082a <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8010824:	23ff      	movs	r3, #255	; 0xff
 8010826:	613b      	str	r3, [r7, #16]
 8010828:	e009      	b.n	801083e <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801082a:	7dfb      	ldrb	r3, [r7, #23]
 801082c:	2bbf      	cmp	r3, #191	; 0xbf
 801082e:	d903      	bls.n	8010838 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8010830:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8010834:	613b      	str	r3, [r7, #16]
 8010836:	e002      	b.n	801083e <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8010838:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801083c:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801083e:	69bb      	ldr	r3, [r7, #24]
 8010840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010842:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	2b00      	cmp	r3, #0
 8010848:	d108      	bne.n	801085c <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801084a:	69bb      	ldr	r3, [r7, #24]
 801084c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801084e:	693b      	ldr	r3, [r7, #16]
 8010850:	4013      	ands	r3, r2
 8010852:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801085a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 801085c:	210a      	movs	r1, #10
 801085e:	69b8      	ldr	r0, [r7, #24]
 8010860:	f000 fa78 	bl	8010d54 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8010864:	69bb      	ldr	r3, [r7, #24]
 8010866:	f103 0128 	add.w	r1, r3, #40	; 0x28
 801086a:	f107 030c 	add.w	r3, r7, #12
 801086e:	f107 0210 	add.w	r2, r7, #16
 8010872:	6878      	ldr	r0, [r7, #4]
 8010874:	f7f9 f86a 	bl	800994c <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8010878:	3720      	adds	r7, #32
 801087a:	46bd      	mov	sp, r7
 801087c:	bd80      	pop	{r7, pc}
 801087e:	bf00      	nop
 8010880:	0801f8bc 	.word	0x0801f8bc
 8010884:	0801f9fc 	.word	0x0801f9fc
 8010888:	0801f91c 	.word	0x0801f91c
 801088c:	0801fa18 	.word	0x0801fa18
 8010890:	88888889 	.word	0x88888889

08010894 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8010894:	b580      	push	{r7, lr}
 8010896:	b088      	sub	sp, #32
 8010898:	af02      	add	r7, sp, #8
 801089a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108a0:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80108a2:	2105      	movs	r1, #5
 80108a4:	6938      	ldr	r0, [r7, #16]
 80108a6:	f000 fa55 	bl	8010d54 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 80108aa:	2203      	movs	r2, #3
 80108ac:	6939      	ldr	r1, [r7, #16]
 80108ae:	6878      	ldr	r0, [r7, #4]
 80108b0:	f000 fefe 	bl	80116b0 <dhcp_create_msg>
 80108b4:	4603      	mov	r3, r0
 80108b6:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 80108b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d13b      	bne.n	8010938 <dhcp_renew+0xa4>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80108c0:	2202      	movs	r2, #2
 80108c2:	2139      	movs	r1, #57	; 0x39
 80108c4:	6938      	ldr	r0, [r7, #16]
 80108c6:	f000 fa5f 	bl	8010d88 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80108ce:	4619      	mov	r1, r3
 80108d0:	6938      	ldr	r0, [r7, #16]
 80108d2:	f000 fabb 	bl	8010e4c <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80108d6:	2204      	movs	r2, #4
 80108d8:	2137      	movs	r1, #55	; 0x37
 80108da:	6938      	ldr	r0, [r7, #16]
 80108dc:	f000 fa54 	bl	8010d88 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80108e0:	2300      	movs	r3, #0
 80108e2:	75fb      	strb	r3, [r7, #23]
 80108e4:	e009      	b.n	80108fa <dhcp_renew+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 80108e6:	7dfb      	ldrb	r3, [r7, #23]
 80108e8:	4a2a      	ldr	r2, [pc, #168]	; (8010994 <dhcp_renew+0x100>)
 80108ea:	5cd3      	ldrb	r3, [r2, r3]
 80108ec:	4619      	mov	r1, r3
 80108ee:	6938      	ldr	r0, [r7, #16]
 80108f0:	f000 fa84 	bl	8010dfc <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80108f4:	7dfb      	ldrb	r3, [r7, #23]
 80108f6:	3301      	adds	r3, #1
 80108f8:	75fb      	strb	r3, [r7, #23]
 80108fa:	7dfb      	ldrb	r3, [r7, #23]
 80108fc:	2b03      	cmp	r3, #3
 80108fe:	d9f2      	bls.n	80108e6 <dhcp_renew+0x52>
#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
 8010900:	6938      	ldr	r0, [r7, #16]
 8010902:	f001 f879 	bl	80119f8 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8010906:	693b      	ldr	r3, [r7, #16]
 8010908:	68da      	ldr	r2, [r3, #12]
 801090a:	693b      	ldr	r3, [r7, #16]
 801090c:	8a9b      	ldrh	r3, [r3, #20]
 801090e:	33f0      	adds	r3, #240	; 0xf0
 8010910:	b29b      	uxth	r3, r3
 8010912:	4619      	mov	r1, r3
 8010914:	4610      	mov	r0, r2
 8010916:	f7f9 fbd3 	bl	800a0c0 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 801091a:	4b1f      	ldr	r3, [pc, #124]	; (8010998 <dhcp_renew+0x104>)
 801091c:	6818      	ldr	r0, [r3, #0]
 801091e:	693b      	ldr	r3, [r7, #16]
 8010920:	68d9      	ldr	r1, [r3, #12]
 8010922:	693b      	ldr	r3, [r7, #16]
 8010924:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	9300      	str	r3, [sp, #0]
 801092c:	2343      	movs	r3, #67	; 0x43
 801092e:	f7fe ff7f 	bl	800f830 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8010932:	6938      	ldr	r0, [r7, #16]
 8010934:	f001 f81e 	bl	8011974 <dhcp_delete_msg>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8010938:	693b      	ldr	r3, [r7, #16]
 801093a:	7a9b      	ldrb	r3, [r3, #10]
 801093c:	2bff      	cmp	r3, #255	; 0xff
 801093e:	d005      	beq.n	801094c <dhcp_renew+0xb8>
    dhcp->tries++;
 8010940:	693b      	ldr	r3, [r7, #16]
 8010942:	7a9b      	ldrb	r3, [r3, #10]
 8010944:	3301      	adds	r3, #1
 8010946:	b2da      	uxtb	r2, r3
 8010948:	693b      	ldr	r3, [r7, #16]
 801094a:	729a      	strb	r2, [r3, #10]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 801094c:	693b      	ldr	r3, [r7, #16]
 801094e:	7a9b      	ldrb	r3, [r3, #10]
 8010950:	2b09      	cmp	r3, #9
 8010952:	d80a      	bhi.n	801096a <dhcp_renew+0xd6>
 8010954:	693b      	ldr	r3, [r7, #16]
 8010956:	7a9b      	ldrb	r3, [r3, #10]
 8010958:	b29b      	uxth	r3, r3
 801095a:	461a      	mov	r2, r3
 801095c:	0152      	lsls	r2, r2, #5
 801095e:	1ad2      	subs	r2, r2, r3
 8010960:	0092      	lsls	r2, r2, #2
 8010962:	4413      	add	r3, r2
 8010964:	011b      	lsls	r3, r3, #4
 8010966:	b29b      	uxth	r3, r3
 8010968:	e001      	b.n	801096e <dhcp_renew+0xda>
 801096a:	f644 6320 	movw	r3, #20000	; 0x4e20
 801096e:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8010970:	89bb      	ldrh	r3, [r7, #12]
 8010972:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8010976:	4a09      	ldr	r2, [pc, #36]	; (801099c <dhcp_renew+0x108>)
 8010978:	fb82 1203 	smull	r1, r2, r2, r3
 801097c:	1152      	asrs	r2, r2, #5
 801097e:	17db      	asrs	r3, r3, #31
 8010980:	1ad3      	subs	r3, r2, r3
 8010982:	b29a      	uxth	r2, r3
 8010984:	693b      	ldr	r3, [r7, #16]
 8010986:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010988:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801098c:	4618      	mov	r0, r3
 801098e:	3718      	adds	r7, #24
 8010990:	46bd      	mov	sp, r7
 8010992:	bd80      	pop	{r7, pc}
 8010994:	20000018 	.word	0x20000018
 8010998:	20004c40 	.word	0x20004c40
 801099c:	10624dd3 	.word	0x10624dd3

080109a0 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 80109a0:	b580      	push	{r7, lr}
 80109a2:	b088      	sub	sp, #32
 80109a4:	af02      	add	r7, sp, #8
 80109a6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109ac:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 80109ae:	2104      	movs	r1, #4
 80109b0:	6938      	ldr	r0, [r7, #16]
 80109b2:	f000 f9cf 	bl	8010d54 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 80109b6:	2203      	movs	r2, #3
 80109b8:	6939      	ldr	r1, [r7, #16]
 80109ba:	6878      	ldr	r0, [r7, #4]
 80109bc:	f000 fe78 	bl	80116b0 <dhcp_create_msg>
 80109c0:	4603      	mov	r3, r0
 80109c2:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 80109c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d139      	bne.n	8010a40 <dhcp_rebind+0xa0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80109cc:	2202      	movs	r2, #2
 80109ce:	2139      	movs	r1, #57	; 0x39
 80109d0:	6938      	ldr	r0, [r7, #16]
 80109d2:	f000 f9d9 	bl	8010d88 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80109da:	4619      	mov	r1, r3
 80109dc:	6938      	ldr	r0, [r7, #16]
 80109de:	f000 fa35 	bl	8010e4c <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80109e2:	2204      	movs	r2, #4
 80109e4:	2137      	movs	r1, #55	; 0x37
 80109e6:	6938      	ldr	r0, [r7, #16]
 80109e8:	f000 f9ce 	bl	8010d88 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80109ec:	2300      	movs	r3, #0
 80109ee:	75fb      	strb	r3, [r7, #23]
 80109f0:	e009      	b.n	8010a06 <dhcp_rebind+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 80109f2:	7dfb      	ldrb	r3, [r7, #23]
 80109f4:	4a29      	ldr	r2, [pc, #164]	; (8010a9c <dhcp_rebind+0xfc>)
 80109f6:	5cd3      	ldrb	r3, [r2, r3]
 80109f8:	4619      	mov	r1, r3
 80109fa:	6938      	ldr	r0, [r7, #16]
 80109fc:	f000 f9fe 	bl	8010dfc <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010a00:	7dfb      	ldrb	r3, [r7, #23]
 8010a02:	3301      	adds	r3, #1
 8010a04:	75fb      	strb	r3, [r7, #23]
 8010a06:	7dfb      	ldrb	r3, [r7, #23]
 8010a08:	2b03      	cmp	r3, #3
 8010a0a:	d9f2      	bls.n	80109f2 <dhcp_rebind+0x52>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 8010a0c:	6938      	ldr	r0, [r7, #16]
 8010a0e:	f000 fff3 	bl	80119f8 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8010a12:	693b      	ldr	r3, [r7, #16]
 8010a14:	68da      	ldr	r2, [r3, #12]
 8010a16:	693b      	ldr	r3, [r7, #16]
 8010a18:	8a9b      	ldrh	r3, [r3, #20]
 8010a1a:	33f0      	adds	r3, #240	; 0xf0
 8010a1c:	b29b      	uxth	r3, r3
 8010a1e:	4619      	mov	r1, r3
 8010a20:	4610      	mov	r0, r2
 8010a22:	f7f9 fb4d 	bl	800a0c0 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 8010a26:	4b1e      	ldr	r3, [pc, #120]	; (8010aa0 <dhcp_rebind+0x100>)
 8010a28:	6818      	ldr	r0, [r3, #0]
 8010a2a:	693b      	ldr	r3, [r7, #16]
 8010a2c:	68d9      	ldr	r1, [r3, #12]
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	9300      	str	r3, [sp, #0]
 8010a32:	2343      	movs	r3, #67	; 0x43
 8010a34:	4a1b      	ldr	r2, [pc, #108]	; (8010aa4 <dhcp_rebind+0x104>)
 8010a36:	f7fe fefb 	bl	800f830 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8010a3a:	6938      	ldr	r0, [r7, #16]
 8010a3c:	f000 ff9a 	bl	8011974 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8010a40:	693b      	ldr	r3, [r7, #16]
 8010a42:	7a9b      	ldrb	r3, [r3, #10]
 8010a44:	2bff      	cmp	r3, #255	; 0xff
 8010a46:	d005      	beq.n	8010a54 <dhcp_rebind+0xb4>
    dhcp->tries++;
 8010a48:	693b      	ldr	r3, [r7, #16]
 8010a4a:	7a9b      	ldrb	r3, [r3, #10]
 8010a4c:	3301      	adds	r3, #1
 8010a4e:	b2da      	uxtb	r2, r3
 8010a50:	693b      	ldr	r3, [r7, #16]
 8010a52:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 8010a54:	693b      	ldr	r3, [r7, #16]
 8010a56:	7a9b      	ldrb	r3, [r3, #10]
 8010a58:	2b09      	cmp	r3, #9
 8010a5a:	d80a      	bhi.n	8010a72 <dhcp_rebind+0xd2>
 8010a5c:	693b      	ldr	r3, [r7, #16]
 8010a5e:	7a9b      	ldrb	r3, [r3, #10]
 8010a60:	b29b      	uxth	r3, r3
 8010a62:	461a      	mov	r2, r3
 8010a64:	0152      	lsls	r2, r2, #5
 8010a66:	1ad2      	subs	r2, r2, r3
 8010a68:	0092      	lsls	r2, r2, #2
 8010a6a:	4413      	add	r3, r2
 8010a6c:	00db      	lsls	r3, r3, #3
 8010a6e:	b29b      	uxth	r3, r3
 8010a70:	e001      	b.n	8010a76 <dhcp_rebind+0xd6>
 8010a72:	f242 7310 	movw	r3, #10000	; 0x2710
 8010a76:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8010a78:	89bb      	ldrh	r3, [r7, #12]
 8010a7a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8010a7e:	4a0a      	ldr	r2, [pc, #40]	; (8010aa8 <dhcp_rebind+0x108>)
 8010a80:	fb82 1203 	smull	r1, r2, r2, r3
 8010a84:	1152      	asrs	r2, r2, #5
 8010a86:	17db      	asrs	r3, r3, #31
 8010a88:	1ad3      	subs	r3, r2, r3
 8010a8a:	b29a      	uxth	r2, r3
 8010a8c:	693b      	ldr	r3, [r7, #16]
 8010a8e:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010a90:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010a94:	4618      	mov	r0, r3
 8010a96:	3718      	adds	r7, #24
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	bd80      	pop	{r7, pc}
 8010a9c:	20000018 	.word	0x20000018
 8010aa0:	20004c40 	.word	0x20004c40
 8010aa4:	08021d1c 	.word	0x08021d1c
 8010aa8:	10624dd3 	.word	0x10624dd3

08010aac <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8010aac:	b580      	push	{r7, lr}
 8010aae:	b088      	sub	sp, #32
 8010ab0:	af02      	add	r7, sp, #8
 8010ab2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ab8:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8010aba:	2103      	movs	r1, #3
 8010abc:	6938      	ldr	r0, [r7, #16]
 8010abe:	f000 f949 	bl	8010d54 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8010ac2:	2203      	movs	r2, #3
 8010ac4:	6939      	ldr	r1, [r7, #16]
 8010ac6:	6878      	ldr	r0, [r7, #4]
 8010ac8:	f000 fdf2 	bl	80116b0 <dhcp_create_msg>
 8010acc:	4603      	mov	r3, r0
 8010ace:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 8010ad0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d147      	bne.n	8010b68 <dhcp_reboot+0xbc>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8010ad8:	2202      	movs	r2, #2
 8010ada:	2139      	movs	r1, #57	; 0x39
 8010adc:	6938      	ldr	r0, [r7, #16]
 8010ade:	f000 f953 	bl	8010d88 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8010ae2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010ae6:	6938      	ldr	r0, [r7, #16]
 8010ae8:	f000 f9b0 	bl	8010e4c <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8010aec:	2204      	movs	r2, #4
 8010aee:	2132      	movs	r1, #50	; 0x32
 8010af0:	6938      	ldr	r0, [r7, #16]
 8010af2:	f000 f949 	bl	8010d88 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8010af6:	693b      	ldr	r3, [r7, #16]
 8010af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010afa:	4618      	mov	r0, r3
 8010afc:	f7f7 ffa3 	bl	8008a46 <lwip_htonl>
 8010b00:	4603      	mov	r3, r0
 8010b02:	4619      	mov	r1, r3
 8010b04:	6938      	ldr	r0, [r7, #16]
 8010b06:	f000 f9db 	bl	8010ec0 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8010b0a:	2204      	movs	r2, #4
 8010b0c:	2137      	movs	r1, #55	; 0x37
 8010b0e:	6938      	ldr	r0, [r7, #16]
 8010b10:	f000 f93a 	bl	8010d88 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010b14:	2300      	movs	r3, #0
 8010b16:	75fb      	strb	r3, [r7, #23]
 8010b18:	e009      	b.n	8010b2e <dhcp_reboot+0x82>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8010b1a:	7dfb      	ldrb	r3, [r7, #23]
 8010b1c:	4a29      	ldr	r2, [pc, #164]	; (8010bc4 <dhcp_reboot+0x118>)
 8010b1e:	5cd3      	ldrb	r3, [r2, r3]
 8010b20:	4619      	mov	r1, r3
 8010b22:	6938      	ldr	r0, [r7, #16]
 8010b24:	f000 f96a 	bl	8010dfc <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010b28:	7dfb      	ldrb	r3, [r7, #23]
 8010b2a:	3301      	adds	r3, #1
 8010b2c:	75fb      	strb	r3, [r7, #23]
 8010b2e:	7dfb      	ldrb	r3, [r7, #23]
 8010b30:	2b03      	cmp	r3, #3
 8010b32:	d9f2      	bls.n	8010b1a <dhcp_reboot+0x6e>
    }

    dhcp_option_trailer(dhcp);
 8010b34:	6938      	ldr	r0, [r7, #16]
 8010b36:	f000 ff5f 	bl	80119f8 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8010b3a:	693b      	ldr	r3, [r7, #16]
 8010b3c:	68da      	ldr	r2, [r3, #12]
 8010b3e:	693b      	ldr	r3, [r7, #16]
 8010b40:	8a9b      	ldrh	r3, [r3, #20]
 8010b42:	33f0      	adds	r3, #240	; 0xf0
 8010b44:	b29b      	uxth	r3, r3
 8010b46:	4619      	mov	r1, r3
 8010b48:	4610      	mov	r0, r2
 8010b4a:	f7f9 fab9 	bl	800a0c0 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 8010b4e:	4b1e      	ldr	r3, [pc, #120]	; (8010bc8 <dhcp_reboot+0x11c>)
 8010b50:	6818      	ldr	r0, [r3, #0]
 8010b52:	693b      	ldr	r3, [r7, #16]
 8010b54:	68d9      	ldr	r1, [r3, #12]
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	9300      	str	r3, [sp, #0]
 8010b5a:	2343      	movs	r3, #67	; 0x43
 8010b5c:	4a1b      	ldr	r2, [pc, #108]	; (8010bcc <dhcp_reboot+0x120>)
 8010b5e:	f7fe fe67 	bl	800f830 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8010b62:	6938      	ldr	r0, [r7, #16]
 8010b64:	f000 ff06 	bl	8011974 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8010b68:	693b      	ldr	r3, [r7, #16]
 8010b6a:	7a9b      	ldrb	r3, [r3, #10]
 8010b6c:	2bff      	cmp	r3, #255	; 0xff
 8010b6e:	d005      	beq.n	8010b7c <dhcp_reboot+0xd0>
    dhcp->tries++;
 8010b70:	693b      	ldr	r3, [r7, #16]
 8010b72:	7a9b      	ldrb	r3, [r3, #10]
 8010b74:	3301      	adds	r3, #1
 8010b76:	b2da      	uxtb	r2, r3
 8010b78:	693b      	ldr	r3, [r7, #16]
 8010b7a:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 8010b7c:	693b      	ldr	r3, [r7, #16]
 8010b7e:	7a9b      	ldrb	r3, [r3, #10]
 8010b80:	2b09      	cmp	r3, #9
 8010b82:	d80a      	bhi.n	8010b9a <dhcp_reboot+0xee>
 8010b84:	693b      	ldr	r3, [r7, #16]
 8010b86:	7a9b      	ldrb	r3, [r3, #10]
 8010b88:	b29b      	uxth	r3, r3
 8010b8a:	461a      	mov	r2, r3
 8010b8c:	0152      	lsls	r2, r2, #5
 8010b8e:	1ad2      	subs	r2, r2, r3
 8010b90:	0092      	lsls	r2, r2, #2
 8010b92:	4413      	add	r3, r2
 8010b94:	00db      	lsls	r3, r3, #3
 8010b96:	b29b      	uxth	r3, r3
 8010b98:	e001      	b.n	8010b9e <dhcp_reboot+0xf2>
 8010b9a:	f242 7310 	movw	r3, #10000	; 0x2710
 8010b9e:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8010ba0:	89bb      	ldrh	r3, [r7, #12]
 8010ba2:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8010ba6:	4a0a      	ldr	r2, [pc, #40]	; (8010bd0 <dhcp_reboot+0x124>)
 8010ba8:	fb82 1203 	smull	r1, r2, r2, r3
 8010bac:	1152      	asrs	r2, r2, #5
 8010bae:	17db      	asrs	r3, r3, #31
 8010bb0:	1ad3      	subs	r3, r2, r3
 8010bb2:	b29a      	uxth	r2, r3
 8010bb4:	693b      	ldr	r3, [r7, #16]
 8010bb6:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010bb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	3718      	adds	r7, #24
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	bd80      	pop	{r7, pc}
 8010bc4:	20000018 	.word	0x20000018
 8010bc8:	20004c40 	.word	0x20004c40
 8010bcc:	08021d1c 	.word	0x08021d1c
 8010bd0:	10624dd3 	.word	0x10624dd3

08010bd4 <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
 8010bd4:	b580      	push	{r7, lr}
 8010bd6:	b088      	sub	sp, #32
 8010bd8:	af02      	add	r7, sp, #8
 8010bda:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010be0:	617b      	str	r3, [r7, #20]
  err_t result;
  ip_addr_t server_ip_addr;
  u8_t is_dhcp_supplied_address;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
  if (dhcp == NULL) {
 8010be2:	697b      	ldr	r3, [r7, #20]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d102      	bne.n	8010bee <dhcp_release+0x1a>
    return ERR_ARG;
 8010be8:	f06f 030f 	mvn.w	r3, #15
 8010bec:	e072      	b.n	8010cd4 <dhcp_release+0x100>
  }
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8010bee:	697b      	ldr	r3, [r7, #20]
 8010bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bf2:	60fb      	str	r3, [r7, #12]

  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 8010bf4:	6878      	ldr	r0, [r7, #4]
 8010bf6:	f000 ff59 	bl	8011aac <dhcp_supplied_address>
 8010bfa:	4603      	mov	r3, r0
 8010bfc:	74fb      	strb	r3, [r7, #19]

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8010bfe:	2100      	movs	r1, #0
 8010c00:	6978      	ldr	r0, [r7, #20]
 8010c02:	f000 f8a7 	bl	8010d54 <dhcp_set_state>
  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8010c06:	697b      	ldr	r3, [r7, #20]
 8010c08:	2200      	movs	r2, #0
 8010c0a:	625a      	str	r2, [r3, #36]	; 0x24
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8010c0c:	697b      	ldr	r3, [r7, #20]
 8010c0e:	2200      	movs	r2, #0
 8010c10:	629a      	str	r2, [r3, #40]	; 0x28
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8010c12:	697b      	ldr	r3, [r7, #20]
 8010c14:	2200      	movs	r2, #0
 8010c16:	62da      	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8010c18:	697b      	ldr	r3, [r7, #20]
 8010c1a:	2200      	movs	r2, #0
 8010c1c:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8010c1e:	697b      	ldr	r3, [r7, #20]
 8010c20:	2200      	movs	r2, #0
 8010c22:	63da      	str	r2, [r3, #60]	; 0x3c
 8010c24:	697b      	ldr	r3, [r7, #20]
 8010c26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010c28:	697b      	ldr	r3, [r7, #20]
 8010c2a:	639a      	str	r2, [r3, #56]	; 0x38
 8010c2c:	697b      	ldr	r3, [r7, #20]
 8010c2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010c30:	697b      	ldr	r3, [r7, #20]
 8010c32:	635a      	str	r2, [r3, #52]	; 0x34
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8010c34:	697b      	ldr	r3, [r7, #20]
 8010c36:	2200      	movs	r2, #0
 8010c38:	845a      	strh	r2, [r3, #34]	; 0x22
 8010c3a:	697b      	ldr	r3, [r7, #20]
 8010c3c:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8010c3e:	697b      	ldr	r3, [r7, #20]
 8010c40:	841a      	strh	r2, [r3, #32]
 8010c42:	697b      	ldr	r3, [r7, #20]
 8010c44:	8c1a      	ldrh	r2, [r3, #32]
 8010c46:	697b      	ldr	r3, [r7, #20]
 8010c48:	83da      	strh	r2, [r3, #30]
 8010c4a:	697b      	ldr	r3, [r7, #20]
 8010c4c:	8bda      	ldrh	r2, [r3, #30]
 8010c4e:	697b      	ldr	r3, [r7, #20]
 8010c50:	839a      	strh	r2, [r3, #28]

  if (!is_dhcp_supplied_address) {
 8010c52:	7cfb      	ldrb	r3, [r7, #19]
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d101      	bne.n	8010c5c <dhcp_release+0x88>
    /* don't issue release message when address is not dhcp-assigned */
    return ERR_OK;
 8010c58:	2300      	movs	r3, #0
 8010c5a:	e03b      	b.n	8010cd4 <dhcp_release+0x100>
  }

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 8010c5c:	2207      	movs	r2, #7
 8010c5e:	6979      	ldr	r1, [r7, #20]
 8010c60:	6878      	ldr	r0, [r7, #4]
 8010c62:	f000 fd25 	bl	80116b0 <dhcp_create_msg>
 8010c66:	4603      	mov	r3, r0
 8010c68:	74bb      	strb	r3, [r7, #18]
  if (result == ERR_OK) {
 8010c6a:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d128      	bne.n	8010cc4 <dhcp_release+0xf0>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 8010c72:	2204      	movs	r2, #4
 8010c74:	2136      	movs	r1, #54	; 0x36
 8010c76:	6978      	ldr	r0, [r7, #20]
 8010c78:	f000 f886 	bl	8010d88 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	4618      	mov	r0, r3
 8010c80:	f7f7 fee1 	bl	8008a46 <lwip_htonl>
 8010c84:	4603      	mov	r3, r0
 8010c86:	4619      	mov	r1, r3
 8010c88:	6978      	ldr	r0, [r7, #20]
 8010c8a:	f000 f919 	bl	8010ec0 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 8010c8e:	6978      	ldr	r0, [r7, #20]
 8010c90:	f000 feb2 	bl	80119f8 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8010c94:	697b      	ldr	r3, [r7, #20]
 8010c96:	68da      	ldr	r2, [r3, #12]
 8010c98:	697b      	ldr	r3, [r7, #20]
 8010c9a:	8a9b      	ldrh	r3, [r3, #20]
 8010c9c:	33f0      	adds	r3, #240	; 0xf0
 8010c9e:	b29b      	uxth	r3, r3
 8010ca0:	4619      	mov	r1, r3
 8010ca2:	4610      	mov	r0, r2
 8010ca4:	f7f9 fa0c 	bl	800a0c0 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
 8010ca8:	4b0c      	ldr	r3, [pc, #48]	; (8010cdc <dhcp_release+0x108>)
 8010caa:	6818      	ldr	r0, [r3, #0]
 8010cac:	697b      	ldr	r3, [r7, #20]
 8010cae:	68d9      	ldr	r1, [r3, #12]
 8010cb0:	f107 020c 	add.w	r2, r7, #12
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	9300      	str	r3, [sp, #0]
 8010cb8:	2343      	movs	r3, #67	; 0x43
 8010cba:	f7fe fdb9 	bl	800f830 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8010cbe:	6978      	ldr	r0, [r7, #20]
 8010cc0:	f000 fe58 	bl	8011974 <dhcp_delete_msg>
  } else {
    /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8010cc4:	4b06      	ldr	r3, [pc, #24]	; (8010ce0 <dhcp_release+0x10c>)
 8010cc6:	4a06      	ldr	r2, [pc, #24]	; (8010ce0 <dhcp_release+0x10c>)
 8010cc8:	4905      	ldr	r1, [pc, #20]	; (8010ce0 <dhcp_release+0x10c>)
 8010cca:	6878      	ldr	r0, [r7, #4]
 8010ccc:	f7f8 fe3e 	bl	800994c <netif_set_addr>

  return result;
 8010cd0:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	3718      	adds	r7, #24
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	bd80      	pop	{r7, pc}
 8010cdc:	20004c40 	.word	0x20004c40
 8010ce0:	08021d18 	.word	0x08021d18

08010ce4 <dhcp_stop>:
 *
 * @param netif The network interface to stop DHCP on
 */
void
dhcp_stop(struct netif *netif)
{
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	b084      	sub	sp, #16
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d107      	bne.n	8010d02 <dhcp_stop+0x1e>
 8010cf2:	4b14      	ldr	r3, [pc, #80]	; (8010d44 <dhcp_stop+0x60>)
 8010cf4:	f240 5242 	movw	r2, #1346	; 0x542
 8010cf8:	4913      	ldr	r1, [pc, #76]	; (8010d48 <dhcp_stop+0x64>)
 8010cfa:	4814      	ldr	r0, [pc, #80]	; (8010d4c <dhcp_stop+0x68>)
 8010cfc:	f009 fd0e 	bl	801a71c <iprintf>
 8010d00:	e01d      	b.n	8010d3e <dhcp_stop+0x5a>
  dhcp = netif_dhcp_data(netif);
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d06:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
  /* netif is DHCP configured? */
  if (dhcp != NULL) {
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d017      	beq.n	8010d3e <dhcp_stop+0x5a>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */

    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	685b      	ldr	r3, [r3, #4]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d006      	beq.n	8010d24 <dhcp_stop+0x40>
 8010d16:	4b0b      	ldr	r3, [pc, #44]	; (8010d44 <dhcp_stop+0x60>)
 8010d18:	f240 524f 	movw	r2, #1359	; 0x54f
 8010d1c:	490c      	ldr	r1, [pc, #48]	; (8010d50 <dhcp_stop+0x6c>)
 8010d1e:	480b      	ldr	r0, [pc, #44]	; (8010d4c <dhcp_stop+0x68>)
 8010d20:	f009 fcfc 	bl	801a71c <iprintf>
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8010d24:	2100      	movs	r1, #0
 8010d26:	68f8      	ldr	r0, [r7, #12]
 8010d28:	f000 f814 	bl	8010d54 <dhcp_set_state>

    if (dhcp->pcb_allocated != 0) {
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	7a1b      	ldrb	r3, [r3, #8]
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d004      	beq.n	8010d3e <dhcp_stop+0x5a>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8010d34:	f7fe fff6 	bl	800fd24 <dhcp_dec_pcb_refcount>
      dhcp->pcb_allocated = 0;
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	2200      	movs	r2, #0
 8010d3c:	721a      	strb	r2, [r3, #8]
    }
  }
}
 8010d3e:	3710      	adds	r7, #16
 8010d40:	46bd      	mov	sp, r7
 8010d42:	bd80      	pop	{r7, pc}
 8010d44:	0801f8bc 	.word	0x0801f8bc
 8010d48:	0801fa30 	.word	0x0801fa30
 8010d4c:	0801f91c 	.word	0x0801f91c
 8010d50:	0801f9e8 	.word	0x0801f9e8

08010d54 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8010d54:	b480      	push	{r7}
 8010d56:	b083      	sub	sp, #12
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	6078      	str	r0, [r7, #4]
 8010d5c:	460b      	mov	r3, r1
 8010d5e:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	7a5b      	ldrb	r3, [r3, #9]
 8010d64:	78fa      	ldrb	r2, [r7, #3]
 8010d66:	429a      	cmp	r2, r3
 8010d68:	d008      	beq.n	8010d7c <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	78fa      	ldrb	r2, [r7, #3]
 8010d6e:	725a      	strb	r2, [r3, #9]
    dhcp->tries = 0;
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	2200      	movs	r2, #0
 8010d74:	729a      	strb	r2, [r3, #10]
    dhcp->request_timeout = 0;
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	2200      	movs	r2, #0
 8010d7a:	82da      	strh	r2, [r3, #22]
  }
}
 8010d7c:	bf00      	nop
 8010d7e:	370c      	adds	r7, #12
 8010d80:	46bd      	mov	sp, r7
 8010d82:	bc80      	pop	{r7}
 8010d84:	4770      	bx	lr
	...

08010d88 <dhcp_option>:
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
 8010d88:	b580      	push	{r7, lr}
 8010d8a:	b082      	sub	sp, #8
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	6078      	str	r0, [r7, #4]
 8010d90:	460b      	mov	r3, r1
 8010d92:	70fb      	strb	r3, [r7, #3]
 8010d94:	4613      	mov	r3, r2
 8010d96:	70bb      	strb	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	8a9b      	ldrh	r3, [r3, #20]
 8010d9c:	461a      	mov	r2, r3
 8010d9e:	78bb      	ldrb	r3, [r7, #2]
 8010da0:	4413      	add	r3, r2
 8010da2:	3302      	adds	r3, #2
 8010da4:	2b44      	cmp	r3, #68	; 0x44
 8010da6:	d906      	bls.n	8010db6 <dhcp_option+0x2e>
 8010da8:	4b11      	ldr	r3, [pc, #68]	; (8010df0 <dhcp_option+0x68>)
 8010daa:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 8010dae:	4911      	ldr	r1, [pc, #68]	; (8010df4 <dhcp_option+0x6c>)
 8010db0:	4811      	ldr	r0, [pc, #68]	; (8010df8 <dhcp_option+0x70>)
 8010db2:	f009 fcb3 	bl	801a71c <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	691a      	ldr	r2, [r3, #16]
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	8a9b      	ldrh	r3, [r3, #20]
 8010dbe:	1c59      	adds	r1, r3, #1
 8010dc0:	b288      	uxth	r0, r1
 8010dc2:	6879      	ldr	r1, [r7, #4]
 8010dc4:	8288      	strh	r0, [r1, #20]
 8010dc6:	4413      	add	r3, r2
 8010dc8:	78fa      	ldrb	r2, [r7, #3]
 8010dca:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	691a      	ldr	r2, [r3, #16]
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	8a9b      	ldrh	r3, [r3, #20]
 8010dd6:	1c59      	adds	r1, r3, #1
 8010dd8:	b288      	uxth	r0, r1
 8010dda:	6879      	ldr	r1, [r7, #4]
 8010ddc:	8288      	strh	r0, [r1, #20]
 8010dde:	4413      	add	r3, r2
 8010de0:	78ba      	ldrb	r2, [r7, #2]
 8010de2:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 8010de6:	bf00      	nop
 8010de8:	3708      	adds	r7, #8
 8010dea:	46bd      	mov	sp, r7
 8010dec:	bd80      	pop	{r7, pc}
 8010dee:	bf00      	nop
 8010df0:	0801f8bc 	.word	0x0801f8bc
 8010df4:	0801fa4c 	.word	0x0801fa4c
 8010df8:	0801f91c 	.word	0x0801f91c

08010dfc <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
 8010dfc:	b580      	push	{r7, lr}
 8010dfe:	b082      	sub	sp, #8
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	6078      	str	r0, [r7, #4]
 8010e04:	460b      	mov	r3, r1
 8010e06:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	8a9b      	ldrh	r3, [r3, #20]
 8010e0c:	2b43      	cmp	r3, #67	; 0x43
 8010e0e:	d906      	bls.n	8010e1e <dhcp_option_byte+0x22>
 8010e10:	4b0b      	ldr	r3, [pc, #44]	; (8010e40 <dhcp_option_byte+0x44>)
 8010e12:	f240 527b 	movw	r2, #1403	; 0x57b
 8010e16:	490b      	ldr	r1, [pc, #44]	; (8010e44 <dhcp_option_byte+0x48>)
 8010e18:	480b      	ldr	r0, [pc, #44]	; (8010e48 <dhcp_option_byte+0x4c>)
 8010e1a:	f009 fc7f 	bl	801a71c <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	691a      	ldr	r2, [r3, #16]
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	8a9b      	ldrh	r3, [r3, #20]
 8010e26:	1c59      	adds	r1, r3, #1
 8010e28:	b288      	uxth	r0, r1
 8010e2a:	6879      	ldr	r1, [r7, #4]
 8010e2c:	8288      	strh	r0, [r1, #20]
 8010e2e:	4413      	add	r3, r2
 8010e30:	78fa      	ldrb	r2, [r7, #3]
 8010e32:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 8010e36:	bf00      	nop
 8010e38:	3708      	adds	r7, #8
 8010e3a:	46bd      	mov	sp, r7
 8010e3c:	bd80      	pop	{r7, pc}
 8010e3e:	bf00      	nop
 8010e40:	0801f8bc 	.word	0x0801f8bc
 8010e44:	0801fa94 	.word	0x0801fa94
 8010e48:	0801f91c 	.word	0x0801f91c

08010e4c <dhcp_option_short>:

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
 8010e4c:	b590      	push	{r4, r7, lr}
 8010e4e:	b083      	sub	sp, #12
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	6078      	str	r0, [r7, #4]
 8010e54:	460b      	mov	r3, r1
 8010e56:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	8a9b      	ldrh	r3, [r3, #20]
 8010e5c:	3302      	adds	r3, #2
 8010e5e:	2b44      	cmp	r3, #68	; 0x44
 8010e60:	d906      	bls.n	8010e70 <dhcp_option_short+0x24>
 8010e62:	4b14      	ldr	r3, [pc, #80]	; (8010eb4 <dhcp_option_short+0x68>)
 8010e64:	f240 5282 	movw	r2, #1410	; 0x582
 8010e68:	4913      	ldr	r1, [pc, #76]	; (8010eb8 <dhcp_option_short+0x6c>)
 8010e6a:	4814      	ldr	r0, [pc, #80]	; (8010ebc <dhcp_option_short+0x70>)
 8010e6c:	f009 fc56 	bl	801a71c <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8010e70:	887b      	ldrh	r3, [r7, #2]
 8010e72:	0a1b      	lsrs	r3, r3, #8
 8010e74:	b298      	uxth	r0, r3
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	691a      	ldr	r2, [r3, #16]
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	8a9b      	ldrh	r3, [r3, #20]
 8010e7e:	1c59      	adds	r1, r3, #1
 8010e80:	b28c      	uxth	r4, r1
 8010e82:	6879      	ldr	r1, [r7, #4]
 8010e84:	828c      	strh	r4, [r1, #20]
 8010e86:	b2c1      	uxtb	r1, r0
 8010e88:	4413      	add	r3, r2
 8010e8a:	460a      	mov	r2, r1
 8010e8c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	691a      	ldr	r2, [r3, #16]
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	8a9b      	ldrh	r3, [r3, #20]
 8010e98:	1c59      	adds	r1, r3, #1
 8010e9a:	b288      	uxth	r0, r1
 8010e9c:	6879      	ldr	r1, [r7, #4]
 8010e9e:	8288      	strh	r0, [r1, #20]
 8010ea0:	8879      	ldrh	r1, [r7, #2]
 8010ea2:	b2c9      	uxtb	r1, r1
 8010ea4:	4413      	add	r3, r2
 8010ea6:	460a      	mov	r2, r1
 8010ea8:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 8010eac:	bf00      	nop
 8010eae:	370c      	adds	r7, #12
 8010eb0:	46bd      	mov	sp, r7
 8010eb2:	bd90      	pop	{r4, r7, pc}
 8010eb4:	0801f8bc 	.word	0x0801f8bc
 8010eb8:	0801fad0 	.word	0x0801fad0
 8010ebc:	0801f91c 	.word	0x0801f91c

08010ec0 <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
 8010ec0:	b590      	push	{r4, r7, lr}
 8010ec2:	b083      	sub	sp, #12
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	6078      	str	r0, [r7, #4]
 8010ec8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	8a9b      	ldrh	r3, [r3, #20]
 8010ece:	3304      	adds	r3, #4
 8010ed0:	2b44      	cmp	r3, #68	; 0x44
 8010ed2:	d906      	bls.n	8010ee2 <dhcp_option_long+0x22>
 8010ed4:	4b22      	ldr	r3, [pc, #136]	; (8010f60 <dhcp_option_long+0xa0>)
 8010ed6:	f240 528a 	movw	r2, #1418	; 0x58a
 8010eda:	4922      	ldr	r1, [pc, #136]	; (8010f64 <dhcp_option_long+0xa4>)
 8010edc:	4822      	ldr	r0, [pc, #136]	; (8010f68 <dhcp_option_long+0xa8>)
 8010ede:	f009 fc1d 	bl	801a71c <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8010ee2:	683b      	ldr	r3, [r7, #0]
 8010ee4:	0e18      	lsrs	r0, r3, #24
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	691a      	ldr	r2, [r3, #16]
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	8a9b      	ldrh	r3, [r3, #20]
 8010eee:	1c59      	adds	r1, r3, #1
 8010ef0:	b28c      	uxth	r4, r1
 8010ef2:	6879      	ldr	r1, [r7, #4]
 8010ef4:	828c      	strh	r4, [r1, #20]
 8010ef6:	b2c1      	uxtb	r1, r0
 8010ef8:	4413      	add	r3, r2
 8010efa:	460a      	mov	r2, r1
 8010efc:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8010f00:	683b      	ldr	r3, [r7, #0]
 8010f02:	0c18      	lsrs	r0, r3, #16
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	691a      	ldr	r2, [r3, #16]
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	8a9b      	ldrh	r3, [r3, #20]
 8010f0c:	1c59      	adds	r1, r3, #1
 8010f0e:	b28c      	uxth	r4, r1
 8010f10:	6879      	ldr	r1, [r7, #4]
 8010f12:	828c      	strh	r4, [r1, #20]
 8010f14:	b2c1      	uxtb	r1, r0
 8010f16:	4413      	add	r3, r2
 8010f18:	460a      	mov	r2, r1
 8010f1a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8010f1e:	683b      	ldr	r3, [r7, #0]
 8010f20:	0a18      	lsrs	r0, r3, #8
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	691a      	ldr	r2, [r3, #16]
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	8a9b      	ldrh	r3, [r3, #20]
 8010f2a:	1c59      	adds	r1, r3, #1
 8010f2c:	b28c      	uxth	r4, r1
 8010f2e:	6879      	ldr	r1, [r7, #4]
 8010f30:	828c      	strh	r4, [r1, #20]
 8010f32:	b2c1      	uxtb	r1, r0
 8010f34:	4413      	add	r3, r2
 8010f36:	460a      	mov	r2, r1
 8010f38:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	691a      	ldr	r2, [r3, #16]
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	8a9b      	ldrh	r3, [r3, #20]
 8010f44:	1c59      	adds	r1, r3, #1
 8010f46:	b288      	uxth	r0, r1
 8010f48:	6879      	ldr	r1, [r7, #4]
 8010f4a:	8288      	strh	r0, [r1, #20]
 8010f4c:	6839      	ldr	r1, [r7, #0]
 8010f4e:	b2c9      	uxtb	r1, r1
 8010f50:	4413      	add	r3, r2
 8010f52:	460a      	mov	r2, r1
 8010f54:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 8010f58:	bf00      	nop
 8010f5a:	370c      	adds	r7, #12
 8010f5c:	46bd      	mov	sp, r7
 8010f5e:	bd90      	pop	{r4, r7, pc}
 8010f60:	0801f8bc 	.word	0x0801f8bc
 8010f64:	0801fb14 	.word	0x0801fb14
 8010f68:	0801f91c 	.word	0x0801f91c

08010f6c <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct dhcp *dhcp, struct pbuf *p)
{
 8010f6c:	b580      	push	{r7, lr}
 8010f6e:	b08e      	sub	sp, #56	; 0x38
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	6078      	str	r0, [r7, #4]
 8010f74:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8010f76:	2300      	movs	r3, #0
 8010f78:	627b      	str	r3, [r7, #36]	; 0x24
  int parse_sname_as_options = 0;
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	623b      	str	r3, [r7, #32]

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8010f7e:	220a      	movs	r2, #10
 8010f80:	2100      	movs	r1, #0
 8010f82:	48b6      	ldr	r0, [pc, #728]	; (801125c <dhcp_parse_reply+0x2f0>)
 8010f84:	f008 fd92 	bl	8019aac <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8010f88:	683b      	ldr	r3, [r7, #0]
 8010f8a:	895b      	ldrh	r3, [r3, #10]
 8010f8c:	2b2b      	cmp	r3, #43	; 0x2b
 8010f8e:	d802      	bhi.n	8010f96 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8010f90:	f06f 0301 	mvn.w	r3, #1
 8010f94:	e292      	b.n	80114bc <dhcp_parse_reply+0x550>
  }
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 8010f96:	683b      	ldr	r3, [r7, #0]
 8010f98:	685a      	ldr	r2, [r3, #4]
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	605a      	str	r2, [r3, #4]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8010f9e:	23f0      	movs	r3, #240	; 0xf0
 8010fa0:	85fb      	strh	r3, [r7, #46]	; 0x2e
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8010fa2:	683b      	ldr	r3, [r7, #0]
 8010fa4:	891b      	ldrh	r3, [r3, #8]
 8010fa6:	85bb      	strh	r3, [r7, #44]	; 0x2c
again:
  q = p;
 8010fa8:	683b      	ldr	r3, [r7, #0]
 8010faa:	62bb      	str	r3, [r7, #40]	; 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 8010fac:	e00c      	b.n	8010fc8 <dhcp_parse_reply+0x5c>
    options_idx -= q->len;
 8010fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fb0:	895b      	ldrh	r3, [r3, #10]
 8010fb2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010fb4:	1ad3      	subs	r3, r2, r3
 8010fb6:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max -= q->len;
 8010fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fba:	895b      	ldrh	r3, [r3, #10]
 8010fbc:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8010fbe:	1ad3      	subs	r3, r2, r3
 8010fc0:	85bb      	strh	r3, [r7, #44]	; 0x2c
    q = q->next;
 8010fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	62bb      	str	r3, [r7, #40]	; 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 8010fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d004      	beq.n	8010fd8 <dhcp_parse_reply+0x6c>
 8010fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fd0:	895b      	ldrh	r3, [r3, #10]
 8010fd2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010fd4:	429a      	cmp	r2, r3
 8010fd6:	d2ea      	bcs.n	8010fae <dhcp_parse_reply+0x42>
  }
  if (q == NULL) {
 8010fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d102      	bne.n	8010fe4 <dhcp_parse_reply+0x78>
    return ERR_BUF;
 8010fde:	f06f 0301 	mvn.w	r3, #1
 8010fe2:	e26b      	b.n	80114bc <dhcp_parse_reply+0x550>
  }
  offset = options_idx;
 8010fe4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010fe6:	867b      	strh	r3, [r7, #50]	; 0x32
  offset_max = options_idx_max;
 8010fe8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010fea:	863b      	strh	r3, [r7, #48]	; 0x30
  options = (u8_t*)q->payload;
 8010fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fee:	685b      	ldr	r3, [r3, #4]
 8010ff0:	637b      	str	r3, [r7, #52]	; 0x34
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8010ff2:	e223      	b.n	801143c <dhcp_parse_reply+0x4d0>
    u8_t op = options[offset];
 8010ff4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8010ff6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010ff8:	4413      	add	r3, r2
 8010ffa:	781b      	ldrb	r3, [r3, #0]
 8010ffc:	757b      	strb	r3, [r7, #21]
    u8_t len;
    u8_t decode_len = 0;
 8010ffe:	2300      	movs	r3, #0
 8011000:	77bb      	strb	r3, [r7, #30]
    int decode_idx = -1;
 8011002:	f04f 33ff 	mov.w	r3, #4294967295
 8011006:	61bb      	str	r3, [r7, #24]
    u16_t val_offset = offset + 2;
 8011008:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801100a:	3302      	adds	r3, #2
 801100c:	82fb      	strh	r3, [r7, #22]
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 801100e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8011010:	3301      	adds	r3, #1
 8011012:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011014:	8952      	ldrh	r2, [r2, #10]
 8011016:	4293      	cmp	r3, r2
 8011018:	da06      	bge.n	8011028 <dhcp_parse_reply+0xbc>
      len = options[offset + 1];
 801101a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801101c:	3301      	adds	r3, #1
 801101e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011020:	4413      	add	r3, r2
 8011022:	781b      	ldrb	r3, [r3, #0]
 8011024:	77fb      	strb	r3, [r7, #31]
 8011026:	e00a      	b.n	801103e <dhcp_parse_reply+0xd2>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 8011028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801102a:	681b      	ldr	r3, [r3, #0]
 801102c:	2b00      	cmp	r3, #0
 801102e:	d004      	beq.n	801103a <dhcp_parse_reply+0xce>
 8011030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	685b      	ldr	r3, [r3, #4]
 8011036:	781b      	ldrb	r3, [r3, #0]
 8011038:	e000      	b.n	801103c <dhcp_parse_reply+0xd0>
 801103a:	2300      	movs	r3, #0
 801103c:	77fb      	strb	r3, [r7, #31]
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 801103e:	7ffb      	ldrb	r3, [r7, #31]
 8011040:	77bb      	strb	r3, [r7, #30]
    switch(op) {
 8011042:	7d7b      	ldrb	r3, [r7, #21]
 8011044:	2b3b      	cmp	r3, #59	; 0x3b
 8011046:	f200 8149 	bhi.w	80112dc <dhcp_parse_reply+0x370>
 801104a:	a201      	add	r2, pc, #4	; (adr r2, 8011050 <dhcp_parse_reply+0xe4>)
 801104c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011050:	08011141 	.word	0x08011141
 8011054:	08011151 	.word	0x08011151
 8011058:	080112dd 	.word	0x080112dd
 801105c:	08011171 	.word	0x08011171
 8011060:	080112dd 	.word	0x080112dd
 8011064:	080112dd 	.word	0x080112dd
 8011068:	08011197 	.word	0x08011197
 801106c:	080112dd 	.word	0x080112dd
 8011070:	080112dd 	.word	0x080112dd
 8011074:	080112dd 	.word	0x080112dd
 8011078:	080112dd 	.word	0x080112dd
 801107c:	080112dd 	.word	0x080112dd
 8011080:	080112dd 	.word	0x080112dd
 8011084:	080112dd 	.word	0x080112dd
 8011088:	080112dd 	.word	0x080112dd
 801108c:	080112dd 	.word	0x080112dd
 8011090:	080112dd 	.word	0x080112dd
 8011094:	080112dd 	.word	0x080112dd
 8011098:	080112dd 	.word	0x080112dd
 801109c:	080112dd 	.word	0x080112dd
 80110a0:	080112dd 	.word	0x080112dd
 80110a4:	080112dd 	.word	0x080112dd
 80110a8:	080112dd 	.word	0x080112dd
 80110ac:	080112dd 	.word	0x080112dd
 80110b0:	080112dd 	.word	0x080112dd
 80110b4:	080112dd 	.word	0x080112dd
 80110b8:	080112dd 	.word	0x080112dd
 80110bc:	080112dd 	.word	0x080112dd
 80110c0:	080112dd 	.word	0x080112dd
 80110c4:	080112dd 	.word	0x080112dd
 80110c8:	080112dd 	.word	0x080112dd
 80110cc:	080112dd 	.word	0x080112dd
 80110d0:	080112dd 	.word	0x080112dd
 80110d4:	080112dd 	.word	0x080112dd
 80110d8:	080112dd 	.word	0x080112dd
 80110dc:	080112dd 	.word	0x080112dd
 80110e0:	080112dd 	.word	0x080112dd
 80110e4:	080112dd 	.word	0x080112dd
 80110e8:	080112dd 	.word	0x080112dd
 80110ec:	080112dd 	.word	0x080112dd
 80110f0:	080112dd 	.word	0x080112dd
 80110f4:	080112dd 	.word	0x080112dd
 80110f8:	080112dd 	.word	0x080112dd
 80110fc:	080112dd 	.word	0x080112dd
 8011100:	080112dd 	.word	0x080112dd
 8011104:	080112dd 	.word	0x080112dd
 8011108:	080112dd 	.word	0x080112dd
 801110c:	080112dd 	.word	0x080112dd
 8011110:	080112dd 	.word	0x080112dd
 8011114:	080112dd 	.word	0x080112dd
 8011118:	080112dd 	.word	0x080112dd
 801111c:	080111e3 	.word	0x080111e3
 8011120:	08011203 	.word	0x08011203
 8011124:	0801123d 	.word	0x0801123d
 8011128:	0801127d 	.word	0x0801127d
 801112c:	080112dd 	.word	0x080112dd
 8011130:	080112dd 	.word	0x080112dd
 8011134:	080112dd 	.word	0x080112dd
 8011138:	0801129d 	.word	0x0801129d
 801113c:	080112bd 	.word	0x080112bd
      /* case(DHCP_OPTION_END): handled above */
      case(DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8011140:	2300      	movs	r3, #0
 8011142:	77fb      	strb	r3, [r7, #31]
 8011144:	7ffb      	ldrb	r3, [r7, #31]
 8011146:	77bb      	strb	r3, [r7, #30]
        /* will be increased below */
        offset--;
 8011148:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801114a:	3b01      	subs	r3, #1
 801114c:	867b      	strh	r3, [r7, #50]	; 0x32
        break;
 801114e:	e0c8      	b.n	80112e2 <dhcp_parse_reply+0x376>
      case(DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8011150:	7ffb      	ldrb	r3, [r7, #31]
 8011152:	2b04      	cmp	r3, #4
 8011154:	d009      	beq.n	801116a <dhcp_parse_reply+0x1fe>
 8011156:	4b42      	ldr	r3, [pc, #264]	; (8011260 <dhcp_parse_reply+0x2f4>)
 8011158:	f240 52f6 	movw	r2, #1526	; 0x5f6
 801115c:	4941      	ldr	r1, [pc, #260]	; (8011264 <dhcp_parse_reply+0x2f8>)
 801115e:	4842      	ldr	r0, [pc, #264]	; (8011268 <dhcp_parse_reply+0x2fc>)
 8011160:	f009 fadc 	bl	801a71c <iprintf>
 8011164:	f06f 0305 	mvn.w	r3, #5
 8011168:	e1a8      	b.n	80114bc <dhcp_parse_reply+0x550>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801116a:	2306      	movs	r3, #6
 801116c:	61bb      	str	r3, [r7, #24]
        break;
 801116e:	e0b8      	b.n	80112e2 <dhcp_parse_reply+0x376>
      case(DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8011170:	2304      	movs	r3, #4
 8011172:	77bb      	strb	r3, [r7, #30]
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8011174:	7ffa      	ldrb	r2, [r7, #31]
 8011176:	7fbb      	ldrb	r3, [r7, #30]
 8011178:	429a      	cmp	r2, r3
 801117a:	d209      	bcs.n	8011190 <dhcp_parse_reply+0x224>
 801117c:	4b38      	ldr	r3, [pc, #224]	; (8011260 <dhcp_parse_reply+0x2f4>)
 801117e:	f240 52fb 	movw	r2, #1531	; 0x5fb
 8011182:	493a      	ldr	r1, [pc, #232]	; (801126c <dhcp_parse_reply+0x300>)
 8011184:	4838      	ldr	r0, [pc, #224]	; (8011268 <dhcp_parse_reply+0x2fc>)
 8011186:	f009 fac9 	bl	801a71c <iprintf>
 801118a:	f06f 0305 	mvn.w	r3, #5
 801118e:	e195      	b.n	80114bc <dhcp_parse_reply+0x550>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8011190:	2307      	movs	r3, #7
 8011192:	61bb      	str	r3, [r7, #24]
        break;
 8011194:	e0a5      	b.n	80112e2 <dhcp_parse_reply+0x376>
#if LWIP_DHCP_PROVIDE_DNS_SERVERS
      case(DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 8011196:	7ffb      	ldrb	r3, [r7, #31]
 8011198:	f003 0303 	and.w	r3, r3, #3
 801119c:	b2db      	uxtb	r3, r3
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d009      	beq.n	80111b6 <dhcp_parse_reply+0x24a>
 80111a2:	4b2f      	ldr	r3, [pc, #188]	; (8011260 <dhcp_parse_reply+0x2f4>)
 80111a4:	f240 6201 	movw	r2, #1537	; 0x601
 80111a8:	4931      	ldr	r1, [pc, #196]	; (8011270 <dhcp_parse_reply+0x304>)
 80111aa:	482f      	ldr	r0, [pc, #188]	; (8011268 <dhcp_parse_reply+0x2fc>)
 80111ac:	f009 fab6 	bl	801a71c <iprintf>
 80111b0:	f06f 0305 	mvn.w	r3, #5
 80111b4:	e182      	b.n	80114bc <dhcp_parse_reply+0x550>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 80111b6:	7ffb      	ldrb	r3, [r7, #31]
 80111b8:	2b08      	cmp	r3, #8
 80111ba:	bf28      	it	cs
 80111bc:	2308      	movcs	r3, #8
 80111be:	77bb      	strb	r3, [r7, #30]
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80111c0:	7ffa      	ldrb	r2, [r7, #31]
 80111c2:	7fbb      	ldrb	r3, [r7, #30]
 80111c4:	429a      	cmp	r2, r3
 80111c6:	d209      	bcs.n	80111dc <dhcp_parse_reply+0x270>
 80111c8:	4b25      	ldr	r3, [pc, #148]	; (8011260 <dhcp_parse_reply+0x2f4>)
 80111ca:	f240 6204 	movw	r2, #1540	; 0x604
 80111ce:	4927      	ldr	r1, [pc, #156]	; (801126c <dhcp_parse_reply+0x300>)
 80111d0:	4825      	ldr	r0, [pc, #148]	; (8011268 <dhcp_parse_reply+0x2fc>)
 80111d2:	f009 faa3 	bl	801a71c <iprintf>
 80111d6:	f06f 0305 	mvn.w	r3, #5
 80111da:	e16f      	b.n	80114bc <dhcp_parse_reply+0x550>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 80111dc:	2308      	movs	r3, #8
 80111de:	61bb      	str	r3, [r7, #24]
        break;
 80111e0:	e07f      	b.n	80112e2 <dhcp_parse_reply+0x376>
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case(DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80111e2:	7ffb      	ldrb	r3, [r7, #31]
 80111e4:	2b04      	cmp	r3, #4
 80111e6:	d009      	beq.n	80111fc <dhcp_parse_reply+0x290>
 80111e8:	4b1d      	ldr	r3, [pc, #116]	; (8011260 <dhcp_parse_reply+0x2f4>)
 80111ea:	f240 6209 	movw	r2, #1545	; 0x609
 80111ee:	491d      	ldr	r1, [pc, #116]	; (8011264 <dhcp_parse_reply+0x2f8>)
 80111f0:	481d      	ldr	r0, [pc, #116]	; (8011268 <dhcp_parse_reply+0x2fc>)
 80111f2:	f009 fa93 	bl	801a71c <iprintf>
 80111f6:	f06f 0305 	mvn.w	r3, #5
 80111fa:	e15f      	b.n	80114bc <dhcp_parse_reply+0x550>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 80111fc:	2303      	movs	r3, #3
 80111fe:	61bb      	str	r3, [r7, #24]
        break;
 8011200:	e06f      	b.n	80112e2 <dhcp_parse_reply+0x376>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case(DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8011202:	7ffb      	ldrb	r3, [r7, #31]
 8011204:	2b01      	cmp	r3, #1
 8011206:	d009      	beq.n	801121c <dhcp_parse_reply+0x2b0>
 8011208:	4b15      	ldr	r3, [pc, #84]	; (8011260 <dhcp_parse_reply+0x2f4>)
 801120a:	f240 6217 	movw	r2, #1559	; 0x617
 801120e:	4919      	ldr	r1, [pc, #100]	; (8011274 <dhcp_parse_reply+0x308>)
 8011210:	4815      	ldr	r0, [pc, #84]	; (8011268 <dhcp_parse_reply+0x2fc>)
 8011212:	f009 fa83 	bl	801a71c <iprintf>
 8011216:	f06f 0305 	mvn.w	r3, #5
 801121a:	e14f      	b.n	80114bc <dhcp_parse_reply+0x550>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801121c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801121e:	2bf0      	cmp	r3, #240	; 0xf0
 8011220:	d009      	beq.n	8011236 <dhcp_parse_reply+0x2ca>
 8011222:	4b0f      	ldr	r3, [pc, #60]	; (8011260 <dhcp_parse_reply+0x2f4>)
 8011224:	f240 6219 	movw	r2, #1561	; 0x619
 8011228:	4913      	ldr	r1, [pc, #76]	; (8011278 <dhcp_parse_reply+0x30c>)
 801122a:	480f      	ldr	r0, [pc, #60]	; (8011268 <dhcp_parse_reply+0x2fc>)
 801122c:	f009 fa76 	bl	801a71c <iprintf>
 8011230:	f06f 0305 	mvn.w	r3, #5
 8011234:	e142      	b.n	80114bc <dhcp_parse_reply+0x550>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8011236:	2300      	movs	r3, #0
 8011238:	61bb      	str	r3, [r7, #24]
        break;
 801123a:	e052      	b.n	80112e2 <dhcp_parse_reply+0x376>
      case(DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801123c:	7ffb      	ldrb	r3, [r7, #31]
 801123e:	2b01      	cmp	r3, #1
 8011240:	d009      	beq.n	8011256 <dhcp_parse_reply+0x2ea>
 8011242:	4b07      	ldr	r3, [pc, #28]	; (8011260 <dhcp_parse_reply+0x2f4>)
 8011244:	f240 621d 	movw	r2, #1565	; 0x61d
 8011248:	490a      	ldr	r1, [pc, #40]	; (8011274 <dhcp_parse_reply+0x308>)
 801124a:	4807      	ldr	r0, [pc, #28]	; (8011268 <dhcp_parse_reply+0x2fc>)
 801124c:	f009 fa66 	bl	801a71c <iprintf>
 8011250:	f06f 0305 	mvn.w	r3, #5
 8011254:	e132      	b.n	80114bc <dhcp_parse_reply+0x550>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8011256:	2301      	movs	r3, #1
 8011258:	61bb      	str	r3, [r7, #24]
        break;
 801125a:	e042      	b.n	80112e2 <dhcp_parse_reply+0x376>
 801125c:	2000b818 	.word	0x2000b818
 8011260:	0801f8bc 	.word	0x0801f8bc
 8011264:	0801fb54 	.word	0x0801fb54
 8011268:	0801f91c 	.word	0x0801f91c
 801126c:	0801fb60 	.word	0x0801fb60
 8011270:	0801fb74 	.word	0x0801fb74
 8011274:	0801fb84 	.word	0x0801fb84
 8011278:	0801fb90 	.word	0x0801fb90
      case(DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801127c:	7ffb      	ldrb	r3, [r7, #31]
 801127e:	2b04      	cmp	r3, #4
 8011280:	d009      	beq.n	8011296 <dhcp_parse_reply+0x32a>
 8011282:	4b90      	ldr	r3, [pc, #576]	; (80114c4 <dhcp_parse_reply+0x558>)
 8011284:	f240 6221 	movw	r2, #1569	; 0x621
 8011288:	498f      	ldr	r1, [pc, #572]	; (80114c8 <dhcp_parse_reply+0x55c>)
 801128a:	4890      	ldr	r0, [pc, #576]	; (80114cc <dhcp_parse_reply+0x560>)
 801128c:	f009 fa46 	bl	801a71c <iprintf>
 8011290:	f06f 0305 	mvn.w	r3, #5
 8011294:	e112      	b.n	80114bc <dhcp_parse_reply+0x550>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8011296:	2302      	movs	r3, #2
 8011298:	61bb      	str	r3, [r7, #24]
        break;
 801129a:	e022      	b.n	80112e2 <dhcp_parse_reply+0x376>
      case(DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801129c:	7ffb      	ldrb	r3, [r7, #31]
 801129e:	2b04      	cmp	r3, #4
 80112a0:	d009      	beq.n	80112b6 <dhcp_parse_reply+0x34a>
 80112a2:	4b88      	ldr	r3, [pc, #544]	; (80114c4 <dhcp_parse_reply+0x558>)
 80112a4:	f240 6225 	movw	r2, #1573	; 0x625
 80112a8:	4987      	ldr	r1, [pc, #540]	; (80114c8 <dhcp_parse_reply+0x55c>)
 80112aa:	4888      	ldr	r0, [pc, #544]	; (80114cc <dhcp_parse_reply+0x560>)
 80112ac:	f009 fa36 	bl	801a71c <iprintf>
 80112b0:	f06f 0305 	mvn.w	r3, #5
 80112b4:	e102      	b.n	80114bc <dhcp_parse_reply+0x550>
        decode_idx = DHCP_OPTION_IDX_T1;
 80112b6:	2304      	movs	r3, #4
 80112b8:	61bb      	str	r3, [r7, #24]
        break;
 80112ba:	e012      	b.n	80112e2 <dhcp_parse_reply+0x376>
      case(DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80112bc:	7ffb      	ldrb	r3, [r7, #31]
 80112be:	2b04      	cmp	r3, #4
 80112c0:	d009      	beq.n	80112d6 <dhcp_parse_reply+0x36a>
 80112c2:	4b80      	ldr	r3, [pc, #512]	; (80114c4 <dhcp_parse_reply+0x558>)
 80112c4:	f240 6229 	movw	r2, #1577	; 0x629
 80112c8:	497f      	ldr	r1, [pc, #508]	; (80114c8 <dhcp_parse_reply+0x55c>)
 80112ca:	4880      	ldr	r0, [pc, #512]	; (80114cc <dhcp_parse_reply+0x560>)
 80112cc:	f009 fa26 	bl	801a71c <iprintf>
 80112d0:	f06f 0305 	mvn.w	r3, #5
 80112d4:	e0f2      	b.n	80114bc <dhcp_parse_reply+0x550>
        decode_idx = DHCP_OPTION_IDX_T2;
 80112d6:	2305      	movs	r3, #5
 80112d8:	61bb      	str	r3, [r7, #24]
        break;
 80112da:	e002      	b.n	80112e2 <dhcp_parse_reply+0x376>
      default:
        decode_len = 0;
 80112dc:	2300      	movs	r3, #0
 80112de:	77bb      	strb	r3, [r7, #30]
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        break;
 80112e0:	bf00      	nop
    }
    offset += len + 2;
 80112e2:	7ffb      	ldrb	r3, [r7, #31]
 80112e4:	b29a      	uxth	r2, r3
 80112e6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80112e8:	4413      	add	r3, r2
 80112ea:	b29b      	uxth	r3, r3
 80112ec:	3302      	adds	r3, #2
 80112ee:	867b      	strh	r3, [r7, #50]	; 0x32
    if (decode_len > 0) {
 80112f0:	7fbb      	ldrb	r3, [r7, #30]
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d079      	beq.n	80113ea <dhcp_parse_reply+0x47e>
      u32_t value = 0;
 80112f6:	2300      	movs	r3, #0
 80112f8:	60bb      	str	r3, [r7, #8]
      u16_t copy_len;
decode_next:
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80112fa:	69bb      	ldr	r3, [r7, #24]
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	db02      	blt.n	8011306 <dhcp_parse_reply+0x39a>
 8011300:	69bb      	ldr	r3, [r7, #24]
 8011302:	2b09      	cmp	r3, #9
 8011304:	dd06      	ble.n	8011314 <dhcp_parse_reply+0x3a8>
 8011306:	4b6f      	ldr	r3, [pc, #444]	; (80114c4 <dhcp_parse_reply+0x558>)
 8011308:	f240 6236 	movw	r2, #1590	; 0x636
 801130c:	4970      	ldr	r1, [pc, #448]	; (80114d0 <dhcp_parse_reply+0x564>)
 801130e:	486f      	ldr	r0, [pc, #444]	; (80114cc <dhcp_parse_reply+0x560>)
 8011310:	f009 fa04 	bl	801a71c <iprintf>
      if (!dhcp_option_given(dhcp, decode_idx)) {
 8011314:	4a6f      	ldr	r2, [pc, #444]	; (80114d4 <dhcp_parse_reply+0x568>)
 8011316:	69bb      	ldr	r3, [r7, #24]
 8011318:	4413      	add	r3, r2
 801131a:	781b      	ldrb	r3, [r3, #0]
 801131c:	2b00      	cmp	r3, #0
 801131e:	d164      	bne.n	80113ea <dhcp_parse_reply+0x47e>
        copy_len = LWIP_MIN(decode_len, 4);
 8011320:	7fbb      	ldrb	r3, [r7, #30]
 8011322:	2b04      	cmp	r3, #4
 8011324:	bf28      	it	cs
 8011326:	2304      	movcs	r3, #4
 8011328:	b2db      	uxtb	r3, r3
 801132a:	827b      	strh	r3, [r7, #18]
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801132c:	8afb      	ldrh	r3, [r7, #22]
 801132e:	8a7a      	ldrh	r2, [r7, #18]
 8011330:	f107 0108 	add.w	r1, r7, #8
 8011334:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011336:	f7f9 fa41 	bl	800a7bc <pbuf_copy_partial>
 801133a:	4603      	mov	r3, r0
 801133c:	461a      	mov	r2, r3
 801133e:	8a7b      	ldrh	r3, [r7, #18]
 8011340:	4293      	cmp	r3, r2
 8011342:	d002      	beq.n	801134a <dhcp_parse_reply+0x3de>
          return ERR_BUF;
 8011344:	f06f 0301 	mvn.w	r3, #1
 8011348:	e0b8      	b.n	80114bc <dhcp_parse_reply+0x550>
        }
        if (decode_len > 4) {
 801134a:	7fbb      	ldrb	r3, [r7, #30]
 801134c:	2b04      	cmp	r3, #4
 801134e:	d927      	bls.n	80113a0 <dhcp_parse_reply+0x434>
          /* decode more than one u32_t */
          LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8011350:	7fbb      	ldrb	r3, [r7, #30]
 8011352:	f003 0303 	and.w	r3, r3, #3
 8011356:	b2db      	uxtb	r3, r3
 8011358:	2b00      	cmp	r3, #0
 801135a:	d009      	beq.n	8011370 <dhcp_parse_reply+0x404>
 801135c:	4b59      	ldr	r3, [pc, #356]	; (80114c4 <dhcp_parse_reply+0x558>)
 801135e:	f240 623e 	movw	r2, #1598	; 0x63e
 8011362:	495d      	ldr	r1, [pc, #372]	; (80114d8 <dhcp_parse_reply+0x56c>)
 8011364:	4859      	ldr	r0, [pc, #356]	; (80114cc <dhcp_parse_reply+0x560>)
 8011366:	f009 f9d9 	bl	801a71c <iprintf>
 801136a:	f06f 0305 	mvn.w	r3, #5
 801136e:	e0a5      	b.n	80114bc <dhcp_parse_reply+0x550>
          dhcp_got_option(dhcp, decode_idx);
 8011370:	4a58      	ldr	r2, [pc, #352]	; (80114d4 <dhcp_parse_reply+0x568>)
 8011372:	69bb      	ldr	r3, [r7, #24]
 8011374:	4413      	add	r3, r2
 8011376:	2201      	movs	r2, #1
 8011378:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801137a:	68bb      	ldr	r3, [r7, #8]
 801137c:	4618      	mov	r0, r3
 801137e:	f7f7 fb62 	bl	8008a46 <lwip_htonl>
 8011382:	4601      	mov	r1, r0
 8011384:	4a55      	ldr	r2, [pc, #340]	; (80114dc <dhcp_parse_reply+0x570>)
 8011386:	69bb      	ldr	r3, [r7, #24]
 8011388:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          decode_len -= 4;
 801138c:	7fbb      	ldrb	r3, [r7, #30]
 801138e:	3b04      	subs	r3, #4
 8011390:	77bb      	strb	r3, [r7, #30]
          val_offset += 4;
 8011392:	8afb      	ldrh	r3, [r7, #22]
 8011394:	3304      	adds	r3, #4
 8011396:	82fb      	strh	r3, [r7, #22]
          decode_idx++;
 8011398:	69bb      	ldr	r3, [r7, #24]
 801139a:	3301      	adds	r3, #1
 801139c:	61bb      	str	r3, [r7, #24]
          goto decode_next;
 801139e:	e7ac      	b.n	80112fa <dhcp_parse_reply+0x38e>
        } else if (decode_len == 4) {
 80113a0:	7fbb      	ldrb	r3, [r7, #30]
 80113a2:	2b04      	cmp	r3, #4
 80113a4:	d106      	bne.n	80113b4 <dhcp_parse_reply+0x448>
          value = lwip_ntohl(value);
 80113a6:	68bb      	ldr	r3, [r7, #8]
 80113a8:	4618      	mov	r0, r3
 80113aa:	f7f7 fb4c 	bl	8008a46 <lwip_htonl>
 80113ae:	4603      	mov	r3, r0
 80113b0:	60bb      	str	r3, [r7, #8]
 80113b2:	e010      	b.n	80113d6 <dhcp_parse_reply+0x46a>
        } else {
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80113b4:	7fbb      	ldrb	r3, [r7, #30]
 80113b6:	2b01      	cmp	r3, #1
 80113b8:	d009      	beq.n	80113ce <dhcp_parse_reply+0x462>
 80113ba:	4b42      	ldr	r3, [pc, #264]	; (80114c4 <dhcp_parse_reply+0x558>)
 80113bc:	f44f 62c9 	mov.w	r2, #1608	; 0x648
 80113c0:	4947      	ldr	r1, [pc, #284]	; (80114e0 <dhcp_parse_reply+0x574>)
 80113c2:	4842      	ldr	r0, [pc, #264]	; (80114cc <dhcp_parse_reply+0x560>)
 80113c4:	f009 f9aa 	bl	801a71c <iprintf>
 80113c8:	f06f 0305 	mvn.w	r3, #5
 80113cc:	e076      	b.n	80114bc <dhcp_parse_reply+0x550>
          value = ((u8_t*)&value)[0];
 80113ce:	f107 0308 	add.w	r3, r7, #8
 80113d2:	781b      	ldrb	r3, [r3, #0]
 80113d4:	60bb      	str	r3, [r7, #8]
        }
        dhcp_got_option(dhcp, decode_idx);
 80113d6:	4a3f      	ldr	r2, [pc, #252]	; (80114d4 <dhcp_parse_reply+0x568>)
 80113d8:	69bb      	ldr	r3, [r7, #24]
 80113da:	4413      	add	r3, r2
 80113dc:	2201      	movs	r2, #1
 80113de:	701a      	strb	r2, [r3, #0]
        dhcp_set_option_value(dhcp, decode_idx, value);
 80113e0:	68ba      	ldr	r2, [r7, #8]
 80113e2:	493e      	ldr	r1, [pc, #248]	; (80114dc <dhcp_parse_reply+0x570>)
 80113e4:	69bb      	ldr	r3, [r7, #24]
 80113e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      }
    }
    if (offset >= q->len) {
 80113ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113ec:	895b      	ldrh	r3, [r3, #10]
 80113ee:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80113f0:	429a      	cmp	r2, r3
 80113f2:	d323      	bcc.n	801143c <dhcp_parse_reply+0x4d0>
      offset -= q->len;
 80113f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113f6:	895b      	ldrh	r3, [r3, #10]
 80113f8:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80113fa:	1ad3      	subs	r3, r2, r3
 80113fc:	867b      	strh	r3, [r7, #50]	; 0x32
      offset_max -= q->len;
 80113fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011400:	895b      	ldrh	r3, [r3, #10]
 8011402:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8011404:	1ad3      	subs	r3, r2, r3
 8011406:	863b      	strh	r3, [r7, #48]	; 0x30
      if ((offset < offset_max) && offset_max) {
 8011408:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 801140a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801140c:	429a      	cmp	r2, r3
 801140e:	d223      	bcs.n	8011458 <dhcp_parse_reply+0x4ec>
 8011410:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8011412:	2b00      	cmp	r3, #0
 8011414:	d020      	beq.n	8011458 <dhcp_parse_reply+0x4ec>
        q = q->next;
 8011416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	62bb      	str	r3, [r7, #40]	; 0x28
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801141c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801141e:	2b00      	cmp	r3, #0
 8011420:	d109      	bne.n	8011436 <dhcp_parse_reply+0x4ca>
 8011422:	4b28      	ldr	r3, [pc, #160]	; (80114c4 <dhcp_parse_reply+0x558>)
 8011424:	f240 6254 	movw	r2, #1620	; 0x654
 8011428:	492e      	ldr	r1, [pc, #184]	; (80114e4 <dhcp_parse_reply+0x578>)
 801142a:	4828      	ldr	r0, [pc, #160]	; (80114cc <dhcp_parse_reply+0x560>)
 801142c:	f009 f976 	bl	801a71c <iprintf>
 8011430:	f06f 0305 	mvn.w	r3, #5
 8011434:	e042      	b.n	80114bc <dhcp_parse_reply+0x550>
        options = (u8_t*)q->payload;
 8011436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011438:	685b      	ldr	r3, [r3, #4]
 801143a:	637b      	str	r3, [r7, #52]	; 0x34
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801143c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801143e:	2b00      	cmp	r3, #0
 8011440:	d00a      	beq.n	8011458 <dhcp_parse_reply+0x4ec>
 8011442:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8011444:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8011446:	429a      	cmp	r2, r3
 8011448:	d206      	bcs.n	8011458 <dhcp_parse_reply+0x4ec>
 801144a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801144c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801144e:	4413      	add	r3, r2
 8011450:	781b      	ldrb	r3, [r3, #0]
 8011452:	2bff      	cmp	r3, #255	; 0xff
 8011454:	f47f adce 	bne.w	8010ff4 <dhcp_parse_reply+0x88>
        break;
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8011458:	4b1e      	ldr	r3, [pc, #120]	; (80114d4 <dhcp_parse_reply+0x568>)
 801145a:	781b      	ldrb	r3, [r3, #0]
 801145c:	2b00      	cmp	r3, #0
 801145e:	d018      	beq.n	8011492 <dhcp_parse_reply+0x526>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8011460:	4b1e      	ldr	r3, [pc, #120]	; (80114dc <dhcp_parse_reply+0x570>)
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8011466:	4b1b      	ldr	r3, [pc, #108]	; (80114d4 <dhcp_parse_reply+0x568>)
 8011468:	2200      	movs	r2, #0
 801146a:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	2b01      	cmp	r3, #1
 8011470:	d102      	bne.n	8011478 <dhcp_parse_reply+0x50c>
      parse_file_as_options = 1;
 8011472:	2301      	movs	r3, #1
 8011474:	627b      	str	r3, [r7, #36]	; 0x24
 8011476:	e00c      	b.n	8011492 <dhcp_parse_reply+0x526>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	2b02      	cmp	r3, #2
 801147c:	d102      	bne.n	8011484 <dhcp_parse_reply+0x518>
      parse_sname_as_options = 1;
 801147e:	2301      	movs	r3, #1
 8011480:	623b      	str	r3, [r7, #32]
 8011482:	e006      	b.n	8011492 <dhcp_parse_reply+0x526>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	2b03      	cmp	r3, #3
 8011488:	d103      	bne.n	8011492 <dhcp_parse_reply+0x526>
      parse_sname_as_options = 1;
 801148a:	2301      	movs	r3, #1
 801148c:	623b      	str	r3, [r7, #32]
      parse_file_as_options = 1;
 801148e:	2301      	movs	r3, #1
 8011490:	627b      	str	r3, [r7, #36]	; 0x24
      /* make sure the string is really NULL-terminated */
      dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
    }
#endif /* LWIP_DHCP_BOOTP_FILE */
  }
  if (parse_file_as_options) {
 8011492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011494:	2b00      	cmp	r3, #0
 8011496:	d006      	beq.n	80114a6 <dhcp_parse_reply+0x53a>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8011498:	2300      	movs	r3, #0
 801149a:	627b      	str	r3, [r7, #36]	; 0x24
    options_idx = DHCP_FILE_OFS;
 801149c:	236c      	movs	r3, #108	; 0x6c
 801149e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 80114a0:	23ec      	movs	r3, #236	; 0xec
 80114a2:	85bb      	strh	r3, [r7, #44]	; 0x2c
    goto again;
 80114a4:	e580      	b.n	8010fa8 <dhcp_parse_reply+0x3c>
  } else if (parse_sname_as_options) {
 80114a6:	6a3b      	ldr	r3, [r7, #32]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d006      	beq.n	80114ba <dhcp_parse_reply+0x54e>
    parse_sname_as_options = 0;
 80114ac:	2300      	movs	r3, #0
 80114ae:	623b      	str	r3, [r7, #32]
    options_idx = DHCP_SNAME_OFS;
 80114b0:	232c      	movs	r3, #44	; 0x2c
 80114b2:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80114b4:	236c      	movs	r3, #108	; 0x6c
 80114b6:	85bb      	strh	r3, [r7, #44]	; 0x2c
    goto again;
 80114b8:	e576      	b.n	8010fa8 <dhcp_parse_reply+0x3c>
  }
  return ERR_OK;
 80114ba:	2300      	movs	r3, #0
}
 80114bc:	4618      	mov	r0, r3
 80114be:	3738      	adds	r7, #56	; 0x38
 80114c0:	46bd      	mov	sp, r7
 80114c2:	bd80      	pop	{r7, pc}
 80114c4:	0801f8bc 	.word	0x0801f8bc
 80114c8:	0801fb54 	.word	0x0801fb54
 80114cc:	0801f91c 	.word	0x0801f91c
 80114d0:	0801fba8 	.word	0x0801fba8
 80114d4:	2000b818 	.word	0x2000b818
 80114d8:	0801fbbc 	.word	0x0801fbbc
 80114dc:	2000b824 	.word	0x2000b824
 80114e0:	0801fbd4 	.word	0x0801fbd4
 80114e4:	0801fbe8 	.word	0x0801fbe8

080114e8 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80114e8:	b580      	push	{r7, lr}
 80114ea:	b08a      	sub	sp, #40	; 0x28
 80114ec:	af00      	add	r7, sp, #0
 80114ee:	60f8      	str	r0, [r7, #12]
 80114f0:	60b9      	str	r1, [r7, #8]
 80114f2:	607a      	str	r2, [r7, #4]
 80114f4:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 80114f6:	4b68      	ldr	r3, [pc, #416]	; (8011698 <dhcp_recv+0x1b0>)
 80114f8:	685b      	ldr	r3, [r3, #4]
 80114fa:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80114fc:	6a3b      	ldr	r3, [r7, #32]
 80114fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011500:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	685b      	ldr	r3, [r3, #4]
 8011506:	61bb      	str	r3, [r7, #24]
  u8_t i;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8011508:	69fb      	ldr	r3, [r7, #28]
 801150a:	2b00      	cmp	r3, #0
 801150c:	f000 80a9 	beq.w	8011662 <dhcp_recv+0x17a>
 8011510:	69fb      	ldr	r3, [r7, #28]
 8011512:	7a1b      	ldrb	r3, [r3, #8]
 8011514:	2b00      	cmp	r3, #0
 8011516:	f000 80a4 	beq.w	8011662 <dhcp_recv+0x17a>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 801151a:	69fb      	ldr	r3, [r7, #28]
 801151c:	685b      	ldr	r3, [r3, #4]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d006      	beq.n	8011530 <dhcp_recv+0x48>
 8011522:	4b5e      	ldr	r3, [pc, #376]	; (801169c <dhcp_recv+0x1b4>)
 8011524:	f44f 62d5 	mov.w	r2, #1704	; 0x6a8
 8011528:	495d      	ldr	r1, [pc, #372]	; (80116a0 <dhcp_recv+0x1b8>)
 801152a:	485e      	ldr	r0, [pc, #376]	; (80116a4 <dhcp_recv+0x1bc>)
 801152c:	f009 f8f6 	bl	801a71c <iprintf>

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	895b      	ldrh	r3, [r3, #10]
 8011534:	2b2b      	cmp	r3, #43	; 0x2b
 8011536:	f240 8096 	bls.w	8011666 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801153a:	69bb      	ldr	r3, [r7, #24]
 801153c:	781b      	ldrb	r3, [r3, #0]
 801153e:	2b02      	cmp	r3, #2
 8011540:	f040 8093 	bne.w	801166a <dhcp_recv+0x182>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 8011544:	2300      	movs	r3, #0
 8011546:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801154a:	e012      	b.n	8011572 <dhcp_recv+0x8a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801154c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011550:	6a3a      	ldr	r2, [r7, #32]
 8011552:	4413      	add	r3, r2
 8011554:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8011558:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801155c:	69b9      	ldr	r1, [r7, #24]
 801155e:	440b      	add	r3, r1
 8011560:	7f1b      	ldrb	r3, [r3, #28]
 8011562:	429a      	cmp	r2, r3
 8011564:	f040 8083 	bne.w	801166e <dhcp_recv+0x186>
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 8011568:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801156c:	3301      	adds	r3, #1
 801156e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011572:	6a3b      	ldr	r3, [r7, #32]
 8011574:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011578:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801157c:	429a      	cmp	r2, r3
 801157e:	d207      	bcs.n	8011590 <dhcp_recv+0xa8>
 8011580:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011584:	2b05      	cmp	r3, #5
 8011586:	d803      	bhi.n	8011590 <dhcp_recv+0xa8>
 8011588:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801158c:	2b0f      	cmp	r3, #15
 801158e:	d9dd      	bls.n	801154c <dhcp_recv+0x64>
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8011590:	69bb      	ldr	r3, [r7, #24]
 8011592:	685b      	ldr	r3, [r3, #4]
 8011594:	4618      	mov	r0, r3
 8011596:	f7f7 fa56 	bl	8008a46 <lwip_htonl>
 801159a:	4602      	mov	r2, r0
 801159c:	69fb      	ldr	r3, [r7, #28]
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	429a      	cmp	r2, r3
 80115a2:	d166      	bne.n	8011672 <dhcp_recv+0x18a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",lwip_ntohl(reply_msg->xid),dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
 80115a4:	6879      	ldr	r1, [r7, #4]
 80115a6:	69f8      	ldr	r0, [r7, #28]
 80115a8:	f7ff fce0 	bl	8010f6c <dhcp_parse_reply>
 80115ac:	4603      	mov	r3, r0
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d161      	bne.n	8011676 <dhcp_recv+0x18e>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80115b2:	4b3d      	ldr	r3, [pc, #244]	; (80116a8 <dhcp_recv+0x1c0>)
 80115b4:	785b      	ldrb	r3, [r3, #1]
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d05f      	beq.n	801167a <dhcp_recv+0x192>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80115ba:	4b3c      	ldr	r3, [pc, #240]	; (80116ac <dhcp_recv+0x1c4>)
 80115bc:	685b      	ldr	r3, [r3, #4]
 80115be:	75fb      	strb	r3, [r7, #23]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 80115c0:	7dfb      	ldrb	r3, [r7, #23]
 80115c2:	2b05      	cmp	r3, #5
 80115c4:	d128      	bne.n	8011618 <dhcp_recv+0x130>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80115c6:	69fb      	ldr	r3, [r7, #28]
 80115c8:	7a5b      	ldrb	r3, [r3, #9]
 80115ca:	2b01      	cmp	r3, #1
 80115cc:	d111      	bne.n	80115f2 <dhcp_recv+0x10a>
      dhcp_handle_ack(netif);
 80115ce:	6a38      	ldr	r0, [r7, #32]
 80115d0:	f7fe fe1a 	bl	8010208 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80115d4:	6a3b      	ldr	r3, [r7, #32]
 80115d6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80115da:	f003 0308 	and.w	r3, r3, #8
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d003      	beq.n	80115ea <dhcp_recv+0x102>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 80115e2:	6a38      	ldr	r0, [r7, #32]
 80115e4:	f7fe fbe2 	bl	800fdac <dhcp_check>
 80115e8:	e048      	b.n	801167c <dhcp_recv+0x194>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 80115ea:	6a38      	ldr	r0, [r7, #32]
 80115ec:	f7ff f878 	bl	80106e0 <dhcp_bind>
 80115f0:	e044      	b.n	801167c <dhcp_recv+0x194>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80115f2:	69fb      	ldr	r3, [r7, #28]
 80115f4:	7a5b      	ldrb	r3, [r3, #9]
 80115f6:	2b03      	cmp	r3, #3
 80115f8:	d007      	beq.n	801160a <dhcp_recv+0x122>
 80115fa:	69fb      	ldr	r3, [r7, #28]
 80115fc:	7a5b      	ldrb	r3, [r3, #9]
 80115fe:	2b04      	cmp	r3, #4
 8011600:	d003      	beq.n	801160a <dhcp_recv+0x122>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8011602:	69fb      	ldr	r3, [r7, #28]
 8011604:	7a5b      	ldrb	r3, [r3, #9]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8011606:	2b05      	cmp	r3, #5
 8011608:	d138      	bne.n	801167c <dhcp_recv+0x194>
      dhcp_handle_ack(netif);
 801160a:	6a38      	ldr	r0, [r7, #32]
 801160c:	f7fe fdfc 	bl	8010208 <dhcp_handle_ack>
      dhcp_bind(netif);
 8011610:	6a38      	ldr	r0, [r7, #32]
 8011612:	f7ff f865 	bl	80106e0 <dhcp_bind>
 8011616:	e031      	b.n	801167c <dhcp_recv+0x194>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8011618:	7dfb      	ldrb	r3, [r7, #23]
 801161a:	2b06      	cmp	r3, #6
 801161c:	d113      	bne.n	8011646 <dhcp_recv+0x15e>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801161e:	69fb      	ldr	r3, [r7, #28]
 8011620:	7a5b      	ldrb	r3, [r3, #9]
  else if ((msg_type == DHCP_NAK) &&
 8011622:	2b03      	cmp	r3, #3
 8011624:	d00b      	beq.n	801163e <dhcp_recv+0x156>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8011626:	69fb      	ldr	r3, [r7, #28]
 8011628:	7a5b      	ldrb	r3, [r3, #9]
 801162a:	2b01      	cmp	r3, #1
 801162c:	d007      	beq.n	801163e <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801162e:	69fb      	ldr	r3, [r7, #28]
 8011630:	7a5b      	ldrb	r3, [r3, #9]
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8011632:	2b04      	cmp	r3, #4
 8011634:	d003      	beq.n	801163e <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8011636:	69fb      	ldr	r3, [r7, #28]
 8011638:	7a5b      	ldrb	r3, [r3, #9]
 801163a:	2b05      	cmp	r3, #5
 801163c:	d103      	bne.n	8011646 <dhcp_recv+0x15e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801163e:	6a38      	ldr	r0, [r7, #32]
 8011640:	f7fe fb9a 	bl	800fd78 <dhcp_handle_nak>
 8011644:	e01a      	b.n	801167c <dhcp_recv+0x194>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8011646:	7dfb      	ldrb	r3, [r7, #23]
 8011648:	2b02      	cmp	r3, #2
 801164a:	d10a      	bne.n	8011662 <dhcp_recv+0x17a>
 801164c:	69fb      	ldr	r3, [r7, #28]
 801164e:	7a5b      	ldrb	r3, [r3, #9]
 8011650:	2b06      	cmp	r3, #6
 8011652:	d106      	bne.n	8011662 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    dhcp->request_timeout = 0;
 8011654:	69fb      	ldr	r3, [r7, #28]
 8011656:	2200      	movs	r2, #0
 8011658:	82da      	strh	r2, [r3, #22]
    /* remember offered lease */
    dhcp_handle_offer(netif);
 801165a:	6a38      	ldr	r0, [r7, #32]
 801165c:	f7fe fbda 	bl	800fe14 <dhcp_handle_offer>
 8011660:	e00c      	b.n	801167c <dhcp_recv+0x194>
  }

free_pbuf_and_return:
 8011662:	bf00      	nop
 8011664:	e00a      	b.n	801167c <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 8011666:	bf00      	nop
 8011668:	e008      	b.n	801167c <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 801166a:	bf00      	nop
 801166c:	e006      	b.n	801167c <dhcp_recv+0x194>
      goto free_pbuf_and_return;
 801166e:	bf00      	nop
 8011670:	e004      	b.n	801167c <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 8011672:	bf00      	nop
 8011674:	e002      	b.n	801167c <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 8011676:	bf00      	nop
 8011678:	e000      	b.n	801167c <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 801167a:	bf00      	nop
  if (dhcp != NULL) {
 801167c:	69fb      	ldr	r3, [r7, #28]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d002      	beq.n	8011688 <dhcp_recv+0x1a0>
    dhcp->msg_in = NULL;
 8011682:	69fb      	ldr	r3, [r7, #28]
 8011684:	2200      	movs	r2, #0
 8011686:	605a      	str	r2, [r3, #4]
  }
  pbuf_free(p);
 8011688:	6878      	ldr	r0, [r7, #4]
 801168a:	f7f8 fe8d 	bl	800a3a8 <pbuf_free>
}
 801168e:	bf00      	nop
 8011690:	3728      	adds	r7, #40	; 0x28
 8011692:	46bd      	mov	sp, r7
 8011694:	bd80      	pop	{r7, pc}
 8011696:	bf00      	nop
 8011698:	20007f84 	.word	0x20007f84
 801169c:	0801f8bc 	.word	0x0801f8bc
 80116a0:	0801f9e8 	.word	0x0801f9e8
 80116a4:	0801f91c 	.word	0x0801f91c
 80116a8:	2000b818 	.word	0x2000b818
 80116ac:	2000b824 	.word	0x2000b824

080116b0 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
 80116b0:	b590      	push	{r4, r7, lr}
 80116b2:	b087      	sub	sp, #28
 80116b4:	af00      	add	r7, sp, #0
 80116b6:	60f8      	str	r0, [r7, #12]
 80116b8:	60b9      	str	r1, [r7, #8]
 80116ba:	4613      	mov	r3, r2
 80116bc:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d109      	bne.n	80116d8 <dhcp_create_msg+0x28>
 80116c4:	4ba3      	ldr	r3, [pc, #652]	; (8011954 <dhcp_create_msg+0x2a4>)
 80116c6:	f240 721d 	movw	r2, #1821	; 0x71d
 80116ca:	49a3      	ldr	r1, [pc, #652]	; (8011958 <dhcp_create_msg+0x2a8>)
 80116cc:	48a3      	ldr	r0, [pc, #652]	; (801195c <dhcp_create_msg+0x2ac>)
 80116ce:	f009 f825 	bl	801a71c <iprintf>
 80116d2:	f06f 030f 	mvn.w	r3, #15
 80116d6:	e138      	b.n	801194a <dhcp_create_msg+0x29a>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80116d8:	68bb      	ldr	r3, [r7, #8]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d109      	bne.n	80116f2 <dhcp_create_msg+0x42>
 80116de:	4b9d      	ldr	r3, [pc, #628]	; (8011954 <dhcp_create_msg+0x2a4>)
 80116e0:	f240 721e 	movw	r2, #1822	; 0x71e
 80116e4:	499e      	ldr	r1, [pc, #632]	; (8011960 <dhcp_create_msg+0x2b0>)
 80116e6:	489d      	ldr	r0, [pc, #628]	; (801195c <dhcp_create_msg+0x2ac>)
 80116e8:	f009 f818 	bl	801a71c <iprintf>
 80116ec:	f06f 0305 	mvn.w	r3, #5
 80116f0:	e12b      	b.n	801194a <dhcp_create_msg+0x29a>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
 80116f2:	68bb      	ldr	r3, [r7, #8]
 80116f4:	68db      	ldr	r3, [r3, #12]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d006      	beq.n	8011708 <dhcp_create_msg+0x58>
 80116fa:	4b96      	ldr	r3, [pc, #600]	; (8011954 <dhcp_create_msg+0x2a4>)
 80116fc:	f240 721f 	movw	r2, #1823	; 0x71f
 8011700:	4998      	ldr	r1, [pc, #608]	; (8011964 <dhcp_create_msg+0x2b4>)
 8011702:	4896      	ldr	r0, [pc, #600]	; (801195c <dhcp_create_msg+0x2ac>)
 8011704:	f009 f80a 	bl	801a71c <iprintf>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
 8011708:	68bb      	ldr	r3, [r7, #8]
 801170a:	691b      	ldr	r3, [r3, #16]
 801170c:	2b00      	cmp	r3, #0
 801170e:	d006      	beq.n	801171e <dhcp_create_msg+0x6e>
 8011710:	4b90      	ldr	r3, [pc, #576]	; (8011954 <dhcp_create_msg+0x2a4>)
 8011712:	f44f 62e4 	mov.w	r2, #1824	; 0x720
 8011716:	4994      	ldr	r1, [pc, #592]	; (8011968 <dhcp_create_msg+0x2b8>)
 8011718:	4890      	ldr	r0, [pc, #576]	; (801195c <dhcp_create_msg+0x2ac>)
 801171a:	f008 ffff 	bl	801a71c <iprintf>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801171e:	2200      	movs	r2, #0
 8011720:	f44f 719a 	mov.w	r1, #308	; 0x134
 8011724:	2000      	movs	r0, #0
 8011726:	f7f8 facd 	bl	8009cc4 <pbuf_alloc>
 801172a:	4602      	mov	r2, r0
 801172c:	68bb      	ldr	r3, [r7, #8]
 801172e:	60da      	str	r2, [r3, #12]
  if (dhcp->p_out == NULL) {
 8011730:	68bb      	ldr	r3, [r7, #8]
 8011732:	68db      	ldr	r3, [r3, #12]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d102      	bne.n	801173e <dhcp_create_msg+0x8e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
 8011738:	f04f 33ff 	mov.w	r3, #4294967295
 801173c:	e105      	b.n	801194a <dhcp_create_msg+0x29a>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801173e:	68bb      	ldr	r3, [r7, #8]
 8011740:	68db      	ldr	r3, [r3, #12]
 8011742:	895b      	ldrh	r3, [r3, #10]
 8011744:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8011748:	d206      	bcs.n	8011758 <dhcp_create_msg+0xa8>
 801174a:	4b82      	ldr	r3, [pc, #520]	; (8011954 <dhcp_create_msg+0x2a4>)
 801174c:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8011750:	4986      	ldr	r1, [pc, #536]	; (801196c <dhcp_create_msg+0x2bc>)
 8011752:	4882      	ldr	r0, [pc, #520]	; (801195c <dhcp_create_msg+0x2ac>)
 8011754:	f008 ffe2 	bl	801a71c <iprintf>
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8011758:	79fb      	ldrb	r3, [r7, #7]
 801175a:	2b03      	cmp	r3, #3
 801175c:	d103      	bne.n	8011766 <dhcp_create_msg+0xb6>
 801175e:	68bb      	ldr	r3, [r7, #8]
 8011760:	7a5b      	ldrb	r3, [r3, #9]
 8011762:	2b03      	cmp	r3, #3
 8011764:	d10d      	bne.n	8011782 <dhcp_create_msg+0xd2>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8011766:	68bb      	ldr	r3, [r7, #8]
 8011768:	7a9b      	ldrb	r3, [r3, #10]
 801176a:	2b00      	cmp	r3, #0
 801176c:	d105      	bne.n	801177a <dhcp_create_msg+0xca>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801176e:	f009 f851 	bl	801a814 <rand>
 8011772:	4603      	mov	r3, r0
 8011774:	461a      	mov	r2, r3
 8011776:	4b7e      	ldr	r3, [pc, #504]	; (8011970 <dhcp_create_msg+0x2c0>)
 8011778:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801177a:	4b7d      	ldr	r3, [pc, #500]	; (8011970 <dhcp_create_msg+0x2c0>)
 801177c:	681a      	ldr	r2, [r3, #0]
 801177e:	68bb      	ldr	r3, [r7, #8]
 8011780:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 8011782:	68bb      	ldr	r3, [r7, #8]
 8011784:	68db      	ldr	r3, [r3, #12]
 8011786:	685a      	ldr	r2, [r3, #4]
 8011788:	68bb      	ldr	r3, [r7, #8]
 801178a:	611a      	str	r2, [r3, #16]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 801178c:	68bb      	ldr	r3, [r7, #8]
 801178e:	691b      	ldr	r3, [r3, #16]
 8011790:	2201      	movs	r2, #1
 8011792:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 8011794:	68bb      	ldr	r3, [r7, #8]
 8011796:	691b      	ldr	r3, [r3, #16]
 8011798:	2201      	movs	r2, #1
 801179a:	705a      	strb	r2, [r3, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 801179c:	68bb      	ldr	r3, [r7, #8]
 801179e:	691b      	ldr	r3, [r3, #16]
 80117a0:	68fa      	ldr	r2, [r7, #12]
 80117a2:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 80117a6:	709a      	strb	r2, [r3, #2]
  dhcp->msg_out->hops = 0;
 80117a8:	68bb      	ldr	r3, [r7, #8]
 80117aa:	691b      	ldr	r3, [r3, #16]
 80117ac:	2200      	movs	r2, #0
 80117ae:	70da      	strb	r2, [r3, #3]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 80117b0:	68bb      	ldr	r3, [r7, #8]
 80117b2:	681a      	ldr	r2, [r3, #0]
 80117b4:	68bb      	ldr	r3, [r7, #8]
 80117b6:	691c      	ldr	r4, [r3, #16]
 80117b8:	4610      	mov	r0, r2
 80117ba:	f7f7 f944 	bl	8008a46 <lwip_htonl>
 80117be:	4603      	mov	r3, r0
 80117c0:	6063      	str	r3, [r4, #4]
  dhcp->msg_out->secs = 0;
 80117c2:	68bb      	ldr	r3, [r7, #8]
 80117c4:	691b      	ldr	r3, [r3, #16]
 80117c6:	2200      	movs	r2, #0
 80117c8:	721a      	strb	r2, [r3, #8]
 80117ca:	2200      	movs	r2, #0
 80117cc:	725a      	strb	r2, [r3, #9]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
 80117ce:	68bb      	ldr	r3, [r7, #8]
 80117d0:	691b      	ldr	r3, [r3, #16]
 80117d2:	2200      	movs	r2, #0
 80117d4:	729a      	strb	r2, [r3, #10]
 80117d6:	2200      	movs	r2, #0
 80117d8:	72da      	strb	r2, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
 80117da:	68bb      	ldr	r3, [r7, #8]
 80117dc:	691b      	ldr	r3, [r3, #16]
 80117de:	2200      	movs	r2, #0
 80117e0:	731a      	strb	r2, [r3, #12]
 80117e2:	2200      	movs	r2, #0
 80117e4:	735a      	strb	r2, [r3, #13]
 80117e6:	2200      	movs	r2, #0
 80117e8:	739a      	strb	r2, [r3, #14]
 80117ea:	2200      	movs	r2, #0
 80117ec:	73da      	strb	r2, [r3, #15]
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80117ee:	79fb      	ldrb	r3, [r7, #7]
 80117f0:	2b08      	cmp	r3, #8
 80117f2:	d010      	beq.n	8011816 <dhcp_create_msg+0x166>
 80117f4:	79fb      	ldrb	r3, [r7, #7]
 80117f6:	2b04      	cmp	r3, #4
 80117f8:	d00d      	beq.n	8011816 <dhcp_create_msg+0x166>
 80117fa:	79fb      	ldrb	r3, [r7, #7]
 80117fc:	2b07      	cmp	r3, #7
 80117fe:	d00a      	beq.n	8011816 <dhcp_create_msg+0x166>
 8011800:	79fb      	ldrb	r3, [r7, #7]
 8011802:	2b03      	cmp	r3, #3
 8011804:	d10d      	bne.n	8011822 <dhcp_create_msg+0x172>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 8011806:	68bb      	ldr	r3, [r7, #8]
 8011808:	7a5b      	ldrb	r3, [r3, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801180a:	2b05      	cmp	r3, #5
 801180c:	d003      	beq.n	8011816 <dhcp_create_msg+0x166>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 801180e:	68bb      	ldr	r3, [r7, #8]
 8011810:	7a5b      	ldrb	r3, [r3, #9]
 8011812:	2b04      	cmp	r3, #4
 8011814:	d105      	bne.n	8011822 <dhcp_create_msg+0x172>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	1d1a      	adds	r2, r3, #4
 801181a:	68bb      	ldr	r3, [r7, #8]
 801181c:	691b      	ldr	r3, [r3, #16]
 801181e:	6812      	ldr	r2, [r2, #0]
 8011820:	60da      	str	r2, [r3, #12]
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 8011822:	68bb      	ldr	r3, [r7, #8]
 8011824:	691b      	ldr	r3, [r3, #16]
 8011826:	2200      	movs	r2, #0
 8011828:	741a      	strb	r2, [r3, #16]
 801182a:	2200      	movs	r2, #0
 801182c:	745a      	strb	r2, [r3, #17]
 801182e:	2200      	movs	r2, #0
 8011830:	749a      	strb	r2, [r3, #18]
 8011832:	2200      	movs	r2, #0
 8011834:	74da      	strb	r2, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
 8011836:	68bb      	ldr	r3, [r7, #8]
 8011838:	691b      	ldr	r3, [r3, #16]
 801183a:	2200      	movs	r2, #0
 801183c:	751a      	strb	r2, [r3, #20]
 801183e:	2200      	movs	r2, #0
 8011840:	755a      	strb	r2, [r3, #21]
 8011842:	2200      	movs	r2, #0
 8011844:	759a      	strb	r2, [r3, #22]
 8011846:	2200      	movs	r2, #0
 8011848:	75da      	strb	r2, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
 801184a:	68bb      	ldr	r3, [r7, #8]
 801184c:	691b      	ldr	r3, [r3, #16]
 801184e:	2200      	movs	r2, #0
 8011850:	761a      	strb	r2, [r3, #24]
 8011852:	2200      	movs	r2, #0
 8011854:	765a      	strb	r2, [r3, #25]
 8011856:	2200      	movs	r2, #0
 8011858:	769a      	strb	r2, [r3, #26]
 801185a:	2200      	movs	r2, #0
 801185c:	76da      	strb	r2, [r3, #27]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 801185e:	2300      	movs	r3, #0
 8011860:	82fb      	strh	r3, [r7, #22]
 8011862:	e019      	b.n	8011898 <dhcp_create_msg+0x1e8>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801186a:	b29b      	uxth	r3, r3
 801186c:	8afa      	ldrh	r2, [r7, #22]
 801186e:	429a      	cmp	r2, r3
 8011870:	d208      	bcs.n	8011884 <dhcp_create_msg+0x1d4>
 8011872:	8afb      	ldrh	r3, [r7, #22]
 8011874:	2b05      	cmp	r3, #5
 8011876:	d805      	bhi.n	8011884 <dhcp_create_msg+0x1d4>
 8011878:	8afb      	ldrh	r3, [r7, #22]
 801187a:	68fa      	ldr	r2, [r7, #12]
 801187c:	4413      	add	r3, r2
 801187e:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 8011882:	e000      	b.n	8011886 <dhcp_create_msg+0x1d6>
 8011884:	2100      	movs	r1, #0
 8011886:	68bb      	ldr	r3, [r7, #8]
 8011888:	691a      	ldr	r2, [r3, #16]
 801188a:	8afb      	ldrh	r3, [r7, #22]
 801188c:	4413      	add	r3, r2
 801188e:	460a      	mov	r2, r1
 8011890:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 8011892:	8afb      	ldrh	r3, [r7, #22]
 8011894:	3301      	adds	r3, #1
 8011896:	82fb      	strh	r3, [r7, #22]
 8011898:	8afb      	ldrh	r3, [r7, #22]
 801189a:	2b0f      	cmp	r3, #15
 801189c:	d9e2      	bls.n	8011864 <dhcp_create_msg+0x1b4>
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 801189e:	2300      	movs	r3, #0
 80118a0:	82fb      	strh	r3, [r7, #22]
 80118a2:	e009      	b.n	80118b8 <dhcp_create_msg+0x208>
    dhcp->msg_out->sname[i] = 0;
 80118a4:	68bb      	ldr	r3, [r7, #8]
 80118a6:	691a      	ldr	r2, [r3, #16]
 80118a8:	8afb      	ldrh	r3, [r7, #22]
 80118aa:	4413      	add	r3, r2
 80118ac:	2200      	movs	r2, #0
 80118ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 80118b2:	8afb      	ldrh	r3, [r7, #22]
 80118b4:	3301      	adds	r3, #1
 80118b6:	82fb      	strh	r3, [r7, #22]
 80118b8:	8afb      	ldrh	r3, [r7, #22]
 80118ba:	2b3f      	cmp	r3, #63	; 0x3f
 80118bc:	d9f2      	bls.n	80118a4 <dhcp_create_msg+0x1f4>
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 80118be:	2300      	movs	r3, #0
 80118c0:	82fb      	strh	r3, [r7, #22]
 80118c2:	e009      	b.n	80118d8 <dhcp_create_msg+0x228>
    dhcp->msg_out->file[i] = 0;
 80118c4:	68bb      	ldr	r3, [r7, #8]
 80118c6:	691a      	ldr	r2, [r3, #16]
 80118c8:	8afb      	ldrh	r3, [r7, #22]
 80118ca:	4413      	add	r3, r2
 80118cc:	2200      	movs	r2, #0
 80118ce:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 80118d2:	8afb      	ldrh	r3, [r7, #22]
 80118d4:	3301      	adds	r3, #1
 80118d6:	82fb      	strh	r3, [r7, #22]
 80118d8:	8afb      	ldrh	r3, [r7, #22]
 80118da:	2b7f      	cmp	r3, #127	; 0x7f
 80118dc:	d9f2      	bls.n	80118c4 <dhcp_create_msg+0x214>
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80118de:	68bb      	ldr	r3, [r7, #8]
 80118e0:	691b      	ldr	r3, [r3, #16]
 80118e2:	2200      	movs	r2, #0
 80118e4:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80118e8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80118ec:	2200      	movs	r2, #0
 80118ee:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80118f2:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80118f6:	2200      	movs	r2, #0
 80118f8:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80118fc:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8011900:	2200      	movs	r2, #0
 8011902:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8011906:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  dhcp->options_out_len = 0;
 801190a:	68bb      	ldr	r3, [r7, #8]
 801190c:	2200      	movs	r2, #0
 801190e:	829a      	strh	r2, [r3, #20]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 8011910:	2300      	movs	r3, #0
 8011912:	82fb      	strh	r3, [r7, #22]
 8011914:	e00b      	b.n	801192e <dhcp_create_msg+0x27e>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 8011916:	68bb      	ldr	r3, [r7, #8]
 8011918:	691a      	ldr	r2, [r3, #16]
 801191a:	8afb      	ldrh	r3, [r7, #22]
 801191c:	8af9      	ldrh	r1, [r7, #22]
 801191e:	b2c9      	uxtb	r1, r1
 8011920:	4413      	add	r3, r2
 8011922:	460a      	mov	r2, r1
 8011924:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 8011928:	8afb      	ldrh	r3, [r7, #22]
 801192a:	3301      	adds	r3, #1
 801192c:	82fb      	strh	r3, [r7, #22]
 801192e:	8afb      	ldrh	r3, [r7, #22]
 8011930:	2b43      	cmp	r3, #67	; 0x43
 8011932:	d9f0      	bls.n	8011916 <dhcp_create_msg+0x266>
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8011934:	2201      	movs	r2, #1
 8011936:	2135      	movs	r1, #53	; 0x35
 8011938:	68b8      	ldr	r0, [r7, #8]
 801193a:	f7ff fa25 	bl	8010d88 <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
 801193e:	79fb      	ldrb	r3, [r7, #7]
 8011940:	4619      	mov	r1, r3
 8011942:	68b8      	ldr	r0, [r7, #8]
 8011944:	f7ff fa5a 	bl	8010dfc <dhcp_option_byte>
  return ERR_OK;
 8011948:	2300      	movs	r3, #0
}
 801194a:	4618      	mov	r0, r3
 801194c:	371c      	adds	r7, #28
 801194e:	46bd      	mov	sp, r7
 8011950:	bd90      	pop	{r4, r7, pc}
 8011952:	bf00      	nop
 8011954:	0801f8bc 	.word	0x0801f8bc
 8011958:	0801fbfc 	.word	0x0801fbfc
 801195c:	0801f91c 	.word	0x0801f91c
 8011960:	0801fc1c 	.word	0x0801fc1c
 8011964:	0801fc3c 	.word	0x0801fc3c
 8011968:	0801fc64 	.word	0x0801fc64
 801196c:	0801fc8c 	.word	0x0801fc8c
 8011970:	20004c48 	.word	0x20004c48

08011974 <dhcp_delete_msg>:
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
 8011974:	b580      	push	{r7, lr}
 8011976:	b082      	sub	sp, #8
 8011978:	af00      	add	r7, sp, #0
 801197a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	2b00      	cmp	r3, #0
 8011980:	d107      	bne.n	8011992 <dhcp_delete_msg+0x1e>
 8011982:	4b18      	ldr	r3, [pc, #96]	; (80119e4 <dhcp_delete_msg+0x70>)
 8011984:	f240 726d 	movw	r2, #1901	; 0x76d
 8011988:	4917      	ldr	r1, [pc, #92]	; (80119e8 <dhcp_delete_msg+0x74>)
 801198a:	4818      	ldr	r0, [pc, #96]	; (80119ec <dhcp_delete_msg+0x78>)
 801198c:	f008 fec6 	bl	801a71c <iprintf>
 8011990:	e024      	b.n	80119dc <dhcp_delete_msg+0x68>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	68db      	ldr	r3, [r3, #12]
 8011996:	2b00      	cmp	r3, #0
 8011998:	d106      	bne.n	80119a8 <dhcp_delete_msg+0x34>
 801199a:	4b12      	ldr	r3, [pc, #72]	; (80119e4 <dhcp_delete_msg+0x70>)
 801199c:	f240 726e 	movw	r2, #1902	; 0x76e
 80119a0:	4913      	ldr	r1, [pc, #76]	; (80119f0 <dhcp_delete_msg+0x7c>)
 80119a2:	4812      	ldr	r0, [pc, #72]	; (80119ec <dhcp_delete_msg+0x78>)
 80119a4:	f008 feba 	bl	801a71c <iprintf>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	691b      	ldr	r3, [r3, #16]
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d106      	bne.n	80119be <dhcp_delete_msg+0x4a>
 80119b0:	4b0c      	ldr	r3, [pc, #48]	; (80119e4 <dhcp_delete_msg+0x70>)
 80119b2:	f240 726f 	movw	r2, #1903	; 0x76f
 80119b6:	490f      	ldr	r1, [pc, #60]	; (80119f4 <dhcp_delete_msg+0x80>)
 80119b8:	480c      	ldr	r0, [pc, #48]	; (80119ec <dhcp_delete_msg+0x78>)
 80119ba:	f008 feaf 	bl	801a71c <iprintf>
  if (dhcp->p_out != NULL) {
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	68db      	ldr	r3, [r3, #12]
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d004      	beq.n	80119d0 <dhcp_delete_msg+0x5c>
    pbuf_free(dhcp->p_out);
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	68db      	ldr	r3, [r3, #12]
 80119ca:	4618      	mov	r0, r3
 80119cc:	f7f8 fcec 	bl	800a3a8 <pbuf_free>
  }
  dhcp->p_out = NULL;
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	2200      	movs	r2, #0
 80119d4:	60da      	str	r2, [r3, #12]
  dhcp->msg_out = NULL;
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	2200      	movs	r2, #0
 80119da:	611a      	str	r2, [r3, #16]
}
 80119dc:	3708      	adds	r7, #8
 80119de:	46bd      	mov	sp, r7
 80119e0:	bd80      	pop	{r7, pc}
 80119e2:	bf00      	nop
 80119e4:	0801f8bc 	.word	0x0801f8bc
 80119e8:	0801fccc 	.word	0x0801fccc
 80119ec:	0801f91c 	.word	0x0801f91c
 80119f0:	0801fcec 	.word	0x0801fcec
 80119f4:	0801fd14 	.word	0x0801fd14

080119f8 <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
 80119f8:	b580      	push	{r7, lr}
 80119fa:	b082      	sub	sp, #8
 80119fc:	af00      	add	r7, sp, #0
 80119fe:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d107      	bne.n	8011a16 <dhcp_option_trailer+0x1e>
 8011a06:	4b24      	ldr	r3, [pc, #144]	; (8011a98 <dhcp_option_trailer+0xa0>)
 8011a08:	f240 7282 	movw	r2, #1922	; 0x782
 8011a0c:	4923      	ldr	r1, [pc, #140]	; (8011a9c <dhcp_option_trailer+0xa4>)
 8011a0e:	4824      	ldr	r0, [pc, #144]	; (8011aa0 <dhcp_option_trailer+0xa8>)
 8011a10:	f008 fe84 	bl	801a71c <iprintf>
 8011a14:	e03c      	b.n	8011a90 <dhcp_option_trailer+0x98>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	691b      	ldr	r3, [r3, #16]
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d106      	bne.n	8011a2c <dhcp_option_trailer+0x34>
 8011a1e:	4b1e      	ldr	r3, [pc, #120]	; (8011a98 <dhcp_option_trailer+0xa0>)
 8011a20:	f240 7283 	movw	r2, #1923	; 0x783
 8011a24:	491f      	ldr	r1, [pc, #124]	; (8011aa4 <dhcp_option_trailer+0xac>)
 8011a26:	481e      	ldr	r0, [pc, #120]	; (8011aa0 <dhcp_option_trailer+0xa8>)
 8011a28:	f008 fe78 	bl	801a71c <iprintf>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	8a9b      	ldrh	r3, [r3, #20]
 8011a30:	2b43      	cmp	r3, #67	; 0x43
 8011a32:	d906      	bls.n	8011a42 <dhcp_option_trailer+0x4a>
 8011a34:	4b18      	ldr	r3, [pc, #96]	; (8011a98 <dhcp_option_trailer+0xa0>)
 8011a36:	f240 7284 	movw	r2, #1924	; 0x784
 8011a3a:	491b      	ldr	r1, [pc, #108]	; (8011aa8 <dhcp_option_trailer+0xb0>)
 8011a3c:	4818      	ldr	r0, [pc, #96]	; (8011aa0 <dhcp_option_trailer+0xa8>)
 8011a3e:	f008 fe6d 	bl	801a71c <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	691a      	ldr	r2, [r3, #16]
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	8a9b      	ldrh	r3, [r3, #20]
 8011a4a:	1c59      	adds	r1, r3, #1
 8011a4c:	b288      	uxth	r0, r1
 8011a4e:	6879      	ldr	r1, [r7, #4]
 8011a50:	8288      	strh	r0, [r1, #20]
 8011a52:	4413      	add	r3, r2
 8011a54:	22ff      	movs	r2, #255	; 0xff
 8011a56:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 8011a5a:	e00b      	b.n	8011a74 <dhcp_option_trailer+0x7c>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	691a      	ldr	r2, [r3, #16]
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	8a9b      	ldrh	r3, [r3, #20]
 8011a64:	1c59      	adds	r1, r3, #1
 8011a66:	b288      	uxth	r0, r1
 8011a68:	6879      	ldr	r1, [r7, #4]
 8011a6a:	8288      	strh	r0, [r1, #20]
 8011a6c:	4413      	add	r3, r2
 8011a6e:	2200      	movs	r2, #0
 8011a70:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	8a9b      	ldrh	r3, [r3, #20]
 8011a78:	2b43      	cmp	r3, #67	; 0x43
 8011a7a:	d905      	bls.n	8011a88 <dhcp_option_trailer+0x90>
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	8a9b      	ldrh	r3, [r3, #20]
 8011a80:	f003 0303 	and.w	r3, r3, #3
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d003      	beq.n	8011a90 <dhcp_option_trailer+0x98>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	8a9b      	ldrh	r3, [r3, #20]
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 8011a8c:	2b43      	cmp	r3, #67	; 0x43
 8011a8e:	d9e5      	bls.n	8011a5c <dhcp_option_trailer+0x64>
  }
}
 8011a90:	3708      	adds	r7, #8
 8011a92:	46bd      	mov	sp, r7
 8011a94:	bd80      	pop	{r7, pc}
 8011a96:	bf00      	nop
 8011a98:	0801f8bc 	.word	0x0801f8bc
 8011a9c:	0801fd3c 	.word	0x0801fd3c
 8011aa0:	0801f91c 	.word	0x0801f91c
 8011aa4:	0801fd60 	.word	0x0801fd60
 8011aa8:	0801fd8c 	.word	0x0801fd8c

08011aac <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8011aac:	b480      	push	{r7}
 8011aae:	b085      	sub	sp, #20
 8011ab0:	af00      	add	r7, sp, #0
 8011ab2:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d017      	beq.n	8011aea <dhcp_supplied_address+0x3e>
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d013      	beq.n	8011aea <dhcp_supplied_address+0x3e>
    struct dhcp* dhcp = netif_dhcp_data(netif);
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ac6:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8011ac8:	68fb      	ldr	r3, [r7, #12]
 8011aca:	7a5b      	ldrb	r3, [r3, #9]
 8011acc:	2b0a      	cmp	r3, #10
 8011ace:	d007      	beq.n	8011ae0 <dhcp_supplied_address+0x34>
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	7a5b      	ldrb	r3, [r3, #9]
 8011ad4:	2b05      	cmp	r3, #5
 8011ad6:	d003      	beq.n	8011ae0 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8011ad8:	68fb      	ldr	r3, [r7, #12]
 8011ada:	7a5b      	ldrb	r3, [r3, #9]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8011adc:	2b04      	cmp	r3, #4
 8011ade:	d101      	bne.n	8011ae4 <dhcp_supplied_address+0x38>
 8011ae0:	2301      	movs	r3, #1
 8011ae2:	e000      	b.n	8011ae6 <dhcp_supplied_address+0x3a>
 8011ae4:	2300      	movs	r3, #0
 8011ae6:	b2db      	uxtb	r3, r3
 8011ae8:	e000      	b.n	8011aec <dhcp_supplied_address+0x40>
  }
  return 0;
 8011aea:	2300      	movs	r3, #0
}
 8011aec:	4618      	mov	r0, r3
 8011aee:	3714      	adds	r7, #20
 8011af0:	46bd      	mov	sp, r7
 8011af2:	bc80      	pop	{r7}
 8011af4:	4770      	bx	lr
	...

08011af8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8011af8:	b580      	push	{r7, lr}
 8011afa:	b082      	sub	sp, #8
 8011afc:	af00      	add	r7, sp, #0
 8011afe:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8011b00:	4915      	ldr	r1, [pc, #84]	; (8011b58 <etharp_free_entry+0x60>)
 8011b02:	687a      	ldr	r2, [r7, #4]
 8011b04:	4613      	mov	r3, r2
 8011b06:	005b      	lsls	r3, r3, #1
 8011b08:	4413      	add	r3, r2
 8011b0a:	00db      	lsls	r3, r3, #3
 8011b0c:	440b      	add	r3, r1
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d013      	beq.n	8011b3c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8011b14:	4910      	ldr	r1, [pc, #64]	; (8011b58 <etharp_free_entry+0x60>)
 8011b16:	687a      	ldr	r2, [r7, #4]
 8011b18:	4613      	mov	r3, r2
 8011b1a:	005b      	lsls	r3, r3, #1
 8011b1c:	4413      	add	r3, r2
 8011b1e:	00db      	lsls	r3, r3, #3
 8011b20:	440b      	add	r3, r1
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	4618      	mov	r0, r3
 8011b26:	f7f8 fc3f 	bl	800a3a8 <pbuf_free>
    arp_table[i].q = NULL;
 8011b2a:	490b      	ldr	r1, [pc, #44]	; (8011b58 <etharp_free_entry+0x60>)
 8011b2c:	687a      	ldr	r2, [r7, #4]
 8011b2e:	4613      	mov	r3, r2
 8011b30:	005b      	lsls	r3, r3, #1
 8011b32:	4413      	add	r3, r2
 8011b34:	00db      	lsls	r3, r3, #3
 8011b36:	440b      	add	r3, r1
 8011b38:	2200      	movs	r2, #0
 8011b3a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8011b3c:	4906      	ldr	r1, [pc, #24]	; (8011b58 <etharp_free_entry+0x60>)
 8011b3e:	687a      	ldr	r2, [r7, #4]
 8011b40:	4613      	mov	r3, r2
 8011b42:	005b      	lsls	r3, r3, #1
 8011b44:	4413      	add	r3, r2
 8011b46:	00db      	lsls	r3, r3, #3
 8011b48:	440b      	add	r3, r1
 8011b4a:	3314      	adds	r3, #20
 8011b4c:	2200      	movs	r2, #0
 8011b4e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8011b50:	bf00      	nop
 8011b52:	3708      	adds	r7, #8
 8011b54:	46bd      	mov	sp, r7
 8011b56:	bd80      	pop	{r7, pc}
 8011b58:	20004c4c 	.word	0x20004c4c

08011b5c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8011b5c:	b580      	push	{r7, lr}
 8011b5e:	b082      	sub	sp, #8
 8011b60:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011b62:	2300      	movs	r3, #0
 8011b64:	71fb      	strb	r3, [r7, #7]
 8011b66:	e096      	b.n	8011c96 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8011b68:	79fa      	ldrb	r2, [r7, #7]
 8011b6a:	494f      	ldr	r1, [pc, #316]	; (8011ca8 <etharp_tmr+0x14c>)
 8011b6c:	4613      	mov	r3, r2
 8011b6e:	005b      	lsls	r3, r3, #1
 8011b70:	4413      	add	r3, r2
 8011b72:	00db      	lsls	r3, r3, #3
 8011b74:	440b      	add	r3, r1
 8011b76:	3314      	adds	r3, #20
 8011b78:	781b      	ldrb	r3, [r3, #0]
 8011b7a:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 8011b7c:	79bb      	ldrb	r3, [r7, #6]
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	f000 8086 	beq.w	8011c90 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 8011b84:	79fa      	ldrb	r2, [r7, #7]
 8011b86:	4948      	ldr	r1, [pc, #288]	; (8011ca8 <etharp_tmr+0x14c>)
 8011b88:	4613      	mov	r3, r2
 8011b8a:	005b      	lsls	r3, r3, #1
 8011b8c:	4413      	add	r3, r2
 8011b8e:	00db      	lsls	r3, r3, #3
 8011b90:	440b      	add	r3, r1
 8011b92:	3312      	adds	r3, #18
 8011b94:	881b      	ldrh	r3, [r3, #0]
 8011b96:	3301      	adds	r3, #1
 8011b98:	b298      	uxth	r0, r3
 8011b9a:	4943      	ldr	r1, [pc, #268]	; (8011ca8 <etharp_tmr+0x14c>)
 8011b9c:	4613      	mov	r3, r2
 8011b9e:	005b      	lsls	r3, r3, #1
 8011ba0:	4413      	add	r3, r2
 8011ba2:	00db      	lsls	r3, r3, #3
 8011ba4:	440b      	add	r3, r1
 8011ba6:	3312      	adds	r3, #18
 8011ba8:	4602      	mov	r2, r0
 8011baa:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011bac:	79fa      	ldrb	r2, [r7, #7]
 8011bae:	493e      	ldr	r1, [pc, #248]	; (8011ca8 <etharp_tmr+0x14c>)
 8011bb0:	4613      	mov	r3, r2
 8011bb2:	005b      	lsls	r3, r3, #1
 8011bb4:	4413      	add	r3, r2
 8011bb6:	00db      	lsls	r3, r3, #3
 8011bb8:	440b      	add	r3, r1
 8011bba:	3312      	adds	r3, #18
 8011bbc:	881b      	ldrh	r3, [r3, #0]
 8011bbe:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8011bc2:	d215      	bcs.n	8011bf0 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011bc4:	79fa      	ldrb	r2, [r7, #7]
 8011bc6:	4938      	ldr	r1, [pc, #224]	; (8011ca8 <etharp_tmr+0x14c>)
 8011bc8:	4613      	mov	r3, r2
 8011bca:	005b      	lsls	r3, r3, #1
 8011bcc:	4413      	add	r3, r2
 8011bce:	00db      	lsls	r3, r3, #3
 8011bd0:	440b      	add	r3, r1
 8011bd2:	3314      	adds	r3, #20
 8011bd4:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011bd6:	2b01      	cmp	r3, #1
 8011bd8:	d10f      	bne.n	8011bfa <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8011bda:	79fa      	ldrb	r2, [r7, #7]
 8011bdc:	4932      	ldr	r1, [pc, #200]	; (8011ca8 <etharp_tmr+0x14c>)
 8011bde:	4613      	mov	r3, r2
 8011be0:	005b      	lsls	r3, r3, #1
 8011be2:	4413      	add	r3, r2
 8011be4:	00db      	lsls	r3, r3, #3
 8011be6:	440b      	add	r3, r1
 8011be8:	3312      	adds	r3, #18
 8011bea:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011bec:	2b04      	cmp	r3, #4
 8011bee:	d904      	bls.n	8011bfa <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8011bf0:	79fb      	ldrb	r3, [r7, #7]
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	f7ff ff80 	bl	8011af8 <etharp_free_entry>
 8011bf8:	e04a      	b.n	8011c90 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8011bfa:	79fa      	ldrb	r2, [r7, #7]
 8011bfc:	492a      	ldr	r1, [pc, #168]	; (8011ca8 <etharp_tmr+0x14c>)
 8011bfe:	4613      	mov	r3, r2
 8011c00:	005b      	lsls	r3, r3, #1
 8011c02:	4413      	add	r3, r2
 8011c04:	00db      	lsls	r3, r3, #3
 8011c06:	440b      	add	r3, r1
 8011c08:	3314      	adds	r3, #20
 8011c0a:	781b      	ldrb	r3, [r3, #0]
 8011c0c:	2b03      	cmp	r3, #3
 8011c0e:	d10a      	bne.n	8011c26 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8011c10:	79fa      	ldrb	r2, [r7, #7]
 8011c12:	4925      	ldr	r1, [pc, #148]	; (8011ca8 <etharp_tmr+0x14c>)
 8011c14:	4613      	mov	r3, r2
 8011c16:	005b      	lsls	r3, r3, #1
 8011c18:	4413      	add	r3, r2
 8011c1a:	00db      	lsls	r3, r3, #3
 8011c1c:	440b      	add	r3, r1
 8011c1e:	3314      	adds	r3, #20
 8011c20:	2204      	movs	r2, #4
 8011c22:	701a      	strb	r2, [r3, #0]
 8011c24:	e034      	b.n	8011c90 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8011c26:	79fa      	ldrb	r2, [r7, #7]
 8011c28:	491f      	ldr	r1, [pc, #124]	; (8011ca8 <etharp_tmr+0x14c>)
 8011c2a:	4613      	mov	r3, r2
 8011c2c:	005b      	lsls	r3, r3, #1
 8011c2e:	4413      	add	r3, r2
 8011c30:	00db      	lsls	r3, r3, #3
 8011c32:	440b      	add	r3, r1
 8011c34:	3314      	adds	r3, #20
 8011c36:	781b      	ldrb	r3, [r3, #0]
 8011c38:	2b04      	cmp	r3, #4
 8011c3a:	d10a      	bne.n	8011c52 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8011c3c:	79fa      	ldrb	r2, [r7, #7]
 8011c3e:	491a      	ldr	r1, [pc, #104]	; (8011ca8 <etharp_tmr+0x14c>)
 8011c40:	4613      	mov	r3, r2
 8011c42:	005b      	lsls	r3, r3, #1
 8011c44:	4413      	add	r3, r2
 8011c46:	00db      	lsls	r3, r3, #3
 8011c48:	440b      	add	r3, r1
 8011c4a:	3314      	adds	r3, #20
 8011c4c:	2202      	movs	r2, #2
 8011c4e:	701a      	strb	r2, [r3, #0]
 8011c50:	e01e      	b.n	8011c90 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011c52:	79fa      	ldrb	r2, [r7, #7]
 8011c54:	4914      	ldr	r1, [pc, #80]	; (8011ca8 <etharp_tmr+0x14c>)
 8011c56:	4613      	mov	r3, r2
 8011c58:	005b      	lsls	r3, r3, #1
 8011c5a:	4413      	add	r3, r2
 8011c5c:	00db      	lsls	r3, r3, #3
 8011c5e:	440b      	add	r3, r1
 8011c60:	3314      	adds	r3, #20
 8011c62:	781b      	ldrb	r3, [r3, #0]
 8011c64:	2b01      	cmp	r3, #1
 8011c66:	d113      	bne.n	8011c90 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8011c68:	79fa      	ldrb	r2, [r7, #7]
 8011c6a:	490f      	ldr	r1, [pc, #60]	; (8011ca8 <etharp_tmr+0x14c>)
 8011c6c:	4613      	mov	r3, r2
 8011c6e:	005b      	lsls	r3, r3, #1
 8011c70:	4413      	add	r3, r2
 8011c72:	00db      	lsls	r3, r3, #3
 8011c74:	440b      	add	r3, r1
 8011c76:	3308      	adds	r3, #8
 8011c78:	6818      	ldr	r0, [r3, #0]
 8011c7a:	79fa      	ldrb	r2, [r7, #7]
 8011c7c:	4613      	mov	r3, r2
 8011c7e:	005b      	lsls	r3, r3, #1
 8011c80:	4413      	add	r3, r2
 8011c82:	00db      	lsls	r3, r3, #3
 8011c84:	4a08      	ldr	r2, [pc, #32]	; (8011ca8 <etharp_tmr+0x14c>)
 8011c86:	4413      	add	r3, r2
 8011c88:	3304      	adds	r3, #4
 8011c8a:	4619      	mov	r1, r3
 8011c8c:	f000 fe3c 	bl	8012908 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011c90:	79fb      	ldrb	r3, [r7, #7]
 8011c92:	3301      	adds	r3, #1
 8011c94:	71fb      	strb	r3, [r7, #7]
 8011c96:	79fb      	ldrb	r3, [r7, #7]
 8011c98:	2b09      	cmp	r3, #9
 8011c9a:	f67f af65 	bls.w	8011b68 <etharp_tmr+0xc>
      }
    }
  }
}
 8011c9e:	bf00      	nop
 8011ca0:	3708      	adds	r7, #8
 8011ca2:	46bd      	mov	sp, r7
 8011ca4:	bd80      	pop	{r7, pc}
 8011ca6:	bf00      	nop
 8011ca8:	20004c4c 	.word	0x20004c4c

08011cac <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 8011cac:	b580      	push	{r7, lr}
 8011cae:	b088      	sub	sp, #32
 8011cb0:	af00      	add	r7, sp, #0
 8011cb2:	60f8      	str	r0, [r7, #12]
 8011cb4:	460b      	mov	r3, r1
 8011cb6:	607a      	str	r2, [r7, #4]
 8011cb8:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8011cba:	230a      	movs	r3, #10
 8011cbc:	77fb      	strb	r3, [r7, #31]
 8011cbe:	230a      	movs	r3, #10
 8011cc0:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 8011cc2:	230a      	movs	r3, #10
 8011cc4:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 8011cca:	230a      	movs	r3, #10
 8011ccc:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8011cce:	2300      	movs	r3, #0
 8011cd0:	833b      	strh	r3, [r7, #24]
 8011cd2:	2300      	movs	r3, #0
 8011cd4:	82fb      	strh	r3, [r7, #22]
 8011cd6:	2300      	movs	r3, #0
 8011cd8:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011cda:	2300      	movs	r3, #0
 8011cdc:	773b      	strb	r3, [r7, #28]
 8011cde:	e093      	b.n	8011e08 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 8011ce0:	7f3a      	ldrb	r2, [r7, #28]
 8011ce2:	4990      	ldr	r1, [pc, #576]	; (8011f24 <etharp_find_entry+0x278>)
 8011ce4:	4613      	mov	r3, r2
 8011ce6:	005b      	lsls	r3, r3, #1
 8011ce8:	4413      	add	r3, r2
 8011cea:	00db      	lsls	r3, r3, #3
 8011cec:	440b      	add	r3, r1
 8011cee:	3314      	adds	r3, #20
 8011cf0:	781b      	ldrb	r3, [r3, #0]
 8011cf2:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8011cf4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8011cf8:	2b0a      	cmp	r3, #10
 8011cfa:	d105      	bne.n	8011d08 <etharp_find_entry+0x5c>
 8011cfc:	7cfb      	ldrb	r3, [r7, #19]
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d102      	bne.n	8011d08 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 8011d02:	7f3b      	ldrb	r3, [r7, #28]
 8011d04:	777b      	strb	r3, [r7, #29]
 8011d06:	e07c      	b.n	8011e02 <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 8011d08:	7cfb      	ldrb	r3, [r7, #19]
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d079      	beq.n	8011e02 <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8011d0e:	7cfb      	ldrb	r3, [r7, #19]
 8011d10:	2b01      	cmp	r3, #1
 8011d12:	d009      	beq.n	8011d28 <etharp_find_entry+0x7c>
 8011d14:	7cfb      	ldrb	r3, [r7, #19]
 8011d16:	2b01      	cmp	r3, #1
 8011d18:	d806      	bhi.n	8011d28 <etharp_find_entry+0x7c>
 8011d1a:	4b83      	ldr	r3, [pc, #524]	; (8011f28 <etharp_find_entry+0x27c>)
 8011d1c:	f44f 7293 	mov.w	r2, #294	; 0x126
 8011d20:	4982      	ldr	r1, [pc, #520]	; (8011f2c <etharp_find_entry+0x280>)
 8011d22:	4883      	ldr	r0, [pc, #524]	; (8011f30 <etharp_find_entry+0x284>)
 8011d24:	f008 fcfa 	bl	801a71c <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8011d28:	68fb      	ldr	r3, [r7, #12]
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d00f      	beq.n	8011d4e <etharp_find_entry+0xa2>
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	6819      	ldr	r1, [r3, #0]
 8011d32:	7f3a      	ldrb	r2, [r7, #28]
 8011d34:	487b      	ldr	r0, [pc, #492]	; (8011f24 <etharp_find_entry+0x278>)
 8011d36:	4613      	mov	r3, r2
 8011d38:	005b      	lsls	r3, r3, #1
 8011d3a:	4413      	add	r3, r2
 8011d3c:	00db      	lsls	r3, r3, #3
 8011d3e:	4403      	add	r3, r0
 8011d40:	3304      	adds	r3, #4
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	4299      	cmp	r1, r3
 8011d46:	d102      	bne.n	8011d4e <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 8011d48:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8011d4c:	e0e5      	b.n	8011f1a <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8011d4e:	7cfb      	ldrb	r3, [r7, #19]
 8011d50:	2b01      	cmp	r3, #1
 8011d52:	d13b      	bne.n	8011dcc <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8011d54:	7f3a      	ldrb	r2, [r7, #28]
 8011d56:	4973      	ldr	r1, [pc, #460]	; (8011f24 <etharp_find_entry+0x278>)
 8011d58:	4613      	mov	r3, r2
 8011d5a:	005b      	lsls	r3, r3, #1
 8011d5c:	4413      	add	r3, r2
 8011d5e:	00db      	lsls	r3, r3, #3
 8011d60:	440b      	add	r3, r1
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d018      	beq.n	8011d9a <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 8011d68:	7f3a      	ldrb	r2, [r7, #28]
 8011d6a:	496e      	ldr	r1, [pc, #440]	; (8011f24 <etharp_find_entry+0x278>)
 8011d6c:	4613      	mov	r3, r2
 8011d6e:	005b      	lsls	r3, r3, #1
 8011d70:	4413      	add	r3, r2
 8011d72:	00db      	lsls	r3, r3, #3
 8011d74:	440b      	add	r3, r1
 8011d76:	3312      	adds	r3, #18
 8011d78:	881b      	ldrh	r3, [r3, #0]
 8011d7a:	8b3a      	ldrh	r2, [r7, #24]
 8011d7c:	429a      	cmp	r2, r3
 8011d7e:	d840      	bhi.n	8011e02 <etharp_find_entry+0x156>
            old_queue = i;
 8011d80:	7f3b      	ldrb	r3, [r7, #28]
 8011d82:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 8011d84:	7f3a      	ldrb	r2, [r7, #28]
 8011d86:	4967      	ldr	r1, [pc, #412]	; (8011f24 <etharp_find_entry+0x278>)
 8011d88:	4613      	mov	r3, r2
 8011d8a:	005b      	lsls	r3, r3, #1
 8011d8c:	4413      	add	r3, r2
 8011d8e:	00db      	lsls	r3, r3, #3
 8011d90:	440b      	add	r3, r1
 8011d92:	3312      	adds	r3, #18
 8011d94:	881b      	ldrh	r3, [r3, #0]
 8011d96:	833b      	strh	r3, [r7, #24]
 8011d98:	e033      	b.n	8011e02 <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8011d9a:	7f3a      	ldrb	r2, [r7, #28]
 8011d9c:	4961      	ldr	r1, [pc, #388]	; (8011f24 <etharp_find_entry+0x278>)
 8011d9e:	4613      	mov	r3, r2
 8011da0:	005b      	lsls	r3, r3, #1
 8011da2:	4413      	add	r3, r2
 8011da4:	00db      	lsls	r3, r3, #3
 8011da6:	440b      	add	r3, r1
 8011da8:	3312      	adds	r3, #18
 8011daa:	881b      	ldrh	r3, [r3, #0]
 8011dac:	8afa      	ldrh	r2, [r7, #22]
 8011dae:	429a      	cmp	r2, r3
 8011db0:	d827      	bhi.n	8011e02 <etharp_find_entry+0x156>
            old_pending = i;
 8011db2:	7f3b      	ldrb	r3, [r7, #28]
 8011db4:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 8011db6:	7f3a      	ldrb	r2, [r7, #28]
 8011db8:	495a      	ldr	r1, [pc, #360]	; (8011f24 <etharp_find_entry+0x278>)
 8011dba:	4613      	mov	r3, r2
 8011dbc:	005b      	lsls	r3, r3, #1
 8011dbe:	4413      	add	r3, r2
 8011dc0:	00db      	lsls	r3, r3, #3
 8011dc2:	440b      	add	r3, r1
 8011dc4:	3312      	adds	r3, #18
 8011dc6:	881b      	ldrh	r3, [r3, #0]
 8011dc8:	82fb      	strh	r3, [r7, #22]
 8011dca:	e01a      	b.n	8011e02 <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8011dcc:	7cfb      	ldrb	r3, [r7, #19]
 8011dce:	2b01      	cmp	r3, #1
 8011dd0:	d917      	bls.n	8011e02 <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8011dd2:	7f3a      	ldrb	r2, [r7, #28]
 8011dd4:	4953      	ldr	r1, [pc, #332]	; (8011f24 <etharp_find_entry+0x278>)
 8011dd6:	4613      	mov	r3, r2
 8011dd8:	005b      	lsls	r3, r3, #1
 8011dda:	4413      	add	r3, r2
 8011ddc:	00db      	lsls	r3, r3, #3
 8011dde:	440b      	add	r3, r1
 8011de0:	3312      	adds	r3, #18
 8011de2:	881b      	ldrh	r3, [r3, #0]
 8011de4:	8aba      	ldrh	r2, [r7, #20]
 8011de6:	429a      	cmp	r2, r3
 8011de8:	d80b      	bhi.n	8011e02 <etharp_find_entry+0x156>
            old_stable = i;
 8011dea:	7f3b      	ldrb	r3, [r7, #28]
 8011dec:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 8011dee:	7f3a      	ldrb	r2, [r7, #28]
 8011df0:	494c      	ldr	r1, [pc, #304]	; (8011f24 <etharp_find_entry+0x278>)
 8011df2:	4613      	mov	r3, r2
 8011df4:	005b      	lsls	r3, r3, #1
 8011df6:	4413      	add	r3, r2
 8011df8:	00db      	lsls	r3, r3, #3
 8011dfa:	440b      	add	r3, r1
 8011dfc:	3312      	adds	r3, #18
 8011dfe:	881b      	ldrh	r3, [r3, #0]
 8011e00:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011e02:	7f3b      	ldrb	r3, [r7, #28]
 8011e04:	3301      	adds	r3, #1
 8011e06:	773b      	strb	r3, [r7, #28]
 8011e08:	7f3b      	ldrb	r3, [r7, #28]
 8011e0a:	2b09      	cmp	r3, #9
 8011e0c:	f67f af68 	bls.w	8011ce0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8011e10:	7afb      	ldrb	r3, [r7, #11]
 8011e12:	f003 0302 	and.w	r3, r3, #2
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d108      	bne.n	8011e2c <etharp_find_entry+0x180>
 8011e1a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8011e1e:	2b0a      	cmp	r3, #10
 8011e20:	d107      	bne.n	8011e32 <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8011e22:	7afb      	ldrb	r3, [r7, #11]
 8011e24:	f003 0301 	and.w	r3, r3, #1
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d102      	bne.n	8011e32 <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 8011e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8011e30:	e073      	b.n	8011f1a <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8011e32:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8011e36:	2b09      	cmp	r3, #9
 8011e38:	dc02      	bgt.n	8011e40 <etharp_find_entry+0x194>
    i = empty;
 8011e3a:	7f7b      	ldrb	r3, [r7, #29]
 8011e3c:	773b      	strb	r3, [r7, #28]
 8011e3e:	e036      	b.n	8011eae <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8011e40:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8011e44:	2b09      	cmp	r3, #9
 8011e46:	dc13      	bgt.n	8011e70 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 8011e48:	7fbb      	ldrb	r3, [r7, #30]
 8011e4a:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8011e4c:	7f3a      	ldrb	r2, [r7, #28]
 8011e4e:	4935      	ldr	r1, [pc, #212]	; (8011f24 <etharp_find_entry+0x278>)
 8011e50:	4613      	mov	r3, r2
 8011e52:	005b      	lsls	r3, r3, #1
 8011e54:	4413      	add	r3, r2
 8011e56:	00db      	lsls	r3, r3, #3
 8011e58:	440b      	add	r3, r1
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d018      	beq.n	8011e92 <etharp_find_entry+0x1e6>
 8011e60:	4b31      	ldr	r3, [pc, #196]	; (8011f28 <etharp_find_entry+0x27c>)
 8011e62:	f240 126f 	movw	r2, #367	; 0x16f
 8011e66:	4933      	ldr	r1, [pc, #204]	; (8011f34 <etharp_find_entry+0x288>)
 8011e68:	4831      	ldr	r0, [pc, #196]	; (8011f30 <etharp_find_entry+0x284>)
 8011e6a:	f008 fc57 	bl	801a71c <iprintf>
 8011e6e:	e010      	b.n	8011e92 <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8011e70:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011e74:	2b09      	cmp	r3, #9
 8011e76:	dc02      	bgt.n	8011e7e <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 8011e78:	7ffb      	ldrb	r3, [r7, #31]
 8011e7a:	773b      	strb	r3, [r7, #28]
 8011e7c:	e009      	b.n	8011e92 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8011e7e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011e82:	2b09      	cmp	r3, #9
 8011e84:	dc02      	bgt.n	8011e8c <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8011e86:	7efb      	ldrb	r3, [r7, #27]
 8011e88:	773b      	strb	r3, [r7, #28]
 8011e8a:	e002      	b.n	8011e92 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 8011e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8011e90:	e043      	b.n	8011f1a <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011e92:	7f3b      	ldrb	r3, [r7, #28]
 8011e94:	2b09      	cmp	r3, #9
 8011e96:	d906      	bls.n	8011ea6 <etharp_find_entry+0x1fa>
 8011e98:	4b23      	ldr	r3, [pc, #140]	; (8011f28 <etharp_find_entry+0x27c>)
 8011e9a:	f240 1281 	movw	r2, #385	; 0x181
 8011e9e:	4926      	ldr	r1, [pc, #152]	; (8011f38 <etharp_find_entry+0x28c>)
 8011ea0:	4823      	ldr	r0, [pc, #140]	; (8011f30 <etharp_find_entry+0x284>)
 8011ea2:	f008 fc3b 	bl	801a71c <iprintf>
    etharp_free_entry(i);
 8011ea6:	7f3b      	ldrb	r3, [r7, #28]
 8011ea8:	4618      	mov	r0, r3
 8011eaa:	f7ff fe25 	bl	8011af8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011eae:	7f3b      	ldrb	r3, [r7, #28]
 8011eb0:	2b09      	cmp	r3, #9
 8011eb2:	d906      	bls.n	8011ec2 <etharp_find_entry+0x216>
 8011eb4:	4b1c      	ldr	r3, [pc, #112]	; (8011f28 <etharp_find_entry+0x27c>)
 8011eb6:	f240 1285 	movw	r2, #389	; 0x185
 8011eba:	491f      	ldr	r1, [pc, #124]	; (8011f38 <etharp_find_entry+0x28c>)
 8011ebc:	481c      	ldr	r0, [pc, #112]	; (8011f30 <etharp_find_entry+0x284>)
 8011ebe:	f008 fc2d 	bl	801a71c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8011ec2:	7f3a      	ldrb	r2, [r7, #28]
 8011ec4:	4917      	ldr	r1, [pc, #92]	; (8011f24 <etharp_find_entry+0x278>)
 8011ec6:	4613      	mov	r3, r2
 8011ec8:	005b      	lsls	r3, r3, #1
 8011eca:	4413      	add	r3, r2
 8011ecc:	00db      	lsls	r3, r3, #3
 8011ece:	440b      	add	r3, r1
 8011ed0:	3314      	adds	r3, #20
 8011ed2:	781b      	ldrb	r3, [r3, #0]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d006      	beq.n	8011ee6 <etharp_find_entry+0x23a>
 8011ed8:	4b13      	ldr	r3, [pc, #76]	; (8011f28 <etharp_find_entry+0x27c>)
 8011eda:	f240 1287 	movw	r2, #391	; 0x187
 8011ede:	4917      	ldr	r1, [pc, #92]	; (8011f3c <etharp_find_entry+0x290>)
 8011ee0:	4813      	ldr	r0, [pc, #76]	; (8011f30 <etharp_find_entry+0x284>)
 8011ee2:	f008 fc1b 	bl	801a71c <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d00a      	beq.n	8011f02 <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8011eec:	7f3a      	ldrb	r2, [r7, #28]
 8011eee:	68fb      	ldr	r3, [r7, #12]
 8011ef0:	6819      	ldr	r1, [r3, #0]
 8011ef2:	480c      	ldr	r0, [pc, #48]	; (8011f24 <etharp_find_entry+0x278>)
 8011ef4:	4613      	mov	r3, r2
 8011ef6:	005b      	lsls	r3, r3, #1
 8011ef8:	4413      	add	r3, r2
 8011efa:	00db      	lsls	r3, r3, #3
 8011efc:	4403      	add	r3, r0
 8011efe:	3304      	adds	r3, #4
 8011f00:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8011f02:	7f3a      	ldrb	r2, [r7, #28]
 8011f04:	4907      	ldr	r1, [pc, #28]	; (8011f24 <etharp_find_entry+0x278>)
 8011f06:	4613      	mov	r3, r2
 8011f08:	005b      	lsls	r3, r3, #1
 8011f0a:	4413      	add	r3, r2
 8011f0c:	00db      	lsls	r3, r3, #3
 8011f0e:	440b      	add	r3, r1
 8011f10:	3312      	adds	r3, #18
 8011f12:	2200      	movs	r2, #0
 8011f14:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 8011f16:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 8011f1a:	4618      	mov	r0, r3
 8011f1c:	3720      	adds	r7, #32
 8011f1e:	46bd      	mov	sp, r7
 8011f20:	bd80      	pop	{r7, pc}
 8011f22:	bf00      	nop
 8011f24:	20004c4c 	.word	0x20004c4c
 8011f28:	0801fdcc 	.word	0x0801fdcc
 8011f2c:	0801fe04 	.word	0x0801fe04
 8011f30:	0801fe44 	.word	0x0801fe44
 8011f34:	0801fe6c 	.word	0x0801fe6c
 8011f38:	0801fe84 	.word	0x0801fe84
 8011f3c:	0801fe98 	.word	0x0801fe98

08011f40 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8011f40:	b580      	push	{r7, lr}
 8011f42:	b088      	sub	sp, #32
 8011f44:	af02      	add	r7, sp, #8
 8011f46:	60f8      	str	r0, [r7, #12]
 8011f48:	60b9      	str	r1, [r7, #8]
 8011f4a:	607a      	str	r2, [r7, #4]
 8011f4c:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8011f4e:	68fb      	ldr	r3, [r7, #12]
 8011f50:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011f54:	2b06      	cmp	r3, #6
 8011f56:	d006      	beq.n	8011f66 <etharp_update_arp_entry+0x26>
 8011f58:	4b48      	ldr	r3, [pc, #288]	; (801207c <etharp_update_arp_entry+0x13c>)
 8011f5a:	f240 12ab 	movw	r2, #427	; 0x1ab
 8011f5e:	4948      	ldr	r1, [pc, #288]	; (8012080 <etharp_update_arp_entry+0x140>)
 8011f60:	4848      	ldr	r0, [pc, #288]	; (8012084 <etharp_update_arp_entry+0x144>)
 8011f62:	f008 fbdb 	bl	801a71c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8011f66:	68bb      	ldr	r3, [r7, #8]
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d012      	beq.n	8011f92 <etharp_update_arp_entry+0x52>
 8011f6c:	68bb      	ldr	r3, [r7, #8]
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d00e      	beq.n	8011f92 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011f74:	68bb      	ldr	r3, [r7, #8]
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	68f9      	ldr	r1, [r7, #12]
 8011f7a:	4618      	mov	r0, r3
 8011f7c:	f001 f8fc 	bl	8013178 <ip4_addr_isbroadcast_u32>
 8011f80:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d105      	bne.n	8011f92 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8011f86:	68bb      	ldr	r3, [r7, #8]
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011f8e:	2be0      	cmp	r3, #224	; 0xe0
 8011f90:	d102      	bne.n	8011f98 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011f92:	f06f 030f 	mvn.w	r3, #15
 8011f96:	e06c      	b.n	8012072 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8011f98:	78fb      	ldrb	r3, [r7, #3]
 8011f9a:	68fa      	ldr	r2, [r7, #12]
 8011f9c:	4619      	mov	r1, r3
 8011f9e:	68b8      	ldr	r0, [r7, #8]
 8011fa0:	f7ff fe84 	bl	8011cac <etharp_find_entry>
 8011fa4:	4603      	mov	r3, r0
 8011fa6:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 8011fa8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	da02      	bge.n	8011fb6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8011fb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011fb4:	e05d      	b.n	8012072 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8011fb6:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8011fba:	4933      	ldr	r1, [pc, #204]	; (8012088 <etharp_update_arp_entry+0x148>)
 8011fbc:	4613      	mov	r3, r2
 8011fbe:	005b      	lsls	r3, r3, #1
 8011fc0:	4413      	add	r3, r2
 8011fc2:	00db      	lsls	r3, r3, #3
 8011fc4:	440b      	add	r3, r1
 8011fc6:	3314      	adds	r3, #20
 8011fc8:	2202      	movs	r2, #2
 8011fca:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8011fcc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8011fd0:	492d      	ldr	r1, [pc, #180]	; (8012088 <etharp_update_arp_entry+0x148>)
 8011fd2:	4613      	mov	r3, r2
 8011fd4:	005b      	lsls	r3, r3, #1
 8011fd6:	4413      	add	r3, r2
 8011fd8:	00db      	lsls	r3, r3, #3
 8011fda:	440b      	add	r3, r1
 8011fdc:	3308      	adds	r3, #8
 8011fde:	68fa      	ldr	r2, [r7, #12]
 8011fe0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8011fe2:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8011fe6:	4613      	mov	r3, r2
 8011fe8:	005b      	lsls	r3, r3, #1
 8011fea:	4413      	add	r3, r2
 8011fec:	00db      	lsls	r3, r3, #3
 8011fee:	3308      	adds	r3, #8
 8011ff0:	4a25      	ldr	r2, [pc, #148]	; (8012088 <etharp_update_arp_entry+0x148>)
 8011ff2:	4413      	add	r3, r2
 8011ff4:	3304      	adds	r3, #4
 8011ff6:	2206      	movs	r2, #6
 8011ff8:	6879      	ldr	r1, [r7, #4]
 8011ffa:	4618      	mov	r0, r3
 8011ffc:	f007 fd4b 	bl	8019a96 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8012000:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8012004:	4920      	ldr	r1, [pc, #128]	; (8012088 <etharp_update_arp_entry+0x148>)
 8012006:	4613      	mov	r3, r2
 8012008:	005b      	lsls	r3, r3, #1
 801200a:	4413      	add	r3, r2
 801200c:	00db      	lsls	r3, r3, #3
 801200e:	440b      	add	r3, r1
 8012010:	3312      	adds	r3, #18
 8012012:	2200      	movs	r2, #0
 8012014:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8012016:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801201a:	491b      	ldr	r1, [pc, #108]	; (8012088 <etharp_update_arp_entry+0x148>)
 801201c:	4613      	mov	r3, r2
 801201e:	005b      	lsls	r3, r3, #1
 8012020:	4413      	add	r3, r2
 8012022:	00db      	lsls	r3, r3, #3
 8012024:	440b      	add	r3, r1
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	2b00      	cmp	r3, #0
 801202a:	d021      	beq.n	8012070 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801202c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8012030:	4915      	ldr	r1, [pc, #84]	; (8012088 <etharp_update_arp_entry+0x148>)
 8012032:	4613      	mov	r3, r2
 8012034:	005b      	lsls	r3, r3, #1
 8012036:	4413      	add	r3, r2
 8012038:	00db      	lsls	r3, r3, #3
 801203a:	440b      	add	r3, r1
 801203c:	681b      	ldr	r3, [r3, #0]
 801203e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8012040:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8012044:	4910      	ldr	r1, [pc, #64]	; (8012088 <etharp_update_arp_entry+0x148>)
 8012046:	4613      	mov	r3, r2
 8012048:	005b      	lsls	r3, r3, #1
 801204a:	4413      	add	r3, r2
 801204c:	00db      	lsls	r3, r3, #3
 801204e:	440b      	add	r3, r1
 8012050:	2200      	movs	r2, #0
 8012052:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	f103 022d 	add.w	r2, r3, #45	; 0x2d
 801205a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801205e:	9300      	str	r3, [sp, #0]
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	6939      	ldr	r1, [r7, #16]
 8012064:	68f8      	ldr	r0, [r7, #12]
 8012066:	f002 f867 	bl	8014138 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801206a:	6938      	ldr	r0, [r7, #16]
 801206c:	f7f8 f99c 	bl	800a3a8 <pbuf_free>
  }
  return ERR_OK;
 8012070:	2300      	movs	r3, #0
}
 8012072:	4618      	mov	r0, r3
 8012074:	3718      	adds	r7, #24
 8012076:	46bd      	mov	sp, r7
 8012078:	bd80      	pop	{r7, pc}
 801207a:	bf00      	nop
 801207c:	0801fdcc 	.word	0x0801fdcc
 8012080:	0801fec4 	.word	0x0801fec4
 8012084:	0801fe44 	.word	0x0801fe44
 8012088:	20004c4c 	.word	0x20004c4c

0801208c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801208c:	b580      	push	{r7, lr}
 801208e:	b084      	sub	sp, #16
 8012090:	af00      	add	r7, sp, #0
 8012092:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012094:	2300      	movs	r3, #0
 8012096:	73fb      	strb	r3, [r7, #15]
 8012098:	e01f      	b.n	80120da <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 801209a:	7bfa      	ldrb	r2, [r7, #15]
 801209c:	4912      	ldr	r1, [pc, #72]	; (80120e8 <etharp_cleanup_netif+0x5c>)
 801209e:	4613      	mov	r3, r2
 80120a0:	005b      	lsls	r3, r3, #1
 80120a2:	4413      	add	r3, r2
 80120a4:	00db      	lsls	r3, r3, #3
 80120a6:	440b      	add	r3, r1
 80120a8:	3314      	adds	r3, #20
 80120aa:	781b      	ldrb	r3, [r3, #0]
 80120ac:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80120ae:	7bbb      	ldrb	r3, [r7, #14]
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d00f      	beq.n	80120d4 <etharp_cleanup_netif+0x48>
 80120b4:	7bfa      	ldrb	r2, [r7, #15]
 80120b6:	490c      	ldr	r1, [pc, #48]	; (80120e8 <etharp_cleanup_netif+0x5c>)
 80120b8:	4613      	mov	r3, r2
 80120ba:	005b      	lsls	r3, r3, #1
 80120bc:	4413      	add	r3, r2
 80120be:	00db      	lsls	r3, r3, #3
 80120c0:	440b      	add	r3, r1
 80120c2:	3308      	adds	r3, #8
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	687a      	ldr	r2, [r7, #4]
 80120c8:	429a      	cmp	r2, r3
 80120ca:	d103      	bne.n	80120d4 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 80120cc:	7bfb      	ldrb	r3, [r7, #15]
 80120ce:	4618      	mov	r0, r3
 80120d0:	f7ff fd12 	bl	8011af8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80120d4:	7bfb      	ldrb	r3, [r7, #15]
 80120d6:	3301      	adds	r3, #1
 80120d8:	73fb      	strb	r3, [r7, #15]
 80120da:	7bfb      	ldrb	r3, [r7, #15]
 80120dc:	2b09      	cmp	r3, #9
 80120de:	d9dc      	bls.n	801209a <etharp_cleanup_netif+0xe>
    }
  }
}
 80120e0:	bf00      	nop
 80120e2:	3710      	adds	r7, #16
 80120e4:	46bd      	mov	sp, r7
 80120e6:	bd80      	pop	{r7, pc}
 80120e8:	20004c4c 	.word	0x20004c4c

080120ec <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80120ec:	b5b0      	push	{r4, r5, r7, lr}
 80120ee:	b08a      	sub	sp, #40	; 0x28
 80120f0:	af04      	add	r7, sp, #16
 80120f2:	6078      	str	r0, [r7, #4]
 80120f4:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80120f6:	683b      	ldr	r3, [r7, #0]
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d107      	bne.n	801210c <etharp_input+0x20>
 80120fc:	4b3f      	ldr	r3, [pc, #252]	; (80121fc <etharp_input+0x110>)
 80120fe:	f44f 7222 	mov.w	r2, #648	; 0x288
 8012102:	493f      	ldr	r1, [pc, #252]	; (8012200 <etharp_input+0x114>)
 8012104:	483f      	ldr	r0, [pc, #252]	; (8012204 <etharp_input+0x118>)
 8012106:	f008 fb09 	bl	801a71c <iprintf>
 801210a:	e074      	b.n	80121f6 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	685b      	ldr	r3, [r3, #4]
 8012110:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8012112:	693b      	ldr	r3, [r7, #16]
 8012114:	881b      	ldrh	r3, [r3, #0]
 8012116:	b29b      	uxth	r3, r3
 8012118:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801211c:	d10c      	bne.n	8012138 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801211e:	693b      	ldr	r3, [r7, #16]
 8012120:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8012122:	2b06      	cmp	r3, #6
 8012124:	d108      	bne.n	8012138 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012126:	693b      	ldr	r3, [r7, #16]
 8012128:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801212a:	2b04      	cmp	r3, #4
 801212c:	d104      	bne.n	8012138 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801212e:	693b      	ldr	r3, [r7, #16]
 8012130:	885b      	ldrh	r3, [r3, #2]
 8012132:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012134:	2b08      	cmp	r3, #8
 8012136:	d003      	beq.n	8012140 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8012138:	6878      	ldr	r0, [r7, #4]
 801213a:	f7f8 f935 	bl	800a3a8 <pbuf_free>
    return;
 801213e:	e05a      	b.n	80121f6 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8012140:	693b      	ldr	r3, [r7, #16]
 8012142:	330e      	adds	r3, #14
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8012148:	693b      	ldr	r3, [r7, #16]
 801214a:	3318      	adds	r3, #24
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012150:	683b      	ldr	r3, [r7, #0]
 8012152:	3304      	adds	r3, #4
 8012154:	681b      	ldr	r3, [r3, #0]
 8012156:	2b00      	cmp	r3, #0
 8012158:	d102      	bne.n	8012160 <etharp_input+0x74>
    for_us = 0;
 801215a:	2300      	movs	r3, #0
 801215c:	75fb      	strb	r3, [r7, #23]
 801215e:	e009      	b.n	8012174 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8012160:	68ba      	ldr	r2, [r7, #8]
 8012162:	683b      	ldr	r3, [r7, #0]
 8012164:	3304      	adds	r3, #4
 8012166:	681b      	ldr	r3, [r3, #0]
 8012168:	429a      	cmp	r2, r3
 801216a:	bf0c      	ite	eq
 801216c:	2301      	moveq	r3, #1
 801216e:	2300      	movne	r3, #0
 8012170:	b2db      	uxtb	r3, r3
 8012172:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8012174:	693b      	ldr	r3, [r7, #16]
 8012176:	f103 0208 	add.w	r2, r3, #8
 801217a:	7dfb      	ldrb	r3, [r7, #23]
 801217c:	2b00      	cmp	r3, #0
 801217e:	d001      	beq.n	8012184 <etharp_input+0x98>
 8012180:	2301      	movs	r3, #1
 8012182:	e000      	b.n	8012186 <etharp_input+0x9a>
 8012184:	2302      	movs	r3, #2
 8012186:	f107 010c 	add.w	r1, r7, #12
 801218a:	6838      	ldr	r0, [r7, #0]
 801218c:	f7ff fed8 	bl	8011f40 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8012190:	693b      	ldr	r3, [r7, #16]
 8012192:	88db      	ldrh	r3, [r3, #6]
 8012194:	b29b      	uxth	r3, r3
 8012196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801219a:	d003      	beq.n	80121a4 <etharp_input+0xb8>
 801219c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80121a0:	d01e      	beq.n	80121e0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 80121a2:	e025      	b.n	80121f0 <etharp_input+0x104>
    if (for_us) {
 80121a4:	7dfb      	ldrb	r3, [r7, #23]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d021      	beq.n	80121ee <etharp_input+0x102>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80121aa:	683b      	ldr	r3, [r7, #0]
 80121ac:	f103 002d 	add.w	r0, r3, #45	; 0x2d
 80121b0:	693b      	ldr	r3, [r7, #16]
 80121b2:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80121b6:	683b      	ldr	r3, [r7, #0]
 80121b8:	f103 052d 	add.w	r5, r3, #45	; 0x2d
 80121bc:	683b      	ldr	r3, [r7, #0]
 80121be:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 80121c0:	693a      	ldr	r2, [r7, #16]
 80121c2:	3208      	adds	r2, #8
      etharp_raw(netif,
 80121c4:	2102      	movs	r1, #2
 80121c6:	9103      	str	r1, [sp, #12]
 80121c8:	f107 010c 	add.w	r1, r7, #12
 80121cc:	9102      	str	r1, [sp, #8]
 80121ce:	9201      	str	r2, [sp, #4]
 80121d0:	9300      	str	r3, [sp, #0]
 80121d2:	462b      	mov	r3, r5
 80121d4:	4622      	mov	r2, r4
 80121d6:	4601      	mov	r1, r0
 80121d8:	6838      	ldr	r0, [r7, #0]
 80121da:	f000 fae7 	bl	80127ac <etharp_raw>
    break;
 80121de:	e006      	b.n	80121ee <etharp_input+0x102>
    dhcp_arp_reply(netif, &sipaddr);
 80121e0:	f107 030c 	add.w	r3, r7, #12
 80121e4:	4619      	mov	r1, r3
 80121e6:	6838      	ldr	r0, [r7, #0]
 80121e8:	f7fe f958 	bl	801049c <dhcp_arp_reply>
    break;
 80121ec:	e000      	b.n	80121f0 <etharp_input+0x104>
    break;
 80121ee:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80121f0:	6878      	ldr	r0, [r7, #4]
 80121f2:	f7f8 f8d9 	bl	800a3a8 <pbuf_free>
}
 80121f6:	3718      	adds	r7, #24
 80121f8:	46bd      	mov	sp, r7
 80121fa:	bdb0      	pop	{r4, r5, r7, pc}
 80121fc:	0801fdcc 	.word	0x0801fdcc
 8012200:	0801ff1c 	.word	0x0801ff1c
 8012204:	0801fe44 	.word	0x0801fe44

08012208 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 8012208:	b580      	push	{r7, lr}
 801220a:	b086      	sub	sp, #24
 801220c:	af02      	add	r7, sp, #8
 801220e:	60f8      	str	r0, [r7, #12]
 8012210:	60b9      	str	r1, [r7, #8]
 8012212:	4613      	mov	r3, r2
 8012214:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8012216:	79fa      	ldrb	r2, [r7, #7]
 8012218:	4944      	ldr	r1, [pc, #272]	; (801232c <etharp_output_to_arp_index+0x124>)
 801221a:	4613      	mov	r3, r2
 801221c:	005b      	lsls	r3, r3, #1
 801221e:	4413      	add	r3, r2
 8012220:	00db      	lsls	r3, r3, #3
 8012222:	440b      	add	r3, r1
 8012224:	3314      	adds	r3, #20
 8012226:	781b      	ldrb	r3, [r3, #0]
 8012228:	2b01      	cmp	r3, #1
 801222a:	d806      	bhi.n	801223a <etharp_output_to_arp_index+0x32>
 801222c:	4b40      	ldr	r3, [pc, #256]	; (8012330 <etharp_output_to_arp_index+0x128>)
 801222e:	f240 22ed 	movw	r2, #749	; 0x2ed
 8012232:	4940      	ldr	r1, [pc, #256]	; (8012334 <etharp_output_to_arp_index+0x12c>)
 8012234:	4840      	ldr	r0, [pc, #256]	; (8012338 <etharp_output_to_arp_index+0x130>)
 8012236:	f008 fa71 	bl	801a71c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801223a:	79fa      	ldrb	r2, [r7, #7]
 801223c:	493b      	ldr	r1, [pc, #236]	; (801232c <etharp_output_to_arp_index+0x124>)
 801223e:	4613      	mov	r3, r2
 8012240:	005b      	lsls	r3, r3, #1
 8012242:	4413      	add	r3, r2
 8012244:	00db      	lsls	r3, r3, #3
 8012246:	440b      	add	r3, r1
 8012248:	3314      	adds	r3, #20
 801224a:	781b      	ldrb	r3, [r3, #0]
 801224c:	2b02      	cmp	r3, #2
 801224e:	d153      	bne.n	80122f8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8012250:	79fa      	ldrb	r2, [r7, #7]
 8012252:	4936      	ldr	r1, [pc, #216]	; (801232c <etharp_output_to_arp_index+0x124>)
 8012254:	4613      	mov	r3, r2
 8012256:	005b      	lsls	r3, r3, #1
 8012258:	4413      	add	r3, r2
 801225a:	00db      	lsls	r3, r3, #3
 801225c:	440b      	add	r3, r1
 801225e:	3312      	adds	r3, #18
 8012260:	881b      	ldrh	r3, [r3, #0]
 8012262:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8012266:	d919      	bls.n	801229c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8012268:	79fa      	ldrb	r2, [r7, #7]
 801226a:	4613      	mov	r3, r2
 801226c:	005b      	lsls	r3, r3, #1
 801226e:	4413      	add	r3, r2
 8012270:	00db      	lsls	r3, r3, #3
 8012272:	4a2e      	ldr	r2, [pc, #184]	; (801232c <etharp_output_to_arp_index+0x124>)
 8012274:	4413      	add	r3, r2
 8012276:	3304      	adds	r3, #4
 8012278:	4619      	mov	r1, r3
 801227a:	68f8      	ldr	r0, [r7, #12]
 801227c:	f000 fb44 	bl	8012908 <etharp_request>
 8012280:	4603      	mov	r3, r0
 8012282:	2b00      	cmp	r3, #0
 8012284:	d138      	bne.n	80122f8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012286:	79fa      	ldrb	r2, [r7, #7]
 8012288:	4928      	ldr	r1, [pc, #160]	; (801232c <etharp_output_to_arp_index+0x124>)
 801228a:	4613      	mov	r3, r2
 801228c:	005b      	lsls	r3, r3, #1
 801228e:	4413      	add	r3, r2
 8012290:	00db      	lsls	r3, r3, #3
 8012292:	440b      	add	r3, r1
 8012294:	3314      	adds	r3, #20
 8012296:	2203      	movs	r2, #3
 8012298:	701a      	strb	r2, [r3, #0]
 801229a:	e02d      	b.n	80122f8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801229c:	79fa      	ldrb	r2, [r7, #7]
 801229e:	4923      	ldr	r1, [pc, #140]	; (801232c <etharp_output_to_arp_index+0x124>)
 80122a0:	4613      	mov	r3, r2
 80122a2:	005b      	lsls	r3, r3, #1
 80122a4:	4413      	add	r3, r2
 80122a6:	00db      	lsls	r3, r3, #3
 80122a8:	440b      	add	r3, r1
 80122aa:	3312      	adds	r3, #18
 80122ac:	881b      	ldrh	r3, [r3, #0]
 80122ae:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80122b2:	d321      	bcc.n	80122f8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80122b4:	79fa      	ldrb	r2, [r7, #7]
 80122b6:	4613      	mov	r3, r2
 80122b8:	005b      	lsls	r3, r3, #1
 80122ba:	4413      	add	r3, r2
 80122bc:	00db      	lsls	r3, r3, #3
 80122be:	4a1b      	ldr	r2, [pc, #108]	; (801232c <etharp_output_to_arp_index+0x124>)
 80122c0:	4413      	add	r3, r2
 80122c2:	1d19      	adds	r1, r3, #4
 80122c4:	79fa      	ldrb	r2, [r7, #7]
 80122c6:	4613      	mov	r3, r2
 80122c8:	005b      	lsls	r3, r3, #1
 80122ca:	4413      	add	r3, r2
 80122cc:	00db      	lsls	r3, r3, #3
 80122ce:	3308      	adds	r3, #8
 80122d0:	4a16      	ldr	r2, [pc, #88]	; (801232c <etharp_output_to_arp_index+0x124>)
 80122d2:	4413      	add	r3, r2
 80122d4:	3304      	adds	r3, #4
 80122d6:	461a      	mov	r2, r3
 80122d8:	68f8      	ldr	r0, [r7, #12]
 80122da:	f000 faf3 	bl	80128c4 <etharp_request_dst>
 80122de:	4603      	mov	r3, r0
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d109      	bne.n	80122f8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80122e4:	79fa      	ldrb	r2, [r7, #7]
 80122e6:	4911      	ldr	r1, [pc, #68]	; (801232c <etharp_output_to_arp_index+0x124>)
 80122e8:	4613      	mov	r3, r2
 80122ea:	005b      	lsls	r3, r3, #1
 80122ec:	4413      	add	r3, r2
 80122ee:	00db      	lsls	r3, r3, #3
 80122f0:	440b      	add	r3, r1
 80122f2:	3314      	adds	r3, #20
 80122f4:	2203      	movs	r2, #3
 80122f6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80122f8:	68fb      	ldr	r3, [r7, #12]
 80122fa:	f103 012d 	add.w	r1, r3, #45	; 0x2d
 80122fe:	79fa      	ldrb	r2, [r7, #7]
 8012300:	4613      	mov	r3, r2
 8012302:	005b      	lsls	r3, r3, #1
 8012304:	4413      	add	r3, r2
 8012306:	00db      	lsls	r3, r3, #3
 8012308:	3308      	adds	r3, #8
 801230a:	4a08      	ldr	r2, [pc, #32]	; (801232c <etharp_output_to_arp_index+0x124>)
 801230c:	4413      	add	r3, r2
 801230e:	1d1a      	adds	r2, r3, #4
 8012310:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012314:	9300      	str	r3, [sp, #0]
 8012316:	4613      	mov	r3, r2
 8012318:	460a      	mov	r2, r1
 801231a:	68b9      	ldr	r1, [r7, #8]
 801231c:	68f8      	ldr	r0, [r7, #12]
 801231e:	f001 ff0b 	bl	8014138 <ethernet_output>
 8012322:	4603      	mov	r3, r0
}
 8012324:	4618      	mov	r0, r3
 8012326:	3710      	adds	r7, #16
 8012328:	46bd      	mov	sp, r7
 801232a:	bd80      	pop	{r7, pc}
 801232c:	20004c4c 	.word	0x20004c4c
 8012330:	0801fdcc 	.word	0x0801fdcc
 8012334:	0801ff3c 	.word	0x0801ff3c
 8012338:	0801fe44 	.word	0x0801fe44

0801233c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801233c:	b580      	push	{r7, lr}
 801233e:	b08a      	sub	sp, #40	; 0x28
 8012340:	af02      	add	r7, sp, #8
 8012342:	60f8      	str	r0, [r7, #12]
 8012344:	60b9      	str	r1, [r7, #8]
 8012346:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	2b00      	cmp	r3, #0
 8012350:	d106      	bne.n	8012360 <etharp_output+0x24>
 8012352:	4b69      	ldr	r3, [pc, #420]	; (80124f8 <etharp_output+0x1bc>)
 8012354:	f240 321b 	movw	r2, #795	; 0x31b
 8012358:	4968      	ldr	r1, [pc, #416]	; (80124fc <etharp_output+0x1c0>)
 801235a:	4869      	ldr	r0, [pc, #420]	; (8012500 <etharp_output+0x1c4>)
 801235c:	f008 f9de 	bl	801a71c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8012360:	68bb      	ldr	r3, [r7, #8]
 8012362:	2b00      	cmp	r3, #0
 8012364:	d106      	bne.n	8012374 <etharp_output+0x38>
 8012366:	4b64      	ldr	r3, [pc, #400]	; (80124f8 <etharp_output+0x1bc>)
 8012368:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801236c:	4965      	ldr	r1, [pc, #404]	; (8012504 <etharp_output+0x1c8>)
 801236e:	4864      	ldr	r0, [pc, #400]	; (8012500 <etharp_output+0x1c4>)
 8012370:	f008 f9d4 	bl	801a71c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	2b00      	cmp	r3, #0
 8012378:	d106      	bne.n	8012388 <etharp_output+0x4c>
 801237a:	4b5f      	ldr	r3, [pc, #380]	; (80124f8 <etharp_output+0x1bc>)
 801237c:	f240 321d 	movw	r2, #797	; 0x31d
 8012380:	4961      	ldr	r1, [pc, #388]	; (8012508 <etharp_output+0x1cc>)
 8012382:	485f      	ldr	r0, [pc, #380]	; (8012500 <etharp_output+0x1c4>)
 8012384:	f008 f9ca 	bl	801a71c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	68f9      	ldr	r1, [r7, #12]
 801238e:	4618      	mov	r0, r3
 8012390:	f000 fef2 	bl	8013178 <ip4_addr_isbroadcast_u32>
 8012394:	4603      	mov	r3, r0
 8012396:	2b00      	cmp	r3, #0
 8012398:	d002      	beq.n	80123a0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801239a:	4b5c      	ldr	r3, [pc, #368]	; (801250c <etharp_output+0x1d0>)
 801239c:	61fb      	str	r3, [r7, #28]
 801239e:	e09b      	b.n	80124d8 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80123a8:	2be0      	cmp	r3, #224	; 0xe0
 80123aa:	d118      	bne.n	80123de <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80123ac:	2301      	movs	r3, #1
 80123ae:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80123b0:	2300      	movs	r3, #0
 80123b2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80123b4:	235e      	movs	r3, #94	; 0x5e
 80123b6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	3301      	adds	r3, #1
 80123bc:	781b      	ldrb	r3, [r3, #0]
 80123be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80123c2:	b2db      	uxtb	r3, r3
 80123c4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	3302      	adds	r3, #2
 80123ca:	781b      	ldrb	r3, [r3, #0]
 80123cc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	3303      	adds	r3, #3
 80123d2:	781b      	ldrb	r3, [r3, #0]
 80123d4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80123d6:	f107 0310 	add.w	r3, r7, #16
 80123da:	61fb      	str	r3, [r7, #28]
 80123dc:	e07c      	b.n	80124d8 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	681a      	ldr	r2, [r3, #0]
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	3304      	adds	r3, #4
 80123e6:	681b      	ldr	r3, [r3, #0]
 80123e8:	405a      	eors	r2, r3
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	3308      	adds	r3, #8
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	4013      	ands	r3, r2
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	d012      	beq.n	801241c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80123fc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8012400:	4293      	cmp	r3, r2
 8012402:	d00b      	beq.n	801241c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	330c      	adds	r3, #12
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	2b00      	cmp	r3, #0
 801240c:	d003      	beq.n	8012416 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	330c      	adds	r3, #12
 8012412:	61bb      	str	r3, [r7, #24]
 8012414:	e002      	b.n	801241c <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8012416:	f06f 0303 	mvn.w	r3, #3
 801241a:	e069      	b.n	80124f0 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801241c:	4b3c      	ldr	r3, [pc, #240]	; (8012510 <etharp_output+0x1d4>)
 801241e:	781b      	ldrb	r3, [r3, #0]
 8012420:	4619      	mov	r1, r3
 8012422:	4a3c      	ldr	r2, [pc, #240]	; (8012514 <etharp_output+0x1d8>)
 8012424:	460b      	mov	r3, r1
 8012426:	005b      	lsls	r3, r3, #1
 8012428:	440b      	add	r3, r1
 801242a:	00db      	lsls	r3, r3, #3
 801242c:	4413      	add	r3, r2
 801242e:	3314      	adds	r3, #20
 8012430:	781b      	ldrb	r3, [r3, #0]
 8012432:	2b01      	cmp	r3, #1
 8012434:	d917      	bls.n	8012466 <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8012436:	69bb      	ldr	r3, [r7, #24]
 8012438:	681a      	ldr	r2, [r3, #0]
 801243a:	4b35      	ldr	r3, [pc, #212]	; (8012510 <etharp_output+0x1d4>)
 801243c:	781b      	ldrb	r3, [r3, #0]
 801243e:	4618      	mov	r0, r3
 8012440:	4934      	ldr	r1, [pc, #208]	; (8012514 <etharp_output+0x1d8>)
 8012442:	4603      	mov	r3, r0
 8012444:	005b      	lsls	r3, r3, #1
 8012446:	4403      	add	r3, r0
 8012448:	00db      	lsls	r3, r3, #3
 801244a:	440b      	add	r3, r1
 801244c:	3304      	adds	r3, #4
 801244e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012450:	429a      	cmp	r2, r3
 8012452:	d108      	bne.n	8012466 <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8012454:	4b2e      	ldr	r3, [pc, #184]	; (8012510 <etharp_output+0x1d4>)
 8012456:	781b      	ldrb	r3, [r3, #0]
 8012458:	461a      	mov	r2, r3
 801245a:	68b9      	ldr	r1, [r7, #8]
 801245c:	68f8      	ldr	r0, [r7, #12]
 801245e:	f7ff fed3 	bl	8012208 <etharp_output_to_arp_index>
 8012462:	4603      	mov	r3, r0
 8012464:	e044      	b.n	80124f0 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012466:	2300      	movs	r3, #0
 8012468:	75fb      	strb	r3, [r7, #23]
 801246a:	e02a      	b.n	80124c2 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801246c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8012470:	4928      	ldr	r1, [pc, #160]	; (8012514 <etharp_output+0x1d8>)
 8012472:	4613      	mov	r3, r2
 8012474:	005b      	lsls	r3, r3, #1
 8012476:	4413      	add	r3, r2
 8012478:	00db      	lsls	r3, r3, #3
 801247a:	440b      	add	r3, r1
 801247c:	3314      	adds	r3, #20
 801247e:	781b      	ldrb	r3, [r3, #0]
 8012480:	2b01      	cmp	r3, #1
 8012482:	d918      	bls.n	80124b6 <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8012484:	69bb      	ldr	r3, [r7, #24]
 8012486:	6819      	ldr	r1, [r3, #0]
 8012488:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801248c:	4821      	ldr	r0, [pc, #132]	; (8012514 <etharp_output+0x1d8>)
 801248e:	4613      	mov	r3, r2
 8012490:	005b      	lsls	r3, r3, #1
 8012492:	4413      	add	r3, r2
 8012494:	00db      	lsls	r3, r3, #3
 8012496:	4403      	add	r3, r0
 8012498:	3304      	adds	r3, #4
 801249a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801249c:	4299      	cmp	r1, r3
 801249e:	d10a      	bne.n	80124b6 <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 80124a0:	7dfa      	ldrb	r2, [r7, #23]
 80124a2:	4b1b      	ldr	r3, [pc, #108]	; (8012510 <etharp_output+0x1d4>)
 80124a4:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80124a6:	7dfb      	ldrb	r3, [r7, #23]
 80124a8:	461a      	mov	r2, r3
 80124aa:	68b9      	ldr	r1, [r7, #8]
 80124ac:	68f8      	ldr	r0, [r7, #12]
 80124ae:	f7ff feab 	bl	8012208 <etharp_output_to_arp_index>
 80124b2:	4603      	mov	r3, r0
 80124b4:	e01c      	b.n	80124f0 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80124b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80124ba:	b2db      	uxtb	r3, r3
 80124bc:	3301      	adds	r3, #1
 80124be:	b2db      	uxtb	r3, r3
 80124c0:	75fb      	strb	r3, [r7, #23]
 80124c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80124c6:	2b09      	cmp	r3, #9
 80124c8:	ddd0      	ble.n	801246c <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80124ca:	68ba      	ldr	r2, [r7, #8]
 80124cc:	69b9      	ldr	r1, [r7, #24]
 80124ce:	68f8      	ldr	r0, [r7, #12]
 80124d0:	f000 f822 	bl	8012518 <etharp_query>
 80124d4:	4603      	mov	r3, r0
 80124d6:	e00b      	b.n	80124f0 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	f103 022d 	add.w	r2, r3, #45	; 0x2d
 80124de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80124e2:	9300      	str	r3, [sp, #0]
 80124e4:	69fb      	ldr	r3, [r7, #28]
 80124e6:	68b9      	ldr	r1, [r7, #8]
 80124e8:	68f8      	ldr	r0, [r7, #12]
 80124ea:	f001 fe25 	bl	8014138 <ethernet_output>
 80124ee:	4603      	mov	r3, r0
}
 80124f0:	4618      	mov	r0, r3
 80124f2:	3720      	adds	r7, #32
 80124f4:	46bd      	mov	sp, r7
 80124f6:	bd80      	pop	{r7, pc}
 80124f8:	0801fdcc 	.word	0x0801fdcc
 80124fc:	0801ff1c 	.word	0x0801ff1c
 8012500:	0801fe44 	.word	0x0801fe44
 8012504:	0801ff6c 	.word	0x0801ff6c
 8012508:	0801ff0c 	.word	0x0801ff0c
 801250c:	08021d20 	.word	0x08021d20
 8012510:	20004d3c 	.word	0x20004d3c
 8012514:	20004c4c 	.word	0x20004c4c

08012518 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8012518:	b580      	push	{r7, lr}
 801251a:	b08c      	sub	sp, #48	; 0x30
 801251c:	af02      	add	r7, sp, #8
 801251e:	60f8      	str	r0, [r7, #12]
 8012520:	60b9      	str	r1, [r7, #8]
 8012522:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	332d      	adds	r3, #45	; 0x2d
 8012528:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801252a:	23ff      	movs	r3, #255	; 0xff
 801252c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8012530:	2300      	movs	r3, #0
 8012532:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012534:	68bb      	ldr	r3, [r7, #8]
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	68f9      	ldr	r1, [r7, #12]
 801253a:	4618      	mov	r0, r3
 801253c:	f000 fe1c 	bl	8013178 <ip4_addr_isbroadcast_u32>
 8012540:	4603      	mov	r3, r0
 8012542:	2b00      	cmp	r3, #0
 8012544:	d10c      	bne.n	8012560 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012546:	68bb      	ldr	r3, [r7, #8]
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801254e:	2be0      	cmp	r3, #224	; 0xe0
 8012550:	d006      	beq.n	8012560 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012552:	68bb      	ldr	r3, [r7, #8]
 8012554:	2b00      	cmp	r3, #0
 8012556:	d003      	beq.n	8012560 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8012558:	68bb      	ldr	r3, [r7, #8]
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	2b00      	cmp	r3, #0
 801255e:	d102      	bne.n	8012566 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012560:	f06f 030f 	mvn.w	r3, #15
 8012564:	e10f      	b.n	8012786 <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8012566:	68fa      	ldr	r2, [r7, #12]
 8012568:	2101      	movs	r1, #1
 801256a:	68b8      	ldr	r0, [r7, #8]
 801256c:	f7ff fb9e 	bl	8011cac <etharp_find_entry>
 8012570:	4603      	mov	r3, r0
 8012572:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 8012574:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012578:	2b00      	cmp	r3, #0
 801257a:	da02      	bge.n	8012582 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 801257c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012580:	e101      	b.n	8012786 <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8012582:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8012586:	4982      	ldr	r1, [pc, #520]	; (8012790 <etharp_query+0x278>)
 8012588:	4613      	mov	r3, r2
 801258a:	005b      	lsls	r3, r3, #1
 801258c:	4413      	add	r3, r2
 801258e:	00db      	lsls	r3, r3, #3
 8012590:	440b      	add	r3, r1
 8012592:	3314      	adds	r3, #20
 8012594:	781b      	ldrb	r3, [r3, #0]
 8012596:	2b00      	cmp	r3, #0
 8012598:	d117      	bne.n	80125ca <etharp_query+0xb2>
    is_new_entry = 1;
 801259a:	2301      	movs	r3, #1
 801259c:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801259e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80125a2:	497b      	ldr	r1, [pc, #492]	; (8012790 <etharp_query+0x278>)
 80125a4:	4613      	mov	r3, r2
 80125a6:	005b      	lsls	r3, r3, #1
 80125a8:	4413      	add	r3, r2
 80125aa:	00db      	lsls	r3, r3, #3
 80125ac:	440b      	add	r3, r1
 80125ae:	3314      	adds	r3, #20
 80125b0:	2201      	movs	r2, #1
 80125b2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80125b4:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80125b8:	4975      	ldr	r1, [pc, #468]	; (8012790 <etharp_query+0x278>)
 80125ba:	4613      	mov	r3, r2
 80125bc:	005b      	lsls	r3, r3, #1
 80125be:	4413      	add	r3, r2
 80125c0:	00db      	lsls	r3, r3, #3
 80125c2:	440b      	add	r3, r1
 80125c4:	3308      	adds	r3, #8
 80125c6:	68fa      	ldr	r2, [r7, #12]
 80125c8:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80125ca:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80125ce:	4970      	ldr	r1, [pc, #448]	; (8012790 <etharp_query+0x278>)
 80125d0:	4613      	mov	r3, r2
 80125d2:	005b      	lsls	r3, r3, #1
 80125d4:	4413      	add	r3, r2
 80125d6:	00db      	lsls	r3, r3, #3
 80125d8:	440b      	add	r3, r1
 80125da:	3314      	adds	r3, #20
 80125dc:	781b      	ldrb	r3, [r3, #0]
 80125de:	2b01      	cmp	r3, #1
 80125e0:	d012      	beq.n	8012608 <etharp_query+0xf0>
 80125e2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80125e6:	496a      	ldr	r1, [pc, #424]	; (8012790 <etharp_query+0x278>)
 80125e8:	4613      	mov	r3, r2
 80125ea:	005b      	lsls	r3, r3, #1
 80125ec:	4413      	add	r3, r2
 80125ee:	00db      	lsls	r3, r3, #3
 80125f0:	440b      	add	r3, r1
 80125f2:	3314      	adds	r3, #20
 80125f4:	781b      	ldrb	r3, [r3, #0]
 80125f6:	2b01      	cmp	r3, #1
 80125f8:	d806      	bhi.n	8012608 <etharp_query+0xf0>
 80125fa:	4b66      	ldr	r3, [pc, #408]	; (8012794 <etharp_query+0x27c>)
 80125fc:	f240 32c9 	movw	r2, #969	; 0x3c9
 8012600:	4965      	ldr	r1, [pc, #404]	; (8012798 <etharp_query+0x280>)
 8012602:	4866      	ldr	r0, [pc, #408]	; (801279c <etharp_query+0x284>)
 8012604:	f008 f88a 	bl	801a71c <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8012608:	6a3b      	ldr	r3, [r7, #32]
 801260a:	2b00      	cmp	r3, #0
 801260c:	d102      	bne.n	8012614 <etharp_query+0xfc>
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	2b00      	cmp	r3, #0
 8012612:	d10c      	bne.n	801262e <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8012614:	68b9      	ldr	r1, [r7, #8]
 8012616:	68f8      	ldr	r0, [r7, #12]
 8012618:	f000 f976 	bl	8012908 <etharp_request>
 801261c:	4603      	mov	r3, r0
 801261e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	2b00      	cmp	r3, #0
 8012626:	d102      	bne.n	801262e <etharp_query+0x116>
      return result;
 8012628:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801262c:	e0ab      	b.n	8012786 <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	2b00      	cmp	r3, #0
 8012632:	d106      	bne.n	8012642 <etharp_query+0x12a>
 8012634:	4b57      	ldr	r3, [pc, #348]	; (8012794 <etharp_query+0x27c>)
 8012636:	f240 32db 	movw	r2, #987	; 0x3db
 801263a:	4959      	ldr	r1, [pc, #356]	; (80127a0 <etharp_query+0x288>)
 801263c:	4857      	ldr	r0, [pc, #348]	; (801279c <etharp_query+0x284>)
 801263e:	f008 f86d 	bl	801a71c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8012642:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8012646:	4952      	ldr	r1, [pc, #328]	; (8012790 <etharp_query+0x278>)
 8012648:	4613      	mov	r3, r2
 801264a:	005b      	lsls	r3, r3, #1
 801264c:	4413      	add	r3, r2
 801264e:	00db      	lsls	r3, r3, #3
 8012650:	440b      	add	r3, r1
 8012652:	3314      	adds	r3, #20
 8012654:	781b      	ldrb	r3, [r3, #0]
 8012656:	2b01      	cmp	r3, #1
 8012658:	d919      	bls.n	801268e <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 801265a:	7cfa      	ldrb	r2, [r7, #19]
 801265c:	4b51      	ldr	r3, [pc, #324]	; (80127a4 <etharp_query+0x28c>)
 801265e:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8012660:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8012664:	4613      	mov	r3, r2
 8012666:	005b      	lsls	r3, r3, #1
 8012668:	4413      	add	r3, r2
 801266a:	00db      	lsls	r3, r3, #3
 801266c:	3308      	adds	r3, #8
 801266e:	4a48      	ldr	r2, [pc, #288]	; (8012790 <etharp_query+0x278>)
 8012670:	4413      	add	r3, r2
 8012672:	1d1a      	adds	r2, r3, #4
 8012674:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012678:	9300      	str	r3, [sp, #0]
 801267a:	4613      	mov	r3, r2
 801267c:	697a      	ldr	r2, [r7, #20]
 801267e:	6879      	ldr	r1, [r7, #4]
 8012680:	68f8      	ldr	r0, [r7, #12]
 8012682:	f001 fd59 	bl	8014138 <ethernet_output>
 8012686:	4603      	mov	r3, r0
 8012688:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801268c:	e079      	b.n	8012782 <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801268e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8012692:	493f      	ldr	r1, [pc, #252]	; (8012790 <etharp_query+0x278>)
 8012694:	4613      	mov	r3, r2
 8012696:	005b      	lsls	r3, r3, #1
 8012698:	4413      	add	r3, r2
 801269a:	00db      	lsls	r3, r3, #3
 801269c:	440b      	add	r3, r1
 801269e:	3314      	adds	r3, #20
 80126a0:	781b      	ldrb	r3, [r3, #0]
 80126a2:	2b01      	cmp	r3, #1
 80126a4:	d16d      	bne.n	8012782 <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80126a6:	2300      	movs	r3, #0
 80126a8:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	61fb      	str	r3, [r7, #28]
    while (p) {
 80126ae:	e01a      	b.n	80126e6 <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80126b0:	69fb      	ldr	r3, [r7, #28]
 80126b2:	895a      	ldrh	r2, [r3, #10]
 80126b4:	69fb      	ldr	r3, [r7, #28]
 80126b6:	891b      	ldrh	r3, [r3, #8]
 80126b8:	429a      	cmp	r2, r3
 80126ba:	d10a      	bne.n	80126d2 <etharp_query+0x1ba>
 80126bc:	69fb      	ldr	r3, [r7, #28]
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d006      	beq.n	80126d2 <etharp_query+0x1ba>
 80126c4:	4b33      	ldr	r3, [pc, #204]	; (8012794 <etharp_query+0x27c>)
 80126c6:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 80126ca:	4937      	ldr	r1, [pc, #220]	; (80127a8 <etharp_query+0x290>)
 80126cc:	4833      	ldr	r0, [pc, #204]	; (801279c <etharp_query+0x284>)
 80126ce:	f008 f825 	bl	801a71c <iprintf>
      if (p->type != PBUF_ROM) {
 80126d2:	69fb      	ldr	r3, [r7, #28]
 80126d4:	7b1b      	ldrb	r3, [r3, #12]
 80126d6:	2b01      	cmp	r3, #1
 80126d8:	d002      	beq.n	80126e0 <etharp_query+0x1c8>
        copy_needed = 1;
 80126da:	2301      	movs	r3, #1
 80126dc:	61bb      	str	r3, [r7, #24]
        break;
 80126de:	e005      	b.n	80126ec <etharp_query+0x1d4>
      }
      p = p->next;
 80126e0:	69fb      	ldr	r3, [r7, #28]
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	61fb      	str	r3, [r7, #28]
    while (p) {
 80126e6:	69fb      	ldr	r3, [r7, #28]
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d1e1      	bne.n	80126b0 <etharp_query+0x198>
    }
    if (copy_needed) {
 80126ec:	69bb      	ldr	r3, [r7, #24]
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d017      	beq.n	8012722 <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 80126f2:	69fb      	ldr	r3, [r7, #28]
 80126f4:	891b      	ldrh	r3, [r3, #8]
 80126f6:	2200      	movs	r2, #0
 80126f8:	4619      	mov	r1, r3
 80126fa:	2002      	movs	r0, #2
 80126fc:	f7f7 fae2 	bl	8009cc4 <pbuf_alloc>
 8012700:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 8012702:	69fb      	ldr	r3, [r7, #28]
 8012704:	2b00      	cmp	r3, #0
 8012706:	d011      	beq.n	801272c <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 8012708:	6879      	ldr	r1, [r7, #4]
 801270a:	69f8      	ldr	r0, [r7, #28]
 801270c:	f7f7 ff8a 	bl	800a624 <pbuf_copy>
 8012710:	4603      	mov	r3, r0
 8012712:	2b00      	cmp	r3, #0
 8012714:	d00a      	beq.n	801272c <etharp_query+0x214>
          pbuf_free(p);
 8012716:	69f8      	ldr	r0, [r7, #28]
 8012718:	f7f7 fe46 	bl	800a3a8 <pbuf_free>
          p = NULL;
 801271c:	2300      	movs	r3, #0
 801271e:	61fb      	str	r3, [r7, #28]
 8012720:	e004      	b.n	801272c <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8012726:	69f8      	ldr	r0, [r7, #28]
 8012728:	f7f7 feee 	bl	800a508 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801272c:	69fb      	ldr	r3, [r7, #28]
 801272e:	2b00      	cmp	r3, #0
 8012730:	d024      	beq.n	801277c <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8012732:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8012736:	4916      	ldr	r1, [pc, #88]	; (8012790 <etharp_query+0x278>)
 8012738:	4613      	mov	r3, r2
 801273a:	005b      	lsls	r3, r3, #1
 801273c:	4413      	add	r3, r2
 801273e:	00db      	lsls	r3, r3, #3
 8012740:	440b      	add	r3, r1
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	2b00      	cmp	r3, #0
 8012746:	d00b      	beq.n	8012760 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 8012748:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801274c:	4910      	ldr	r1, [pc, #64]	; (8012790 <etharp_query+0x278>)
 801274e:	4613      	mov	r3, r2
 8012750:	005b      	lsls	r3, r3, #1
 8012752:	4413      	add	r3, r2
 8012754:	00db      	lsls	r3, r3, #3
 8012756:	440b      	add	r3, r1
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	4618      	mov	r0, r3
 801275c:	f7f7 fe24 	bl	800a3a8 <pbuf_free>
      }
      arp_table[i].q = p;
 8012760:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8012764:	490a      	ldr	r1, [pc, #40]	; (8012790 <etharp_query+0x278>)
 8012766:	4613      	mov	r3, r2
 8012768:	005b      	lsls	r3, r3, #1
 801276a:	4413      	add	r3, r2
 801276c:	00db      	lsls	r3, r3, #3
 801276e:	440b      	add	r3, r1
 8012770:	69fa      	ldr	r2, [r7, #28]
 8012772:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8012774:	2300      	movs	r3, #0
 8012776:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801277a:	e002      	b.n	8012782 <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801277c:	23ff      	movs	r3, #255	; 0xff
 801277e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8012782:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8012786:	4618      	mov	r0, r3
 8012788:	3728      	adds	r7, #40	; 0x28
 801278a:	46bd      	mov	sp, r7
 801278c:	bd80      	pop	{r7, pc}
 801278e:	bf00      	nop
 8012790:	20004c4c 	.word	0x20004c4c
 8012794:	0801fdcc 	.word	0x0801fdcc
 8012798:	0801ff78 	.word	0x0801ff78
 801279c:	0801fe44 	.word	0x0801fe44
 80127a0:	0801ff6c 	.word	0x0801ff6c
 80127a4:	20004d3c 	.word	0x20004d3c
 80127a8:	0801ffa0 	.word	0x0801ffa0

080127ac <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80127ac:	b580      	push	{r7, lr}
 80127ae:	b08a      	sub	sp, #40	; 0x28
 80127b0:	af02      	add	r7, sp, #8
 80127b2:	60f8      	str	r0, [r7, #12]
 80127b4:	60b9      	str	r1, [r7, #8]
 80127b6:	607a      	str	r2, [r7, #4]
 80127b8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80127ba:	2300      	movs	r3, #0
 80127bc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80127be:	68fb      	ldr	r3, [r7, #12]
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d106      	bne.n	80127d2 <etharp_raw+0x26>
 80127c4:	4b3a      	ldr	r3, [pc, #232]	; (80128b0 <etharp_raw+0x104>)
 80127c6:	f44f 628b 	mov.w	r2, #1112	; 0x458
 80127ca:	493a      	ldr	r1, [pc, #232]	; (80128b4 <etharp_raw+0x108>)
 80127cc:	483a      	ldr	r0, [pc, #232]	; (80128b8 <etharp_raw+0x10c>)
 80127ce:	f007 ffa5 	bl	801a71c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80127d2:	2200      	movs	r2, #0
 80127d4:	211c      	movs	r1, #28
 80127d6:	2002      	movs	r0, #2
 80127d8:	f7f7 fa74 	bl	8009cc4 <pbuf_alloc>
 80127dc:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80127de:	69bb      	ldr	r3, [r7, #24]
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d102      	bne.n	80127ea <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80127e4:	f04f 33ff 	mov.w	r3, #4294967295
 80127e8:	e05d      	b.n	80128a6 <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80127ea:	69bb      	ldr	r3, [r7, #24]
 80127ec:	895b      	ldrh	r3, [r3, #10]
 80127ee:	2b1b      	cmp	r3, #27
 80127f0:	d806      	bhi.n	8012800 <etharp_raw+0x54>
 80127f2:	4b2f      	ldr	r3, [pc, #188]	; (80128b0 <etharp_raw+0x104>)
 80127f4:	f240 4264 	movw	r2, #1124	; 0x464
 80127f8:	4930      	ldr	r1, [pc, #192]	; (80128bc <etharp_raw+0x110>)
 80127fa:	482f      	ldr	r0, [pc, #188]	; (80128b8 <etharp_raw+0x10c>)
 80127fc:	f007 ff8e 	bl	801a71c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8012800:	69bb      	ldr	r3, [r7, #24]
 8012802:	685b      	ldr	r3, [r3, #4]
 8012804:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8012806:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012808:	4618      	mov	r0, r3
 801280a:	f7f6 f90f 	bl	8008a2c <lwip_htons>
 801280e:	4603      	mov	r3, r0
 8012810:	461a      	mov	r2, r3
 8012812:	697b      	ldr	r3, [r7, #20]
 8012814:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8012816:	68fb      	ldr	r3, [r7, #12]
 8012818:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801281c:	2b06      	cmp	r3, #6
 801281e:	d006      	beq.n	801282e <etharp_raw+0x82>
 8012820:	4b23      	ldr	r3, [pc, #140]	; (80128b0 <etharp_raw+0x104>)
 8012822:	f240 426b 	movw	r2, #1131	; 0x46b
 8012826:	4926      	ldr	r1, [pc, #152]	; (80128c0 <etharp_raw+0x114>)
 8012828:	4823      	ldr	r0, [pc, #140]	; (80128b8 <etharp_raw+0x10c>)
 801282a:	f007 ff77 	bl	801a71c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 801282e:	697b      	ldr	r3, [r7, #20]
 8012830:	3308      	adds	r3, #8
 8012832:	2206      	movs	r2, #6
 8012834:	6839      	ldr	r1, [r7, #0]
 8012836:	4618      	mov	r0, r3
 8012838:	f007 f92d 	bl	8019a96 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 801283c:	697b      	ldr	r3, [r7, #20]
 801283e:	3312      	adds	r3, #18
 8012840:	2206      	movs	r2, #6
 8012842:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012844:	4618      	mov	r0, r3
 8012846:	f007 f926 	bl	8019a96 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 801284a:	697b      	ldr	r3, [r7, #20]
 801284c:	330e      	adds	r3, #14
 801284e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012850:	6812      	ldr	r2, [r2, #0]
 8012852:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8012854:	697b      	ldr	r3, [r7, #20]
 8012856:	3318      	adds	r3, #24
 8012858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801285a:	6812      	ldr	r2, [r2, #0]
 801285c:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 801285e:	697b      	ldr	r3, [r7, #20]
 8012860:	2200      	movs	r2, #0
 8012862:	701a      	strb	r2, [r3, #0]
 8012864:	2200      	movs	r2, #0
 8012866:	f042 0201 	orr.w	r2, r2, #1
 801286a:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801286c:	697b      	ldr	r3, [r7, #20]
 801286e:	2200      	movs	r2, #0
 8012870:	f042 0208 	orr.w	r2, r2, #8
 8012874:	709a      	strb	r2, [r3, #2]
 8012876:	2200      	movs	r2, #0
 8012878:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801287a:	697b      	ldr	r3, [r7, #20]
 801287c:	2206      	movs	r2, #6
 801287e:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8012880:	697b      	ldr	r3, [r7, #20]
 8012882:	2204      	movs	r2, #4
 8012884:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8012886:	f640 0306 	movw	r3, #2054	; 0x806
 801288a:	9300      	str	r3, [sp, #0]
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	68ba      	ldr	r2, [r7, #8]
 8012890:	69b9      	ldr	r1, [r7, #24]
 8012892:	68f8      	ldr	r0, [r7, #12]
 8012894:	f001 fc50 	bl	8014138 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8012898:	69b8      	ldr	r0, [r7, #24]
 801289a:	f7f7 fd85 	bl	800a3a8 <pbuf_free>
  p = NULL;
 801289e:	2300      	movs	r3, #0
 80128a0:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80128a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80128a6:	4618      	mov	r0, r3
 80128a8:	3720      	adds	r7, #32
 80128aa:	46bd      	mov	sp, r7
 80128ac:	bd80      	pop	{r7, pc}
 80128ae:	bf00      	nop
 80128b0:	0801fdcc 	.word	0x0801fdcc
 80128b4:	0801ff1c 	.word	0x0801ff1c
 80128b8:	0801fe44 	.word	0x0801fe44
 80128bc:	0801ffbc 	.word	0x0801ffbc
 80128c0:	0801fff0 	.word	0x0801fff0

080128c4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 80128c4:	b580      	push	{r7, lr}
 80128c6:	b088      	sub	sp, #32
 80128c8:	af04      	add	r7, sp, #16
 80128ca:	60f8      	str	r0, [r7, #12]
 80128cc:	60b9      	str	r1, [r7, #8]
 80128ce:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80128d0:	68fb      	ldr	r3, [r7, #12]
 80128d2:	f103 012d 	add.w	r1, r3, #45	; 0x2d
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	f103 002d 	add.w	r0, r3, #45	; 0x2d
 80128dc:	68fb      	ldr	r3, [r7, #12]
 80128de:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80128e0:	2201      	movs	r2, #1
 80128e2:	9203      	str	r2, [sp, #12]
 80128e4:	68ba      	ldr	r2, [r7, #8]
 80128e6:	9202      	str	r2, [sp, #8]
 80128e8:	4a06      	ldr	r2, [pc, #24]	; (8012904 <etharp_request_dst+0x40>)
 80128ea:	9201      	str	r2, [sp, #4]
 80128ec:	9300      	str	r3, [sp, #0]
 80128ee:	4603      	mov	r3, r0
 80128f0:	687a      	ldr	r2, [r7, #4]
 80128f2:	68f8      	ldr	r0, [r7, #12]
 80128f4:	f7ff ff5a 	bl	80127ac <etharp_raw>
 80128f8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80128fa:	4618      	mov	r0, r3
 80128fc:	3710      	adds	r7, #16
 80128fe:	46bd      	mov	sp, r7
 8012900:	bd80      	pop	{r7, pc}
 8012902:	bf00      	nop
 8012904:	08021d28 	.word	0x08021d28

08012908 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8012908:	b580      	push	{r7, lr}
 801290a:	b082      	sub	sp, #8
 801290c:	af00      	add	r7, sp, #0
 801290e:	6078      	str	r0, [r7, #4]
 8012910:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8012912:	4a05      	ldr	r2, [pc, #20]	; (8012928 <etharp_request+0x20>)
 8012914:	6839      	ldr	r1, [r7, #0]
 8012916:	6878      	ldr	r0, [r7, #4]
 8012918:	f7ff ffd4 	bl	80128c4 <etharp_request_dst>
 801291c:	4603      	mov	r3, r0
}
 801291e:	4618      	mov	r0, r3
 8012920:	3708      	adds	r7, #8
 8012922:	46bd      	mov	sp, r7
 8012924:	bd80      	pop	{r7, pc}
 8012926:	bf00      	nop
 8012928:	08021d20 	.word	0x08021d20

0801292c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801292c:	b580      	push	{r7, lr}
 801292e:	b08e      	sub	sp, #56	; 0x38
 8012930:	af04      	add	r7, sp, #16
 8012932:	6078      	str	r0, [r7, #4]
 8012934:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8012936:	4b7a      	ldr	r3, [pc, #488]	; (8012b20 <icmp_input+0x1f4>)
 8012938:	689b      	ldr	r3, [r3, #8]
 801293a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 801293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801293e:	781b      	ldrb	r3, [r3, #0]
 8012940:	b29b      	uxth	r3, r3
 8012942:	f003 030f 	and.w	r3, r3, #15
 8012946:	b29b      	uxth	r3, r3
 8012948:	009b      	lsls	r3, r3, #2
 801294a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801294c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801294e:	2b13      	cmp	r3, #19
 8012950:	f240 80d1 	bls.w	8012af6 <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	895b      	ldrh	r3, [r3, #10]
 8012958:	2b03      	cmp	r3, #3
 801295a:	f240 80ce 	bls.w	8012afa <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	685b      	ldr	r3, [r3, #4]
 8012962:	781b      	ldrb	r3, [r3, #0]
 8012964:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 8012968:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801296c:	2b00      	cmp	r3, #0
 801296e:	f000 80bb 	beq.w	8012ae8 <icmp_input+0x1bc>
 8012972:	2b08      	cmp	r3, #8
 8012974:	f040 80bb 	bne.w	8012aee <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 8012978:	4b6a      	ldr	r3, [pc, #424]	; (8012b24 <icmp_input+0x1f8>)
 801297a:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801297c:	4b68      	ldr	r3, [pc, #416]	; (8012b20 <icmp_input+0x1f4>)
 801297e:	695b      	ldr	r3, [r3, #20]
 8012980:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012984:	2be0      	cmp	r3, #224	; 0xe0
 8012986:	f000 80bf 	beq.w	8012b08 <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801298a:	4b65      	ldr	r3, [pc, #404]	; (8012b20 <icmp_input+0x1f4>)
 801298c:	695a      	ldr	r2, [r3, #20]
 801298e:	4b64      	ldr	r3, [pc, #400]	; (8012b20 <icmp_input+0x1f4>)
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	4619      	mov	r1, r3
 8012994:	4610      	mov	r0, r2
 8012996:	f000 fbef 	bl	8013178 <ip4_addr_isbroadcast_u32>
 801299a:	4603      	mov	r3, r0
 801299c:	2b00      	cmp	r3, #0
 801299e:	f040 80b5 	bne.w	8012b0c <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	891b      	ldrh	r3, [r3, #8]
 80129a6:	2b07      	cmp	r3, #7
 80129a8:	f240 80a9 	bls.w	8012afe <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 80129ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80129ae:	330e      	adds	r3, #14
 80129b0:	b29b      	uxth	r3, r3
 80129b2:	b21b      	sxth	r3, r3
 80129b4:	4619      	mov	r1, r3
 80129b6:	6878      	ldr	r0, [r7, #4]
 80129b8:	f7f7 fcd2 	bl	800a360 <pbuf_header>
 80129bc:	4603      	mov	r3, r0
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d046      	beq.n	8012a50 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	891a      	ldrh	r2, [r3, #8]
 80129c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80129c8:	4413      	add	r3, r2
 80129ca:	b29b      	uxth	r3, r3
 80129cc:	2200      	movs	r2, #0
 80129ce:	4619      	mov	r1, r3
 80129d0:	2002      	movs	r0, #2
 80129d2:	f7f7 f977 	bl	8009cc4 <pbuf_alloc>
 80129d6:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 80129d8:	69bb      	ldr	r3, [r7, #24]
 80129da:	2b00      	cmp	r3, #0
 80129dc:	f000 8098 	beq.w	8012b10 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80129e0:	69bb      	ldr	r3, [r7, #24]
 80129e2:	895b      	ldrh	r3, [r3, #10]
 80129e4:	461a      	mov	r2, r3
 80129e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80129e8:	3308      	adds	r3, #8
 80129ea:	429a      	cmp	r2, r3
 80129ec:	d203      	bcs.n	80129f6 <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 80129ee:	69b8      	ldr	r0, [r7, #24]
 80129f0:	f7f7 fcda 	bl	800a3a8 <pbuf_free>
        goto icmperr;
 80129f4:	e08d      	b.n	8012b12 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 80129f6:	69bb      	ldr	r3, [r7, #24]
 80129f8:	685b      	ldr	r3, [r3, #4]
 80129fa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80129fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80129fe:	4618      	mov	r0, r3
 8012a00:	f007 f849 	bl	8019a96 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 8012a04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012a06:	425b      	negs	r3, r3
 8012a08:	b29b      	uxth	r3, r3
 8012a0a:	b21b      	sxth	r3, r3
 8012a0c:	4619      	mov	r1, r3
 8012a0e:	69b8      	ldr	r0, [r7, #24]
 8012a10:	f7f7 fca6 	bl	800a360 <pbuf_header>
 8012a14:	4603      	mov	r3, r0
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d009      	beq.n	8012a2e <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8012a1a:	4b43      	ldr	r3, [pc, #268]	; (8012b28 <icmp_input+0x1fc>)
 8012a1c:	22af      	movs	r2, #175	; 0xaf
 8012a1e:	4943      	ldr	r1, [pc, #268]	; (8012b2c <icmp_input+0x200>)
 8012a20:	4843      	ldr	r0, [pc, #268]	; (8012b30 <icmp_input+0x204>)
 8012a22:	f007 fe7b 	bl	801a71c <iprintf>
        pbuf_free(r);
 8012a26:	69b8      	ldr	r0, [r7, #24]
 8012a28:	f7f7 fcbe 	bl	800a3a8 <pbuf_free>
        goto icmperr;
 8012a2c:	e071      	b.n	8012b12 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 8012a2e:	6879      	ldr	r1, [r7, #4]
 8012a30:	69b8      	ldr	r0, [r7, #24]
 8012a32:	f7f7 fdf7 	bl	800a624 <pbuf_copy>
 8012a36:	4603      	mov	r3, r0
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d003      	beq.n	8012a44 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 8012a3c:	69b8      	ldr	r0, [r7, #24]
 8012a3e:	f7f7 fcb3 	bl	800a3a8 <pbuf_free>
        goto icmperr;
 8012a42:	e066      	b.n	8012b12 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 8012a44:	6878      	ldr	r0, [r7, #4]
 8012a46:	f7f7 fcaf 	bl	800a3a8 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 8012a4a:	69bb      	ldr	r3, [r7, #24]
 8012a4c:	607b      	str	r3, [r7, #4]
 8012a4e:	e015      	b.n	8012a7c <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8012a50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012a52:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8012a56:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8012a5a:	33f2      	adds	r3, #242	; 0xf2
 8012a5c:	b29b      	uxth	r3, r3
 8012a5e:	b21b      	sxth	r3, r3
 8012a60:	4619      	mov	r1, r3
 8012a62:	6878      	ldr	r0, [r7, #4]
 8012a64:	f7f7 fc7c 	bl	800a360 <pbuf_header>
 8012a68:	4603      	mov	r3, r0
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d006      	beq.n	8012a7c <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8012a6e:	4b2e      	ldr	r3, [pc, #184]	; (8012b28 <icmp_input+0x1fc>)
 8012a70:	22c0      	movs	r2, #192	; 0xc0
 8012a72:	4930      	ldr	r1, [pc, #192]	; (8012b34 <icmp_input+0x208>)
 8012a74:	482e      	ldr	r0, [pc, #184]	; (8012b30 <icmp_input+0x204>)
 8012a76:	f007 fe51 	bl	801a71c <iprintf>
        goto icmperr;
 8012a7a:	e04a      	b.n	8012b12 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	685b      	ldr	r3, [r3, #4]
 8012a80:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 8012a82:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012a86:	4619      	mov	r1, r3
 8012a88:	6878      	ldr	r0, [r7, #4]
 8012a8a:	f7f7 fc69 	bl	800a360 <pbuf_header>
 8012a8e:	4603      	mov	r3, r0
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d12b      	bne.n	8012aec <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	685b      	ldr	r3, [r3, #4]
 8012a98:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 8012a9a:	69fb      	ldr	r3, [r7, #28]
 8012a9c:	681a      	ldr	r2, [r3, #0]
 8012a9e:	693b      	ldr	r3, [r7, #16]
 8012aa0:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8012aa2:	4b1f      	ldr	r3, [pc, #124]	; (8012b20 <icmp_input+0x1f4>)
 8012aa4:	691a      	ldr	r2, [r3, #16]
 8012aa6:	693b      	ldr	r3, [r7, #16]
 8012aa8:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 8012aaa:	697b      	ldr	r3, [r7, #20]
 8012aac:	2200      	movs	r2, #0
 8012aae:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 8012ab0:	697b      	ldr	r3, [r7, #20]
 8012ab2:	2200      	movs	r2, #0
 8012ab4:	709a      	strb	r2, [r3, #2]
 8012ab6:	2200      	movs	r2, #0
 8012ab8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8012aba:	693b      	ldr	r3, [r7, #16]
 8012abc:	22ff      	movs	r2, #255	; 0xff
 8012abe:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8012ac0:	693b      	ldr	r3, [r7, #16]
 8012ac2:	2200      	movs	r2, #0
 8012ac4:	729a      	strb	r2, [r3, #10]
 8012ac6:	2200      	movs	r2, #0
 8012ac8:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8012aca:	683b      	ldr	r3, [r7, #0]
 8012acc:	9302      	str	r3, [sp, #8]
 8012ace:	2301      	movs	r3, #1
 8012ad0:	9301      	str	r3, [sp, #4]
 8012ad2:	2300      	movs	r3, #0
 8012ad4:	9300      	str	r3, [sp, #0]
 8012ad6:	23ff      	movs	r3, #255	; 0xff
 8012ad8:	2200      	movs	r2, #0
 8012ada:	69f9      	ldr	r1, [r7, #28]
 8012adc:	6878      	ldr	r0, [r7, #4]
 8012ade:	f000 fa79 	bl	8012fd4 <ip4_output_if>
 8012ae2:	4603      	mov	r3, r0
 8012ae4:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 8012ae6:	e001      	b.n	8012aec <icmp_input+0x1c0>
    break;
 8012ae8:	bf00      	nop
 8012aea:	e000      	b.n	8012aee <icmp_input+0x1c2>
    break;
 8012aec:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8012aee:	6878      	ldr	r0, [r7, #4]
 8012af0:	f7f7 fc5a 	bl	800a3a8 <pbuf_free>
  return;
 8012af4:	e011      	b.n	8012b1a <icmp_input+0x1ee>
    goto lenerr;
 8012af6:	bf00      	nop
 8012af8:	e002      	b.n	8012b00 <icmp_input+0x1d4>
    goto lenerr;
 8012afa:	bf00      	nop
 8012afc:	e000      	b.n	8012b00 <icmp_input+0x1d4>
      goto lenerr;
 8012afe:	bf00      	nop
lenerr:
  pbuf_free(p);
 8012b00:	6878      	ldr	r0, [r7, #4]
 8012b02:	f7f7 fc51 	bl	800a3a8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012b06:	e008      	b.n	8012b1a <icmp_input+0x1ee>
      goto icmperr;
 8012b08:	bf00      	nop
 8012b0a:	e002      	b.n	8012b12 <icmp_input+0x1e6>
      goto icmperr;
 8012b0c:	bf00      	nop
 8012b0e:	e000      	b.n	8012b12 <icmp_input+0x1e6>
        goto icmperr;
 8012b10:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8012b12:	6878      	ldr	r0, [r7, #4]
 8012b14:	f7f7 fc48 	bl	800a3a8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012b18:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8012b1a:	3728      	adds	r7, #40	; 0x28
 8012b1c:	46bd      	mov	sp, r7
 8012b1e:	bd80      	pop	{r7, pc}
 8012b20:	20007f84 	.word	0x20007f84
 8012b24:	20007f98 	.word	0x20007f98
 8012b28:	08020034 	.word	0x08020034
 8012b2c:	0802006c 	.word	0x0802006c
 8012b30:	080200a4 	.word	0x080200a4
 8012b34:	080200cc 	.word	0x080200cc

08012b38 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8012b38:	b580      	push	{r7, lr}
 8012b3a:	b082      	sub	sp, #8
 8012b3c:	af00      	add	r7, sp, #0
 8012b3e:	6078      	str	r0, [r7, #4]
 8012b40:	460b      	mov	r3, r1
 8012b42:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8012b44:	78fb      	ldrb	r3, [r7, #3]
 8012b46:	461a      	mov	r2, r3
 8012b48:	2103      	movs	r1, #3
 8012b4a:	6878      	ldr	r0, [r7, #4]
 8012b4c:	f000 f814 	bl	8012b78 <icmp_send_response>
}
 8012b50:	bf00      	nop
 8012b52:	3708      	adds	r7, #8
 8012b54:	46bd      	mov	sp, r7
 8012b56:	bd80      	pop	{r7, pc}

08012b58 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8012b58:	b580      	push	{r7, lr}
 8012b5a:	b082      	sub	sp, #8
 8012b5c:	af00      	add	r7, sp, #0
 8012b5e:	6078      	str	r0, [r7, #4]
 8012b60:	460b      	mov	r3, r1
 8012b62:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8012b64:	78fb      	ldrb	r3, [r7, #3]
 8012b66:	461a      	mov	r2, r3
 8012b68:	210b      	movs	r1, #11
 8012b6a:	6878      	ldr	r0, [r7, #4]
 8012b6c:	f000 f804 	bl	8012b78 <icmp_send_response>
}
 8012b70:	bf00      	nop
 8012b72:	3708      	adds	r7, #8
 8012b74:	46bd      	mov	sp, r7
 8012b76:	bd80      	pop	{r7, pc}

08012b78 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8012b78:	b580      	push	{r7, lr}
 8012b7a:	b08c      	sub	sp, #48	; 0x30
 8012b7c:	af04      	add	r7, sp, #16
 8012b7e:	6078      	str	r0, [r7, #4]
 8012b80:	460b      	mov	r3, r1
 8012b82:	70fb      	strb	r3, [r7, #3]
 8012b84:	4613      	mov	r3, r2
 8012b86:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8012b88:	2200      	movs	r2, #0
 8012b8a:	2124      	movs	r1, #36	; 0x24
 8012b8c:	2001      	movs	r0, #1
 8012b8e:	f7f7 f899 	bl	8009cc4 <pbuf_alloc>
 8012b92:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8012b94:	69fb      	ldr	r3, [r7, #28]
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d04c      	beq.n	8012c34 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8012b9a:	69fb      	ldr	r3, [r7, #28]
 8012b9c:	895b      	ldrh	r3, [r3, #10]
 8012b9e:	2b23      	cmp	r3, #35	; 0x23
 8012ba0:	d806      	bhi.n	8012bb0 <icmp_send_response+0x38>
 8012ba2:	4b26      	ldr	r3, [pc, #152]	; (8012c3c <icmp_send_response+0xc4>)
 8012ba4:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8012ba8:	4925      	ldr	r1, [pc, #148]	; (8012c40 <icmp_send_response+0xc8>)
 8012baa:	4826      	ldr	r0, [pc, #152]	; (8012c44 <icmp_send_response+0xcc>)
 8012bac:	f007 fdb6 	bl	801a71c <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	685b      	ldr	r3, [r3, #4]
 8012bb4:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8012bb6:	69fb      	ldr	r3, [r7, #28]
 8012bb8:	685b      	ldr	r3, [r3, #4]
 8012bba:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8012bbc:	697b      	ldr	r3, [r7, #20]
 8012bbe:	78fa      	ldrb	r2, [r7, #3]
 8012bc0:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8012bc2:	697b      	ldr	r3, [r7, #20]
 8012bc4:	78ba      	ldrb	r2, [r7, #2]
 8012bc6:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8012bc8:	697b      	ldr	r3, [r7, #20]
 8012bca:	2200      	movs	r2, #0
 8012bcc:	711a      	strb	r2, [r3, #4]
 8012bce:	2200      	movs	r2, #0
 8012bd0:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8012bd2:	697b      	ldr	r3, [r7, #20]
 8012bd4:	2200      	movs	r2, #0
 8012bd6:	719a      	strb	r2, [r3, #6]
 8012bd8:	2200      	movs	r2, #0
 8012bda:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8012bdc:	69fb      	ldr	r3, [r7, #28]
 8012bde:	685b      	ldr	r3, [r3, #4]
 8012be0:	f103 0008 	add.w	r0, r3, #8
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	685b      	ldr	r3, [r3, #4]
 8012be8:	221c      	movs	r2, #28
 8012bea:	4619      	mov	r1, r3
 8012bec:	f006 ff53 	bl	8019a96 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8012bf0:	69bb      	ldr	r3, [r7, #24]
 8012bf2:	68db      	ldr	r3, [r3, #12]
 8012bf4:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 8012bf6:	f107 030c 	add.w	r3, r7, #12
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	f000 f824 	bl	8012c48 <ip4_route>
 8012c00:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8012c02:	693b      	ldr	r3, [r7, #16]
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d011      	beq.n	8012c2c <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8012c08:	697b      	ldr	r3, [r7, #20]
 8012c0a:	2200      	movs	r2, #0
 8012c0c:	709a      	strb	r2, [r3, #2]
 8012c0e:	2200      	movs	r2, #0
 8012c10:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8012c12:	f107 020c 	add.w	r2, r7, #12
 8012c16:	693b      	ldr	r3, [r7, #16]
 8012c18:	9302      	str	r3, [sp, #8]
 8012c1a:	2301      	movs	r3, #1
 8012c1c:	9301      	str	r3, [sp, #4]
 8012c1e:	2300      	movs	r3, #0
 8012c20:	9300      	str	r3, [sp, #0]
 8012c22:	23ff      	movs	r3, #255	; 0xff
 8012c24:	2100      	movs	r1, #0
 8012c26:	69f8      	ldr	r0, [r7, #28]
 8012c28:	f000 f9d4 	bl	8012fd4 <ip4_output_if>
  }
  pbuf_free(q);
 8012c2c:	69f8      	ldr	r0, [r7, #28]
 8012c2e:	f7f7 fbbb 	bl	800a3a8 <pbuf_free>
 8012c32:	e000      	b.n	8012c36 <icmp_send_response+0xbe>
    return;
 8012c34:	bf00      	nop
}
 8012c36:	3720      	adds	r7, #32
 8012c38:	46bd      	mov	sp, r7
 8012c3a:	bd80      	pop	{r7, pc}
 8012c3c:	08020034 	.word	0x08020034
 8012c40:	08020100 	.word	0x08020100
 8012c44:	080200a4 	.word	0x080200a4

08012c48 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8012c48:	b480      	push	{r7}
 8012c4a:	b085      	sub	sp, #20
 8012c4c:	af00      	add	r7, sp, #0
 8012c4e:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8012c50:	4b30      	ldr	r3, [pc, #192]	; (8012d14 <ip4_route+0xcc>)
 8012c52:	681b      	ldr	r3, [r3, #0]
 8012c54:	60fb      	str	r3, [r7, #12]
 8012c56:	e036      	b.n	8012cc6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012c58:	68fb      	ldr	r3, [r7, #12]
 8012c5a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8012c5e:	f003 0301 	and.w	r3, r3, #1
 8012c62:	b2db      	uxtb	r3, r3
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d02b      	beq.n	8012cc0 <ip4_route+0x78>
 8012c68:	68fb      	ldr	r3, [r7, #12]
 8012c6a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8012c6e:	089b      	lsrs	r3, r3, #2
 8012c70:	f003 0301 	and.w	r3, r3, #1
 8012c74:	b2db      	uxtb	r3, r3
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d022      	beq.n	8012cc0 <ip4_route+0x78>
 8012c7a:	68fb      	ldr	r3, [r7, #12]
 8012c7c:	3304      	adds	r3, #4
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d01d      	beq.n	8012cc0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	681a      	ldr	r2, [r3, #0]
 8012c88:	68fb      	ldr	r3, [r7, #12]
 8012c8a:	3304      	adds	r3, #4
 8012c8c:	681b      	ldr	r3, [r3, #0]
 8012c8e:	405a      	eors	r2, r3
 8012c90:	68fb      	ldr	r3, [r7, #12]
 8012c92:	3308      	adds	r3, #8
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	4013      	ands	r3, r2
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d101      	bne.n	8012ca0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8012c9c:	68fb      	ldr	r3, [r7, #12]
 8012c9e:	e033      	b.n	8012d08 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8012ca6:	f003 0302 	and.w	r3, r3, #2
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d108      	bne.n	8012cc0 <ip4_route+0x78>
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	681a      	ldr	r2, [r3, #0]
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	330c      	adds	r3, #12
 8012cb6:	681b      	ldr	r3, [r3, #0]
 8012cb8:	429a      	cmp	r2, r3
 8012cba:	d101      	bne.n	8012cc0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	e023      	b.n	8012d08 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8012cc0:	68fb      	ldr	r3, [r7, #12]
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	60fb      	str	r3, [r7, #12]
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d1c5      	bne.n	8012c58 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012ccc:	4b12      	ldr	r3, [pc, #72]	; (8012d18 <ip4_route+0xd0>)
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d015      	beq.n	8012d00 <ip4_route+0xb8>
 8012cd4:	4b10      	ldr	r3, [pc, #64]	; (8012d18 <ip4_route+0xd0>)
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8012cdc:	f003 0301 	and.w	r3, r3, #1
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d00d      	beq.n	8012d00 <ip4_route+0xb8>
 8012ce4:	4b0c      	ldr	r3, [pc, #48]	; (8012d18 <ip4_route+0xd0>)
 8012ce6:	681b      	ldr	r3, [r3, #0]
 8012ce8:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8012cec:	f003 0304 	and.w	r3, r3, #4
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d005      	beq.n	8012d00 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 8012cf4:	4b08      	ldr	r3, [pc, #32]	; (8012d18 <ip4_route+0xd0>)
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	3304      	adds	r3, #4
 8012cfa:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d101      	bne.n	8012d04 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8012d00:	2300      	movs	r3, #0
 8012d02:	e001      	b.n	8012d08 <ip4_route+0xc0>
  }

  return netif_default;
 8012d04:	4b04      	ldr	r3, [pc, #16]	; (8012d18 <ip4_route+0xd0>)
 8012d06:	681b      	ldr	r3, [r3, #0]
}
 8012d08:	4618      	mov	r0, r3
 8012d0a:	3714      	adds	r7, #20
 8012d0c:	46bd      	mov	sp, r7
 8012d0e:	bc80      	pop	{r7}
 8012d10:	4770      	bx	lr
 8012d12:	bf00      	nop
 8012d14:	2000b7ec 	.word	0x2000b7ec
 8012d18:	2000b7f0 	.word	0x2000b7f0

08012d1c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8012d1c:	b580      	push	{r7, lr}
 8012d1e:	b088      	sub	sp, #32
 8012d20:	af00      	add	r7, sp, #0
 8012d22:	6078      	str	r0, [r7, #4]
 8012d24:	6039      	str	r1, [r7, #0]
  struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8012d26:	2301      	movs	r3, #1
 8012d28:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	685b      	ldr	r3, [r3, #4]
 8012d2e:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8012d30:	69fb      	ldr	r3, [r7, #28]
 8012d32:	781b      	ldrb	r3, [r3, #0]
 8012d34:	091b      	lsrs	r3, r3, #4
 8012d36:	b2db      	uxtb	r3, r3
 8012d38:	2b04      	cmp	r3, #4
 8012d3a:	d004      	beq.n	8012d46 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8012d3c:	6878      	ldr	r0, [r7, #4]
 8012d3e:	f7f7 fb33 	bl	800a3a8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8012d42:	2300      	movs	r3, #0
 8012d44:	e13e      	b.n	8012fc4 <ip4_input+0x2a8>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 8012d46:	69fb      	ldr	r3, [r7, #28]
 8012d48:	781b      	ldrb	r3, [r3, #0]
 8012d4a:	b29b      	uxth	r3, r3
 8012d4c:	f003 030f 	and.w	r3, r3, #15
 8012d50:	81fb      	strh	r3, [r7, #14]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 8012d52:	89fb      	ldrh	r3, [r7, #14]
 8012d54:	009b      	lsls	r3, r3, #2
 8012d56:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8012d58:	69fb      	ldr	r3, [r7, #28]
 8012d5a:	885b      	ldrh	r3, [r3, #2]
 8012d5c:	b29b      	uxth	r3, r3
 8012d5e:	4618      	mov	r0, r3
 8012d60:	f7f5 fe64 	bl	8008a2c <lwip_htons>
 8012d64:	4603      	mov	r3, r0
 8012d66:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	891b      	ldrh	r3, [r3, #8]
 8012d6c:	89ba      	ldrh	r2, [r7, #12]
 8012d6e:	429a      	cmp	r2, r3
 8012d70:	d204      	bcs.n	8012d7c <ip4_input+0x60>
    pbuf_realloc(p, iphdr_len);
 8012d72:	89bb      	ldrh	r3, [r7, #12]
 8012d74:	4619      	mov	r1, r3
 8012d76:	6878      	ldr	r0, [r7, #4]
 8012d78:	f7f7 f9a2 	bl	800a0c0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	895b      	ldrh	r3, [r3, #10]
 8012d80:	89fa      	ldrh	r2, [r7, #14]
 8012d82:	429a      	cmp	r2, r3
 8012d84:	d807      	bhi.n	8012d96 <ip4_input+0x7a>
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	891b      	ldrh	r3, [r3, #8]
 8012d8a:	89ba      	ldrh	r2, [r7, #12]
 8012d8c:	429a      	cmp	r2, r3
 8012d8e:	d802      	bhi.n	8012d96 <ip4_input+0x7a>
 8012d90:	89fb      	ldrh	r3, [r7, #14]
 8012d92:	2b13      	cmp	r3, #19
 8012d94:	d804      	bhi.n	8012da0 <ip4_input+0x84>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8012d96:	6878      	ldr	r0, [r7, #4]
 8012d98:	f7f7 fb06 	bl	800a3a8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8012d9c:	2300      	movs	r3, #0
 8012d9e:	e111      	b.n	8012fc4 <ip4_input+0x2a8>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8012da0:	69fb      	ldr	r3, [r7, #28]
 8012da2:	691b      	ldr	r3, [r3, #16]
 8012da4:	4a89      	ldr	r2, [pc, #548]	; (8012fcc <ip4_input+0x2b0>)
 8012da6:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8012da8:	69fb      	ldr	r3, [r7, #28]
 8012daa:	68db      	ldr	r3, [r3, #12]
 8012dac:	4a87      	ldr	r2, [pc, #540]	; (8012fcc <ip4_input+0x2b0>)
 8012dae:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012db0:	4b86      	ldr	r3, [pc, #536]	; (8012fcc <ip4_input+0x2b0>)
 8012db2:	695b      	ldr	r3, [r3, #20]
 8012db4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012db8:	2be0      	cmp	r3, #224	; 0xe0
 8012dba:	d112      	bne.n	8012de2 <ip4_input+0xc6>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8012dbc:	683b      	ldr	r3, [r7, #0]
 8012dbe:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8012dc2:	f003 0301 	and.w	r3, r3, #1
 8012dc6:	b2db      	uxtb	r3, r3
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d007      	beq.n	8012ddc <ip4_input+0xc0>
 8012dcc:	683b      	ldr	r3, [r7, #0]
 8012dce:	3304      	adds	r3, #4
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	d002      	beq.n	8012ddc <ip4_input+0xc0>
      netif = inp;
 8012dd6:	683b      	ldr	r3, [r7, #0]
 8012dd8:	61bb      	str	r3, [r7, #24]
 8012dda:	e041      	b.n	8012e60 <ip4_input+0x144>
    } else {
      netif = NULL;
 8012ddc:	2300      	movs	r3, #0
 8012dde:	61bb      	str	r3, [r7, #24]
 8012de0:	e03e      	b.n	8012e60 <ip4_input+0x144>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 8012de2:	2301      	movs	r3, #1
 8012de4:	613b      	str	r3, [r7, #16]
    netif = inp;
 8012de6:	683b      	ldr	r3, [r7, #0]
 8012de8:	61bb      	str	r3, [r7, #24]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8012dea:	69bb      	ldr	r3, [r7, #24]
 8012dec:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8012df0:	f003 0301 	and.w	r3, r3, #1
 8012df4:	b2db      	uxtb	r3, r3
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d014      	beq.n	8012e24 <ip4_input+0x108>
 8012dfa:	69bb      	ldr	r3, [r7, #24]
 8012dfc:	3304      	adds	r3, #4
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d00f      	beq.n	8012e24 <ip4_input+0x108>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012e04:	4b71      	ldr	r3, [pc, #452]	; (8012fcc <ip4_input+0x2b0>)
 8012e06:	695a      	ldr	r2, [r3, #20]
 8012e08:	69bb      	ldr	r3, [r7, #24]
 8012e0a:	3304      	adds	r3, #4
 8012e0c:	681b      	ldr	r3, [r3, #0]
 8012e0e:	429a      	cmp	r2, r3
 8012e10:	d026      	beq.n	8012e60 <ip4_input+0x144>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8012e12:	4b6e      	ldr	r3, [pc, #440]	; (8012fcc <ip4_input+0x2b0>)
 8012e14:	695b      	ldr	r3, [r3, #20]
 8012e16:	69b9      	ldr	r1, [r7, #24]
 8012e18:	4618      	mov	r0, r3
 8012e1a:	f000 f9ad 	bl	8013178 <ip4_addr_isbroadcast_u32>
 8012e1e:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d11d      	bne.n	8012e60 <ip4_input+0x144>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 8012e24:	693b      	ldr	r3, [r7, #16]
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d00d      	beq.n	8012e46 <ip4_input+0x12a>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8012e2a:	4b68      	ldr	r3, [pc, #416]	; (8012fcc <ip4_input+0x2b0>)
 8012e2c:	695b      	ldr	r3, [r3, #20]
 8012e2e:	b2db      	uxtb	r3, r3
 8012e30:	2b7f      	cmp	r3, #127	; 0x7f
 8012e32:	d102      	bne.n	8012e3a <ip4_input+0x11e>
          netif = NULL;
 8012e34:	2300      	movs	r3, #0
 8012e36:	61bb      	str	r3, [r7, #24]
          break;
 8012e38:	e012      	b.n	8012e60 <ip4_input+0x144>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 8012e3a:	2300      	movs	r3, #0
 8012e3c:	613b      	str	r3, [r7, #16]
        netif = netif_list;
 8012e3e:	4b64      	ldr	r3, [pc, #400]	; (8012fd0 <ip4_input+0x2b4>)
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	61bb      	str	r3, [r7, #24]
 8012e44:	e002      	b.n	8012e4c <ip4_input+0x130>
      } else {
        netif = netif->next;
 8012e46:	69bb      	ldr	r3, [r7, #24]
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	61bb      	str	r3, [r7, #24]
      }
      if (netif == inp) {
 8012e4c:	69ba      	ldr	r2, [r7, #24]
 8012e4e:	683b      	ldr	r3, [r7, #0]
 8012e50:	429a      	cmp	r2, r3
 8012e52:	d102      	bne.n	8012e5a <ip4_input+0x13e>
        netif = netif->next;
 8012e54:	69bb      	ldr	r3, [r7, #24]
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	61bb      	str	r3, [r7, #24]
      }
    } while (netif != NULL);
 8012e5a:	69bb      	ldr	r3, [r7, #24]
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d1c4      	bne.n	8012dea <ip4_input+0xce>
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8012e60:	69bb      	ldr	r3, [r7, #24]
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d111      	bne.n	8012e8a <ip4_input+0x16e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8012e66:	69fb      	ldr	r3, [r7, #28]
 8012e68:	7a5b      	ldrb	r3, [r3, #9]
 8012e6a:	2b11      	cmp	r3, #17
 8012e6c:	d10d      	bne.n	8012e8a <ip4_input+0x16e>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
 8012e6e:	89fb      	ldrh	r3, [r7, #14]
 8012e70:	69fa      	ldr	r2, [r7, #28]
 8012e72:	4413      	add	r3, r2
 8012e74:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
        lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8012e76:	68bb      	ldr	r3, [r7, #8]
 8012e78:	885b      	ldrh	r3, [r3, #2]
 8012e7a:	b29b      	uxth	r3, r3
 8012e7c:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8012e80:	d103      	bne.n	8012e8a <ip4_input+0x16e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8012e82:	683b      	ldr	r3, [r7, #0]
 8012e84:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8012e86:	2300      	movs	r3, #0
 8012e88:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8012e8a:	697b      	ldr	r3, [r7, #20]
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d017      	beq.n	8012ec0 <ip4_input+0x1a4>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8012e90:	4b4e      	ldr	r3, [pc, #312]	; (8012fcc <ip4_input+0x2b0>)
 8012e92:	691b      	ldr	r3, [r3, #16]
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d013      	beq.n	8012ec0 <ip4_input+0x1a4>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012e98:	4b4c      	ldr	r3, [pc, #304]	; (8012fcc <ip4_input+0x2b0>)
 8012e9a:	691b      	ldr	r3, [r3, #16]
 8012e9c:	6839      	ldr	r1, [r7, #0]
 8012e9e:	4618      	mov	r0, r3
 8012ea0:	f000 f96a 	bl	8013178 <ip4_addr_isbroadcast_u32>
 8012ea4:	4603      	mov	r3, r0
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d105      	bne.n	8012eb6 <ip4_input+0x19a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8012eaa:	4b48      	ldr	r3, [pc, #288]	; (8012fcc <ip4_input+0x2b0>)
 8012eac:	691b      	ldr	r3, [r3, #16]
 8012eae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012eb2:	2be0      	cmp	r3, #224	; 0xe0
 8012eb4:	d104      	bne.n	8012ec0 <ip4_input+0x1a4>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8012eb6:	6878      	ldr	r0, [r7, #4]
 8012eb8:	f7f7 fa76 	bl	800a3a8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8012ebc:	2300      	movs	r3, #0
 8012ebe:	e081      	b.n	8012fc4 <ip4_input+0x2a8>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8012ec0:	69bb      	ldr	r3, [r7, #24]
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d104      	bne.n	8012ed0 <ip4_input+0x1b4>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8012ec6:	6878      	ldr	r0, [r7, #4]
 8012ec8:	f7f7 fa6e 	bl	800a3a8 <pbuf_free>
    return ERR_OK;
 8012ecc:	2300      	movs	r3, #0
 8012ece:	e079      	b.n	8012fc4 <ip4_input+0x2a8>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8012ed0:	69fb      	ldr	r3, [r7, #28]
 8012ed2:	88db      	ldrh	r3, [r3, #6]
 8012ed4:	b29b      	uxth	r3, r3
 8012ed6:	461a      	mov	r2, r3
 8012ed8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8012edc:	4013      	ands	r3, r2
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d00b      	beq.n	8012efa <ip4_input+0x1de>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8012ee2:	6878      	ldr	r0, [r7, #4]
 8012ee4:	f000 fdcc 	bl	8013a80 <ip4_reass>
 8012ee8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d101      	bne.n	8012ef4 <ip4_input+0x1d8>
      return ERR_OK;
 8012ef0:	2300      	movs	r3, #0
 8012ef2:	e067      	b.n	8012fc4 <ip4_input+0x2a8>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	685b      	ldr	r3, [r3, #4]
 8012ef8:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8012efa:	4a34      	ldr	r2, [pc, #208]	; (8012fcc <ip4_input+0x2b0>)
 8012efc:	69bb      	ldr	r3, [r7, #24]
 8012efe:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8012f00:	4a32      	ldr	r2, [pc, #200]	; (8012fcc <ip4_input+0x2b0>)
 8012f02:	683b      	ldr	r3, [r7, #0]
 8012f04:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8012f06:	4a31      	ldr	r2, [pc, #196]	; (8012fcc <ip4_input+0x2b0>)
 8012f08:	69fb      	ldr	r3, [r7, #28]
 8012f0a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8012f0c:	69fb      	ldr	r3, [r7, #28]
 8012f0e:	781b      	ldrb	r3, [r3, #0]
 8012f10:	b29b      	uxth	r3, r3
 8012f12:	f003 030f 	and.w	r3, r3, #15
 8012f16:	b29b      	uxth	r3, r3
 8012f18:	009b      	lsls	r3, r3, #2
 8012f1a:	b29a      	uxth	r2, r3
 8012f1c:	4b2b      	ldr	r3, [pc, #172]	; (8012fcc <ip4_input+0x2b0>)
 8012f1e:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8012f20:	89fb      	ldrh	r3, [r7, #14]
 8012f22:	425b      	negs	r3, r3
 8012f24:	b29b      	uxth	r3, r3
 8012f26:	b21b      	sxth	r3, r3
 8012f28:	4619      	mov	r1, r3
 8012f2a:	6878      	ldr	r0, [r7, #4]
 8012f2c:	f7f7 fa18 	bl	800a360 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 8012f30:	69fb      	ldr	r3, [r7, #28]
 8012f32:	7a5b      	ldrb	r3, [r3, #9]
 8012f34:	2b06      	cmp	r3, #6
 8012f36:	d009      	beq.n	8012f4c <ip4_input+0x230>
 8012f38:	2b11      	cmp	r3, #17
 8012f3a:	d002      	beq.n	8012f42 <ip4_input+0x226>
 8012f3c:	2b01      	cmp	r3, #1
 8012f3e:	d00a      	beq.n	8012f56 <ip4_input+0x23a>
 8012f40:	e00e      	b.n	8012f60 <ip4_input+0x244>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 8012f42:	6839      	ldr	r1, [r7, #0]
 8012f44:	6878      	ldr	r0, [r7, #4]
 8012f46:	f7fc fb63 	bl	800f610 <udp_input>
      break;
 8012f4a:	e028      	b.n	8012f9e <ip4_input+0x282>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 8012f4c:	6839      	ldr	r1, [r7, #0]
 8012f4e:	6878      	ldr	r0, [r7, #4]
 8012f50:	f7f8 ffba 	bl	800bec8 <tcp_input>
      break;
 8012f54:	e023      	b.n	8012f9e <ip4_input+0x282>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 8012f56:	6839      	ldr	r1, [r7, #0]
 8012f58:	6878      	ldr	r0, [r7, #4]
 8012f5a:	f7ff fce7 	bl	801292c <icmp_input>
      break;
 8012f5e:	e01e      	b.n	8012f9e <ip4_input+0x282>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012f60:	4b1a      	ldr	r3, [pc, #104]	; (8012fcc <ip4_input+0x2b0>)
 8012f62:	695b      	ldr	r3, [r3, #20]
 8012f64:	69b9      	ldr	r1, [r7, #24]
 8012f66:	4618      	mov	r0, r3
 8012f68:	f000 f906 	bl	8013178 <ip4_addr_isbroadcast_u32>
 8012f6c:	4603      	mov	r3, r0
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d112      	bne.n	8012f98 <ip4_input+0x27c>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012f72:	4b16      	ldr	r3, [pc, #88]	; (8012fcc <ip4_input+0x2b0>)
 8012f74:	695b      	ldr	r3, [r3, #20]
 8012f76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012f7a:	2be0      	cmp	r3, #224	; 0xe0
 8012f7c:	d00c      	beq.n	8012f98 <ip4_input+0x27c>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8012f7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012f82:	4619      	mov	r1, r3
 8012f84:	6878      	ldr	r0, [r7, #4]
 8012f86:	f7f7 f9fd 	bl	800a384 <pbuf_header_force>
        p->payload = iphdr;
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	69fa      	ldr	r2, [r7, #28]
 8012f8e:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8012f90:	2102      	movs	r1, #2
 8012f92:	6878      	ldr	r0, [r7, #4]
 8012f94:	f7ff fdd0 	bl	8012b38 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 8012f98:	6878      	ldr	r0, [r7, #4]
 8012f9a:	f7f7 fa05 	bl	800a3a8 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8012f9e:	4b0b      	ldr	r3, [pc, #44]	; (8012fcc <ip4_input+0x2b0>)
 8012fa0:	2200      	movs	r2, #0
 8012fa2:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8012fa4:	4b09      	ldr	r3, [pc, #36]	; (8012fcc <ip4_input+0x2b0>)
 8012fa6:	2200      	movs	r2, #0
 8012fa8:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8012faa:	4b08      	ldr	r3, [pc, #32]	; (8012fcc <ip4_input+0x2b0>)
 8012fac:	2200      	movs	r2, #0
 8012fae:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8012fb0:	4b06      	ldr	r3, [pc, #24]	; (8012fcc <ip4_input+0x2b0>)
 8012fb2:	2200      	movs	r2, #0
 8012fb4:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8012fb6:	4b05      	ldr	r3, [pc, #20]	; (8012fcc <ip4_input+0x2b0>)
 8012fb8:	2200      	movs	r2, #0
 8012fba:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8012fbc:	4b03      	ldr	r3, [pc, #12]	; (8012fcc <ip4_input+0x2b0>)
 8012fbe:	2200      	movs	r2, #0
 8012fc0:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8012fc2:	2300      	movs	r3, #0
}
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	3720      	adds	r7, #32
 8012fc8:	46bd      	mov	sp, r7
 8012fca:	bd80      	pop	{r7, pc}
 8012fcc:	20007f84 	.word	0x20007f84
 8012fd0:	2000b7ec 	.word	0x2000b7ec

08012fd4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8012fd4:	b580      	push	{r7, lr}
 8012fd6:	b08a      	sub	sp, #40	; 0x28
 8012fd8:	af04      	add	r7, sp, #16
 8012fda:	60f8      	str	r0, [r7, #12]
 8012fdc:	60b9      	str	r1, [r7, #8]
 8012fde:	607a      	str	r2, [r7, #4]
 8012fe0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8012fe2:	68bb      	ldr	r3, [r7, #8]
 8012fe4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	d009      	beq.n	8013000 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8012fec:	68bb      	ldr	r3, [r7, #8]
 8012fee:	2b00      	cmp	r3, #0
 8012ff0:	d003      	beq.n	8012ffa <ip4_output_if+0x26>
 8012ff2:	68bb      	ldr	r3, [r7, #8]
 8012ff4:	681b      	ldr	r3, [r3, #0]
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d102      	bne.n	8013000 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8012ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ffc:	3304      	adds	r3, #4
 8012ffe:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8013000:	78fa      	ldrb	r2, [r7, #3]
 8013002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013004:	9302      	str	r3, [sp, #8]
 8013006:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801300a:	9301      	str	r3, [sp, #4]
 801300c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013010:	9300      	str	r3, [sp, #0]
 8013012:	4613      	mov	r3, r2
 8013014:	687a      	ldr	r2, [r7, #4]
 8013016:	6979      	ldr	r1, [r7, #20]
 8013018:	68f8      	ldr	r0, [r7, #12]
 801301a:	f000 f805 	bl	8013028 <ip4_output_if_src>
 801301e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8013020:	4618      	mov	r0, r3
 8013022:	3718      	adds	r7, #24
 8013024:	46bd      	mov	sp, r7
 8013026:	bd80      	pop	{r7, pc}

08013028 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8013028:	b580      	push	{r7, lr}
 801302a:	b088      	sub	sp, #32
 801302c:	af00      	add	r7, sp, #0
 801302e:	60f8      	str	r0, [r7, #12]
 8013030:	60b9      	str	r1, [r7, #8]
 8013032:	607a      	str	r2, [r7, #4]
 8013034:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8013036:	68fb      	ldr	r3, [r7, #12]
 8013038:	89db      	ldrh	r3, [r3, #14]
 801303a:	2b01      	cmp	r3, #1
 801303c:	d006      	beq.n	801304c <ip4_output_if_src+0x24>
 801303e:	4b48      	ldr	r3, [pc, #288]	; (8013160 <ip4_output_if_src+0x138>)
 8013040:	f240 3233 	movw	r2, #819	; 0x333
 8013044:	4947      	ldr	r1, [pc, #284]	; (8013164 <ip4_output_if_src+0x13c>)
 8013046:	4848      	ldr	r0, [pc, #288]	; (8013168 <ip4_output_if_src+0x140>)
 8013048:	f007 fb68 	bl	801a71c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	2b00      	cmp	r3, #0
 8013050:	d060      	beq.n	8013114 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8013052:	2314      	movs	r3, #20
 8013054:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8013056:	2114      	movs	r1, #20
 8013058:	68f8      	ldr	r0, [r7, #12]
 801305a:	f7f7 f981 	bl	800a360 <pbuf_header>
 801305e:	4603      	mov	r3, r0
 8013060:	2b00      	cmp	r3, #0
 8013062:	d002      	beq.n	801306a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013064:	f06f 0301 	mvn.w	r3, #1
 8013068:	e075      	b.n	8013156 <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	685b      	ldr	r3, [r3, #4]
 801306e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	895b      	ldrh	r3, [r3, #10]
 8013074:	2b13      	cmp	r3, #19
 8013076:	d806      	bhi.n	8013086 <ip4_output_if_src+0x5e>
 8013078:	4b39      	ldr	r3, [pc, #228]	; (8013160 <ip4_output_if_src+0x138>)
 801307a:	f240 3261 	movw	r2, #865	; 0x361
 801307e:	493b      	ldr	r1, [pc, #236]	; (801316c <ip4_output_if_src+0x144>)
 8013080:	4839      	ldr	r0, [pc, #228]	; (8013168 <ip4_output_if_src+0x140>)
 8013082:	f007 fb4b 	bl	801a71c <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8013086:	69fb      	ldr	r3, [r7, #28]
 8013088:	78fa      	ldrb	r2, [r7, #3]
 801308a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801308c:	69fb      	ldr	r3, [r7, #28]
 801308e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8013092:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	681a      	ldr	r2, [r3, #0]
 8013098:	69fb      	ldr	r3, [r7, #28]
 801309a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801309c:	8b7b      	ldrh	r3, [r7, #26]
 801309e:	089b      	lsrs	r3, r3, #2
 80130a0:	b29b      	uxth	r3, r3
 80130a2:	b2db      	uxtb	r3, r3
 80130a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80130a8:	b2da      	uxtb	r2, r3
 80130aa:	69fb      	ldr	r3, [r7, #28]
 80130ac:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80130ae:	69fb      	ldr	r3, [r7, #28]
 80130b0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80130b4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	891b      	ldrh	r3, [r3, #8]
 80130ba:	4618      	mov	r0, r3
 80130bc:	f7f5 fcb6 	bl	8008a2c <lwip_htons>
 80130c0:	4603      	mov	r3, r0
 80130c2:	461a      	mov	r2, r3
 80130c4:	69fb      	ldr	r3, [r7, #28]
 80130c6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80130c8:	69fb      	ldr	r3, [r7, #28]
 80130ca:	2200      	movs	r2, #0
 80130cc:	719a      	strb	r2, [r3, #6]
 80130ce:	2200      	movs	r2, #0
 80130d0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80130d2:	4b27      	ldr	r3, [pc, #156]	; (8013170 <ip4_output_if_src+0x148>)
 80130d4:	881b      	ldrh	r3, [r3, #0]
 80130d6:	4618      	mov	r0, r3
 80130d8:	f7f5 fca8 	bl	8008a2c <lwip_htons>
 80130dc:	4603      	mov	r3, r0
 80130de:	461a      	mov	r2, r3
 80130e0:	69fb      	ldr	r3, [r7, #28]
 80130e2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80130e4:	4b22      	ldr	r3, [pc, #136]	; (8013170 <ip4_output_if_src+0x148>)
 80130e6:	881b      	ldrh	r3, [r3, #0]
 80130e8:	3301      	adds	r3, #1
 80130ea:	b29a      	uxth	r2, r3
 80130ec:	4b20      	ldr	r3, [pc, #128]	; (8013170 <ip4_output_if_src+0x148>)
 80130ee:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80130f0:	68bb      	ldr	r3, [r7, #8]
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d104      	bne.n	8013100 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80130f6:	4b1f      	ldr	r3, [pc, #124]	; (8013174 <ip4_output_if_src+0x14c>)
 80130f8:	681a      	ldr	r2, [r3, #0]
 80130fa:	69fb      	ldr	r3, [r7, #28]
 80130fc:	60da      	str	r2, [r3, #12]
 80130fe:	e003      	b.n	8013108 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8013100:	68bb      	ldr	r3, [r7, #8]
 8013102:	681a      	ldr	r2, [r3, #0]
 8013104:	69fb      	ldr	r3, [r7, #28]
 8013106:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8013108:	69fb      	ldr	r3, [r7, #28]
 801310a:	2200      	movs	r2, #0
 801310c:	729a      	strb	r2, [r3, #10]
 801310e:	2200      	movs	r2, #0
 8013110:	72da      	strb	r2, [r3, #11]
 8013112:	e008      	b.n	8013126 <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	685b      	ldr	r3, [r3, #4]
 8013118:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801311a:	69fb      	ldr	r3, [r7, #28]
 801311c:	691b      	ldr	r3, [r3, #16]
 801311e:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8013120:	f107 0314 	add.w	r3, r7, #20
 8013124:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8013126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801312a:	2b00      	cmp	r3, #0
 801312c:	d00c      	beq.n	8013148 <ip4_output_if_src+0x120>
 801312e:	68fb      	ldr	r3, [r7, #12]
 8013130:	891a      	ldrh	r2, [r3, #8]
 8013132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013136:	429a      	cmp	r2, r3
 8013138:	d906      	bls.n	8013148 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 801313a:	687a      	ldr	r2, [r7, #4]
 801313c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801313e:	68f8      	ldr	r0, [r7, #12]
 8013140:	f000 fe48 	bl	8013dd4 <ip4_frag>
 8013144:	4603      	mov	r3, r0
 8013146:	e006      	b.n	8013156 <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8013148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801314a:	695b      	ldr	r3, [r3, #20]
 801314c:	687a      	ldr	r2, [r7, #4]
 801314e:	68f9      	ldr	r1, [r7, #12]
 8013150:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013152:	4798      	blx	r3
 8013154:	4603      	mov	r3, r0
}
 8013156:	4618      	mov	r0, r3
 8013158:	3720      	adds	r7, #32
 801315a:	46bd      	mov	sp, r7
 801315c:	bd80      	pop	{r7, pc}
 801315e:	bf00      	nop
 8013160:	0802012c 	.word	0x0802012c
 8013164:	08020160 	.word	0x08020160
 8013168:	0802016c 	.word	0x0802016c
 801316c:	08020194 	.word	0x08020194
 8013170:	20004d3e 	.word	0x20004d3e
 8013174:	08021d18 	.word	0x08021d18

08013178 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8013178:	b480      	push	{r7}
 801317a:	b085      	sub	sp, #20
 801317c:	af00      	add	r7, sp, #0
 801317e:	6078      	str	r0, [r7, #4]
 8013180:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	f1b3 3fff 	cmp.w	r3, #4294967295
 801318c:	d002      	beq.n	8013194 <ip4_addr_isbroadcast_u32+0x1c>
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	2b00      	cmp	r3, #0
 8013192:	d101      	bne.n	8013198 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8013194:	2301      	movs	r3, #1
 8013196:	e02a      	b.n	80131ee <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8013198:	683b      	ldr	r3, [r7, #0]
 801319a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 801319e:	f003 0302 	and.w	r3, r3, #2
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d101      	bne.n	80131aa <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80131a6:	2300      	movs	r3, #0
 80131a8:	e021      	b.n	80131ee <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80131aa:	683b      	ldr	r3, [r7, #0]
 80131ac:	3304      	adds	r3, #4
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	687a      	ldr	r2, [r7, #4]
 80131b2:	429a      	cmp	r2, r3
 80131b4:	d101      	bne.n	80131ba <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80131b6:	2300      	movs	r3, #0
 80131b8:	e019      	b.n	80131ee <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80131ba:	68fa      	ldr	r2, [r7, #12]
 80131bc:	683b      	ldr	r3, [r7, #0]
 80131be:	3304      	adds	r3, #4
 80131c0:	681b      	ldr	r3, [r3, #0]
 80131c2:	405a      	eors	r2, r3
 80131c4:	683b      	ldr	r3, [r7, #0]
 80131c6:	3308      	adds	r3, #8
 80131c8:	681b      	ldr	r3, [r3, #0]
 80131ca:	4013      	ands	r3, r2
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d10d      	bne.n	80131ec <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80131d0:	683b      	ldr	r3, [r7, #0]
 80131d2:	3308      	adds	r3, #8
 80131d4:	681b      	ldr	r3, [r3, #0]
 80131d6:	43da      	mvns	r2, r3
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80131dc:	683b      	ldr	r3, [r7, #0]
 80131de:	3308      	adds	r3, #8
 80131e0:	681b      	ldr	r3, [r3, #0]
 80131e2:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80131e4:	429a      	cmp	r2, r3
 80131e6:	d101      	bne.n	80131ec <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80131e8:	2301      	movs	r3, #1
 80131ea:	e000      	b.n	80131ee <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80131ec:	2300      	movs	r3, #0
  }
}
 80131ee:	4618      	mov	r0, r3
 80131f0:	3714      	adds	r7, #20
 80131f2:	46bd      	mov	sp, r7
 80131f4:	bc80      	pop	{r7}
 80131f6:	4770      	bx	lr

080131f8 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 80131f8:	b580      	push	{r7, lr}
 80131fa:	b08a      	sub	sp, #40	; 0x28
 80131fc:	af00      	add	r7, sp, #0
 80131fe:	6078      	str	r0, [r7, #4]
 8013200:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 8013202:	f107 030c 	add.w	r3, r7, #12
 8013206:	61fb      	str	r3, [r7, #28]

  c = *cp;
 8013208:	687b      	ldr	r3, [r7, #4]
 801320a:	781b      	ldrb	r3, [r3, #0]
 801320c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!isdigit(c)) {
 8013210:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013214:	2b2f      	cmp	r3, #47	; 0x2f
 8013216:	d903      	bls.n	8013220 <ip4addr_aton+0x28>
 8013218:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801321c:	2b39      	cmp	r3, #57	; 0x39
 801321e:	d901      	bls.n	8013224 <ip4addr_aton+0x2c>
      return 0;
 8013220:	2300      	movs	r3, #0
 8013222:	e11e      	b.n	8013462 <ip4addr_aton+0x26a>
    }
    val = 0;
 8013224:	2300      	movs	r3, #0
 8013226:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 8013228:	230a      	movs	r3, #10
 801322a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 801322e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013232:	2b30      	cmp	r3, #48	; 0x30
 8013234:	d11c      	bne.n	8013270 <ip4addr_aton+0x78>
      c = *++cp;
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	3301      	adds	r3, #1
 801323a:	607b      	str	r3, [r7, #4]
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	781b      	ldrb	r3, [r3, #0]
 8013240:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 8013244:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013248:	2b78      	cmp	r3, #120	; 0x78
 801324a:	d003      	beq.n	8013254 <ip4addr_aton+0x5c>
 801324c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013250:	2b58      	cmp	r3, #88	; 0x58
 8013252:	d10a      	bne.n	801326a <ip4addr_aton+0x72>
        base = 16;
 8013254:	2310      	movs	r3, #16
 8013256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	3301      	adds	r3, #1
 801325e:	607b      	str	r3, [r7, #4]
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	781b      	ldrb	r3, [r3, #0]
 8013264:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8013268:	e002      	b.n	8013270 <ip4addr_aton+0x78>
      } else {
        base = 8;
 801326a:	2308      	movs	r3, #8
 801326c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (isdigit(c)) {
 8013270:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013274:	2b2f      	cmp	r3, #47	; 0x2f
 8013276:	d915      	bls.n	80132a4 <ip4addr_aton+0xac>
 8013278:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801327c:	2b39      	cmp	r3, #57	; 0x39
 801327e:	d811      	bhi.n	80132a4 <ip4addr_aton+0xac>
        val = (val * base) + (u32_t)(c - '0');
 8013280:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013286:	fb02 f203 	mul.w	r2, r2, r3
 801328a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801328e:	4413      	add	r3, r2
 8013290:	3b30      	subs	r3, #48	; 0x30
 8013292:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	3301      	adds	r3, #1
 8013298:	607b      	str	r3, [r7, #4]
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	781b      	ldrb	r3, [r3, #0]
 801329e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80132a2:	e036      	b.n	8013312 <ip4addr_aton+0x11a>
      } else if (base == 16 && isxdigit(c)) {
 80132a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80132a8:	2b10      	cmp	r3, #16
 80132aa:	d133      	bne.n	8013314 <ip4addr_aton+0x11c>
 80132ac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80132b0:	2b2f      	cmp	r3, #47	; 0x2f
 80132b2:	d903      	bls.n	80132bc <ip4addr_aton+0xc4>
 80132b4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80132b8:	2b39      	cmp	r3, #57	; 0x39
 80132ba:	d90f      	bls.n	80132dc <ip4addr_aton+0xe4>
 80132bc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80132c0:	2b60      	cmp	r3, #96	; 0x60
 80132c2:	d903      	bls.n	80132cc <ip4addr_aton+0xd4>
 80132c4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80132c8:	2b66      	cmp	r3, #102	; 0x66
 80132ca:	d907      	bls.n	80132dc <ip4addr_aton+0xe4>
 80132cc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80132d0:	2b40      	cmp	r3, #64	; 0x40
 80132d2:	d91f      	bls.n	8013314 <ip4addr_aton+0x11c>
 80132d4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80132d8:	2b46      	cmp	r3, #70	; 0x46
 80132da:	d81b      	bhi.n	8013314 <ip4addr_aton+0x11c>
        val = (val << 4) | (u32_t)(c + 10 - (islower(c) ? 'a' : 'A'));
 80132dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132de:	011b      	lsls	r3, r3, #4
 80132e0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80132e4:	f102 010a 	add.w	r1, r2, #10
 80132e8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80132ec:	2a60      	cmp	r2, #96	; 0x60
 80132ee:	d905      	bls.n	80132fc <ip4addr_aton+0x104>
 80132f0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80132f4:	2a7a      	cmp	r2, #122	; 0x7a
 80132f6:	d801      	bhi.n	80132fc <ip4addr_aton+0x104>
 80132f8:	2261      	movs	r2, #97	; 0x61
 80132fa:	e000      	b.n	80132fe <ip4addr_aton+0x106>
 80132fc:	2241      	movs	r2, #65	; 0x41
 80132fe:	1a8a      	subs	r2, r1, r2
 8013300:	4313      	orrs	r3, r2
 8013302:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	3301      	adds	r3, #1
 8013308:	607b      	str	r3, [r7, #4]
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	781b      	ldrb	r3, [r3, #0]
 801330e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (isdigit(c)) {
 8013312:	e7ad      	b.n	8013270 <ip4addr_aton+0x78>
      } else {
        break;
      }
    }
    if (c == '.') {
 8013314:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013318:	2b2e      	cmp	r3, #46	; 0x2e
 801331a:	d114      	bne.n	8013346 <ip4addr_aton+0x14e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 801331c:	f107 030c 	add.w	r3, r7, #12
 8013320:	330c      	adds	r3, #12
 8013322:	69fa      	ldr	r2, [r7, #28]
 8013324:	429a      	cmp	r2, r3
 8013326:	d301      	bcc.n	801332c <ip4addr_aton+0x134>
        return 0;
 8013328:	2300      	movs	r3, #0
 801332a:	e09a      	b.n	8013462 <ip4addr_aton+0x26a>
      }
      *pp++ = val;
 801332c:	69fb      	ldr	r3, [r7, #28]
 801332e:	1d1a      	adds	r2, r3, #4
 8013330:	61fa      	str	r2, [r7, #28]
 8013332:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013334:	601a      	str	r2, [r3, #0]
      c = *++cp;
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	3301      	adds	r3, #1
 801333a:	607b      	str	r3, [r7, #4]
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	781b      	ldrb	r3, [r3, #0]
 8013340:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!isdigit(c)) {
 8013344:	e764      	b.n	8013210 <ip4addr_aton+0x18>
    } else {
      break;
 8013346:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !isspace(c)) {
 8013348:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801334c:	2b00      	cmp	r3, #0
 801334e:	d019      	beq.n	8013384 <ip4addr_aton+0x18c>
 8013350:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013354:	2b20      	cmp	r3, #32
 8013356:	d015      	beq.n	8013384 <ip4addr_aton+0x18c>
 8013358:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801335c:	2b0c      	cmp	r3, #12
 801335e:	d011      	beq.n	8013384 <ip4addr_aton+0x18c>
 8013360:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013364:	2b0a      	cmp	r3, #10
 8013366:	d00d      	beq.n	8013384 <ip4addr_aton+0x18c>
 8013368:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801336c:	2b0d      	cmp	r3, #13
 801336e:	d009      	beq.n	8013384 <ip4addr_aton+0x18c>
 8013370:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013374:	2b09      	cmp	r3, #9
 8013376:	d005      	beq.n	8013384 <ip4addr_aton+0x18c>
 8013378:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801337c:	2b0b      	cmp	r3, #11
 801337e:	d001      	beq.n	8013384 <ip4addr_aton+0x18c>
    return 0;
 8013380:	2300      	movs	r3, #0
 8013382:	e06e      	b.n	8013462 <ip4addr_aton+0x26a>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 8013384:	69fa      	ldr	r2, [r7, #28]
 8013386:	f107 030c 	add.w	r3, r7, #12
 801338a:	1ad3      	subs	r3, r2, r3
 801338c:	109b      	asrs	r3, r3, #2
 801338e:	3301      	adds	r3, #1
 8013390:	2b04      	cmp	r3, #4
 8013392:	d853      	bhi.n	801343c <ip4addr_aton+0x244>
 8013394:	a201      	add	r2, pc, #4	; (adr r2, 801339c <ip4addr_aton+0x1a4>)
 8013396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801339a:	bf00      	nop
 801339c:	080133b1 	.word	0x080133b1
 80133a0:	0801344d 	.word	0x0801344d
 80133a4:	080133b5 	.word	0x080133b5
 80133a8:	080133d7 	.word	0x080133d7
 80133ac:	08013405 	.word	0x08013405

  case 0:
    return 0;       /* initial nondigit */
 80133b0:	2300      	movs	r3, #0
 80133b2:	e056      	b.n	8013462 <ip4addr_aton+0x26a>

  case 1:             /* a -- 32 bits */
    break;

  case 2:             /* a.b -- 8.24 bits */
    if (val > 0xffffffUL) {
 80133b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80133ba:	d301      	bcc.n	80133c0 <ip4addr_aton+0x1c8>
      return 0;
 80133bc:	2300      	movs	r3, #0
 80133be:	e050      	b.n	8013462 <ip4addr_aton+0x26a>
    }
    if (parts[0] > 0xff) {
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	2bff      	cmp	r3, #255	; 0xff
 80133c4:	d901      	bls.n	80133ca <ip4addr_aton+0x1d2>
      return 0;
 80133c6:	2300      	movs	r3, #0
 80133c8:	e04b      	b.n	8013462 <ip4addr_aton+0x26a>
    }
    val |= parts[0] << 24;
 80133ca:	68fb      	ldr	r3, [r7, #12]
 80133cc:	061b      	lsls	r3, r3, #24
 80133ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80133d0:	4313      	orrs	r3, r2
 80133d2:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 80133d4:	e03b      	b.n	801344e <ip4addr_aton+0x256>

  case 3:             /* a.b.c -- 8.8.16 bits */
    if (val > 0xffff) {
 80133d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80133dc:	d301      	bcc.n	80133e2 <ip4addr_aton+0x1ea>
      return 0;
 80133de:	2300      	movs	r3, #0
 80133e0:	e03f      	b.n	8013462 <ip4addr_aton+0x26a>
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 80133e2:	68fb      	ldr	r3, [r7, #12]
 80133e4:	2bff      	cmp	r3, #255	; 0xff
 80133e6:	d802      	bhi.n	80133ee <ip4addr_aton+0x1f6>
 80133e8:	693b      	ldr	r3, [r7, #16]
 80133ea:	2bff      	cmp	r3, #255	; 0xff
 80133ec:	d901      	bls.n	80133f2 <ip4addr_aton+0x1fa>
      return 0;
 80133ee:	2300      	movs	r3, #0
 80133f0:	e037      	b.n	8013462 <ip4addr_aton+0x26a>
    }
    val |= (parts[0] << 24) | (parts[1] << 16);
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	061a      	lsls	r2, r3, #24
 80133f6:	693b      	ldr	r3, [r7, #16]
 80133f8:	041b      	lsls	r3, r3, #16
 80133fa:	4313      	orrs	r3, r2
 80133fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80133fe:	4313      	orrs	r3, r2
 8013400:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8013402:	e024      	b.n	801344e <ip4addr_aton+0x256>

  case 4:             /* a.b.c.d -- 8.8.8.8 bits */
    if (val > 0xff) {
 8013404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013406:	2bff      	cmp	r3, #255	; 0xff
 8013408:	d901      	bls.n	801340e <ip4addr_aton+0x216>
      return 0;
 801340a:	2300      	movs	r3, #0
 801340c:	e029      	b.n	8013462 <ip4addr_aton+0x26a>
    }
    if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	2bff      	cmp	r3, #255	; 0xff
 8013412:	d805      	bhi.n	8013420 <ip4addr_aton+0x228>
 8013414:	693b      	ldr	r3, [r7, #16]
 8013416:	2bff      	cmp	r3, #255	; 0xff
 8013418:	d802      	bhi.n	8013420 <ip4addr_aton+0x228>
 801341a:	697b      	ldr	r3, [r7, #20]
 801341c:	2bff      	cmp	r3, #255	; 0xff
 801341e:	d901      	bls.n	8013424 <ip4addr_aton+0x22c>
      return 0;
 8013420:	2300      	movs	r3, #0
 8013422:	e01e      	b.n	8013462 <ip4addr_aton+0x26a>
    }
    val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	061a      	lsls	r2, r3, #24
 8013428:	693b      	ldr	r3, [r7, #16]
 801342a:	041b      	lsls	r3, r3, #16
 801342c:	431a      	orrs	r2, r3
 801342e:	697b      	ldr	r3, [r7, #20]
 8013430:	021b      	lsls	r3, r3, #8
 8013432:	4313      	orrs	r3, r2
 8013434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013436:	4313      	orrs	r3, r2
 8013438:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 801343a:	e008      	b.n	801344e <ip4addr_aton+0x256>
  default:
    LWIP_ASSERT("unhandled", 0);
 801343c:	4b0b      	ldr	r3, [pc, #44]	; (801346c <ip4addr_aton+0x274>)
 801343e:	f240 1203 	movw	r2, #259	; 0x103
 8013442:	490b      	ldr	r1, [pc, #44]	; (8013470 <ip4addr_aton+0x278>)
 8013444:	480b      	ldr	r0, [pc, #44]	; (8013474 <ip4addr_aton+0x27c>)
 8013446:	f007 f969 	bl	801a71c <iprintf>
    break;
 801344a:	e000      	b.n	801344e <ip4addr_aton+0x256>
    break;
 801344c:	bf00      	nop
  }
  if (addr) {
 801344e:	683b      	ldr	r3, [r7, #0]
 8013450:	2b00      	cmp	r3, #0
 8013452:	d005      	beq.n	8013460 <ip4addr_aton+0x268>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8013454:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013456:	f7f5 faf6 	bl	8008a46 <lwip_htonl>
 801345a:	4602      	mov	r2, r0
 801345c:	683b      	ldr	r3, [r7, #0]
 801345e:	601a      	str	r2, [r3, #0]
  }
  return 1;
 8013460:	2301      	movs	r3, #1
}
 8013462:	4618      	mov	r0, r3
 8013464:	3728      	adds	r7, #40	; 0x28
 8013466:	46bd      	mov	sp, r7
 8013468:	bd80      	pop	{r7, pc}
 801346a:	bf00      	nop
 801346c:	080201c4 	.word	0x080201c4
 8013470:	08020200 	.word	0x08020200
 8013474:	0802020c 	.word	0x0802020c

08013478 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8013478:	b580      	push	{r7, lr}
 801347a:	b084      	sub	sp, #16
 801347c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801347e:	2300      	movs	r3, #0
 8013480:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8013482:	4b12      	ldr	r3, [pc, #72]	; (80134cc <ip_reass_tmr+0x54>)
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8013488:	e018      	b.n	80134bc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801348a:	68fb      	ldr	r3, [r7, #12]
 801348c:	7fdb      	ldrb	r3, [r3, #31]
 801348e:	2b00      	cmp	r3, #0
 8013490:	d00b      	beq.n	80134aa <ip_reass_tmr+0x32>
      r->timer--;
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	7fdb      	ldrb	r3, [r3, #31]
 8013496:	3b01      	subs	r3, #1
 8013498:	b2da      	uxtb	r2, r3
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	681b      	ldr	r3, [r3, #0]
 80134a6:	60fb      	str	r3, [r7, #12]
 80134a8:	e008      	b.n	80134bc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	681b      	ldr	r3, [r3, #0]
 80134b2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80134b4:	68b9      	ldr	r1, [r7, #8]
 80134b6:	6878      	ldr	r0, [r7, #4]
 80134b8:	f000 f80a 	bl	80134d0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d1e3      	bne.n	801348a <ip_reass_tmr+0x12>
     }
   }
}
 80134c2:	bf00      	nop
 80134c4:	3710      	adds	r7, #16
 80134c6:	46bd      	mov	sp, r7
 80134c8:	bd80      	pop	{r7, pc}
 80134ca:	bf00      	nop
 80134cc:	20004d40 	.word	0x20004d40

080134d0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80134d0:	b580      	push	{r7, lr}
 80134d2:	b088      	sub	sp, #32
 80134d4:	af00      	add	r7, sp, #0
 80134d6:	6078      	str	r0, [r7, #4]
 80134d8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80134da:	2300      	movs	r3, #0
 80134dc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80134de:	683a      	ldr	r2, [r7, #0]
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	429a      	cmp	r2, r3
 80134e4:	d105      	bne.n	80134f2 <ip_reass_free_complete_datagram+0x22>
 80134e6:	4b45      	ldr	r3, [pc, #276]	; (80135fc <ip_reass_free_complete_datagram+0x12c>)
 80134e8:	22ab      	movs	r2, #171	; 0xab
 80134ea:	4945      	ldr	r1, [pc, #276]	; (8013600 <ip_reass_free_complete_datagram+0x130>)
 80134ec:	4845      	ldr	r0, [pc, #276]	; (8013604 <ip_reass_free_complete_datagram+0x134>)
 80134ee:	f007 f915 	bl	801a71c <iprintf>
  if (prev != NULL) {
 80134f2:	683b      	ldr	r3, [r7, #0]
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d00a      	beq.n	801350e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80134f8:	683b      	ldr	r3, [r7, #0]
 80134fa:	681b      	ldr	r3, [r3, #0]
 80134fc:	687a      	ldr	r2, [r7, #4]
 80134fe:	429a      	cmp	r2, r3
 8013500:	d005      	beq.n	801350e <ip_reass_free_complete_datagram+0x3e>
 8013502:	4b3e      	ldr	r3, [pc, #248]	; (80135fc <ip_reass_free_complete_datagram+0x12c>)
 8013504:	22ad      	movs	r2, #173	; 0xad
 8013506:	4940      	ldr	r1, [pc, #256]	; (8013608 <ip_reass_free_complete_datagram+0x138>)
 8013508:	483e      	ldr	r0, [pc, #248]	; (8013604 <ip_reass_free_complete_datagram+0x134>)
 801350a:	f007 f907 	bl	801a71c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	685b      	ldr	r3, [r3, #4]
 8013512:	685b      	ldr	r3, [r3, #4]
 8013514:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8013516:	697b      	ldr	r3, [r7, #20]
 8013518:	889b      	ldrh	r3, [r3, #4]
 801351a:	b29b      	uxth	r3, r3
 801351c:	2b00      	cmp	r3, #0
 801351e:	d12a      	bne.n	8013576 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	685b      	ldr	r3, [r3, #4]
 8013524:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8013526:	697b      	ldr	r3, [r7, #20]
 8013528:	681a      	ldr	r2, [r3, #0]
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801352e:	69bb      	ldr	r3, [r7, #24]
 8013530:	6858      	ldr	r0, [r3, #4]
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	3308      	adds	r3, #8
 8013536:	2214      	movs	r2, #20
 8013538:	4619      	mov	r1, r3
 801353a:	f006 faac 	bl	8019a96 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801353e:	2101      	movs	r1, #1
 8013540:	69b8      	ldr	r0, [r7, #24]
 8013542:	f7ff fb09 	bl	8012b58 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8013546:	69b8      	ldr	r0, [r7, #24]
 8013548:	f7f6 ffc8 	bl	800a4dc <pbuf_clen>
 801354c:	4603      	mov	r3, r0
 801354e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013550:	8bfa      	ldrh	r2, [r7, #30]
 8013552:	8a7b      	ldrh	r3, [r7, #18]
 8013554:	4413      	add	r3, r2
 8013556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801355a:	db05      	blt.n	8013568 <ip_reass_free_complete_datagram+0x98>
 801355c:	4b27      	ldr	r3, [pc, #156]	; (80135fc <ip_reass_free_complete_datagram+0x12c>)
 801355e:	22bc      	movs	r2, #188	; 0xbc
 8013560:	492a      	ldr	r1, [pc, #168]	; (801360c <ip_reass_free_complete_datagram+0x13c>)
 8013562:	4828      	ldr	r0, [pc, #160]	; (8013604 <ip_reass_free_complete_datagram+0x134>)
 8013564:	f007 f8da 	bl	801a71c <iprintf>
    pbufs_freed += clen;
 8013568:	8bfa      	ldrh	r2, [r7, #30]
 801356a:	8a7b      	ldrh	r3, [r7, #18]
 801356c:	4413      	add	r3, r2
 801356e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8013570:	69b8      	ldr	r0, [r7, #24]
 8013572:	f7f6 ff19 	bl	800a3a8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	685b      	ldr	r3, [r3, #4]
 801357a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801357c:	e01f      	b.n	80135be <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801357e:	69bb      	ldr	r3, [r7, #24]
 8013580:	685b      	ldr	r3, [r3, #4]
 8013582:	617b      	str	r3, [r7, #20]
    pcur = p;
 8013584:	69bb      	ldr	r3, [r7, #24]
 8013586:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8013588:	697b      	ldr	r3, [r7, #20]
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801358e:	68f8      	ldr	r0, [r7, #12]
 8013590:	f7f6 ffa4 	bl	800a4dc <pbuf_clen>
 8013594:	4603      	mov	r3, r0
 8013596:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013598:	8bfa      	ldrh	r2, [r7, #30]
 801359a:	8a7b      	ldrh	r3, [r7, #18]
 801359c:	4413      	add	r3, r2
 801359e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80135a2:	db05      	blt.n	80135b0 <ip_reass_free_complete_datagram+0xe0>
 80135a4:	4b15      	ldr	r3, [pc, #84]	; (80135fc <ip_reass_free_complete_datagram+0x12c>)
 80135a6:	22cc      	movs	r2, #204	; 0xcc
 80135a8:	4918      	ldr	r1, [pc, #96]	; (801360c <ip_reass_free_complete_datagram+0x13c>)
 80135aa:	4816      	ldr	r0, [pc, #88]	; (8013604 <ip_reass_free_complete_datagram+0x134>)
 80135ac:	f007 f8b6 	bl	801a71c <iprintf>
    pbufs_freed += clen;
 80135b0:	8bfa      	ldrh	r2, [r7, #30]
 80135b2:	8a7b      	ldrh	r3, [r7, #18]
 80135b4:	4413      	add	r3, r2
 80135b6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80135b8:	68f8      	ldr	r0, [r7, #12]
 80135ba:	f7f6 fef5 	bl	800a3a8 <pbuf_free>
  while (p != NULL) {
 80135be:	69bb      	ldr	r3, [r7, #24]
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d1dc      	bne.n	801357e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80135c4:	6839      	ldr	r1, [r7, #0]
 80135c6:	6878      	ldr	r0, [r7, #4]
 80135c8:	f000 f8c2 	bl	8013750 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 80135cc:	4b10      	ldr	r3, [pc, #64]	; (8013610 <ip_reass_free_complete_datagram+0x140>)
 80135ce:	881b      	ldrh	r3, [r3, #0]
 80135d0:	8bfa      	ldrh	r2, [r7, #30]
 80135d2:	429a      	cmp	r2, r3
 80135d4:	d905      	bls.n	80135e2 <ip_reass_free_complete_datagram+0x112>
 80135d6:	4b09      	ldr	r3, [pc, #36]	; (80135fc <ip_reass_free_complete_datagram+0x12c>)
 80135d8:	22d2      	movs	r2, #210	; 0xd2
 80135da:	490e      	ldr	r1, [pc, #56]	; (8013614 <ip_reass_free_complete_datagram+0x144>)
 80135dc:	4809      	ldr	r0, [pc, #36]	; (8013604 <ip_reass_free_complete_datagram+0x134>)
 80135de:	f007 f89d 	bl	801a71c <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 80135e2:	4b0b      	ldr	r3, [pc, #44]	; (8013610 <ip_reass_free_complete_datagram+0x140>)
 80135e4:	881a      	ldrh	r2, [r3, #0]
 80135e6:	8bfb      	ldrh	r3, [r7, #30]
 80135e8:	1ad3      	subs	r3, r2, r3
 80135ea:	b29a      	uxth	r2, r3
 80135ec:	4b08      	ldr	r3, [pc, #32]	; (8013610 <ip_reass_free_complete_datagram+0x140>)
 80135ee:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80135f0:	8bfb      	ldrh	r3, [r7, #30]
}
 80135f2:	4618      	mov	r0, r3
 80135f4:	3720      	adds	r7, #32
 80135f6:	46bd      	mov	sp, r7
 80135f8:	bd80      	pop	{r7, pc}
 80135fa:	bf00      	nop
 80135fc:	08020234 	.word	0x08020234
 8013600:	08020270 	.word	0x08020270
 8013604:	0802027c 	.word	0x0802027c
 8013608:	080202a4 	.word	0x080202a4
 801360c:	080202b8 	.word	0x080202b8
 8013610:	20004d44 	.word	0x20004d44
 8013614:	080202d8 	.word	0x080202d8

08013618 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8013618:	b580      	push	{r7, lr}
 801361a:	b08a      	sub	sp, #40	; 0x28
 801361c:	af00      	add	r7, sp, #0
 801361e:	6078      	str	r0, [r7, #4]
 8013620:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8013622:	2300      	movs	r3, #0
 8013624:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8013626:	2300      	movs	r3, #0
 8013628:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801362a:	2300      	movs	r3, #0
 801362c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801362e:	2300      	movs	r3, #0
 8013630:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8013632:	2300      	movs	r3, #0
 8013634:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8013636:	4b28      	ldr	r3, [pc, #160]	; (80136d8 <ip_reass_remove_oldest_datagram+0xc0>)
 8013638:	681b      	ldr	r3, [r3, #0]
 801363a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801363c:	e030      	b.n	80136a0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013640:	695a      	ldr	r2, [r3, #20]
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	68db      	ldr	r3, [r3, #12]
 8013646:	429a      	cmp	r2, r3
 8013648:	d10c      	bne.n	8013664 <ip_reass_remove_oldest_datagram+0x4c>
 801364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801364c:	699a      	ldr	r2, [r3, #24]
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	691b      	ldr	r3, [r3, #16]
 8013652:	429a      	cmp	r2, r3
 8013654:	d106      	bne.n	8013664 <ip_reass_remove_oldest_datagram+0x4c>
 8013656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013658:	899a      	ldrh	r2, [r3, #12]
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	889b      	ldrh	r3, [r3, #4]
 801365e:	b29b      	uxth	r3, r3
 8013660:	429a      	cmp	r2, r3
 8013662:	d014      	beq.n	801368e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8013664:	693b      	ldr	r3, [r7, #16]
 8013666:	3301      	adds	r3, #1
 8013668:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801366a:	6a3b      	ldr	r3, [r7, #32]
 801366c:	2b00      	cmp	r3, #0
 801366e:	d104      	bne.n	801367a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8013670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013672:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013674:	69fb      	ldr	r3, [r7, #28]
 8013676:	61bb      	str	r3, [r7, #24]
 8013678:	e009      	b.n	801368e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801367a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801367c:	7fda      	ldrb	r2, [r3, #31]
 801367e:	6a3b      	ldr	r3, [r7, #32]
 8013680:	7fdb      	ldrb	r3, [r3, #31]
 8013682:	429a      	cmp	r2, r3
 8013684:	d803      	bhi.n	801368e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8013686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013688:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801368a:	69fb      	ldr	r3, [r7, #28]
 801368c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801368e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	2b00      	cmp	r3, #0
 8013694:	d001      	beq.n	801369a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8013696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013698:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80136a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d1cb      	bne.n	801363e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80136a6:	6a3b      	ldr	r3, [r7, #32]
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d008      	beq.n	80136be <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80136ac:	69b9      	ldr	r1, [r7, #24]
 80136ae:	6a38      	ldr	r0, [r7, #32]
 80136b0:	f7ff ff0e 	bl	80134d0 <ip_reass_free_complete_datagram>
 80136b4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80136b6:	697a      	ldr	r2, [r7, #20]
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	4413      	add	r3, r2
 80136bc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80136be:	697a      	ldr	r2, [r7, #20]
 80136c0:	683b      	ldr	r3, [r7, #0]
 80136c2:	429a      	cmp	r2, r3
 80136c4:	da02      	bge.n	80136cc <ip_reass_remove_oldest_datagram+0xb4>
 80136c6:	693b      	ldr	r3, [r7, #16]
 80136c8:	2b01      	cmp	r3, #1
 80136ca:	dcac      	bgt.n	8013626 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80136cc:	697b      	ldr	r3, [r7, #20]
}
 80136ce:	4618      	mov	r0, r3
 80136d0:	3728      	adds	r7, #40	; 0x28
 80136d2:	46bd      	mov	sp, r7
 80136d4:	bd80      	pop	{r7, pc}
 80136d6:	bf00      	nop
 80136d8:	20004d40 	.word	0x20004d40

080136dc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80136dc:	b580      	push	{r7, lr}
 80136de:	b084      	sub	sp, #16
 80136e0:	af00      	add	r7, sp, #0
 80136e2:	6078      	str	r0, [r7, #4]
 80136e4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80136e6:	2004      	movs	r0, #4
 80136e8:	f7f6 f850 	bl	800978c <memp_malloc>
 80136ec:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d110      	bne.n	8013716 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80136f4:	6839      	ldr	r1, [r7, #0]
 80136f6:	6878      	ldr	r0, [r7, #4]
 80136f8:	f7ff ff8e 	bl	8013618 <ip_reass_remove_oldest_datagram>
 80136fc:	4602      	mov	r2, r0
 80136fe:	683b      	ldr	r3, [r7, #0]
 8013700:	4293      	cmp	r3, r2
 8013702:	dc03      	bgt.n	801370c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013704:	2004      	movs	r0, #4
 8013706:	f7f6 f841 	bl	800978c <memp_malloc>
 801370a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801370c:	68fb      	ldr	r3, [r7, #12]
 801370e:	2b00      	cmp	r3, #0
 8013710:	d101      	bne.n	8013716 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 8013712:	2300      	movs	r3, #0
 8013714:	e016      	b.n	8013744 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8013716:	2220      	movs	r2, #32
 8013718:	2100      	movs	r1, #0
 801371a:	68f8      	ldr	r0, [r7, #12]
 801371c:	f006 f9c6 	bl	8019aac <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8013720:	68fb      	ldr	r3, [r7, #12]
 8013722:	2203      	movs	r2, #3
 8013724:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8013726:	4b09      	ldr	r3, [pc, #36]	; (801374c <ip_reass_enqueue_new_datagram+0x70>)
 8013728:	681a      	ldr	r2, [r3, #0]
 801372a:	68fb      	ldr	r3, [r7, #12]
 801372c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801372e:	4a07      	ldr	r2, [pc, #28]	; (801374c <ip_reass_enqueue_new_datagram+0x70>)
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8013734:	68fb      	ldr	r3, [r7, #12]
 8013736:	3308      	adds	r3, #8
 8013738:	2214      	movs	r2, #20
 801373a:	6879      	ldr	r1, [r7, #4]
 801373c:	4618      	mov	r0, r3
 801373e:	f006 f9aa 	bl	8019a96 <memcpy>
  return ipr;
 8013742:	68fb      	ldr	r3, [r7, #12]
}
 8013744:	4618      	mov	r0, r3
 8013746:	3710      	adds	r7, #16
 8013748:	46bd      	mov	sp, r7
 801374a:	bd80      	pop	{r7, pc}
 801374c:	20004d40 	.word	0x20004d40

08013750 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013750:	b580      	push	{r7, lr}
 8013752:	b082      	sub	sp, #8
 8013754:	af00      	add	r7, sp, #0
 8013756:	6078      	str	r0, [r7, #4]
 8013758:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801375a:	4b10      	ldr	r3, [pc, #64]	; (801379c <ip_reass_dequeue_datagram+0x4c>)
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	687a      	ldr	r2, [r7, #4]
 8013760:	429a      	cmp	r2, r3
 8013762:	d104      	bne.n	801376e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	681b      	ldr	r3, [r3, #0]
 8013768:	4a0c      	ldr	r2, [pc, #48]	; (801379c <ip_reass_dequeue_datagram+0x4c>)
 801376a:	6013      	str	r3, [r2, #0]
 801376c:	e00d      	b.n	801378a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801376e:	683b      	ldr	r3, [r7, #0]
 8013770:	2b00      	cmp	r3, #0
 8013772:	d106      	bne.n	8013782 <ip_reass_dequeue_datagram+0x32>
 8013774:	4b0a      	ldr	r3, [pc, #40]	; (80137a0 <ip_reass_dequeue_datagram+0x50>)
 8013776:	f240 1245 	movw	r2, #325	; 0x145
 801377a:	490a      	ldr	r1, [pc, #40]	; (80137a4 <ip_reass_dequeue_datagram+0x54>)
 801377c:	480a      	ldr	r0, [pc, #40]	; (80137a8 <ip_reass_dequeue_datagram+0x58>)
 801377e:	f006 ffcd 	bl	801a71c <iprintf>
    prev->next = ipr->next;
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	681a      	ldr	r2, [r3, #0]
 8013786:	683b      	ldr	r3, [r7, #0]
 8013788:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801378a:	6879      	ldr	r1, [r7, #4]
 801378c:	2004      	movs	r0, #4
 801378e:	f7f6 f84f 	bl	8009830 <memp_free>
}
 8013792:	bf00      	nop
 8013794:	3708      	adds	r7, #8
 8013796:	46bd      	mov	sp, r7
 8013798:	bd80      	pop	{r7, pc}
 801379a:	bf00      	nop
 801379c:	20004d40 	.word	0x20004d40
 80137a0:	08020234 	.word	0x08020234
 80137a4:	080202f4 	.word	0x080202f4
 80137a8:	0802027c 	.word	0x0802027c

080137ac <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80137ac:	b580      	push	{r7, lr}
 80137ae:	b08c      	sub	sp, #48	; 0x30
 80137b0:	af00      	add	r7, sp, #0
 80137b2:	60f8      	str	r0, [r7, #12]
 80137b4:	60b9      	str	r1, [r7, #8]
 80137b6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 80137b8:	2300      	movs	r3, #0
 80137ba:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80137bc:	2301      	movs	r3, #1
 80137be:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 80137c0:	68bb      	ldr	r3, [r7, #8]
 80137c2:	685b      	ldr	r3, [r3, #4]
 80137c4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 80137c6:	69fb      	ldr	r3, [r7, #28]
 80137c8:	885b      	ldrh	r3, [r3, #2]
 80137ca:	b29b      	uxth	r3, r3
 80137cc:	4618      	mov	r0, r3
 80137ce:	f7f5 f92d 	bl	8008a2c <lwip_htons>
 80137d2:	4603      	mov	r3, r0
 80137d4:	461a      	mov	r2, r3
 80137d6:	69fb      	ldr	r3, [r7, #28]
 80137d8:	781b      	ldrb	r3, [r3, #0]
 80137da:	b29b      	uxth	r3, r3
 80137dc:	f003 030f 	and.w	r3, r3, #15
 80137e0:	b29b      	uxth	r3, r3
 80137e2:	009b      	lsls	r3, r3, #2
 80137e4:	b29b      	uxth	r3, r3
 80137e6:	1ad3      	subs	r3, r2, r3
 80137e8:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 80137ea:	69fb      	ldr	r3, [r7, #28]
 80137ec:	88db      	ldrh	r3, [r3, #6]
 80137ee:	b29b      	uxth	r3, r3
 80137f0:	4618      	mov	r0, r3
 80137f2:	f7f5 f91b 	bl	8008a2c <lwip_htons>
 80137f6:	4603      	mov	r3, r0
 80137f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80137fc:	b29b      	uxth	r3, r3
 80137fe:	00db      	lsls	r3, r3, #3
 8013800:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 8013802:	68bb      	ldr	r3, [r7, #8]
 8013804:	685b      	ldr	r3, [r3, #4]
 8013806:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8013808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801380a:	2200      	movs	r2, #0
 801380c:	701a      	strb	r2, [r3, #0]
 801380e:	2200      	movs	r2, #0
 8013810:	705a      	strb	r2, [r3, #1]
 8013812:	2200      	movs	r2, #0
 8013814:	709a      	strb	r2, [r3, #2]
 8013816:	2200      	movs	r2, #0
 8013818:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801381a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801381c:	8b3a      	ldrh	r2, [r7, #24]
 801381e:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 8013820:	8b3a      	ldrh	r2, [r7, #24]
 8013822:	8b7b      	ldrh	r3, [r7, #26]
 8013824:	4413      	add	r3, r2
 8013826:	b29a      	uxth	r2, r3
 8013828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801382a:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801382c:	68fb      	ldr	r3, [r7, #12]
 801382e:	685b      	ldr	r3, [r3, #4]
 8013830:	627b      	str	r3, [r7, #36]	; 0x24
 8013832:	e061      	b.n	80138f8 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8013834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013836:	685b      	ldr	r3, [r3, #4]
 8013838:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 801383a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801383c:	889b      	ldrh	r3, [r3, #4]
 801383e:	b29a      	uxth	r2, r3
 8013840:	697b      	ldr	r3, [r7, #20]
 8013842:	889b      	ldrh	r3, [r3, #4]
 8013844:	b29b      	uxth	r3, r3
 8013846:	429a      	cmp	r2, r3
 8013848:	d232      	bcs.n	80138b0 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801384a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801384c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801384e:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8013850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013852:	2b00      	cmp	r3, #0
 8013854:	d01f      	beq.n	8013896 <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8013856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013858:	889b      	ldrh	r3, [r3, #4]
 801385a:	b29a      	uxth	r2, r3
 801385c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801385e:	88db      	ldrh	r3, [r3, #6]
 8013860:	b29b      	uxth	r3, r3
 8013862:	429a      	cmp	r2, r3
 8013864:	f0c0 80e3 	bcc.w	8013a2e <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 8013868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801386a:	88db      	ldrh	r3, [r3, #6]
 801386c:	b29a      	uxth	r2, r3
 801386e:	697b      	ldr	r3, [r7, #20]
 8013870:	889b      	ldrh	r3, [r3, #4]
 8013872:	b29b      	uxth	r3, r3
 8013874:	429a      	cmp	r2, r3
 8013876:	f200 80da 	bhi.w	8013a2e <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801387a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801387c:	68ba      	ldr	r2, [r7, #8]
 801387e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8013880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013882:	88db      	ldrh	r3, [r3, #6]
 8013884:	b29a      	uxth	r2, r3
 8013886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013888:	889b      	ldrh	r3, [r3, #4]
 801388a:	b29b      	uxth	r3, r3
 801388c:	429a      	cmp	r2, r3
 801388e:	d037      	beq.n	8013900 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013890:	2300      	movs	r3, #0
 8013892:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8013894:	e034      	b.n	8013900 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 8013896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013898:	88db      	ldrh	r3, [r3, #6]
 801389a:	b29a      	uxth	r2, r3
 801389c:	697b      	ldr	r3, [r7, #20]
 801389e:	889b      	ldrh	r3, [r3, #4]
 80138a0:	b29b      	uxth	r3, r3
 80138a2:	429a      	cmp	r2, r3
 80138a4:	f200 80c5 	bhi.w	8013a32 <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 80138a8:	68fb      	ldr	r3, [r7, #12]
 80138aa:	68ba      	ldr	r2, [r7, #8]
 80138ac:	605a      	str	r2, [r3, #4]
      break;
 80138ae:	e027      	b.n	8013900 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 80138b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138b2:	889b      	ldrh	r3, [r3, #4]
 80138b4:	b29a      	uxth	r2, r3
 80138b6:	697b      	ldr	r3, [r7, #20]
 80138b8:	889b      	ldrh	r3, [r3, #4]
 80138ba:	b29b      	uxth	r3, r3
 80138bc:	429a      	cmp	r2, r3
 80138be:	f000 80ba 	beq.w	8013a36 <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80138c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138c4:	889b      	ldrh	r3, [r3, #4]
 80138c6:	b29a      	uxth	r2, r3
 80138c8:	697b      	ldr	r3, [r7, #20]
 80138ca:	88db      	ldrh	r3, [r3, #6]
 80138cc:	b29b      	uxth	r3, r3
 80138ce:	429a      	cmp	r2, r3
 80138d0:	f0c0 80b3 	bcc.w	8013a3a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80138d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d009      	beq.n	80138ee <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 80138da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138dc:	88db      	ldrh	r3, [r3, #6]
 80138de:	b29a      	uxth	r2, r3
 80138e0:	697b      	ldr	r3, [r7, #20]
 80138e2:	889b      	ldrh	r3, [r3, #4]
 80138e4:	b29b      	uxth	r3, r3
 80138e6:	429a      	cmp	r2, r3
 80138e8:	d001      	beq.n	80138ee <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80138ea:	2300      	movs	r3, #0
 80138ec:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80138ee:	697b      	ldr	r3, [r7, #20]
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80138f4:	697b      	ldr	r3, [r7, #20]
 80138f6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80138f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d19a      	bne.n	8013834 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 80138fe:	e000      	b.n	8013902 <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 8013900:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8013902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013904:	2b00      	cmp	r3, #0
 8013906:	d12d      	bne.n	8013964 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 8013908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801390a:	2b00      	cmp	r3, #0
 801390c:	d01c      	beq.n	8013948 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801390e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013910:	88db      	ldrh	r3, [r3, #6]
 8013912:	b29a      	uxth	r2, r3
 8013914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013916:	889b      	ldrh	r3, [r3, #4]
 8013918:	b29b      	uxth	r3, r3
 801391a:	429a      	cmp	r2, r3
 801391c:	d906      	bls.n	801392c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 801391e:	4b51      	ldr	r3, [pc, #324]	; (8013a64 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8013920:	f240 12ab 	movw	r2, #427	; 0x1ab
 8013924:	4950      	ldr	r1, [pc, #320]	; (8013a68 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013926:	4851      	ldr	r0, [pc, #324]	; (8013a6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8013928:	f006 fef8 	bl	801a71c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801392c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801392e:	68ba      	ldr	r2, [r7, #8]
 8013930:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8013932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013934:	88db      	ldrh	r3, [r3, #6]
 8013936:	b29a      	uxth	r2, r3
 8013938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801393a:	889b      	ldrh	r3, [r3, #4]
 801393c:	b29b      	uxth	r3, r3
 801393e:	429a      	cmp	r2, r3
 8013940:	d010      	beq.n	8013964 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 8013942:	2300      	movs	r3, #0
 8013944:	623b      	str	r3, [r7, #32]
 8013946:	e00d      	b.n	8013964 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8013948:	68fb      	ldr	r3, [r7, #12]
 801394a:	685b      	ldr	r3, [r3, #4]
 801394c:	2b00      	cmp	r3, #0
 801394e:	d006      	beq.n	801395e <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 8013950:	4b44      	ldr	r3, [pc, #272]	; (8013a64 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8013952:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 8013956:	4946      	ldr	r1, [pc, #280]	; (8013a70 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013958:	4844      	ldr	r0, [pc, #272]	; (8013a6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801395a:	f006 fedf 	bl	801a71c <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801395e:	68fb      	ldr	r3, [r7, #12]
 8013960:	68ba      	ldr	r2, [r7, #8]
 8013962:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	2b00      	cmp	r3, #0
 8013968:	d105      	bne.n	8013976 <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 801396a:	68fb      	ldr	r3, [r7, #12]
 801396c:	7f9b      	ldrb	r3, [r3, #30]
 801396e:	f003 0301 	and.w	r3, r3, #1
 8013972:	2b00      	cmp	r3, #0
 8013974:	d059      	beq.n	8013a2a <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 8013976:	6a3b      	ldr	r3, [r7, #32]
 8013978:	2b00      	cmp	r3, #0
 801397a:	d04f      	beq.n	8013a1c <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	685b      	ldr	r3, [r3, #4]
 8013980:	2b00      	cmp	r3, #0
 8013982:	d006      	beq.n	8013992 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8013984:	68fb      	ldr	r3, [r7, #12]
 8013986:	685b      	ldr	r3, [r3, #4]
 8013988:	685b      	ldr	r3, [r3, #4]
 801398a:	889b      	ldrh	r3, [r3, #4]
 801398c:	b29b      	uxth	r3, r3
 801398e:	2b00      	cmp	r3, #0
 8013990:	d002      	beq.n	8013998 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8013992:	2300      	movs	r3, #0
 8013994:	623b      	str	r3, [r7, #32]
 8013996:	e041      	b.n	8013a1c <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8013998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801399a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801399c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80139a2:	e012      	b.n	80139ca <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 80139a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139a6:	685b      	ldr	r3, [r3, #4]
 80139a8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80139aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139ac:	88db      	ldrh	r3, [r3, #6]
 80139ae:	b29a      	uxth	r2, r3
 80139b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139b2:	889b      	ldrh	r3, [r3, #4]
 80139b4:	b29b      	uxth	r3, r3
 80139b6:	429a      	cmp	r2, r3
 80139b8:	d002      	beq.n	80139c0 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 80139ba:	2300      	movs	r3, #0
 80139bc:	623b      	str	r3, [r7, #32]
            break;
 80139be:	e007      	b.n	80139d0 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 80139c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139c2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80139c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139c6:	681b      	ldr	r3, [r3, #0]
 80139c8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80139ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d1e9      	bne.n	80139a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80139d0:	6a3b      	ldr	r3, [r7, #32]
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d022      	beq.n	8013a1c <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	685b      	ldr	r3, [r3, #4]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d106      	bne.n	80139ec <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 80139de:	4b21      	ldr	r3, [pc, #132]	; (8013a64 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80139e0:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 80139e4:	4923      	ldr	r1, [pc, #140]	; (8013a74 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80139e6:	4821      	ldr	r0, [pc, #132]	; (8013a6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80139e8:	f006 fe98 	bl	801a71c <iprintf>
          LWIP_ASSERT("sanity check",
 80139ec:	68fb      	ldr	r3, [r7, #12]
 80139ee:	685b      	ldr	r3, [r3, #4]
 80139f0:	685b      	ldr	r3, [r3, #4]
 80139f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80139f4:	429a      	cmp	r2, r3
 80139f6:	d106      	bne.n	8013a06 <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 80139f8:	4b1a      	ldr	r3, [pc, #104]	; (8013a64 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80139fa:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 80139fe:	491d      	ldr	r1, [pc, #116]	; (8013a74 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8013a00:	481a      	ldr	r0, [pc, #104]	; (8013a6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8013a02:	f006 fe8b 	bl	801a71c <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8013a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a08:	681b      	ldr	r3, [r3, #0]
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d006      	beq.n	8013a1c <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 8013a0e:	4b15      	ldr	r3, [pc, #84]	; (8013a64 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8013a10:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8013a14:	4918      	ldr	r1, [pc, #96]	; (8013a78 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013a16:	4815      	ldr	r0, [pc, #84]	; (8013a6c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8013a18:	f006 fe80 	bl	801a71c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8013a1c:	6a3b      	ldr	r3, [r7, #32]
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	bf14      	ite	ne
 8013a22:	2301      	movne	r3, #1
 8013a24:	2300      	moveq	r3, #0
 8013a26:	b2db      	uxtb	r3, r3
 8013a28:	e018      	b.n	8013a5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8013a2a:	2300      	movs	r3, #0
 8013a2c:	e016      	b.n	8013a5c <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 8013a2e:	bf00      	nop
 8013a30:	e004      	b.n	8013a3c <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 8013a32:	bf00      	nop
 8013a34:	e002      	b.n	8013a3c <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8013a36:	bf00      	nop
 8013a38:	e000      	b.n	8013a3c <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 8013a3a:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8013a3c:	68b8      	ldr	r0, [r7, #8]
 8013a3e:	f7f6 fd4d 	bl	800a4dc <pbuf_clen>
 8013a42:	4603      	mov	r3, r0
 8013a44:	461a      	mov	r2, r3
 8013a46:	4b0d      	ldr	r3, [pc, #52]	; (8013a7c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8013a48:	881b      	ldrh	r3, [r3, #0]
 8013a4a:	1a9b      	subs	r3, r3, r2
 8013a4c:	b29a      	uxth	r2, r3
 8013a4e:	4b0b      	ldr	r3, [pc, #44]	; (8013a7c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8013a50:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 8013a52:	68b8      	ldr	r0, [r7, #8]
 8013a54:	f7f6 fca8 	bl	800a3a8 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013a58:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 8013a5c:	4618      	mov	r0, r3
 8013a5e:	3730      	adds	r7, #48	; 0x30
 8013a60:	46bd      	mov	sp, r7
 8013a62:	bd80      	pop	{r7, pc}
 8013a64:	08020234 	.word	0x08020234
 8013a68:	08020310 	.word	0x08020310
 8013a6c:	0802027c 	.word	0x0802027c
 8013a70:	08020330 	.word	0x08020330
 8013a74:	08020368 	.word	0x08020368
 8013a78:	08020378 	.word	0x08020378
 8013a7c:	20004d44 	.word	0x20004d44

08013a80 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8013a80:	b580      	push	{r7, lr}
 8013a82:	b08e      	sub	sp, #56	; 0x38
 8013a84:	af00      	add	r7, sp, #0
 8013a86:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	685b      	ldr	r3, [r3, #4]
 8013a8c:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8013a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a90:	781b      	ldrb	r3, [r3, #0]
 8013a92:	f003 030f 	and.w	r3, r3, #15
 8013a96:	009b      	lsls	r3, r3, #2
 8013a98:	2b14      	cmp	r3, #20
 8013a9a:	f040 8131 	bne.w	8013d00 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8013a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013aa0:	88db      	ldrh	r3, [r3, #6]
 8013aa2:	b29b      	uxth	r3, r3
 8013aa4:	4618      	mov	r0, r3
 8013aa6:	f7f4 ffc1 	bl	8008a2c <lwip_htons>
 8013aaa:	4603      	mov	r3, r0
 8013aac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013ab0:	b29b      	uxth	r3, r3
 8013ab2:	00db      	lsls	r3, r3, #3
 8013ab4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8013ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ab8:	885b      	ldrh	r3, [r3, #2]
 8013aba:	b29b      	uxth	r3, r3
 8013abc:	4618      	mov	r0, r3
 8013abe:	f7f4 ffb5 	bl	8008a2c <lwip_htons>
 8013ac2:	4603      	mov	r3, r0
 8013ac4:	461a      	mov	r2, r3
 8013ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ac8:	781b      	ldrb	r3, [r3, #0]
 8013aca:	b29b      	uxth	r3, r3
 8013acc:	f003 030f 	and.w	r3, r3, #15
 8013ad0:	b29b      	uxth	r3, r3
 8013ad2:	009b      	lsls	r3, r3, #2
 8013ad4:	b29b      	uxth	r3, r3
 8013ad6:	1ad3      	subs	r3, r2, r3
 8013ad8:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8013ada:	6878      	ldr	r0, [r7, #4]
 8013adc:	f7f6 fcfe 	bl	800a4dc <pbuf_clen>
 8013ae0:	4603      	mov	r3, r0
 8013ae2:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8013ae4:	4b8d      	ldr	r3, [pc, #564]	; (8013d1c <ip4_reass+0x29c>)
 8013ae6:	881b      	ldrh	r3, [r3, #0]
 8013ae8:	461a      	mov	r2, r3
 8013aea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013aec:	4413      	add	r3, r2
 8013aee:	2b0a      	cmp	r3, #10
 8013af0:	dd10      	ble.n	8013b14 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013af2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013af4:	4619      	mov	r1, r3
 8013af6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013af8:	f7ff fd8e 	bl	8013618 <ip_reass_remove_oldest_datagram>
 8013afc:	4603      	mov	r3, r0
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	f000 8100 	beq.w	8013d04 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8013b04:	4b85      	ldr	r3, [pc, #532]	; (8013d1c <ip4_reass+0x29c>)
 8013b06:	881b      	ldrh	r3, [r3, #0]
 8013b08:	461a      	mov	r2, r3
 8013b0a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013b0c:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013b0e:	2b0a      	cmp	r3, #10
 8013b10:	f300 80f8 	bgt.w	8013d04 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013b14:	4b82      	ldr	r3, [pc, #520]	; (8013d20 <ip4_reass+0x2a0>)
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	633b      	str	r3, [r7, #48]	; 0x30
 8013b1a:	e015      	b.n	8013b48 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8013b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b1e:	695a      	ldr	r2, [r3, #20]
 8013b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b22:	68db      	ldr	r3, [r3, #12]
 8013b24:	429a      	cmp	r2, r3
 8013b26:	d10c      	bne.n	8013b42 <ip4_reass+0xc2>
 8013b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b2a:	699a      	ldr	r2, [r3, #24]
 8013b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b2e:	691b      	ldr	r3, [r3, #16]
 8013b30:	429a      	cmp	r2, r3
 8013b32:	d106      	bne.n	8013b42 <ip4_reass+0xc2>
 8013b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b36:	899a      	ldrh	r2, [r3, #12]
 8013b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b3a:	889b      	ldrh	r3, [r3, #4]
 8013b3c:	b29b      	uxth	r3, r3
 8013b3e:	429a      	cmp	r2, r3
 8013b40:	d006      	beq.n	8013b50 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b44:	681b      	ldr	r3, [r3, #0]
 8013b46:	633b      	str	r3, [r7, #48]	; 0x30
 8013b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d1e6      	bne.n	8013b1c <ip4_reass+0x9c>
 8013b4e:	e000      	b.n	8013b52 <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8013b50:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8013b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d109      	bne.n	8013b6c <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8013b58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013b5a:	4619      	mov	r1, r3
 8013b5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013b5e:	f7ff fdbd 	bl	80136dc <ip_reass_enqueue_new_datagram>
 8013b62:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8013b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d11c      	bne.n	8013ba4 <ip4_reass+0x124>
      goto nullreturn;
 8013b6a:	e0ce      	b.n	8013d0a <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b6e:	88db      	ldrh	r3, [r3, #6]
 8013b70:	b29b      	uxth	r3, r3
 8013b72:	4618      	mov	r0, r3
 8013b74:	f7f4 ff5a 	bl	8008a2c <lwip_htons>
 8013b78:	4603      	mov	r3, r0
 8013b7a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d110      	bne.n	8013ba4 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8013b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b84:	89db      	ldrh	r3, [r3, #14]
 8013b86:	4618      	mov	r0, r3
 8013b88:	f7f4 ff50 	bl	8008a2c <lwip_htons>
 8013b8c:	4603      	mov	r3, r0
 8013b8e:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d006      	beq.n	8013ba4 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8013b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b98:	3308      	adds	r3, #8
 8013b9a:	2214      	movs	r2, #20
 8013b9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013b9e:	4618      	mov	r0, r3
 8013ba0:	f005 ff79 	bl	8019a96 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8013ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ba6:	88db      	ldrh	r3, [r3, #6]
 8013ba8:	b29b      	uxth	r3, r3
 8013baa:	f003 0320 	and.w	r3, r3, #32
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	bf0c      	ite	eq
 8013bb2:	2301      	moveq	r3, #1
 8013bb4:	2300      	movne	r3, #0
 8013bb6:	b2db      	uxtb	r3, r3
 8013bb8:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8013bba:	69fb      	ldr	r3, [r7, #28]
 8013bbc:	2b00      	cmp	r3, #0
 8013bbe:	d00e      	beq.n	8013bde <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 8013bc0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013bc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013bc4:	4413      	add	r3, r2
 8013bc6:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8013bc8:	8b7a      	ldrh	r2, [r7, #26]
 8013bca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013bcc:	429a      	cmp	r2, r3
 8013bce:	f0c0 8099 	bcc.w	8013d04 <ip4_reass+0x284>
 8013bd2:	8b7b      	ldrh	r3, [r7, #26]
 8013bd4:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8013bd8:	4293      	cmp	r3, r2
 8013bda:	f200 8093 	bhi.w	8013d04 <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8013bde:	69fa      	ldr	r2, [r7, #28]
 8013be0:	6879      	ldr	r1, [r7, #4]
 8013be2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013be4:	f7ff fde2 	bl	80137ac <ip_reass_chain_frag_into_datagram_and_validate>
 8013be8:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8013bea:	697b      	ldr	r3, [r7, #20]
 8013bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013bf0:	f000 808a 	beq.w	8013d08 <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8013bf4:	4b49      	ldr	r3, [pc, #292]	; (8013d1c <ip4_reass+0x29c>)
 8013bf6:	881a      	ldrh	r2, [r3, #0]
 8013bf8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013bfa:	4413      	add	r3, r2
 8013bfc:	b29a      	uxth	r2, r3
 8013bfe:	4b47      	ldr	r3, [pc, #284]	; (8013d1c <ip4_reass+0x29c>)
 8013c00:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8013c02:	69fb      	ldr	r3, [r7, #28]
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d00d      	beq.n	8013c24 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 8013c08:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013c0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013c0c:	4413      	add	r3, r2
 8013c0e:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8013c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c12:	8a7a      	ldrh	r2, [r7, #18]
 8013c14:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8013c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c18:	7f9b      	ldrb	r3, [r3, #30]
 8013c1a:	f043 0301 	orr.w	r3, r3, #1
 8013c1e:	b2da      	uxtb	r2, r3
 8013c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c22:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8013c24:	697b      	ldr	r3, [r7, #20]
 8013c26:	2b01      	cmp	r3, #1
 8013c28:	d168      	bne.n	8013cfc <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 8013c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c2c:	8b9b      	ldrh	r3, [r3, #28]
 8013c2e:	3314      	adds	r3, #20
 8013c30:	b29a      	uxth	r2, r3
 8013c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c34:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8013c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c38:	685b      	ldr	r3, [r3, #4]
 8013c3a:	685b      	ldr	r3, [r3, #4]
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 8013c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c42:	685b      	ldr	r3, [r3, #4]
 8013c44:	685b      	ldr	r3, [r3, #4]
 8013c46:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8013c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c4a:	3308      	adds	r3, #8
 8013c4c:	2214      	movs	r2, #20
 8013c4e:	4619      	mov	r1, r3
 8013c50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013c52:	f005 ff20 	bl	8019a96 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8013c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c58:	8b9b      	ldrh	r3, [r3, #28]
 8013c5a:	4618      	mov	r0, r3
 8013c5c:	f7f4 fee6 	bl	8008a2c <lwip_htons>
 8013c60:	4603      	mov	r3, r0
 8013c62:	461a      	mov	r2, r3
 8013c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c66:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8013c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c6a:	2200      	movs	r2, #0
 8013c6c:	719a      	strb	r2, [r3, #6]
 8013c6e:	2200      	movs	r2, #0
 8013c70:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8013c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c74:	2200      	movs	r2, #0
 8013c76:	729a      	strb	r2, [r3, #10]
 8013c78:	2200      	movs	r2, #0
 8013c7a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8013c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c7e:	685b      	ldr	r3, [r3, #4]
 8013c80:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8013c82:	e00e      	b.n	8013ca2 <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 8013c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c86:	685b      	ldr	r3, [r3, #4]
 8013c88:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 8013c8a:	f06f 0113 	mvn.w	r1, #19
 8013c8e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013c90:	f7f6 fb66 	bl	800a360 <pbuf_header>
      pbuf_cat(p, r);
 8013c94:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013c96:	6878      	ldr	r0, [r7, #4]
 8013c98:	f7f6 fc5e 	bl	800a558 <pbuf_cat>
      r = iprh->next_pbuf;
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	681b      	ldr	r3, [r3, #0]
 8013ca0:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8013ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d1ed      	bne.n	8013c84 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8013ca8:	4b1d      	ldr	r3, [pc, #116]	; (8013d20 <ip4_reass+0x2a0>)
 8013caa:	681b      	ldr	r3, [r3, #0]
 8013cac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013cae:	429a      	cmp	r2, r3
 8013cb0:	d102      	bne.n	8013cb8 <ip4_reass+0x238>
      ipr_prev = NULL;
 8013cb2:	2300      	movs	r3, #0
 8013cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013cb6:	e010      	b.n	8013cda <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013cb8:	4b19      	ldr	r3, [pc, #100]	; (8013d20 <ip4_reass+0x2a0>)
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013cbe:	e007      	b.n	8013cd0 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 8013cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013cc6:	429a      	cmp	r2, r3
 8013cc8:	d006      	beq.n	8013cd8 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d1f4      	bne.n	8013cc0 <ip4_reass+0x240>
 8013cd6:	e000      	b.n	8013cda <ip4_reass+0x25a>
          break;
 8013cd8:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8013cda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013cdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013cde:	f7ff fd37 	bl	8013750 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 8013ce2:	6878      	ldr	r0, [r7, #4]
 8013ce4:	f7f6 fbfa 	bl	800a4dc <pbuf_clen>
 8013ce8:	4603      	mov	r3, r0
 8013cea:	461a      	mov	r2, r3
 8013cec:	4b0b      	ldr	r3, [pc, #44]	; (8013d1c <ip4_reass+0x29c>)
 8013cee:	881b      	ldrh	r3, [r3, #0]
 8013cf0:	1a9b      	subs	r3, r3, r2
 8013cf2:	b29a      	uxth	r2, r3
 8013cf4:	4b09      	ldr	r3, [pc, #36]	; (8013d1c <ip4_reass+0x29c>)
 8013cf6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	e00a      	b.n	8013d12 <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8013cfc:	2300      	movs	r3, #0
 8013cfe:	e008      	b.n	8013d12 <ip4_reass+0x292>
    goto nullreturn;
 8013d00:	bf00      	nop
 8013d02:	e002      	b.n	8013d0a <ip4_reass+0x28a>

nullreturn:
 8013d04:	bf00      	nop
 8013d06:	e000      	b.n	8013d0a <ip4_reass+0x28a>
    goto nullreturn;
 8013d08:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8013d0a:	6878      	ldr	r0, [r7, #4]
 8013d0c:	f7f6 fb4c 	bl	800a3a8 <pbuf_free>
  return NULL;
 8013d10:	2300      	movs	r3, #0
}
 8013d12:	4618      	mov	r0, r3
 8013d14:	3738      	adds	r7, #56	; 0x38
 8013d16:	46bd      	mov	sp, r7
 8013d18:	bd80      	pop	{r7, pc}
 8013d1a:	bf00      	nop
 8013d1c:	20004d44 	.word	0x20004d44
 8013d20:	20004d40 	.word	0x20004d40

08013d24 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 8013d24:	b580      	push	{r7, lr}
 8013d26:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8013d28:	2005      	movs	r0, #5
 8013d2a:	f7f5 fd2f 	bl	800978c <memp_malloc>
 8013d2e:	4603      	mov	r3, r0
}
 8013d30:	4618      	mov	r0, r3
 8013d32:	bd80      	pop	{r7, pc}

08013d34 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8013d34:	b580      	push	{r7, lr}
 8013d36:	b082      	sub	sp, #8
 8013d38:	af00      	add	r7, sp, #0
 8013d3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d106      	bne.n	8013d50 <ip_frag_free_pbuf_custom_ref+0x1c>
 8013d42:	4b07      	ldr	r3, [pc, #28]	; (8013d60 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8013d44:	f240 22ae 	movw	r2, #686	; 0x2ae
 8013d48:	4906      	ldr	r1, [pc, #24]	; (8013d64 <ip_frag_free_pbuf_custom_ref+0x30>)
 8013d4a:	4807      	ldr	r0, [pc, #28]	; (8013d68 <ip_frag_free_pbuf_custom_ref+0x34>)
 8013d4c:	f006 fce6 	bl	801a71c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8013d50:	6879      	ldr	r1, [r7, #4]
 8013d52:	2005      	movs	r0, #5
 8013d54:	f7f5 fd6c 	bl	8009830 <memp_free>
}
 8013d58:	bf00      	nop
 8013d5a:	3708      	adds	r7, #8
 8013d5c:	46bd      	mov	sp, r7
 8013d5e:	bd80      	pop	{r7, pc}
 8013d60:	08020234 	.word	0x08020234
 8013d64:	0802039c 	.word	0x0802039c
 8013d68:	0802027c 	.word	0x0802027c

08013d6c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8013d6c:	b580      	push	{r7, lr}
 8013d6e:	b084      	sub	sp, #16
 8013d70:	af00      	add	r7, sp, #0
 8013d72:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8013d78:	68fb      	ldr	r3, [r7, #12]
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d106      	bne.n	8013d8c <ipfrag_free_pbuf_custom+0x20>
 8013d7e:	4b11      	ldr	r3, [pc, #68]	; (8013dc4 <ipfrag_free_pbuf_custom+0x58>)
 8013d80:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8013d84:	4910      	ldr	r1, [pc, #64]	; (8013dc8 <ipfrag_free_pbuf_custom+0x5c>)
 8013d86:	4811      	ldr	r0, [pc, #68]	; (8013dcc <ipfrag_free_pbuf_custom+0x60>)
 8013d88:	f006 fcc8 	bl	801a71c <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 8013d8c:	68fa      	ldr	r2, [r7, #12]
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	429a      	cmp	r2, r3
 8013d92:	d006      	beq.n	8013da2 <ipfrag_free_pbuf_custom+0x36>
 8013d94:	4b0b      	ldr	r3, [pc, #44]	; (8013dc4 <ipfrag_free_pbuf_custom+0x58>)
 8013d96:	f240 22b9 	movw	r2, #697	; 0x2b9
 8013d9a:	490d      	ldr	r1, [pc, #52]	; (8013dd0 <ipfrag_free_pbuf_custom+0x64>)
 8013d9c:	480b      	ldr	r0, [pc, #44]	; (8013dcc <ipfrag_free_pbuf_custom+0x60>)
 8013d9e:	f006 fcbd 	bl	801a71c <iprintf>
  if (pcr->original != NULL) {
 8013da2:	68fb      	ldr	r3, [r7, #12]
 8013da4:	695b      	ldr	r3, [r3, #20]
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d004      	beq.n	8013db4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	695b      	ldr	r3, [r3, #20]
 8013dae:	4618      	mov	r0, r3
 8013db0:	f7f6 fafa 	bl	800a3a8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8013db4:	68f8      	ldr	r0, [r7, #12]
 8013db6:	f7ff ffbd 	bl	8013d34 <ip_frag_free_pbuf_custom_ref>
}
 8013dba:	bf00      	nop
 8013dbc:	3710      	adds	r7, #16
 8013dbe:	46bd      	mov	sp, r7
 8013dc0:	bd80      	pop	{r7, pc}
 8013dc2:	bf00      	nop
 8013dc4:	08020234 	.word	0x08020234
 8013dc8:	080203a8 	.word	0x080203a8
 8013dcc:	0802027c 	.word	0x0802027c
 8013dd0:	080203b4 	.word	0x080203b4

08013dd4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8013dd4:	b580      	push	{r7, lr}
 8013dd6:	b092      	sub	sp, #72	; 0x48
 8013dd8:	af02      	add	r7, sp, #8
 8013dda:	60f8      	str	r0, [r7, #12]
 8013ddc:	60b9      	str	r1, [r7, #8]
 8013dde:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8013de0:	2300      	movs	r3, #0
 8013de2:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8013de4:	68bb      	ldr	r3, [r7, #8]
 8013de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013de8:	3b14      	subs	r3, #20
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	da00      	bge.n	8013df0 <ip4_frag+0x1c>
 8013dee:	3307      	adds	r3, #7
 8013df0:	10db      	asrs	r3, r3, #3
 8013df2:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8013df4:	2314      	movs	r3, #20
 8013df6:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	685b      	ldr	r3, [r3, #4]
 8013dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 8013dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e00:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8013e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e04:	781b      	ldrb	r3, [r3, #0]
 8013e06:	f003 030f 	and.w	r3, r3, #15
 8013e0a:	009b      	lsls	r3, r3, #2
 8013e0c:	2b14      	cmp	r3, #20
 8013e0e:	d009      	beq.n	8013e24 <ip4_frag+0x50>
 8013e10:	4b79      	ldr	r3, [pc, #484]	; (8013ff8 <ip4_frag+0x224>)
 8013e12:	f240 22e1 	movw	r2, #737	; 0x2e1
 8013e16:	4979      	ldr	r1, [pc, #484]	; (8013ffc <ip4_frag+0x228>)
 8013e18:	4879      	ldr	r0, [pc, #484]	; (8014000 <ip4_frag+0x22c>)
 8013e1a:	f006 fc7f 	bl	801a71c <iprintf>
 8013e1e:	f06f 0305 	mvn.w	r3, #5
 8013e22:	e0e5      	b.n	8013ff0 <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8013e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e26:	88db      	ldrh	r3, [r3, #6]
 8013e28:	b29b      	uxth	r3, r3
 8013e2a:	4618      	mov	r0, r3
 8013e2c:	f7f4 fdfe 	bl	8008a2c <lwip_htons>
 8013e30:	4603      	mov	r3, r0
 8013e32:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 8013e34:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013e36:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013e3a:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8013e3c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013e3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d009      	beq.n	8013e5a <ip4_frag+0x86>
 8013e46:	4b6c      	ldr	r3, [pc, #432]	; (8013ff8 <ip4_frag+0x224>)
 8013e48:	f240 22e6 	movw	r2, #742	; 0x2e6
 8013e4c:	496d      	ldr	r1, [pc, #436]	; (8014004 <ip4_frag+0x230>)
 8013e4e:	486c      	ldr	r0, [pc, #432]	; (8014000 <ip4_frag+0x22c>)
 8013e50:	f006 fc64 	bl	801a71c <iprintf>
 8013e54:	f06f 0305 	mvn.w	r3, #5
 8013e58:	e0ca      	b.n	8013ff0 <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 8013e5a:	68fb      	ldr	r3, [r7, #12]
 8013e5c:	891b      	ldrh	r3, [r3, #8]
 8013e5e:	3b14      	subs	r3, #20
 8013e60:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 8013e62:	e0bc      	b.n	8013fde <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 8013e64:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8013e66:	00da      	lsls	r2, r3, #3
 8013e68:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013e6a:	4293      	cmp	r3, r2
 8013e6c:	bfa8      	it	ge
 8013e6e:	4613      	movge	r3, r2
 8013e70:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8013e72:	2200      	movs	r2, #0
 8013e74:	2114      	movs	r1, #20
 8013e76:	2002      	movs	r0, #2
 8013e78:	f7f5 ff24 	bl	8009cc4 <pbuf_alloc>
 8013e7c:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 8013e7e:	6a3b      	ldr	r3, [r7, #32]
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	f000 80b2 	beq.w	8013fea <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8013e86:	68fb      	ldr	r3, [r7, #12]
 8013e88:	895b      	ldrh	r3, [r3, #10]
 8013e8a:	2b13      	cmp	r3, #19
 8013e8c:	d806      	bhi.n	8013e9c <ip4_frag+0xc8>
 8013e8e:	4b5a      	ldr	r3, [pc, #360]	; (8013ff8 <ip4_frag+0x224>)
 8013e90:	f240 3209 	movw	r2, #777	; 0x309
 8013e94:	495c      	ldr	r1, [pc, #368]	; (8014008 <ip4_frag+0x234>)
 8013e96:	485a      	ldr	r0, [pc, #360]	; (8014000 <ip4_frag+0x22c>)
 8013e98:	f006 fc40 	bl	801a71c <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8013e9c:	6a3b      	ldr	r3, [r7, #32]
 8013e9e:	685b      	ldr	r3, [r3, #4]
 8013ea0:	2214      	movs	r2, #20
 8013ea2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013ea4:	4618      	mov	r0, r3
 8013ea6:	f005 fdf6 	bl	8019a96 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8013eaa:	6a3b      	ldr	r3, [r7, #32]
 8013eac:	685b      	ldr	r3, [r3, #4]
 8013eae:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 8013eb0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013eb2:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 8013eb4:	e04f      	b.n	8013f56 <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	895a      	ldrh	r2, [r3, #10]
 8013eba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013ebc:	1ad3      	subs	r3, r2, r3
 8013ebe:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8013ec0:	8b7a      	ldrh	r2, [r7, #26]
 8013ec2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013ec4:	4293      	cmp	r3, r2
 8013ec6:	bf28      	it	cs
 8013ec8:	4613      	movcs	r3, r2
 8013eca:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8013ecc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d105      	bne.n	8013ede <ip4_frag+0x10a>
        poff = 0;
 8013ed2:	2300      	movs	r3, #0
 8013ed4:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8013ed6:	68fb      	ldr	r3, [r7, #12]
 8013ed8:	681b      	ldr	r3, [r3, #0]
 8013eda:	60fb      	str	r3, [r7, #12]
        continue;
 8013edc:	e03b      	b.n	8013f56 <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8013ede:	f7ff ff21 	bl	8013d24 <ip_frag_alloc_pbuf_custom_ref>
 8013ee2:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 8013ee4:	697b      	ldr	r3, [r7, #20]
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d103      	bne.n	8013ef2 <ip4_frag+0x11e>
        pbuf_free(rambuf);
 8013eea:	6a38      	ldr	r0, [r7, #32]
 8013eec:	f7f6 fa5c 	bl	800a3a8 <pbuf_free>
        goto memerr;
 8013ef0:	e07c      	b.n	8013fec <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013ef2:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013ef8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013efa:	4413      	add	r3, r2
 8013efc:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 8013efe:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013f00:	9201      	str	r2, [sp, #4]
 8013f02:	9300      	str	r3, [sp, #0]
 8013f04:	4603      	mov	r3, r0
 8013f06:	2202      	movs	r2, #2
 8013f08:	2004      	movs	r0, #4
 8013f0a:	f7f6 f86f 	bl	8009fec <pbuf_alloced_custom>
 8013f0e:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 8013f10:	693b      	ldr	r3, [r7, #16]
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d106      	bne.n	8013f24 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 8013f16:	6978      	ldr	r0, [r7, #20]
 8013f18:	f7ff ff0c 	bl	8013d34 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8013f1c:	6a38      	ldr	r0, [r7, #32]
 8013f1e:	f7f6 fa43 	bl	800a3a8 <pbuf_free>
        goto memerr;
 8013f22:	e063      	b.n	8013fec <ip4_frag+0x218>
      }
      pbuf_ref(p);
 8013f24:	68f8      	ldr	r0, [r7, #12]
 8013f26:	f7f6 faef 	bl	800a508 <pbuf_ref>
      pcr->original = p;
 8013f2a:	697b      	ldr	r3, [r7, #20]
 8013f2c:	68fa      	ldr	r2, [r7, #12]
 8013f2e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8013f30:	697b      	ldr	r3, [r7, #20]
 8013f32:	4a36      	ldr	r2, [pc, #216]	; (801400c <ip4_frag+0x238>)
 8013f34:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8013f36:	6939      	ldr	r1, [r7, #16]
 8013f38:	6a38      	ldr	r0, [r7, #32]
 8013f3a:	f7f6 fb0d 	bl	800a558 <pbuf_cat>
      left_to_copy -= newpbuflen;
 8013f3e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8013f40:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013f42:	1ad3      	subs	r3, r2, r3
 8013f44:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 8013f46:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d004      	beq.n	8013f56 <ip4_frag+0x182>
        poff = 0;
 8013f4c:	2300      	movs	r3, #0
 8013f4e:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	681b      	ldr	r3, [r3, #0]
 8013f54:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8013f56:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d1ac      	bne.n	8013eb6 <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 8013f5c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013f5e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013f60:	4413      	add	r3, r2
 8013f62:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8013f64:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013f66:	68bb      	ldr	r3, [r7, #8]
 8013f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013f6a:	3b14      	subs	r3, #20
 8013f6c:	429a      	cmp	r2, r3
 8013f6e:	bfd4      	ite	le
 8013f70:	2301      	movle	r3, #1
 8013f72:	2300      	movgt	r3, #0
 8013f74:	b2db      	uxtb	r3, r3
 8013f76:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8013f78:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8013f7a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013f7e:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 8013f80:	69fb      	ldr	r3, [r7, #28]
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d103      	bne.n	8013f8e <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 8013f86:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013f88:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8013f8c:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8013f8e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013f90:	4618      	mov	r0, r3
 8013f92:	f7f4 fd4b 	bl	8008a2c <lwip_htons>
 8013f96:	4603      	mov	r3, r0
 8013f98:	461a      	mov	r2, r3
 8013f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f9c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8013f9e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013fa0:	3314      	adds	r3, #20
 8013fa2:	b29b      	uxth	r3, r3
 8013fa4:	4618      	mov	r0, r3
 8013fa6:	f7f4 fd41 	bl	8008a2c <lwip_htons>
 8013faa:	4603      	mov	r3, r0
 8013fac:	461a      	mov	r2, r3
 8013fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fb0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8013fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fb4:	2200      	movs	r2, #0
 8013fb6:	729a      	strb	r2, [r3, #10]
 8013fb8:	2200      	movs	r2, #0
 8013fba:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8013fbc:	68bb      	ldr	r3, [r7, #8]
 8013fbe:	695b      	ldr	r3, [r3, #20]
 8013fc0:	687a      	ldr	r2, [r7, #4]
 8013fc2:	6a39      	ldr	r1, [r7, #32]
 8013fc4:	68b8      	ldr	r0, [r7, #8]
 8013fc6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8013fc8:	6a38      	ldr	r0, [r7, #32]
 8013fca:	f7f6 f9ed 	bl	800a3a8 <pbuf_free>
    left -= fragsize;
 8013fce:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013fd0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013fd2:	1ad3      	subs	r3, r2, r3
 8013fd4:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 8013fd6:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8013fd8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8013fda:	4413      	add	r3, r2
 8013fdc:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 8013fde:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	f47f af3f 	bne.w	8013e64 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8013fe6:	2300      	movs	r3, #0
 8013fe8:	e002      	b.n	8013ff0 <ip4_frag+0x21c>
      goto memerr;
 8013fea:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8013fec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013ff0:	4618      	mov	r0, r3
 8013ff2:	3740      	adds	r7, #64	; 0x40
 8013ff4:	46bd      	mov	sp, r7
 8013ff6:	bd80      	pop	{r7, pc}
 8013ff8:	08020234 	.word	0x08020234
 8013ffc:	080203c0 	.word	0x080203c0
 8014000:	0802027c 	.word	0x0802027c
 8014004:	080203e8 	.word	0x080203e8
 8014008:	08020404 	.word	0x08020404
 801400c:	08013d6d 	.word	0x08013d6d

08014010 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8014010:	b580      	push	{r7, lr}
 8014012:	b086      	sub	sp, #24
 8014014:	af00      	add	r7, sp, #0
 8014016:	6078      	str	r0, [r7, #4]
 8014018:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 801401a:	230e      	movs	r3, #14
 801401c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	895b      	ldrh	r3, [r3, #10]
 8014022:	2b0e      	cmp	r3, #14
 8014024:	d977      	bls.n	8014116 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	685b      	ldr	r3, [r3, #4]
 801402a:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801402c:	693b      	ldr	r3, [r7, #16]
 801402e:	7b1a      	ldrb	r2, [r3, #12]
 8014030:	7b5b      	ldrb	r3, [r3, #13]
 8014032:	021b      	lsls	r3, r3, #8
 8014034:	4313      	orrs	r3, r2
 8014036:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8014038:	693b      	ldr	r3, [r7, #16]
 801403a:	781b      	ldrb	r3, [r3, #0]
 801403c:	f003 0301 	and.w	r3, r3, #1
 8014040:	2b00      	cmp	r3, #0
 8014042:	d023      	beq.n	801408c <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8014044:	693b      	ldr	r3, [r7, #16]
 8014046:	781b      	ldrb	r3, [r3, #0]
 8014048:	2b01      	cmp	r3, #1
 801404a:	d10f      	bne.n	801406c <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801404c:	693b      	ldr	r3, [r7, #16]
 801404e:	785b      	ldrb	r3, [r3, #1]
 8014050:	2b00      	cmp	r3, #0
 8014052:	d11b      	bne.n	801408c <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8014054:	693b      	ldr	r3, [r7, #16]
 8014056:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014058:	2b5e      	cmp	r3, #94	; 0x5e
 801405a:	d117      	bne.n	801408c <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	7b5b      	ldrb	r3, [r3, #13]
 8014060:	f043 0310 	orr.w	r3, r3, #16
 8014064:	b2da      	uxtb	r2, r3
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	735a      	strb	r2, [r3, #13]
 801406a:	e00f      	b.n	801408c <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801406c:	693b      	ldr	r3, [r7, #16]
 801406e:	2206      	movs	r2, #6
 8014070:	4930      	ldr	r1, [pc, #192]	; (8014134 <ethernet_input+0x124>)
 8014072:	4618      	mov	r0, r3
 8014074:	f005 fd00 	bl	8019a78 <memcmp>
 8014078:	4603      	mov	r3, r0
 801407a:	2b00      	cmp	r3, #0
 801407c:	d106      	bne.n	801408c <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	7b5b      	ldrb	r3, [r3, #13]
 8014082:	f043 0308 	orr.w	r3, r3, #8
 8014086:	b2da      	uxtb	r2, r3
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801408c:	89fb      	ldrh	r3, [r7, #14]
 801408e:	2b08      	cmp	r3, #8
 8014090:	d003      	beq.n	801409a <ethernet_input+0x8a>
 8014092:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8014096:	d01e      	beq.n	80140d6 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8014098:	e044      	b.n	8014124 <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801409a:	683b      	ldr	r3, [r7, #0]
 801409c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80140a0:	f003 0308 	and.w	r3, r3, #8
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d038      	beq.n	801411a <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	895b      	ldrh	r3, [r3, #10]
 80140ac:	461a      	mov	r2, r3
 80140ae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80140b2:	429a      	cmp	r2, r3
 80140b4:	db33      	blt.n	801411e <ethernet_input+0x10e>
 80140b6:	8afb      	ldrh	r3, [r7, #22]
 80140b8:	425b      	negs	r3, r3
 80140ba:	b29b      	uxth	r3, r3
 80140bc:	b21b      	sxth	r3, r3
 80140be:	4619      	mov	r1, r3
 80140c0:	6878      	ldr	r0, [r7, #4]
 80140c2:	f7f6 f94d 	bl	800a360 <pbuf_header>
 80140c6:	4603      	mov	r3, r0
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d128      	bne.n	801411e <ethernet_input+0x10e>
        ip4_input(p, netif);
 80140cc:	6839      	ldr	r1, [r7, #0]
 80140ce:	6878      	ldr	r0, [r7, #4]
 80140d0:	f7fe fe24 	bl	8012d1c <ip4_input>
      break;
 80140d4:	e01d      	b.n	8014112 <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80140d6:	683b      	ldr	r3, [r7, #0]
 80140d8:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80140dc:	f003 0308 	and.w	r3, r3, #8
 80140e0:	2b00      	cmp	r3, #0
 80140e2:	d01e      	beq.n	8014122 <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	895b      	ldrh	r3, [r3, #10]
 80140e8:	461a      	mov	r2, r3
 80140ea:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80140ee:	429a      	cmp	r2, r3
 80140f0:	db15      	blt.n	801411e <ethernet_input+0x10e>
 80140f2:	8afb      	ldrh	r3, [r7, #22]
 80140f4:	425b      	negs	r3, r3
 80140f6:	b29b      	uxth	r3, r3
 80140f8:	b21b      	sxth	r3, r3
 80140fa:	4619      	mov	r1, r3
 80140fc:	6878      	ldr	r0, [r7, #4]
 80140fe:	f7f6 f92f 	bl	800a360 <pbuf_header>
 8014102:	4603      	mov	r3, r0
 8014104:	2b00      	cmp	r3, #0
 8014106:	d10a      	bne.n	801411e <ethernet_input+0x10e>
        etharp_input(p, netif);
 8014108:	6839      	ldr	r1, [r7, #0]
 801410a:	6878      	ldr	r0, [r7, #4]
 801410c:	f7fd ffee 	bl	80120ec <etharp_input>
      break;
 8014110:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8014112:	2300      	movs	r3, #0
 8014114:	e00a      	b.n	801412c <ethernet_input+0x11c>
    goto free_and_return;
 8014116:	bf00      	nop
 8014118:	e004      	b.n	8014124 <ethernet_input+0x114>
        goto free_and_return;
 801411a:	bf00      	nop
 801411c:	e002      	b.n	8014124 <ethernet_input+0x114>

free_and_return:
 801411e:	bf00      	nop
 8014120:	e000      	b.n	8014124 <ethernet_input+0x114>
        goto free_and_return;
 8014122:	bf00      	nop
  pbuf_free(p);
 8014124:	6878      	ldr	r0, [r7, #4]
 8014126:	f7f6 f93f 	bl	800a3a8 <pbuf_free>
  return ERR_OK;
 801412a:	2300      	movs	r3, #0
}
 801412c:	4618      	mov	r0, r3
 801412e:	3718      	adds	r7, #24
 8014130:	46bd      	mov	sp, r7
 8014132:	bd80      	pop	{r7, pc}
 8014134:	08021d20 	.word	0x08021d20

08014138 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 8014138:	b580      	push	{r7, lr}
 801413a:	b086      	sub	sp, #24
 801413c:	af00      	add	r7, sp, #0
 801413e:	60f8      	str	r0, [r7, #12]
 8014140:	60b9      	str	r1, [r7, #8]
 8014142:	607a      	str	r2, [r7, #4]
 8014144:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8014146:	8c3b      	ldrh	r3, [r7, #32]
 8014148:	4618      	mov	r0, r3
 801414a:	f7f4 fc6f 	bl	8008a2c <lwip_htons>
 801414e:	4603      	mov	r3, r0
 8014150:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 8014152:	210e      	movs	r1, #14
 8014154:	68b8      	ldr	r0, [r7, #8]
 8014156:	f7f6 f903 	bl	800a360 <pbuf_header>
 801415a:	4603      	mov	r3, r0
 801415c:	2b00      	cmp	r3, #0
 801415e:	d125      	bne.n	80141ac <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 8014160:	68bb      	ldr	r3, [r7, #8]
 8014162:	685b      	ldr	r3, [r3, #4]
 8014164:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8014166:	693b      	ldr	r3, [r7, #16]
 8014168:	8afa      	ldrh	r2, [r7, #22]
 801416a:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 801416c:	693b      	ldr	r3, [r7, #16]
 801416e:	2206      	movs	r2, #6
 8014170:	6839      	ldr	r1, [r7, #0]
 8014172:	4618      	mov	r0, r3
 8014174:	f005 fc8f 	bl	8019a96 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 8014178:	693b      	ldr	r3, [r7, #16]
 801417a:	3306      	adds	r3, #6
 801417c:	2206      	movs	r2, #6
 801417e:	6879      	ldr	r1, [r7, #4]
 8014180:	4618      	mov	r0, r3
 8014182:	f005 fc88 	bl	8019a96 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8014186:	68fb      	ldr	r3, [r7, #12]
 8014188:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801418c:	2b06      	cmp	r3, #6
 801418e:	d006      	beq.n	801419e <ethernet_output+0x66>
 8014190:	4b0a      	ldr	r3, [pc, #40]	; (80141bc <ethernet_output+0x84>)
 8014192:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8014196:	490a      	ldr	r1, [pc, #40]	; (80141c0 <ethernet_output+0x88>)
 8014198:	480a      	ldr	r0, [pc, #40]	; (80141c4 <ethernet_output+0x8c>)
 801419a:	f006 fabf 	bl	801a71c <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	699b      	ldr	r3, [r3, #24]
 80141a2:	68b9      	ldr	r1, [r7, #8]
 80141a4:	68f8      	ldr	r0, [r7, #12]
 80141a6:	4798      	blx	r3
 80141a8:	4603      	mov	r3, r0
 80141aa:	e002      	b.n	80141b2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80141ac:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80141ae:	f06f 0301 	mvn.w	r3, #1
}
 80141b2:	4618      	mov	r0, r3
 80141b4:	3718      	adds	r7, #24
 80141b6:	46bd      	mov	sp, r7
 80141b8:	bd80      	pop	{r7, pc}
 80141ba:	bf00      	nop
 80141bc:	08020424 	.word	0x08020424
 80141c0:	0802045c 	.word	0x0802045c
 80141c4:	08020490 	.word	0x08020490

080141c8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80141c8:	b580      	push	{r7, lr}
 80141ca:	b086      	sub	sp, #24
 80141cc:	af00      	add	r7, sp, #0
 80141ce:	6078      	str	r0, [r7, #4]
 80141d0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80141d2:	683b      	ldr	r3, [r7, #0]
 80141d4:	60bb      	str	r3, [r7, #8]
 80141d6:	2304      	movs	r3, #4
 80141d8:	60fb      	str	r3, [r7, #12]
 80141da:	2300      	movs	r3, #0
 80141dc:	613b      	str	r3, [r7, #16]
 80141de:	2300      	movs	r3, #0
 80141e0:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80141e2:	f107 0308 	add.w	r3, r7, #8
 80141e6:	2100      	movs	r1, #0
 80141e8:	4618      	mov	r0, r3
 80141ea:	f7f1 fa15 	bl	8005618 <osMessageCreate>
 80141ee:	4602      	mov	r2, r0
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d102      	bne.n	8014202 <sys_mbox_new+0x3a>
    return ERR_MEM;
 80141fc:	f04f 33ff 	mov.w	r3, #4294967295
 8014200:	e000      	b.n	8014204 <sys_mbox_new+0x3c>

  return ERR_OK;
 8014202:	2300      	movs	r3, #0
}
 8014204:	4618      	mov	r0, r3
 8014206:	3718      	adds	r7, #24
 8014208:	46bd      	mov	sp, r7
 801420a:	bd80      	pop	{r7, pc}

0801420c <sys_mbox_post>:
}

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 801420c:	b580      	push	{r7, lr}
 801420e:	b082      	sub	sp, #8
 8014210:	af00      	add	r7, sp, #0
 8014212:	6078      	str	r0, [r7, #4]
 8014214:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 8014216:	bf00      	nop
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	6839      	ldr	r1, [r7, #0]
 801421e:	f04f 32ff 	mov.w	r2, #4294967295
 8014222:	4618      	mov	r0, r3
 8014224:	f7f1 fa22 	bl	800566c <osMessagePut>
 8014228:	4603      	mov	r3, r0
 801422a:	2b00      	cmp	r3, #0
 801422c:	d1f4      	bne.n	8014218 <sys_mbox_post+0xc>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 801422e:	bf00      	nop
 8014230:	3708      	adds	r7, #8
 8014232:	46bd      	mov	sp, r7
 8014234:	bd80      	pop	{r7, pc}

08014236 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8014236:	b580      	push	{r7, lr}
 8014238:	b084      	sub	sp, #16
 801423a:	af00      	add	r7, sp, #0
 801423c:	6078      	str	r0, [r7, #4]
 801423e:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	6839      	ldr	r1, [r7, #0]
 8014246:	2200      	movs	r2, #0
 8014248:	4618      	mov	r0, r3
 801424a:	f7f1 fa0f 	bl	800566c <osMessagePut>
 801424e:	4603      	mov	r3, r0
 8014250:	2b00      	cmp	r3, #0
 8014252:	d102      	bne.n	801425a <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8014254:	2300      	movs	r3, #0
 8014256:	73fb      	strb	r3, [r7, #15]
 8014258:	e001      	b.n	801425e <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801425a:	23ff      	movs	r3, #255	; 0xff
 801425c:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801425e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014262:	4618      	mov	r0, r3
 8014264:	3710      	adds	r7, #16
 8014266:	46bd      	mov	sp, r7
 8014268:	bd80      	pop	{r7, pc}

0801426a <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801426a:	b580      	push	{r7, lr}
 801426c:	b08c      	sub	sp, #48	; 0x30
 801426e:	af00      	add	r7, sp, #0
 8014270:	61f8      	str	r0, [r7, #28]
 8014272:	61b9      	str	r1, [r7, #24]
 8014274:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8014276:	f7f0 ff55 	bl	8005124 <osKernelSysTick>
 801427a:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801427c:	697b      	ldr	r3, [r7, #20]
 801427e:	2b00      	cmp	r3, #0
 8014280:	d017      	beq.n	80142b2 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8014282:	69fb      	ldr	r3, [r7, #28]
 8014284:	6819      	ldr	r1, [r3, #0]
 8014286:	f107 0320 	add.w	r3, r7, #32
 801428a:	697a      	ldr	r2, [r7, #20]
 801428c:	4618      	mov	r0, r3
 801428e:	f7f1 fa2d 	bl	80056ec <osMessageGet>

    if(event.status == osEventMessage)
 8014292:	6a3b      	ldr	r3, [r7, #32]
 8014294:	2b10      	cmp	r3, #16
 8014296:	d109      	bne.n	80142ac <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8014298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801429a:	461a      	mov	r2, r3
 801429c:	69bb      	ldr	r3, [r7, #24]
 801429e:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80142a0:	f7f0 ff40 	bl	8005124 <osKernelSysTick>
 80142a4:	4602      	mov	r2, r0
 80142a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142a8:	1ad3      	subs	r3, r2, r3
 80142aa:	e019      	b.n	80142e0 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80142ac:	f04f 33ff 	mov.w	r3, #4294967295
 80142b0:	e016      	b.n	80142e0 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 80142b2:	69fb      	ldr	r3, [r7, #28]
 80142b4:	6819      	ldr	r1, [r3, #0]
 80142b6:	463b      	mov	r3, r7
 80142b8:	f04f 32ff 	mov.w	r2, #4294967295
 80142bc:	4618      	mov	r0, r3
 80142be:	f7f1 fa15 	bl	80056ec <osMessageGet>
 80142c2:	f107 0320 	add.w	r3, r7, #32
 80142c6:	463a      	mov	r2, r7
 80142c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80142ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80142ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80142d0:	461a      	mov	r2, r3
 80142d2:	69bb      	ldr	r3, [r7, #24]
 80142d4:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80142d6:	f7f0 ff25 	bl	8005124 <osKernelSysTick>
 80142da:	4602      	mov	r2, r0
 80142dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142de:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80142e0:	4618      	mov	r0, r3
 80142e2:	3730      	adds	r7, #48	; 0x30
 80142e4:	46bd      	mov	sp, r7
 80142e6:	bd80      	pop	{r7, pc}

080142e8 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80142e8:	b480      	push	{r7}
 80142ea:	b083      	sub	sp, #12
 80142ec:	af00      	add	r7, sp, #0
 80142ee:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	681b      	ldr	r3, [r3, #0]
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d101      	bne.n	80142fc <sys_mbox_valid+0x14>
    return 0;
 80142f8:	2300      	movs	r3, #0
 80142fa:	e000      	b.n	80142fe <sys_mbox_valid+0x16>
  else
    return 1;
 80142fc:	2301      	movs	r3, #1
}
 80142fe:	4618      	mov	r0, r3
 8014300:	370c      	adds	r7, #12
 8014302:	46bd      	mov	sp, r7
 8014304:	bc80      	pop	{r7}
 8014306:	4770      	bx	lr

08014308 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8014308:	b580      	push	{r7, lr}
 801430a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801430c:	4803      	ldr	r0, [pc, #12]	; (801431c <sys_init+0x14>)
 801430e:	f7f1 f82f 	bl	8005370 <osMutexCreate>
 8014312:	4602      	mov	r2, r0
 8014314:	4b02      	ldr	r3, [pc, #8]	; (8014320 <sys_init+0x18>)
 8014316:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8014318:	bf00      	nop
 801431a:	bd80      	pop	{r7, pc}
 801431c:	08021d30 	.word	0x08021d30
 8014320:	2000b850 	.word	0x2000b850

08014324 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8014324:	b580      	push	{r7, lr}
 8014326:	b084      	sub	sp, #16
 8014328:	af00      	add	r7, sp, #0
 801432a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801432c:	2300      	movs	r3, #0
 801432e:	60bb      	str	r3, [r7, #8]
 8014330:	2300      	movs	r3, #0
 8014332:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8014334:	f107 0308 	add.w	r3, r7, #8
 8014338:	4618      	mov	r0, r3
 801433a:	f7f1 f819 	bl	8005370 <osMutexCreate>
 801433e:	4602      	mov	r2, r0
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	681b      	ldr	r3, [r3, #0]
 8014348:	2b00      	cmp	r3, #0
 801434a:	d102      	bne.n	8014352 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801434c:	f04f 33ff 	mov.w	r3, #4294967295
 8014350:	e000      	b.n	8014354 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8014352:	2300      	movs	r3, #0
}
 8014354:	4618      	mov	r0, r3
 8014356:	3710      	adds	r7, #16
 8014358:	46bd      	mov	sp, r7
 801435a:	bd80      	pop	{r7, pc}

0801435c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801435c:	b580      	push	{r7, lr}
 801435e:	b082      	sub	sp, #8
 8014360:	af00      	add	r7, sp, #0
 8014362:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	681b      	ldr	r3, [r3, #0]
 8014368:	f04f 31ff 	mov.w	r1, #4294967295
 801436c:	4618      	mov	r0, r3
 801436e:	f7f1 f817 	bl	80053a0 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8014372:	bf00      	nop
 8014374:	3708      	adds	r7, #8
 8014376:	46bd      	mov	sp, r7
 8014378:	bd80      	pop	{r7, pc}

0801437a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801437a:	b580      	push	{r7, lr}
 801437c:	b082      	sub	sp, #8
 801437e:	af00      	add	r7, sp, #0
 8014380:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	681b      	ldr	r3, [r3, #0]
 8014386:	4618      	mov	r0, r3
 8014388:	f7f1 f858 	bl	800543c <osMutexRelease>
}
 801438c:	bf00      	nop
 801438e:	3708      	adds	r7, #8
 8014390:	46bd      	mov	sp, r7
 8014392:	bd80      	pop	{r7, pc}

08014394 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8014394:	b580      	push	{r7, lr}
 8014396:	b08c      	sub	sp, #48	; 0x30
 8014398:	af00      	add	r7, sp, #0
 801439a:	60f8      	str	r0, [r7, #12]
 801439c:	60b9      	str	r1, [r7, #8]
 801439e:	607a      	str	r2, [r7, #4]
 80143a0:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80143a2:	f107 0314 	add.w	r3, r7, #20
 80143a6:	2200      	movs	r2, #0
 80143a8:	601a      	str	r2, [r3, #0]
 80143aa:	605a      	str	r2, [r3, #4]
 80143ac:	609a      	str	r2, [r3, #8]
 80143ae:	60da      	str	r2, [r3, #12]
 80143b0:	611a      	str	r2, [r3, #16]
 80143b2:	615a      	str	r2, [r3, #20]
 80143b4:	619a      	str	r2, [r3, #24]
 80143b6:	68fb      	ldr	r3, [r7, #12]
 80143b8:	617b      	str	r3, [r7, #20]
 80143ba:	68bb      	ldr	r3, [r7, #8]
 80143bc:	61bb      	str	r3, [r7, #24]
 80143be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143c0:	b21b      	sxth	r3, r3
 80143c2:	83bb      	strh	r3, [r7, #28]
 80143c4:	683b      	ldr	r3, [r7, #0]
 80143c6:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 80143c8:	f107 0314 	add.w	r3, r7, #20
 80143cc:	6879      	ldr	r1, [r7, #4]
 80143ce:	4618      	mov	r0, r3
 80143d0:	f7f0 feb8 	bl	8005144 <osThreadCreate>
 80143d4:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80143d6:	4618      	mov	r0, r3
 80143d8:	3730      	adds	r7, #48	; 0x30
 80143da:	46bd      	mov	sp, r7
 80143dc:	bd80      	pop	{r7, pc}
	...

080143e0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80143e0:	b580      	push	{r7, lr}
 80143e2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 80143e4:	4b04      	ldr	r3, [pc, #16]	; (80143f8 <sys_arch_protect+0x18>)
 80143e6:	681b      	ldr	r3, [r3, #0]
 80143e8:	f04f 31ff 	mov.w	r1, #4294967295
 80143ec:	4618      	mov	r0, r3
 80143ee:	f7f0 ffd7 	bl	80053a0 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 80143f2:	2301      	movs	r3, #1
}
 80143f4:	4618      	mov	r0, r3
 80143f6:	bd80      	pop	{r7, pc}
 80143f8:	2000b850 	.word	0x2000b850

080143fc <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80143fc:	b580      	push	{r7, lr}
 80143fe:	b082      	sub	sp, #8
 8014400:	af00      	add	r7, sp, #0
 8014402:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8014404:	4b04      	ldr	r3, [pc, #16]	; (8014418 <sys_arch_unprotect+0x1c>)
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	4618      	mov	r0, r3
 801440a:	f7f1 f817 	bl	800543c <osMutexRelease>
}
 801440e:	bf00      	nop
 8014410:	3708      	adds	r7, #8
 8014412:	46bd      	mov	sp, r7
 8014414:	bd80      	pop	{r7, pc}
 8014416:	bf00      	nop
 8014418:	2000b850 	.word	0x2000b850
 801441c:	00000000 	.word	0x00000000

08014420 <scaledNanosecondsToInternalTime>:
/* arith.c */

#include "ptpd.h"

void scaledNanosecondsToInternalTime(const int64_t *scaledNanoseconds, TimeInternal *internal)
{
 8014420:	b590      	push	{r4, r7, lr}
 8014422:	b087      	sub	sp, #28
 8014424:	af00      	add	r7, sp, #0
 8014426:	6078      	str	r0, [r7, #4]
 8014428:	6039      	str	r1, [r7, #0]
	int sign;
	int64_t nanoseconds = *scaledNanoseconds;
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	cb18      	ldmia	r3, {r3, r4}
 801442e:	e9c7 3402 	strd	r3, r4, [r7, #8]

	/* Determine sign of result big integer number */
	if (nanoseconds < 0)
 8014432:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8014436:	2b00      	cmp	r3, #0
 8014438:	f174 0300 	sbcs.w	r3, r4, #0
 801443c:	da0a      	bge.n	8014454 <scaledNanosecondsToInternalTime+0x34>
	{
		nanoseconds = -nanoseconds;
 801443e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8014442:	425b      	negs	r3, r3
 8014444:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
 8014448:	e9c7 3402 	strd	r3, r4, [r7, #8]
		sign = -1;
 801444c:	f04f 33ff 	mov.w	r3, #4294967295
 8014450:	617b      	str	r3, [r7, #20]
 8014452:	e001      	b.n	8014458 <scaledNanosecondsToInternalTime+0x38>
	}
	else
	{
		sign = 1;
 8014454:	2301      	movs	r3, #1
 8014456:	617b      	str	r3, [r7, #20]
	}

	/* fractional nanoseconds are excluded (see 5.3.2) */
	nanoseconds >>= 16;
 8014458:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801445c:	f04f 0300 	mov.w	r3, #0
 8014460:	f04f 0400 	mov.w	r4, #0
 8014464:	0c0b      	lsrs	r3, r1, #16
 8014466:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801446a:	1414      	asrs	r4, r2, #16
 801446c:	e9c7 3402 	strd	r3, r4, [r7, #8]
	internal->seconds = sign * (nanoseconds / 1000000000);
 8014470:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8014474:	a310      	add	r3, pc, #64	; (adr r3, 80144b8 <scaledNanosecondsToInternalTime+0x98>)
 8014476:	e9d3 2300 	ldrd	r2, r3, [r3]
 801447a:	f7ec feaf 	bl	80011dc <__aeabi_ldivmod>
 801447e:	4603      	mov	r3, r0
 8014480:	460c      	mov	r4, r1
 8014482:	461a      	mov	r2, r3
 8014484:	697b      	ldr	r3, [r7, #20]
 8014486:	fb03 f302 	mul.w	r3, r3, r2
 801448a:	461a      	mov	r2, r3
 801448c:	683b      	ldr	r3, [r7, #0]
 801448e:	601a      	str	r2, [r3, #0]
	internal->nanoseconds = sign * (nanoseconds % 1000000000);
 8014490:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8014494:	a308      	add	r3, pc, #32	; (adr r3, 80144b8 <scaledNanosecondsToInternalTime+0x98>)
 8014496:	e9d3 2300 	ldrd	r2, r3, [r3]
 801449a:	f7ec fe9f 	bl	80011dc <__aeabi_ldivmod>
 801449e:	461c      	mov	r4, r3
 80144a0:	4613      	mov	r3, r2
 80144a2:	461a      	mov	r2, r3
 80144a4:	697b      	ldr	r3, [r7, #20]
 80144a6:	fb03 f302 	mul.w	r3, r3, r2
 80144aa:	461a      	mov	r2, r3
 80144ac:	683b      	ldr	r3, [r7, #0]
 80144ae:	605a      	str	r2, [r3, #4]
}
 80144b0:	bf00      	nop
 80144b2:	371c      	adds	r7, #28
 80144b4:	46bd      	mov	sp, r7
 80144b6:	bd90      	pop	{r4, r7, pc}
 80144b8:	3b9aca00 	.word	0x3b9aca00
 80144bc:	00000000 	.word	0x00000000

080144c0 <fromInternalTime>:

void fromInternalTime(const TimeInternal *internal, Timestamp *external)
{
 80144c0:	b580      	push	{r7, lr}
 80144c2:	b084      	sub	sp, #16
 80144c4:	af00      	add	r7, sp, #0
 80144c6:	6078      	str	r0, [r7, #4]
 80144c8:	6039      	str	r1, [r7, #0]
	/* fromInternalTime is only used to convert time given by the system to a timestamp
	 * As a consequence, no negative value can normally be found in (internal)
	 * Note that offsets are also represented with TimeInternal structure, and can be negative,
	 * but offset are never convert into Timestamp so there is no problem here.*/
	if ((internal->seconds & ~INT_MAX) || (internal->nanoseconds & ~INT_MAX))
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	681b      	ldr	r3, [r3, #0]
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	db03      	blt.n	80144da <fromInternalTime+0x1a>
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	685b      	ldr	r3, [r3, #4]
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	da0e      	bge.n	80144f8 <fromInternalTime+0x38>
	{
		DBG("Negative value canno't be converted into timestamp \n");
 80144da:	f107 0308 	add.w	r3, r7, #8
 80144de:	4618      	mov	r0, r3
 80144e0:	f005 f91c 	bl	801971c <getTime>
 80144e4:	68bb      	ldr	r3, [r7, #8]
 80144e6:	68fa      	ldr	r2, [r7, #12]
 80144e8:	4619      	mov	r1, r3
 80144ea:	480b      	ldr	r0, [pc, #44]	; (8014518 <fromInternalTime+0x58>)
 80144ec:	f006 f916 	bl	801a71c <iprintf>
 80144f0:	480a      	ldr	r0, [pc, #40]	; (801451c <fromInternalTime+0x5c>)
 80144f2:	f006 f987 	bl	801a804 <puts>
		return;
 80144f6:	e00c      	b.n	8014512 <fromInternalTime+0x52>
	}
	else
	{
		external->secondsField.lsb = internal->seconds;
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	681b      	ldr	r3, [r3, #0]
 80144fc:	461a      	mov	r2, r3
 80144fe:	683b      	ldr	r3, [r7, #0]
 8014500:	601a      	str	r2, [r3, #0]
		external->nanosecondsField = internal->nanoseconds;
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	685b      	ldr	r3, [r3, #4]
 8014506:	461a      	mov	r2, r3
 8014508:	683b      	ldr	r3, [r7, #0]
 801450a:	609a      	str	r2, [r3, #8]
		external->secondsField.msb = 0;
 801450c:	683b      	ldr	r3, [r7, #0]
 801450e:	2200      	movs	r2, #0
 8014510:	809a      	strh	r2, [r3, #4]
	}
}
 8014512:	3710      	adds	r7, #16
 8014514:	46bd      	mov	sp, r7
 8014516:	bd80      	pop	{r7, pc}
 8014518:	080204b8 	.word	0x080204b8
 801451c:	080204c8 	.word	0x080204c8

08014520 <toInternalTime>:

void toInternalTime(TimeInternal *internal, const Timestamp *external)
{
 8014520:	b580      	push	{r7, lr}
 8014522:	b084      	sub	sp, #16
 8014524:	af00      	add	r7, sp, #0
 8014526:	6078      	str	r0, [r7, #4]
 8014528:	6039      	str	r1, [r7, #0]
	/* Program will not run after 2038... */
	if (external->secondsField.lsb < INT_MAX)
 801452a:	683b      	ldr	r3, [r7, #0]
 801452c:	681b      	ldr	r3, [r3, #0]
 801452e:	4a10      	ldr	r2, [pc, #64]	; (8014570 <toInternalTime+0x50>)
 8014530:	4293      	cmp	r3, r2
 8014532:	d80a      	bhi.n	801454a <toInternalTime+0x2a>
	{
		internal->seconds = external->secondsField.lsb;
 8014534:	683b      	ldr	r3, [r7, #0]
 8014536:	681b      	ldr	r3, [r3, #0]
 8014538:	461a      	mov	r2, r3
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	601a      	str	r2, [r3, #0]
		internal->nanoseconds = external->nanosecondsField;
 801453e:	683b      	ldr	r3, [r7, #0]
 8014540:	689b      	ldr	r3, [r3, #8]
 8014542:	461a      	mov	r2, r3
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	605a      	str	r2, [r3, #4]
 8014548:	e00e      	b.n	8014568 <toInternalTime+0x48>
	}
	else
	{
		DBG("Clock servo canno't be executed : seconds field is higher than signed integer (32bits)\n");
 801454a:	f107 0308 	add.w	r3, r7, #8
 801454e:	4618      	mov	r0, r3
 8014550:	f005 f8e4 	bl	801971c <getTime>
 8014554:	68bb      	ldr	r3, [r7, #8]
 8014556:	68fa      	ldr	r2, [r7, #12]
 8014558:	4619      	mov	r1, r3
 801455a:	4806      	ldr	r0, [pc, #24]	; (8014574 <toInternalTime+0x54>)
 801455c:	f006 f8de 	bl	801a71c <iprintf>
 8014560:	4805      	ldr	r0, [pc, #20]	; (8014578 <toInternalTime+0x58>)
 8014562:	f006 f94f 	bl	801a804 <puts>
		return;
 8014566:	bf00      	nop
	}
}
 8014568:	3710      	adds	r7, #16
 801456a:	46bd      	mov	sp, r7
 801456c:	bd80      	pop	{r7, pc}
 801456e:	bf00      	nop
 8014570:	7ffffffe 	.word	0x7ffffffe
 8014574:	080204b8 	.word	0x080204b8
 8014578:	080204fc 	.word	0x080204fc

0801457c <normalizeTime>:

void normalizeTime(TimeInternal *r)
{
 801457c:	b480      	push	{r7}
 801457e:	b083      	sub	sp, #12
 8014580:	af00      	add	r7, sp, #0
 8014582:	6078      	str	r0, [r7, #4]
	r->seconds += r->nanoseconds / 1000000000;
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	681a      	ldr	r2, [r3, #0]
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	685b      	ldr	r3, [r3, #4]
 801458c:	4921      	ldr	r1, [pc, #132]	; (8014614 <normalizeTime+0x98>)
 801458e:	fb81 0103 	smull	r0, r1, r1, r3
 8014592:	1709      	asrs	r1, r1, #28
 8014594:	17db      	asrs	r3, r3, #31
 8014596:	1acb      	subs	r3, r1, r3
 8014598:	441a      	add	r2, r3
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	601a      	str	r2, [r3, #0]
	r->nanoseconds -= r->nanoseconds / 1000000000 * 1000000000;
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	685a      	ldr	r2, [r3, #4]
 80145a2:	4b1c      	ldr	r3, [pc, #112]	; (8014614 <normalizeTime+0x98>)
 80145a4:	fb83 1302 	smull	r1, r3, r3, r2
 80145a8:	1719      	asrs	r1, r3, #28
 80145aa:	17d3      	asrs	r3, r2, #31
 80145ac:	1acb      	subs	r3, r1, r3
 80145ae:	491a      	ldr	r1, [pc, #104]	; (8014618 <normalizeTime+0x9c>)
 80145b0:	fb01 f303 	mul.w	r3, r1, r3
 80145b4:	1ad3      	subs	r3, r2, r3
 80145b6:	687a      	ldr	r2, [r7, #4]
 80145b8:	6053      	str	r3, [r2, #4]

	if (r->seconds > 0 && r->nanoseconds < 0)
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	681b      	ldr	r3, [r3, #0]
 80145be:	2b00      	cmp	r3, #0
 80145c0:	dd0f      	ble.n	80145e2 <normalizeTime+0x66>
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	685b      	ldr	r3, [r3, #4]
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	da0b      	bge.n	80145e2 <normalizeTime+0x66>
	{
		r->seconds -= 1;
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	1e5a      	subs	r2, r3, #1
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	601a      	str	r2, [r3, #0]
		r->nanoseconds += 1000000000;
 80145d4:	687b      	ldr	r3, [r7, #4]
 80145d6:	685a      	ldr	r2, [r3, #4]
 80145d8:	4b0f      	ldr	r3, [pc, #60]	; (8014618 <normalizeTime+0x9c>)
 80145da:	4413      	add	r3, r2
 80145dc:	687a      	ldr	r2, [r7, #4]
 80145de:	6053      	str	r3, [r2, #4]
	else if (r->seconds < 0 && r->nanoseconds > 0)
	{
		r->seconds += 1;
		r->nanoseconds -= 1000000000;
	}
}
 80145e0:	e012      	b.n	8014608 <normalizeTime+0x8c>
	else if (r->seconds < 0 && r->nanoseconds > 0)
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	681b      	ldr	r3, [r3, #0]
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	da0e      	bge.n	8014608 <normalizeTime+0x8c>
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	685b      	ldr	r3, [r3, #4]
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	dd0a      	ble.n	8014608 <normalizeTime+0x8c>
		r->seconds += 1;
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	681b      	ldr	r3, [r3, #0]
 80145f6:	1c5a      	adds	r2, r3, #1
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	601a      	str	r2, [r3, #0]
		r->nanoseconds -= 1000000000;
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	685a      	ldr	r2, [r3, #4]
 8014600:	4b06      	ldr	r3, [pc, #24]	; (801461c <normalizeTime+0xa0>)
 8014602:	4413      	add	r3, r2
 8014604:	687a      	ldr	r2, [r7, #4]
 8014606:	6053      	str	r3, [r2, #4]
}
 8014608:	bf00      	nop
 801460a:	370c      	adds	r7, #12
 801460c:	46bd      	mov	sp, r7
 801460e:	bc80      	pop	{r7}
 8014610:	4770      	bx	lr
 8014612:	bf00      	nop
 8014614:	44b82fa1 	.word	0x44b82fa1
 8014618:	3b9aca00 	.word	0x3b9aca00
 801461c:	c4653600 	.word	0xc4653600

08014620 <addTime>:

void addTime(TimeInternal *r, const TimeInternal *x, const TimeInternal *y)
{
 8014620:	b580      	push	{r7, lr}
 8014622:	b084      	sub	sp, #16
 8014624:	af00      	add	r7, sp, #0
 8014626:	60f8      	str	r0, [r7, #12]
 8014628:	60b9      	str	r1, [r7, #8]
 801462a:	607a      	str	r2, [r7, #4]
	r->seconds = x->seconds + y->seconds;
 801462c:	68bb      	ldr	r3, [r7, #8]
 801462e:	681a      	ldr	r2, [r3, #0]
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	441a      	add	r2, r3
 8014636:	68fb      	ldr	r3, [r7, #12]
 8014638:	601a      	str	r2, [r3, #0]
	r->nanoseconds = x->nanoseconds + y->nanoseconds;
 801463a:	68bb      	ldr	r3, [r7, #8]
 801463c:	685a      	ldr	r2, [r3, #4]
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	685b      	ldr	r3, [r3, #4]
 8014642:	441a      	add	r2, r3
 8014644:	68fb      	ldr	r3, [r7, #12]
 8014646:	605a      	str	r2, [r3, #4]

	normalizeTime(r);
 8014648:	68f8      	ldr	r0, [r7, #12]
 801464a:	f7ff ff97 	bl	801457c <normalizeTime>
}
 801464e:	bf00      	nop
 8014650:	3710      	adds	r7, #16
 8014652:	46bd      	mov	sp, r7
 8014654:	bd80      	pop	{r7, pc}

08014656 <subTime>:

void subTime(TimeInternal *r, const TimeInternal *x, const TimeInternal *y)
{
 8014656:	b580      	push	{r7, lr}
 8014658:	b084      	sub	sp, #16
 801465a:	af00      	add	r7, sp, #0
 801465c:	60f8      	str	r0, [r7, #12]
 801465e:	60b9      	str	r1, [r7, #8]
 8014660:	607a      	str	r2, [r7, #4]
	r->seconds = x->seconds - y->seconds;
 8014662:	68bb      	ldr	r3, [r7, #8]
 8014664:	681a      	ldr	r2, [r3, #0]
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	681b      	ldr	r3, [r3, #0]
 801466a:	1ad2      	subs	r2, r2, r3
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	601a      	str	r2, [r3, #0]
	r->nanoseconds = x->nanoseconds - y->nanoseconds;
 8014670:	68bb      	ldr	r3, [r7, #8]
 8014672:	685a      	ldr	r2, [r3, #4]
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	685b      	ldr	r3, [r3, #4]
 8014678:	1ad2      	subs	r2, r2, r3
 801467a:	68fb      	ldr	r3, [r7, #12]
 801467c:	605a      	str	r2, [r3, #4]

	normalizeTime(r);
 801467e:	68f8      	ldr	r0, [r7, #12]
 8014680:	f7ff ff7c 	bl	801457c <normalizeTime>
}
 8014684:	bf00      	nop
 8014686:	3710      	adds	r7, #16
 8014688:	46bd      	mov	sp, r7
 801468a:	bd80      	pop	{r7, pc}

0801468c <div2Time>:

void div2Time(TimeInternal *r)
{
 801468c:	b580      	push	{r7, lr}
 801468e:	b082      	sub	sp, #8
 8014690:	af00      	add	r7, sp, #0
 8014692:	6078      	str	r0, [r7, #4]
	r->nanoseconds += r->seconds % 2 * 1000000000;
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	685a      	ldr	r2, [r3, #4]
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	681b      	ldr	r3, [r3, #0]
 801469c:	2b00      	cmp	r3, #0
 801469e:	f003 0301 	and.w	r3, r3, #1
 80146a2:	bfb8      	it	lt
 80146a4:	425b      	neglt	r3, r3
 80146a6:	490e      	ldr	r1, [pc, #56]	; (80146e0 <div2Time+0x54>)
 80146a8:	fb01 f303 	mul.w	r3, r1, r3
 80146ac:	441a      	add	r2, r3
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	605a      	str	r2, [r3, #4]
	r->seconds /= 2;
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	0fda      	lsrs	r2, r3, #31
 80146b8:	4413      	add	r3, r2
 80146ba:	105b      	asrs	r3, r3, #1
 80146bc:	461a      	mov	r2, r3
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	601a      	str	r2, [r3, #0]
	r->nanoseconds /= 2;
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	685b      	ldr	r3, [r3, #4]
 80146c6:	0fda      	lsrs	r2, r3, #31
 80146c8:	4413      	add	r3, r2
 80146ca:	105b      	asrs	r3, r3, #1
 80146cc:	461a      	mov	r2, r3
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	605a      	str	r2, [r3, #4]

	normalizeTime(r);
 80146d2:	6878      	ldr	r0, [r7, #4]
 80146d4:	f7ff ff52 	bl	801457c <normalizeTime>
}
 80146d8:	bf00      	nop
 80146da:	3708      	adds	r7, #8
 80146dc:	46bd      	mov	sp, r7
 80146de:	bd80      	pop	{r7, pc}
 80146e0:	3b9aca00 	.word	0x3b9aca00

080146e4 <floorLog2>:

int32_t floorLog2(uint32_t n)
{
 80146e4:	b480      	push	{r7}
 80146e6:	b085      	sub	sp, #20
 80146e8:	af00      	add	r7, sp, #0
 80146ea:	6078      	str	r0, [r7, #4]
	int pos = 0;
 80146ec:	2300      	movs	r3, #0
 80146ee:	60fb      	str	r3, [r7, #12]

	if (n == 0)
 80146f0:	687b      	ldr	r3, [r7, #4]
 80146f2:	2b00      	cmp	r3, #0
 80146f4:	d102      	bne.n	80146fc <floorLog2+0x18>
		return -1;
 80146f6:	f04f 33ff 	mov.w	r3, #4294967295
 80146fa:	e02b      	b.n	8014754 <floorLog2+0x70>

	if (n >= 1<<16) { n >>= 16; pos += 16; }
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014702:	d305      	bcc.n	8014710 <floorLog2+0x2c>
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	0c1b      	lsrs	r3, r3, #16
 8014708:	607b      	str	r3, [r7, #4]
 801470a:	68fb      	ldr	r3, [r7, #12]
 801470c:	3310      	adds	r3, #16
 801470e:	60fb      	str	r3, [r7, #12]
	if (n >= 1<< 8) { n >>=  8; pos +=  8; }
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	2bff      	cmp	r3, #255	; 0xff
 8014714:	d905      	bls.n	8014722 <floorLog2+0x3e>
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	0a1b      	lsrs	r3, r3, #8
 801471a:	607b      	str	r3, [r7, #4]
 801471c:	68fb      	ldr	r3, [r7, #12]
 801471e:	3308      	adds	r3, #8
 8014720:	60fb      	str	r3, [r7, #12]
	if (n >= 1<< 4) { n >>=  4; pos +=  4; }
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	2b0f      	cmp	r3, #15
 8014726:	d905      	bls.n	8014734 <floorLog2+0x50>
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	091b      	lsrs	r3, r3, #4
 801472c:	607b      	str	r3, [r7, #4]
 801472e:	68fb      	ldr	r3, [r7, #12]
 8014730:	3304      	adds	r3, #4
 8014732:	60fb      	str	r3, [r7, #12]
	if (n >= 1<< 2) { n >>=  2; pos +=  2; }
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	2b03      	cmp	r3, #3
 8014738:	d905      	bls.n	8014746 <floorLog2+0x62>
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	089b      	lsrs	r3, r3, #2
 801473e:	607b      	str	r3, [r7, #4]
 8014740:	68fb      	ldr	r3, [r7, #12]
 8014742:	3302      	adds	r3, #2
 8014744:	60fb      	str	r3, [r7, #12]
	if (n >= 1<< 1) {           pos +=  1; }
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	2b01      	cmp	r3, #1
 801474a:	d902      	bls.n	8014752 <floorLog2+0x6e>
 801474c:	68fb      	ldr	r3, [r7, #12]
 801474e:	3301      	adds	r3, #1
 8014750:	60fb      	str	r3, [r7, #12]
	return pos;
 8014752:	68fb      	ldr	r3, [r7, #12]
}
 8014754:	4618      	mov	r0, r3
 8014756:	3714      	adds	r7, #20
 8014758:	46bd      	mov	sp, r7
 801475a:	bc80      	pop	{r7}
 801475c:	4770      	bx	lr

0801475e <EUI48toEUI64>:

#include "ptpd.h"

/* Convert EUI48 format to EUI64 */
void EUI48toEUI64(const octet_t * eui48, octet_t * eui64)
{
 801475e:	b480      	push	{r7}
 8014760:	b083      	sub	sp, #12
 8014762:	af00      	add	r7, sp, #0
 8014764:	6078      	str	r0, [r7, #4]
 8014766:	6039      	str	r1, [r7, #0]
	eui64[0] = eui48[0];
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	781a      	ldrb	r2, [r3, #0]
 801476c:	683b      	ldr	r3, [r7, #0]
 801476e:	701a      	strb	r2, [r3, #0]
	eui64[1] = eui48[1];
 8014770:	683b      	ldr	r3, [r7, #0]
 8014772:	3301      	adds	r3, #1
 8014774:	687a      	ldr	r2, [r7, #4]
 8014776:	7852      	ldrb	r2, [r2, #1]
 8014778:	701a      	strb	r2, [r3, #0]
	eui64[2] = eui48[2];
 801477a:	683b      	ldr	r3, [r7, #0]
 801477c:	3302      	adds	r3, #2
 801477e:	687a      	ldr	r2, [r7, #4]
 8014780:	7892      	ldrb	r2, [r2, #2]
 8014782:	701a      	strb	r2, [r3, #0]
	eui64[3] = 0xff;
 8014784:	683b      	ldr	r3, [r7, #0]
 8014786:	3303      	adds	r3, #3
 8014788:	22ff      	movs	r2, #255	; 0xff
 801478a:	701a      	strb	r2, [r3, #0]
	eui64[4] = 0xfe;
 801478c:	683b      	ldr	r3, [r7, #0]
 801478e:	3304      	adds	r3, #4
 8014790:	22fe      	movs	r2, #254	; 0xfe
 8014792:	701a      	strb	r2, [r3, #0]
	eui64[5] = eui48[3];
 8014794:	683b      	ldr	r3, [r7, #0]
 8014796:	3305      	adds	r3, #5
 8014798:	687a      	ldr	r2, [r7, #4]
 801479a:	78d2      	ldrb	r2, [r2, #3]
 801479c:	701a      	strb	r2, [r3, #0]
	eui64[6] = eui48[4];
 801479e:	683b      	ldr	r3, [r7, #0]
 80147a0:	3306      	adds	r3, #6
 80147a2:	687a      	ldr	r2, [r7, #4]
 80147a4:	7912      	ldrb	r2, [r2, #4]
 80147a6:	701a      	strb	r2, [r3, #0]
	eui64[7] = eui48[5];
 80147a8:	683b      	ldr	r3, [r7, #0]
 80147aa:	3307      	adds	r3, #7
 80147ac:	687a      	ldr	r2, [r7, #4]
 80147ae:	7952      	ldrb	r2, [r2, #5]
 80147b0:	701a      	strb	r2, [r3, #0]
}
 80147b2:	bf00      	nop
 80147b4:	370c      	adds	r7, #12
 80147b6:	46bd      	mov	sp, r7
 80147b8:	bc80      	pop	{r7}
 80147ba:	4770      	bx	lr

080147bc <initData>:

/* Init ptpClock with run time values (initialization constants are in constants.h) */
void initData(PtpClock *ptpClock)
{
 80147bc:	b580      	push	{r7, lr}
 80147be:	b088      	sub	sp, #32
 80147c0:	af00      	add	r7, sp, #0
 80147c2:	6078      	str	r0, [r7, #4]
	RunTimeOpts * rtOpts;

	DBG("initData\n");
 80147c4:	f107 0314 	add.w	r3, r7, #20
 80147c8:	4618      	mov	r0, r3
 80147ca:	f004 ffa7 	bl	801971c <getTime>
 80147ce:	697b      	ldr	r3, [r7, #20]
 80147d0:	69ba      	ldr	r2, [r7, #24]
 80147d2:	4619      	mov	r1, r3
 80147d4:	4858      	ldr	r0, [pc, #352]	; (8014938 <initData+0x17c>)
 80147d6:	f005 ffa1 	bl	801a71c <iprintf>
 80147da:	4858      	ldr	r0, [pc, #352]	; (801493c <initData+0x180>)
 80147dc:	f006 f812 	bl	801a804 <puts>
	rtOpts = ptpClock->rtOpts;
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
 80147e6:	61fb      	str	r3, [r7, #28]

	/* Default data set */
	ptpClock->defaultDS.twoStepFlag = DEFAULT_TWO_STEP_FLAG;
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	2201      	movs	r2, #1
 80147ec:	701a      	strb	r2, [r3, #0]

	/* Init clockIdentity with MAC address and 0xFF and 0xFE. see spec 7.5.2.2.2 */
	if ((CLOCK_IDENTITY_LENGTH == 8) && (PTP_UUID_LENGTH == 6))
	{
			DBGVV("initData: EUI48toEUI64\n");
			EUI48toEUI64(ptpClock->portUuidField, ptpClock->defaultDS.clockIdentity);
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	f203 4211 	addw	r2, r3, #1041	; 0x411
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	3301      	adds	r3, #1
 80147f8:	4619      	mov	r1, r3
 80147fa:	4610      	mov	r0, r2
 80147fc:	f7ff ffaf 	bl	801475e <EUI48toEUI64>
	else
	{
			ERROR("initData: UUID length is not valid");
	}

	ptpClock->defaultDS.numberPorts = NUMBER_PORTS;
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	2201      	movs	r2, #1
 8014804:	815a      	strh	r2, [r3, #10]

	ptpClock->defaultDS.clockQuality.clockAccuracy = rtOpts->clockQuality.clockAccuracy;
 8014806:	69fb      	ldr	r3, [r7, #28]
 8014808:	78da      	ldrb	r2, [r3, #3]
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	735a      	strb	r2, [r3, #13]
	ptpClock->defaultDS.clockQuality.clockClass = rtOpts->clockQuality.clockClass;
 801480e:	69fb      	ldr	r3, [r7, #28]
 8014810:	789a      	ldrb	r2, [r3, #2]
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	731a      	strb	r2, [r3, #12]
	ptpClock->defaultDS.clockQuality.offsetScaledLogVariance = rtOpts->clockQuality.offsetScaledLogVariance;
 8014816:	69fb      	ldr	r3, [r7, #28]
 8014818:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	81da      	strh	r2, [r3, #14]

	ptpClock->defaultDS.priority1 = rtOpts->priority1;
 8014820:	69fb      	ldr	r3, [r7, #28]
 8014822:	799a      	ldrb	r2, [r3, #6]
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	741a      	strb	r2, [r3, #16]
	ptpClock->defaultDS.priority2 = rtOpts->priority2;
 8014828:	69fb      	ldr	r3, [r7, #28]
 801482a:	79da      	ldrb	r2, [r3, #7]
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	745a      	strb	r2, [r3, #17]

	ptpClock->defaultDS.domainNumber = rtOpts->domainNumber;
 8014830:	69fb      	ldr	r3, [r7, #28]
 8014832:	7a1a      	ldrb	r2, [r3, #8]
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	749a      	strb	r2, [r3, #18]
	ptpClock->defaultDS.slaveOnly = rtOpts->slaveOnly;
 8014838:	69fb      	ldr	r3, [r7, #28]
 801483a:	7a5a      	ldrb	r2, [r3, #9]
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	74da      	strb	r2, [r3, #19]

	/* Port configuration data set */

	/* PortIdentity Init (portNumber = 1 for an ardinary clock spec 7.5.2.3)*/
	memcpy(ptpClock->portDS.portIdentity.clockIdentity, ptpClock->defaultDS.clockIdentity, CLOCK_IDENTITY_LENGTH);
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	f103 0058 	add.w	r0, r3, #88	; 0x58
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	3301      	adds	r3, #1
 801484a:	2208      	movs	r2, #8
 801484c:	4619      	mov	r1, r3
 801484e:	f005 f922 	bl	8019a96 <memcpy>
	ptpClock->portDS.portIdentity.portNumber = NUMBER_PORTS;
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	2201      	movs	r2, #1
 8014856:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	ptpClock->portDS.logMinDelayReqInterval = DEFAULT_DELAYREQ_INTERVAL;
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	2200      	movs	r2, #0
 801485e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
	ptpClock->portDS.peerMeanPathDelay.seconds = ptpClock->portDS.peerMeanPathDelay.nanoseconds = 0;
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	2200      	movs	r2, #0
 8014866:	669a      	str	r2, [r3, #104]	; 0x68
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	665a      	str	r2, [r3, #100]	; 0x64
	ptpClock->portDS.logAnnounceInterval = rtOpts->announceInterval;
 8014870:	69fb      	ldr	r3, [r7, #28]
 8014872:	f993 2000 	ldrsb.w	r2, [r3]
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	ptpClock->portDS.announceReceiptTimeout = DEFAULT_ANNOUNCE_RECEIPT_TIMEOUT;
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	2206      	movs	r2, #6
 8014880:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
	ptpClock->portDS.logSyncInterval = rtOpts->syncInterval;
 8014884:	69fb      	ldr	r3, [r7, #28]
 8014886:	f993 2001 	ldrsb.w	r2, [r3, #1]
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
	ptpClock->portDS.delayMechanism = rtOpts->delayMechanism;
 8014890:	69fb      	ldr	r3, [r7, #28]
 8014892:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
	ptpClock->portDS.logMinPdelayReqInterval = DEFAULT_PDELAYREQ_INTERVAL;
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	2201      	movs	r2, #1
 80148a0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	ptpClock->portDS.versionNumber = VERSION_PTP;
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	2202      	movs	r2, #2
 80148a8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

	/* Init other stuff */
	ptpClock->foreignMasterDS.count = 0;
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	2200      	movs	r2, #0
 80148b0:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	ptpClock->foreignMasterDS.capacity = rtOpts->maxForeignRecords;
 80148b4:	69fb      	ldr	r3, [r7, #28]
 80148b6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

	ptpClock->inboundLatency = rtOpts->inboundLatency;
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	69fa      	ldr	r2, [r7, #28]
 80148c4:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 80148c8:	3220      	adds	r2, #32
 80148ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80148ce:	e883 0003 	stmia.w	r3, {r0, r1}
	ptpClock->outboundLatency = rtOpts->outboundLatency;
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	69fa      	ldr	r2, [r7, #28]
 80148d6:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80148da:	3228      	adds	r2, #40	; 0x28
 80148dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80148e0:	e883 0003 	stmia.w	r3, {r0, r1}

	ptpClock->servo.sDelay = rtOpts->servo.sDelay;
 80148e4:	69fb      	ldr	r3, [r7, #28]
 80148e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
	ptpClock->servo.sOffset = rtOpts->servo.sOffset;
 80148ee:	69fb      	ldr	r3, [r7, #28]
 80148f0:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	f8a3 2438 	strh.w	r2, [r3, #1080]	; 0x438
	ptpClock->servo.ai = rtOpts->servo.ai;
 80148fa:	69fb      	ldr	r3, [r7, #28]
 80148fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
	ptpClock->servo.ap = rtOpts->servo.ap;
 8014904:	69fb      	ldr	r3, [r7, #28]
 8014906:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
	ptpClock->servo.noAdjust = rtOpts->servo.noAdjust;
 801490e:	69fb      	ldr	r3, [r7, #28]
 8014910:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	f883 2429 	strb.w	r2, [r3, #1065]	; 0x429
	ptpClock->servo.noResetClock = rtOpts->servo.noResetClock;
 801491a:	69fb      	ldr	r3, [r7, #28]
 801491c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	f883 2428 	strb.w	r2, [r3, #1064]	; 0x428

	ptpClock->stats = rtOpts->stats;
 8014926:	69fb      	ldr	r3, [r7, #28]
 8014928:	7b9a      	ldrb	r2, [r3, #14]
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
}
 8014930:	bf00      	nop
 8014932:	3720      	adds	r7, #32
 8014934:	46bd      	mov	sp, r7
 8014936:	bd80      	pop	{r7, pc}
 8014938:	08020554 	.word	0x08020554
 801493c:	08020564 	.word	0x08020564

08014940 <isSamePortIdentity>:

bool isSamePortIdentity(const PortIdentity * A, const PortIdentity * B)
{
 8014940:	b580      	push	{r7, lr}
 8014942:	b082      	sub	sp, #8
 8014944:	af00      	add	r7, sp, #0
 8014946:	6078      	str	r0, [r7, #4]
 8014948:	6039      	str	r1, [r7, #0]
	return (bool)(0 == memcmp(A->clockIdentity, B->clockIdentity, CLOCK_IDENTITY_LENGTH) && (A->portNumber == B->portNumber));
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	6839      	ldr	r1, [r7, #0]
 801494e:	2208      	movs	r2, #8
 8014950:	4618      	mov	r0, r3
 8014952:	f005 f891 	bl	8019a78 <memcmp>
 8014956:	4603      	mov	r3, r0
 8014958:	2b00      	cmp	r3, #0
 801495a:	d109      	bne.n	8014970 <isSamePortIdentity+0x30>
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8014962:	683b      	ldr	r3, [r7, #0]
 8014964:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8014968:	429a      	cmp	r2, r3
 801496a:	d101      	bne.n	8014970 <isSamePortIdentity+0x30>
 801496c:	2301      	movs	r3, #1
 801496e:	e000      	b.n	8014972 <isSamePortIdentity+0x32>
 8014970:	2300      	movs	r3, #0
 8014972:	f003 0301 	and.w	r3, r3, #1
 8014976:	b2db      	uxtb	r3, r3
}
 8014978:	4618      	mov	r0, r3
 801497a:	3708      	adds	r7, #8
 801497c:	46bd      	mov	sp, r7
 801497e:	bd80      	pop	{r7, pc}

08014980 <addForeign>:

void addForeign(PtpClock *ptpClock, const MsgHeader *header, const MsgAnnounce * announce)
{
 8014980:	b5b0      	push	{r4, r5, r7, lr}
 8014982:	b08c      	sub	sp, #48	; 0x30
 8014984:	af00      	add	r7, sp, #0
 8014986:	60f8      	str	r0, [r7, #12]
 8014988:	60b9      	str	r1, [r7, #8]
 801498a:	607a      	str	r2, [r7, #4]
	int i, j;
	bool found = FALSE;
 801498c:	2300      	movs	r3, #0
 801498e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	j = ptpClock->foreignMasterDS.best;
 8014992:	68fb      	ldr	r3, [r7, #12]
 8014994:	f9b3 307e 	ldrsh.w	r3, [r3, #126]	; 0x7e
 8014998:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check if Foreign master is already known */
	for (i = 0; i < ptpClock->foreignMasterDS.count; i++)
 801499a:	2300      	movs	r3, #0
 801499c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801499e:	e061      	b.n	8014a64 <addForeign+0xe4>
	{
		if (isSamePortIdentity(&header->sourcePortIdentity, &ptpClock->foreignMasterDS.records[j].foreignMasterPortIdentity))
 80149a0:	68bb      	ldr	r3, [r7, #8]
 80149a2:	f103 0018 	add.w	r0, r3, #24
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80149aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149ac:	2158      	movs	r1, #88	; 0x58
 80149ae:	fb01 f303 	mul.w	r3, r1, r3
 80149b2:	4413      	add	r3, r2
 80149b4:	4619      	mov	r1, r3
 80149b6:	f7ff ffc3 	bl	8014940 <isSamePortIdentity>
 80149ba:	4603      	mov	r3, r0
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d043      	beq.n	8014a48 <addForeign+0xc8>
		{
			/* Foreign Master is already in Foreignmaster data set */
			ptpClock->foreignMasterDS.records[j].foreignMasterAnnounceMessages++;
 80149c0:	68fb      	ldr	r3, [r7, #12]
 80149c2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80149c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80149c6:	2158      	movs	r1, #88	; 0x58
 80149c8:	fb01 f303 	mul.w	r3, r1, r3
 80149cc:	4413      	add	r3, r2
 80149ce:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 80149d2:	b292      	uxth	r2, r2
 80149d4:	3201      	adds	r2, #1
 80149d6:	b292      	uxth	r2, r2
 80149d8:	b212      	sxth	r2, r2
 80149da:	815a      	strh	r2, [r3, #10]
			found = TRUE;
 80149dc:	2301      	movs	r3, #1
 80149de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			DBGV("addForeign: AnnounceMessage incremented \n");
 80149e2:	f107 031c 	add.w	r3, r7, #28
 80149e6:	4618      	mov	r0, r3
 80149e8:	f004 fe98 	bl	801971c <getTime>
 80149ec:	69fb      	ldr	r3, [r7, #28]
 80149ee:	6a3a      	ldr	r2, [r7, #32]
 80149f0:	4619      	mov	r1, r3
 80149f2:	4862      	ldr	r0, [pc, #392]	; (8014b7c <addForeign+0x1fc>)
 80149f4:	f005 fe92 	bl	801a71c <iprintf>
 80149f8:	4861      	ldr	r0, [pc, #388]	; (8014b80 <addForeign+0x200>)
 80149fa:	f005 ff03 	bl	801a804 <puts>
			ptpClock->foreignMasterDS.records[j].header = *header;
 80149fe:	68fb      	ldr	r3, [r7, #12]
 8014a00:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8014a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a04:	2158      	movs	r1, #88	; 0x58
 8014a06:	fb01 f303 	mul.w	r3, r1, r3
 8014a0a:	4413      	add	r3, r2
 8014a0c:	68ba      	ldr	r2, [r7, #8]
 8014a0e:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8014a12:	4615      	mov	r5, r2
 8014a14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014a16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014a18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014a1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014a1c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014a20:	e884 0003 	stmia.w	r4, {r0, r1}
			ptpClock->foreignMasterDS.records[j].announce = *announce;
 8014a24:	68fb      	ldr	r3, [r7, #12]
 8014a26:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8014a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a2a:	2158      	movs	r1, #88	; 0x58
 8014a2c:	fb01 f303 	mul.w	r3, r1, r3
 8014a30:	4413      	add	r3, r2
 8014a32:	687a      	ldr	r2, [r7, #4]
 8014a34:	f103 040c 	add.w	r4, r3, #12
 8014a38:	4615      	mov	r5, r2
 8014a3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014a3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014a3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014a40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014a42:	682b      	ldr	r3, [r5, #0]
 8014a44:	6023      	str	r3, [r4, #0]
			break;
 8014a46:	e014      	b.n	8014a72 <addForeign+0xf2>
		}

		j = (j + 1) % ptpClock->foreignMasterDS.count;
 8014a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a4a:	3301      	adds	r3, #1
 8014a4c:	68fa      	ldr	r2, [r7, #12]
 8014a4e:	f9b2 2078 	ldrsh.w	r2, [r2, #120]	; 0x78
 8014a52:	fb93 f1f2 	sdiv	r1, r3, r2
 8014a56:	fb02 f201 	mul.w	r2, r2, r1
 8014a5a:	1a9b      	subs	r3, r3, r2
 8014a5c:	62bb      	str	r3, [r7, #40]	; 0x28
	for (i = 0; i < ptpClock->foreignMasterDS.count; i++)
 8014a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a60:	3301      	adds	r3, #1
 8014a62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014a64:	68fb      	ldr	r3, [r7, #12]
 8014a66:	f9b3 3078 	ldrsh.w	r3, [r3, #120]	; 0x78
 8014a6a:	461a      	mov	r2, r3
 8014a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a6e:	4293      	cmp	r3, r2
 8014a70:	db96      	blt.n	80149a0 <addForeign+0x20>
	}

	/* New Foreign Master */
	if (!found)
 8014a72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014a76:	f083 0301 	eor.w	r3, r3, #1
 8014a7a:	b2db      	uxtb	r3, r3
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	d079      	beq.n	8014b74 <addForeign+0x1f4>
	{
		if (ptpClock->foreignMasterDS.count < ptpClock->foreignMasterDS.capacity)
 8014a80:	68fb      	ldr	r3, [r7, #12]
 8014a82:	f9b3 2078 	ldrsh.w	r2, [r3, #120]	; 0x78
 8014a86:	68fb      	ldr	r3, [r7, #12]
 8014a88:	f9b3 307a 	ldrsh.w	r3, [r3, #122]	; 0x7a
 8014a8c:	429a      	cmp	r2, r3
 8014a8e:	da09      	bge.n	8014aa4 <addForeign+0x124>
		{
			ptpClock->foreignMasterDS.count++;
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	f9b3 3078 	ldrsh.w	r3, [r3, #120]	; 0x78
 8014a96:	b29b      	uxth	r3, r3
 8014a98:	3301      	adds	r3, #1
 8014a9a:	b29b      	uxth	r3, r3
 8014a9c:	b21a      	sxth	r2, r3
 8014a9e:	68fb      	ldr	r3, [r7, #12]
 8014aa0:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
		}

		j = ptpClock->foreignMasterDS.i;
 8014aa4:	68fb      	ldr	r3, [r7, #12]
 8014aa6:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8014aaa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Copy new foreign master data set from Announce message */
		memcpy(ptpClock->foreignMasterDS.records[j].foreignMasterPortIdentity.clockIdentity, header->sourcePortIdentity.clockIdentity, CLOCK_IDENTITY_LENGTH);
 8014aac:	68fb      	ldr	r3, [r7, #12]
 8014aae:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8014ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ab2:	2158      	movs	r1, #88	; 0x58
 8014ab4:	fb01 f303 	mul.w	r3, r1, r3
 8014ab8:	4413      	add	r3, r2
 8014aba:	4618      	mov	r0, r3
 8014abc:	68bb      	ldr	r3, [r7, #8]
 8014abe:	3318      	adds	r3, #24
 8014ac0:	2208      	movs	r2, #8
 8014ac2:	4619      	mov	r1, r3
 8014ac4:	f004 ffe7 	bl	8019a96 <memcpy>
		ptpClock->foreignMasterDS.records[j].foreignMasterPortIdentity.portNumber = header->sourcePortIdentity.portNumber;
 8014ac8:	68fb      	ldr	r3, [r7, #12]
 8014aca:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8014acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ace:	2158      	movs	r1, #88	; 0x58
 8014ad0:	fb01 f303 	mul.w	r3, r1, r3
 8014ad4:	4413      	add	r3, r2
 8014ad6:	68ba      	ldr	r2, [r7, #8]
 8014ad8:	f9b2 2020 	ldrsh.w	r2, [r2, #32]
 8014adc:	811a      	strh	r2, [r3, #8]
		ptpClock->foreignMasterDS.records[j].foreignMasterAnnounceMessages = 0;
 8014ade:	68fb      	ldr	r3, [r7, #12]
 8014ae0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8014ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ae4:	2158      	movs	r1, #88	; 0x58
 8014ae6:	fb01 f303 	mul.w	r3, r1, r3
 8014aea:	4413      	add	r3, r2
 8014aec:	2200      	movs	r2, #0
 8014aee:	815a      	strh	r2, [r3, #10]

		/* Header and announce field of each Foreign Master are usefull to run Best Master Clock Algorithm */
		ptpClock->foreignMasterDS.records[j].header = *header;
 8014af0:	68fb      	ldr	r3, [r7, #12]
 8014af2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8014af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014af6:	2158      	movs	r1, #88	; 0x58
 8014af8:	fb01 f303 	mul.w	r3, r1, r3
 8014afc:	4413      	add	r3, r2
 8014afe:	68ba      	ldr	r2, [r7, #8]
 8014b00:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8014b04:	4615      	mov	r5, r2
 8014b06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014b08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014b0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014b0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014b0e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014b12:	e884 0003 	stmia.w	r4, {r0, r1}
		ptpClock->foreignMasterDS.records[j].announce = *announce;
 8014b16:	68fb      	ldr	r3, [r7, #12]
 8014b18:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8014b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b1c:	2158      	movs	r1, #88	; 0x58
 8014b1e:	fb01 f303 	mul.w	r3, r1, r3
 8014b22:	4413      	add	r3, r2
 8014b24:	687a      	ldr	r2, [r7, #4]
 8014b26:	f103 040c 	add.w	r4, r3, #12
 8014b2a:	4615      	mov	r5, r2
 8014b2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014b2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014b30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014b32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8014b34:	682b      	ldr	r3, [r5, #0]
 8014b36:	6023      	str	r3, [r4, #0]
		DBGV("addForeign: New foreign Master added \n");
 8014b38:	f107 0314 	add.w	r3, r7, #20
 8014b3c:	4618      	mov	r0, r3
 8014b3e:	f004 fded 	bl	801971c <getTime>
 8014b42:	697b      	ldr	r3, [r7, #20]
 8014b44:	69ba      	ldr	r2, [r7, #24]
 8014b46:	4619      	mov	r1, r3
 8014b48:	480c      	ldr	r0, [pc, #48]	; (8014b7c <addForeign+0x1fc>)
 8014b4a:	f005 fde7 	bl	801a71c <iprintf>
 8014b4e:	480d      	ldr	r0, [pc, #52]	; (8014b84 <addForeign+0x204>)
 8014b50:	f005 fe58 	bl	801a804 <puts>

		ptpClock->foreignMasterDS.i = (ptpClock->foreignMasterDS.i + 1) % ptpClock->foreignMasterDS.capacity;
 8014b54:	68fb      	ldr	r3, [r7, #12]
 8014b56:	f9b3 307c 	ldrsh.w	r3, [r3, #124]	; 0x7c
 8014b5a:	3301      	adds	r3, #1
 8014b5c:	68fa      	ldr	r2, [r7, #12]
 8014b5e:	f9b2 207a 	ldrsh.w	r2, [r2, #122]	; 0x7a
 8014b62:	fb93 f1f2 	sdiv	r1, r3, r2
 8014b66:	fb02 f201 	mul.w	r2, r2, r1
 8014b6a:	1a9b      	subs	r3, r3, r2
 8014b6c:	b21a      	sxth	r2, r3
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	}
}
 8014b74:	bf00      	nop
 8014b76:	3730      	adds	r7, #48	; 0x30
 8014b78:	46bd      	mov	sp, r7
 8014b7a:	bdb0      	pop	{r4, r5, r7, pc}
 8014b7c:	08020570 	.word	0x08020570
 8014b80:	08020580 	.word	0x08020580
 8014b84:	080205ac 	.word	0x080205ac

08014b88 <m1>:

#define m2 m1

/* Local clock is becoming Master. Table 13 (9.3.5) of the spec.*/
void m1(PtpClock *ptpClock)
{
 8014b88:	b580      	push	{r7, lr}
 8014b8a:	b084      	sub	sp, #16
 8014b8c:	af00      	add	r7, sp, #0
 8014b8e:	6078      	str	r0, [r7, #4]
	DBGV("bmc: m1\n");
 8014b90:	f107 0308 	add.w	r3, r7, #8
 8014b94:	4618      	mov	r0, r3
 8014b96:	f004 fdc1 	bl	801971c <getTime>
 8014b9a:	68bb      	ldr	r3, [r7, #8]
 8014b9c:	68fa      	ldr	r2, [r7, #12]
 8014b9e:	4619      	mov	r1, r3
 8014ba0:	4836      	ldr	r0, [pc, #216]	; (8014c7c <m1+0xf4>)
 8014ba2:	f005 fdbb 	bl	801a71c <iprintf>
 8014ba6:	4836      	ldr	r0, [pc, #216]	; (8014c80 <m1+0xf8>)
 8014ba8:	f005 fe2c 	bl	801a804 <puts>

	/* Current data set update */
	ptpClock->currentDS.stepsRemoved = 0;
 8014bac:	687b      	ldr	r3, [r7, #4]
 8014bae:	2200      	movs	r2, #0
 8014bb0:	829a      	strh	r2, [r3, #20]
	ptpClock->currentDS.offsetFromMaster.seconds = ptpClock->currentDS.offsetFromMaster.nanoseconds = 0;
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	2200      	movs	r2, #0
 8014bb6:	61da      	str	r2, [r3, #28]
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	69da      	ldr	r2, [r3, #28]
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	619a      	str	r2, [r3, #24]
	ptpClock->currentDS.meanPathDelay.seconds = ptpClock->currentDS.meanPathDelay.nanoseconds = 0;
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	2200      	movs	r2, #0
 8014bc4:	625a      	str	r2, [r3, #36]	; 0x24
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	621a      	str	r2, [r3, #32]

	/* Parent data set */
	memcpy(ptpClock->parentDS.parentPortIdentity.clockIdentity, ptpClock->defaultDS.clockIdentity, CLOCK_IDENTITY_LENGTH);
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	3301      	adds	r3, #1
 8014bd8:	2208      	movs	r2, #8
 8014bda:	4619      	mov	r1, r3
 8014bdc:	f004 ff5b 	bl	8019a96 <memcpy>
	ptpClock->parentDS.parentPortIdentity.portNumber = 0;
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	2200      	movs	r2, #0
 8014be4:	861a      	strh	r2, [r3, #48]	; 0x30
	memcpy(ptpClock->parentDS.grandmasterIdentity, ptpClock->defaultDS.clockIdentity, CLOCK_IDENTITY_LENGTH);
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	3301      	adds	r3, #1
 8014bf0:	2208      	movs	r2, #8
 8014bf2:	4619      	mov	r1, r3
 8014bf4:	f004 ff4f 	bl	8019a96 <memcpy>
	ptpClock->parentDS.grandmasterClockQuality.clockAccuracy = ptpClock->defaultDS.clockQuality.clockAccuracy;
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	7b5a      	ldrb	r2, [r3, #13]
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	ptpClock->parentDS.grandmasterClockQuality.clockClass = ptpClock->defaultDS.clockQuality.clockClass;
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	7b1a      	ldrb	r2, [r3, #12]
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	ptpClock->parentDS.grandmasterClockQuality.offsetScaledLogVariance = ptpClock->defaultDS.clockQuality.offsetScaledLogVariance;
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8014c12:	687b      	ldr	r3, [r7, #4]
 8014c14:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	ptpClock->parentDS.grandmasterPriority1 = ptpClock->defaultDS.priority1;
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	7c1a      	ldrb	r2, [r3, #16]
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	ptpClock->parentDS.grandmasterPriority2 = ptpClock->defaultDS.priority2;
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	7c5a      	ldrb	r2, [r3, #17]
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

	/* Time Properties data set */
	ptpClock->timePropertiesDS.currentUtcOffset = ptpClock->rtOpts->currentUtcOffset;
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
 8014c32:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	ptpClock->timePropertiesDS.currentUtcOffsetValid = DEFAULT_UTC_VALID;
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	2200      	movs	r2, #0
 8014c40:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	ptpClock->timePropertiesDS.leap59 = FALSE;
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	2200      	movs	r2, #0
 8014c48:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	ptpClock->timePropertiesDS.leap61 = FALSE;
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	2200      	movs	r2, #0
 8014c50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	ptpClock->timePropertiesDS.timeTraceable = DEFAULT_TIME_TRACEABLE;
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	2200      	movs	r2, #0
 8014c58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	ptpClock->timePropertiesDS.frequencyTraceable = DEFAULT_FREQUENCY_TRACEABLE;
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	2200      	movs	r2, #0
 8014c60:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	ptpClock->timePropertiesDS.ptpTimescale = (bool)(DEFAULT_TIMESCALE == PTP_TIMESCALE);
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	2200      	movs	r2, #0
 8014c68:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	ptpClock->timePropertiesDS.timeSource = DEFAULT_TIME_SOURCE;
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	22a0      	movs	r2, #160	; 0xa0
 8014c70:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
}
 8014c74:	bf00      	nop
 8014c76:	3710      	adds	r7, #16
 8014c78:	46bd      	mov	sp, r7
 8014c7a:	bd80      	pop	{r7, pc}
 8014c7c:	08020570 	.word	0x08020570
 8014c80:	080205d4 	.word	0x080205d4

08014c84 <p1>:

void p1(PtpClock *ptpClock)
{
 8014c84:	b580      	push	{r7, lr}
 8014c86:	b084      	sub	sp, #16
 8014c88:	af00      	add	r7, sp, #0
 8014c8a:	6078      	str	r0, [r7, #4]
	DBGV("bmc: p1\n");
 8014c8c:	f107 0308 	add.w	r3, r7, #8
 8014c90:	4618      	mov	r0, r3
 8014c92:	f004 fd43 	bl	801971c <getTime>
 8014c96:	68bb      	ldr	r3, [r7, #8]
 8014c98:	68fa      	ldr	r2, [r7, #12]
 8014c9a:	4619      	mov	r1, r3
 8014c9c:	4804      	ldr	r0, [pc, #16]	; (8014cb0 <p1+0x2c>)
 8014c9e:	f005 fd3d 	bl	801a71c <iprintf>
 8014ca2:	4804      	ldr	r0, [pc, #16]	; (8014cb4 <p1+0x30>)
 8014ca4:	f005 fdae 	bl	801a804 <puts>
}
 8014ca8:	bf00      	nop
 8014caa:	3710      	adds	r7, #16
 8014cac:	46bd      	mov	sp, r7
 8014cae:	bd80      	pop	{r7, pc}
 8014cb0:	08020570 	.word	0x08020570
 8014cb4:	080205dc 	.word	0x080205dc

08014cb8 <s1>:

/* Local clock is synchronized to Ebest Table 16 (9.3.5) of the spec */
void s1(PtpClock *ptpClock, const MsgHeader *header, const MsgAnnounce *announce)
{
 8014cb8:	b580      	push	{r7, lr}
 8014cba:	b088      	sub	sp, #32
 8014cbc:	af00      	add	r7, sp, #0
 8014cbe:	60f8      	str	r0, [r7, #12]
 8014cc0:	60b9      	str	r1, [r7, #8]
 8014cc2:	607a      	str	r2, [r7, #4]
	bool isFromCurrentParent;

	DBGV("bmc: s1\n");
 8014cc4:	f107 0314 	add.w	r3, r7, #20
 8014cc8:	4618      	mov	r0, r3
 8014cca:	f004 fd27 	bl	801971c <getTime>
 8014cce:	697b      	ldr	r3, [r7, #20]
 8014cd0:	69ba      	ldr	r2, [r7, #24]
 8014cd2:	4619      	mov	r1, r3
 8014cd4:	4858      	ldr	r0, [pc, #352]	; (8014e38 <s1+0x180>)
 8014cd6:	f005 fd21 	bl	801a71c <iprintf>
 8014cda:	4858      	ldr	r0, [pc, #352]	; (8014e3c <s1+0x184>)
 8014cdc:	f005 fd92 	bl	801a804 <puts>

	/* Current DS */
	ptpClock->currentDS.stepsRemoved = announce->stepsRemoved + 1;
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8014ce6:	b29b      	uxth	r3, r3
 8014ce8:	3301      	adds	r3, #1
 8014cea:	b29b      	uxth	r3, r3
 8014cec:	b21a      	sxth	r2, r3
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	829a      	strh	r2, [r3, #20]

	isFromCurrentParent = isSamePortIdentity(&ptpClock->parentDS.parentPortIdentity, &header->sourcePortIdentity);
 8014cf2:	68fb      	ldr	r3, [r7, #12]
 8014cf4:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8014cf8:	68bb      	ldr	r3, [r7, #8]
 8014cfa:	3318      	adds	r3, #24
 8014cfc:	4619      	mov	r1, r3
 8014cfe:	4610      	mov	r0, r2
 8014d00:	f7ff fe1e 	bl	8014940 <isSamePortIdentity>
 8014d04:	4603      	mov	r3, r0
 8014d06:	77fb      	strb	r3, [r7, #31]

	if (!isFromCurrentParent)
 8014d08:	7ffb      	ldrb	r3, [r7, #31]
 8014d0a:	f083 0301 	eor.w	r3, r3, #1
 8014d0e:	b2db      	uxtb	r3, r3
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d007      	beq.n	8014d24 <s1+0x6c>
	{
			setFlag(ptpClock->events, MASTER_CLOCK_CHANGED);
 8014d14:	68fb      	ldr	r3, [r7, #12]
 8014d16:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
 8014d1a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8014d1e:	68fb      	ldr	r3, [r7, #12]
 8014d20:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
	}

	/* Parent DS */
	memcpy(ptpClock->parentDS.parentPortIdentity.clockIdentity, header->sourcePortIdentity.clockIdentity, CLOCK_IDENTITY_LENGTH);
 8014d24:	68fb      	ldr	r3, [r7, #12]
 8014d26:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8014d2a:	68bb      	ldr	r3, [r7, #8]
 8014d2c:	3318      	adds	r3, #24
 8014d2e:	2208      	movs	r2, #8
 8014d30:	4619      	mov	r1, r3
 8014d32:	f004 feb0 	bl	8019a96 <memcpy>
	ptpClock->parentDS.parentPortIdentity.portNumber = header->sourcePortIdentity.portNumber;
 8014d36:	68bb      	ldr	r3, [r7, #8]
 8014d38:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 8014d3c:	68fb      	ldr	r3, [r7, #12]
 8014d3e:	861a      	strh	r2, [r3, #48]	; 0x30
	memcpy(ptpClock->parentDS.grandmasterIdentity, announce->grandmasterIdentity, CLOCK_IDENTITY_LENGTH);
 8014d40:	68fb      	ldr	r3, [r7, #12]
 8014d42:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	3315      	adds	r3, #21
 8014d4a:	2208      	movs	r2, #8
 8014d4c:	4619      	mov	r1, r3
 8014d4e:	f004 fea2 	bl	8019a96 <memcpy>
	ptpClock->parentDS.grandmasterClockQuality.clockAccuracy = announce->grandmasterClockQuality.clockAccuracy;
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	7c5a      	ldrb	r2, [r3, #17]
 8014d56:	68fb      	ldr	r3, [r7, #12]
 8014d58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	ptpClock->parentDS.grandmasterClockQuality.clockClass = announce->grandmasterClockQuality.clockClass;
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	7c1a      	ldrb	r2, [r3, #16]
 8014d60:	68fb      	ldr	r3, [r7, #12]
 8014d62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	ptpClock->parentDS.grandmasterClockQuality.offsetScaledLogVariance = announce->grandmasterClockQuality.offsetScaledLogVariance;
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8014d6c:	68fb      	ldr	r3, [r7, #12]
 8014d6e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	ptpClock->parentDS.grandmasterPriority1 = announce->grandmasterPriority1;
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	7b9a      	ldrb	r2, [r3, #14]
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	ptpClock->parentDS.grandmasterPriority2 = announce->grandmasterPriority2;
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	7d1a      	ldrb	r2, [r3, #20]
 8014d80:	68fb      	ldr	r3, [r7, #12]
 8014d82:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

	/* Timeproperties DS */
	ptpClock->timePropertiesDS.currentUtcOffset = announce->currentUtcOffset;
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8014d8c:	68fb      	ldr	r3, [r7, #12]
 8014d8e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	ptpClock->timePropertiesDS.currentUtcOffsetValid = getFlag(header->flagField[1], FLAG1_UTC_OFFSET_VALID);
 8014d92:	68bb      	ldr	r3, [r7, #8]
 8014d94:	7a1b      	ldrb	r3, [r3, #8]
 8014d96:	f003 0304 	and.w	r3, r3, #4
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	bf14      	ite	ne
 8014d9e:	2301      	movne	r3, #1
 8014da0:	2300      	moveq	r3, #0
 8014da2:	b2da      	uxtb	r2, r3
 8014da4:	68fb      	ldr	r3, [r7, #12]
 8014da6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	ptpClock->timePropertiesDS.leap59 = getFlag(header->flagField[1], FLAG1_LEAP59);
 8014daa:	68bb      	ldr	r3, [r7, #8]
 8014dac:	7a1b      	ldrb	r3, [r3, #8]
 8014dae:	f003 0302 	and.w	r3, r3, #2
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	bf14      	ite	ne
 8014db6:	2301      	movne	r3, #1
 8014db8:	2300      	moveq	r3, #0
 8014dba:	b2da      	uxtb	r2, r3
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
	ptpClock->timePropertiesDS.leap61 = getFlag(header->flagField[1], FLAG1_LEAP61);
 8014dc2:	68bb      	ldr	r3, [r7, #8]
 8014dc4:	7a1b      	ldrb	r3, [r3, #8]
 8014dc6:	f003 0301 	and.w	r3, r3, #1
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	bf14      	ite	ne
 8014dce:	2301      	movne	r3, #1
 8014dd0:	2300      	moveq	r3, #0
 8014dd2:	b2da      	uxtb	r2, r3
 8014dd4:	68fb      	ldr	r3, [r7, #12]
 8014dd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	ptpClock->timePropertiesDS.timeTraceable = getFlag(header->flagField[1], FLAG1_TIME_TRACEABLE);
 8014dda:	68bb      	ldr	r3, [r7, #8]
 8014ddc:	7a1b      	ldrb	r3, [r3, #8]
 8014dde:	f003 0310 	and.w	r3, r3, #16
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	bf14      	ite	ne
 8014de6:	2301      	movne	r3, #1
 8014de8:	2300      	moveq	r3, #0
 8014dea:	b2da      	uxtb	r2, r3
 8014dec:	68fb      	ldr	r3, [r7, #12]
 8014dee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	ptpClock->timePropertiesDS.frequencyTraceable = getFlag(header->flagField[1], FLAG1_FREQUENCY_TRACEABLE);
 8014df2:	68bb      	ldr	r3, [r7, #8]
 8014df4:	7a1b      	ldrb	r3, [r3, #8]
 8014df6:	f003 0320 	and.w	r3, r3, #32
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	bf14      	ite	ne
 8014dfe:	2301      	movne	r3, #1
 8014e00:	2300      	moveq	r3, #0
 8014e02:	b2da      	uxtb	r2, r3
 8014e04:	68fb      	ldr	r3, [r7, #12]
 8014e06:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	ptpClock->timePropertiesDS.ptpTimescale = getFlag(header->flagField[1], FLAG1_PTP_TIMESCALE);
 8014e0a:	68bb      	ldr	r3, [r7, #8]
 8014e0c:	7a1b      	ldrb	r3, [r3, #8]
 8014e0e:	f003 0308 	and.w	r3, r3, #8
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	bf14      	ite	ne
 8014e16:	2301      	movne	r3, #1
 8014e18:	2300      	moveq	r3, #0
 8014e1a:	b2da      	uxtb	r2, r3
 8014e1c:	68fb      	ldr	r3, [r7, #12]
 8014e1e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	ptpClock->timePropertiesDS.timeSource = announce->timeSource;
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	f893 2020 	ldrb.w	r2, [r3, #32]
 8014e28:	68fb      	ldr	r3, [r7, #12]
 8014e2a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
}
 8014e2e:	bf00      	nop
 8014e30:	3720      	adds	r7, #32
 8014e32:	46bd      	mov	sp, r7
 8014e34:	bd80      	pop	{r7, pc}
 8014e36:	bf00      	nop
 8014e38:	08020570 	.word	0x08020570
 8014e3c:	080205e4 	.word	0x080205e4

08014e40 <copyD0>:

/**
 * \brief Copy local data set into header and announce message. 9.3.4 table 12
 */
void copyD0(MsgHeader *header, MsgAnnounce *announce, PtpClock *ptpClock)
{
 8014e40:	b580      	push	{r7, lr}
 8014e42:	b084      	sub	sp, #16
 8014e44:	af00      	add	r7, sp, #0
 8014e46:	60f8      	str	r0, [r7, #12]
 8014e48:	60b9      	str	r1, [r7, #8]
 8014e4a:	607a      	str	r2, [r7, #4]
	announce->grandmasterPriority1 = ptpClock->defaultDS.priority1;
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	7c1a      	ldrb	r2, [r3, #16]
 8014e50:	68bb      	ldr	r3, [r7, #8]
 8014e52:	739a      	strb	r2, [r3, #14]
	memcpy(announce->grandmasterIdentity, ptpClock->defaultDS.clockIdentity, CLOCK_IDENTITY_LENGTH);
 8014e54:	68bb      	ldr	r3, [r7, #8]
 8014e56:	f103 0015 	add.w	r0, r3, #21
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	3301      	adds	r3, #1
 8014e5e:	2208      	movs	r2, #8
 8014e60:	4619      	mov	r1, r3
 8014e62:	f004 fe18 	bl	8019a96 <memcpy>
	announce->grandmasterClockQuality.clockClass = ptpClock->defaultDS.clockQuality.clockClass;
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	7b1a      	ldrb	r2, [r3, #12]
 8014e6a:	68bb      	ldr	r3, [r7, #8]
 8014e6c:	741a      	strb	r2, [r3, #16]
	announce->grandmasterClockQuality.clockAccuracy = ptpClock->defaultDS.clockQuality.clockAccuracy;
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	7b5a      	ldrb	r2, [r3, #13]
 8014e72:	68bb      	ldr	r3, [r7, #8]
 8014e74:	745a      	strb	r2, [r3, #17]
	announce->grandmasterClockQuality.offsetScaledLogVariance = ptpClock->defaultDS.clockQuality.offsetScaledLogVariance;
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8014e7c:	68bb      	ldr	r3, [r7, #8]
 8014e7e:	825a      	strh	r2, [r3, #18]
	announce->grandmasterPriority2 = ptpClock->defaultDS.priority2;
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	7c5a      	ldrb	r2, [r3, #17]
 8014e84:	68bb      	ldr	r3, [r7, #8]
 8014e86:	751a      	strb	r2, [r3, #20]
	announce->stepsRemoved = 0;
 8014e88:	68bb      	ldr	r3, [r7, #8]
 8014e8a:	2200      	movs	r2, #0
 8014e8c:	83da      	strh	r2, [r3, #30]
	memcpy(header->sourcePortIdentity.clockIdentity, ptpClock->defaultDS.clockIdentity, CLOCK_IDENTITY_LENGTH);
 8014e8e:	68fb      	ldr	r3, [r7, #12]
 8014e90:	f103 0018 	add.w	r0, r3, #24
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	3301      	adds	r3, #1
 8014e98:	2208      	movs	r2, #8
 8014e9a:	4619      	mov	r1, r3
 8014e9c:	f004 fdfb 	bl	8019a96 <memcpy>
}
 8014ea0:	bf00      	nop
 8014ea2:	3710      	adds	r7, #16
 8014ea4:	46bd      	mov	sp, r7
 8014ea6:	bd80      	pop	{r7, pc}

08014ea8 <bmcDataSetComparison>:
	}                                                                     \

/* Data set comparison bewteen two foreign masters (9.3.4 fig 27) return similar to memcmp() */
int8_t bmcDataSetComparison(MsgHeader *headerA, MsgAnnounce *announceA,
															MsgHeader *headerB, MsgAnnounce *announceB, PtpClock *ptpClock)
{
 8014ea8:	b580      	push	{r7, lr}
 8014eaa:	b08c      	sub	sp, #48	; 0x30
 8014eac:	af00      	add	r7, sp, #0
 8014eae:	60f8      	str	r0, [r7, #12]
 8014eb0:	60b9      	str	r1, [r7, #8]
 8014eb2:	607a      	str	r2, [r7, #4]
 8014eb4:	603b      	str	r3, [r7, #0]
	int grandmasterIdentityComp;
	short comp = 0;
 8014eb6:	2300      	movs	r3, #0
 8014eb8:	85fb      	strh	r3, [r7, #46]	; 0x2e

	DBGV("bmcDataSetComparison\n");
 8014eba:	f107 0320 	add.w	r3, r7, #32
 8014ebe:	4618      	mov	r0, r3
 8014ec0:	f004 fc2c 	bl	801971c <getTime>
 8014ec4:	6a3b      	ldr	r3, [r7, #32]
 8014ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014ec8:	4619      	mov	r1, r3
 8014eca:	4886      	ldr	r0, [pc, #536]	; (80150e4 <bmcDataSetComparison+0x23c>)
 8014ecc:	f005 fc26 	bl	801a71c <iprintf>
 8014ed0:	4885      	ldr	r0, [pc, #532]	; (80150e8 <bmcDataSetComparison+0x240>)
 8014ed2:	f005 fc97 	bl	801a804 <puts>
	/* Identity comparison */

	/* GM identity of A == GM identity of B */
	/* TODO: zkontrolovat memcmp, co vraci za vysledky !*/
	grandmasterIdentityComp = memcmp(announceA->grandmasterIdentity, announceB->grandmasterIdentity, CLOCK_IDENTITY_LENGTH);
 8014ed6:	68bb      	ldr	r3, [r7, #8]
 8014ed8:	f103 0015 	add.w	r0, r3, #21
 8014edc:	683b      	ldr	r3, [r7, #0]
 8014ede:	3315      	adds	r3, #21
 8014ee0:	2208      	movs	r2, #8
 8014ee2:	4619      	mov	r1, r3
 8014ee4:	f004 fdc8 	bl	8019a78 <memcmp>
 8014ee8:	62b8      	str	r0, [r7, #40]	; 0x28

	if (0 != grandmasterIdentityComp)
 8014eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	d063      	beq.n	8014fb8 <bmcDataSetComparison+0x110>
	{
		/* Algoritgm part 1 - Figure 27 */
		COMPARE_AB_RETURN_BETTER(grandmasterPriority1,"grandmaster.Priority1");
 8014ef0:	68bb      	ldr	r3, [r7, #8]
 8014ef2:	7b9a      	ldrb	r2, [r3, #14]
 8014ef4:	683b      	ldr	r3, [r7, #0]
 8014ef6:	7b9b      	ldrb	r3, [r3, #14]
 8014ef8:	429a      	cmp	r2, r3
 8014efa:	d902      	bls.n	8014f02 <bmcDataSetComparison+0x5a>
 8014efc:	f04f 33ff 	mov.w	r3, #4294967295
 8014f00:	e0ec      	b.n	80150dc <bmcDataSetComparison+0x234>
 8014f02:	683b      	ldr	r3, [r7, #0]
 8014f04:	7b9a      	ldrb	r2, [r3, #14]
 8014f06:	68bb      	ldr	r3, [r7, #8]
 8014f08:	7b9b      	ldrb	r3, [r3, #14]
 8014f0a:	429a      	cmp	r2, r3
 8014f0c:	d901      	bls.n	8014f12 <bmcDataSetComparison+0x6a>
 8014f0e:	2301      	movs	r3, #1
 8014f10:	e0e4      	b.n	80150dc <bmcDataSetComparison+0x234>
		COMPARE_AB_RETURN_BETTER(grandmasterClockQuality.clockClass,"grandmaster.clockClass");
 8014f12:	68bb      	ldr	r3, [r7, #8]
 8014f14:	7c1a      	ldrb	r2, [r3, #16]
 8014f16:	683b      	ldr	r3, [r7, #0]
 8014f18:	7c1b      	ldrb	r3, [r3, #16]
 8014f1a:	429a      	cmp	r2, r3
 8014f1c:	d902      	bls.n	8014f24 <bmcDataSetComparison+0x7c>
 8014f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8014f22:	e0db      	b.n	80150dc <bmcDataSetComparison+0x234>
 8014f24:	683b      	ldr	r3, [r7, #0]
 8014f26:	7c1a      	ldrb	r2, [r3, #16]
 8014f28:	68bb      	ldr	r3, [r7, #8]
 8014f2a:	7c1b      	ldrb	r3, [r3, #16]
 8014f2c:	429a      	cmp	r2, r3
 8014f2e:	d901      	bls.n	8014f34 <bmcDataSetComparison+0x8c>
 8014f30:	2301      	movs	r3, #1
 8014f32:	e0d3      	b.n	80150dc <bmcDataSetComparison+0x234>
		COMPARE_AB_RETURN_BETTER(grandmasterClockQuality.clockAccuracy,"grandmaster.clockAccuracy");
 8014f34:	68bb      	ldr	r3, [r7, #8]
 8014f36:	7c5a      	ldrb	r2, [r3, #17]
 8014f38:	683b      	ldr	r3, [r7, #0]
 8014f3a:	7c5b      	ldrb	r3, [r3, #17]
 8014f3c:	429a      	cmp	r2, r3
 8014f3e:	d902      	bls.n	8014f46 <bmcDataSetComparison+0x9e>
 8014f40:	f04f 33ff 	mov.w	r3, #4294967295
 8014f44:	e0ca      	b.n	80150dc <bmcDataSetComparison+0x234>
 8014f46:	683b      	ldr	r3, [r7, #0]
 8014f48:	7c5a      	ldrb	r2, [r3, #17]
 8014f4a:	68bb      	ldr	r3, [r7, #8]
 8014f4c:	7c5b      	ldrb	r3, [r3, #17]
 8014f4e:	429a      	cmp	r2, r3
 8014f50:	d901      	bls.n	8014f56 <bmcDataSetComparison+0xae>
 8014f52:	2301      	movs	r3, #1
 8014f54:	e0c2      	b.n	80150dc <bmcDataSetComparison+0x234>
		COMPARE_AB_RETURN_BETTER(grandmasterClockQuality.offsetScaledLogVariance,"grandmaster.Variance");
 8014f56:	68bb      	ldr	r3, [r7, #8]
 8014f58:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8014f5c:	683b      	ldr	r3, [r7, #0]
 8014f5e:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8014f62:	429a      	cmp	r2, r3
 8014f64:	dd02      	ble.n	8014f6c <bmcDataSetComparison+0xc4>
 8014f66:	f04f 33ff 	mov.w	r3, #4294967295
 8014f6a:	e0b7      	b.n	80150dc <bmcDataSetComparison+0x234>
 8014f6c:	683b      	ldr	r3, [r7, #0]
 8014f6e:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8014f72:	68bb      	ldr	r3, [r7, #8]
 8014f74:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8014f78:	429a      	cmp	r2, r3
 8014f7a:	dd01      	ble.n	8014f80 <bmcDataSetComparison+0xd8>
 8014f7c:	2301      	movs	r3, #1
 8014f7e:	e0ad      	b.n	80150dc <bmcDataSetComparison+0x234>
		COMPARE_AB_RETURN_BETTER(grandmasterPriority2,"grandmaster.Priority2");
 8014f80:	68bb      	ldr	r3, [r7, #8]
 8014f82:	7d1a      	ldrb	r2, [r3, #20]
 8014f84:	683b      	ldr	r3, [r7, #0]
 8014f86:	7d1b      	ldrb	r3, [r3, #20]
 8014f88:	429a      	cmp	r2, r3
 8014f8a:	d902      	bls.n	8014f92 <bmcDataSetComparison+0xea>
 8014f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8014f90:	e0a4      	b.n	80150dc <bmcDataSetComparison+0x234>
 8014f92:	683b      	ldr	r3, [r7, #0]
 8014f94:	7d1a      	ldrb	r2, [r3, #20]
 8014f96:	68bb      	ldr	r3, [r7, #8]
 8014f98:	7d1b      	ldrb	r3, [r3, #20]
 8014f9a:	429a      	cmp	r2, r3
 8014f9c:	d901      	bls.n	8014fa2 <bmcDataSetComparison+0xfa>
 8014f9e:	2301      	movs	r3, #1
 8014fa0:	e09c      	b.n	80150dc <bmcDataSetComparison+0x234>

		if (grandmasterIdentityComp > 0)
 8014fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	dd02      	ble.n	8014fae <bmcDataSetComparison+0x106>
		{
			DBGVV("bmcDataSetComparison: grandmaster.Identity: B better then A\n");
			return B_better_then_A;
 8014fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8014fac:	e096      	b.n	80150dc <bmcDataSetComparison+0x234>
		}
		else if (grandmasterIdentityComp < 0)
 8014fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	da01      	bge.n	8014fb8 <bmcDataSetComparison+0x110>
		{
			DBGVV("bmcDataSetComparison: grandmaster.Identity: A better then B\n");
			return A_better_then_B;
 8014fb4:	2301      	movs	r3, #1
 8014fb6:	e091      	b.n	80150dc <bmcDataSetComparison+0x234>
		}
	}

	/* Algoritgm part 2 - Figure 28 */
	if ((announceA->stepsRemoved) > (announceB->stepsRemoved + 1))
 8014fb8:	68bb      	ldr	r3, [r7, #8]
 8014fba:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8014fbe:	461a      	mov	r2, r3
 8014fc0:	683b      	ldr	r3, [r7, #0]
 8014fc2:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8014fc6:	3301      	adds	r3, #1
 8014fc8:	429a      	cmp	r2, r3
 8014fca:	dd02      	ble.n	8014fd2 <bmcDataSetComparison+0x12a>
	{
		DBGVV("bmcDataSetComparison: stepsRemoved: B better then A\n");
		return B_better_then_A;
 8014fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8014fd0:	e084      	b.n	80150dc <bmcDataSetComparison+0x234>
	}

	if ((announceB->stepsRemoved) > (announceA->stepsRemoved + 1))
 8014fd2:	683b      	ldr	r3, [r7, #0]
 8014fd4:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8014fd8:	461a      	mov	r2, r3
 8014fda:	68bb      	ldr	r3, [r7, #8]
 8014fdc:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8014fe0:	3301      	adds	r3, #1
 8014fe2:	429a      	cmp	r2, r3
 8014fe4:	dd01      	ble.n	8014fea <bmcDataSetComparison+0x142>
	{
		DBGVV("bmcDataSetComparison: stepsRemoved: A better then B\n");
		return A_better_then_B;
 8014fe6:	2301      	movs	r3, #1
 8014fe8:	e078      	b.n	80150dc <bmcDataSetComparison+0x234>
	}

	if ((announceA->stepsRemoved) > (announceB->stepsRemoved))
 8014fea:	68bb      	ldr	r3, [r7, #8]
 8014fec:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 8014ff0:	683b      	ldr	r3, [r7, #0]
 8014ff2:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8014ff6:	429a      	cmp	r2, r3
 8014ff8:	dd1a      	ble.n	8015030 <bmcDataSetComparison+0x188>
	{
		comp = memcmp(headerA->sourcePortIdentity.clockIdentity, ptpClock->portDS.portIdentity.clockIdentity, CLOCK_IDENTITY_LENGTH);
 8014ffa:	68fb      	ldr	r3, [r7, #12]
 8014ffc:	f103 0018 	add.w	r0, r3, #24
 8015000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015002:	3358      	adds	r3, #88	; 0x58
 8015004:	2208      	movs	r2, #8
 8015006:	4619      	mov	r1, r3
 8015008:	f004 fd36 	bl	8019a78 <memcmp>
 801500c:	4603      	mov	r3, r0
 801500e:	85fb      	strh	r3, [r7, #46]	; 0x2e

		if (comp > 0)
 8015010:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8015014:	2b00      	cmp	r3, #0
 8015016:	dd02      	ble.n	801501e <bmcDataSetComparison+0x176>
		{
			/* reciever < sender */
			DBGVV("bmcDataSetComparison: PortIdentity: B better then A\n");
			return B_better_then_A;
 8015018:	f04f 33ff 	mov.w	r3, #4294967295
 801501c:	e05e      	b.n	80150dc <bmcDataSetComparison+0x234>
		}
		else if (comp < 0)
 801501e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8015022:	2b00      	cmp	r3, #0
 8015024:	da02      	bge.n	801502c <bmcDataSetComparison+0x184>
		{
			/* reciever > sender */
			DBGVV("bmcDataSetComparison: PortIdentity: B better by topology then A\n");
			return B_better_by_topology_then_A;
 8015026:	f04f 33ff 	mov.w	r3, #4294967295
 801502a:	e057      	b.n	80150dc <bmcDataSetComparison+0x234>
		}
		else
		{
			DBGVV("bmcDataSetComparison: ERROR 1\n");
			return ERROR_1;
 801502c:	2300      	movs	r3, #0
 801502e:	e055      	b.n	80150dc <bmcDataSetComparison+0x234>
		}
	}
	else if ((announceA->stepsRemoved) < (announceB->stepsRemoved))
 8015030:	68bb      	ldr	r3, [r7, #8]
 8015032:	f9b3 201e 	ldrsh.w	r2, [r3, #30]
 8015036:	683b      	ldr	r3, [r7, #0]
 8015038:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 801503c:	429a      	cmp	r2, r3
 801503e:	da26      	bge.n	801508e <bmcDataSetComparison+0x1e6>
	{
		comp = memcmp(headerB->sourcePortIdentity.clockIdentity, ptpClock->portDS.portIdentity.clockIdentity, CLOCK_IDENTITY_LENGTH);
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	f103 0018 	add.w	r0, r3, #24
 8015046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015048:	3358      	adds	r3, #88	; 0x58
 801504a:	2208      	movs	r2, #8
 801504c:	4619      	mov	r1, r3
 801504e:	f004 fd13 	bl	8019a78 <memcmp>
 8015052:	4603      	mov	r3, r0
 8015054:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (comp > 0)
 8015056:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 801505a:	2b00      	cmp	r3, #0
 801505c:	dd01      	ble.n	8015062 <bmcDataSetComparison+0x1ba>
		{
			/* reciever < sender */
			DBGVV("bmcDataSetComparison: PortIdentity: A better then B\n");
			return A_better_then_B;
 801505e:	2301      	movs	r3, #1
 8015060:	e03c      	b.n	80150dc <bmcDataSetComparison+0x234>
		}
		else if (comp < 0)
 8015062:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8015066:	2b00      	cmp	r3, #0
 8015068:	da01      	bge.n	801506e <bmcDataSetComparison+0x1c6>
		{
			/* reciever > sender */
			DBGVV("bmcDataSetComparison: PortIdentity: A better by topology then B\n");
			return A_better_by_topology_then_B;
 801506a:	2301      	movs	r3, #1
 801506c:	e036      	b.n	80150dc <bmcDataSetComparison+0x234>
		}
		else
		{
			DBGV("bmcDataSetComparison: ERROR 1\n");
 801506e:	f107 0318 	add.w	r3, r7, #24
 8015072:	4618      	mov	r0, r3
 8015074:	f004 fb52 	bl	801971c <getTime>
 8015078:	69bb      	ldr	r3, [r7, #24]
 801507a:	69fa      	ldr	r2, [r7, #28]
 801507c:	4619      	mov	r1, r3
 801507e:	4819      	ldr	r0, [pc, #100]	; (80150e4 <bmcDataSetComparison+0x23c>)
 8015080:	f005 fb4c 	bl	801a71c <iprintf>
 8015084:	4819      	ldr	r0, [pc, #100]	; (80150ec <bmcDataSetComparison+0x244>)
 8015086:	f005 fbbd 	bl	801a804 <puts>
			return ERROR_1;
 801508a:	2300      	movs	r3, #0
 801508c:	e026      	b.n	80150dc <bmcDataSetComparison+0x234>
		}
	}

	comp = memcmp(headerA->sourcePortIdentity.clockIdentity, headerB->sourcePortIdentity.clockIdentity, CLOCK_IDENTITY_LENGTH);
 801508e:	68fb      	ldr	r3, [r7, #12]
 8015090:	f103 0018 	add.w	r0, r3, #24
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	3318      	adds	r3, #24
 8015098:	2208      	movs	r2, #8
 801509a:	4619      	mov	r1, r3
 801509c:	f004 fcec 	bl	8019a78 <memcmp>
 80150a0:	4603      	mov	r3, r0
 80150a2:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (comp > 0)
 80150a4:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	dd02      	ble.n	80150b2 <bmcDataSetComparison+0x20a>
	{
		/* A > B */
		DBGVV("bmcDataSetComparison: sourcePortIdentity: B better by topology then A\n");
		return B_better_by_topology_then_A;
 80150ac:	f04f 33ff 	mov.w	r3, #4294967295
 80150b0:	e014      	b.n	80150dc <bmcDataSetComparison+0x234>
	}
	else if (comp < 0)
 80150b2:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	da01      	bge.n	80150be <bmcDataSetComparison+0x216>
	{
		/* B > A */
		DBGVV("bmcDataSetComparison: sourcePortIdentity: A better by topology then B\n");
		return A_better_by_topology_then_B;
 80150ba:	2301      	movs	r3, #1
 80150bc:	e00e      	b.n	80150dc <bmcDataSetComparison+0x234>
	}

	/* compare port numbers of recievers of A and B - same as we have only one port */
	DBGV("bmcDataSetComparison: ERROR 2\n");
 80150be:	f107 0310 	add.w	r3, r7, #16
 80150c2:	4618      	mov	r0, r3
 80150c4:	f004 fb2a 	bl	801971c <getTime>
 80150c8:	693b      	ldr	r3, [r7, #16]
 80150ca:	697a      	ldr	r2, [r7, #20]
 80150cc:	4619      	mov	r1, r3
 80150ce:	4805      	ldr	r0, [pc, #20]	; (80150e4 <bmcDataSetComparison+0x23c>)
 80150d0:	f005 fb24 	bl	801a71c <iprintf>
 80150d4:	4806      	ldr	r0, [pc, #24]	; (80150f0 <bmcDataSetComparison+0x248>)
 80150d6:	f005 fb95 	bl	801a804 <puts>
	return ERROR_2;
 80150da:	2300      	movs	r3, #0
}
 80150dc:	4618      	mov	r0, r3
 80150de:	3730      	adds	r7, #48	; 0x30
 80150e0:	46bd      	mov	sp, r7
 80150e2:	bd80      	pop	{r7, pc}
 80150e4:	08020570 	.word	0x08020570
 80150e8:	080205ec 	.word	0x080205ec
 80150ec:	08020604 	.word	0x08020604
 80150f0:	08020624 	.word	0x08020624

080150f4 <bmcStateDecision>:

/* State decision algorithm 9.3.3 Fig 26 */
uint8_t bmcStateDecision(MsgHeader *header, MsgAnnounce *announce, PtpClock *ptpClock)
{
 80150f4:	b580      	push	{r7, lr}
 80150f6:	b08a      	sub	sp, #40	; 0x28
 80150f8:	af02      	add	r7, sp, #8
 80150fa:	60f8      	str	r0, [r7, #12]
 80150fc:	60b9      	str	r1, [r7, #8]
 80150fe:	607a      	str	r2, [r7, #4]
	int comp;

	if ((!ptpClock->foreignMasterDS.count) && (ptpClock->portDS.portState == PTP_LISTENING))
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	f9b3 3078 	ldrsh.w	r3, [r3, #120]	; 0x78
 8015106:	2b00      	cmp	r3, #0
 8015108:	d106      	bne.n	8015118 <bmcStateDecision+0x24>
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8015110:	2b03      	cmp	r3, #3
 8015112:	d101      	bne.n	8015118 <bmcStateDecision+0x24>
	{
		return PTP_LISTENING;
 8015114:	2303      	movs	r3, #3
 8015116:	e045      	b.n	80151a4 <bmcStateDecision+0xb0>
	}

	copyD0(&ptpClock->msgTmpHeader, &ptpClock->msgTmp.announce, ptpClock);
 8015118:	687b      	ldr	r3, [r7, #4]
 801511a:	f103 0080 	add.w	r0, r3, #128	; 0x80
 801511e:	687b      	ldr	r3, [r7, #4]
 8015120:	33a8      	adds	r3, #168	; 0xa8
 8015122:	687a      	ldr	r2, [r7, #4]
 8015124:	4619      	mov	r1, r3
 8015126:	f7ff fe8b 	bl	8014e40 <copyD0>

	comp = bmcDataSetComparison(&ptpClock->msgTmpHeader, &ptpClock->msgTmp.announce, header, announce, ptpClock);
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	f103 0080 	add.w	r0, r3, #128	; 0x80
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	f103 01a8 	add.w	r1, r3, #168	; 0xa8
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	9300      	str	r3, [sp, #0]
 801513a:	68bb      	ldr	r3, [r7, #8]
 801513c:	68fa      	ldr	r2, [r7, #12]
 801513e:	f7ff feb3 	bl	8014ea8 <bmcDataSetComparison>
 8015142:	4603      	mov	r3, r0
 8015144:	61fb      	str	r3, [r7, #28]

	DBGV("bmcStateDecision: %d\n", comp);
 8015146:	f107 0314 	add.w	r3, r7, #20
 801514a:	4618      	mov	r0, r3
 801514c:	f004 fae6 	bl	801971c <getTime>
 8015150:	697b      	ldr	r3, [r7, #20]
 8015152:	69ba      	ldr	r2, [r7, #24]
 8015154:	4619      	mov	r1, r3
 8015156:	4815      	ldr	r0, [pc, #84]	; (80151ac <bmcStateDecision+0xb8>)
 8015158:	f005 fae0 	bl	801a71c <iprintf>
 801515c:	69f9      	ldr	r1, [r7, #28]
 801515e:	4814      	ldr	r0, [pc, #80]	; (80151b0 <bmcStateDecision+0xbc>)
 8015160:	f005 fadc 	bl	801a71c <iprintf>

	if (ptpClock->defaultDS.clockQuality.clockClass < 128)
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	7b1b      	ldrb	r3, [r3, #12]
 8015168:	b25b      	sxtb	r3, r3
 801516a:	2b00      	cmp	r3, #0
 801516c:	db0c      	blt.n	8015188 <bmcStateDecision+0x94>
	{
		if (A_better_then_B == comp)
 801516e:	69fb      	ldr	r3, [r7, #28]
 8015170:	2b01      	cmp	r3, #1
 8015172:	d104      	bne.n	801517e <bmcStateDecision+0x8a>
		{
			m1(ptpClock);  /* M1 */
 8015174:	6878      	ldr	r0, [r7, #4]
 8015176:	f7ff fd07 	bl	8014b88 <m1>
			return PTP_MASTER;
 801517a:	2305      	movs	r3, #5
 801517c:	e012      	b.n	80151a4 <bmcStateDecision+0xb0>
		}
		else
		{
			p1(ptpClock);
 801517e:	6878      	ldr	r0, [r7, #4]
 8015180:	f7ff fd80 	bl	8014c84 <p1>
			return PTP_PASSIVE;
 8015184:	2306      	movs	r3, #6
 8015186:	e00d      	b.n	80151a4 <bmcStateDecision+0xb0>
		}
	}
	else
	{
		if (A_better_then_B == comp)
 8015188:	69fb      	ldr	r3, [r7, #28]
 801518a:	2b01      	cmp	r3, #1
 801518c:	d104      	bne.n	8015198 <bmcStateDecision+0xa4>
		{
			m2(ptpClock); /* M2 */
 801518e:	6878      	ldr	r0, [r7, #4]
 8015190:	f7ff fcfa 	bl	8014b88 <m1>
			return PTP_MASTER;
 8015194:	2305      	movs	r3, #5
 8015196:	e005      	b.n	80151a4 <bmcStateDecision+0xb0>
		}
		else
		{
			s1(ptpClock, header, announce);
 8015198:	68ba      	ldr	r2, [r7, #8]
 801519a:	68f9      	ldr	r1, [r7, #12]
 801519c:	6878      	ldr	r0, [r7, #4]
 801519e:	f7ff fd8b 	bl	8014cb8 <s1>
			return PTP_SLAVE;
 80151a2:	2308      	movs	r3, #8
		}
	}
}
 80151a4:	4618      	mov	r0, r3
 80151a6:	3720      	adds	r7, #32
 80151a8:	46bd      	mov	sp, r7
 80151aa:	bd80      	pop	{r7, pc}
 80151ac:	08020570 	.word	0x08020570
 80151b0:	08020644 	.word	0x08020644

080151b4 <bmc>:



uint8_t bmc(PtpClock *ptpClock)
{
 80151b4:	b5b0      	push	{r4, r5, r7, lr}
 80151b6:	b088      	sub	sp, #32
 80151b8:	af02      	add	r7, sp, #8
 80151ba:	6078      	str	r0, [r7, #4]
	int16_t i, best;

	/* Starting from i = 1, not necessery to test record[i = 0] against record[best = 0] -> they are the same */
	for (i = 1, best = 0; i < ptpClock->foreignMasterDS.count; i++)
 80151bc:	2301      	movs	r3, #1
 80151be:	82fb      	strh	r3, [r7, #22]
 80151c0:	2300      	movs	r3, #0
 80151c2:	82bb      	strh	r3, [r7, #20]
 80151c4:	e039      	b.n	801523a <bmc+0x86>
	{
		if ((bmcDataSetComparison(&ptpClock->foreignMasterDS.records[i].header, &ptpClock->foreignMasterDS.records[i].announce,
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80151ca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80151ce:	2158      	movs	r1, #88	; 0x58
 80151d0:	fb01 f303 	mul.w	r3, r1, r3
 80151d4:	4413      	add	r3, r2
 80151d6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80151de:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80151e2:	2158      	movs	r1, #88	; 0x58
 80151e4:	fb01 f303 	mul.w	r3, r1, r3
 80151e8:	4413      	add	r3, r2
 80151ea:	f103 040c 	add.w	r4, r3, #12
															&ptpClock->foreignMasterDS.records[best].header, &ptpClock->foreignMasterDS.records[best].announce, ptpClock)) < 0)
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80151f2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80151f6:	2158      	movs	r1, #88	; 0x58
 80151f8:	fb01 f303 	mul.w	r3, r1, r3
 80151fc:	4413      	add	r3, r2
		if ((bmcDataSetComparison(&ptpClock->foreignMasterDS.records[i].header, &ptpClock->foreignMasterDS.records[i].announce,
 80151fe:	f103 0530 	add.w	r5, r3, #48	; 0x30
															&ptpClock->foreignMasterDS.records[best].header, &ptpClock->foreignMasterDS.records[best].announce, ptpClock)) < 0)
 8015202:	687b      	ldr	r3, [r7, #4]
 8015204:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8015206:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801520a:	2158      	movs	r1, #88	; 0x58
 801520c:	fb01 f303 	mul.w	r3, r1, r3
 8015210:	4413      	add	r3, r2
		if ((bmcDataSetComparison(&ptpClock->foreignMasterDS.records[i].header, &ptpClock->foreignMasterDS.records[i].announce,
 8015212:	f103 020c 	add.w	r2, r3, #12
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	9300      	str	r3, [sp, #0]
 801521a:	4613      	mov	r3, r2
 801521c:	462a      	mov	r2, r5
 801521e:	4621      	mov	r1, r4
 8015220:	f7ff fe42 	bl	8014ea8 <bmcDataSetComparison>
 8015224:	4603      	mov	r3, r0
 8015226:	2b00      	cmp	r3, #0
 8015228:	da01      	bge.n	801522e <bmc+0x7a>
		{
			best = i;
 801522a:	8afb      	ldrh	r3, [r7, #22]
 801522c:	82bb      	strh	r3, [r7, #20]
	for (i = 1, best = 0; i < ptpClock->foreignMasterDS.count; i++)
 801522e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015232:	b29b      	uxth	r3, r3
 8015234:	3301      	adds	r3, #1
 8015236:	b29b      	uxth	r3, r3
 8015238:	82fb      	strh	r3, [r7, #22]
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	f9b3 3078 	ldrsh.w	r3, [r3, #120]	; 0x78
 8015240:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015244:	429a      	cmp	r2, r3
 8015246:	dbbe      	blt.n	80151c6 <bmc+0x12>
		}
	}

	DBGV("bmc: best record %d\n", best);
 8015248:	f107 030c 	add.w	r3, r7, #12
 801524c:	4618      	mov	r0, r3
 801524e:	f004 fa65 	bl	801971c <getTime>
 8015252:	68fb      	ldr	r3, [r7, #12]
 8015254:	693a      	ldr	r2, [r7, #16]
 8015256:	4619      	mov	r1, r3
 8015258:	4814      	ldr	r0, [pc, #80]	; (80152ac <bmc+0xf8>)
 801525a:	f005 fa5f 	bl	801a71c <iprintf>
 801525e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8015262:	4619      	mov	r1, r3
 8015264:	4812      	ldr	r0, [pc, #72]	; (80152b0 <bmc+0xfc>)
 8015266:	f005 fa59 	bl	801a71c <iprintf>
	ptpClock->foreignMasterDS.best = best;
 801526a:	687b      	ldr	r3, [r7, #4]
 801526c:	8aba      	ldrh	r2, [r7, #20]
 801526e:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

	return bmcStateDecision(&ptpClock->foreignMasterDS.records[best].header, &ptpClock->foreignMasterDS.records[best].announce, ptpClock);
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8015276:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801527a:	2158      	movs	r1, #88	; 0x58
 801527c:	fb01 f303 	mul.w	r3, r1, r3
 8015280:	4413      	add	r3, r2
 8015282:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 801528a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801528e:	2158      	movs	r1, #88	; 0x58
 8015290:	fb01 f303 	mul.w	r3, r1, r3
 8015294:	4413      	add	r3, r2
 8015296:	330c      	adds	r3, #12
 8015298:	687a      	ldr	r2, [r7, #4]
 801529a:	4619      	mov	r1, r3
 801529c:	f7ff ff2a 	bl	80150f4 <bmcStateDecision>
 80152a0:	4603      	mov	r3, r0
}
 80152a2:	4618      	mov	r0, r3
 80152a4:	3718      	adds	r7, #24
 80152a6:	46bd      	mov	sp, r7
 80152a8:	bdb0      	pop	{r4, r5, r7, pc}
 80152aa:	bf00      	nop
 80152ac:	08020570 	.word	0x08020570
 80152b0:	0802065c 	.word	0x0802065c

080152b4 <stateString>:

static bool doInit(PtpClock*);

#ifdef PTPD_DBG
static char *stateString(uint8_t state)
{
 80152b4:	b480      	push	{r7}
 80152b6:	b083      	sub	sp, #12
 80152b8:	af00      	add	r7, sp, #0
 80152ba:	4603      	mov	r3, r0
 80152bc:	71fb      	strb	r3, [r7, #7]
	switch (state)
 80152be:	79fb      	ldrb	r3, [r7, #7]
 80152c0:	2b08      	cmp	r3, #8
 80152c2:	d827      	bhi.n	8015314 <stateString+0x60>
 80152c4:	a201      	add	r2, pc, #4	; (adr r2, 80152cc <stateString+0x18>)
 80152c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80152ca:	bf00      	nop
 80152cc:	080152f1 	.word	0x080152f1
 80152d0:	080152f5 	.word	0x080152f5
 80152d4:	080152f9 	.word	0x080152f9
 80152d8:	080152fd 	.word	0x080152fd
 80152dc:	08015301 	.word	0x08015301
 80152e0:	08015305 	.word	0x08015305
 80152e4:	08015309 	.word	0x08015309
 80152e8:	0801530d 	.word	0x0801530d
 80152ec:	08015311 	.word	0x08015311
	{
		case PTP_INITIALIZING: return (char *) "PTP_INITIALIZING";
 80152f0:	4b0b      	ldr	r3, [pc, #44]	; (8015320 <stateString+0x6c>)
 80152f2:	e010      	b.n	8015316 <stateString+0x62>
		case PTP_FAULTY: return (char *) "PTP_FAULTY";
 80152f4:	4b0b      	ldr	r3, [pc, #44]	; (8015324 <stateString+0x70>)
 80152f6:	e00e      	b.n	8015316 <stateString+0x62>
		case PTP_DISABLED: return (char *) "PTP_DISABLED";
 80152f8:	4b0b      	ldr	r3, [pc, #44]	; (8015328 <stateString+0x74>)
 80152fa:	e00c      	b.n	8015316 <stateString+0x62>
		case PTP_LISTENING: return (char *) "PTP_LISTENING";
 80152fc:	4b0b      	ldr	r3, [pc, #44]	; (801532c <stateString+0x78>)
 80152fe:	e00a      	b.n	8015316 <stateString+0x62>
		case PTP_PRE_MASTER: return (char *) "PTP_PRE_MASTER";
 8015300:	4b0b      	ldr	r3, [pc, #44]	; (8015330 <stateString+0x7c>)
 8015302:	e008      	b.n	8015316 <stateString+0x62>
		case PTP_MASTER: return (char *) "PTP_MASTER";
 8015304:	4b0b      	ldr	r3, [pc, #44]	; (8015334 <stateString+0x80>)
 8015306:	e006      	b.n	8015316 <stateString+0x62>
		case PTP_PASSIVE: return (char *) "PTP_PASSIVE";
 8015308:	4b0b      	ldr	r3, [pc, #44]	; (8015338 <stateString+0x84>)
 801530a:	e004      	b.n	8015316 <stateString+0x62>
		case PTP_UNCALIBRATED: return (char *) "PTP_UNCALIBRATED";
 801530c:	4b0b      	ldr	r3, [pc, #44]	; (801533c <stateString+0x88>)
 801530e:	e002      	b.n	8015316 <stateString+0x62>
		case PTP_SLAVE: return (char *) "PTP_SLAVE";
 8015310:	4b0b      	ldr	r3, [pc, #44]	; (8015340 <stateString+0x8c>)
 8015312:	e000      	b.n	8015316 <stateString+0x62>
		default: break;
	}
	return (char *) "UNKNOWN";
 8015314:	4b0b      	ldr	r3, [pc, #44]	; (8015344 <stateString+0x90>)
}
 8015316:	4618      	mov	r0, r3
 8015318:	370c      	adds	r7, #12
 801531a:	46bd      	mov	sp, r7
 801531c:	bc80      	pop	{r7}
 801531e:	4770      	bx	lr
 8015320:	08020674 	.word	0x08020674
 8015324:	08020688 	.word	0x08020688
 8015328:	08020694 	.word	0x08020694
 801532c:	080206a4 	.word	0x080206a4
 8015330:	080206b4 	.word	0x080206b4
 8015334:	080206c4 	.word	0x080206c4
 8015338:	080206d0 	.word	0x080206d0
 801533c:	080206dc 	.word	0x080206dc
 8015340:	080206f0 	.word	0x080206f0
 8015344:	080206fc 	.word	0x080206fc

08015348 <toState>:
#endif

/* Perform actions required when leaving 'port_state' and entering 'state' */
void toState(PtpClock *ptpClock, uint8_t state)
{
 8015348:	b580      	push	{r7, lr}
 801534a:	b088      	sub	sp, #32
 801534c:	af00      	add	r7, sp, #0
 801534e:	6078      	str	r0, [r7, #4]
 8015350:	460b      	mov	r3, r1
 8015352:	70fb      	strb	r3, [r7, #3]
	ptpClock->messageActivity = TRUE;
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	2201      	movs	r2, #1
 8015358:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8

	DBG("leaving state %s\n", stateString(ptpClock->portDS.portState));
 801535c:	f107 0318 	add.w	r3, r7, #24
 8015360:	4618      	mov	r0, r3
 8015362:	f004 f9db 	bl	801971c <getTime>
 8015366:	69bb      	ldr	r3, [r7, #24]
 8015368:	69fa      	ldr	r2, [r7, #28]
 801536a:	4619      	mov	r1, r3
 801536c:	48c5      	ldr	r0, [pc, #788]	; (8015684 <toState+0x33c>)
 801536e:	f005 f9d5 	bl	801a71c <iprintf>
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8015378:	4618      	mov	r0, r3
 801537a:	f7ff ff9b 	bl	80152b4 <stateString>
 801537e:	4603      	mov	r3, r0
 8015380:	4619      	mov	r1, r3
 8015382:	48c1      	ldr	r0, [pc, #772]	; (8015688 <toState+0x340>)
 8015384:	f005 f9ca 	bl	801a71c <iprintf>

	/* leaving state tasks */
	switch (ptpClock->portDS.portState)
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 801538e:	3b03      	subs	r3, #3
 8015390:	2b05      	cmp	r3, #5
 8015392:	d851      	bhi.n	8015438 <toState+0xf0>
 8015394:	a201      	add	r2, pc, #4	; (adr r2, 801539c <toState+0x54>)
 8015396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801539a:	bf00      	nop
 801539c:	0801541d 	.word	0x0801541d
 80153a0:	0801542b 	.word	0x0801542b
 80153a4:	080153b5 	.word	0x080153b5
 80153a8:	08015409 	.word	0x08015409
 80153ac:	080153cf 	.word	0x080153cf
 80153b0:	080153cf 	.word	0x080153cf
	{
		case PTP_MASTER:

			initClock(ptpClock);
 80153b4:	6878      	ldr	r0, [r7, #4]
 80153b6:	f003 fd53 	bl	8018e60 <initClock>
			timerStop(SYNC_INTERVAL_TIMER);
 80153ba:	2002      	movs	r0, #2
 80153bc:	f004 faa2 	bl	8019904 <timerStop>
			timerStop(ANNOUNCE_INTERVAL_TIMER);
 80153c0:	2004      	movs	r0, #4
 80153c2:	f004 fa9f 	bl	8019904 <timerStop>
			timerStop(PDELAYREQ_INTERVAL_TIMER);
 80153c6:	2000      	movs	r0, #0
 80153c8:	f004 fa9c 	bl	8019904 <timerStop>
			break;
 80153cc:	e037      	b.n	801543e <toState+0xf6>

		case PTP_UNCALIBRATED:
		case PTP_SLAVE:

			if (state == PTP_UNCALIBRATED || state == PTP_SLAVE)
 80153ce:	78fb      	ldrb	r3, [r7, #3]
 80153d0:	2b07      	cmp	r3, #7
 80153d2:	d033      	beq.n	801543c <toState+0xf4>
 80153d4:	78fb      	ldrb	r3, [r7, #3]
 80153d6:	2b08      	cmp	r3, #8
 80153d8:	d030      	beq.n	801543c <toState+0xf4>
			{
				break;
			}
			timerStop(ANNOUNCE_RECEIPT_TIMER);
 80153da:	2003      	movs	r0, #3
 80153dc:	f004 fa92 	bl	8019904 <timerStop>
			switch (ptpClock->portDS.delayMechanism)
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 80153e6:	2b01      	cmp	r3, #1
 80153e8:	d002      	beq.n	80153f0 <toState+0xa8>
 80153ea:	2b02      	cmp	r3, #2
 80153ec:	d004      	beq.n	80153f8 <toState+0xb0>
				case P2P:
					timerStop(PDELAYREQ_INTERVAL_TIMER);
					break;
				default:
					/* none */
					break;
 80153ee:	e007      	b.n	8015400 <toState+0xb8>
					timerStop(DELAYREQ_INTERVAL_TIMER);
 80153f0:	2001      	movs	r0, #1
 80153f2:	f004 fa87 	bl	8019904 <timerStop>
					break;
 80153f6:	e003      	b.n	8015400 <toState+0xb8>
					timerStop(PDELAYREQ_INTERVAL_TIMER);
 80153f8:	2000      	movs	r0, #0
 80153fa:	f004 fa83 	bl	8019904 <timerStop>
					break;
 80153fe:	bf00      	nop
			}
			initClock(ptpClock);
 8015400:	6878      	ldr	r0, [r7, #4]
 8015402:	f003 fd2d 	bl	8018e60 <initClock>

			break;
 8015406:	e01a      	b.n	801543e <toState+0xf6>

		case PTP_PASSIVE:

			initClock(ptpClock);
 8015408:	6878      	ldr	r0, [r7, #4]
 801540a:	f003 fd29 	bl	8018e60 <initClock>
			timerStop(PDELAYREQ_INTERVAL_TIMER);
 801540e:	2000      	movs	r0, #0
 8015410:	f004 fa78 	bl	8019904 <timerStop>
			timerStop(ANNOUNCE_RECEIPT_TIMER);
 8015414:	2003      	movs	r0, #3
 8015416:	f004 fa75 	bl	8019904 <timerStop>
			break;
 801541a:	e010      	b.n	801543e <toState+0xf6>

		case PTP_LISTENING:

			initClock(ptpClock);
 801541c:	6878      	ldr	r0, [r7, #4]
 801541e:	f003 fd1f 	bl	8018e60 <initClock>
			timerStop(ANNOUNCE_RECEIPT_TIMER);
 8015422:	2003      	movs	r0, #3
 8015424:	f004 fa6e 	bl	8019904 <timerStop>
			break;
 8015428:	e009      	b.n	801543e <toState+0xf6>

		case PTP_PRE_MASTER:

			initClock(ptpClock);
 801542a:	6878      	ldr	r0, [r7, #4]
 801542c:	f003 fd18 	bl	8018e60 <initClock>
			timerStop(QUALIFICATION_TIMEOUT);
 8015430:	2005      	movs	r0, #5
 8015432:	f004 fa67 	bl	8019904 <timerStop>
			break;
 8015436:	e002      	b.n	801543e <toState+0xf6>

		default:
			break;
 8015438:	bf00      	nop
 801543a:	e000      	b.n	801543e <toState+0xf6>
	}

	DBG("entering state %s\n", stateString(state));
 801543c:	bf00      	nop
 801543e:	f107 0310 	add.w	r3, r7, #16
 8015442:	4618      	mov	r0, r3
 8015444:	f004 f96a 	bl	801971c <getTime>
 8015448:	693b      	ldr	r3, [r7, #16]
 801544a:	697a      	ldr	r2, [r7, #20]
 801544c:	4619      	mov	r1, r3
 801544e:	488d      	ldr	r0, [pc, #564]	; (8015684 <toState+0x33c>)
 8015450:	f005 f964 	bl	801a71c <iprintf>
 8015454:	78fb      	ldrb	r3, [r7, #3]
 8015456:	4618      	mov	r0, r3
 8015458:	f7ff ff2c 	bl	80152b4 <stateString>
 801545c:	4603      	mov	r3, r0
 801545e:	4619      	mov	r1, r3
 8015460:	488a      	ldr	r0, [pc, #552]	; (801568c <toState+0x344>)
 8015462:	f005 f95b 	bl	801a71c <iprintf>

	/* Entering state tasks */
	switch (state)
 8015466:	78fb      	ldrb	r3, [r7, #3]
 8015468:	2b08      	cmp	r3, #8
 801546a:	f200 8199 	bhi.w	80157a0 <toState+0x458>
 801546e:	a201      	add	r2, pc, #4	; (adr r2, 8015474 <toState+0x12c>)
 8015470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015474:	08015499 	.word	0x08015499
 8015478:	080154ab 	.word	0x080154ab
 801547c:	080154b5 	.word	0x080154b5
 8015480:	080154bf 	.word	0x080154bf
 8015484:	0801550f 	.word	0x0801550f
 8015488:	0801550f 	.word	0x0801550f
 801548c:	0801561f 	.word	0x0801561f
 8015490:	080156bf 	.word	0x080156bf
 8015494:	08015797 	.word	0x08015797
	{
		case PTP_INITIALIZING:

			ptpClock->portDS.portState = PTP_INITIALIZING;
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	2200      	movs	r2, #0
 801549c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
			ptpClock->recommendedState = PTP_INITIALIZING;
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	2200      	movs	r2, #0
 80154a4:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
			break;
 80154a8:	e17b      	b.n	80157a2 <toState+0x45a>

		case PTP_FAULTY:

			ptpClock->portDS.portState = PTP_FAULTY;
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	2201      	movs	r2, #1
 80154ae:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
			break;
 80154b2:	e176      	b.n	80157a2 <toState+0x45a>

		case PTP_DISABLED:

			ptpClock->portDS.portState = PTP_DISABLED;
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	2202      	movs	r2, #2
 80154b8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
			break;
 80154bc:	e171      	b.n	80157a2 <toState+0x45a>

		case PTP_LISTENING:

			timerStart(ANNOUNCE_RECEIPT_TIMER, (ptpClock->portDS.announceReceiptTimeout) * (pow2ms(ptpClock->portDS.logAnnounceInterval)));
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 80154c4:	4619      	mov	r1, r3
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	dd07      	ble.n	80154e0 <toState+0x198>
 80154d0:	687b      	ldr	r3, [r7, #4]
 80154d2:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 80154d6:	461a      	mov	r2, r3
 80154d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80154dc:	4093      	lsls	r3, r2
 80154de:	e007      	b.n	80154f0 <toState+0x1a8>
 80154e0:	687b      	ldr	r3, [r7, #4]
 80154e2:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 80154e6:	425b      	negs	r3, r3
 80154e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80154ec:	fa42 f303 	asr.w	r3, r2, r3
 80154f0:	fb01 f303 	mul.w	r3, r1, r3
 80154f4:	4619      	mov	r1, r3
 80154f6:	2003      	movs	r0, #3
 80154f8:	f004 fa34 	bl	8019964 <timerStart>
			ptpClock->portDS.portState = PTP_LISTENING;
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	2203      	movs	r2, #3
 8015500:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
			ptpClock->recommendedState = PTP_LISTENING;
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	2203      	movs	r2, #3
 8015508:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
			break;
 801550c:	e149      	b.n	80157a2 <toState+0x45a>
			break;
			*/

		case PTP_MASTER:

			ptpClock->portDS.logMinDelayReqInterval = DEFAULT_DELAYREQ_INTERVAL; /* it may change during slave state */
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	2200      	movs	r2, #0
 8015512:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
			timerStart(SYNC_INTERVAL_TIMER, pow2ms(ptpClock->portDS.logSyncInterval));
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 801551c:	2b00      	cmp	r3, #0
 801551e:	dd07      	ble.n	8015530 <toState+0x1e8>
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 8015526:	461a      	mov	r2, r3
 8015528:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801552c:	4093      	lsls	r3, r2
 801552e:	e007      	b.n	8015540 <toState+0x1f8>
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 8015536:	425b      	negs	r3, r3
 8015538:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801553c:	fa42 f303 	asr.w	r3, r2, r3
 8015540:	4619      	mov	r1, r3
 8015542:	2002      	movs	r0, #2
 8015544:	f004 fa0e 	bl	8019964 <timerStart>
			DBG("SYNC INTERVAL TIMER : %d \n", pow2ms(ptpClock->portDS.logSyncInterval));
 8015548:	f107 0308 	add.w	r3, r7, #8
 801554c:	4618      	mov	r0, r3
 801554e:	f004 f8e5 	bl	801971c <getTime>
 8015552:	68bb      	ldr	r3, [r7, #8]
 8015554:	68fa      	ldr	r2, [r7, #12]
 8015556:	4619      	mov	r1, r3
 8015558:	484a      	ldr	r0, [pc, #296]	; (8015684 <toState+0x33c>)
 801555a:	f005 f8df 	bl	801a71c <iprintf>
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 8015564:	2b00      	cmp	r3, #0
 8015566:	dd07      	ble.n	8015578 <toState+0x230>
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 801556e:	461a      	mov	r2, r3
 8015570:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015574:	4093      	lsls	r3, r2
 8015576:	e007      	b.n	8015588 <toState+0x240>
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 801557e:	425b      	negs	r3, r3
 8015580:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015584:	fa42 f303 	asr.w	r3, r2, r3
 8015588:	4619      	mov	r1, r3
 801558a:	4841      	ldr	r0, [pc, #260]	; (8015690 <toState+0x348>)
 801558c:	f005 f8c6 	bl	801a71c <iprintf>
			timerStart(ANNOUNCE_INTERVAL_TIMER, pow2ms(ptpClock->portDS.logAnnounceInterval));
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 8015596:	2b00      	cmp	r3, #0
 8015598:	dd07      	ble.n	80155aa <toState+0x262>
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 80155a0:	461a      	mov	r2, r3
 80155a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80155a6:	4093      	lsls	r3, r2
 80155a8:	e007      	b.n	80155ba <toState+0x272>
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 80155b0:	425b      	negs	r3, r3
 80155b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80155b6:	fa42 f303 	asr.w	r3, r2, r3
 80155ba:	4619      	mov	r1, r3
 80155bc:	2004      	movs	r0, #4
 80155be:	f004 f9d1 	bl	8019964 <timerStart>

			switch (ptpClock->portDS.delayMechanism)
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 80155c8:	2b01      	cmp	r3, #1
 80155ca:	d022      	beq.n	8015612 <toState+0x2ca>
 80155cc:	2b02      	cmp	r3, #2
 80155ce:	d000      	beq.n	80155d2 <toState+0x28a>
						break;
				case P2P:
						timerStart(PDELAYREQ_INTERVAL_TIMER, getRand(pow2ms(ptpClock->portDS.logMinPdelayReqInterval) + 1));
						break;
				default:
						break;
 80155d0:	e020      	b.n	8015614 <toState+0x2cc>
						timerStart(PDELAYREQ_INTERVAL_TIMER, getRand(pow2ms(ptpClock->portDS.logMinPdelayReqInterval) + 1));
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 80155d8:	2b00      	cmp	r3, #0
 80155da:	dd08      	ble.n	80155ee <toState+0x2a6>
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 80155e2:	461a      	mov	r2, r3
 80155e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80155e8:	4093      	lsls	r3, r2
 80155ea:	3301      	adds	r3, #1
 80155ec:	e008      	b.n	8015600 <toState+0x2b8>
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 80155f4:	425b      	negs	r3, r3
 80155f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80155fa:	fa42 f303 	asr.w	r3, r2, r3
 80155fe:	3301      	adds	r3, #1
 8015600:	4618      	mov	r0, r3
 8015602:	f004 f8c5 	bl	8019790 <getRand>
 8015606:	4603      	mov	r3, r0
 8015608:	4619      	mov	r1, r3
 801560a:	2000      	movs	r0, #0
 801560c:	f004 f9aa 	bl	8019964 <timerStart>
						break;
 8015610:	e000      	b.n	8015614 <toState+0x2cc>
						break;
 8015612:	bf00      	nop
			}

			ptpClock->portDS.portState = PTP_MASTER;
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	2205      	movs	r2, #5
 8015618:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

			break;
 801561c:	e0c1      	b.n	80157a2 <toState+0x45a>

		case PTP_PASSIVE:

			timerStart(ANNOUNCE_RECEIPT_TIMER, (ptpClock->portDS.announceReceiptTimeout)*(pow2ms(ptpClock->portDS.logAnnounceInterval)));
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8015624:	4619      	mov	r1, r3
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 801562c:	2b00      	cmp	r3, #0
 801562e:	dd07      	ble.n	8015640 <toState+0x2f8>
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 8015636:	461a      	mov	r2, r3
 8015638:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801563c:	4093      	lsls	r3, r2
 801563e:	e007      	b.n	8015650 <toState+0x308>
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 8015646:	425b      	negs	r3, r3
 8015648:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801564c:	fa42 f303 	asr.w	r3, r2, r3
 8015650:	fb01 f303 	mul.w	r3, r1, r3
 8015654:	4619      	mov	r1, r3
 8015656:	2003      	movs	r0, #3
 8015658:	f004 f984 	bl	8019964 <timerStart>
			if (ptpClock->portDS.delayMechanism == P2P)
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8015662:	2b02      	cmp	r3, #2
 8015664:	d126      	bne.n	80156b4 <toState+0x36c>
			{
				timerStart(PDELAYREQ_INTERVAL_TIMER, getRand(pow2ms(ptpClock->portDS.logMinPdelayReqInterval + 1)));
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 801566c:	3301      	adds	r3, #1
 801566e:	2b00      	cmp	r3, #0
 8015670:	dd10      	ble.n	8015694 <toState+0x34c>
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8015678:	3301      	adds	r3, #1
 801567a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801567e:	fa02 f303 	lsl.w	r3, r2, r3
 8015682:	e00f      	b.n	80156a4 <toState+0x35c>
 8015684:	08020704 	.word	0x08020704
 8015688:	08020714 	.word	0x08020714
 801568c:	08020728 	.word	0x08020728
 8015690:	0802073c 	.word	0x0802073c
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 801569a:	43db      	mvns	r3, r3
 801569c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80156a0:	fa42 f303 	asr.w	r3, r2, r3
 80156a4:	4618      	mov	r0, r3
 80156a6:	f004 f873 	bl	8019790 <getRand>
 80156aa:	4603      	mov	r3, r0
 80156ac:	4619      	mov	r1, r3
 80156ae:	2000      	movs	r0, #0
 80156b0:	f004 f958 	bl	8019964 <timerStart>
			}
			ptpClock->portDS.portState = PTP_PASSIVE;
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	2206      	movs	r2, #6
 80156b8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

			break;
 80156bc:	e071      	b.n	80157a2 <toState+0x45a>

		case PTP_UNCALIBRATED:

			timerStart(ANNOUNCE_RECEIPT_TIMER, (ptpClock->portDS.announceReceiptTimeout)*(pow2ms(ptpClock->portDS.logAnnounceInterval)));
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 80156c4:	4619      	mov	r1, r3
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	dd07      	ble.n	80156e0 <toState+0x398>
 80156d0:	687b      	ldr	r3, [r7, #4]
 80156d2:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 80156d6:	461a      	mov	r2, r3
 80156d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80156dc:	4093      	lsls	r3, r2
 80156de:	e007      	b.n	80156f0 <toState+0x3a8>
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 80156e6:	425b      	negs	r3, r3
 80156e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80156ec:	fa42 f303 	asr.w	r3, r2, r3
 80156f0:	fb01 f303 	mul.w	r3, r1, r3
 80156f4:	4619      	mov	r1, r3
 80156f6:	2003      	movs	r0, #3
 80156f8:	f004 f934 	bl	8019964 <timerStart>
			switch (ptpClock->portDS.delayMechanism)
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8015702:	2b01      	cmp	r3, #1
 8015704:	d002      	beq.n	801570c <toState+0x3c4>
 8015706:	2b02      	cmp	r3, #2
 8015708:	d020      	beq.n	801574c <toState+0x404>
				case P2P:
						timerStart(PDELAYREQ_INTERVAL_TIMER, getRand(pow2ms(ptpClock->portDS.logMinPdelayReqInterval + 1)));
						break;
				default:
						/* none */
						break;
 801570a:	e03f      	b.n	801578c <toState+0x444>
						timerStart(DELAYREQ_INTERVAL_TIMER, getRand(pow2ms(ptpClock->portDS.logMinDelayReqInterval + 1)));
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	f993 3063 	ldrsb.w	r3, [r3, #99]	; 0x63
 8015712:	3301      	adds	r3, #1
 8015714:	2b00      	cmp	r3, #0
 8015716:	dd08      	ble.n	801572a <toState+0x3e2>
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	f993 3063 	ldrsb.w	r3, [r3, #99]	; 0x63
 801571e:	3301      	adds	r3, #1
 8015720:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015724:	fa02 f303 	lsl.w	r3, r2, r3
 8015728:	e007      	b.n	801573a <toState+0x3f2>
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	f993 3063 	ldrsb.w	r3, [r3, #99]	; 0x63
 8015730:	43db      	mvns	r3, r3
 8015732:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015736:	fa42 f303 	asr.w	r3, r2, r3
 801573a:	4618      	mov	r0, r3
 801573c:	f004 f828 	bl	8019790 <getRand>
 8015740:	4603      	mov	r3, r0
 8015742:	4619      	mov	r1, r3
 8015744:	2001      	movs	r0, #1
 8015746:	f004 f90d 	bl	8019964 <timerStart>
						break;
 801574a:	e01f      	b.n	801578c <toState+0x444>
						timerStart(PDELAYREQ_INTERVAL_TIMER, getRand(pow2ms(ptpClock->portDS.logMinPdelayReqInterval + 1)));
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8015752:	3301      	adds	r3, #1
 8015754:	2b00      	cmp	r3, #0
 8015756:	dd08      	ble.n	801576a <toState+0x422>
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 801575e:	3301      	adds	r3, #1
 8015760:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015764:	fa02 f303 	lsl.w	r3, r2, r3
 8015768:	e007      	b.n	801577a <toState+0x432>
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8015770:	43db      	mvns	r3, r3
 8015772:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8015776:	fa42 f303 	asr.w	r3, r2, r3
 801577a:	4618      	mov	r0, r3
 801577c:	f004 f808 	bl	8019790 <getRand>
 8015780:	4603      	mov	r3, r0
 8015782:	4619      	mov	r1, r3
 8015784:	2000      	movs	r0, #0
 8015786:	f004 f8ed 	bl	8019964 <timerStart>
						break;
 801578a:	bf00      	nop
			}
			ptpClock->portDS.portState = PTP_UNCALIBRATED;
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	2207      	movs	r2, #7
 8015790:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

			break;
 8015794:	e005      	b.n	80157a2 <toState+0x45a>

		case PTP_SLAVE:

			ptpClock->portDS.portState = PTP_SLAVE;
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	2208      	movs	r2, #8
 801579a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62

			break;
 801579e:	e000      	b.n	80157a2 <toState+0x45a>

		default:

			break;
 80157a0:	bf00      	nop
	}
}
 80157a2:	bf00      	nop
 80157a4:	3720      	adds	r7, #32
 80157a6:	46bd      	mov	sp, r7
 80157a8:	bd80      	pop	{r7, pc}
 80157aa:	bf00      	nop

080157ac <doInit>:


static bool doInit(PtpClock *ptpClock)
{
 80157ac:	b580      	push	{r7, lr}
 80157ae:	b086      	sub	sp, #24
 80157b0:	af00      	add	r7, sp, #0
 80157b2:	6078      	str	r0, [r7, #4]
	DBG("manufacturerIdentity: %s\n", MANUFACTURER_ID);
 80157b4:	f107 0310 	add.w	r3, r7, #16
 80157b8:	4618      	mov	r0, r3
 80157ba:	f003 ffaf 	bl	801971c <getTime>
 80157be:	693b      	ldr	r3, [r7, #16]
 80157c0:	697a      	ldr	r2, [r7, #20]
 80157c2:	4619      	mov	r1, r3
 80157c4:	481c      	ldr	r0, [pc, #112]	; (8015838 <doInit+0x8c>)
 80157c6:	f004 ffa9 	bl	801a71c <iprintf>
 80157ca:	491c      	ldr	r1, [pc, #112]	; (801583c <doInit+0x90>)
 80157cc:	481c      	ldr	r0, [pc, #112]	; (8015840 <doInit+0x94>)
 80157ce:	f004 ffa5 	bl	801a71c <iprintf>

	/* initialize networking */
	//netShutdown(&ptpClock->netPath);

	if (!netInit(&ptpClock->netPath, ptpClock))
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	f503 7373 	add.w	r3, r3, #972	; 0x3cc
 80157d8:	6879      	ldr	r1, [r7, #4]
 80157da:	4618      	mov	r0, r3
 80157dc:	f003 f848 	bl	8018870 <netInit>
 80157e0:	4603      	mov	r3, r0
 80157e2:	f083 0301 	eor.w	r3, r3, #1
 80157e6:	b2db      	uxtb	r3, r3
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d00f      	beq.n	801580c <doInit+0x60>
	{
		ERROR("doInit: failed to initialize network\n");
 80157ec:	f107 0308 	add.w	r3, r7, #8
 80157f0:	4618      	mov	r0, r3
 80157f2:	f003 ff93 	bl	801971c <getTime>
 80157f6:	68bb      	ldr	r3, [r7, #8]
 80157f8:	68fa      	ldr	r2, [r7, #12]
 80157fa:	4619      	mov	r1, r3
 80157fc:	4811      	ldr	r0, [pc, #68]	; (8015844 <doInit+0x98>)
 80157fe:	f004 ff8d 	bl	801a71c <iprintf>
 8015802:	4811      	ldr	r0, [pc, #68]	; (8015848 <doInit+0x9c>)
 8015804:	f004 fffe 	bl	801a804 <puts>
		return FALSE;
 8015808:	2300      	movs	r3, #0
 801580a:	e011      	b.n	8015830 <doInit+0x84>
	}
	else
	{
		/* initialize other stuff */
		initData(ptpClock);
 801580c:	6878      	ldr	r0, [r7, #4]
 801580e:	f7fe ffd5 	bl	80147bc <initData>
		initTimer();
 8015812:	f004 f827 	bl	8019864 <initTimer>
		initClock(ptpClock);
 8015816:	6878      	ldr	r0, [r7, #4]
 8015818:	f003 fb22 	bl	8018e60 <initClock>
		m1(ptpClock);
 801581c:	6878      	ldr	r0, [r7, #4]
 801581e:	f7ff f9b3 	bl	8014b88 <m1>
		msgPackHeader(ptpClock, ptpClock->msgObuf);
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	33cc      	adds	r3, #204	; 0xcc
 8015826:	4619      	mov	r1, r3
 8015828:	6878      	ldr	r0, [r7, #4]
 801582a:	f002 f9a0 	bl	8017b6e <msgPackHeader>
		return TRUE;
 801582e:	2301      	movs	r3, #1
	}
}
 8015830:	4618      	mov	r0, r3
 8015832:	3718      	adds	r7, #24
 8015834:	46bd      	mov	sp, r7
 8015836:	bd80      	pop	{r7, pc}
 8015838:	08020704 	.word	0x08020704
 801583c:	08020758 	.word	0x08020758
 8015840:	08020794 	.word	0x08020794
 8015844:	080207b0 	.word	0x080207b0
 8015848:	080207c0 	.word	0x080207c0

0801584c <doState>:

/* Handle actions and events for 'port_state' */
void doState(PtpClock *ptpClock)
{
 801584c:	b580      	push	{r7, lr}
 801584e:	b09e      	sub	sp, #120	; 0x78
 8015850:	af00      	add	r7, sp, #0
 8015852:	6078      	str	r0, [r7, #4]
	ptpClock->messageActivity = FALSE;
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	2200      	movs	r2, #0
 8015858:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8

	switch (ptpClock->portDS.portState)
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8015862:	3b03      	subs	r3, #3
 8015864:	2b05      	cmp	r3, #5
 8015866:	d869      	bhi.n	801593c <doState+0xf0>
		case PTP_PRE_MASTER:
		case PTP_MASTER:
		case PTP_PASSIVE:

			/* State decision Event */
			if (getFlag(ptpClock->events, STATE_DECISION_EVENT))
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
 801586e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015872:	2b00      	cmp	r3, #0
 8015874:	d05c      	beq.n	8015930 <doState+0xe4>
			{
				DBGV("event STATE_DECISION_EVENT\n");
 8015876:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801587a:	4618      	mov	r0, r3
 801587c:	f003 ff4e 	bl	801971c <getTime>
 8015880:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015882:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8015884:	4619      	mov	r1, r3
 8015886:	48c2      	ldr	r0, [pc, #776]	; (8015b90 <doState+0x344>)
 8015888:	f004 ff48 	bl	801a71c <iprintf>
 801588c:	48c1      	ldr	r0, [pc, #772]	; (8015b94 <doState+0x348>)
 801588e:	f004 ffb9 	bl	801a804 <puts>
				clearFlag(ptpClock->events, STATE_DECISION_EVENT);
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
 8015898:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
				ptpClock->recommendedState = bmc(ptpClock);
 80158a2:	6878      	ldr	r0, [r7, #4]
 80158a4:	f7ff fc86 	bl	80151b4 <bmc>
 80158a8:	4603      	mov	r3, r0
 80158aa:	461a      	mov	r2, r3
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
				DBGV("recommending state %s\n", stateString(ptpClock->recommendedState));
 80158b2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80158b6:	4618      	mov	r0, r3
 80158b8:	f003 ff30 	bl	801971c <getTime>
 80158bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80158be:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80158c0:	4619      	mov	r1, r3
 80158c2:	48b3      	ldr	r0, [pc, #716]	; (8015b90 <doState+0x344>)
 80158c4:	f004 ff2a 	bl	801a71c <iprintf>
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 80158ce:	4618      	mov	r0, r3
 80158d0:	f7ff fcf0 	bl	80152b4 <stateString>
 80158d4:	4603      	mov	r3, r0
 80158d6:	4619      	mov	r1, r3
 80158d8:	48af      	ldr	r0, [pc, #700]	; (8015b98 <doState+0x34c>)
 80158da:	f004 ff1f 	bl	801a71c <iprintf>

				switch (ptpClock->recommendedState)
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 80158e4:	3b05      	subs	r3, #5
 80158e6:	2b01      	cmp	r3, #1
 80158e8:	d824      	bhi.n	8015934 <doState+0xe8>
				{
					case PTP_MASTER:
					case PTP_PASSIVE:
						if (ptpClock->defaultDS.slaveOnly || ptpClock->defaultDS.clockQuality.clockClass == 255)
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	7cdb      	ldrb	r3, [r3, #19]
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d103      	bne.n	80158fa <doState+0xae>
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	7b1b      	ldrb	r3, [r3, #12]
 80158f6:	2bff      	cmp	r3, #255	; 0xff
 80158f8:	d11e      	bne.n	8015938 <doState+0xec>
						{
								ptpClock->recommendedState = PTP_LISTENING;
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	2203      	movs	r2, #3
 80158fe:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
								DBGV("recommending state %s\n", stateString(ptpClock->recommendedState));
 8015902:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8015906:	4618      	mov	r0, r3
 8015908:	f003 ff08 	bl	801971c <getTime>
 801590c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801590e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015910:	4619      	mov	r1, r3
 8015912:	489f      	ldr	r0, [pc, #636]	; (8015b90 <doState+0x344>)
 8015914:	f004 ff02 	bl	801a71c <iprintf>
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 801591e:	4618      	mov	r0, r3
 8015920:	f7ff fcc8 	bl	80152b4 <stateString>
 8015924:	4603      	mov	r3, r0
 8015926:	4619      	mov	r1, r3
 8015928:	489b      	ldr	r0, [pc, #620]	; (8015b98 <doState+0x34c>)
 801592a:	f004 fef7 	bl	801a71c <iprintf>
						}
						break;
 801592e:	e003      	b.n	8015938 <doState+0xec>

					default:
						break;
				}
			}
 8015930:	bf00      	nop
 8015932:	e004      	b.n	801593e <doState+0xf2>
						break;
 8015934:	bf00      	nop
 8015936:	e002      	b.n	801593e <doState+0xf2>
						break;
 8015938:	bf00      	nop
			break;
 801593a:	e000      	b.n	801593e <doState+0xf2>

			default:
				break;
 801593c:	bf00      	nop
	}

	switch (ptpClock->recommendedState)
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8015944:	2b08      	cmp	r3, #8
 8015946:	f200 80df 	bhi.w	8015b08 <doState+0x2bc>
 801594a:	a201      	add	r2, pc, #4	; (adr r2, 8015950 <doState+0x104>)
 801594c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015950:	08015b2f 	.word	0x08015b2f
 8015954:	08015b09 	.word	0x08015b09
 8015958:	08015b09 	.word	0x08015b09
 801595c:	08015aef 	.word	0x08015aef
 8015960:	08015b09 	.word	0x08015b09
 8015964:	08015975 	.word	0x08015975
 8015968:	080159ad 	.word	0x080159ad
 801596c:	08015b09 	.word	0x08015b09
 8015970:	080159c9 	.word	0x080159c9
	{
		case PTP_MASTER:
			switch (ptpClock->portDS.portState)
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 801597a:	2b04      	cmp	r3, #4
 801597c:	d002      	beq.n	8015984 <doState+0x138>
 801597e:	2b05      	cmp	r3, #5
 8015980:	d010      	beq.n	80159a4 <doState+0x158>
 8015982:	e00a      	b.n	801599a <doState+0x14e>
			{
				case PTP_PRE_MASTER:
					if (timerExpired(QUALIFICATION_TIMEOUT)) toState(ptpClock, PTP_MASTER);
 8015984:	2005      	movs	r0, #5
 8015986:	f004 f81f 	bl	80199c8 <timerExpired>
 801598a:	4603      	mov	r3, r0
 801598c:	2b00      	cmp	r3, #0
 801598e:	d00b      	beq.n	80159a8 <doState+0x15c>
 8015990:	2105      	movs	r1, #5
 8015992:	6878      	ldr	r0, [r7, #4]
 8015994:	f7ff fcd8 	bl	8015348 <toState>
					break;
 8015998:	e006      	b.n	80159a8 <doState+0x15c>
				case PTP_MASTER:
					break;
				default:
					toState(ptpClock, PTP_PRE_MASTER);
 801599a:	2104      	movs	r1, #4
 801599c:	6878      	ldr	r0, [r7, #4]
 801599e:	f7ff fcd3 	bl	8015348 <toState>
					break;
 80159a2:	e002      	b.n	80159aa <doState+0x15e>
					break;
 80159a4:	bf00      	nop
 80159a6:	e0c7      	b.n	8015b38 <doState+0x2ec>
					break;
 80159a8:	bf00      	nop
			}
			break;
 80159aa:	e0c5      	b.n	8015b38 <doState+0x2ec>

		case PTP_PASSIVE:
			if (ptpClock->portDS.portState != ptpClock->recommendedState) toState(ptpClock, PTP_PASSIVE);
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	f893 2062 	ldrb.w	r2, [r3, #98]	; 0x62
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 80159b8:	429a      	cmp	r2, r3
 80159ba:	f000 80ba 	beq.w	8015b32 <doState+0x2e6>
 80159be:	2106      	movs	r1, #6
 80159c0:	6878      	ldr	r0, [r7, #4]
 80159c2:	f7ff fcc1 	bl	8015348 <toState>
			break;
 80159c6:	e0b4      	b.n	8015b32 <doState+0x2e6>

		case PTP_SLAVE:

			switch (ptpClock->portDS.portState)
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80159ce:	2b07      	cmp	r3, #7
 80159d0:	d002      	beq.n	80159d8 <doState+0x18c>
 80159d2:	2b08      	cmp	r3, #8
 80159d4:	d03f      	beq.n	8015a56 <doState+0x20a>
 80159d6:	e081      	b.n	8015adc <doState+0x290>
			{
				case PTP_UNCALIBRATED:

					if (getFlag(ptpClock->events, MASTER_CLOCK_SELECTED))
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
 80159de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d019      	beq.n	8015a1a <doState+0x1ce>
					{
						DBG("event MASTER_CLOCK_SELECTED\n");
 80159e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80159ea:	4618      	mov	r0, r3
 80159ec:	f003 fe96 	bl	801971c <getTime>
 80159f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80159f2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80159f4:	4619      	mov	r1, r3
 80159f6:	4869      	ldr	r0, [pc, #420]	; (8015b9c <doState+0x350>)
 80159f8:	f004 fe90 	bl	801a71c <iprintf>
 80159fc:	4868      	ldr	r0, [pc, #416]	; (8015ba0 <doState+0x354>)
 80159fe:	f004 ff01 	bl	801a804 <puts>
						clearFlag(ptpClock->events, MASTER_CLOCK_SELECTED);
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
 8015a08:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
						toState(ptpClock, PTP_SLAVE);
 8015a12:	2108      	movs	r1, #8
 8015a14:	6878      	ldr	r0, [r7, #4]
 8015a16:	f7ff fc97 	bl	8015348 <toState>
					}

					if (getFlag(ptpClock->events, MASTER_CLOCK_CHANGED))
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
 8015a20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d05e      	beq.n	8015ae6 <doState+0x29a>
					{
						DBG("event MASTER_CLOCK_CHANGED\n");
 8015a28:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015a2c:	4618      	mov	r0, r3
 8015a2e:	f003 fe75 	bl	801971c <getTime>
 8015a32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015a34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015a36:	4619      	mov	r1, r3
 8015a38:	4858      	ldr	r0, [pc, #352]	; (8015b9c <doState+0x350>)
 8015a3a:	f004 fe6f 	bl	801a71c <iprintf>
 8015a3e:	4859      	ldr	r0, [pc, #356]	; (8015ba4 <doState+0x358>)
 8015a40:	f004 fee0 	bl	801a804 <puts>
						clearFlag(ptpClock->events, MASTER_CLOCK_CHANGED);
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
 8015a4a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
					}

					break;
 8015a54:	e047      	b.n	8015ae6 <doState+0x29a>

				case PTP_SLAVE:

					if (getFlag(ptpClock->events, SYNCHRONIZATION_FAULT))
 8015a56:	687b      	ldr	r3, [r7, #4]
 8015a58:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
 8015a5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	d019      	beq.n	8015a98 <doState+0x24c>
					{
							DBG("event SYNCHRONIZATION_FAULT\n");
 8015a64:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015a68:	4618      	mov	r0, r3
 8015a6a:	f003 fe57 	bl	801971c <getTime>
 8015a6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015a70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015a72:	4619      	mov	r1, r3
 8015a74:	4849      	ldr	r0, [pc, #292]	; (8015b9c <doState+0x350>)
 8015a76:	f004 fe51 	bl	801a71c <iprintf>
 8015a7a:	484b      	ldr	r0, [pc, #300]	; (8015ba8 <doState+0x35c>)
 8015a7c:	f004 fec2 	bl	801a804 <puts>
							clearFlag(ptpClock->events, SYNCHRONIZATION_FAULT);
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
 8015a86:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
							toState(ptpClock, PTP_UNCALIBRATED);
 8015a90:	2107      	movs	r1, #7
 8015a92:	6878      	ldr	r0, [r7, #4]
 8015a94:	f7ff fc58 	bl	8015348 <toState>
					}

					if (getFlag(ptpClock->events, MASTER_CLOCK_CHANGED))
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
 8015a9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d021      	beq.n	8015aea <doState+0x29e>
					{
							DBG("event MASTER_CLOCK_CHANGED\n");
 8015aa6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015aaa:	4618      	mov	r0, r3
 8015aac:	f003 fe36 	bl	801971c <getTime>
 8015ab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015ab2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015ab4:	4619      	mov	r1, r3
 8015ab6:	4839      	ldr	r0, [pc, #228]	; (8015b9c <doState+0x350>)
 8015ab8:	f004 fe30 	bl	801a71c <iprintf>
 8015abc:	4839      	ldr	r0, [pc, #228]	; (8015ba4 <doState+0x358>)
 8015abe:	f004 fea1 	bl	801a804 <puts>
							clearFlag(ptpClock->events, MASTER_CLOCK_CHANGED);
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
 8015ac8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
							toState(ptpClock, PTP_UNCALIBRATED);
 8015ad2:	2107      	movs	r1, #7
 8015ad4:	6878      	ldr	r0, [r7, #4]
 8015ad6:	f7ff fc37 	bl	8015348 <toState>
					}

					break;
 8015ada:	e006      	b.n	8015aea <doState+0x29e>

				default:

					toState(ptpClock, PTP_UNCALIBRATED);
 8015adc:	2107      	movs	r1, #7
 8015ade:	6878      	ldr	r0, [r7, #4]
 8015ae0:	f7ff fc32 	bl	8015348 <toState>
					break;
 8015ae4:	e002      	b.n	8015aec <doState+0x2a0>
					break;
 8015ae6:	bf00      	nop
 8015ae8:	e026      	b.n	8015b38 <doState+0x2ec>
					break;
 8015aea:	bf00      	nop
			}

			break;
 8015aec:	e024      	b.n	8015b38 <doState+0x2ec>

		case PTP_LISTENING:

			if (ptpClock->portDS.portState != ptpClock->recommendedState)
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	f893 2062 	ldrb.w	r2, [r3, #98]	; 0x62
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8015afa:	429a      	cmp	r2, r3
 8015afc:	d01b      	beq.n	8015b36 <doState+0x2ea>
			{
				toState(ptpClock, PTP_LISTENING);
 8015afe:	2103      	movs	r1, #3
 8015b00:	6878      	ldr	r0, [r7, #4]
 8015b02:	f7ff fc21 	bl	8015348 <toState>
			}

			break;
 8015b06:	e016      	b.n	8015b36 <doState+0x2ea>

		case PTP_INITIALIZING:
			break;

		default:
			DBG("doState: unrecognized recommended state %d\n", ptpClock->recommendedState);
 8015b08:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015b0c:	4618      	mov	r0, r3
 8015b0e:	f003 fe05 	bl	801971c <getTime>
 8015b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015b16:	4619      	mov	r1, r3
 8015b18:	4820      	ldr	r0, [pc, #128]	; (8015b9c <doState+0x350>)
 8015b1a:	f004 fdff 	bl	801a71c <iprintf>
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8015b24:	4619      	mov	r1, r3
 8015b26:	4821      	ldr	r0, [pc, #132]	; (8015bac <doState+0x360>)
 8015b28:	f004 fdf8 	bl	801a71c <iprintf>
			break;
 8015b2c:	e004      	b.n	8015b38 <doState+0x2ec>
			break;
 8015b2e:	bf00      	nop
 8015b30:	e002      	b.n	8015b38 <doState+0x2ec>
			break;
 8015b32:	bf00      	nop
 8015b34:	e000      	b.n	8015b38 <doState+0x2ec>
			break;
 8015b36:	bf00      	nop
	}

	switch (ptpClock->portDS.portState)
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8015b3e:	2b08      	cmp	r3, #8
 8015b40:	f200 80e1 	bhi.w	8015d06 <doState+0x4ba>
 8015b44:	a201      	add	r2, pc, #4	; (adr r2, 8015b4c <doState+0x300>)
 8015b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b4a:	bf00      	nop
 8015b4c:	08015b71 	.word	0x08015b71
 8015b50:	08015bb1 	.word	0x08015bb1
 8015b54:	08015bd7 	.word	0x08015bd7
 8015b58:	08015bdf 	.word	0x08015bdf
 8015b5c:	08015d07 	.word	0x08015d07
 8015b60:	08015c9d 	.word	0x08015c9d
 8015b64:	08015bdf 	.word	0x08015bdf
 8015b68:	08015bdf 	.word	0x08015bdf
 8015b6c:	08015bdf 	.word	0x08015bdf
	{
		case PTP_INITIALIZING:

			if (doInit(ptpClock) == TRUE)
 8015b70:	6878      	ldr	r0, [r7, #4]
 8015b72:	f7ff fe1b 	bl	80157ac <doInit>
 8015b76:	4603      	mov	r3, r0
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	d004      	beq.n	8015b86 <doState+0x33a>
			{
				toState(ptpClock, PTP_LISTENING);
 8015b7c:	2103      	movs	r1, #3
 8015b7e:	6878      	ldr	r0, [r7, #4]
 8015b80:	f7ff fbe2 	bl	8015348 <toState>
			else
			{
				toState(ptpClock, PTP_FAULTY);
			}

			break;
 8015b84:	e0d4      	b.n	8015d30 <doState+0x4e4>
				toState(ptpClock, PTP_FAULTY);
 8015b86:	2101      	movs	r1, #1
 8015b88:	6878      	ldr	r0, [r7, #4]
 8015b8a:	f7ff fbdd 	bl	8015348 <toState>
			break;
 8015b8e:	e0cf      	b.n	8015d30 <doState+0x4e4>
 8015b90:	080207e8 	.word	0x080207e8
 8015b94:	080207f8 	.word	0x080207f8
 8015b98:	08020814 	.word	0x08020814
 8015b9c:	08020704 	.word	0x08020704
 8015ba0:	0802082c 	.word	0x0802082c
 8015ba4:	08020848 	.word	0x08020848
 8015ba8:	08020864 	.word	0x08020864
 8015bac:	08020880 	.word	0x08020880

		case PTP_FAULTY:

			/* Imaginary troubleshooting */
			DBG("event FAULT_CLEARED for state PTP_FAULT\n");
 8015bb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015bb4:	4618      	mov	r0, r3
 8015bb6:	f003 fdb1 	bl	801971c <getTime>
 8015bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015bbe:	4619      	mov	r1, r3
 8015bc0:	485d      	ldr	r0, [pc, #372]	; (8015d38 <doState+0x4ec>)
 8015bc2:	f004 fdab 	bl	801a71c <iprintf>
 8015bc6:	485d      	ldr	r0, [pc, #372]	; (8015d3c <doState+0x4f0>)
 8015bc8:	f004 fe1c 	bl	801a804 <puts>
			toState(ptpClock, PTP_INITIALIZING);
 8015bcc:	2100      	movs	r1, #0
 8015bce:	6878      	ldr	r0, [r7, #4]
 8015bd0:	f7ff fbba 	bl	8015348 <toState>
			return;
 8015bd4:	e0ac      	b.n	8015d30 <doState+0x4e4>

		case PTP_DISABLED:
			handle(ptpClock);
 8015bd6:	6878      	ldr	r0, [r7, #4]
 8015bd8:	f000 f8be 	bl	8015d58 <handle>
			break;
 8015bdc:	e0a8      	b.n	8015d30 <doState+0x4e4>
		case PTP_LISTENING:
		case PTP_UNCALIBRATED:
		case PTP_SLAVE:
		case PTP_PASSIVE:

			if (timerExpired(ANNOUNCE_RECEIPT_TIMER))
 8015bde:	2003      	movs	r0, #3
 8015be0:	f003 fef2 	bl	80199c8 <timerExpired>
 8015be4:	4603      	mov	r3, r0
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d054      	beq.n	8015c94 <doState+0x448>
			{
				DBGV("event ANNOUNCE_RECEIPT_TIMEOUT_EXPIRES for state %s\n", stateString(ptpClock->portDS.portState));
 8015bea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015bee:	4618      	mov	r0, r3
 8015bf0:	f003 fd94 	bl	801971c <getTime>
 8015bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015bf8:	4619      	mov	r1, r3
 8015bfa:	4851      	ldr	r0, [pc, #324]	; (8015d40 <doState+0x4f4>)
 8015bfc:	f004 fd8e 	bl	801a71c <iprintf>
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8015c06:	4618      	mov	r0, r3
 8015c08:	f7ff fb54 	bl	80152b4 <stateString>
 8015c0c:	4603      	mov	r3, r0
 8015c0e:	4619      	mov	r1, r3
 8015c10:	484c      	ldr	r0, [pc, #304]	; (8015d44 <doState+0x4f8>)
 8015c12:	f004 fd83 	bl	801a71c <iprintf>
				ptpClock->foreignMasterDS.count = 0;
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	2200      	movs	r2, #0
 8015c1a:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
				ptpClock->foreignMasterDS.i = 0;
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	2200      	movs	r2, #0
 8015c22:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c

				if (!(ptpClock->defaultDS.slaveOnly || ptpClock->defaultDS.clockQuality.clockClass == 255))
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	7cdb      	ldrb	r3, [r3, #19]
 8015c2a:	f083 0301 	eor.w	r3, r3, #1
 8015c2e:	b2db      	uxtb	r3, r3
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d025      	beq.n	8015c80 <doState+0x434>
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	7b1b      	ldrb	r3, [r3, #12]
 8015c38:	2bff      	cmp	r3, #255	; 0xff
 8015c3a:	d021      	beq.n	8015c80 <doState+0x434>
				{
					m1(ptpClock);
 8015c3c:	6878      	ldr	r0, [r7, #4]
 8015c3e:	f7fe ffa3 	bl	8014b88 <m1>
					ptpClock->recommendedState = PTP_MASTER;
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	2205      	movs	r2, #5
 8015c46:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
					DBGV("recommending state %s\n", stateString(ptpClock->recommendedState));
 8015c4a:	f107 0320 	add.w	r3, r7, #32
 8015c4e:	4618      	mov	r0, r3
 8015c50:	f003 fd64 	bl	801971c <getTime>
 8015c54:	6a3b      	ldr	r3, [r7, #32]
 8015c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015c58:	4619      	mov	r1, r3
 8015c5a:	4839      	ldr	r0, [pc, #228]	; (8015d40 <doState+0x4f4>)
 8015c5c:	f004 fd5e 	bl	801a71c <iprintf>
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	f893 3410 	ldrb.w	r3, [r3, #1040]	; 0x410
 8015c66:	4618      	mov	r0, r3
 8015c68:	f7ff fb24 	bl	80152b4 <stateString>
 8015c6c:	4603      	mov	r3, r0
 8015c6e:	4619      	mov	r1, r3
 8015c70:	4835      	ldr	r0, [pc, #212]	; (8015d48 <doState+0x4fc>)
 8015c72:	f004 fd53 	bl	801a71c <iprintf>
					toState(ptpClock, PTP_MASTER);
 8015c76:	2105      	movs	r1, #5
 8015c78:	6878      	ldr	r0, [r7, #4]
 8015c7a:	f7ff fb65 	bl	8015348 <toState>
				else if (ptpClock->portDS.portState != PTP_LISTENING)
				{
					toState(ptpClock, PTP_LISTENING);
				}

				break;
 8015c7e:	e056      	b.n	8015d2e <doState+0x4e2>
				else if (ptpClock->portDS.portState != PTP_LISTENING)
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8015c86:	2b03      	cmp	r3, #3
 8015c88:	d051      	beq.n	8015d2e <doState+0x4e2>
					toState(ptpClock, PTP_LISTENING);
 8015c8a:	2103      	movs	r1, #3
 8015c8c:	6878      	ldr	r0, [r7, #4]
 8015c8e:	f7ff fb5b 	bl	8015348 <toState>
				break;
 8015c92:	e04c      	b.n	8015d2e <doState+0x4e2>
			}

			handle(ptpClock);
 8015c94:	6878      	ldr	r0, [r7, #4]
 8015c96:	f000 f85f 	bl	8015d58 <handle>

			break;
 8015c9a:	e049      	b.n	8015d30 <doState+0x4e4>

		case PTP_MASTER:

			if (timerExpired(SYNC_INTERVAL_TIMER))
 8015c9c:	2002      	movs	r0, #2
 8015c9e:	f003 fe93 	bl	80199c8 <timerExpired>
 8015ca2:	4603      	mov	r3, r0
 8015ca4:	2b00      	cmp	r3, #0
 8015ca6:	d010      	beq.n	8015cca <doState+0x47e>
			{
					DBGV("event SYNC_INTERVAL_TIMEOUT_EXPIRES for state PTP_MASTER\n");
 8015ca8:	f107 0318 	add.w	r3, r7, #24
 8015cac:	4618      	mov	r0, r3
 8015cae:	f003 fd35 	bl	801971c <getTime>
 8015cb2:	69bb      	ldr	r3, [r7, #24]
 8015cb4:	69fa      	ldr	r2, [r7, #28]
 8015cb6:	4619      	mov	r1, r3
 8015cb8:	4821      	ldr	r0, [pc, #132]	; (8015d40 <doState+0x4f4>)
 8015cba:	f004 fd2f 	bl	801a71c <iprintf>
 8015cbe:	4823      	ldr	r0, [pc, #140]	; (8015d4c <doState+0x500>)
 8015cc0:	f004 fda0 	bl	801a804 <puts>
					issueSync(ptpClock);
 8015cc4:	6878      	ldr	r0, [r7, #4]
 8015cc6:	f001 fb69 	bl	801739c <issueSync>
			}

			if (timerExpired(ANNOUNCE_INTERVAL_TIMER))
 8015cca:	2004      	movs	r0, #4
 8015ccc:	f003 fe7c 	bl	80199c8 <timerExpired>
 8015cd0:	4603      	mov	r3, r0
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d010      	beq.n	8015cf8 <doState+0x4ac>
			{
					DBGV("event ANNOUNCE_INTERVAL_TIMEOUT_EXPIRES for state PTP_MASTER\n");
 8015cd6:	f107 0310 	add.w	r3, r7, #16
 8015cda:	4618      	mov	r0, r3
 8015cdc:	f003 fd1e 	bl	801971c <getTime>
 8015ce0:	693b      	ldr	r3, [r7, #16]
 8015ce2:	697a      	ldr	r2, [r7, #20]
 8015ce4:	4619      	mov	r1, r3
 8015ce6:	4816      	ldr	r0, [pc, #88]	; (8015d40 <doState+0x4f4>)
 8015ce8:	f004 fd18 	bl	801a71c <iprintf>
 8015cec:	4818      	ldr	r0, [pc, #96]	; (8015d50 <doState+0x504>)
 8015cee:	f004 fd89 	bl	801a804 <puts>
					issueAnnounce(ptpClock);
 8015cf2:	6878      	ldr	r0, [r7, #4]
 8015cf4:	f001 fb04 	bl	8017300 <issueAnnounce>
			}

			handle(ptpClock);
 8015cf8:	6878      	ldr	r0, [r7, #4]
 8015cfa:	f000 f82d 	bl	8015d58 <handle>
			issueDelayReqTimerExpired(ptpClock);
 8015cfe:	6878      	ldr	r0, [r7, #4]
 8015d00:	f001 fa70 	bl	80171e4 <issueDelayReqTimerExpired>

			break;
 8015d04:	e014      	b.n	8015d30 <doState+0x4e4>

		default:
			DBG("doState: do unrecognized state %d\n", ptpClock->portDS.portState);
 8015d06:	f107 0308 	add.w	r3, r7, #8
 8015d0a:	4618      	mov	r0, r3
 8015d0c:	f003 fd06 	bl	801971c <getTime>
 8015d10:	68bb      	ldr	r3, [r7, #8]
 8015d12:	68fa      	ldr	r2, [r7, #12]
 8015d14:	4619      	mov	r1, r3
 8015d16:	4808      	ldr	r0, [pc, #32]	; (8015d38 <doState+0x4ec>)
 8015d18:	f004 fd00 	bl	801a71c <iprintf>
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8015d22:	4619      	mov	r1, r3
 8015d24:	480b      	ldr	r0, [pc, #44]	; (8015d54 <doState+0x508>)
 8015d26:	f004 fcf9 	bl	801a71c <iprintf>
			break;
 8015d2a:	bf00      	nop
 8015d2c:	e000      	b.n	8015d30 <doState+0x4e4>
				break;
 8015d2e:	bf00      	nop
	}
}
 8015d30:	3778      	adds	r7, #120	; 0x78
 8015d32:	46bd      	mov	sp, r7
 8015d34:	bd80      	pop	{r7, pc}
 8015d36:	bf00      	nop
 8015d38:	08020704 	.word	0x08020704
 8015d3c:	080208ac 	.word	0x080208ac
 8015d40:	080207e8 	.word	0x080207e8
 8015d44:	080208d4 	.word	0x080208d4
 8015d48:	08020814 	.word	0x08020814
 8015d4c:	0802090c 	.word	0x0802090c
 8015d50:	08020948 	.word	0x08020948
 8015d54:	08020988 	.word	0x08020988

08015d58 <handle>:


/* Check and handle received messages */
static void handle(PtpClock *ptpClock)
{
 8015d58:	b580      	push	{r7, lr}
 8015d5a:	b09a      	sub	sp, #104	; 0x68
 8015d5c:	af00      	add	r7, sp, #0
 8015d5e:	6078      	str	r0, [r7, #4]

		int ret;
		bool  isFromSelf;
		TimeInternal time = { 0, 0 };
 8015d60:	2300      	movs	r3, #0
 8015d62:	65bb      	str	r3, [r7, #88]	; 0x58
 8015d64:	2300      	movs	r3, #0
 8015d66:	65fb      	str	r3, [r7, #92]	; 0x5c

		if (FALSE == ptpClock->messageActivity)
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 8015d6e:	f083 0301 	eor.w	r3, r3, #1
 8015d72:	b2db      	uxtb	r3, r3
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	d021      	beq.n	8015dbc <handle+0x64>
		{
				ret = netSelect(&ptpClock->netPath, 0);
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	f503 7373 	add.w	r3, r3, #972	; 0x3cc
 8015d7e:	2100      	movs	r1, #0
 8015d80:	4618      	mov	r0, r3
 8015d82:	f002 fe87 	bl	8018a94 <netSelect>
 8015d86:	6678      	str	r0, [r7, #100]	; 0x64

				if (ret < 0)
 8015d88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	da12      	bge.n	8015db4 <handle+0x5c>
				{
						ERROR("handle: failed to poll sockets\n");
 8015d8e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8015d92:	4618      	mov	r0, r3
 8015d94:	f003 fcc2 	bl	801971c <getTime>
 8015d98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015d9a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8015d9c:	4619      	mov	r1, r3
 8015d9e:	48c5      	ldr	r0, [pc, #788]	; (80160b4 <handle+0x35c>)
 8015da0:	f004 fcbc 	bl	801a71c <iprintf>
 8015da4:	48c4      	ldr	r0, [pc, #784]	; (80160b8 <handle+0x360>)
 8015da6:	f004 fd2d 	bl	801a804 <puts>
						toState(ptpClock, PTP_FAULTY);
 8015daa:	2101      	movs	r1, #1
 8015dac:	6878      	ldr	r0, [r7, #4]
 8015dae:	f7ff facb 	bl	8015348 <toState>
						return;
 8015db2:	e1ac      	b.n	801610e <handle+0x3b6>
				}
				else if (!ret)
 8015db4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	f000 81a6 	beq.w	8016108 <handle+0x3b0>
		}

		DBGVV("handle: something\n");

		/* Receive an event. */
		ptpClock->msgIbufLength = netRecvEvent(&ptpClock->netPath, ptpClock->msgIbuf, &time);
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	f503 7073 	add.w	r0, r3, #972	; 0x3cc
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8015dc8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8015dcc:	4619      	mov	r1, r3
 8015dce:	f002 ff05 	bl	8018bdc <netRecvEvent>
 8015dd2:	4602      	mov	r2, r0
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
		/* local time is not UTC, we can calculate UTC on demand, otherwise UTC time is not used */
		/* time.seconds += ptpClock->timePropertiesDS.currentUtcOffset; */
		DBGV("handle: netRecvEvent returned %d\n", ptpClock->msgIbufLength);
 8015dda:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8015dde:	4618      	mov	r0, r3
 8015de0:	f003 fc9c 	bl	801971c <getTime>
 8015de4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015de6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015de8:	4619      	mov	r1, r3
 8015dea:	48b4      	ldr	r0, [pc, #720]	; (80160bc <handle+0x364>)
 8015dec:	f004 fc96 	bl	801a71c <iprintf>
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 8015df6:	4619      	mov	r1, r3
 8015df8:	48b1      	ldr	r0, [pc, #708]	; (80160c0 <handle+0x368>)
 8015dfa:	f004 fc8f 	bl	801a71c <iprintf>

		if (ptpClock->msgIbufLength < 0)
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	da12      	bge.n	8015e2e <handle+0xd6>
		{
				ERROR("handle: failed to receive on the event socket\n");
 8015e08:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015e0c:	4618      	mov	r0, r3
 8015e0e:	f003 fc85 	bl	801971c <getTime>
 8015e12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015e14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015e16:	4619      	mov	r1, r3
 8015e18:	48a6      	ldr	r0, [pc, #664]	; (80160b4 <handle+0x35c>)
 8015e1a:	f004 fc7f 	bl	801a71c <iprintf>
 8015e1e:	48a9      	ldr	r0, [pc, #676]	; (80160c4 <handle+0x36c>)
 8015e20:	f004 fcf0 	bl	801a804 <puts>
				toState(ptpClock, PTP_FAULTY);
 8015e24:	2101      	movs	r1, #1
 8015e26:	6878      	ldr	r0, [r7, #4]
 8015e28:	f7ff fa8e 	bl	8015348 <toState>
				return;
 8015e2c:	e16f      	b.n	801610e <handle+0x3b6>
		}
		else if (!ptpClock->msgIbufLength)
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 8015e34:	2b00      	cmp	r3, #0
 8015e36:	d13e      	bne.n	8015eb6 <handle+0x15e>
		{
				/* Receive a general packet. */
				ptpClock->msgIbufLength = netRecvGeneral(&ptpClock->netPath, ptpClock->msgIbuf, &time);
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	f503 7073 	add.w	r0, r3, #972	; 0x3cc
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8015e44:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8015e48:	4619      	mov	r1, r3
 8015e4a:	f002 fed9 	bl	8018c00 <netRecvGeneral>
 8015e4e:	4602      	mov	r2, r0
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
				DBGV("handle: netRecvGeneral returned %d\n", ptpClock->msgIbufLength);
 8015e56:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015e5a:	4618      	mov	r0, r3
 8015e5c:	f003 fc5e 	bl	801971c <getTime>
 8015e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015e62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015e64:	4619      	mov	r1, r3
 8015e66:	4895      	ldr	r0, [pc, #596]	; (80160bc <handle+0x364>)
 8015e68:	f004 fc58 	bl	801a71c <iprintf>
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 8015e72:	4619      	mov	r1, r3
 8015e74:	4894      	ldr	r0, [pc, #592]	; (80160c8 <handle+0x370>)
 8015e76:	f004 fc51 	bl	801a71c <iprintf>

				if (ptpClock->msgIbufLength < 0)
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	da12      	bge.n	8015eaa <handle+0x152>
				{
						ERROR("handle: failed to receive on the general socket\n");
 8015e84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015e88:	4618      	mov	r0, r3
 8015e8a:	f003 fc47 	bl	801971c <getTime>
 8015e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015e92:	4619      	mov	r1, r3
 8015e94:	4887      	ldr	r0, [pc, #540]	; (80160b4 <handle+0x35c>)
 8015e96:	f004 fc41 	bl	801a71c <iprintf>
 8015e9a:	488c      	ldr	r0, [pc, #560]	; (80160cc <handle+0x374>)
 8015e9c:	f004 fcb2 	bl	801a804 <puts>
						toState(ptpClock, PTP_FAULTY);
 8015ea0:	2101      	movs	r1, #1
 8015ea2:	6878      	ldr	r0, [r7, #4]
 8015ea4:	f7ff fa50 	bl	8015348 <toState>
						return;
 8015ea8:	e131      	b.n	801610e <handle+0x3b6>
				}
				else if (!ptpClock->msgIbufLength)
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	f000 812b 	beq.w	801610c <handle+0x3b4>
						return;
		}

		ptpClock->messageActivity = TRUE;
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	2201      	movs	r2, #1
 8015eba:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8

		if (ptpClock->msgIbufLength < HEADER_LENGTH)
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 8015ec4:	2b21      	cmp	r3, #33	; 0x21
 8015ec6:	dc12      	bgt.n	8015eee <handle+0x196>
		{
				ERROR("handle: message shorter than header length\n");
 8015ec8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015ecc:	4618      	mov	r0, r3
 8015ece:	f003 fc25 	bl	801971c <getTime>
 8015ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ed4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015ed6:	4619      	mov	r1, r3
 8015ed8:	4876      	ldr	r0, [pc, #472]	; (80160b4 <handle+0x35c>)
 8015eda:	f004 fc1f 	bl	801a71c <iprintf>
 8015ede:	487c      	ldr	r0, [pc, #496]	; (80160d0 <handle+0x378>)
 8015ee0:	f004 fc90 	bl	801a804 <puts>
				toState(ptpClock, PTP_FAULTY);
 8015ee4:	2101      	movs	r1, #1
 8015ee6:	6878      	ldr	r0, [r7, #4]
 8015ee8:	f7ff fa2e 	bl	8015348 <toState>
				return;
 8015eec:	e10f      	b.n	801610e <handle+0x3b6>
		}

		msgUnpackHeader(ptpClock->msgIbuf, &ptpClock->msgTmpHeader);
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	f503 72fc 	add.w	r2, r3, #504	; 0x1f8
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	3380      	adds	r3, #128	; 0x80
 8015ef8:	4619      	mov	r1, r3
 8015efa:	4610      	mov	r0, r2
 8015efc:	f001 fda4 	bl	8017a48 <msgUnpackHeader>
		DBGV("handle: unpacked message type %d\n", ptpClock->msgTmpHeader.messageType);
 8015f00:	f107 0320 	add.w	r3, r7, #32
 8015f04:	4618      	mov	r0, r3
 8015f06:	f003 fc09 	bl	801971c <getTime>
 8015f0a:	6a3b      	ldr	r3, [r7, #32]
 8015f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015f0e:	4619      	mov	r1, r3
 8015f10:	486a      	ldr	r0, [pc, #424]	; (80160bc <handle+0x364>)
 8015f12:	f004 fc03 	bl	801a71c <iprintf>
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8015f1c:	4619      	mov	r1, r3
 8015f1e:	486d      	ldr	r0, [pc, #436]	; (80160d4 <handle+0x37c>)
 8015f20:	f004 fbfc 	bl	801a71c <iprintf>

		if (ptpClock->msgTmpHeader.versionPTP != ptpClock->portDS.versionNumber)
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	f893 2082 	ldrb.w	r2, [r3, #130]	; 0x82
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8015f30:	429a      	cmp	r2, r3
 8015f32:	d012      	beq.n	8015f5a <handle+0x202>
		{
				DBGV("handle: ignore version %d message\n", ptpClock->msgTmpHeader.versionPTP);
 8015f34:	f107 0318 	add.w	r3, r7, #24
 8015f38:	4618      	mov	r0, r3
 8015f3a:	f003 fbef 	bl	801971c <getTime>
 8015f3e:	69bb      	ldr	r3, [r7, #24]
 8015f40:	69fa      	ldr	r2, [r7, #28]
 8015f42:	4619      	mov	r1, r3
 8015f44:	485d      	ldr	r0, [pc, #372]	; (80160bc <handle+0x364>)
 8015f46:	f004 fbe9 	bl	801a71c <iprintf>
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8015f50:	4619      	mov	r1, r3
 8015f52:	4861      	ldr	r0, [pc, #388]	; (80160d8 <handle+0x380>)
 8015f54:	f004 fbe2 	bl	801a71c <iprintf>
				return;
 8015f58:	e0d9      	b.n	801610e <handle+0x3b6>
		}

		if (ptpClock->msgTmpHeader.domainNumber != ptpClock->defaultDS.domainNumber)
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	7c9b      	ldrb	r3, [r3, #18]
 8015f64:	429a      	cmp	r2, r3
 8015f66:	d012      	beq.n	8015f8e <handle+0x236>
		{
				DBGV("handle: ignore message from domainNumber %d\n", ptpClock->msgTmpHeader.domainNumber);
 8015f68:	f107 0310 	add.w	r3, r7, #16
 8015f6c:	4618      	mov	r0, r3
 8015f6e:	f003 fbd5 	bl	801971c <getTime>
 8015f72:	693b      	ldr	r3, [r7, #16]
 8015f74:	697a      	ldr	r2, [r7, #20]
 8015f76:	4619      	mov	r1, r3
 8015f78:	4850      	ldr	r0, [pc, #320]	; (80160bc <handle+0x364>)
 8015f7a:	f004 fbcf 	bl	801a71c <iprintf>
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8015f84:	4619      	mov	r1, r3
 8015f86:	4855      	ldr	r0, [pc, #340]	; (80160dc <handle+0x384>)
 8015f88:	f004 fbc8 	bl	801a71c <iprintf>
				return;
 8015f8c:	e0bf      	b.n	801610e <handle+0x3b6>
		}

		/* Spec 9.5.2.2 */
		isFromSelf = isSamePortIdentity(
		&ptpClock->portDS.portIdentity,
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	f103 0258 	add.w	r2, r3, #88	; 0x58
		&ptpClock->msgTmpHeader.sourcePortIdentity);
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	3398      	adds	r3, #152	; 0x98
		isFromSelf = isSamePortIdentity(
 8015f98:	4619      	mov	r1, r3
 8015f9a:	4610      	mov	r0, r2
 8015f9c:	f7fe fcd0 	bl	8014940 <isSamePortIdentity>
 8015fa0:	4603      	mov	r3, r0
 8015fa2:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

		/* Subtract the inbound latency adjustment if it is not a loop back and the
			 time stamp seems reasonable */
		if (!isFromSelf && time.seconds > 0)
 8015fa6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8015faa:	f083 0301 	eor.w	r3, r3, #1
 8015fae:	b2db      	uxtb	r3, r3
 8015fb0:	2b00      	cmp	r3, #0
 8015fb2:	d00c      	beq.n	8015fce <handle+0x276>
 8015fb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	dd09      	ble.n	8015fce <handle+0x276>
				subTime(&time, &time, &ptpClock->inboundLatency);
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8015fc0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8015fc4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8015fc8:	4618      	mov	r0, r3
 8015fca:	f7fe fb44 	bl	8014656 <subTime>

		switch (ptpClock->msgTmpHeader.messageType)
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8015fd4:	2b0d      	cmp	r3, #13
 8015fd6:	f200 8083 	bhi.w	80160e0 <handle+0x388>
 8015fda:	a201      	add	r2, pc, #4	; (adr r2, 8015fe0 <handle+0x288>)
 8015fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015fe0:	08016027 	.word	0x08016027
 8015fe4:	08016047 	.word	0x08016047
 8015fe8:	08016059 	.word	0x08016059
 8015fec:	08016079 	.word	0x08016079
 8015ff0:	080160e1 	.word	0x080160e1
 8015ff4:	080160e1 	.word	0x080160e1
 8015ff8:	080160e1 	.word	0x080160e1
 8015ffc:	080160e1 	.word	0x080160e1
 8016000:	08016039 	.word	0x08016039
 8016004:	0801606b 	.word	0x0801606b
 8016008:	0801608b 	.word	0x0801608b
 801600c:	08016019 	.word	0x08016019
 8016010:	080160a7 	.word	0x080160a7
 8016014:	08016099 	.word	0x08016099
		{

		case ANNOUNCE:
				handleAnnounce(ptpClock, isFromSelf);
 8016018:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 801601c:	4619      	mov	r1, r3
 801601e:	6878      	ldr	r0, [r7, #4]
 8016020:	f000 f87c 	bl	801611c <handleAnnounce>
				break;
 8016024:	e073      	b.n	801610e <handle+0x3b6>

		case SYNC:
				handleSync(ptpClock, &time, isFromSelf);
 8016026:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 801602a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801602e:	4619      	mov	r1, r3
 8016030:	6878      	ldr	r0, [r7, #4]
 8016032:	f000 f9a1 	bl	8016378 <handleSync>
				break;
 8016036:	e06a      	b.n	801610e <handle+0x3b6>

		case FOLLOW_UP:
				handleFollowUp(ptpClock, isFromSelf);
 8016038:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 801603c:	4619      	mov	r1, r3
 801603e:	6878      	ldr	r0, [r7, #4]
 8016040:	f000 fadc 	bl	80165fc <handleFollowUp>
				break;
 8016044:	e063      	b.n	801610e <handle+0x3b6>

		case DELAY_REQ:
				handleDelayReq(ptpClock, &time, isFromSelf);
 8016046:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 801604a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801604e:	4619      	mov	r1, r3
 8016050:	6878      	ldr	r0, [r7, #4]
 8016052:	f000 fc1b 	bl	801688c <handleDelayReq>
				break;
 8016056:	e05a      	b.n	801610e <handle+0x3b6>

		case PDELAY_REQ:
				handlePDelayReq(ptpClock, &time, isFromSelf);
 8016058:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 801605c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8016060:	4619      	mov	r1, r3
 8016062:	6878      	ldr	r0, [r7, #4]
 8016064:	f000 fdb6 	bl	8016bd4 <handlePDelayReq>
				break;
 8016068:	e051      	b.n	801610e <handle+0x3b6>

		case DELAY_RESP:
				handleDelayResp(ptpClock, isFromSelf);
 801606a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 801606e:	4619      	mov	r1, r3
 8016070:	6878      	ldr	r0, [r7, #4]
 8016072:	f000 fcbb 	bl	80169ec <handleDelayResp>
				break;
 8016076:	e04a      	b.n	801610e <handle+0x3b6>

		case PDELAY_RESP:
				handlePDelayResp(ptpClock, &time, isFromSelf);
 8016078:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 801607c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8016080:	4619      	mov	r1, r3
 8016082:	6878      	ldr	r0, [r7, #4]
 8016084:	f000 fe6e 	bl	8016d64 <handlePDelayResp>
				break;
 8016088:	e041      	b.n	801610e <handle+0x3b6>

		case PDELAY_RESP_FOLLOW_UP:
				handlePDelayRespFollowUp(ptpClock, isFromSelf);
 801608a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 801608e:	4619      	mov	r1, r3
 8016090:	6878      	ldr	r0, [r7, #4]
 8016092:	f000 ff9d 	bl	8016fd0 <handlePDelayRespFollowUp>
				break;
 8016096:	e03a      	b.n	801610e <handle+0x3b6>

		case MANAGEMENT:
				handleManagement(ptpClock, isFromSelf);
 8016098:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 801609c:	4619      	mov	r1, r3
 801609e:	6878      	ldr	r0, [r7, #4]
 80160a0:	f001 f88a 	bl	80171b8 <handleManagement>
				break;
 80160a4:	e033      	b.n	801610e <handle+0x3b6>

		case SIGNALING:
				handleSignaling(ptpClock, isFromSelf);
 80160a6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80160aa:	4619      	mov	r1, r3
 80160ac:	6878      	ldr	r0, [r7, #4]
 80160ae:	f001 f88e 	bl	80171ce <handleSignaling>
				break;
 80160b2:	e02c      	b.n	801610e <handle+0x3b6>
 80160b4:	080207b0 	.word	0x080207b0
 80160b8:	080209ac 	.word	0x080209ac
 80160bc:	080207e8 	.word	0x080207e8
 80160c0:	080209cc 	.word	0x080209cc
 80160c4:	080209f0 	.word	0x080209f0
 80160c8:	08020a20 	.word	0x08020a20
 80160cc:	08020a44 	.word	0x08020a44
 80160d0:	08020a74 	.word	0x08020a74
 80160d4:	08020aa0 	.word	0x08020aa0
 80160d8:	08020ac4 	.word	0x08020ac4
 80160dc:	08020ae8 	.word	0x08020ae8

		default:
				DBG("handle: unrecognized message %d\n", ptpClock->msgTmpHeader.messageType);
 80160e0:	f107 0308 	add.w	r3, r7, #8
 80160e4:	4618      	mov	r0, r3
 80160e6:	f003 fb19 	bl	801971c <getTime>
 80160ea:	68bb      	ldr	r3, [r7, #8]
 80160ec:	68fa      	ldr	r2, [r7, #12]
 80160ee:	4619      	mov	r1, r3
 80160f0:	4808      	ldr	r0, [pc, #32]	; (8016114 <handle+0x3bc>)
 80160f2:	f004 fb13 	bl	801a71c <iprintf>
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80160fc:	4619      	mov	r1, r3
 80160fe:	4806      	ldr	r0, [pc, #24]	; (8016118 <handle+0x3c0>)
 8016100:	f004 fb0c 	bl	801a71c <iprintf>
				break;
 8016104:	bf00      	nop
 8016106:	e002      	b.n	801610e <handle+0x3b6>
						return;
 8016108:	bf00      	nop
 801610a:	e000      	b.n	801610e <handle+0x3b6>
						return;
 801610c:	bf00      	nop
		}
}
 801610e:	3768      	adds	r7, #104	; 0x68
 8016110:	46bd      	mov	sp, r7
 8016112:	bd80      	pop	{r7, pc}
 8016114:	08020704 	.word	0x08020704
 8016118:	08020b18 	.word	0x08020b18

0801611c <handleAnnounce>:

/* spec 9.5.3 */
static void handleAnnounce(PtpClock *ptpClock, bool isFromSelf)
{
 801611c:	b580      	push	{r7, lr}
 801611e:	b090      	sub	sp, #64	; 0x40
 8016120:	af00      	add	r7, sp, #0
 8016122:	6078      	str	r0, [r7, #4]
 8016124:	460b      	mov	r3, r1
 8016126:	70fb      	strb	r3, [r7, #3]
	bool  isFromCurrentParent = FALSE;
 8016128:	2300      	movs	r3, #0
 801612a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	DBGV("handleAnnounce: received in state %s\n", stateString(ptpClock->portDS.portState));
 801612e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8016132:	4618      	mov	r0, r3
 8016134:	f003 faf2 	bl	801971c <getTime>
 8016138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801613a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801613c:	4619      	mov	r1, r3
 801613e:	4887      	ldr	r0, [pc, #540]	; (801635c <handleAnnounce+0x240>)
 8016140:	f004 faec 	bl	801a71c <iprintf>
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 801614a:	4618      	mov	r0, r3
 801614c:	f7ff f8b2 	bl	80152b4 <stateString>
 8016150:	4603      	mov	r3, r0
 8016152:	4619      	mov	r1, r3
 8016154:	4882      	ldr	r0, [pc, #520]	; (8016360 <handleAnnounce+0x244>)
 8016156:	f004 fae1 	bl	801a71c <iprintf>

	if (ptpClock->msgIbufLength < ANNOUNCE_LENGTH)
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 8016160:	2b3f      	cmp	r3, #63	; 0x3f
 8016162:	dc12      	bgt.n	801618a <handleAnnounce+0x6e>
	{
			ERROR("handleAnnounce: short message\n");
 8016164:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016168:	4618      	mov	r0, r3
 801616a:	f003 fad7 	bl	801971c <getTime>
 801616e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016170:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016172:	4619      	mov	r1, r3
 8016174:	487b      	ldr	r0, [pc, #492]	; (8016364 <handleAnnounce+0x248>)
 8016176:	f004 fad1 	bl	801a71c <iprintf>
 801617a:	487b      	ldr	r0, [pc, #492]	; (8016368 <handleAnnounce+0x24c>)
 801617c:	f004 fb42 	bl	801a804 <puts>
			toState(ptpClock, PTP_FAULTY);
 8016180:	2101      	movs	r1, #1
 8016182:	6878      	ldr	r0, [r7, #4]
 8016184:	f7ff f8e0 	bl	8015348 <toState>
			return;
 8016188:	e0e5      	b.n	8016356 <handleAnnounce+0x23a>
	}

	if (isFromSelf)
 801618a:	78fb      	ldrb	r3, [r7, #3]
 801618c:	2b00      	cmp	r3, #0
 801618e:	d00e      	beq.n	80161ae <handleAnnounce+0x92>
	{
			DBGV("handleAnnounce: ignore from self\n");
 8016190:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016194:	4618      	mov	r0, r3
 8016196:	f003 fac1 	bl	801971c <getTime>
 801619a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801619c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801619e:	4619      	mov	r1, r3
 80161a0:	486e      	ldr	r0, [pc, #440]	; (801635c <handleAnnounce+0x240>)
 80161a2:	f004 fabb 	bl	801a71c <iprintf>
 80161a6:	4871      	ldr	r0, [pc, #452]	; (801636c <handleAnnounce+0x250>)
 80161a8:	f004 fb2c 	bl	801a804 <puts>
			return;
 80161ac:	e0d3      	b.n	8016356 <handleAnnounce+0x23a>
	}

	switch (ptpClock->portDS.portState)
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80161b4:	2b08      	cmp	r3, #8
 80161b6:	f200 80a5 	bhi.w	8016304 <handleAnnounce+0x1e8>
 80161ba:	a201      	add	r2, pc, #4	; (adr r2, 80161c0 <handleAnnounce+0xa4>)
 80161bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80161c0:	080161e5 	.word	0x080161e5
 80161c4:	080161e5 	.word	0x080161e5
 80161c8:	080161e5 	.word	0x080161e5
 80161cc:	08016305 	.word	0x08016305
 80161d0:	08016305 	.word	0x08016305
 80161d4:	08016305 	.word	0x08016305
 80161d8:	080162c7 	.word	0x080162c7
 80161dc:	08016203 	.word	0x08016203
 80161e0:	08016203 	.word	0x08016203
	{
		case PTP_INITIALIZING:
		case PTP_FAULTY:
		case PTP_DISABLED:

			DBGV("handleAnnounce: disreguard\n");
 80161e4:	f107 031c 	add.w	r3, r7, #28
 80161e8:	4618      	mov	r0, r3
 80161ea:	f003 fa97 	bl	801971c <getTime>
 80161ee:	69fb      	ldr	r3, [r7, #28]
 80161f0:	6a3a      	ldr	r2, [r7, #32]
 80161f2:	4619      	mov	r1, r3
 80161f4:	4859      	ldr	r0, [pc, #356]	; (801635c <handleAnnounce+0x240>)
 80161f6:	f004 fa91 	bl	801a71c <iprintf>
 80161fa:	485d      	ldr	r0, [pc, #372]	; (8016370 <handleAnnounce+0x254>)
 80161fc:	f004 fb02 	bl	801a804 <puts>
			break;
 8016200:	e0a9      	b.n	8016356 <handleAnnounce+0x23a>

		case PTP_UNCALIBRATED:
		case PTP_SLAVE:

			/* Valid announce message is received : BMC algorithm will be executed */
			setFlag(ptpClock->events, STATE_DECISION_EVENT);
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
 8016208:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
			isFromCurrentParent = isSamePortIdentity(
			&ptpClock->parentDS.parentPortIdentity,
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	f103 0228 	add.w	r2, r3, #40	; 0x28
			&ptpClock->msgTmpHeader.sourcePortIdentity);
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	3398      	adds	r3, #152	; 0x98
			isFromCurrentParent = isSamePortIdentity(
 801621c:	4619      	mov	r1, r3
 801621e:	4610      	mov	r0, r2
 8016220:	f7fe fb8e 	bl	8014940 <isSamePortIdentity>
 8016224:	4603      	mov	r3, r0
 8016226:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			msgUnpackAnnounce(ptpClock->msgIbuf, &ptpClock->msgTmp.announce);
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	f503 72fc 	add.w	r2, r3, #504	; 0x1f8
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	33a8      	adds	r3, #168	; 0xa8
 8016234:	4619      	mov	r1, r3
 8016236:	4610      	mov	r0, r2
 8016238:	f001 fd65 	bl	8017d06 <msgUnpackAnnounce>
			if (isFromCurrentParent)
 801623c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8016240:	2b00      	cmp	r3, #0
 8016242:	d028      	beq.n	8016296 <handleAnnounce+0x17a>
			{
					s1(ptpClock, &ptpClock->msgTmpHeader, &ptpClock->msgTmp.announce);
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	f103 0180 	add.w	r1, r3, #128	; 0x80
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	33a8      	adds	r3, #168	; 0xa8
 801624e:	461a      	mov	r2, r3
 8016250:	6878      	ldr	r0, [r7, #4]
 8016252:	f7fe fd31 	bl	8014cb8 <s1>
					/* Reset  Timer handling Announce receipt timeout */
					timerStart(ANNOUNCE_RECEIPT_TIMER, (ptpClock->portDS.announceReceiptTimeout) * (pow2ms(ptpClock->portDS.logAnnounceInterval)));
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 801625c:	4619      	mov	r1, r3
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 8016264:	2b00      	cmp	r3, #0
 8016266:	dd07      	ble.n	8016278 <handleAnnounce+0x15c>
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 801626e:	461a      	mov	r2, r3
 8016270:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8016274:	4093      	lsls	r3, r2
 8016276:	e007      	b.n	8016288 <handleAnnounce+0x16c>
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 801627e:	425b      	negs	r3, r3
 8016280:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8016284:	fa42 f303 	asr.w	r3, r2, r3
 8016288:	fb01 f303 	mul.w	r3, r1, r3
 801628c:	4619      	mov	r1, r3
 801628e:	2003      	movs	r0, #3
 8016290:	f003 fb68 	bl	8019964 <timerStart>
				DBGV("handleAnnounce: from another foreign master\n");
				/* addForeign takes care  of AnnounceUnpacking */
				addForeign(ptpClock, &ptpClock->msgTmpHeader, &ptpClock->msgTmp.announce);
			}

			break;
 8016294:	e05f      	b.n	8016356 <handleAnnounce+0x23a>
				DBGV("handleAnnounce: from another foreign master\n");
 8016296:	f107 0314 	add.w	r3, r7, #20
 801629a:	4618      	mov	r0, r3
 801629c:	f003 fa3e 	bl	801971c <getTime>
 80162a0:	697b      	ldr	r3, [r7, #20]
 80162a2:	69ba      	ldr	r2, [r7, #24]
 80162a4:	4619      	mov	r1, r3
 80162a6:	482d      	ldr	r0, [pc, #180]	; (801635c <handleAnnounce+0x240>)
 80162a8:	f004 fa38 	bl	801a71c <iprintf>
 80162ac:	4831      	ldr	r0, [pc, #196]	; (8016374 <handleAnnounce+0x258>)
 80162ae:	f004 faa9 	bl	801a804 <puts>
				addForeign(ptpClock, &ptpClock->msgTmpHeader, &ptpClock->msgTmp.announce);
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	f103 0180 	add.w	r1, r3, #128	; 0x80
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	33a8      	adds	r3, #168	; 0xa8
 80162bc:	461a      	mov	r2, r3
 80162be:	6878      	ldr	r0, [r7, #4]
 80162c0:	f7fe fb5e 	bl	8014980 <addForeign>
			break;
 80162c4:	e047      	b.n	8016356 <handleAnnounce+0x23a>

		case PTP_PASSIVE:
				timerStart(ANNOUNCE_RECEIPT_TIMER, (ptpClock->portDS.announceReceiptTimeout)*(pow2ms(ptpClock->portDS.logAnnounceInterval)));
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 80162cc:	4619      	mov	r1, r3
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 80162d4:	2b00      	cmp	r3, #0
 80162d6:	dd07      	ble.n	80162e8 <handleAnnounce+0x1cc>
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 80162de:	461a      	mov	r2, r3
 80162e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80162e4:	4093      	lsls	r3, r2
 80162e6:	e007      	b.n	80162f8 <handleAnnounce+0x1dc>
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	f993 306c 	ldrsb.w	r3, [r3, #108]	; 0x6c
 80162ee:	425b      	negs	r3, r3
 80162f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80162f4:	fa42 f303 	asr.w	r3, r2, r3
 80162f8:	fb01 f303 	mul.w	r3, r1, r3
 80162fc:	4619      	mov	r1, r3
 80162fe:	2003      	movs	r0, #3
 8016300:	f003 fb30 	bl	8019964 <timerStart>
		case PTP_MASTER:
		case PTP_PRE_MASTER:
		case PTP_LISTENING:
		default :

			DBGV("handleAnnounce: from another foreign master\n");
 8016304:	f107 030c 	add.w	r3, r7, #12
 8016308:	4618      	mov	r0, r3
 801630a:	f003 fa07 	bl	801971c <getTime>
 801630e:	68fb      	ldr	r3, [r7, #12]
 8016310:	693a      	ldr	r2, [r7, #16]
 8016312:	4619      	mov	r1, r3
 8016314:	4811      	ldr	r0, [pc, #68]	; (801635c <handleAnnounce+0x240>)
 8016316:	f004 fa01 	bl	801a71c <iprintf>
 801631a:	4816      	ldr	r0, [pc, #88]	; (8016374 <handleAnnounce+0x258>)
 801631c:	f004 fa72 	bl	801a804 <puts>
			msgUnpackAnnounce(ptpClock->msgIbuf, &ptpClock->msgTmp.announce);
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	f503 72fc 	add.w	r2, r3, #504	; 0x1f8
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	33a8      	adds	r3, #168	; 0xa8
 801632a:	4619      	mov	r1, r3
 801632c:	4610      	mov	r0, r2
 801632e:	f001 fcea 	bl	8017d06 <msgUnpackAnnounce>

			/* Valid announce message is received : BMC algorithm will be executed */
			setFlag(ptpClock->events, STATE_DECISION_EVENT);
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
 8016338:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
			addForeign(ptpClock, &ptpClock->msgTmpHeader, &ptpClock->msgTmp.announce);
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	f103 0180 	add.w	r1, r3, #128	; 0x80
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	33a8      	adds	r3, #168	; 0xa8
 801634c:	461a      	mov	r2, r3
 801634e:	6878      	ldr	r0, [r7, #4]
 8016350:	f7fe fb16 	bl	8014980 <addForeign>

			break;
 8016354:	bf00      	nop
	}
}
 8016356:	3740      	adds	r7, #64	; 0x40
 8016358:	46bd      	mov	sp, r7
 801635a:	bd80      	pop	{r7, pc}
 801635c:	080207e8 	.word	0x080207e8
 8016360:	08020b3c 	.word	0x08020b3c
 8016364:	080207b0 	.word	0x080207b0
 8016368:	08020b64 	.word	0x08020b64
 801636c:	08020b84 	.word	0x08020b84
 8016370:	08020ba8 	.word	0x08020ba8
 8016374:	08020bc4 	.word	0x08020bc4

08016378 <handleSync>:

static void handleSync(PtpClock *ptpClock, TimeInternal *time, bool isFromSelf)
{
 8016378:	b580      	push	{r7, lr}
 801637a:	b09c      	sub	sp, #112	; 0x70
 801637c:	af00      	add	r7, sp, #0
 801637e:	60f8      	str	r0, [r7, #12]
 8016380:	60b9      	str	r1, [r7, #8]
 8016382:	4613      	mov	r3, r2
 8016384:	71fb      	strb	r3, [r7, #7]
	TimeInternal originTimestamp;
	TimeInternal correctionField;
	bool  isFromCurrentParent = FALSE;
 8016386:	2300      	movs	r3, #0
 8016388:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	DBGV("handleSync: received in state %s\n", stateString(ptpClock->portDS.portState));
 801638c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8016390:	4618      	mov	r0, r3
 8016392:	f003 f9c3 	bl	801971c <getTime>
 8016396:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016398:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801639a:	4619      	mov	r1, r3
 801639c:	488f      	ldr	r0, [pc, #572]	; (80165dc <handleSync+0x264>)
 801639e:	f004 f9bd 	bl	801a71c <iprintf>
 80163a2:	68fb      	ldr	r3, [r7, #12]
 80163a4:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80163a8:	4618      	mov	r0, r3
 80163aa:	f7fe ff83 	bl	80152b4 <stateString>
 80163ae:	4603      	mov	r3, r0
 80163b0:	4619      	mov	r1, r3
 80163b2:	488b      	ldr	r0, [pc, #556]	; (80165e0 <handleSync+0x268>)
 80163b4:	f004 f9b2 	bl	801a71c <iprintf>

	if (ptpClock->msgIbufLength < SYNC_LENGTH)
 80163b8:	68fb      	ldr	r3, [r7, #12]
 80163ba:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 80163be:	2b2b      	cmp	r3, #43	; 0x2b
 80163c0:	dc12      	bgt.n	80163e8 <handleSync+0x70>
	{
		ERROR("handleSync: short message\n");
 80163c2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80163c6:	4618      	mov	r0, r3
 80163c8:	f003 f9a8 	bl	801971c <getTime>
 80163cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80163ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80163d0:	4619      	mov	r1, r3
 80163d2:	4884      	ldr	r0, [pc, #528]	; (80165e4 <handleSync+0x26c>)
 80163d4:	f004 f9a2 	bl	801a71c <iprintf>
 80163d8:	4883      	ldr	r0, [pc, #524]	; (80165e8 <handleSync+0x270>)
 80163da:	f004 fa13 	bl	801a804 <puts>
		toState(ptpClock, PTP_FAULTY);
 80163de:	2101      	movs	r1, #1
 80163e0:	68f8      	ldr	r0, [r7, #12]
 80163e2:	f7fe ffb1 	bl	8015348 <toState>
 80163e6:	e0f5      	b.n	80165d4 <handleSync+0x25c>
		return;
	}

	switch (ptpClock->portDS.portState)
 80163e8:	68fb      	ldr	r3, [r7, #12]
 80163ea:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80163ee:	2b08      	cmp	r3, #8
 80163f0:	f200 80e1 	bhi.w	80165b6 <handleSync+0x23e>
 80163f4:	a201      	add	r2, pc, #4	; (adr r2, 80163fc <handleSync+0x84>)
 80163f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80163fa:	bf00      	nop
 80163fc:	08016421 	.word	0x08016421
 8016400:	08016421 	.word	0x08016421
 8016404:	08016421 	.word	0x08016421
 8016408:	080165b7 	.word	0x080165b7
 801640c:	080165b7 	.word	0x080165b7
 8016410:	0801654b 	.word	0x0801654b
 8016414:	08016593 	.word	0x08016593
 8016418:	0801643f 	.word	0x0801643f
 801641c:	0801643f 	.word	0x0801643f
	{
		case PTP_INITIALIZING:
		case PTP_FAULTY:
		case PTP_DISABLED:

			DBGV("handleSync: disreguard\n");
 8016420:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8016424:	4618      	mov	r0, r3
 8016426:	f003 f979 	bl	801971c <getTime>
 801642a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801642c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801642e:	4619      	mov	r1, r3
 8016430:	486a      	ldr	r0, [pc, #424]	; (80165dc <handleSync+0x264>)
 8016432:	f004 f973 	bl	801a71c <iprintf>
 8016436:	486d      	ldr	r0, [pc, #436]	; (80165ec <handleSync+0x274>)
 8016438:	f004 f9e4 	bl	801a804 <puts>
			break;
 801643c:	e0ca      	b.n	80165d4 <handleSync+0x25c>

		case PTP_UNCALIBRATED:
		case PTP_SLAVE:

			if (isFromSelf)
 801643e:	79fb      	ldrb	r3, [r7, #7]
 8016440:	2b00      	cmp	r3, #0
 8016442:	d00e      	beq.n	8016462 <handleSync+0xea>
			{
				DBGV("handleSync: ignore from self\n");
 8016444:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8016448:	4618      	mov	r0, r3
 801644a:	f003 f967 	bl	801971c <getTime>
 801644e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016450:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016452:	4619      	mov	r1, r3
 8016454:	4861      	ldr	r0, [pc, #388]	; (80165dc <handleSync+0x264>)
 8016456:	f004 f961 	bl	801a71c <iprintf>
 801645a:	4865      	ldr	r0, [pc, #404]	; (80165f0 <handleSync+0x278>)
 801645c:	f004 f9d2 	bl	801a804 <puts>
				break;
 8016460:	e0b8      	b.n	80165d4 <handleSync+0x25c>
			}

			isFromCurrentParent = isSamePortIdentity(
			&ptpClock->parentDS.parentPortIdentity,
 8016462:	68fb      	ldr	r3, [r7, #12]
 8016464:	f103 0228 	add.w	r2, r3, #40	; 0x28
			&ptpClock->msgTmpHeader.sourcePortIdentity);
 8016468:	68fb      	ldr	r3, [r7, #12]
 801646a:	3398      	adds	r3, #152	; 0x98
			isFromCurrentParent = isSamePortIdentity(
 801646c:	4619      	mov	r1, r3
 801646e:	4610      	mov	r0, r2
 8016470:	f7fe fa66 	bl	8014940 <isSamePortIdentity>
 8016474:	4603      	mov	r3, r0
 8016476:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

			if (!isFromCurrentParent)
 801647a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801647e:	f083 0301 	eor.w	r3, r3, #1
 8016482:	b2db      	uxtb	r3, r3
 8016484:	2b00      	cmp	r3, #0
 8016486:	d00e      	beq.n	80164a6 <handleSync+0x12e>
			{
				DBGV("handleSync: ignore from another master\n");
 8016488:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801648c:	4618      	mov	r0, r3
 801648e:	f003 f945 	bl	801971c <getTime>
 8016492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016494:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016496:	4619      	mov	r1, r3
 8016498:	4850      	ldr	r0, [pc, #320]	; (80165dc <handleSync+0x264>)
 801649a:	f004 f93f 	bl	801a71c <iprintf>
 801649e:	4855      	ldr	r0, [pc, #340]	; (80165f4 <handleSync+0x27c>)
 80164a0:	f004 f9b0 	bl	801a804 <puts>
				break;
 80164a4:	e096      	b.n	80165d4 <handleSync+0x25c>
			}

			ptpClock->timestamp_syncRecieve = *time;
 80164a6:	68fb      	ldr	r3, [r7, #12]
 80164a8:	68ba      	ldr	r2, [r7, #8]
 80164aa:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80164ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80164b2:	e883 0003 	stmia.w	r3, {r0, r1}
			scaledNanosecondsToInternalTime(&ptpClock->msgTmpHeader.correctionfield, &correctionField);
 80164b6:	68fb      	ldr	r3, [r7, #12]
 80164b8:	3390      	adds	r3, #144	; 0x90
 80164ba:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80164be:	4611      	mov	r1, r2
 80164c0:	4618      	mov	r0, r3
 80164c2:	f7fd ffad 	bl	8014420 <scaledNanosecondsToInternalTime>

			if (getFlag(ptpClock->msgTmpHeader.flagField[0], FLAG0_TWO_STEP))
 80164c6:	68fb      	ldr	r3, [r7, #12]
 80164c8:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 80164cc:	f003 0302 	and.w	r3, r3, #2
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	d013      	beq.n	80164fc <handleSync+0x184>
			{
				ptpClock->waitingForFollowUp = TRUE;
 80164d4:	68fb      	ldr	r3, [r7, #12]
 80164d6:	2201      	movs	r2, #1
 80164d8:	f883 238c 	strb.w	r2, [r3, #908]	; 0x38c
				ptpClock->recvSyncSequenceId = ptpClock->msgTmpHeader.sequenceId;
 80164dc:	68fb      	ldr	r3, [r7, #12]
 80164de:	f9b3 20a2 	ldrsh.w	r2, [r3, #162]	; 0xa2
 80164e2:	68fb      	ldr	r3, [r7, #12]
 80164e4:	f8a3 238a 	strh.w	r2, [r3, #906]	; 0x38a
				/* Save correctionField of Sync message for future use */
				ptpClock->correctionField_sync = correctionField;
 80164e8:	68fb      	ldr	r3, [r7, #12]
 80164ea:	f503 735c 	add.w	r3, r3, #880	; 0x370
 80164ee:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80164f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80164f6:	e883 0003 	stmia.w	r3, {r0, r1}
				updateOffset(ptpClock, &ptpClock->timestamp_syncRecieve, &originTimestamp, &correctionField);
				updateClock(ptpClock);
				issueDelayReqTimerExpired(ptpClock);
			}

			break;
 80164fa:	e06b      	b.n	80165d4 <handleSync+0x25c>
				msgUnpackSync(ptpClock->msgIbuf, &ptpClock->msgTmp.sync);
 80164fc:	68fb      	ldr	r3, [r7, #12]
 80164fe:	f503 72fc 	add.w	r2, r3, #504	; 0x1f8
 8016502:	68fb      	ldr	r3, [r7, #12]
 8016504:	33a8      	adds	r3, #168	; 0xa8
 8016506:	4619      	mov	r1, r3
 8016508:	4610      	mov	r0, r2
 801650a:	f001 fcc5 	bl	8017e98 <msgUnpackSync>
				ptpClock->waitingForFollowUp = FALSE;
 801650e:	68fb      	ldr	r3, [r7, #12]
 8016510:	2200      	movs	r2, #0
 8016512:	f883 238c 	strb.w	r2, [r3, #908]	; 0x38c
				toInternalTime(&originTimestamp, &ptpClock->msgTmp.sync.originTimestamp);
 8016516:	68fb      	ldr	r3, [r7, #12]
 8016518:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 801651c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8016520:	4611      	mov	r1, r2
 8016522:	4618      	mov	r0, r3
 8016524:	f7fd fffc 	bl	8014520 <toInternalTime>
				updateOffset(ptpClock, &ptpClock->timestamp_syncRecieve, &originTimestamp, &correctionField);
 8016528:	68fb      	ldr	r3, [r7, #12]
 801652a:	f503 7156 	add.w	r1, r3, #856	; 0x358
 801652e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8016532:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8016536:	68f8      	ldr	r0, [r7, #12]
 8016538:	f002 fdd4 	bl	80190e4 <updateOffset>
				updateClock(ptpClock);
 801653c:	68f8      	ldr	r0, [r7, #12]
 801653e:	f002 ff63 	bl	8019408 <updateClock>
				issueDelayReqTimerExpired(ptpClock);
 8016542:	68f8      	ldr	r0, [r7, #12]
 8016544:	f000 fe4e 	bl	80171e4 <issueDelayReqTimerExpired>
			break;
 8016548:	e044      	b.n	80165d4 <handleSync+0x25c>

		case PTP_MASTER:

			if (!isFromSelf)
 801654a:	79fb      	ldrb	r3, [r7, #7]
 801654c:	f083 0301 	eor.w	r3, r3, #1
 8016550:	b2db      	uxtb	r3, r3
 8016552:	2b00      	cmp	r3, #0
 8016554:	d00e      	beq.n	8016574 <handleSync+0x1fc>
			{
				DBGV("handleSync: from another master\n");
 8016556:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801655a:	4618      	mov	r0, r3
 801655c:	f003 f8de 	bl	801971c <getTime>
 8016560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016562:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016564:	4619      	mov	r1, r3
 8016566:	481d      	ldr	r0, [pc, #116]	; (80165dc <handleSync+0x264>)
 8016568:	f004 f8d8 	bl	801a71c <iprintf>
 801656c:	4822      	ldr	r0, [pc, #136]	; (80165f8 <handleSync+0x280>)
 801656e:	f004 f949 	bl	801a804 <puts>
				break;
 8016572:	e02f      	b.n	80165d4 <handleSync+0x25c>
			}
			else
			{
				DBGV("handleSync: ignore from self\n");
 8016574:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016578:	4618      	mov	r0, r3
 801657a:	f003 f8cf 	bl	801971c <getTime>
 801657e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016580:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016582:	4619      	mov	r1, r3
 8016584:	4815      	ldr	r0, [pc, #84]	; (80165dc <handleSync+0x264>)
 8016586:	f004 f8c9 	bl	801a71c <iprintf>
 801658a:	4819      	ldr	r0, [pc, #100]	; (80165f0 <handleSync+0x278>)
 801658c:	f004 f93a 	bl	801a804 <puts>
				break;
 8016590:	e020      	b.n	80165d4 <handleSync+0x25c>
//            issueFollowup(ptpClock, time);
//            break;
//        }
		case PTP_PASSIVE:

			DBGV("handleSync: disreguard\n");
 8016592:	f107 031c 	add.w	r3, r7, #28
 8016596:	4618      	mov	r0, r3
 8016598:	f003 f8c0 	bl	801971c <getTime>
 801659c:	69fb      	ldr	r3, [r7, #28]
 801659e:	6a3a      	ldr	r2, [r7, #32]
 80165a0:	4619      	mov	r1, r3
 80165a2:	480e      	ldr	r0, [pc, #56]	; (80165dc <handleSync+0x264>)
 80165a4:	f004 f8ba 	bl	801a71c <iprintf>
 80165a8:	4810      	ldr	r0, [pc, #64]	; (80165ec <handleSync+0x274>)
 80165aa:	f004 f92b 	bl	801a804 <puts>
			issueDelayReqTimerExpired(ptpClock);
 80165ae:	68f8      	ldr	r0, [r7, #12]
 80165b0:	f000 fe18 	bl	80171e4 <issueDelayReqTimerExpired>

			break;
 80165b4:	e00e      	b.n	80165d4 <handleSync+0x25c>

		default:

			DBGV("handleSync: disreguard\n");
 80165b6:	f107 0314 	add.w	r3, r7, #20
 80165ba:	4618      	mov	r0, r3
 80165bc:	f003 f8ae 	bl	801971c <getTime>
 80165c0:	697b      	ldr	r3, [r7, #20]
 80165c2:	69ba      	ldr	r2, [r7, #24]
 80165c4:	4619      	mov	r1, r3
 80165c6:	4805      	ldr	r0, [pc, #20]	; (80165dc <handleSync+0x264>)
 80165c8:	f004 f8a8 	bl	801a71c <iprintf>
 80165cc:	4807      	ldr	r0, [pc, #28]	; (80165ec <handleSync+0x274>)
 80165ce:	f004 f919 	bl	801a804 <puts>
			break;
 80165d2:	bf00      	nop
	}
}
 80165d4:	3770      	adds	r7, #112	; 0x70
 80165d6:	46bd      	mov	sp, r7
 80165d8:	bd80      	pop	{r7, pc}
 80165da:	bf00      	nop
 80165dc:	080207e8 	.word	0x080207e8
 80165e0:	08020bf0 	.word	0x08020bf0
 80165e4:	080207b0 	.word	0x080207b0
 80165e8:	08020c14 	.word	0x08020c14
 80165ec:	08020c30 	.word	0x08020c30
 80165f0:	08020c48 	.word	0x08020c48
 80165f4:	08020c68 	.word	0x08020c68
 80165f8:	08020c90 	.word	0x08020c90

080165fc <handleFollowUp>:


static void handleFollowUp(PtpClock *ptpClock, bool isFromSelf)
{
 80165fc:	b580      	push	{r7, lr}
 80165fe:	b09c      	sub	sp, #112	; 0x70
 8016600:	af00      	add	r7, sp, #0
 8016602:	6078      	str	r0, [r7, #4]
 8016604:	460b      	mov	r3, r1
 8016606:	70fb      	strb	r3, [r7, #3]
	TimeInternal preciseOriginTimestamp;
	TimeInternal correctionField;
	bool  isFromCurrentParent = FALSE;
 8016608:	2300      	movs	r3, #0
 801660a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	DBGV("handleFollowup: received in state %s\n", stateString(ptpClock->portDS.portState));
 801660e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8016612:	4618      	mov	r0, r3
 8016614:	f003 f882 	bl	801971c <getTime>
 8016618:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801661a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801661c:	4619      	mov	r1, r3
 801661e:	488f      	ldr	r0, [pc, #572]	; (801685c <handleFollowUp+0x260>)
 8016620:	f004 f87c 	bl	801a71c <iprintf>
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 801662a:	4618      	mov	r0, r3
 801662c:	f7fe fe42 	bl	80152b4 <stateString>
 8016630:	4603      	mov	r3, r0
 8016632:	4619      	mov	r1, r3
 8016634:	488a      	ldr	r0, [pc, #552]	; (8016860 <handleFollowUp+0x264>)
 8016636:	f004 f871 	bl	801a71c <iprintf>

	if (ptpClock->msgIbufLength < FOLLOW_UP_LENGTH)
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 8016640:	2b2b      	cmp	r3, #43	; 0x2b
 8016642:	dc12      	bgt.n	801666a <handleFollowUp+0x6e>
	{
		ERROR("handleFollowup: short message\n");
 8016644:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8016648:	4618      	mov	r0, r3
 801664a:	f003 f867 	bl	801971c <getTime>
 801664e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016650:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016652:	4619      	mov	r1, r3
 8016654:	4883      	ldr	r0, [pc, #524]	; (8016864 <handleFollowUp+0x268>)
 8016656:	f004 f861 	bl	801a71c <iprintf>
 801665a:	4883      	ldr	r0, [pc, #524]	; (8016868 <handleFollowUp+0x26c>)
 801665c:	f004 f8d2 	bl	801a804 <puts>
		toState(ptpClock, PTP_FAULTY);
 8016660:	2101      	movs	r1, #1
 8016662:	6878      	ldr	r0, [r7, #4]
 8016664:	f7fe fe70 	bl	8015348 <toState>
		return;
 8016668:	e0f4      	b.n	8016854 <handleFollowUp+0x258>
	}

	if (isFromSelf)
 801666a:	78fb      	ldrb	r3, [r7, #3]
 801666c:	2b00      	cmp	r3, #0
 801666e:	d00e      	beq.n	801668e <handleFollowUp+0x92>
	{
		DBGV("handleFollowup: ignore from self\n");
 8016670:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8016674:	4618      	mov	r0, r3
 8016676:	f003 f851 	bl	801971c <getTime>
 801667a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801667c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801667e:	4619      	mov	r1, r3
 8016680:	4876      	ldr	r0, [pc, #472]	; (801685c <handleFollowUp+0x260>)
 8016682:	f004 f84b 	bl	801a71c <iprintf>
 8016686:	4879      	ldr	r0, [pc, #484]	; (801686c <handleFollowUp+0x270>)
 8016688:	f004 f8bc 	bl	801a804 <puts>
		return;
 801668c:	e0e2      	b.n	8016854 <handleFollowUp+0x258>
	}

	switch (ptpClock->portDS.portState)
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8016694:	2b08      	cmp	r3, #8
 8016696:	f200 80ce 	bhi.w	8016836 <handleFollowUp+0x23a>
 801669a:	a201      	add	r2, pc, #4	; (adr r2, 80166a0 <handleFollowUp+0xa4>)
 801669c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80166a0:	080166c5 	.word	0x080166c5
 80166a4:	080166c5 	.word	0x080166c5
 80166a8:	080166c5 	.word	0x080166c5
 80166ac:	080166c5 	.word	0x080166c5
 80166b0:	08016837 	.word	0x08016837
 80166b4:	080167f5 	.word	0x080167f5
 80166b8:	08016813 	.word	0x08016813
 80166bc:	080166e3 	.word	0x080166e3
 80166c0:	080166e3 	.word	0x080166e3
		case PTP_INITIALIZING:
		case PTP_FAULTY:
		case PTP_DISABLED:
		case PTP_LISTENING:

			DBGV("handleFollowup: disreguard\n");
 80166c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80166c8:	4618      	mov	r0, r3
 80166ca:	f003 f827 	bl	801971c <getTime>
 80166ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80166d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80166d2:	4619      	mov	r1, r3
 80166d4:	4861      	ldr	r0, [pc, #388]	; (801685c <handleFollowUp+0x260>)
 80166d6:	f004 f821 	bl	801a71c <iprintf>
 80166da:	4865      	ldr	r0, [pc, #404]	; (8016870 <handleFollowUp+0x274>)
 80166dc:	f004 f892 	bl	801a804 <puts>
			break;
 80166e0:	e0b8      	b.n	8016854 <handleFollowUp+0x258>

		case PTP_UNCALIBRATED:
		case PTP_SLAVE:

			isFromCurrentParent = isSamePortIdentity(
			&ptpClock->parentDS.parentPortIdentity,
 80166e2:	687b      	ldr	r3, [r7, #4]
 80166e4:	f103 0228 	add.w	r2, r3, #40	; 0x28
			&ptpClock->msgTmpHeader.sourcePortIdentity);
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	3398      	adds	r3, #152	; 0x98
			isFromCurrentParent = isSamePortIdentity(
 80166ec:	4619      	mov	r1, r3
 80166ee:	4610      	mov	r0, r2
 80166f0:	f7fe f926 	bl	8014940 <isSamePortIdentity>
 80166f4:	4603      	mov	r3, r0
 80166f6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

			if (!ptpClock->waitingForFollowUp)
 80166fa:	687b      	ldr	r3, [r7, #4]
 80166fc:	f893 338c 	ldrb.w	r3, [r3, #908]	; 0x38c
 8016700:	f083 0301 	eor.w	r3, r3, #1
 8016704:	b2db      	uxtb	r3, r3
 8016706:	2b00      	cmp	r3, #0
 8016708:	d00e      	beq.n	8016728 <handleFollowUp+0x12c>
			{
				DBGV("handleFollowup: not waiting a message\n");
 801670a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801670e:	4618      	mov	r0, r3
 8016710:	f003 f804 	bl	801971c <getTime>
 8016714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016716:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016718:	4619      	mov	r1, r3
 801671a:	4850      	ldr	r0, [pc, #320]	; (801685c <handleFollowUp+0x260>)
 801671c:	f003 fffe 	bl	801a71c <iprintf>
 8016720:	4854      	ldr	r0, [pc, #336]	; (8016874 <handleFollowUp+0x278>)
 8016722:	f004 f86f 	bl	801a804 <puts>
				break;
 8016726:	e095      	b.n	8016854 <handleFollowUp+0x258>
			}

			if (!isFromCurrentParent)
 8016728:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 801672c:	f083 0301 	eor.w	r3, r3, #1
 8016730:	b2db      	uxtb	r3, r3
 8016732:	2b00      	cmp	r3, #0
 8016734:	d00e      	beq.n	8016754 <handleFollowUp+0x158>
			{
				DBGV("handleFollowup: not from current parent\n");
 8016736:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801673a:	4618      	mov	r0, r3
 801673c:	f002 ffee 	bl	801971c <getTime>
 8016740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016742:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016744:	4619      	mov	r1, r3
 8016746:	4845      	ldr	r0, [pc, #276]	; (801685c <handleFollowUp+0x260>)
 8016748:	f003 ffe8 	bl	801a71c <iprintf>
 801674c:	484a      	ldr	r0, [pc, #296]	; (8016878 <handleFollowUp+0x27c>)
 801674e:	f004 f859 	bl	801a804 <puts>
				break;
 8016752:	e07f      	b.n	8016854 <handleFollowUp+0x258>
			}

			if (ptpClock->recvSyncSequenceId !=  ptpClock->msgTmpHeader.sequenceId)
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	f9b3 238a 	ldrsh.w	r2, [r3, #906]	; 0x38a
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	f9b3 30a2 	ldrsh.w	r3, [r3, #162]	; 0xa2
 8016760:	429a      	cmp	r2, r3
 8016762:	d00e      	beq.n	8016782 <handleFollowUp+0x186>
			{
				DBGV("handleFollowup: SequenceID doesn't match with last Sync message\n");
 8016764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016768:	4618      	mov	r0, r3
 801676a:	f002 ffd7 	bl	801971c <getTime>
 801676e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016770:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016772:	4619      	mov	r1, r3
 8016774:	4839      	ldr	r0, [pc, #228]	; (801685c <handleFollowUp+0x260>)
 8016776:	f003 ffd1 	bl	801a71c <iprintf>
 801677a:	4840      	ldr	r0, [pc, #256]	; (801687c <handleFollowUp+0x280>)
 801677c:	f004 f842 	bl	801a804 <puts>
				break;
 8016780:	e068      	b.n	8016854 <handleFollowUp+0x258>
			}

			msgUnpackFollowUp(ptpClock->msgIbuf, &ptpClock->msgTmp.follow);
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	f503 72fc 	add.w	r2, r3, #504	; 0x1f8
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	33a8      	adds	r3, #168	; 0xa8
 801678c:	4619      	mov	r1, r3
 801678e:	4610      	mov	r0, r2
 8016790:	f001 fc5e 	bl	8018050 <msgUnpackFollowUp>

			ptpClock->waitingForFollowUp = FALSE;
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	2200      	movs	r2, #0
 8016798:	f883 238c 	strb.w	r2, [r3, #908]	; 0x38c
			/* synchronize local clock */
			toInternalTime(&preciseOriginTimestamp, &ptpClock->msgTmp.follow.preciseOriginTimestamp);
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 80167a2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80167a6:	4611      	mov	r1, r2
 80167a8:	4618      	mov	r0, r3
 80167aa:	f7fd feb9 	bl	8014520 <toInternalTime>
			scaledNanosecondsToInternalTime(&ptpClock->msgTmpHeader.correctionfield, &correctionField);
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	3390      	adds	r3, #144	; 0x90
 80167b2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80167b6:	4611      	mov	r1, r2
 80167b8:	4618      	mov	r0, r3
 80167ba:	f7fd fe31 	bl	8014420 <scaledNanosecondsToInternalTime>
			addTime(&correctionField, &correctionField, &ptpClock->correctionField_sync);
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	f503 725c 	add.w	r2, r3, #880	; 0x370
 80167c4:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80167c8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80167cc:	4618      	mov	r0, r3
 80167ce:	f7fd ff27 	bl	8014620 <addTime>
			updateOffset(ptpClock, &ptpClock->timestamp_syncRecieve, &preciseOriginTimestamp, &correctionField);
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	f503 7156 	add.w	r1, r3, #856	; 0x358
 80167d8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80167dc:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80167e0:	6878      	ldr	r0, [r7, #4]
 80167e2:	f002 fc7f 	bl	80190e4 <updateOffset>
			updateClock(ptpClock);
 80167e6:	6878      	ldr	r0, [r7, #4]
 80167e8:	f002 fe0e 	bl	8019408 <updateClock>

			issueDelayReqTimerExpired(ptpClock);
 80167ec:	6878      	ldr	r0, [r7, #4]
 80167ee:	f000 fcf9 	bl	80171e4 <issueDelayReqTimerExpired>
			break;
 80167f2:	e02f      	b.n	8016854 <handleFollowUp+0x258>

		case PTP_MASTER:

			DBGV("handleFollowup: from another master\n");
 80167f4:	f107 031c 	add.w	r3, r7, #28
 80167f8:	4618      	mov	r0, r3
 80167fa:	f002 ff8f 	bl	801971c <getTime>
 80167fe:	69fb      	ldr	r3, [r7, #28]
 8016800:	6a3a      	ldr	r2, [r7, #32]
 8016802:	4619      	mov	r1, r3
 8016804:	4815      	ldr	r0, [pc, #84]	; (801685c <handleFollowUp+0x260>)
 8016806:	f003 ff89 	bl	801a71c <iprintf>
 801680a:	481d      	ldr	r0, [pc, #116]	; (8016880 <handleFollowUp+0x284>)
 801680c:	f003 fffa 	bl	801a804 <puts>
			break;
 8016810:	e020      	b.n	8016854 <handleFollowUp+0x258>

		case PTP_PASSIVE:

			DBGV("handleFollowup: disreguard\n");
 8016812:	f107 0314 	add.w	r3, r7, #20
 8016816:	4618      	mov	r0, r3
 8016818:	f002 ff80 	bl	801971c <getTime>
 801681c:	697b      	ldr	r3, [r7, #20]
 801681e:	69ba      	ldr	r2, [r7, #24]
 8016820:	4619      	mov	r1, r3
 8016822:	480e      	ldr	r0, [pc, #56]	; (801685c <handleFollowUp+0x260>)
 8016824:	f003 ff7a 	bl	801a71c <iprintf>
 8016828:	4811      	ldr	r0, [pc, #68]	; (8016870 <handleFollowUp+0x274>)
 801682a:	f003 ffeb 	bl	801a804 <puts>
			issueDelayReqTimerExpired(ptpClock);
 801682e:	6878      	ldr	r0, [r7, #4]
 8016830:	f000 fcd8 	bl	80171e4 <issueDelayReqTimerExpired>
			break;
 8016834:	e00e      	b.n	8016854 <handleFollowUp+0x258>

		default:

			DBG("handleFollowup: unrecognized state\n");
 8016836:	f107 030c 	add.w	r3, r7, #12
 801683a:	4618      	mov	r0, r3
 801683c:	f002 ff6e 	bl	801971c <getTime>
 8016840:	68fb      	ldr	r3, [r7, #12]
 8016842:	693a      	ldr	r2, [r7, #16]
 8016844:	4619      	mov	r1, r3
 8016846:	480f      	ldr	r0, [pc, #60]	; (8016884 <handleFollowUp+0x288>)
 8016848:	f003 ff68 	bl	801a71c <iprintf>
 801684c:	480e      	ldr	r0, [pc, #56]	; (8016888 <handleFollowUp+0x28c>)
 801684e:	f003 ffd9 	bl	801a804 <puts>
			break;
 8016852:	bf00      	nop
	}
}
 8016854:	3770      	adds	r7, #112	; 0x70
 8016856:	46bd      	mov	sp, r7
 8016858:	bd80      	pop	{r7, pc}
 801685a:	bf00      	nop
 801685c:	080207e8 	.word	0x080207e8
 8016860:	08020cb0 	.word	0x08020cb0
 8016864:	080207b0 	.word	0x080207b0
 8016868:	08020cd8 	.word	0x08020cd8
 801686c:	08020cf8 	.word	0x08020cf8
 8016870:	08020d1c 	.word	0x08020d1c
 8016874:	08020d38 	.word	0x08020d38
 8016878:	08020d60 	.word	0x08020d60
 801687c:	08020d88 	.word	0x08020d88
 8016880:	08020dc8 	.word	0x08020dc8
 8016884:	08020704 	.word	0x08020704
 8016888:	08020dec 	.word	0x08020dec

0801688c <handleDelayReq>:


static void handleDelayReq(PtpClock *ptpClock, TimeInternal *time, bool isFromSelf)
{
 801688c:	b580      	push	{r7, lr}
 801688e:	b090      	sub	sp, #64	; 0x40
 8016890:	af00      	add	r7, sp, #0
 8016892:	60f8      	str	r0, [r7, #12]
 8016894:	60b9      	str	r1, [r7, #8]
 8016896:	4613      	mov	r3, r2
 8016898:	71fb      	strb	r3, [r7, #7]
	switch (ptpClock->portDS.delayMechanism)
 801689a:	68fb      	ldr	r3, [r7, #12]
 801689c:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 80168a0:	2b01      	cmp	r3, #1
 80168a2:	d002      	beq.n	80168aa <handleDelayReq+0x1e>
 80168a4:	2b02      	cmp	r3, #2
 80168a6:	d07f      	beq.n	80169a8 <handleDelayReq+0x11c>
			break;

		default:

			/* none */
			break;
 80168a8:	e08d      	b.n	80169c6 <handleDelayReq+0x13a>
			DBGV("handleDelayReq: received in mode E2E in state %s\n", stateString(ptpClock->portDS.portState));
 80168aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80168ae:	4618      	mov	r0, r3
 80168b0:	f002 ff34 	bl	801971c <getTime>
 80168b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80168b8:	4619      	mov	r1, r3
 80168ba:	4844      	ldr	r0, [pc, #272]	; (80169cc <handleDelayReq+0x140>)
 80168bc:	f003 ff2e 	bl	801a71c <iprintf>
 80168c0:	68fb      	ldr	r3, [r7, #12]
 80168c2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80168c6:	4618      	mov	r0, r3
 80168c8:	f7fe fcf4 	bl	80152b4 <stateString>
 80168cc:	4603      	mov	r3, r0
 80168ce:	4619      	mov	r1, r3
 80168d0:	483f      	ldr	r0, [pc, #252]	; (80169d0 <handleDelayReq+0x144>)
 80168d2:	f003 ff23 	bl	801a71c <iprintf>
			if (ptpClock->msgIbufLength < DELAY_REQ_LENGTH)
 80168d6:	68fb      	ldr	r3, [r7, #12]
 80168d8:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 80168dc:	2b2b      	cmp	r3, #43	; 0x2b
 80168de:	dc12      	bgt.n	8016906 <handleDelayReq+0x7a>
				ERROR("handleDelayReq: short message\n");
 80168e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80168e4:	4618      	mov	r0, r3
 80168e6:	f002 ff19 	bl	801971c <getTime>
 80168ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80168ee:	4619      	mov	r1, r3
 80168f0:	4838      	ldr	r0, [pc, #224]	; (80169d4 <handleDelayReq+0x148>)
 80168f2:	f003 ff13 	bl	801a71c <iprintf>
 80168f6:	4838      	ldr	r0, [pc, #224]	; (80169d8 <handleDelayReq+0x14c>)
 80168f8:	f003 ff84 	bl	801a804 <puts>
				toState(ptpClock, PTP_FAULTY);
 80168fc:	2101      	movs	r1, #1
 80168fe:	68f8      	ldr	r0, [r7, #12]
 8016900:	f7fe fd22 	bl	8015348 <toState>
				return;
 8016904:	e05f      	b.n	80169c6 <handleDelayReq+0x13a>
			switch (ptpClock->portDS.portState)
 8016906:	68fb      	ldr	r3, [r7, #12]
 8016908:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 801690c:	2b08      	cmp	r3, #8
 801690e:	d83b      	bhi.n	8016988 <handleDelayReq+0xfc>
 8016910:	a201      	add	r2, pc, #4	; (adr r2, 8016918 <handleDelayReq+0x8c>)
 8016912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016916:	bf00      	nop
 8016918:	0801693d 	.word	0x0801693d
 801691c:	0801693d 	.word	0x0801693d
 8016920:	0801693d 	.word	0x0801693d
 8016924:	0801693d 	.word	0x0801693d
 8016928:	08016989 	.word	0x08016989
 801692c:	08016979 	.word	0x08016979
 8016930:	08016989 	.word	0x08016989
 8016934:	0801693d 	.word	0x0801693d
 8016938:	0801695b 	.word	0x0801695b
					DBGV("handleDelayReq: disreguard\n");
 801693c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016940:	4618      	mov	r0, r3
 8016942:	f002 feeb 	bl	801971c <getTime>
 8016946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016948:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801694a:	4619      	mov	r1, r3
 801694c:	481f      	ldr	r0, [pc, #124]	; (80169cc <handleDelayReq+0x140>)
 801694e:	f003 fee5 	bl	801a71c <iprintf>
 8016952:	4822      	ldr	r0, [pc, #136]	; (80169dc <handleDelayReq+0x150>)
 8016954:	f003 ff56 	bl	801a804 <puts>
					return;
 8016958:	e035      	b.n	80169c6 <handleDelayReq+0x13a>
					DBGV("handleDelayReq: disreguard\n");
 801695a:	f107 0320 	add.w	r3, r7, #32
 801695e:	4618      	mov	r0, r3
 8016960:	f002 fedc 	bl	801971c <getTime>
 8016964:	6a3b      	ldr	r3, [r7, #32]
 8016966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016968:	4619      	mov	r1, r3
 801696a:	4818      	ldr	r0, [pc, #96]	; (80169cc <handleDelayReq+0x140>)
 801696c:	f003 fed6 	bl	801a71c <iprintf>
 8016970:	481a      	ldr	r0, [pc, #104]	; (80169dc <handleDelayReq+0x150>)
 8016972:	f003 ff47 	bl	801a804 <puts>
					break;
 8016976:	e016      	b.n	80169a6 <handleDelayReq+0x11a>
					issueDelayResp(ptpClock, time, &ptpClock->msgTmpHeader);
 8016978:	68fb      	ldr	r3, [r7, #12]
 801697a:	3380      	adds	r3, #128	; 0x80
 801697c:	461a      	mov	r2, r3
 801697e:	68b9      	ldr	r1, [r7, #8]
 8016980:	68f8      	ldr	r0, [r7, #12]
 8016982:	f000 ff0f 	bl	80177a4 <issueDelayResp>
					break;
 8016986:	e00e      	b.n	80169a6 <handleDelayReq+0x11a>
					DBG("handleDelayReq: unrecognized state\n");
 8016988:	f107 0318 	add.w	r3, r7, #24
 801698c:	4618      	mov	r0, r3
 801698e:	f002 fec5 	bl	801971c <getTime>
 8016992:	69bb      	ldr	r3, [r7, #24]
 8016994:	69fa      	ldr	r2, [r7, #28]
 8016996:	4619      	mov	r1, r3
 8016998:	4811      	ldr	r0, [pc, #68]	; (80169e0 <handleDelayReq+0x154>)
 801699a:	f003 febf 	bl	801a71c <iprintf>
 801699e:	4811      	ldr	r0, [pc, #68]	; (80169e4 <handleDelayReq+0x158>)
 80169a0:	f003 ff30 	bl	801a804 <puts>
					break;
 80169a4:	bf00      	nop
			break;
 80169a6:	e00e      	b.n	80169c6 <handleDelayReq+0x13a>
			ERROR("handleDelayReq: disreguard in P2P mode\n");
 80169a8:	f107 0310 	add.w	r3, r7, #16
 80169ac:	4618      	mov	r0, r3
 80169ae:	f002 feb5 	bl	801971c <getTime>
 80169b2:	693b      	ldr	r3, [r7, #16]
 80169b4:	697a      	ldr	r2, [r7, #20]
 80169b6:	4619      	mov	r1, r3
 80169b8:	4806      	ldr	r0, [pc, #24]	; (80169d4 <handleDelayReq+0x148>)
 80169ba:	f003 feaf 	bl	801a71c <iprintf>
 80169be:	480a      	ldr	r0, [pc, #40]	; (80169e8 <handleDelayReq+0x15c>)
 80169c0:	f003 ff20 	bl	801a804 <puts>
			break;
 80169c4:	bf00      	nop
	}
}
 80169c6:	3740      	adds	r7, #64	; 0x40
 80169c8:	46bd      	mov	sp, r7
 80169ca:	bd80      	pop	{r7, pc}
 80169cc:	080207e8 	.word	0x080207e8
 80169d0:	08020e10 	.word	0x08020e10
 80169d4:	080207b0 	.word	0x080207b0
 80169d8:	08020e44 	.word	0x08020e44
 80169dc:	08020e64 	.word	0x08020e64
 80169e0:	08020704 	.word	0x08020704
 80169e4:	08020e80 	.word	0x08020e80
 80169e8:	08020ea4 	.word	0x08020ea4

080169ec <handleDelayResp>:



static void handleDelayResp(PtpClock *ptpClock, bool  isFromSelf)
{
 80169ec:	b580      	push	{r7, lr}
 80169ee:	b090      	sub	sp, #64	; 0x40
 80169f0:	af00      	add	r7, sp, #0
 80169f2:	6078      	str	r0, [r7, #4]
 80169f4:	460b      	mov	r3, r1
 80169f6:	70fb      	strb	r3, [r7, #3]
	bool  isFromCurrentParent = FALSE;
 80169f8:	2300      	movs	r3, #0
 80169fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	bool  isCurrentRequest = FALSE;
 80169fe:	2300      	movs	r3, #0
 8016a00:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	TimeInternal correctionField;

	switch (ptpClock->portDS.delayMechanism)
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8016a0a:	2b01      	cmp	r3, #1
 8016a0c:	d003      	beq.n	8016a16 <handleDelayResp+0x2a>
 8016a0e:	2b02      	cmp	r3, #2
 8016a10:	f000 80be 	beq.w	8016b90 <handleDelayResp+0x1a4>
			ERROR("handleDelayResp: disreguard in P2P mode\n");
			break;

		default:

			break;
 8016a14:	e0cc      	b.n	8016bb0 <handleDelayResp+0x1c4>
			DBGV("handleDelayResp: received in mode E2E in state %s\n", stateString(ptpClock->portDS.portState));
 8016a16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016a1a:	4618      	mov	r0, r3
 8016a1c:	f002 fe7e 	bl	801971c <getTime>
 8016a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016a24:	4619      	mov	r1, r3
 8016a26:	4864      	ldr	r0, [pc, #400]	; (8016bb8 <handleDelayResp+0x1cc>)
 8016a28:	f003 fe78 	bl	801a71c <iprintf>
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8016a32:	4618      	mov	r0, r3
 8016a34:	f7fe fc3e 	bl	80152b4 <stateString>
 8016a38:	4603      	mov	r3, r0
 8016a3a:	4619      	mov	r1, r3
 8016a3c:	485f      	ldr	r0, [pc, #380]	; (8016bbc <handleDelayResp+0x1d0>)
 8016a3e:	f003 fe6d 	bl	801a71c <iprintf>
			if (ptpClock->msgIbufLength < DELAY_RESP_LENGTH)
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 8016a48:	2b35      	cmp	r3, #53	; 0x35
 8016a4a:	dc12      	bgt.n	8016a72 <handleDelayResp+0x86>
				ERROR("handleDelayResp: short message\n");
 8016a4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016a50:	4618      	mov	r0, r3
 8016a52:	f002 fe63 	bl	801971c <getTime>
 8016a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016a5a:	4619      	mov	r1, r3
 8016a5c:	4858      	ldr	r0, [pc, #352]	; (8016bc0 <handleDelayResp+0x1d4>)
 8016a5e:	f003 fe5d 	bl	801a71c <iprintf>
 8016a62:	4858      	ldr	r0, [pc, #352]	; (8016bc4 <handleDelayResp+0x1d8>)
 8016a64:	f003 fece 	bl	801a804 <puts>
				toState(ptpClock, PTP_FAULTY);
 8016a68:	2101      	movs	r1, #1
 8016a6a:	6878      	ldr	r0, [r7, #4]
 8016a6c:	f7fe fc6c 	bl	8015348 <toState>
				return;
 8016a70:	e09e      	b.n	8016bb0 <handleDelayResp+0x1c4>
			switch (ptpClock->portDS.portState)
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8016a78:	2b08      	cmp	r3, #8
 8016a7a:	f200 8098 	bhi.w	8016bae <handleDelayResp+0x1c2>
 8016a7e:	a201      	add	r2, pc, #4	; (adr r2, 8016a84 <handleDelayResp+0x98>)
 8016a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016a84:	08016aa9 	.word	0x08016aa9
 8016a88:	08016aa9 	.word	0x08016aa9
 8016a8c:	08016aa9 	.word	0x08016aa9
 8016a90:	08016aa9 	.word	0x08016aa9
 8016a94:	08016baf 	.word	0x08016baf
 8016a98:	08016baf 	.word	0x08016baf
 8016a9c:	08016baf 	.word	0x08016baf
 8016aa0:	08016ac7 	.word	0x08016ac7
 8016aa4:	08016ac7 	.word	0x08016ac7
					DBGV("handleDelayResp: disreguard\n");
 8016aa8:	f107 031c 	add.w	r3, r7, #28
 8016aac:	4618      	mov	r0, r3
 8016aae:	f002 fe35 	bl	801971c <getTime>
 8016ab2:	69fb      	ldr	r3, [r7, #28]
 8016ab4:	6a3a      	ldr	r2, [r7, #32]
 8016ab6:	4619      	mov	r1, r3
 8016ab8:	483f      	ldr	r0, [pc, #252]	; (8016bb8 <handleDelayResp+0x1cc>)
 8016aba:	f003 fe2f 	bl	801a71c <iprintf>
 8016abe:	4842      	ldr	r0, [pc, #264]	; (8016bc8 <handleDelayResp+0x1dc>)
 8016ac0:	f003 fea0 	bl	801a804 <puts>
					return;
 8016ac4:	e074      	b.n	8016bb0 <handleDelayResp+0x1c4>
					msgUnpackDelayResp(ptpClock->msgIbuf, &ptpClock->msgTmp.resp);
 8016ac6:	687b      	ldr	r3, [r7, #4]
 8016ac8:	f503 72fc 	add.w	r2, r3, #504	; 0x1f8
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	33a8      	adds	r3, #168	; 0xa8
 8016ad0:	4619      	mov	r1, r3
 8016ad2:	4610      	mov	r0, r2
 8016ad4:	f001 fb74 	bl	80181c0 <msgUnpackDelayResp>
					&ptpClock->parentDS.parentPortIdentity,
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	f103 0228 	add.w	r2, r3, #40	; 0x28
					&ptpClock->msgTmpHeader.sourcePortIdentity);
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	3398      	adds	r3, #152	; 0x98
					isFromCurrentParent = isSamePortIdentity(
 8016ae2:	4619      	mov	r1, r3
 8016ae4:	4610      	mov	r0, r2
 8016ae6:	f7fd ff2b 	bl	8014940 <isSamePortIdentity>
 8016aea:	4603      	mov	r3, r0
 8016aec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					&ptpClock->portDS.portIdentity,
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	f103 0258 	add.w	r2, r3, #88	; 0x58
					&ptpClock->msgTmp.resp.requestingPortIdentity);
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	33b4      	adds	r3, #180	; 0xb4
					isCurrentRequest = isSamePortIdentity(
 8016afa:	4619      	mov	r1, r3
 8016afc:	4610      	mov	r0, r2
 8016afe:	f7fd ff1f 	bl	8014940 <isSamePortIdentity>
 8016b02:	4603      	mov	r3, r0
 8016b04:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
					if (((ptpClock->sentDelayReqSequenceId - 1) == ptpClock->msgTmpHeader.sequenceId) && isCurrentRequest && isFromCurrentParent)
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	f9b3 3382 	ldrsh.w	r3, [r3, #898]	; 0x382
 8016b0e:	3b01      	subs	r3, #1
 8016b10:	687a      	ldr	r2, [r7, #4]
 8016b12:	f9b2 20a2 	ldrsh.w	r2, [r2, #162]	; 0xa2
 8016b16:	4293      	cmp	r3, r2
 8016b18:	d12a      	bne.n	8016b70 <handleDelayResp+0x184>
 8016b1a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8016b1e:	2b00      	cmp	r3, #0
 8016b20:	d026      	beq.n	8016b70 <handleDelayResp+0x184>
 8016b22:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8016b26:	2b00      	cmp	r3, #0
 8016b28:	d022      	beq.n	8016b70 <handleDelayResp+0x184>
						toInternalTime(&ptpClock->timestamp_delayReqRecieve, &ptpClock->msgTmp.resp.receiveTimestamp);
 8016b2a:	687b      	ldr	r3, [r7, #4]
 8016b2c:	f503 725a 	add.w	r2, r3, #872	; 0x368
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	33a8      	adds	r3, #168	; 0xa8
 8016b34:	4619      	mov	r1, r3
 8016b36:	4610      	mov	r0, r2
 8016b38:	f7fd fcf2 	bl	8014520 <toInternalTime>
						scaledNanosecondsToInternalTime(&ptpClock->msgTmpHeader.correctionfield, &correctionField);
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	3390      	adds	r3, #144	; 0x90
 8016b40:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8016b44:	4611      	mov	r1, r2
 8016b46:	4618      	mov	r0, r3
 8016b48:	f7fd fc6a 	bl	8014420 <scaledNanosecondsToInternalTime>
						updateDelay(ptpClock, &ptpClock->timestamp_delayReqSend, &ptpClock->timestamp_delayReqRecieve, &correctionField);
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	f503 7158 	add.w	r1, r3, #864	; 0x360
 8016b52:	687b      	ldr	r3, [r7, #4]
 8016b54:	f503 725a 	add.w	r2, r3, #872	; 0x368
 8016b58:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8016b5c:	6878      	ldr	r0, [r7, #4]
 8016b5e:	f002 fb77 	bl	8019250 <updateDelay>
						ptpClock->portDS.logMinDelayReqInterval = ptpClock->msgTmpHeader.logMessageInterval;
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	f993 20a5 	ldrsb.w	r2, [r3, #165]	; 0xa5
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
 8016b6e:	e00e      	b.n	8016b8e <handleDelayResp+0x1a2>
						DBGV("handleDelayResp: doesn't match with the delayReq\n");
 8016b70:	f107 0314 	add.w	r3, r7, #20
 8016b74:	4618      	mov	r0, r3
 8016b76:	f002 fdd1 	bl	801971c <getTime>
 8016b7a:	697b      	ldr	r3, [r7, #20]
 8016b7c:	69ba      	ldr	r2, [r7, #24]
 8016b7e:	4619      	mov	r1, r3
 8016b80:	480d      	ldr	r0, [pc, #52]	; (8016bb8 <handleDelayResp+0x1cc>)
 8016b82:	f003 fdcb 	bl	801a71c <iprintf>
 8016b86:	4811      	ldr	r0, [pc, #68]	; (8016bcc <handleDelayResp+0x1e0>)
 8016b88:	f003 fe3c 	bl	801a804 <puts>
						break;
 8016b8c:	bf00      	nop
			break;
 8016b8e:	e00e      	b.n	8016bae <handleDelayResp+0x1c2>
			ERROR("handleDelayResp: disreguard in P2P mode\n");
 8016b90:	f107 030c 	add.w	r3, r7, #12
 8016b94:	4618      	mov	r0, r3
 8016b96:	f002 fdc1 	bl	801971c <getTime>
 8016b9a:	68fb      	ldr	r3, [r7, #12]
 8016b9c:	693a      	ldr	r2, [r7, #16]
 8016b9e:	4619      	mov	r1, r3
 8016ba0:	4807      	ldr	r0, [pc, #28]	; (8016bc0 <handleDelayResp+0x1d4>)
 8016ba2:	f003 fdbb 	bl	801a71c <iprintf>
 8016ba6:	480a      	ldr	r0, [pc, #40]	; (8016bd0 <handleDelayResp+0x1e4>)
 8016ba8:	f003 fe2c 	bl	801a804 <puts>
			break;
 8016bac:	e000      	b.n	8016bb0 <handleDelayResp+0x1c4>
			break;
 8016bae:	bf00      	nop
	}
}
 8016bb0:	3740      	adds	r7, #64	; 0x40
 8016bb2:	46bd      	mov	sp, r7
 8016bb4:	bd80      	pop	{r7, pc}
 8016bb6:	bf00      	nop
 8016bb8:	080207e8 	.word	0x080207e8
 8016bbc:	08020ecc 	.word	0x08020ecc
 8016bc0:	080207b0 	.word	0x080207b0
 8016bc4:	08020f00 	.word	0x08020f00
 8016bc8:	08020f20 	.word	0x08020f20
 8016bcc:	08020f3c 	.word	0x08020f3c
 8016bd0:	08020f70 	.word	0x08020f70

08016bd4 <handlePDelayReq>:


static void handlePDelayReq(PtpClock *ptpClock, TimeInternal *time, bool  isFromSelf)
{
 8016bd4:	b580      	push	{r7, lr}
 8016bd6:	b090      	sub	sp, #64	; 0x40
 8016bd8:	af00      	add	r7, sp, #0
 8016bda:	60f8      	str	r0, [r7, #12]
 8016bdc:	60b9      	str	r1, [r7, #8]
 8016bde:	4613      	mov	r3, r2
 8016be0:	71fb      	strb	r3, [r7, #7]
	switch (ptpClock->portDS.delayMechanism)
 8016be2:	68fb      	ldr	r3, [r7, #12]
 8016be4:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8016be8:	2b01      	cmp	r3, #1
 8016bea:	d002      	beq.n	8016bf2 <handlePDelayReq+0x1e>
 8016bec:	2b02      	cmp	r3, #2
 8016bee:	d00f      	beq.n	8016c10 <handlePDelayReq+0x3c>
			}
			break;

		default:

			break;
 8016bf0:	e0a2      	b.n	8016d38 <handlePDelayReq+0x164>
			ERROR("handlePDelayReq: disreguard in E2E mode\n");
 8016bf2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016bf6:	4618      	mov	r0, r3
 8016bf8:	f002 fd90 	bl	801971c <getTime>
 8016bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016bfe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8016c00:	4619      	mov	r1, r3
 8016c02:	484f      	ldr	r0, [pc, #316]	; (8016d40 <handlePDelayReq+0x16c>)
 8016c04:	f003 fd8a 	bl	801a71c <iprintf>
 8016c08:	484e      	ldr	r0, [pc, #312]	; (8016d44 <handlePDelayReq+0x170>)
 8016c0a:	f003 fdfb 	bl	801a804 <puts>
			break;
 8016c0e:	e093      	b.n	8016d38 <handlePDelayReq+0x164>
			DBGV("handlePDelayReq: received in mode P2P in state %s\n", stateString(ptpClock->portDS.portState));
 8016c10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016c14:	4618      	mov	r0, r3
 8016c16:	f002 fd81 	bl	801971c <getTime>
 8016c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016c1e:	4619      	mov	r1, r3
 8016c20:	4849      	ldr	r0, [pc, #292]	; (8016d48 <handlePDelayReq+0x174>)
 8016c22:	f003 fd7b 	bl	801a71c <iprintf>
 8016c26:	68fb      	ldr	r3, [r7, #12]
 8016c28:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8016c2c:	4618      	mov	r0, r3
 8016c2e:	f7fe fb41 	bl	80152b4 <stateString>
 8016c32:	4603      	mov	r3, r0
 8016c34:	4619      	mov	r1, r3
 8016c36:	4845      	ldr	r0, [pc, #276]	; (8016d4c <handlePDelayReq+0x178>)
 8016c38:	f003 fd70 	bl	801a71c <iprintf>
			if (ptpClock->msgIbufLength < PDELAY_REQ_LENGTH)
 8016c3c:	68fb      	ldr	r3, [r7, #12]
 8016c3e:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 8016c42:	2b35      	cmp	r3, #53	; 0x35
 8016c44:	dc12      	bgt.n	8016c6c <handlePDelayReq+0x98>
					ERROR("handlePDelayReq: short message\n");
 8016c46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8016c4a:	4618      	mov	r0, r3
 8016c4c:	f002 fd66 	bl	801971c <getTime>
 8016c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016c52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016c54:	4619      	mov	r1, r3
 8016c56:	483a      	ldr	r0, [pc, #232]	; (8016d40 <handlePDelayReq+0x16c>)
 8016c58:	f003 fd60 	bl	801a71c <iprintf>
 8016c5c:	483c      	ldr	r0, [pc, #240]	; (8016d50 <handlePDelayReq+0x17c>)
 8016c5e:	f003 fdd1 	bl	801a804 <puts>
					toState(ptpClock, PTP_FAULTY);
 8016c62:	2101      	movs	r1, #1
 8016c64:	68f8      	ldr	r0, [r7, #12]
 8016c66:	f7fe fb6f 	bl	8015348 <toState>
					return;
 8016c6a:	e065      	b.n	8016d38 <handlePDelayReq+0x164>
			switch (ptpClock->portDS.portState)
 8016c6c:	68fb      	ldr	r3, [r7, #12]
 8016c6e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8016c72:	2b08      	cmp	r3, #8
 8016c74:	d84f      	bhi.n	8016d16 <handlePDelayReq+0x142>
 8016c76:	a201      	add	r2, pc, #4	; (adr r2, 8016c7c <handlePDelayReq+0xa8>)
 8016c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c7c:	08016ca1 	.word	0x08016ca1
 8016c80:	08016ca1 	.word	0x08016ca1
 8016c84:	08016ca1 	.word	0x08016ca1
 8016c88:	08016ca1 	.word	0x08016ca1
 8016c8c:	08016d17 	.word	0x08016d17
 8016c90:	08016cbf 	.word	0x08016cbf
 8016c94:	08016cbf 	.word	0x08016cbf
 8016c98:	08016ca1 	.word	0x08016ca1
 8016c9c:	08016cbf 	.word	0x08016cbf
					DBGV("handlePDelayReq: disreguard\n");
 8016ca0:	f107 0320 	add.w	r3, r7, #32
 8016ca4:	4618      	mov	r0, r3
 8016ca6:	f002 fd39 	bl	801971c <getTime>
 8016caa:	6a3b      	ldr	r3, [r7, #32]
 8016cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016cae:	4619      	mov	r1, r3
 8016cb0:	4825      	ldr	r0, [pc, #148]	; (8016d48 <handlePDelayReq+0x174>)
 8016cb2:	f003 fd33 	bl	801a71c <iprintf>
 8016cb6:	4827      	ldr	r0, [pc, #156]	; (8016d54 <handlePDelayReq+0x180>)
 8016cb8:	f003 fda4 	bl	801a804 <puts>
					return;
 8016cbc:	e03c      	b.n	8016d38 <handlePDelayReq+0x164>
					if (isFromSelf)
 8016cbe:	79fb      	ldrb	r3, [r7, #7]
 8016cc0:	2b00      	cmp	r3, #0
 8016cc2:	d00e      	beq.n	8016ce2 <handlePDelayReq+0x10e>
							DBGV("handlePDelayReq: ignore from self\n");
 8016cc4:	f107 0318 	add.w	r3, r7, #24
 8016cc8:	4618      	mov	r0, r3
 8016cca:	f002 fd27 	bl	801971c <getTime>
 8016cce:	69bb      	ldr	r3, [r7, #24]
 8016cd0:	69fa      	ldr	r2, [r7, #28]
 8016cd2:	4619      	mov	r1, r3
 8016cd4:	481c      	ldr	r0, [pc, #112]	; (8016d48 <handlePDelayReq+0x174>)
 8016cd6:	f003 fd21 	bl	801a71c <iprintf>
 8016cda:	481f      	ldr	r0, [pc, #124]	; (8016d58 <handlePDelayReq+0x184>)
 8016cdc:	f003 fd92 	bl	801a804 <puts>
							break;
 8016ce0:	e029      	b.n	8016d36 <handlePDelayReq+0x162>
					issuePDelayResp(ptpClock, time, &ptpClock->msgTmpHeader);
 8016ce2:	68fb      	ldr	r3, [r7, #12]
 8016ce4:	3380      	adds	r3, #128	; 0x80
 8016ce6:	461a      	mov	r2, r3
 8016ce8:	68b9      	ldr	r1, [r7, #8]
 8016cea:	68f8      	ldr	r0, [r7, #12]
 8016cec:	f000 fd00 	bl	80176f0 <issuePDelayResp>
					if ((time->seconds != 0) && getFlag(ptpClock->msgTmpHeader.flagField[0], FLAG0_TWO_STEP)) /* not loopback mode */
 8016cf0:	68bb      	ldr	r3, [r7, #8]
 8016cf2:	681b      	ldr	r3, [r3, #0]
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	d01d      	beq.n	8016d34 <handlePDelayReq+0x160>
 8016cf8:	68fb      	ldr	r3, [r7, #12]
 8016cfa:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8016cfe:	f003 0302 	and.w	r3, r3, #2
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	d016      	beq.n	8016d34 <handlePDelayReq+0x160>
							issuePDelayRespFollowUp(ptpClock, time, &ptpClock->msgTmpHeader);
 8016d06:	68fb      	ldr	r3, [r7, #12]
 8016d08:	3380      	adds	r3, #128	; 0x80
 8016d0a:	461a      	mov	r2, r3
 8016d0c:	68b9      	ldr	r1, [r7, #8]
 8016d0e:	68f8      	ldr	r0, [r7, #12]
 8016d10:	f000 fd96 	bl	8017840 <issuePDelayRespFollowUp>
					break;
 8016d14:	e00e      	b.n	8016d34 <handlePDelayReq+0x160>
					DBG("handlePDelayReq: unrecognized state\n");
 8016d16:	f107 0310 	add.w	r3, r7, #16
 8016d1a:	4618      	mov	r0, r3
 8016d1c:	f002 fcfe 	bl	801971c <getTime>
 8016d20:	693b      	ldr	r3, [r7, #16]
 8016d22:	697a      	ldr	r2, [r7, #20]
 8016d24:	4619      	mov	r1, r3
 8016d26:	480d      	ldr	r0, [pc, #52]	; (8016d5c <handlePDelayReq+0x188>)
 8016d28:	f003 fcf8 	bl	801a71c <iprintf>
 8016d2c:	480c      	ldr	r0, [pc, #48]	; (8016d60 <handlePDelayReq+0x18c>)
 8016d2e:	f003 fd69 	bl	801a804 <puts>
					break;
 8016d32:	e000      	b.n	8016d36 <handlePDelayReq+0x162>
					break;
 8016d34:	bf00      	nop
			break;
 8016d36:	bf00      	nop
	}
}
 8016d38:	3740      	adds	r7, #64	; 0x40
 8016d3a:	46bd      	mov	sp, r7
 8016d3c:	bd80      	pop	{r7, pc}
 8016d3e:	bf00      	nop
 8016d40:	080207b0 	.word	0x080207b0
 8016d44:	08020f98 	.word	0x08020f98
 8016d48:	080207e8 	.word	0x080207e8
 8016d4c:	08020fc0 	.word	0x08020fc0
 8016d50:	08020ff4 	.word	0x08020ff4
 8016d54:	08021014 	.word	0x08021014
 8016d58:	08021030 	.word	0x08021030
 8016d5c:	08020704 	.word	0x08020704
 8016d60:	08021054 	.word	0x08021054

08016d64 <handlePDelayResp>:

static void handlePDelayResp(PtpClock *ptpClock, TimeInternal *time, bool isFromSelf)
{
 8016d64:	b580      	push	{r7, lr}
 8016d66:	b098      	sub	sp, #96	; 0x60
 8016d68:	af00      	add	r7, sp, #0
 8016d6a:	60f8      	str	r0, [r7, #12]
 8016d6c:	60b9      	str	r1, [r7, #8]
 8016d6e:	4613      	mov	r3, r2
 8016d70:	71fb      	strb	r3, [r7, #7]
	TimeInternal requestReceiptTimestamp;
	TimeInternal correctionField;
	bool  isCurrentRequest;

	switch (ptpClock->portDS.delayMechanism)
 8016d72:	68fb      	ldr	r3, [r7, #12]
 8016d74:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8016d78:	2b01      	cmp	r3, #1
 8016d7a:	d002      	beq.n	8016d82 <handlePDelayResp+0x1e>
 8016d7c:	2b02      	cmp	r3, #2
 8016d7e:	d00f      	beq.n	8016da0 <handlePDelayResp+0x3c>
			}
			break;

		default:

			break;
 8016d80:	e10e      	b.n	8016fa0 <handlePDelayResp+0x23c>
			ERROR("handlePDelayResp: disreguard in E2E mode\n");
 8016d82:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8016d86:	4618      	mov	r0, r3
 8016d88:	f002 fcc8 	bl	801971c <getTime>
 8016d8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016d8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016d90:	4619      	mov	r1, r3
 8016d92:	4885      	ldr	r0, [pc, #532]	; (8016fa8 <handlePDelayResp+0x244>)
 8016d94:	f003 fcc2 	bl	801a71c <iprintf>
 8016d98:	4884      	ldr	r0, [pc, #528]	; (8016fac <handlePDelayResp+0x248>)
 8016d9a:	f003 fd33 	bl	801a804 <puts>
			break;
 8016d9e:	e0ff      	b.n	8016fa0 <handlePDelayResp+0x23c>
			DBGV("handlePDelayResp: received in mode P2P in state %s\n", stateString(ptpClock->portDS.portState));
 8016da0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8016da4:	4618      	mov	r0, r3
 8016da6:	f002 fcb9 	bl	801971c <getTime>
 8016daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016dac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016dae:	4619      	mov	r1, r3
 8016db0:	487f      	ldr	r0, [pc, #508]	; (8016fb0 <handlePDelayResp+0x24c>)
 8016db2:	f003 fcb3 	bl	801a71c <iprintf>
 8016db6:	68fb      	ldr	r3, [r7, #12]
 8016db8:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8016dbc:	4618      	mov	r0, r3
 8016dbe:	f7fe fa79 	bl	80152b4 <stateString>
 8016dc2:	4603      	mov	r3, r0
 8016dc4:	4619      	mov	r1, r3
 8016dc6:	487b      	ldr	r0, [pc, #492]	; (8016fb4 <handlePDelayResp+0x250>)
 8016dc8:	f003 fca8 	bl	801a71c <iprintf>
			if (ptpClock->msgIbufLength < PDELAY_RESP_LENGTH)
 8016dcc:	68fb      	ldr	r3, [r7, #12]
 8016dce:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 8016dd2:	2b35      	cmp	r3, #53	; 0x35
 8016dd4:	dc12      	bgt.n	8016dfc <handlePDelayResp+0x98>
					ERROR("handlePDelayResp: short message\n");
 8016dd6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8016dda:	4618      	mov	r0, r3
 8016ddc:	f002 fc9e 	bl	801971c <getTime>
 8016de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016de2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016de4:	4619      	mov	r1, r3
 8016de6:	4870      	ldr	r0, [pc, #448]	; (8016fa8 <handlePDelayResp+0x244>)
 8016de8:	f003 fc98 	bl	801a71c <iprintf>
 8016dec:	4872      	ldr	r0, [pc, #456]	; (8016fb8 <handlePDelayResp+0x254>)
 8016dee:	f003 fd09 	bl	801a804 <puts>
					toState(ptpClock, PTP_FAULTY);
 8016df2:	2101      	movs	r1, #1
 8016df4:	68f8      	ldr	r0, [r7, #12]
 8016df6:	f7fe faa7 	bl	8015348 <toState>
					return;
 8016dfa:	e0d1      	b.n	8016fa0 <handlePDelayResp+0x23c>
			switch (ptpClock->portDS.portState)
 8016dfc:	68fb      	ldr	r3, [r7, #12]
 8016dfe:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8016e02:	2b08      	cmp	r3, #8
 8016e04:	f200 80bc 	bhi.w	8016f80 <handlePDelayResp+0x21c>
 8016e08:	a201      	add	r2, pc, #4	; (adr r2, 8016e10 <handlePDelayResp+0xac>)
 8016e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e0e:	bf00      	nop
 8016e10:	08016e35 	.word	0x08016e35
 8016e14:	08016e35 	.word	0x08016e35
 8016e18:	08016e35 	.word	0x08016e35
 8016e1c:	08016e35 	.word	0x08016e35
 8016e20:	08016f81 	.word	0x08016f81
 8016e24:	08016e53 	.word	0x08016e53
 8016e28:	08016f81 	.word	0x08016f81
 8016e2c:	08016e35 	.word	0x08016e35
 8016e30:	08016e53 	.word	0x08016e53
				DBGV("handlePDelayResp: disreguard\n");
 8016e34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8016e38:	4618      	mov	r0, r3
 8016e3a:	f002 fc6f 	bl	801971c <getTime>
 8016e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016e42:	4619      	mov	r1, r3
 8016e44:	485a      	ldr	r0, [pc, #360]	; (8016fb0 <handlePDelayResp+0x24c>)
 8016e46:	f003 fc69 	bl	801a71c <iprintf>
 8016e4a:	485c      	ldr	r0, [pc, #368]	; (8016fbc <handlePDelayResp+0x258>)
 8016e4c:	f003 fcda 	bl	801a804 <puts>
				return;
 8016e50:	e0a6      	b.n	8016fa0 <handlePDelayResp+0x23c>
					if (isFromSelf)
 8016e52:	79fb      	ldrb	r3, [r7, #7]
 8016e54:	2b00      	cmp	r3, #0
 8016e56:	d00e      	beq.n	8016e76 <handlePDelayResp+0x112>
							DBGV("handlePDelayResp: ignore from self\n");
 8016e58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016e5c:	4618      	mov	r0, r3
 8016e5e:	f002 fc5d 	bl	801971c <getTime>
 8016e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016e66:	4619      	mov	r1, r3
 8016e68:	4851      	ldr	r0, [pc, #324]	; (8016fb0 <handlePDelayResp+0x24c>)
 8016e6a:	f003 fc57 	bl	801a71c <iprintf>
 8016e6e:	4854      	ldr	r0, [pc, #336]	; (8016fc0 <handlePDelayResp+0x25c>)
 8016e70:	f003 fcc8 	bl	801a804 <puts>
							break;
 8016e74:	e093      	b.n	8016f9e <handlePDelayResp+0x23a>
					msgUnpackPDelayResp(ptpClock->msgIbuf, &ptpClock->msgTmp.presp);
 8016e76:	68fb      	ldr	r3, [r7, #12]
 8016e78:	f503 72fc 	add.w	r2, r3, #504	; 0x1f8
 8016e7c:	68fb      	ldr	r3, [r7, #12]
 8016e7e:	33a8      	adds	r3, #168	; 0xa8
 8016e80:	4619      	mov	r1, r3
 8016e82:	4610      	mov	r0, r2
 8016e84:	f001 faad 	bl	80183e2 <msgUnpackPDelayResp>
					&ptpClock->portDS.portIdentity,
 8016e88:	68fb      	ldr	r3, [r7, #12]
 8016e8a:	f103 0258 	add.w	r2, r3, #88	; 0x58
					&ptpClock->msgTmp.presp.requestingPortIdentity);
 8016e8e:	68fb      	ldr	r3, [r7, #12]
 8016e90:	33b4      	adds	r3, #180	; 0xb4
					isCurrentRequest = isSamePortIdentity(
 8016e92:	4619      	mov	r1, r3
 8016e94:	4610      	mov	r0, r2
 8016e96:	f7fd fd53 	bl	8014940 <isSamePortIdentity>
 8016e9a:	4603      	mov	r3, r0
 8016e9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (((ptpClock->sentPDelayReqSequenceId - 1) == ptpClock->msgTmpHeader.sequenceId) && isCurrentRequest)
 8016ea0:	68fb      	ldr	r3, [r7, #12]
 8016ea2:	f9b3 3380 	ldrsh.w	r3, [r3, #896]	; 0x380
 8016ea6:	3b01      	subs	r3, #1
 8016ea8:	68fa      	ldr	r2, [r7, #12]
 8016eaa:	f9b2 20a2 	ldrsh.w	r2, [r2, #162]	; 0xa2
 8016eae:	4293      	cmp	r3, r2
 8016eb0:	d156      	bne.n	8016f60 <handlePDelayResp+0x1fc>
 8016eb2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016eb6:	2b00      	cmp	r3, #0
 8016eb8:	d052      	beq.n	8016f60 <handlePDelayResp+0x1fc>
						if (getFlag(ptpClock->msgTmpHeader.flagField[0], FLAG0_TWO_STEP))
 8016eba:	68fb      	ldr	r3, [r7, #12]
 8016ebc:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8016ec0:	f003 0302 	and.w	r3, r3, #2
 8016ec4:	2b00      	cmp	r3, #0
 8016ec6:	d02f      	beq.n	8016f28 <handlePDelayResp+0x1c4>
							ptpClock->waitingForPDelayRespFollowUp = TRUE;
 8016ec8:	68fb      	ldr	r3, [r7, #12]
 8016eca:	2201      	movs	r2, #1
 8016ecc:	f883 238d 	strb.w	r2, [r3, #909]	; 0x38d
							ptpClock->pdelay_t4 = *time;
 8016ed0:	68fb      	ldr	r3, [r7, #12]
 8016ed2:	68ba      	ldr	r2, [r7, #8]
 8016ed4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8016ed8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016edc:	e883 0003 	stmia.w	r3, {r0, r1}
							toInternalTime(&requestReceiptTimestamp, &ptpClock->msgTmp.presp.requestReceiptTimestamp);
 8016ee0:	68fb      	ldr	r3, [r7, #12]
 8016ee2:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 8016ee6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8016eea:	4611      	mov	r1, r2
 8016eec:	4618      	mov	r0, r3
 8016eee:	f7fd fb17 	bl	8014520 <toInternalTime>
							ptpClock->pdelay_t2 = requestReceiptTimestamp;
 8016ef2:	68fb      	ldr	r3, [r7, #12]
 8016ef4:	f503 7350 	add.w	r3, r3, #832	; 0x340
 8016ef8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8016efc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016f00:	e883 0003 	stmia.w	r3, {r0, r1}
							scaledNanosecondsToInternalTime(&ptpClock->msgTmpHeader.correctionfield, &correctionField);
 8016f04:	68fb      	ldr	r3, [r7, #12]
 8016f06:	3390      	adds	r3, #144	; 0x90
 8016f08:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8016f0c:	4611      	mov	r1, r2
 8016f0e:	4618      	mov	r0, r3
 8016f10:	f7fd fa86 	bl	8014420 <scaledNanosecondsToInternalTime>
							ptpClock->correctionField_pDelayResp = correctionField;
 8016f14:	68fb      	ldr	r3, [r7, #12]
 8016f16:	f503 735e 	add.w	r3, r3, #888	; 0x378
 8016f1a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8016f1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016f22:	e883 0003 	stmia.w	r3, {r0, r1}
						if (getFlag(ptpClock->msgTmpHeader.flagField[0], FLAG0_TWO_STEP))
 8016f26:	e02a      	b.n	8016f7e <handlePDelayResp+0x21a>
							ptpClock->waitingForPDelayRespFollowUp = FALSE;
 8016f28:	68fb      	ldr	r3, [r7, #12]
 8016f2a:	2200      	movs	r2, #0
 8016f2c:	f883 238d 	strb.w	r2, [r3, #909]	; 0x38d
							ptpClock->pdelay_t4 = *time;
 8016f30:	68fb      	ldr	r3, [r7, #12]
 8016f32:	68ba      	ldr	r2, [r7, #8]
 8016f34:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8016f38:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016f3c:	e883 0003 	stmia.w	r3, {r0, r1}
							scaledNanosecondsToInternalTime(&ptpClock->msgTmpHeader.correctionfield, &correctionField);
 8016f40:	68fb      	ldr	r3, [r7, #12]
 8016f42:	3390      	adds	r3, #144	; 0x90
 8016f44:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8016f48:	4611      	mov	r1, r2
 8016f4a:	4618      	mov	r0, r3
 8016f4c:	f7fd fa68 	bl	8014420 <scaledNanosecondsToInternalTime>
							updatePeerDelay(ptpClock, &correctionField, FALSE);
 8016f50:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8016f54:	2200      	movs	r2, #0
 8016f56:	4619      	mov	r1, r3
 8016f58:	68f8      	ldr	r0, [r7, #12]
 8016f5a:	f002 f9dd 	bl	8019318 <updatePeerDelay>
						if (getFlag(ptpClock->msgTmpHeader.flagField[0], FLAG0_TWO_STEP))
 8016f5e:	e00e      	b.n	8016f7e <handlePDelayResp+0x21a>
							DBGV("handlePDelayResp: PDelayResp doesn't match with the PDelayReq.\n");
 8016f60:	f107 031c 	add.w	r3, r7, #28
 8016f64:	4618      	mov	r0, r3
 8016f66:	f002 fbd9 	bl	801971c <getTime>
 8016f6a:	69fb      	ldr	r3, [r7, #28]
 8016f6c:	6a3a      	ldr	r2, [r7, #32]
 8016f6e:	4619      	mov	r1, r3
 8016f70:	480f      	ldr	r0, [pc, #60]	; (8016fb0 <handlePDelayResp+0x24c>)
 8016f72:	f003 fbd3 	bl	801a71c <iprintf>
 8016f76:	4813      	ldr	r0, [pc, #76]	; (8016fc4 <handlePDelayResp+0x260>)
 8016f78:	f003 fc44 	bl	801a804 <puts>
					break;
 8016f7c:	e00f      	b.n	8016f9e <handlePDelayResp+0x23a>
 8016f7e:	e00e      	b.n	8016f9e <handlePDelayResp+0x23a>
						DBG("handlePDelayResp: unrecognized state\n");
 8016f80:	f107 0314 	add.w	r3, r7, #20
 8016f84:	4618      	mov	r0, r3
 8016f86:	f002 fbc9 	bl	801971c <getTime>
 8016f8a:	697b      	ldr	r3, [r7, #20]
 8016f8c:	69ba      	ldr	r2, [r7, #24]
 8016f8e:	4619      	mov	r1, r3
 8016f90:	480d      	ldr	r0, [pc, #52]	; (8016fc8 <handlePDelayResp+0x264>)
 8016f92:	f003 fbc3 	bl	801a71c <iprintf>
 8016f96:	480d      	ldr	r0, [pc, #52]	; (8016fcc <handlePDelayResp+0x268>)
 8016f98:	f003 fc34 	bl	801a804 <puts>
						break;
 8016f9c:	bf00      	nop
			break;
 8016f9e:	bf00      	nop
	}
}
 8016fa0:	3760      	adds	r7, #96	; 0x60
 8016fa2:	46bd      	mov	sp, r7
 8016fa4:	bd80      	pop	{r7, pc}
 8016fa6:	bf00      	nop
 8016fa8:	080207b0 	.word	0x080207b0
 8016fac:	08021078 	.word	0x08021078
 8016fb0:	080207e8 	.word	0x080207e8
 8016fb4:	080210a4 	.word	0x080210a4
 8016fb8:	080210d8 	.word	0x080210d8
 8016fbc:	080210f8 	.word	0x080210f8
 8016fc0:	08021118 	.word	0x08021118
 8016fc4:	0802113c 	.word	0x0802113c
 8016fc8:	08020704 	.word	0x08020704
 8016fcc:	0802117c 	.word	0x0802117c

08016fd0 <handlePDelayRespFollowUp>:

static void handlePDelayRespFollowUp(PtpClock *ptpClock, bool isFromSelf)
{
 8016fd0:	b580      	push	{r7, lr}
 8016fd2:	b092      	sub	sp, #72	; 0x48
 8016fd4:	af00      	add	r7, sp, #0
 8016fd6:	6078      	str	r0, [r7, #4]
 8016fd8:	460b      	mov	r3, r1
 8016fda:	70fb      	strb	r3, [r7, #3]
	TimeInternal responseOriginTimestamp;
	TimeInternal correctionField;

	switch (ptpClock->portDS.delayMechanism)
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8016fe2:	2b01      	cmp	r3, #1
 8016fe4:	d002      	beq.n	8016fec <handlePDelayRespFollowUp+0x1c>
 8016fe6:	2b02      	cmp	r3, #2
 8016fe8:	d00f      	beq.n	801700a <handlePDelayRespFollowUp+0x3a>
			}
			break;

		default:

			break;
 8016fea:	e0d0      	b.n	801718e <handlePDelayRespFollowUp+0x1be>
			ERROR("handlePDelayRespFollowUp: disreguard in E2E mode\n");
 8016fec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016ff0:	4618      	mov	r0, r3
 8016ff2:	f002 fb93 	bl	801971c <getTime>
 8016ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ff8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016ffa:	4619      	mov	r1, r3
 8016ffc:	4865      	ldr	r0, [pc, #404]	; (8017194 <handlePDelayRespFollowUp+0x1c4>)
 8016ffe:	f003 fb8d 	bl	801a71c <iprintf>
 8017002:	4865      	ldr	r0, [pc, #404]	; (8017198 <handlePDelayRespFollowUp+0x1c8>)
 8017004:	f003 fbfe 	bl	801a804 <puts>
			break;
 8017008:	e0c1      	b.n	801718e <handlePDelayRespFollowUp+0x1be>
			DBGV("handlePDelayRespFollowUp: received in mode P2P in state %s\n", stateString(ptpClock->portDS.portState));
 801700a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801700e:	4618      	mov	r0, r3
 8017010:	f002 fb84 	bl	801971c <getTime>
 8017014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017016:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017018:	4619      	mov	r1, r3
 801701a:	4860      	ldr	r0, [pc, #384]	; (801719c <handlePDelayRespFollowUp+0x1cc>)
 801701c:	f003 fb7e 	bl	801a71c <iprintf>
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8017026:	4618      	mov	r0, r3
 8017028:	f7fe f944 	bl	80152b4 <stateString>
 801702c:	4603      	mov	r3, r0
 801702e:	4619      	mov	r1, r3
 8017030:	485b      	ldr	r0, [pc, #364]	; (80171a0 <handlePDelayRespFollowUp+0x1d0>)
 8017032:	f003 fb73 	bl	801a71c <iprintf>
			if (ptpClock->msgIbufLength < PDELAY_RESP_FOLLOW_UP_LENGTH)
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 801703c:	2b35      	cmp	r3, #53	; 0x35
 801703e:	dc12      	bgt.n	8017066 <handlePDelayRespFollowUp+0x96>
				ERROR("handlePDelayRespFollowUp: short message\n");
 8017040:	f107 0320 	add.w	r3, r7, #32
 8017044:	4618      	mov	r0, r3
 8017046:	f002 fb69 	bl	801971c <getTime>
 801704a:	6a3b      	ldr	r3, [r7, #32]
 801704c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801704e:	4619      	mov	r1, r3
 8017050:	4850      	ldr	r0, [pc, #320]	; (8017194 <handlePDelayRespFollowUp+0x1c4>)
 8017052:	f003 fb63 	bl	801a71c <iprintf>
 8017056:	4853      	ldr	r0, [pc, #332]	; (80171a4 <handlePDelayRespFollowUp+0x1d4>)
 8017058:	f003 fbd4 	bl	801a804 <puts>
				toState(ptpClock, PTP_FAULTY);
 801705c:	2101      	movs	r1, #1
 801705e:	6878      	ldr	r0, [r7, #4]
 8017060:	f7fe f972 	bl	8015348 <toState>
				return;
 8017064:	e093      	b.n	801718e <handlePDelayRespFollowUp+0x1be>
			switch (ptpClock->portDS.portState)
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 801706c:	2b08      	cmp	r3, #8
 801706e:	d87e      	bhi.n	801716e <handlePDelayRespFollowUp+0x19e>
 8017070:	a201      	add	r2, pc, #4	; (adr r2, 8017078 <handlePDelayRespFollowUp+0xa8>)
 8017072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017076:	bf00      	nop
 8017078:	0801709d 	.word	0x0801709d
 801707c:	0801709d 	.word	0x0801709d
 8017080:	0801709d 	.word	0x0801709d
 8017084:	0801716f 	.word	0x0801716f
 8017088:	0801716f 	.word	0x0801716f
 801708c:	080170bb 	.word	0x080170bb
 8017090:	0801716f 	.word	0x0801716f
 8017094:	0801709d 	.word	0x0801709d
 8017098:	080170bb 	.word	0x080170bb
					DBGV("handlePDelayRespFollowUp: disreguard\n");
 801709c:	f107 0318 	add.w	r3, r7, #24
 80170a0:	4618      	mov	r0, r3
 80170a2:	f002 fb3b 	bl	801971c <getTime>
 80170a6:	69bb      	ldr	r3, [r7, #24]
 80170a8:	69fa      	ldr	r2, [r7, #28]
 80170aa:	4619      	mov	r1, r3
 80170ac:	483b      	ldr	r0, [pc, #236]	; (801719c <handlePDelayRespFollowUp+0x1cc>)
 80170ae:	f003 fb35 	bl	801a71c <iprintf>
 80170b2:	483d      	ldr	r0, [pc, #244]	; (80171a8 <handlePDelayRespFollowUp+0x1d8>)
 80170b4:	f003 fba6 	bl	801a804 <puts>
					return;
 80170b8:	e069      	b.n	801718e <handlePDelayRespFollowUp+0x1be>
					if (!ptpClock->waitingForPDelayRespFollowUp)
 80170ba:	687b      	ldr	r3, [r7, #4]
 80170bc:	f893 338d 	ldrb.w	r3, [r3, #909]	; 0x38d
 80170c0:	f083 0301 	eor.w	r3, r3, #1
 80170c4:	b2db      	uxtb	r3, r3
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	d00e      	beq.n	80170e8 <handlePDelayRespFollowUp+0x118>
						DBG("handlePDelayRespFollowUp: not waiting a message\n");
 80170ca:	f107 0310 	add.w	r3, r7, #16
 80170ce:	4618      	mov	r0, r3
 80170d0:	f002 fb24 	bl	801971c <getTime>
 80170d4:	693b      	ldr	r3, [r7, #16]
 80170d6:	697a      	ldr	r2, [r7, #20]
 80170d8:	4619      	mov	r1, r3
 80170da:	4834      	ldr	r0, [pc, #208]	; (80171ac <handlePDelayRespFollowUp+0x1dc>)
 80170dc:	f003 fb1e 	bl	801a71c <iprintf>
 80170e0:	4833      	ldr	r0, [pc, #204]	; (80171b0 <handlePDelayRespFollowUp+0x1e0>)
 80170e2:	f003 fb8f 	bl	801a804 <puts>
						break;
 80170e6:	e051      	b.n	801718c <handlePDelayRespFollowUp+0x1bc>
					if (ptpClock->msgTmpHeader.sequenceId == ptpClock->sentPDelayReqSequenceId - 1)
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	f9b3 30a2 	ldrsh.w	r3, [r3, #162]	; 0xa2
 80170ee:	461a      	mov	r2, r3
 80170f0:	687b      	ldr	r3, [r7, #4]
 80170f2:	f9b3 3380 	ldrsh.w	r3, [r3, #896]	; 0x380
 80170f6:	3b01      	subs	r3, #1
 80170f8:	429a      	cmp	r2, r3
 80170fa:	d138      	bne.n	801716e <handlePDelayRespFollowUp+0x19e>
							msgUnpackPDelayRespFollowUp(ptpClock->msgIbuf, &ptpClock->msgTmp.prespfollow);
 80170fc:	687b      	ldr	r3, [r7, #4]
 80170fe:	f503 72fc 	add.w	r2, r3, #504	; 0x1f8
 8017102:	687b      	ldr	r3, [r7, #4]
 8017104:	33a8      	adds	r3, #168	; 0xa8
 8017106:	4619      	mov	r1, r3
 8017108:	4610      	mov	r0, r2
 801710a:	f001 fa2d 	bl	8018568 <msgUnpackPDelayRespFollowUp>
							toInternalTime(&responseOriginTimestamp, &ptpClock->msgTmp.prespfollow.responseOriginTimestamp);
 801710e:	687b      	ldr	r3, [r7, #4]
 8017110:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 8017114:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017118:	4611      	mov	r1, r2
 801711a:	4618      	mov	r0, r3
 801711c:	f7fd fa00 	bl	8014520 <toInternalTime>
							ptpClock->pdelay_t3 = responseOriginTimestamp;
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	f503 7352 	add.w	r3, r3, #840	; 0x348
 8017126:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801712a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801712e:	e883 0003 	stmia.w	r3, {r0, r1}
							scaledNanosecondsToInternalTime(&ptpClock->msgTmpHeader.correctionfield, &correctionField);
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	3390      	adds	r3, #144	; 0x90
 8017136:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801713a:	4611      	mov	r1, r2
 801713c:	4618      	mov	r0, r3
 801713e:	f7fd f96f 	bl	8014420 <scaledNanosecondsToInternalTime>
							addTime(&correctionField, &correctionField, &ptpClock->correctionField_pDelayResp);
 8017142:	687b      	ldr	r3, [r7, #4]
 8017144:	f503 725e 	add.w	r2, r3, #888	; 0x378
 8017148:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801714c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8017150:	4618      	mov	r0, r3
 8017152:	f7fd fa65 	bl	8014620 <addTime>
							updatePeerDelay(ptpClock, &correctionField, TRUE);
 8017156:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801715a:	2201      	movs	r2, #1
 801715c:	4619      	mov	r1, r3
 801715e:	6878      	ldr	r0, [r7, #4]
 8017160:	f002 f8da 	bl	8019318 <updatePeerDelay>
							ptpClock->waitingForPDelayRespFollowUp = FALSE;
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	2200      	movs	r2, #0
 8017168:	f883 238d 	strb.w	r2, [r3, #909]	; 0x38d
							break;
 801716c:	e00e      	b.n	801718c <handlePDelayRespFollowUp+0x1bc>
					DBGV("handlePDelayRespFollowUp: unrecognized state\n");
 801716e:	f107 0308 	add.w	r3, r7, #8
 8017172:	4618      	mov	r0, r3
 8017174:	f002 fad2 	bl	801971c <getTime>
 8017178:	68bb      	ldr	r3, [r7, #8]
 801717a:	68fa      	ldr	r2, [r7, #12]
 801717c:	4619      	mov	r1, r3
 801717e:	4807      	ldr	r0, [pc, #28]	; (801719c <handlePDelayRespFollowUp+0x1cc>)
 8017180:	f003 facc 	bl	801a71c <iprintf>
 8017184:	480b      	ldr	r0, [pc, #44]	; (80171b4 <handlePDelayRespFollowUp+0x1e4>)
 8017186:	f003 fb3d 	bl	801a804 <puts>
			break;
 801718a:	e7ff      	b.n	801718c <handlePDelayRespFollowUp+0x1bc>
 801718c:	bf00      	nop
	}
}
 801718e:	3748      	adds	r7, #72	; 0x48
 8017190:	46bd      	mov	sp, r7
 8017192:	bd80      	pop	{r7, pc}
 8017194:	080207b0 	.word	0x080207b0
 8017198:	080211a4 	.word	0x080211a4
 801719c:	080207e8 	.word	0x080207e8
 80171a0:	080211d8 	.word	0x080211d8
 80171a4:	08021214 	.word	0x08021214
 80171a8:	0802123c 	.word	0x0802123c
 80171ac:	08020704 	.word	0x08020704
 80171b0:	08021264 	.word	0x08021264
 80171b4:	08021294 	.word	0x08021294

080171b8 <handleManagement>:

static void handleManagement(PtpClock *ptpClock, bool isFromSelf)
{
 80171b8:	b480      	push	{r7}
 80171ba:	b083      	sub	sp, #12
 80171bc:	af00      	add	r7, sp, #0
 80171be:	6078      	str	r0, [r7, #4]
 80171c0:	460b      	mov	r3, r1
 80171c2:	70fb      	strb	r3, [r7, #3]
	/* ENABLE_PORT -> DESIGNATED_ENABLED -> toState(PTP_INITIALIZING) */
	/* DISABLE_PORT -> DESIGNATED_DISABLED -> toState(PTP_DISABLED) */
}
 80171c4:	bf00      	nop
 80171c6:	370c      	adds	r7, #12
 80171c8:	46bd      	mov	sp, r7
 80171ca:	bc80      	pop	{r7}
 80171cc:	4770      	bx	lr

080171ce <handleSignaling>:

static void handleSignaling(PtpClock *ptpClock, bool  isFromSelf)
{
 80171ce:	b480      	push	{r7}
 80171d0:	b083      	sub	sp, #12
 80171d2:	af00      	add	r7, sp, #0
 80171d4:	6078      	str	r0, [r7, #4]
 80171d6:	460b      	mov	r3, r1
 80171d8:	70fb      	strb	r3, [r7, #3]
}
 80171da:	bf00      	nop
 80171dc:	370c      	adds	r7, #12
 80171de:	46bd      	mov	sp, r7
 80171e0:	bc80      	pop	{r7}
 80171e2:	4770      	bx	lr

080171e4 <issueDelayReqTimerExpired>:

static void issueDelayReqTimerExpired(PtpClock *ptpClock)
{
 80171e4:	b580      	push	{r7, lr}
 80171e6:	b086      	sub	sp, #24
 80171e8:	af00      	add	r7, sp, #0
 80171ea:	6078      	str	r0, [r7, #4]
	switch (ptpClock->portDS.delayMechanism)
 80171ec:	687b      	ldr	r3, [r7, #4]
 80171ee:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 80171f2:	2b01      	cmp	r3, #1
 80171f4:	d002      	beq.n	80171fc <issueDelayReqTimerExpired+0x18>
 80171f6:	2b02      	cmp	r3, #2
 80171f8:	d03c      	beq.n	8017274 <issueDelayReqTimerExpired+0x90>
					issuePDelayReq(ptpClock);
			}
			break;

		default:
				break;
 80171fa:	e077      	b.n	80172ec <issueDelayReqTimerExpired+0x108>
			if (ptpClock->portDS.portState != PTP_SLAVE)
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8017202:	2b08      	cmp	r3, #8
 8017204:	d16d      	bne.n	80172e2 <issueDelayReqTimerExpired+0xfe>
			if (timerExpired(DELAYREQ_INTERVAL_TIMER))
 8017206:	2001      	movs	r0, #1
 8017208:	f002 fbde 	bl	80199c8 <timerExpired>
 801720c:	4603      	mov	r3, r0
 801720e:	2b00      	cmp	r3, #0
 8017210:	d069      	beq.n	80172e6 <issueDelayReqTimerExpired+0x102>
					timerStart(DELAYREQ_INTERVAL_TIMER, getRand(pow2ms(ptpClock->portDS.logMinDelayReqInterval + 1)));
 8017212:	687b      	ldr	r3, [r7, #4]
 8017214:	f993 3063 	ldrsb.w	r3, [r3, #99]	; 0x63
 8017218:	3301      	adds	r3, #1
 801721a:	2b00      	cmp	r3, #0
 801721c:	dd08      	ble.n	8017230 <issueDelayReqTimerExpired+0x4c>
 801721e:	687b      	ldr	r3, [r7, #4]
 8017220:	f993 3063 	ldrsb.w	r3, [r3, #99]	; 0x63
 8017224:	3301      	adds	r3, #1
 8017226:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801722a:	fa02 f303 	lsl.w	r3, r2, r3
 801722e:	e007      	b.n	8017240 <issueDelayReqTimerExpired+0x5c>
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	f993 3063 	ldrsb.w	r3, [r3, #99]	; 0x63
 8017236:	43db      	mvns	r3, r3
 8017238:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801723c:	fa42 f303 	asr.w	r3, r2, r3
 8017240:	4618      	mov	r0, r3
 8017242:	f002 faa5 	bl	8019790 <getRand>
 8017246:	4603      	mov	r3, r0
 8017248:	4619      	mov	r1, r3
 801724a:	2001      	movs	r0, #1
 801724c:	f002 fb8a 	bl	8019964 <timerStart>
					DBGV("event DELAYREQ_INTERVAL_TIMEOUT_EXPIRES\n");
 8017250:	f107 0310 	add.w	r3, r7, #16
 8017254:	4618      	mov	r0, r3
 8017256:	f002 fa61 	bl	801971c <getTime>
 801725a:	693b      	ldr	r3, [r7, #16]
 801725c:	697a      	ldr	r2, [r7, #20]
 801725e:	4619      	mov	r1, r3
 8017260:	4824      	ldr	r0, [pc, #144]	; (80172f4 <issueDelayReqTimerExpired+0x110>)
 8017262:	f003 fa5b 	bl	801a71c <iprintf>
 8017266:	4824      	ldr	r0, [pc, #144]	; (80172f8 <issueDelayReqTimerExpired+0x114>)
 8017268:	f003 facc 	bl	801a804 <puts>
					issueDelayReq(ptpClock);
 801726c:	6878      	ldr	r0, [r7, #4]
 801726e:	f000 f957 	bl	8017520 <issueDelayReq>
			break;
 8017272:	e038      	b.n	80172e6 <issueDelayReqTimerExpired+0x102>
			if (timerExpired(PDELAYREQ_INTERVAL_TIMER))
 8017274:	2000      	movs	r0, #0
 8017276:	f002 fba7 	bl	80199c8 <timerExpired>
 801727a:	4603      	mov	r3, r0
 801727c:	2b00      	cmp	r3, #0
 801727e:	d034      	beq.n	80172ea <issueDelayReqTimerExpired+0x106>
					timerStart(PDELAYREQ_INTERVAL_TIMER, getRand(pow2ms(ptpClock->portDS.logMinPdelayReqInterval + 1)));
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8017286:	3301      	adds	r3, #1
 8017288:	2b00      	cmp	r3, #0
 801728a:	dd08      	ble.n	801729e <issueDelayReqTimerExpired+0xba>
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 8017292:	3301      	adds	r3, #1
 8017294:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017298:	fa02 f303 	lsl.w	r3, r2, r3
 801729c:	e007      	b.n	80172ae <issueDelayReqTimerExpired+0xca>
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	f993 3070 	ldrsb.w	r3, [r3, #112]	; 0x70
 80172a4:	43db      	mvns	r3, r3
 80172a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80172aa:	fa42 f303 	asr.w	r3, r2, r3
 80172ae:	4618      	mov	r0, r3
 80172b0:	f002 fa6e 	bl	8019790 <getRand>
 80172b4:	4603      	mov	r3, r0
 80172b6:	4619      	mov	r1, r3
 80172b8:	2000      	movs	r0, #0
 80172ba:	f002 fb53 	bl	8019964 <timerStart>
					DBGV("event PDELAYREQ_INTERVAL_TIMEOUT_EXPIRES\n");
 80172be:	f107 0308 	add.w	r3, r7, #8
 80172c2:	4618      	mov	r0, r3
 80172c4:	f002 fa2a 	bl	801971c <getTime>
 80172c8:	68bb      	ldr	r3, [r7, #8]
 80172ca:	68fa      	ldr	r2, [r7, #12]
 80172cc:	4619      	mov	r1, r3
 80172ce:	4809      	ldr	r0, [pc, #36]	; (80172f4 <issueDelayReqTimerExpired+0x110>)
 80172d0:	f003 fa24 	bl	801a71c <iprintf>
 80172d4:	4809      	ldr	r0, [pc, #36]	; (80172fc <issueDelayReqTimerExpired+0x118>)
 80172d6:	f003 fa95 	bl	801a804 <puts>
					issuePDelayReq(ptpClock);
 80172da:	6878      	ldr	r0, [r7, #4]
 80172dc:	f000 f994 	bl	8017608 <issuePDelayReq>
			break;
 80172e0:	e003      	b.n	80172ea <issueDelayReqTimerExpired+0x106>
					break;
 80172e2:	bf00      	nop
 80172e4:	e002      	b.n	80172ec <issueDelayReqTimerExpired+0x108>
			break;
 80172e6:	bf00      	nop
 80172e8:	e000      	b.n	80172ec <issueDelayReqTimerExpired+0x108>
			break;
 80172ea:	bf00      	nop
	}
}
 80172ec:	bf00      	nop
 80172ee:	3718      	adds	r7, #24
 80172f0:	46bd      	mov	sp, r7
 80172f2:	bd80      	pop	{r7, pc}
 80172f4:	080207e8 	.word	0x080207e8
 80172f8:	080212c4 	.word	0x080212c4
 80172fc:	080212ec 	.word	0x080212ec

08017300 <issueAnnounce>:


/* Pack and send  on general multicast ip adress an Announce message */
static void issueAnnounce(PtpClock *ptpClock)
{
 8017300:	b580      	push	{r7, lr}
 8017302:	b086      	sub	sp, #24
 8017304:	af00      	add	r7, sp, #0
 8017306:	6078      	str	r0, [r7, #4]
	msgPackAnnounce(ptpClock, ptpClock->msgObuf);
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	33cc      	adds	r3, #204	; 0xcc
 801730c:	4619      	mov	r1, r3
 801730e:	6878      	ldr	r0, [r7, #4]
 8017310:	f000 fc6f 	bl	8017bf2 <msgPackAnnounce>

	if (!netSendGeneral(&ptpClock->netPath, ptpClock->msgObuf, ANNOUNCE_LENGTH))
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	f503 7073 	add.w	r0, r3, #972	; 0x3cc
 801731a:	687b      	ldr	r3, [r7, #4]
 801731c:	33cc      	adds	r3, #204	; 0xcc
 801731e:	2240      	movs	r2, #64	; 0x40
 8017320:	4619      	mov	r1, r3
 8017322:	f001 fd37 	bl	8018d94 <netSendGeneral>
 8017326:	4603      	mov	r3, r0
 8017328:	2b00      	cmp	r3, #0
 801732a:	d112      	bne.n	8017352 <issueAnnounce+0x52>
	{
		ERROR("issueAnnounce: can't sent\n");
 801732c:	f107 0310 	add.w	r3, r7, #16
 8017330:	4618      	mov	r0, r3
 8017332:	f002 f9f3 	bl	801971c <getTime>
 8017336:	693b      	ldr	r3, [r7, #16]
 8017338:	697a      	ldr	r2, [r7, #20]
 801733a:	4619      	mov	r1, r3
 801733c:	4813      	ldr	r0, [pc, #76]	; (801738c <issueAnnounce+0x8c>)
 801733e:	f003 f9ed 	bl	801a71c <iprintf>
 8017342:	4813      	ldr	r0, [pc, #76]	; (8017390 <issueAnnounce+0x90>)
 8017344:	f003 fa5e 	bl	801a804 <puts>
		toState(ptpClock, PTP_FAULTY);
 8017348:	2101      	movs	r1, #1
 801734a:	6878      	ldr	r0, [r7, #4]
 801734c:	f7fd fffc 	bl	8015348 <toState>
	else
	{
		DBGV("issueAnnounce\n");
		ptpClock->sentAnnounceSequenceId++;
	}
}
 8017350:	e017      	b.n	8017382 <issueAnnounce+0x82>
		DBGV("issueAnnounce\n");
 8017352:	f107 0308 	add.w	r3, r7, #8
 8017356:	4618      	mov	r0, r3
 8017358:	f002 f9e0 	bl	801971c <getTime>
 801735c:	68bb      	ldr	r3, [r7, #8]
 801735e:	68fa      	ldr	r2, [r7, #12]
 8017360:	4619      	mov	r1, r3
 8017362:	480c      	ldr	r0, [pc, #48]	; (8017394 <issueAnnounce+0x94>)
 8017364:	f003 f9da 	bl	801a71c <iprintf>
 8017368:	480b      	ldr	r0, [pc, #44]	; (8017398 <issueAnnounce+0x98>)
 801736a:	f003 fa4b 	bl	801a804 <puts>
		ptpClock->sentAnnounceSequenceId++;
 801736e:	687b      	ldr	r3, [r7, #4]
 8017370:	f9b3 3386 	ldrsh.w	r3, [r3, #902]	; 0x386
 8017374:	b29b      	uxth	r3, r3
 8017376:	3301      	adds	r3, #1
 8017378:	b29b      	uxth	r3, r3
 801737a:	b21a      	sxth	r2, r3
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	f8a3 2386 	strh.w	r2, [r3, #902]	; 0x386
}
 8017382:	bf00      	nop
 8017384:	3718      	adds	r7, #24
 8017386:	46bd      	mov	sp, r7
 8017388:	bd80      	pop	{r7, pc}
 801738a:	bf00      	nop
 801738c:	080207b0 	.word	0x080207b0
 8017390:	08021318 	.word	0x08021318
 8017394:	080207e8 	.word	0x080207e8
 8017398:	08021334 	.word	0x08021334

0801739c <issueSync>:

/* Pack and send  on event multicast ip adress a Sync message */
static void issueSync(PtpClock *ptpClock)
{
 801739c:	b580      	push	{r7, lr}
 801739e:	b08c      	sub	sp, #48	; 0x30
 80173a0:	af00      	add	r7, sp, #0
 80173a2:	6078      	str	r0, [r7, #4]
	Timestamp originTimestamp;
	TimeInternal internalTime;

	/* try to predict outgoing time stamp */
	getTime(&internalTime);
 80173a4:	f107 031c 	add.w	r3, r7, #28
 80173a8:	4618      	mov	r0, r3
 80173aa:	f002 f9b7 	bl	801971c <getTime>
	fromInternalTime(&internalTime, &originTimestamp);
 80173ae:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80173b2:	f107 031c 	add.w	r3, r7, #28
 80173b6:	4611      	mov	r1, r2
 80173b8:	4618      	mov	r0, r3
 80173ba:	f7fd f881 	bl	80144c0 <fromInternalTime>
	msgPackSync(ptpClock, ptpClock->msgObuf, &originTimestamp);
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	33cc      	adds	r3, #204	; 0xcc
 80173c2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80173c6:	4619      	mov	r1, r3
 80173c8:	6878      	ldr	r0, [r7, #4]
 80173ca:	f000 fd0a 	bl	8017de2 <msgPackSync>
	if (!netSendEvent(&ptpClock->netPath, ptpClock->msgObuf, SYNC_LENGTH, &internalTime))
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	f503 7073 	add.w	r0, r3, #972	; 0x3cc
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	f103 01cc 	add.w	r1, r3, #204	; 0xcc
 80173da:	f107 031c 	add.w	r3, r7, #28
 80173de:	222c      	movs	r2, #44	; 0x2c
 80173e0:	f001 fcc0 	bl	8018d64 <netSendEvent>
 80173e4:	4603      	mov	r3, r0
 80173e6:	2b00      	cmp	r3, #0
 80173e8:	d112      	bne.n	8017410 <issueSync+0x74>
	{
		ERROR("issueSync: can't sent\n");
 80173ea:	f107 0314 	add.w	r3, r7, #20
 80173ee:	4618      	mov	r0, r3
 80173f0:	f002 f994 	bl	801971c <getTime>
 80173f4:	697b      	ldr	r3, [r7, #20]
 80173f6:	69ba      	ldr	r2, [r7, #24]
 80173f8:	4619      	mov	r1, r3
 80173fa:	481f      	ldr	r0, [pc, #124]	; (8017478 <issueSync+0xdc>)
 80173fc:	f003 f98e 	bl	801a71c <iprintf>
 8017400:	481e      	ldr	r0, [pc, #120]	; (801747c <issueSync+0xe0>)
 8017402:	f003 f9ff 	bl	801a804 <puts>
		toState(ptpClock, PTP_FAULTY);
 8017406:	2101      	movs	r1, #1
 8017408:	6878      	ldr	r0, [r7, #4]
 801740a:	f7fd ff9d 	bl	8015348 <toState>
		else
		{
			// waitingForLoopback = ptpClock->twoStepFlag;
		}
	}
}
 801740e:	e02e      	b.n	801746e <issueSync+0xd2>
		DBGV("issueSync\n");
 8017410:	f107 030c 	add.w	r3, r7, #12
 8017414:	4618      	mov	r0, r3
 8017416:	f002 f981 	bl	801971c <getTime>
 801741a:	68fb      	ldr	r3, [r7, #12]
 801741c:	693a      	ldr	r2, [r7, #16]
 801741e:	4619      	mov	r1, r3
 8017420:	4817      	ldr	r0, [pc, #92]	; (8017480 <issueSync+0xe4>)
 8017422:	f003 f97b 	bl	801a71c <iprintf>
 8017426:	4817      	ldr	r0, [pc, #92]	; (8017484 <issueSync+0xe8>)
 8017428:	f003 f9ec 	bl	801a804 <puts>
		ptpClock->sentSyncSequenceId++;
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	f9b3 3384 	ldrsh.w	r3, [r3, #900]	; 0x384
 8017432:	b29b      	uxth	r3, r3
 8017434:	3301      	adds	r3, #1
 8017436:	b29b      	uxth	r3, r3
 8017438:	b21a      	sxth	r2, r3
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	f8a3 2384 	strh.w	r2, [r3, #900]	; 0x384
		if ((internalTime.seconds != 0) && (ptpClock->defaultDS.twoStepFlag))
 8017440:	69fb      	ldr	r3, [r7, #28]
 8017442:	2b00      	cmp	r3, #0
 8017444:	d013      	beq.n	801746e <issueSync+0xd2>
 8017446:	687b      	ldr	r3, [r7, #4]
 8017448:	781b      	ldrb	r3, [r3, #0]
 801744a:	2b00      	cmp	r3, #0
 801744c:	d00f      	beq.n	801746e <issueSync+0xd2>
			addTime(&internalTime, &internalTime, &ptpClock->outboundLatency);
 801744e:	687b      	ldr	r3, [r7, #4]
 8017450:	f503 6284 	add.w	r2, r3, #1056	; 0x420
 8017454:	f107 011c 	add.w	r1, r7, #28
 8017458:	f107 031c 	add.w	r3, r7, #28
 801745c:	4618      	mov	r0, r3
 801745e:	f7fd f8df 	bl	8014620 <addTime>
			issueFollowup(ptpClock, &internalTime);
 8017462:	f107 031c 	add.w	r3, r7, #28
 8017466:	4619      	mov	r1, r3
 8017468:	6878      	ldr	r0, [r7, #4]
 801746a:	f000 f80d 	bl	8017488 <issueFollowup>
}
 801746e:	bf00      	nop
 8017470:	3730      	adds	r7, #48	; 0x30
 8017472:	46bd      	mov	sp, r7
 8017474:	bd80      	pop	{r7, pc}
 8017476:	bf00      	nop
 8017478:	080207b0 	.word	0x080207b0
 801747c:	08021344 	.word	0x08021344
 8017480:	080207e8 	.word	0x080207e8
 8017484:	0802135c 	.word	0x0802135c

08017488 <issueFollowup>:

/* Pack and send on general multicast ip adress a FollowUp message */
static void issueFollowup(PtpClock *ptpClock, const TimeInternal *time)
{
 8017488:	b580      	push	{r7, lr}
 801748a:	b08a      	sub	sp, #40	; 0x28
 801748c:	af00      	add	r7, sp, #0
 801748e:	6078      	str	r0, [r7, #4]
 8017490:	6039      	str	r1, [r7, #0]
	Timestamp preciseOriginTimestamp;

	fromInternalTime(time, &preciseOriginTimestamp);
 8017492:	f107 031c 	add.w	r3, r7, #28
 8017496:	4619      	mov	r1, r3
 8017498:	6838      	ldr	r0, [r7, #0]
 801749a:	f7fd f811 	bl	80144c0 <fromInternalTime>
	msgPackFollowUp(ptpClock, ptpClock->msgObuf, &preciseOriginTimestamp);
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	33cc      	adds	r3, #204	; 0xcc
 80174a2:	f107 021c 	add.w	r2, r7, #28
 80174a6:	4619      	mov	r1, r3
 80174a8:	6878      	ldr	r0, [r7, #4]
 80174aa:	f000 fd78 	bl	8017f9e <msgPackFollowUp>

	if (!netSendGeneral(&ptpClock->netPath, ptpClock->msgObuf, FOLLOW_UP_LENGTH))
 80174ae:	687b      	ldr	r3, [r7, #4]
 80174b0:	f503 7073 	add.w	r0, r3, #972	; 0x3cc
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	33cc      	adds	r3, #204	; 0xcc
 80174b8:	222c      	movs	r2, #44	; 0x2c
 80174ba:	4619      	mov	r1, r3
 80174bc:	f001 fc6a 	bl	8018d94 <netSendGeneral>
 80174c0:	4603      	mov	r3, r0
 80174c2:	2b00      	cmp	r3, #0
 80174c4:	d112      	bne.n	80174ec <issueFollowup+0x64>
	{
		ERROR("issueFollowup: can't sent\n");
 80174c6:	f107 0314 	add.w	r3, r7, #20
 80174ca:	4618      	mov	r0, r3
 80174cc:	f002 f926 	bl	801971c <getTime>
 80174d0:	697b      	ldr	r3, [r7, #20]
 80174d2:	69ba      	ldr	r2, [r7, #24]
 80174d4:	4619      	mov	r1, r3
 80174d6:	480e      	ldr	r0, [pc, #56]	; (8017510 <issueFollowup+0x88>)
 80174d8:	f003 f920 	bl	801a71c <iprintf>
 80174dc:	480d      	ldr	r0, [pc, #52]	; (8017514 <issueFollowup+0x8c>)
 80174de:	f003 f991 	bl	801a804 <puts>
		toState(ptpClock, PTP_FAULTY);
 80174e2:	2101      	movs	r1, #1
 80174e4:	6878      	ldr	r0, [r7, #4]
 80174e6:	f7fd ff2f 	bl	8015348 <toState>
	}
	else
	{
		DBGV("issueFollowup\n");
	}
}
 80174ea:	e00d      	b.n	8017508 <issueFollowup+0x80>
		DBGV("issueFollowup\n");
 80174ec:	f107 030c 	add.w	r3, r7, #12
 80174f0:	4618      	mov	r0, r3
 80174f2:	f002 f913 	bl	801971c <getTime>
 80174f6:	68fb      	ldr	r3, [r7, #12]
 80174f8:	693a      	ldr	r2, [r7, #16]
 80174fa:	4619      	mov	r1, r3
 80174fc:	4806      	ldr	r0, [pc, #24]	; (8017518 <issueFollowup+0x90>)
 80174fe:	f003 f90d 	bl	801a71c <iprintf>
 8017502:	4806      	ldr	r0, [pc, #24]	; (801751c <issueFollowup+0x94>)
 8017504:	f003 f97e 	bl	801a804 <puts>
}
 8017508:	bf00      	nop
 801750a:	3728      	adds	r7, #40	; 0x28
 801750c:	46bd      	mov	sp, r7
 801750e:	bd80      	pop	{r7, pc}
 8017510:	080207b0 	.word	0x080207b0
 8017514:	08021368 	.word	0x08021368
 8017518:	080207e8 	.word	0x080207e8
 801751c:	08021384 	.word	0x08021384

08017520 <issueDelayReq>:


/* Pack and send on event multicast ip address a DelayReq message */
static void issueDelayReq(PtpClock *ptpClock)
{
 8017520:	b580      	push	{r7, lr}
 8017522:	b08c      	sub	sp, #48	; 0x30
 8017524:	af00      	add	r7, sp, #0
 8017526:	6078      	str	r0, [r7, #4]
	Timestamp originTimestamp;
	TimeInternal internalTime;

	getTime(&internalTime);
 8017528:	f107 031c 	add.w	r3, r7, #28
 801752c:	4618      	mov	r0, r3
 801752e:	f002 f8f5 	bl	801971c <getTime>
	fromInternalTime(&internalTime, &originTimestamp);
 8017532:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8017536:	f107 031c 	add.w	r3, r7, #28
 801753a:	4611      	mov	r1, r2
 801753c:	4618      	mov	r0, r3
 801753e:	f7fc ffbf 	bl	80144c0 <fromInternalTime>

	msgPackDelayReq(ptpClock, ptpClock->msgObuf, &originTimestamp);
 8017542:	687b      	ldr	r3, [r7, #4]
 8017544:	33cc      	adds	r3, #204	; 0xcc
 8017546:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801754a:	4619      	mov	r1, r3
 801754c:	6878      	ldr	r0, [r7, #4]
 801754e:	f000 fcca 	bl	8017ee6 <msgPackDelayReq>

	if (!netSendEvent(&ptpClock->netPath, ptpClock->msgObuf, DELAY_REQ_LENGTH, &internalTime))
 8017552:	687b      	ldr	r3, [r7, #4]
 8017554:	f503 7073 	add.w	r0, r3, #972	; 0x3cc
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	f103 01cc 	add.w	r1, r3, #204	; 0xcc
 801755e:	f107 031c 	add.w	r3, r7, #28
 8017562:	222c      	movs	r2, #44	; 0x2c
 8017564:	f001 fbfe 	bl	8018d64 <netSendEvent>
 8017568:	4603      	mov	r3, r0
 801756a:	2b00      	cmp	r3, #0
 801756c:	d112      	bne.n	8017594 <issueDelayReq+0x74>
	{
		ERROR("issueDelayReq: can't sent\n");
 801756e:	f107 0314 	add.w	r3, r7, #20
 8017572:	4618      	mov	r0, r3
 8017574:	f002 f8d2 	bl	801971c <getTime>
 8017578:	697b      	ldr	r3, [r7, #20]
 801757a:	69ba      	ldr	r2, [r7, #24]
 801757c:	4619      	mov	r1, r3
 801757e:	481e      	ldr	r0, [pc, #120]	; (80175f8 <issueDelayReq+0xd8>)
 8017580:	f003 f8cc 	bl	801a71c <iprintf>
 8017584:	481d      	ldr	r0, [pc, #116]	; (80175fc <issueDelayReq+0xdc>)
 8017586:	f003 f93d 	bl	801a804 <puts>
		toState(ptpClock, PTP_FAULTY);
 801758a:	2101      	movs	r1, #1
 801758c:	6878      	ldr	r0, [r7, #4]
 801758e:	f7fd fedb 	bl	8015348 <toState>
		{
			addTime(&internalTime, &internalTime, &ptpClock->outboundLatency);
			ptpClock->timestamp_delayReqSend = internalTime;
		}
	}
}
 8017592:	e02d      	b.n	80175f0 <issueDelayReq+0xd0>
		DBGV("issueDelayReq\n");
 8017594:	f107 030c 	add.w	r3, r7, #12
 8017598:	4618      	mov	r0, r3
 801759a:	f002 f8bf 	bl	801971c <getTime>
 801759e:	68fb      	ldr	r3, [r7, #12]
 80175a0:	693a      	ldr	r2, [r7, #16]
 80175a2:	4619      	mov	r1, r3
 80175a4:	4816      	ldr	r0, [pc, #88]	; (8017600 <issueDelayReq+0xe0>)
 80175a6:	f003 f8b9 	bl	801a71c <iprintf>
 80175aa:	4816      	ldr	r0, [pc, #88]	; (8017604 <issueDelayReq+0xe4>)
 80175ac:	f003 f92a 	bl	801a804 <puts>
		ptpClock->sentDelayReqSequenceId++;
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	f9b3 3382 	ldrsh.w	r3, [r3, #898]	; 0x382
 80175b6:	b29b      	uxth	r3, r3
 80175b8:	3301      	adds	r3, #1
 80175ba:	b29b      	uxth	r3, r3
 80175bc:	b21a      	sxth	r2, r3
 80175be:	687b      	ldr	r3, [r7, #4]
 80175c0:	f8a3 2382 	strh.w	r2, [r3, #898]	; 0x382
		if (internalTime.seconds != 0)
 80175c4:	69fb      	ldr	r3, [r7, #28]
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	d012      	beq.n	80175f0 <issueDelayReq+0xd0>
			addTime(&internalTime, &internalTime, &ptpClock->outboundLatency);
 80175ca:	687b      	ldr	r3, [r7, #4]
 80175cc:	f503 6284 	add.w	r2, r3, #1056	; 0x420
 80175d0:	f107 011c 	add.w	r1, r7, #28
 80175d4:	f107 031c 	add.w	r3, r7, #28
 80175d8:	4618      	mov	r0, r3
 80175da:	f7fd f821 	bl	8014620 <addTime>
			ptpClock->timestamp_delayReqSend = internalTime;
 80175de:	687b      	ldr	r3, [r7, #4]
 80175e0:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80175e4:	f107 021c 	add.w	r2, r7, #28
 80175e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80175ec:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80175f0:	bf00      	nop
 80175f2:	3730      	adds	r7, #48	; 0x30
 80175f4:	46bd      	mov	sp, r7
 80175f6:	bd80      	pop	{r7, pc}
 80175f8:	080207b0 	.word	0x080207b0
 80175fc:	08021394 	.word	0x08021394
 8017600:	080207e8 	.word	0x080207e8
 8017604:	080213b0 	.word	0x080213b0

08017608 <issuePDelayReq>:

/* Pack and send on event multicast ip adress a PDelayReq message */
static void issuePDelayReq(PtpClock *ptpClock)
{
 8017608:	b580      	push	{r7, lr}
 801760a:	b08c      	sub	sp, #48	; 0x30
 801760c:	af00      	add	r7, sp, #0
 801760e:	6078      	str	r0, [r7, #4]
	Timestamp originTimestamp;
	TimeInternal internalTime;

	getTime(&internalTime);
 8017610:	f107 031c 	add.w	r3, r7, #28
 8017614:	4618      	mov	r0, r3
 8017616:	f002 f881 	bl	801971c <getTime>
	fromInternalTime(&internalTime, &originTimestamp);
 801761a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801761e:	f107 031c 	add.w	r3, r7, #28
 8017622:	4611      	mov	r1, r2
 8017624:	4618      	mov	r0, r3
 8017626:	f7fc ff4b 	bl	80144c0 <fromInternalTime>

	msgPackPDelayReq(ptpClock, ptpClock->msgObuf, &originTimestamp);
 801762a:	687b      	ldr	r3, [r7, #4]
 801762c:	33cc      	adds	r3, #204	; 0xcc
 801762e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8017632:	4619      	mov	r1, r3
 8017634:	6878      	ldr	r0, [r7, #4]
 8017636:	f000 fdff 	bl	8018238 <msgPackPDelayReq>

	if (!netSendPeerEvent(&ptpClock->netPath, ptpClock->msgObuf, PDELAY_REQ_LENGTH, &internalTime))
 801763a:	687b      	ldr	r3, [r7, #4]
 801763c:	f503 7073 	add.w	r0, r3, #972	; 0x3cc
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	f103 01cc 	add.w	r1, r3, #204	; 0xcc
 8017646:	f107 031c 	add.w	r3, r7, #28
 801764a:	2236      	movs	r2, #54	; 0x36
 801764c:	f001 fbd1 	bl	8018df2 <netSendPeerEvent>
 8017650:	4603      	mov	r3, r0
 8017652:	2b00      	cmp	r3, #0
 8017654:	d112      	bne.n	801767c <issuePDelayReq+0x74>
	{
		ERROR("issuePDelayReq: can't sent\n");
 8017656:	f107 0314 	add.w	r3, r7, #20
 801765a:	4618      	mov	r0, r3
 801765c:	f002 f85e 	bl	801971c <getTime>
 8017660:	697b      	ldr	r3, [r7, #20]
 8017662:	69ba      	ldr	r2, [r7, #24]
 8017664:	4619      	mov	r1, r3
 8017666:	481e      	ldr	r0, [pc, #120]	; (80176e0 <issuePDelayReq+0xd8>)
 8017668:	f003 f858 	bl	801a71c <iprintf>
 801766c:	481d      	ldr	r0, [pc, #116]	; (80176e4 <issuePDelayReq+0xdc>)
 801766e:	f003 f8c9 	bl	801a804 <puts>
		toState(ptpClock, PTP_FAULTY);
 8017672:	2101      	movs	r1, #1
 8017674:	6878      	ldr	r0, [r7, #4]
 8017676:	f7fd fe67 	bl	8015348 <toState>
		{
			addTime(&internalTime, &internalTime, &ptpClock->outboundLatency);
			ptpClock->pdelay_t1 = internalTime;
		}
	}
}
 801767a:	e02d      	b.n	80176d8 <issuePDelayReq+0xd0>
		DBGV("issuePDelayReq\n");
 801767c:	f107 030c 	add.w	r3, r7, #12
 8017680:	4618      	mov	r0, r3
 8017682:	f002 f84b 	bl	801971c <getTime>
 8017686:	68fb      	ldr	r3, [r7, #12]
 8017688:	693a      	ldr	r2, [r7, #16]
 801768a:	4619      	mov	r1, r3
 801768c:	4816      	ldr	r0, [pc, #88]	; (80176e8 <issuePDelayReq+0xe0>)
 801768e:	f003 f845 	bl	801a71c <iprintf>
 8017692:	4816      	ldr	r0, [pc, #88]	; (80176ec <issuePDelayReq+0xe4>)
 8017694:	f003 f8b6 	bl	801a804 <puts>
		ptpClock->sentPDelayReqSequenceId++;
 8017698:	687b      	ldr	r3, [r7, #4]
 801769a:	f9b3 3380 	ldrsh.w	r3, [r3, #896]	; 0x380
 801769e:	b29b      	uxth	r3, r3
 80176a0:	3301      	adds	r3, #1
 80176a2:	b29b      	uxth	r3, r3
 80176a4:	b21a      	sxth	r2, r3
 80176a6:	687b      	ldr	r3, [r7, #4]
 80176a8:	f8a3 2380 	strh.w	r2, [r3, #896]	; 0x380
		if (internalTime.seconds != 0)
 80176ac:	69fb      	ldr	r3, [r7, #28]
 80176ae:	2b00      	cmp	r3, #0
 80176b0:	d012      	beq.n	80176d8 <issuePDelayReq+0xd0>
			addTime(&internalTime, &internalTime, &ptpClock->outboundLatency);
 80176b2:	687b      	ldr	r3, [r7, #4]
 80176b4:	f503 6284 	add.w	r2, r3, #1056	; 0x420
 80176b8:	f107 011c 	add.w	r1, r7, #28
 80176bc:	f107 031c 	add.w	r3, r7, #28
 80176c0:	4618      	mov	r0, r3
 80176c2:	f7fc ffad 	bl	8014620 <addTime>
			ptpClock->pdelay_t1 = internalTime;
 80176c6:	687b      	ldr	r3, [r7, #4]
 80176c8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80176cc:	f107 021c 	add.w	r2, r7, #28
 80176d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80176d4:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80176d8:	bf00      	nop
 80176da:	3730      	adds	r7, #48	; 0x30
 80176dc:	46bd      	mov	sp, r7
 80176de:	bd80      	pop	{r7, pc}
 80176e0:	080207b0 	.word	0x080207b0
 80176e4:	080213c0 	.word	0x080213c0
 80176e8:	080207e8 	.word	0x080207e8
 80176ec:	080213dc 	.word	0x080213dc

080176f0 <issuePDelayResp>:

/* Pack and send on event multicast ip adress a PDelayResp message */
static void issuePDelayResp(PtpClock *ptpClock, TimeInternal *time, const MsgHeader * pDelayReqHeader)
{
 80176f0:	b580      	push	{r7, lr}
 80176f2:	b08c      	sub	sp, #48	; 0x30
 80176f4:	af00      	add	r7, sp, #0
 80176f6:	60f8      	str	r0, [r7, #12]
 80176f8:	60b9      	str	r1, [r7, #8]
 80176fa:	607a      	str	r2, [r7, #4]
	Timestamp requestReceiptTimestamp;

	fromInternalTime(time, &requestReceiptTimestamp);
 80176fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017700:	4619      	mov	r1, r3
 8017702:	68b8      	ldr	r0, [r7, #8]
 8017704:	f7fc fedc 	bl	80144c0 <fromInternalTime>
	msgPackPDelayResp(ptpClock->msgObuf, pDelayReqHeader, &requestReceiptTimestamp);
 8017708:	68fb      	ldr	r3, [r7, #12]
 801770a:	33cc      	adds	r3, #204	; 0xcc
 801770c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8017710:	6879      	ldr	r1, [r7, #4]
 8017712:	4618      	mov	r0, r3
 8017714:	f000 fdf3 	bl	80182fe <msgPackPDelayResp>

	if (!netSendPeerEvent(&ptpClock->netPath, ptpClock->msgObuf, PDELAY_RESP_LENGTH, time))
 8017718:	68fb      	ldr	r3, [r7, #12]
 801771a:	f503 7073 	add.w	r0, r3, #972	; 0x3cc
 801771e:	68fb      	ldr	r3, [r7, #12]
 8017720:	f103 01cc 	add.w	r1, r3, #204	; 0xcc
 8017724:	68bb      	ldr	r3, [r7, #8]
 8017726:	2236      	movs	r2, #54	; 0x36
 8017728:	f001 fb63 	bl	8018df2 <netSendPeerEvent>
 801772c:	4603      	mov	r3, r0
 801772e:	2b00      	cmp	r3, #0
 8017730:	d112      	bne.n	8017758 <issuePDelayResp+0x68>
	{
		ERROR("issuePDelayResp: can't sent\n");
 8017732:	f107 031c 	add.w	r3, r7, #28
 8017736:	4618      	mov	r0, r3
 8017738:	f001 fff0 	bl	801971c <getTime>
 801773c:	69fb      	ldr	r3, [r7, #28]
 801773e:	6a3a      	ldr	r2, [r7, #32]
 8017740:	4619      	mov	r1, r3
 8017742:	4814      	ldr	r0, [pc, #80]	; (8017794 <issuePDelayResp+0xa4>)
 8017744:	f002 ffea 	bl	801a71c <iprintf>
 8017748:	4813      	ldr	r0, [pc, #76]	; (8017798 <issuePDelayResp+0xa8>)
 801774a:	f003 f85b 	bl	801a804 <puts>
		toState(ptpClock, PTP_FAULTY);
 801774e:	2101      	movs	r1, #1
 8017750:	68f8      	ldr	r0, [r7, #12]
 8017752:	f7fd fdf9 	bl	8015348 <toState>
			addTime(time, time, &ptpClock->outboundLatency);
		}

		DBGV("issuePDelayResp\n");
	}
}
 8017756:	e019      	b.n	801778c <issuePDelayResp+0x9c>
		if (time->seconds != 0)
 8017758:	68bb      	ldr	r3, [r7, #8]
 801775a:	681b      	ldr	r3, [r3, #0]
 801775c:	2b00      	cmp	r3, #0
 801775e:	d007      	beq.n	8017770 <issuePDelayResp+0x80>
			addTime(time, time, &ptpClock->outboundLatency);
 8017760:	68fb      	ldr	r3, [r7, #12]
 8017762:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8017766:	461a      	mov	r2, r3
 8017768:	68b9      	ldr	r1, [r7, #8]
 801776a:	68b8      	ldr	r0, [r7, #8]
 801776c:	f7fc ff58 	bl	8014620 <addTime>
		DBGV("issuePDelayResp\n");
 8017770:	f107 0314 	add.w	r3, r7, #20
 8017774:	4618      	mov	r0, r3
 8017776:	f001 ffd1 	bl	801971c <getTime>
 801777a:	697b      	ldr	r3, [r7, #20]
 801777c:	69ba      	ldr	r2, [r7, #24]
 801777e:	4619      	mov	r1, r3
 8017780:	4806      	ldr	r0, [pc, #24]	; (801779c <issuePDelayResp+0xac>)
 8017782:	f002 ffcb 	bl	801a71c <iprintf>
 8017786:	4806      	ldr	r0, [pc, #24]	; (80177a0 <issuePDelayResp+0xb0>)
 8017788:	f003 f83c 	bl	801a804 <puts>
}
 801778c:	bf00      	nop
 801778e:	3730      	adds	r7, #48	; 0x30
 8017790:	46bd      	mov	sp, r7
 8017792:	bd80      	pop	{r7, pc}
 8017794:	080207b0 	.word	0x080207b0
 8017798:	080213ec 	.word	0x080213ec
 801779c:	080207e8 	.word	0x080207e8
 80177a0:	08021408 	.word	0x08021408

080177a4 <issueDelayResp>:


/* Pack and send on event multicast ip adress a DelayResp message */
static void issueDelayResp(PtpClock *ptpClock, const TimeInternal *time, const MsgHeader * delayReqHeader)
{
 80177a4:	b580      	push	{r7, lr}
 80177a6:	b08c      	sub	sp, #48	; 0x30
 80177a8:	af00      	add	r7, sp, #0
 80177aa:	60f8      	str	r0, [r7, #12]
 80177ac:	60b9      	str	r1, [r7, #8]
 80177ae:	607a      	str	r2, [r7, #4]
	Timestamp requestReceiptTimestamp;

	fromInternalTime(time, &requestReceiptTimestamp);
 80177b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80177b4:	4619      	mov	r1, r3
 80177b6:	68b8      	ldr	r0, [r7, #8]
 80177b8:	f7fc fe82 	bl	80144c0 <fromInternalTime>
	msgPackDelayResp(ptpClock, ptpClock->msgObuf, delayReqHeader, &requestReceiptTimestamp);
 80177bc:	68fb      	ldr	r3, [r7, #12]
 80177be:	f103 01cc 	add.w	r1, r3, #204	; 0xcc
 80177c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80177c6:	687a      	ldr	r2, [r7, #4]
 80177c8:	68f8      	ldr	r0, [r7, #12]
 80177ca:	f000 fc68 	bl	801809e <msgPackDelayResp>

	if (!netSendGeneral(&ptpClock->netPath, ptpClock->msgObuf, PDELAY_RESP_LENGTH))
 80177ce:	68fb      	ldr	r3, [r7, #12]
 80177d0:	f503 7073 	add.w	r0, r3, #972	; 0x3cc
 80177d4:	68fb      	ldr	r3, [r7, #12]
 80177d6:	33cc      	adds	r3, #204	; 0xcc
 80177d8:	2236      	movs	r2, #54	; 0x36
 80177da:	4619      	mov	r1, r3
 80177dc:	f001 fada 	bl	8018d94 <netSendGeneral>
 80177e0:	4603      	mov	r3, r0
 80177e2:	2b00      	cmp	r3, #0
 80177e4:	d112      	bne.n	801780c <issueDelayResp+0x68>
	{
		ERROR("issueDelayResp: can't sent\n");
 80177e6:	f107 031c 	add.w	r3, r7, #28
 80177ea:	4618      	mov	r0, r3
 80177ec:	f001 ff96 	bl	801971c <getTime>
 80177f0:	69fb      	ldr	r3, [r7, #28]
 80177f2:	6a3a      	ldr	r2, [r7, #32]
 80177f4:	4619      	mov	r1, r3
 80177f6:	480e      	ldr	r0, [pc, #56]	; (8017830 <issueDelayResp+0x8c>)
 80177f8:	f002 ff90 	bl	801a71c <iprintf>
 80177fc:	480d      	ldr	r0, [pc, #52]	; (8017834 <issueDelayResp+0x90>)
 80177fe:	f003 f801 	bl	801a804 <puts>
		toState(ptpClock, PTP_FAULTY);
 8017802:	2101      	movs	r1, #1
 8017804:	68f8      	ldr	r0, [r7, #12]
 8017806:	f7fd fd9f 	bl	8015348 <toState>
	}
	else
	{
		DBGV("issueDelayResp\n");
	}
}
 801780a:	e00d      	b.n	8017828 <issueDelayResp+0x84>
		DBGV("issueDelayResp\n");
 801780c:	f107 0314 	add.w	r3, r7, #20
 8017810:	4618      	mov	r0, r3
 8017812:	f001 ff83 	bl	801971c <getTime>
 8017816:	697b      	ldr	r3, [r7, #20]
 8017818:	69ba      	ldr	r2, [r7, #24]
 801781a:	4619      	mov	r1, r3
 801781c:	4806      	ldr	r0, [pc, #24]	; (8017838 <issueDelayResp+0x94>)
 801781e:	f002 ff7d 	bl	801a71c <iprintf>
 8017822:	4806      	ldr	r0, [pc, #24]	; (801783c <issueDelayResp+0x98>)
 8017824:	f002 ffee 	bl	801a804 <puts>
}
 8017828:	bf00      	nop
 801782a:	3730      	adds	r7, #48	; 0x30
 801782c:	46bd      	mov	sp, r7
 801782e:	bd80      	pop	{r7, pc}
 8017830:	080207b0 	.word	0x080207b0
 8017834:	08021418 	.word	0x08021418
 8017838:	080207e8 	.word	0x080207e8
 801783c:	08021434 	.word	0x08021434

08017840 <issuePDelayRespFollowUp>:

static void issuePDelayRespFollowUp(PtpClock *ptpClock, const TimeInternal *time, const MsgHeader * pDelayReqHeader)
{
 8017840:	b580      	push	{r7, lr}
 8017842:	b08c      	sub	sp, #48	; 0x30
 8017844:	af00      	add	r7, sp, #0
 8017846:	60f8      	str	r0, [r7, #12]
 8017848:	60b9      	str	r1, [r7, #8]
 801784a:	607a      	str	r2, [r7, #4]
	Timestamp responseOriginTimestamp;
	fromInternalTime(time, &responseOriginTimestamp);
 801784c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8017850:	4619      	mov	r1, r3
 8017852:	68b8      	ldr	r0, [r7, #8]
 8017854:	f7fc fe34 	bl	80144c0 <fromInternalTime>

	msgPackPDelayRespFollowUp(ptpClock->msgObuf, pDelayReqHeader, &responseOriginTimestamp);
 8017858:	68fb      	ldr	r3, [r7, #12]
 801785a:	33cc      	adds	r3, #204	; 0xcc
 801785c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8017860:	6879      	ldr	r1, [r7, #4]
 8017862:	4618      	mov	r0, r3
 8017864:	f000 fdf9 	bl	801845a <msgPackPDelayRespFollowUp>

	if (!netSendPeerGeneral(&ptpClock->netPath, ptpClock->msgObuf, PDELAY_RESP_FOLLOW_UP_LENGTH))
 8017868:	68fb      	ldr	r3, [r7, #12]
 801786a:	f503 7073 	add.w	r0, r3, #972	; 0x3cc
 801786e:	68fb      	ldr	r3, [r7, #12]
 8017870:	33cc      	adds	r3, #204	; 0xcc
 8017872:	2236      	movs	r2, #54	; 0x36
 8017874:	4619      	mov	r1, r3
 8017876:	f001 faa4 	bl	8018dc2 <netSendPeerGeneral>
 801787a:	4603      	mov	r3, r0
 801787c:	2b00      	cmp	r3, #0
 801787e:	d112      	bne.n	80178a6 <issuePDelayRespFollowUp+0x66>
	{
		ERROR("issuePDelayRespFollowUp: can't sent\n");
 8017880:	f107 031c 	add.w	r3, r7, #28
 8017884:	4618      	mov	r0, r3
 8017886:	f001 ff49 	bl	801971c <getTime>
 801788a:	69fb      	ldr	r3, [r7, #28]
 801788c:	6a3a      	ldr	r2, [r7, #32]
 801788e:	4619      	mov	r1, r3
 8017890:	480e      	ldr	r0, [pc, #56]	; (80178cc <issuePDelayRespFollowUp+0x8c>)
 8017892:	f002 ff43 	bl	801a71c <iprintf>
 8017896:	480e      	ldr	r0, [pc, #56]	; (80178d0 <issuePDelayRespFollowUp+0x90>)
 8017898:	f002 ffb4 	bl	801a804 <puts>
		toState(ptpClock, PTP_FAULTY);
 801789c:	2101      	movs	r1, #1
 801789e:	68f8      	ldr	r0, [r7, #12]
 80178a0:	f7fd fd52 	bl	8015348 <toState>
	}
	else
	{
		DBGV("issuePDelayRespFollowUp\n");
	}
}
 80178a4:	e00d      	b.n	80178c2 <issuePDelayRespFollowUp+0x82>
		DBGV("issuePDelayRespFollowUp\n");
 80178a6:	f107 0314 	add.w	r3, r7, #20
 80178aa:	4618      	mov	r0, r3
 80178ac:	f001 ff36 	bl	801971c <getTime>
 80178b0:	697b      	ldr	r3, [r7, #20]
 80178b2:	69ba      	ldr	r2, [r7, #24]
 80178b4:	4619      	mov	r1, r3
 80178b6:	4807      	ldr	r0, [pc, #28]	; (80178d4 <issuePDelayRespFollowUp+0x94>)
 80178b8:	f002 ff30 	bl	801a71c <iprintf>
 80178bc:	4806      	ldr	r0, [pc, #24]	; (80178d8 <issuePDelayRespFollowUp+0x98>)
 80178be:	f002 ffa1 	bl	801a804 <puts>
}
 80178c2:	bf00      	nop
 80178c4:	3730      	adds	r7, #48	; 0x30
 80178c6:	46bd      	mov	sp, r7
 80178c8:	bd80      	pop	{r7, pc}
 80178ca:	bf00      	nop
 80178cc:	080207b0 	.word	0x080207b0
 80178d0:	08021444 	.word	0x08021444
 80178d4:	080207e8 	.word	0x080207e8
 80178d8:	08021468 	.word	0x08021468

080178dc <ptpd_thread>:
__IO uint32_t PTPTimer = 0;

void issueSync_test(PtpClock *ptpClock);

static void ptpd_thread(void const *arg)
{
 80178dc:	b580      	push	{r7, lr}
 80178de:	b084      	sub	sp, #16
 80178e0:	af00      	add	r7, sp, #0
 80178e2:	6078      	str	r0, [r7, #4]
	// Initialize run-time options to default values.
	rtOpts.announceInterval = DEFAULT_ANNOUNCE_INTERVAL;
 80178e4:	4b34      	ldr	r3, [pc, #208]	; (80179b8 <ptpd_thread+0xdc>)
 80178e6:	2202      	movs	r2, #2
 80178e8:	701a      	strb	r2, [r3, #0]
	rtOpts.syncInterval = DEFAULT_SYNC_INTERVAL;
 80178ea:	4b33      	ldr	r3, [pc, #204]	; (80179b8 <ptpd_thread+0xdc>)
 80178ec:	2200      	movs	r2, #0
 80178ee:	705a      	strb	r2, [r3, #1]
	rtOpts.clockQuality.clockAccuracy = DEFAULT_CLOCK_ACCURACY;
 80178f0:	4b31      	ldr	r3, [pc, #196]	; (80179b8 <ptpd_thread+0xdc>)
 80178f2:	22fe      	movs	r2, #254	; 0xfe
 80178f4:	70da      	strb	r2, [r3, #3]
	rtOpts.clockQuality.clockClass = DEFAULT_CLOCK_CLASS;
 80178f6:	4b30      	ldr	r3, [pc, #192]	; (80179b8 <ptpd_thread+0xdc>)
 80178f8:	22f8      	movs	r2, #248	; 0xf8
 80178fa:	709a      	strb	r2, [r3, #2]
	rtOpts.clockQuality.offsetScaledLogVariance = DEFAULT_CLOCK_VARIANCE; /* 7.6.3.3 */
 80178fc:	4b2e      	ldr	r3, [pc, #184]	; (80179b8 <ptpd_thread+0xdc>)
 80178fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8017902:	809a      	strh	r2, [r3, #4]
	rtOpts.priority1 = DEFAULT_PRIORITY1;
 8017904:	4b2c      	ldr	r3, [pc, #176]	; (80179b8 <ptpd_thread+0xdc>)
 8017906:	2280      	movs	r2, #128	; 0x80
 8017908:	719a      	strb	r2, [r3, #6]
	rtOpts.priority2 = DEFAULT_PRIORITY2;
 801790a:	4b2b      	ldr	r3, [pc, #172]	; (80179b8 <ptpd_thread+0xdc>)
 801790c:	2280      	movs	r2, #128	; 0x80
 801790e:	71da      	strb	r2, [r3, #7]
	rtOpts.domainNumber = DEFAULT_DOMAIN_NUMBER;
 8017910:	4b29      	ldr	r3, [pc, #164]	; (80179b8 <ptpd_thread+0xdc>)
 8017912:	2200      	movs	r2, #0
 8017914:	721a      	strb	r2, [r3, #8]
	rtOpts.slaveOnly = SLAVE_ONLY;
 8017916:	4b28      	ldr	r3, [pc, #160]	; (80179b8 <ptpd_thread+0xdc>)
 8017918:	2200      	movs	r2, #0
 801791a:	725a      	strb	r2, [r3, #9]
	rtOpts.currentUtcOffset = DEFAULT_UTC_OFFSET;
 801791c:	4b26      	ldr	r3, [pc, #152]	; (80179b8 <ptpd_thread+0xdc>)
 801791e:	2200      	movs	r2, #0
 8017920:	815a      	strh	r2, [r3, #10]
	rtOpts.servo.noResetClock = DEFAULT_NO_RESET_CLOCK;
 8017922:	4b25      	ldr	r3, [pc, #148]	; (80179b8 <ptpd_thread+0xdc>)
 8017924:	2200      	movs	r2, #0
 8017926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	rtOpts.servo.noAdjust = NO_ADJUST;
 801792a:	4b23      	ldr	r3, [pc, #140]	; (80179b8 <ptpd_thread+0xdc>)
 801792c:	2200      	movs	r2, #0
 801792e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	rtOpts.inboundLatency.nanoseconds = DEFAULT_INBOUND_LATENCY;
 8017932:	4b21      	ldr	r3, [pc, #132]	; (80179b8 <ptpd_thread+0xdc>)
 8017934:	2200      	movs	r2, #0
 8017936:	625a      	str	r2, [r3, #36]	; 0x24
	rtOpts.outboundLatency.nanoseconds = DEFAULT_OUTBOUND_LATENCY;
 8017938:	4b1f      	ldr	r3, [pc, #124]	; (80179b8 <ptpd_thread+0xdc>)
 801793a:	2200      	movs	r2, #0
 801793c:	62da      	str	r2, [r3, #44]	; 0x2c
	rtOpts.servo.sDelay = DEFAULT_DELAY_S;
 801793e:	4b1e      	ldr	r3, [pc, #120]	; (80179b8 <ptpd_thread+0xdc>)
 8017940:	4a1e      	ldr	r2, [pc, #120]	; (80179bc <ptpd_thread+0xe0>)
 8017942:	641a      	str	r2, [r3, #64]	; 0x40
	rtOpts.servo.sOffset = DEFAULT_OFFSET_S;
 8017944:	4b1c      	ldr	r3, [pc, #112]	; (80179b8 <ptpd_thread+0xdc>)
 8017946:	2200      	movs	r2, #0
 8017948:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	rtOpts.servo.ap = DEFAULT_AP;
 801794c:	4b1a      	ldr	r3, [pc, #104]	; (80179b8 <ptpd_thread+0xdc>)
 801794e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8017952:	639a      	str	r2, [r3, #56]	; 0x38
	rtOpts.servo.ai = DEFAULT_AI;
 8017954:	4b18      	ldr	r3, [pc, #96]	; (80179b8 <ptpd_thread+0xdc>)
 8017956:	4a1a      	ldr	r2, [pc, #104]	; (80179c0 <ptpd_thread+0xe4>)
 8017958:	63da      	str	r2, [r3, #60]	; 0x3c
	rtOpts.maxForeignRecords = sizeof(ptpForeignRecords) / sizeof(ptpForeignRecords[0]);
 801795a:	4b17      	ldr	r3, [pc, #92]	; (80179b8 <ptpd_thread+0xdc>)
 801795c:	2205      	movs	r2, #5
 801795e:	861a      	strh	r2, [r3, #48]	; 0x30
	rtOpts.stats = PTP_TEXT_STATS;
 8017960:	4b15      	ldr	r3, [pc, #84]	; (80179b8 <ptpd_thread+0xdc>)
 8017962:	2201      	movs	r2, #1
 8017964:	739a      	strb	r2, [r3, #14]
	rtOpts.delayMechanism = DEFAULT_DELAY_MECHANISM;
 8017966:	4b14      	ldr	r3, [pc, #80]	; (80179b8 <ptpd_thread+0xdc>)
 8017968:	2201      	movs	r2, #1
 801796a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

	// Initialize run time options.
	if (ptpdStartup(&ptpClock, &rtOpts, ptpForeignRecords) != 0)
 801796e:	4a15      	ldr	r2, [pc, #84]	; (80179c4 <ptpd_thread+0xe8>)
 8017970:	4911      	ldr	r1, [pc, #68]	; (80179b8 <ptpd_thread+0xdc>)
 8017972:	4815      	ldr	r0, [pc, #84]	; (80179c8 <ptpd_thread+0xec>)
 8017974:	f001 fe86 	bl	8019684 <ptpdStartup>
 8017978:	4603      	mov	r3, r0
 801797a:	2b00      	cmp	r3, #0
 801797c:	d003      	beq.n	8017986 <ptpd_thread+0xaa>
	{
		printf("PTPD: startup failed");
 801797e:	4813      	ldr	r0, [pc, #76]	; (80179cc <ptpd_thread+0xf0>)
 8017980:	f002 fecc 	bl	801a71c <iprintf>
		return;
 8017984:	e014      	b.n	80179b0 <ptpd_thread+0xd4>
	}
	
	printf("PTP thread ready.\n");
 8017986:	4812      	ldr	r0, [pc, #72]	; (80179d0 <ptpd_thread+0xf4>)
 8017988:	f002 ff3c 	bl	801a804 <puts>
		{
			// doState() has a switch for the actions and events to be
			// checked for 'port_state'. The actions and events may or may not change
			// 'port_state' by calling toState(), but once they are done we loop around
			// again and perform the actions required for the new 'port_state'.
			doState(&ptpClock);
 801798c:	480e      	ldr	r0, [pc, #56]	; (80179c8 <ptpd_thread+0xec>)
 801798e:	f7fd ff5d 	bl	801584c <doState>
		}
		while (netSelect(&ptpClock.netPath, 0) > 0);
 8017992:	2100      	movs	r1, #0
 8017994:	480f      	ldr	r0, [pc, #60]	; (80179d4 <ptpd_thread+0xf8>)
 8017996:	f001 f87d 	bl	8018a94 <netSelect>
 801799a:	4603      	mov	r3, r0
 801799c:	2b00      	cmp	r3, #0
 801799e:	dcf5      	bgt.n	801798c <ptpd_thread+0xb0>
		// Wait up to 100ms for something to do, then do something anyway.
		sys_arch_mbox_fetch(&ptp_alert_queue, &msg, 100);
 80179a0:	f107 030c 	add.w	r3, r7, #12
 80179a4:	2264      	movs	r2, #100	; 0x64
 80179a6:	4619      	mov	r1, r3
 80179a8:	480b      	ldr	r0, [pc, #44]	; (80179d8 <ptpd_thread+0xfc>)
 80179aa:	f7fc fc5e 	bl	801426a <sys_arch_mbox_fetch>
	{
 80179ae:	e7ed      	b.n	801798c <ptpd_thread+0xb0>
	}
}
 80179b0:	3710      	adds	r7, #16
 80179b2:	46bd      	mov	sp, r7
 80179b4:	bd80      	pop	{r7, pc}
 80179b6:	bf00      	nop
 80179b8:	2000be60 	.word	0x2000be60
 80179bc:	40c00000 	.word	0x40c00000
 80179c0:	3da3d70a 	.word	0x3da3d70a
 80179c4:	2000bca8 	.word	0x2000bca8
 80179c8:	2000b858 	.word	0x2000b858
 80179cc:	08021480 	.word	0x08021480
 80179d0:	08021498 	.word	0x08021498
 80179d4:	2000bc24 	.word	0x2000bc24
 80179d8:	20004d48 	.word	0x20004d48

080179dc <ptpd_alert>:

// Notify the PTP thread of a pending operation.
void ptpd_alert(void)
{
 80179dc:	b580      	push	{r7, lr}
 80179de:	af00      	add	r7, sp, #0
	// Send a message to the alert queue to wake up the PTP thread.
	sys_mbox_trypost(&ptp_alert_queue, NULL);
 80179e0:	2100      	movs	r1, #0
 80179e2:	4802      	ldr	r0, [pc, #8]	; (80179ec <ptpd_alert+0x10>)
 80179e4:	f7fc fc27 	bl	8014236 <sys_mbox_trypost>
}
 80179e8:	bf00      	nop
 80179ea:	bd80      	pop	{r7, pc}
 80179ec:	20004d48 	.word	0x20004d48

080179f0 <ptpd_init>:

osThreadId ptpd_init(void)
{
 80179f0:	b5b0      	push	{r4, r5, r7, lr}
 80179f2:	b088      	sub	sp, #32
 80179f4:	af00      	add	r7, sp, #0
	// Create the alert queue mailbox.
  if (sys_mbox_new(&ptp_alert_queue, 8) != ERR_OK)
 80179f6:	2108      	movs	r1, #8
 80179f8:	480f      	ldr	r0, [pc, #60]	; (8017a38 <ptpd_init+0x48>)
 80179fa:	f7fc fbe5 	bl	80141c8 <sys_mbox_new>
 80179fe:	4603      	mov	r3, r0
 8017a00:	2b00      	cmp	r3, #0
 8017a02:	d002      	beq.n	8017a0a <ptpd_init+0x1a>
	{
    printf("PTPD: failed to create ptp_alert_queue mbox");
 8017a04:	480d      	ldr	r0, [pc, #52]	; (8017a3c <ptpd_init+0x4c>)
 8017a06:	f002 fe89 	bl	801a71c <iprintf>
  }

	// Create the PTP daemon thread.
  	osThreadDef(PTPD, ptpd_thread, osPriorityAboveNormal, 0, DEFAULT_THREAD_STACKSIZE * 2);
 8017a0a:	4b0d      	ldr	r3, [pc, #52]	; (8017a40 <ptpd_init+0x50>)
 8017a0c:	1d3c      	adds	r4, r7, #4
 8017a0e:	461d      	mov	r5, r3
 8017a10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017a12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017a14:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8017a18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  	PTPTaskHandle = osThreadCreate(osThread(PTPD), NULL);
 8017a1c:	1d3b      	adds	r3, r7, #4
 8017a1e:	2100      	movs	r1, #0
 8017a20:	4618      	mov	r0, r3
 8017a22:	f7ed fb8f 	bl	8005144 <osThreadCreate>
 8017a26:	4602      	mov	r2, r0
 8017a28:	4b06      	ldr	r3, [pc, #24]	; (8017a44 <ptpd_init+0x54>)
 8017a2a:	601a      	str	r2, [r3, #0]
	//sys_thread_t id = sys_thread_new("PTPD", ptpd_thread, NULL, DEFAULT_THREAD_STACKSIZE * 2, osPriorityAboveNormal);
  	return PTPTaskHandle;
 8017a2c:	4b05      	ldr	r3, [pc, #20]	; (8017a44 <ptpd_init+0x54>)
 8017a2e:	681b      	ldr	r3, [r3, #0]
}
 8017a30:	4618      	mov	r0, r3
 8017a32:	3720      	adds	r7, #32
 8017a34:	46bd      	mov	sp, r7
 8017a36:	bdb0      	pop	{r4, r5, r7, pc}
 8017a38:	20004d48 	.word	0x20004d48
 8017a3c:	080214ac 	.word	0x080214ac
 8017a40:	080214e0 	.word	0x080214e0
 8017a44:	2000bca0 	.word	0x2000bca0

08017a48 <msgUnpackHeader>:

#include "../ptpd.h"

/* Unpack header message */
void msgUnpackHeader(const octet_t *buf, MsgHeader *header)
{
 8017a48:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8017a4c:	b084      	sub	sp, #16
 8017a4e:	af00      	add	r7, sp, #0
 8017a50:	6078      	str	r0, [r7, #4]
 8017a52:	6039      	str	r1, [r7, #0]
	int32_t msb;
	uint32_t lsb;

	header->transportSpecific = (*(nibble_t*)(buf + 0)) >> 4;
 8017a54:	687b      	ldr	r3, [r7, #4]
 8017a56:	781b      	ldrb	r3, [r3, #0]
 8017a58:	091b      	lsrs	r3, r3, #4
 8017a5a:	b2da      	uxtb	r2, r3
 8017a5c:	683b      	ldr	r3, [r7, #0]
 8017a5e:	701a      	strb	r2, [r3, #0]
	header->messageType = (*(enum4bit_t*)(buf + 0)) & 0x0F;
 8017a60:	687b      	ldr	r3, [r7, #4]
 8017a62:	781b      	ldrb	r3, [r3, #0]
 8017a64:	f003 030f 	and.w	r3, r3, #15
 8017a68:	b2da      	uxtb	r2, r3
 8017a6a:	683b      	ldr	r3, [r7, #0]
 8017a6c:	705a      	strb	r2, [r3, #1]
	header->versionPTP = (*(uint4bit_t*)(buf  + 1)) & 0x0F; //force reserved bit to zero if not
 8017a6e:	687b      	ldr	r3, [r7, #4]
 8017a70:	3301      	adds	r3, #1
 8017a72:	781b      	ldrb	r3, [r3, #0]
 8017a74:	f003 030f 	and.w	r3, r3, #15
 8017a78:	b2da      	uxtb	r2, r3
 8017a7a:	683b      	ldr	r3, [r7, #0]
 8017a7c:	709a      	strb	r2, [r3, #2]
	header->messageLength = flip16(*(int16_t*)(buf  + 2));
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	3302      	adds	r3, #2
 8017a82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017a86:	b29b      	uxth	r3, r3
 8017a88:	4618      	mov	r0, r3
 8017a8a:	f7f0 ffcf 	bl	8008a2c <lwip_htons>
 8017a8e:	4603      	mov	r3, r0
 8017a90:	b21a      	sxth	r2, r3
 8017a92:	683b      	ldr	r3, [r7, #0]
 8017a94:	809a      	strh	r2, [r3, #4]
	header->domainNumber = (*(uint8_t*)(buf + 4));
 8017a96:	687b      	ldr	r3, [r7, #4]
 8017a98:	791a      	ldrb	r2, [r3, #4]
 8017a9a:	683b      	ldr	r3, [r7, #0]
 8017a9c:	719a      	strb	r2, [r3, #6]
	memcpy(header->flagField, (buf + 6), FLAG_FIELD_LENGTH);
 8017a9e:	683b      	ldr	r3, [r7, #0]
 8017aa0:	3307      	adds	r3, #7
 8017aa2:	687a      	ldr	r2, [r7, #4]
 8017aa4:	3206      	adds	r2, #6
 8017aa6:	8812      	ldrh	r2, [r2, #0]
 8017aa8:	b292      	uxth	r2, r2
 8017aaa:	801a      	strh	r2, [r3, #0]
	memcpy(&msb, (buf + 8), 4);
 8017aac:	687b      	ldr	r3, [r7, #4]
 8017aae:	3308      	adds	r3, #8
 8017ab0:	681b      	ldr	r3, [r3, #0]
 8017ab2:	60fb      	str	r3, [r7, #12]
	memcpy(&lsb, (buf + 12), 4);
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	330c      	adds	r3, #12
 8017ab8:	681b      	ldr	r3, [r3, #0]
 8017aba:	60bb      	str	r3, [r7, #8]
	header->correctionfield = flip32(msb);
 8017abc:	68fb      	ldr	r3, [r7, #12]
 8017abe:	4618      	mov	r0, r3
 8017ac0:	f7f0 ffc1 	bl	8008a46 <lwip_htonl>
 8017ac4:	4603      	mov	r3, r0
 8017ac6:	f04f 0400 	mov.w	r4, #0
 8017aca:	683a      	ldr	r2, [r7, #0]
 8017acc:	e9c2 3404 	strd	r3, r4, [r2, #16]
	header->correctionfield <<= 32;
 8017ad0:	683b      	ldr	r3, [r7, #0]
 8017ad2:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 8017ad6:	f04f 0300 	mov.w	r3, #0
 8017ada:	f04f 0400 	mov.w	r4, #0
 8017ade:	000c      	movs	r4, r1
 8017ae0:	2300      	movs	r3, #0
 8017ae2:	683a      	ldr	r2, [r7, #0]
 8017ae4:	e9c2 3404 	strd	r3, r4, [r2, #16]
	header->correctionfield += flip32(lsb);
 8017ae8:	68bb      	ldr	r3, [r7, #8]
 8017aea:	4618      	mov	r0, r3
 8017aec:	f7f0 ffab 	bl	8008a46 <lwip_htonl>
 8017af0:	683b      	ldr	r3, [r7, #0]
 8017af2:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 8017af6:	4683      	mov	fp, r0
 8017af8:	f04f 0c00 	mov.w	ip, #0
 8017afc:	eb1b 0301 	adds.w	r3, fp, r1
 8017b00:	eb4c 0402 	adc.w	r4, ip, r2
 8017b04:	683a      	ldr	r2, [r7, #0]
 8017b06:	e9c2 3404 	strd	r3, r4, [r2, #16]
	memcpy(header->sourcePortIdentity.clockIdentity, (buf + 20), CLOCK_IDENTITY_LENGTH);
 8017b0a:	683b      	ldr	r3, [r7, #0]
 8017b0c:	f103 0018 	add.w	r0, r3, #24
 8017b10:	687b      	ldr	r3, [r7, #4]
 8017b12:	3314      	adds	r3, #20
 8017b14:	2208      	movs	r2, #8
 8017b16:	4619      	mov	r1, r3
 8017b18:	f001 ffbd 	bl	8019a96 <memcpy>
	header->sourcePortIdentity.portNumber = flip16(*(int16_t*)(buf  + 28));
 8017b1c:	687b      	ldr	r3, [r7, #4]
 8017b1e:	331c      	adds	r3, #28
 8017b20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017b24:	b29b      	uxth	r3, r3
 8017b26:	4618      	mov	r0, r3
 8017b28:	f7f0 ff80 	bl	8008a2c <lwip_htons>
 8017b2c:	4603      	mov	r3, r0
 8017b2e:	b21a      	sxth	r2, r3
 8017b30:	683b      	ldr	r3, [r7, #0]
 8017b32:	841a      	strh	r2, [r3, #32]
	header->sequenceId = flip16(*(int16_t*)(buf + 30));
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	331e      	adds	r3, #30
 8017b38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017b3c:	b29b      	uxth	r3, r3
 8017b3e:	4618      	mov	r0, r3
 8017b40:	f7f0 ff74 	bl	8008a2c <lwip_htons>
 8017b44:	4603      	mov	r3, r0
 8017b46:	b21a      	sxth	r2, r3
 8017b48:	683b      	ldr	r3, [r7, #0]
 8017b4a:	845a      	strh	r2, [r3, #34]	; 0x22
	header->controlField = (*(uint8_t*)(buf + 32));
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8017b52:	683b      	ldr	r3, [r7, #0]
 8017b54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	header->logMessageInterval = (*(int8_t*)(buf + 33));
 8017b58:	687b      	ldr	r3, [r7, #4]
 8017b5a:	f993 2021 	ldrsb.w	r2, [r3, #33]	; 0x21
 8017b5e:	683b      	ldr	r3, [r7, #0]
 8017b60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 8017b64:	bf00      	nop
 8017b66:	3710      	adds	r7, #16
 8017b68:	46bd      	mov	sp, r7
 8017b6a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08017b6e <msgPackHeader>:

/* Pack header message */
void msgPackHeader(const PtpClock *ptpClock, octet_t *buf)
{
 8017b6e:	b580      	push	{r7, lr}
 8017b70:	b084      	sub	sp, #16
 8017b72:	af00      	add	r7, sp, #0
 8017b74:	6078      	str	r0, [r7, #4]
 8017b76:	6039      	str	r1, [r7, #0]
	nibble_t transport = 0x80; //(spec annex D)
 8017b78:	2380      	movs	r3, #128	; 0x80
 8017b7a:	73fb      	strb	r3, [r7, #15]
	*(uint8_t*)(buf + 0) = transport;
 8017b7c:	683b      	ldr	r3, [r7, #0]
 8017b7e:	7bfa      	ldrb	r2, [r7, #15]
 8017b80:	701a      	strb	r2, [r3, #0]
	*(uint4bit_t*)(buf  + 1) = ptpClock->portDS.versionNumber;
 8017b82:	683b      	ldr	r3, [r7, #0]
 8017b84:	3301      	adds	r3, #1
 8017b86:	687a      	ldr	r2, [r7, #4]
 8017b88:	f892 2071 	ldrb.w	r2, [r2, #113]	; 0x71
 8017b8c:	701a      	strb	r2, [r3, #0]
	*(uint8_t*)(buf + 4) = ptpClock->defaultDS.domainNumber;
 8017b8e:	683b      	ldr	r3, [r7, #0]
 8017b90:	3304      	adds	r3, #4
 8017b92:	687a      	ldr	r2, [r7, #4]
 8017b94:	7c92      	ldrb	r2, [r2, #18]
 8017b96:	701a      	strb	r2, [r3, #0]
	if (ptpClock->defaultDS.twoStepFlag)
 8017b98:	687b      	ldr	r3, [r7, #4]
 8017b9a:	781b      	ldrb	r3, [r3, #0]
 8017b9c:	2b00      	cmp	r3, #0
 8017b9e:	d003      	beq.n	8017ba8 <msgPackHeader+0x3a>
	{
			*(uint8_t*)(buf + 6) = FLAG0_TWO_STEP;
 8017ba0:	683b      	ldr	r3, [r7, #0]
 8017ba2:	3306      	adds	r3, #6
 8017ba4:	2202      	movs	r2, #2
 8017ba6:	701a      	strb	r2, [r3, #0]
	}
	memset((buf + 8), 0, 8);
 8017ba8:	683b      	ldr	r3, [r7, #0]
 8017baa:	3308      	adds	r3, #8
 8017bac:	2208      	movs	r2, #8
 8017bae:	2100      	movs	r1, #0
 8017bb0:	4618      	mov	r0, r3
 8017bb2:	f001 ff7b 	bl	8019aac <memset>
	memcpy((buf + 20), ptpClock->portDS.portIdentity.clockIdentity, CLOCK_IDENTITY_LENGTH);
 8017bb6:	683b      	ldr	r3, [r7, #0]
 8017bb8:	f103 0014 	add.w	r0, r3, #20
 8017bbc:	687b      	ldr	r3, [r7, #4]
 8017bbe:	3358      	adds	r3, #88	; 0x58
 8017bc0:	2208      	movs	r2, #8
 8017bc2:	4619      	mov	r1, r3
 8017bc4:	f001 ff67 	bl	8019a96 <memcpy>
	*(int16_t*)(buf + 28) = flip16(ptpClock->portDS.portIdentity.portNumber);
 8017bc8:	687b      	ldr	r3, [r7, #4]
 8017bca:	f9b3 3060 	ldrsh.w	r3, [r3, #96]	; 0x60
 8017bce:	b29b      	uxth	r3, r3
 8017bd0:	4618      	mov	r0, r3
 8017bd2:	f7f0 ff2b 	bl	8008a2c <lwip_htons>
 8017bd6:	4603      	mov	r3, r0
 8017bd8:	461a      	mov	r2, r3
 8017bda:	683b      	ldr	r3, [r7, #0]
 8017bdc:	331c      	adds	r3, #28
 8017bde:	b212      	sxth	r2, r2
 8017be0:	801a      	strh	r2, [r3, #0]
	*(uint8_t*)(buf + 33) = 0x7F; //Default value (spec Table 24)
 8017be2:	683b      	ldr	r3, [r7, #0]
 8017be4:	3321      	adds	r3, #33	; 0x21
 8017be6:	227f      	movs	r2, #127	; 0x7f
 8017be8:	701a      	strb	r2, [r3, #0]
}
 8017bea:	bf00      	nop
 8017bec:	3710      	adds	r7, #16
 8017bee:	46bd      	mov	sp, r7
 8017bf0:	bd80      	pop	{r7, pc}

08017bf2 <msgPackAnnounce>:

/* Pack Announce message */
void msgPackAnnounce(const PtpClock *ptpClock, octet_t *buf)
{
 8017bf2:	b580      	push	{r7, lr}
 8017bf4:	b082      	sub	sp, #8
 8017bf6:	af00      	add	r7, sp, #0
 8017bf8:	6078      	str	r0, [r7, #4]
 8017bfa:	6039      	str	r1, [r7, #0]
	/* Changes in header */
	*(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; //RAZ messageType
 8017bfc:	683b      	ldr	r3, [r7, #0]
 8017bfe:	781b      	ldrb	r3, [r3, #0]
 8017c00:	f023 030f 	bic.w	r3, r3, #15
 8017c04:	b2da      	uxtb	r2, r3
 8017c06:	683b      	ldr	r3, [r7, #0]
 8017c08:	701a      	strb	r2, [r3, #0]
	*(char*)(buf + 0) = *(char*)(buf + 0) | ANNOUNCE; //Table 19
 8017c0a:	683b      	ldr	r3, [r7, #0]
 8017c0c:	781b      	ldrb	r3, [r3, #0]
 8017c0e:	f043 030b 	orr.w	r3, r3, #11
 8017c12:	b2da      	uxtb	r2, r3
 8017c14:	683b      	ldr	r3, [r7, #0]
 8017c16:	701a      	strb	r2, [r3, #0]
	*(int16_t*)(buf + 2)  = flip16(ANNOUNCE_LENGTH);
 8017c18:	2040      	movs	r0, #64	; 0x40
 8017c1a:	f7f0 ff07 	bl	8008a2c <lwip_htons>
 8017c1e:	4603      	mov	r3, r0
 8017c20:	461a      	mov	r2, r3
 8017c22:	683b      	ldr	r3, [r7, #0]
 8017c24:	3302      	adds	r3, #2
 8017c26:	b212      	sxth	r2, r2
 8017c28:	801a      	strh	r2, [r3, #0]
	*(int16_t*)(buf + 30) = flip16(ptpClock->sentAnnounceSequenceId);
 8017c2a:	687b      	ldr	r3, [r7, #4]
 8017c2c:	f9b3 3386 	ldrsh.w	r3, [r3, #902]	; 0x386
 8017c30:	b29b      	uxth	r3, r3
 8017c32:	4618      	mov	r0, r3
 8017c34:	f7f0 fefa 	bl	8008a2c <lwip_htons>
 8017c38:	4603      	mov	r3, r0
 8017c3a:	461a      	mov	r2, r3
 8017c3c:	683b      	ldr	r3, [r7, #0]
 8017c3e:	331e      	adds	r3, #30
 8017c40:	b212      	sxth	r2, r2
 8017c42:	801a      	strh	r2, [r3, #0]
	*(uint8_t*)(buf + 32) = CTRL_OTHER; /* Table 23 - controlField */
 8017c44:	683b      	ldr	r3, [r7, #0]
 8017c46:	3320      	adds	r3, #32
 8017c48:	2205      	movs	r2, #5
 8017c4a:	701a      	strb	r2, [r3, #0]
	*(int8_t*)(buf + 33) = ptpClock->portDS.logAnnounceInterval;
 8017c4c:	683b      	ldr	r3, [r7, #0]
 8017c4e:	3321      	adds	r3, #33	; 0x21
 8017c50:	687a      	ldr	r2, [r7, #4]
 8017c52:	f992 206c 	ldrsb.w	r2, [r2, #108]	; 0x6c
 8017c56:	701a      	strb	r2, [r3, #0]

	/* Announce message */
	memset((buf + 34), 0, 10); /* originTimestamp */
 8017c58:	683b      	ldr	r3, [r7, #0]
 8017c5a:	3322      	adds	r3, #34	; 0x22
 8017c5c:	220a      	movs	r2, #10
 8017c5e:	2100      	movs	r1, #0
 8017c60:	4618      	mov	r0, r3
 8017c62:	f001 ff23 	bl	8019aac <memset>
	*(int16_t*)(buf + 44) = flip16(ptpClock->timePropertiesDS.currentUtcOffset);
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 8017c6c:	b29b      	uxth	r3, r3
 8017c6e:	4618      	mov	r0, r3
 8017c70:	f7f0 fedc 	bl	8008a2c <lwip_htons>
 8017c74:	4603      	mov	r3, r0
 8017c76:	461a      	mov	r2, r3
 8017c78:	683b      	ldr	r3, [r7, #0]
 8017c7a:	332c      	adds	r3, #44	; 0x2c
 8017c7c:	b212      	sxth	r2, r2
 8017c7e:	801a      	strh	r2, [r3, #0]
	*(uint8_t*)(buf + 47) = ptpClock->parentDS.grandmasterPriority1;
 8017c80:	683b      	ldr	r3, [r7, #0]
 8017c82:	332f      	adds	r3, #47	; 0x2f
 8017c84:	687a      	ldr	r2, [r7, #4]
 8017c86:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8017c8a:	701a      	strb	r2, [r3, #0]
	*(uint8_t*)(buf + 48) = ptpClock->defaultDS.clockQuality.clockClass;
 8017c8c:	683b      	ldr	r3, [r7, #0]
 8017c8e:	3330      	adds	r3, #48	; 0x30
 8017c90:	687a      	ldr	r2, [r7, #4]
 8017c92:	7b12      	ldrb	r2, [r2, #12]
 8017c94:	701a      	strb	r2, [r3, #0]
	*(enum8bit_t*)(buf + 49) = ptpClock->defaultDS.clockQuality.clockAccuracy;
 8017c96:	683b      	ldr	r3, [r7, #0]
 8017c98:	3331      	adds	r3, #49	; 0x31
 8017c9a:	687a      	ldr	r2, [r7, #4]
 8017c9c:	7b52      	ldrb	r2, [r2, #13]
 8017c9e:	701a      	strb	r2, [r3, #0]
	*(int16_t*)(buf + 50) = flip16(ptpClock->defaultDS.clockQuality.offsetScaledLogVariance);
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8017ca6:	b29b      	uxth	r3, r3
 8017ca8:	4618      	mov	r0, r3
 8017caa:	f7f0 febf 	bl	8008a2c <lwip_htons>
 8017cae:	4603      	mov	r3, r0
 8017cb0:	461a      	mov	r2, r3
 8017cb2:	683b      	ldr	r3, [r7, #0]
 8017cb4:	3332      	adds	r3, #50	; 0x32
 8017cb6:	b212      	sxth	r2, r2
 8017cb8:	801a      	strh	r2, [r3, #0]
	*(uint8_t*)(buf + 52) = ptpClock->parentDS.grandmasterPriority2;
 8017cba:	683b      	ldr	r3, [r7, #0]
 8017cbc:	3334      	adds	r3, #52	; 0x34
 8017cbe:	687a      	ldr	r2, [r7, #4]
 8017cc0:	f892 2049 	ldrb.w	r2, [r2, #73]	; 0x49
 8017cc4:	701a      	strb	r2, [r3, #0]
	memcpy((buf + 53), ptpClock->parentDS.grandmasterIdentity, CLOCK_IDENTITY_LENGTH);
 8017cc6:	683b      	ldr	r3, [r7, #0]
 8017cc8:	f103 0035 	add.w	r0, r3, #53	; 0x35
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	333c      	adds	r3, #60	; 0x3c
 8017cd0:	2208      	movs	r2, #8
 8017cd2:	4619      	mov	r1, r3
 8017cd4:	f001 fedf 	bl	8019a96 <memcpy>
	*(int16_t*)(buf + 61) = flip16(ptpClock->currentDS.stepsRemoved);
 8017cd8:	687b      	ldr	r3, [r7, #4]
 8017cda:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8017cde:	b29b      	uxth	r3, r3
 8017ce0:	4618      	mov	r0, r3
 8017ce2:	f7f0 fea3 	bl	8008a2c <lwip_htons>
 8017ce6:	4603      	mov	r3, r0
 8017ce8:	461a      	mov	r2, r3
 8017cea:	683b      	ldr	r3, [r7, #0]
 8017cec:	333d      	adds	r3, #61	; 0x3d
 8017cee:	b212      	sxth	r2, r2
 8017cf0:	801a      	strh	r2, [r3, #0]
	*(enum8bit_t*)(buf + 63) = ptpClock->timePropertiesDS.timeSource;
 8017cf2:	683b      	ldr	r3, [r7, #0]
 8017cf4:	333f      	adds	r3, #63	; 0x3f
 8017cf6:	687a      	ldr	r2, [r7, #4]
 8017cf8:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8017cfc:	701a      	strb	r2, [r3, #0]
}
 8017cfe:	bf00      	nop
 8017d00:	3708      	adds	r7, #8
 8017d02:	46bd      	mov	sp, r7
 8017d04:	bd80      	pop	{r7, pc}

08017d06 <msgUnpackAnnounce>:

/* Unpack Announce message */
void msgUnpackAnnounce(const octet_t *buf, MsgAnnounce *announce)
{
 8017d06:	b580      	push	{r7, lr}
 8017d08:	b082      	sub	sp, #8
 8017d0a:	af00      	add	r7, sp, #0
 8017d0c:	6078      	str	r0, [r7, #4]
 8017d0e:	6039      	str	r1, [r7, #0]
	announce->originTimestamp.secondsField.msb = flip16(*(int16_t*)(buf + 34));
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	3322      	adds	r3, #34	; 0x22
 8017d14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017d18:	b29b      	uxth	r3, r3
 8017d1a:	4618      	mov	r0, r3
 8017d1c:	f7f0 fe86 	bl	8008a2c <lwip_htons>
 8017d20:	4603      	mov	r3, r0
 8017d22:	461a      	mov	r2, r3
 8017d24:	683b      	ldr	r3, [r7, #0]
 8017d26:	809a      	strh	r2, [r3, #4]
	announce->originTimestamp.secondsField.lsb = flip32(*(uint32_t*)(buf + 36));
 8017d28:	687b      	ldr	r3, [r7, #4]
 8017d2a:	3324      	adds	r3, #36	; 0x24
 8017d2c:	681b      	ldr	r3, [r3, #0]
 8017d2e:	4618      	mov	r0, r3
 8017d30:	f7f0 fe89 	bl	8008a46 <lwip_htonl>
 8017d34:	4602      	mov	r2, r0
 8017d36:	683b      	ldr	r3, [r7, #0]
 8017d38:	601a      	str	r2, [r3, #0]
	announce->originTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
 8017d3a:	687b      	ldr	r3, [r7, #4]
 8017d3c:	3328      	adds	r3, #40	; 0x28
 8017d3e:	681b      	ldr	r3, [r3, #0]
 8017d40:	4618      	mov	r0, r3
 8017d42:	f7f0 fe80 	bl	8008a46 <lwip_htonl>
 8017d46:	4602      	mov	r2, r0
 8017d48:	683b      	ldr	r3, [r7, #0]
 8017d4a:	609a      	str	r2, [r3, #8]
	announce->currentUtcOffset = flip16(*(int16_t*)(buf + 44));
 8017d4c:	687b      	ldr	r3, [r7, #4]
 8017d4e:	332c      	adds	r3, #44	; 0x2c
 8017d50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017d54:	b29b      	uxth	r3, r3
 8017d56:	4618      	mov	r0, r3
 8017d58:	f7f0 fe68 	bl	8008a2c <lwip_htons>
 8017d5c:	4603      	mov	r3, r0
 8017d5e:	b21a      	sxth	r2, r3
 8017d60:	683b      	ldr	r3, [r7, #0]
 8017d62:	819a      	strh	r2, [r3, #12]
	announce->grandmasterPriority1 = *(uint8_t*)(buf + 47);
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8017d6a:	683b      	ldr	r3, [r7, #0]
 8017d6c:	739a      	strb	r2, [r3, #14]
	announce->grandmasterClockQuality.clockClass = *(uint8_t*)(buf + 48);
 8017d6e:	687b      	ldr	r3, [r7, #4]
 8017d70:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8017d74:	683b      	ldr	r3, [r7, #0]
 8017d76:	741a      	strb	r2, [r3, #16]
	announce->grandmasterClockQuality.clockAccuracy = *(enum8bit_t*)(buf + 49);
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8017d7e:	683b      	ldr	r3, [r7, #0]
 8017d80:	745a      	strb	r2, [r3, #17]
	announce->grandmasterClockQuality.offsetScaledLogVariance = flip16(*(int16_t*)(buf  + 50));
 8017d82:	687b      	ldr	r3, [r7, #4]
 8017d84:	3332      	adds	r3, #50	; 0x32
 8017d86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017d8a:	b29b      	uxth	r3, r3
 8017d8c:	4618      	mov	r0, r3
 8017d8e:	f7f0 fe4d 	bl	8008a2c <lwip_htons>
 8017d92:	4603      	mov	r3, r0
 8017d94:	b21a      	sxth	r2, r3
 8017d96:	683b      	ldr	r3, [r7, #0]
 8017d98:	825a      	strh	r2, [r3, #18]
	announce->grandmasterPriority2 = *(uint8_t*)(buf + 52);
 8017d9a:	687b      	ldr	r3, [r7, #4]
 8017d9c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8017da0:	683b      	ldr	r3, [r7, #0]
 8017da2:	751a      	strb	r2, [r3, #20]
	memcpy(announce->grandmasterIdentity, (buf + 53), CLOCK_IDENTITY_LENGTH);
 8017da4:	683b      	ldr	r3, [r7, #0]
 8017da6:	f103 0015 	add.w	r0, r3, #21
 8017daa:	687b      	ldr	r3, [r7, #4]
 8017dac:	3335      	adds	r3, #53	; 0x35
 8017dae:	2208      	movs	r2, #8
 8017db0:	4619      	mov	r1, r3
 8017db2:	f001 fe70 	bl	8019a96 <memcpy>
	announce->stepsRemoved = flip16(*(int16_t*)(buf + 61));
 8017db6:	687b      	ldr	r3, [r7, #4]
 8017db8:	333d      	adds	r3, #61	; 0x3d
 8017dba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017dbe:	b29b      	uxth	r3, r3
 8017dc0:	4618      	mov	r0, r3
 8017dc2:	f7f0 fe33 	bl	8008a2c <lwip_htons>
 8017dc6:	4603      	mov	r3, r0
 8017dc8:	b21a      	sxth	r2, r3
 8017dca:	683b      	ldr	r3, [r7, #0]
 8017dcc:	83da      	strh	r2, [r3, #30]
	announce->timeSource = *(enum8bit_t*)(buf + 63);
 8017dce:	687b      	ldr	r3, [r7, #4]
 8017dd0:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8017dd4:	683b      	ldr	r3, [r7, #0]
 8017dd6:	f883 2020 	strb.w	r2, [r3, #32]
}
 8017dda:	bf00      	nop
 8017ddc:	3708      	adds	r7, #8
 8017dde:	46bd      	mov	sp, r7
 8017de0:	bd80      	pop	{r7, pc}

08017de2 <msgPackSync>:

/* Pack SYNC message */
void msgPackSync(const PtpClock *ptpClock, octet_t *buf, const Timestamp *originTimestamp)
{
 8017de2:	b590      	push	{r4, r7, lr}
 8017de4:	b085      	sub	sp, #20
 8017de6:	af00      	add	r7, sp, #0
 8017de8:	60f8      	str	r0, [r7, #12]
 8017dea:	60b9      	str	r1, [r7, #8]
 8017dec:	607a      	str	r2, [r7, #4]
	/* Changes in header */
	*(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; //RAZ messageType
 8017dee:	68bb      	ldr	r3, [r7, #8]
 8017df0:	781b      	ldrb	r3, [r3, #0]
 8017df2:	f023 030f 	bic.w	r3, r3, #15
 8017df6:	b2da      	uxtb	r2, r3
 8017df8:	68bb      	ldr	r3, [r7, #8]
 8017dfa:	701a      	strb	r2, [r3, #0]
	*(char*)(buf + 0) = *(char*)(buf + 0) | SYNC; //Table 19
 8017dfc:	68bb      	ldr	r3, [r7, #8]
 8017dfe:	781a      	ldrb	r2, [r3, #0]
 8017e00:	68bb      	ldr	r3, [r7, #8]
 8017e02:	701a      	strb	r2, [r3, #0]
	*(int16_t*)(buf + 2)  = flip16(SYNC_LENGTH);
 8017e04:	202c      	movs	r0, #44	; 0x2c
 8017e06:	f7f0 fe11 	bl	8008a2c <lwip_htons>
 8017e0a:	4603      	mov	r3, r0
 8017e0c:	461a      	mov	r2, r3
 8017e0e:	68bb      	ldr	r3, [r7, #8]
 8017e10:	3302      	adds	r3, #2
 8017e12:	b212      	sxth	r2, r2
 8017e14:	801a      	strh	r2, [r3, #0]
	*(int16_t*)(buf + 30) = flip16(ptpClock->sentSyncSequenceId);
 8017e16:	68fb      	ldr	r3, [r7, #12]
 8017e18:	f9b3 3384 	ldrsh.w	r3, [r3, #900]	; 0x384
 8017e1c:	b29b      	uxth	r3, r3
 8017e1e:	4618      	mov	r0, r3
 8017e20:	f7f0 fe04 	bl	8008a2c <lwip_htons>
 8017e24:	4603      	mov	r3, r0
 8017e26:	461a      	mov	r2, r3
 8017e28:	68bb      	ldr	r3, [r7, #8]
 8017e2a:	331e      	adds	r3, #30
 8017e2c:	b212      	sxth	r2, r2
 8017e2e:	801a      	strh	r2, [r3, #0]
	*(uint8_t*)(buf + 32) = CTRL_SYNC; //Table 23
 8017e30:	68bb      	ldr	r3, [r7, #8]
 8017e32:	3320      	adds	r3, #32
 8017e34:	2200      	movs	r2, #0
 8017e36:	701a      	strb	r2, [r3, #0]
	*(int8_t*)(buf + 33) = ptpClock->portDS.logSyncInterval;
 8017e38:	68bb      	ldr	r3, [r7, #8]
 8017e3a:	3321      	adds	r3, #33	; 0x21
 8017e3c:	68fa      	ldr	r2, [r7, #12]
 8017e3e:	f992 206e 	ldrsb.w	r2, [r2, #110]	; 0x6e
 8017e42:	701a      	strb	r2, [r3, #0]
	memset((buf + 8), 0, 8); /* correction field */
 8017e44:	68bb      	ldr	r3, [r7, #8]
 8017e46:	3308      	adds	r3, #8
 8017e48:	2208      	movs	r2, #8
 8017e4a:	2100      	movs	r1, #0
 8017e4c:	4618      	mov	r0, r3
 8017e4e:	f001 fe2d 	bl	8019aac <memset>

	/* Sync message */
	*(int16_t*)(buf + 34) = flip16(originTimestamp->secondsField.msb);
 8017e52:	687b      	ldr	r3, [r7, #4]
 8017e54:	889b      	ldrh	r3, [r3, #4]
 8017e56:	4618      	mov	r0, r3
 8017e58:	f7f0 fde8 	bl	8008a2c <lwip_htons>
 8017e5c:	4603      	mov	r3, r0
 8017e5e:	461a      	mov	r2, r3
 8017e60:	68bb      	ldr	r3, [r7, #8]
 8017e62:	3322      	adds	r3, #34	; 0x22
 8017e64:	b212      	sxth	r2, r2
 8017e66:	801a      	strh	r2, [r3, #0]
	*(uint32_t*)(buf + 36) = flip32(originTimestamp->secondsField.lsb);
 8017e68:	687b      	ldr	r3, [r7, #4]
 8017e6a:	681a      	ldr	r2, [r3, #0]
 8017e6c:	68bb      	ldr	r3, [r7, #8]
 8017e6e:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8017e72:	4610      	mov	r0, r2
 8017e74:	f7f0 fde7 	bl	8008a46 <lwip_htonl>
 8017e78:	4603      	mov	r3, r0
 8017e7a:	6023      	str	r3, [r4, #0]
	*(uint32_t*)(buf + 40) = flip32(originTimestamp->nanosecondsField);
 8017e7c:	687b      	ldr	r3, [r7, #4]
 8017e7e:	689a      	ldr	r2, [r3, #8]
 8017e80:	68bb      	ldr	r3, [r7, #8]
 8017e82:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8017e86:	4610      	mov	r0, r2
 8017e88:	f7f0 fddd 	bl	8008a46 <lwip_htonl>
 8017e8c:	4603      	mov	r3, r0
 8017e8e:	6023      	str	r3, [r4, #0]
}
 8017e90:	bf00      	nop
 8017e92:	3714      	adds	r7, #20
 8017e94:	46bd      	mov	sp, r7
 8017e96:	bd90      	pop	{r4, r7, pc}

08017e98 <msgUnpackSync>:

/* Unpack Sync message */
void msgUnpackSync(const octet_t *buf, MsgSync *sync)
{
 8017e98:	b580      	push	{r7, lr}
 8017e9a:	b082      	sub	sp, #8
 8017e9c:	af00      	add	r7, sp, #0
 8017e9e:	6078      	str	r0, [r7, #4]
 8017ea0:	6039      	str	r1, [r7, #0]
	sync->originTimestamp.secondsField.msb = flip16(*(int16_t*)(buf + 34));
 8017ea2:	687b      	ldr	r3, [r7, #4]
 8017ea4:	3322      	adds	r3, #34	; 0x22
 8017ea6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017eaa:	b29b      	uxth	r3, r3
 8017eac:	4618      	mov	r0, r3
 8017eae:	f7f0 fdbd 	bl	8008a2c <lwip_htons>
 8017eb2:	4603      	mov	r3, r0
 8017eb4:	461a      	mov	r2, r3
 8017eb6:	683b      	ldr	r3, [r7, #0]
 8017eb8:	809a      	strh	r2, [r3, #4]
	sync->originTimestamp.secondsField.lsb = flip32(*(uint32_t*)(buf + 36));
 8017eba:	687b      	ldr	r3, [r7, #4]
 8017ebc:	3324      	adds	r3, #36	; 0x24
 8017ebe:	681b      	ldr	r3, [r3, #0]
 8017ec0:	4618      	mov	r0, r3
 8017ec2:	f7f0 fdc0 	bl	8008a46 <lwip_htonl>
 8017ec6:	4602      	mov	r2, r0
 8017ec8:	683b      	ldr	r3, [r7, #0]
 8017eca:	601a      	str	r2, [r3, #0]
	sync->originTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
 8017ecc:	687b      	ldr	r3, [r7, #4]
 8017ece:	3328      	adds	r3, #40	; 0x28
 8017ed0:	681b      	ldr	r3, [r3, #0]
 8017ed2:	4618      	mov	r0, r3
 8017ed4:	f7f0 fdb7 	bl	8008a46 <lwip_htonl>
 8017ed8:	4602      	mov	r2, r0
 8017eda:	683b      	ldr	r3, [r7, #0]
 8017edc:	609a      	str	r2, [r3, #8]
}
 8017ede:	bf00      	nop
 8017ee0:	3708      	adds	r7, #8
 8017ee2:	46bd      	mov	sp, r7
 8017ee4:	bd80      	pop	{r7, pc}

08017ee6 <msgPackDelayReq>:

/* Pack delayReq message */
void msgPackDelayReq(const PtpClock *ptpClock, octet_t *buf, const Timestamp *originTimestamp)
{
 8017ee6:	b590      	push	{r4, r7, lr}
 8017ee8:	b085      	sub	sp, #20
 8017eea:	af00      	add	r7, sp, #0
 8017eec:	60f8      	str	r0, [r7, #12]
 8017eee:	60b9      	str	r1, [r7, #8]
 8017ef0:	607a      	str	r2, [r7, #4]
	/* Changes in header */
	*(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; //RAZ messageType
 8017ef2:	68bb      	ldr	r3, [r7, #8]
 8017ef4:	781b      	ldrb	r3, [r3, #0]
 8017ef6:	f023 030f 	bic.w	r3, r3, #15
 8017efa:	b2da      	uxtb	r2, r3
 8017efc:	68bb      	ldr	r3, [r7, #8]
 8017efe:	701a      	strb	r2, [r3, #0]
	*(char*)(buf + 0) = *(char*)(buf + 0) | DELAY_REQ; //Table 19
 8017f00:	68bb      	ldr	r3, [r7, #8]
 8017f02:	781b      	ldrb	r3, [r3, #0]
 8017f04:	f043 0301 	orr.w	r3, r3, #1
 8017f08:	b2da      	uxtb	r2, r3
 8017f0a:	68bb      	ldr	r3, [r7, #8]
 8017f0c:	701a      	strb	r2, [r3, #0]
	*(int16_t*)(buf + 2)  = flip16(DELAY_REQ_LENGTH);
 8017f0e:	202c      	movs	r0, #44	; 0x2c
 8017f10:	f7f0 fd8c 	bl	8008a2c <lwip_htons>
 8017f14:	4603      	mov	r3, r0
 8017f16:	461a      	mov	r2, r3
 8017f18:	68bb      	ldr	r3, [r7, #8]
 8017f1a:	3302      	adds	r3, #2
 8017f1c:	b212      	sxth	r2, r2
 8017f1e:	801a      	strh	r2, [r3, #0]
	*(int16_t*)(buf + 30) = flip16(ptpClock->sentDelayReqSequenceId);
 8017f20:	68fb      	ldr	r3, [r7, #12]
 8017f22:	f9b3 3382 	ldrsh.w	r3, [r3, #898]	; 0x382
 8017f26:	b29b      	uxth	r3, r3
 8017f28:	4618      	mov	r0, r3
 8017f2a:	f7f0 fd7f 	bl	8008a2c <lwip_htons>
 8017f2e:	4603      	mov	r3, r0
 8017f30:	461a      	mov	r2, r3
 8017f32:	68bb      	ldr	r3, [r7, #8]
 8017f34:	331e      	adds	r3, #30
 8017f36:	b212      	sxth	r2, r2
 8017f38:	801a      	strh	r2, [r3, #0]
	*(uint8_t*)(buf + 32) = CTRL_DELAY_REQ; //Table 23
 8017f3a:	68bb      	ldr	r3, [r7, #8]
 8017f3c:	3320      	adds	r3, #32
 8017f3e:	2201      	movs	r2, #1
 8017f40:	701a      	strb	r2, [r3, #0]
	*(int8_t*)(buf + 33) = 0x7F; //Table 24
 8017f42:	68bb      	ldr	r3, [r7, #8]
 8017f44:	3321      	adds	r3, #33	; 0x21
 8017f46:	227f      	movs	r2, #127	; 0x7f
 8017f48:	701a      	strb	r2, [r3, #0]
	memset((buf + 8), 0, 8);
 8017f4a:	68bb      	ldr	r3, [r7, #8]
 8017f4c:	3308      	adds	r3, #8
 8017f4e:	2208      	movs	r2, #8
 8017f50:	2100      	movs	r1, #0
 8017f52:	4618      	mov	r0, r3
 8017f54:	f001 fdaa 	bl	8019aac <memset>

	/* delay_req message */
	*(int16_t*)(buf + 34) = flip16(originTimestamp->secondsField.msb);
 8017f58:	687b      	ldr	r3, [r7, #4]
 8017f5a:	889b      	ldrh	r3, [r3, #4]
 8017f5c:	4618      	mov	r0, r3
 8017f5e:	f7f0 fd65 	bl	8008a2c <lwip_htons>
 8017f62:	4603      	mov	r3, r0
 8017f64:	461a      	mov	r2, r3
 8017f66:	68bb      	ldr	r3, [r7, #8]
 8017f68:	3322      	adds	r3, #34	; 0x22
 8017f6a:	b212      	sxth	r2, r2
 8017f6c:	801a      	strh	r2, [r3, #0]
	*(uint32_t*)(buf + 36) = flip32(originTimestamp->secondsField.lsb);
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	681a      	ldr	r2, [r3, #0]
 8017f72:	68bb      	ldr	r3, [r7, #8]
 8017f74:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8017f78:	4610      	mov	r0, r2
 8017f7a:	f7f0 fd64 	bl	8008a46 <lwip_htonl>
 8017f7e:	4603      	mov	r3, r0
 8017f80:	6023      	str	r3, [r4, #0]
	*(uint32_t*)(buf + 40) = flip32(originTimestamp->nanosecondsField);
 8017f82:	687b      	ldr	r3, [r7, #4]
 8017f84:	689a      	ldr	r2, [r3, #8]
 8017f86:	68bb      	ldr	r3, [r7, #8]
 8017f88:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8017f8c:	4610      	mov	r0, r2
 8017f8e:	f7f0 fd5a 	bl	8008a46 <lwip_htonl>
 8017f92:	4603      	mov	r3, r0
 8017f94:	6023      	str	r3, [r4, #0]
}
 8017f96:	bf00      	nop
 8017f98:	3714      	adds	r7, #20
 8017f9a:	46bd      	mov	sp, r7
 8017f9c:	bd90      	pop	{r4, r7, pc}

08017f9e <msgPackFollowUp>:
	delayreq->originTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
}

/* Pack Follow_up message */
void msgPackFollowUp(const PtpClock *ptpClock, octet_t*buf, const Timestamp *preciseOriginTimestamp)
{
 8017f9e:	b590      	push	{r4, r7, lr}
 8017fa0:	b085      	sub	sp, #20
 8017fa2:	af00      	add	r7, sp, #0
 8017fa4:	60f8      	str	r0, [r7, #12]
 8017fa6:	60b9      	str	r1, [r7, #8]
 8017fa8:	607a      	str	r2, [r7, #4]
	/* Changes in header */
	*(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; //RAZ messageType
 8017faa:	68bb      	ldr	r3, [r7, #8]
 8017fac:	781b      	ldrb	r3, [r3, #0]
 8017fae:	f023 030f 	bic.w	r3, r3, #15
 8017fb2:	b2da      	uxtb	r2, r3
 8017fb4:	68bb      	ldr	r3, [r7, #8]
 8017fb6:	701a      	strb	r2, [r3, #0]
	*(char*)(buf + 0) = *(char*)(buf + 0) | FOLLOW_UP; //Table 19
 8017fb8:	68bb      	ldr	r3, [r7, #8]
 8017fba:	781b      	ldrb	r3, [r3, #0]
 8017fbc:	f043 0308 	orr.w	r3, r3, #8
 8017fc0:	b2da      	uxtb	r2, r3
 8017fc2:	68bb      	ldr	r3, [r7, #8]
 8017fc4:	701a      	strb	r2, [r3, #0]
	*(int16_t*)(buf + 2)  = flip16(FOLLOW_UP_LENGTH);
 8017fc6:	202c      	movs	r0, #44	; 0x2c
 8017fc8:	f7f0 fd30 	bl	8008a2c <lwip_htons>
 8017fcc:	4603      	mov	r3, r0
 8017fce:	461a      	mov	r2, r3
 8017fd0:	68bb      	ldr	r3, [r7, #8]
 8017fd2:	3302      	adds	r3, #2
 8017fd4:	b212      	sxth	r2, r2
 8017fd6:	801a      	strh	r2, [r3, #0]
	*(int16_t*)(buf + 30) = flip16(ptpClock->sentSyncSequenceId - 1);//sentSyncSequenceId has already been  incremented in issueSync
 8017fd8:	68fb      	ldr	r3, [r7, #12]
 8017fda:	f9b3 3384 	ldrsh.w	r3, [r3, #900]	; 0x384
 8017fde:	b29b      	uxth	r3, r3
 8017fe0:	3b01      	subs	r3, #1
 8017fe2:	b29b      	uxth	r3, r3
 8017fe4:	4618      	mov	r0, r3
 8017fe6:	f7f0 fd21 	bl	8008a2c <lwip_htons>
 8017fea:	4603      	mov	r3, r0
 8017fec:	461a      	mov	r2, r3
 8017fee:	68bb      	ldr	r3, [r7, #8]
 8017ff0:	331e      	adds	r3, #30
 8017ff2:	b212      	sxth	r2, r2
 8017ff4:	801a      	strh	r2, [r3, #0]
	*(uint8_t*)(buf + 32) = CTRL_FOLLOW_UP; //Table 23
 8017ff6:	68bb      	ldr	r3, [r7, #8]
 8017ff8:	3320      	adds	r3, #32
 8017ffa:	2202      	movs	r2, #2
 8017ffc:	701a      	strb	r2, [r3, #0]
	*(int8_t*)(buf + 33) = ptpClock->portDS.logSyncInterval;
 8017ffe:	68bb      	ldr	r3, [r7, #8]
 8018000:	3321      	adds	r3, #33	; 0x21
 8018002:	68fa      	ldr	r2, [r7, #12]
 8018004:	f992 206e 	ldrsb.w	r2, [r2, #110]	; 0x6e
 8018008:	701a      	strb	r2, [r3, #0]

	/* Follow_up message */
	*(int16_t*)(buf + 34) = flip16(preciseOriginTimestamp->secondsField.msb);
 801800a:	687b      	ldr	r3, [r7, #4]
 801800c:	889b      	ldrh	r3, [r3, #4]
 801800e:	4618      	mov	r0, r3
 8018010:	f7f0 fd0c 	bl	8008a2c <lwip_htons>
 8018014:	4603      	mov	r3, r0
 8018016:	461a      	mov	r2, r3
 8018018:	68bb      	ldr	r3, [r7, #8]
 801801a:	3322      	adds	r3, #34	; 0x22
 801801c:	b212      	sxth	r2, r2
 801801e:	801a      	strh	r2, [r3, #0]
	*(uint32_t*)(buf + 36) = flip32(preciseOriginTimestamp->secondsField.lsb);
 8018020:	687b      	ldr	r3, [r7, #4]
 8018022:	681a      	ldr	r2, [r3, #0]
 8018024:	68bb      	ldr	r3, [r7, #8]
 8018026:	f103 0424 	add.w	r4, r3, #36	; 0x24
 801802a:	4610      	mov	r0, r2
 801802c:	f7f0 fd0b 	bl	8008a46 <lwip_htonl>
 8018030:	4603      	mov	r3, r0
 8018032:	6023      	str	r3, [r4, #0]
	*(uint32_t*)(buf + 40) = flip32(preciseOriginTimestamp->nanosecondsField);
 8018034:	687b      	ldr	r3, [r7, #4]
 8018036:	689a      	ldr	r2, [r3, #8]
 8018038:	68bb      	ldr	r3, [r7, #8]
 801803a:	f103 0428 	add.w	r4, r3, #40	; 0x28
 801803e:	4610      	mov	r0, r2
 8018040:	f7f0 fd01 	bl	8008a46 <lwip_htonl>
 8018044:	4603      	mov	r3, r0
 8018046:	6023      	str	r3, [r4, #0]
}
 8018048:	bf00      	nop
 801804a:	3714      	adds	r7, #20
 801804c:	46bd      	mov	sp, r7
 801804e:	bd90      	pop	{r4, r7, pc}

08018050 <msgUnpackFollowUp>:

/* Unpack Follow_up message */
void msgUnpackFollowUp(const octet_t *buf, MsgFollowUp *follow)
{
 8018050:	b580      	push	{r7, lr}
 8018052:	b082      	sub	sp, #8
 8018054:	af00      	add	r7, sp, #0
 8018056:	6078      	str	r0, [r7, #4]
 8018058:	6039      	str	r1, [r7, #0]
	follow->preciseOriginTimestamp.secondsField.msb = flip16(*(int16_t*)(buf  + 34));
 801805a:	687b      	ldr	r3, [r7, #4]
 801805c:	3322      	adds	r3, #34	; 0x22
 801805e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018062:	b29b      	uxth	r3, r3
 8018064:	4618      	mov	r0, r3
 8018066:	f7f0 fce1 	bl	8008a2c <lwip_htons>
 801806a:	4603      	mov	r3, r0
 801806c:	461a      	mov	r2, r3
 801806e:	683b      	ldr	r3, [r7, #0]
 8018070:	809a      	strh	r2, [r3, #4]
	follow->preciseOriginTimestamp.secondsField.lsb = flip32(*(uint32_t*)(buf + 36));
 8018072:	687b      	ldr	r3, [r7, #4]
 8018074:	3324      	adds	r3, #36	; 0x24
 8018076:	681b      	ldr	r3, [r3, #0]
 8018078:	4618      	mov	r0, r3
 801807a:	f7f0 fce4 	bl	8008a46 <lwip_htonl>
 801807e:	4602      	mov	r2, r0
 8018080:	683b      	ldr	r3, [r7, #0]
 8018082:	601a      	str	r2, [r3, #0]
	follow->preciseOriginTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
 8018084:	687b      	ldr	r3, [r7, #4]
 8018086:	3328      	adds	r3, #40	; 0x28
 8018088:	681b      	ldr	r3, [r3, #0]
 801808a:	4618      	mov	r0, r3
 801808c:	f7f0 fcdb 	bl	8008a46 <lwip_htonl>
 8018090:	4602      	mov	r2, r0
 8018092:	683b      	ldr	r3, [r7, #0]
 8018094:	609a      	str	r2, [r3, #8]
}
 8018096:	bf00      	nop
 8018098:	3708      	adds	r7, #8
 801809a:	46bd      	mov	sp, r7
 801809c:	bd80      	pop	{r7, pc}

0801809e <msgPackDelayResp>:

/* Pack delayResp message */
void msgPackDelayResp(const PtpClock *ptpClock, octet_t *buf, const MsgHeader *header, const Timestamp *receiveTimestamp)
{
 801809e:	b590      	push	{r4, r7, lr}
 80180a0:	b085      	sub	sp, #20
 80180a2:	af00      	add	r7, sp, #0
 80180a4:	60f8      	str	r0, [r7, #12]
 80180a6:	60b9      	str	r1, [r7, #8]
 80180a8:	607a      	str	r2, [r7, #4]
 80180aa:	603b      	str	r3, [r7, #0]
	/* Changes in header */
	*(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; //RAZ messageType
 80180ac:	68bb      	ldr	r3, [r7, #8]
 80180ae:	781b      	ldrb	r3, [r3, #0]
 80180b0:	f023 030f 	bic.w	r3, r3, #15
 80180b4:	b2da      	uxtb	r2, r3
 80180b6:	68bb      	ldr	r3, [r7, #8]
 80180b8:	701a      	strb	r2, [r3, #0]
	*(char*)(buf + 0) = *(char*)(buf + 0) | DELAY_RESP; //Table 19
 80180ba:	68bb      	ldr	r3, [r7, #8]
 80180bc:	781b      	ldrb	r3, [r3, #0]
 80180be:	f043 0309 	orr.w	r3, r3, #9
 80180c2:	b2da      	uxtb	r2, r3
 80180c4:	68bb      	ldr	r3, [r7, #8]
 80180c6:	701a      	strb	r2, [r3, #0]
	*(int16_t*)(buf + 2)  = flip16(DELAY_RESP_LENGTH);
 80180c8:	2036      	movs	r0, #54	; 0x36
 80180ca:	f7f0 fcaf 	bl	8008a2c <lwip_htons>
 80180ce:	4603      	mov	r3, r0
 80180d0:	461a      	mov	r2, r3
 80180d2:	68bb      	ldr	r3, [r7, #8]
 80180d4:	3302      	adds	r3, #2
 80180d6:	b212      	sxth	r2, r2
 80180d8:	801a      	strh	r2, [r3, #0]
	/* *(uint8_t*)(buf+4) = header->domainNumber; */ /* TODO: Why? */
	memset((buf + 8), 0, 8);
 80180da:	68bb      	ldr	r3, [r7, #8]
 80180dc:	3308      	adds	r3, #8
 80180de:	2208      	movs	r2, #8
 80180e0:	2100      	movs	r1, #0
 80180e2:	4618      	mov	r0, r3
 80180e4:	f001 fce2 	bl	8019aac <memset>

	/* Copy correctionField of  delayReqMessage */
	*(int32_t*)(buf + 8) = flip32(header->correctionfield >> 32);
 80180e8:	687b      	ldr	r3, [r7, #4]
 80180ea:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 80180ee:	f04f 0300 	mov.w	r3, #0
 80180f2:	f04f 0400 	mov.w	r4, #0
 80180f6:	0013      	movs	r3, r2
 80180f8:	17d4      	asrs	r4, r2, #31
 80180fa:	4618      	mov	r0, r3
 80180fc:	f7f0 fca3 	bl	8008a46 <lwip_htonl>
 8018100:	4602      	mov	r2, r0
 8018102:	68bb      	ldr	r3, [r7, #8]
 8018104:	3308      	adds	r3, #8
 8018106:	601a      	str	r2, [r3, #0]
	*(int32_t*)(buf + 12) = flip32((int32_t)header->correctionfield);
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	f103 0410 	add.w	r4, r3, #16
 801810e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8018112:	4618      	mov	r0, r3
 8018114:	f7f0 fc97 	bl	8008a46 <lwip_htonl>
 8018118:	4602      	mov	r2, r0
 801811a:	68bb      	ldr	r3, [r7, #8]
 801811c:	330c      	adds	r3, #12
 801811e:	601a      	str	r2, [r3, #0]
	*(int16_t*)(buf + 30) = flip16(header->sequenceId);
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8018126:	b29b      	uxth	r3, r3
 8018128:	4618      	mov	r0, r3
 801812a:	f7f0 fc7f 	bl	8008a2c <lwip_htons>
 801812e:	4603      	mov	r3, r0
 8018130:	461a      	mov	r2, r3
 8018132:	68bb      	ldr	r3, [r7, #8]
 8018134:	331e      	adds	r3, #30
 8018136:	b212      	sxth	r2, r2
 8018138:	801a      	strh	r2, [r3, #0]
	*(uint8_t*)(buf + 32) = CTRL_DELAY_RESP; //Table 23
 801813a:	68bb      	ldr	r3, [r7, #8]
 801813c:	3320      	adds	r3, #32
 801813e:	2203      	movs	r2, #3
 8018140:	701a      	strb	r2, [r3, #0]
	*(int8_t*)(buf + 33) = ptpClock->portDS.logMinDelayReqInterval; //Table 24
 8018142:	68bb      	ldr	r3, [r7, #8]
 8018144:	3321      	adds	r3, #33	; 0x21
 8018146:	68fa      	ldr	r2, [r7, #12]
 8018148:	f992 2063 	ldrsb.w	r2, [r2, #99]	; 0x63
 801814c:	701a      	strb	r2, [r3, #0]

	/* delay_resp message */
	*(int16_t*)(buf + 34) = flip16(receiveTimestamp->secondsField.msb);
 801814e:	683b      	ldr	r3, [r7, #0]
 8018150:	889b      	ldrh	r3, [r3, #4]
 8018152:	4618      	mov	r0, r3
 8018154:	f7f0 fc6a 	bl	8008a2c <lwip_htons>
 8018158:	4603      	mov	r3, r0
 801815a:	461a      	mov	r2, r3
 801815c:	68bb      	ldr	r3, [r7, #8]
 801815e:	3322      	adds	r3, #34	; 0x22
 8018160:	b212      	sxth	r2, r2
 8018162:	801a      	strh	r2, [r3, #0]
	*(uint32_t*)(buf + 36) = flip32(receiveTimestamp->secondsField.lsb);
 8018164:	683b      	ldr	r3, [r7, #0]
 8018166:	681a      	ldr	r2, [r3, #0]
 8018168:	68bb      	ldr	r3, [r7, #8]
 801816a:	f103 0424 	add.w	r4, r3, #36	; 0x24
 801816e:	4610      	mov	r0, r2
 8018170:	f7f0 fc69 	bl	8008a46 <lwip_htonl>
 8018174:	4603      	mov	r3, r0
 8018176:	6023      	str	r3, [r4, #0]
	*(uint32_t*)(buf + 40) = flip32(receiveTimestamp->nanosecondsField);
 8018178:	683b      	ldr	r3, [r7, #0]
 801817a:	689a      	ldr	r2, [r3, #8]
 801817c:	68bb      	ldr	r3, [r7, #8]
 801817e:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8018182:	4610      	mov	r0, r2
 8018184:	f7f0 fc5f 	bl	8008a46 <lwip_htonl>
 8018188:	4603      	mov	r3, r0
 801818a:	6023      	str	r3, [r4, #0]
	memcpy((buf + 44), header->sourcePortIdentity.clockIdentity, CLOCK_IDENTITY_LENGTH);
 801818c:	68bb      	ldr	r3, [r7, #8]
 801818e:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8018192:	687b      	ldr	r3, [r7, #4]
 8018194:	3318      	adds	r3, #24
 8018196:	2208      	movs	r2, #8
 8018198:	4619      	mov	r1, r3
 801819a:	f001 fc7c 	bl	8019a96 <memcpy>
	*(int16_t*)(buf + 52) = flip16(header->sourcePortIdentity.portNumber);
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80181a4:	b29b      	uxth	r3, r3
 80181a6:	4618      	mov	r0, r3
 80181a8:	f7f0 fc40 	bl	8008a2c <lwip_htons>
 80181ac:	4603      	mov	r3, r0
 80181ae:	461a      	mov	r2, r3
 80181b0:	68bb      	ldr	r3, [r7, #8]
 80181b2:	3334      	adds	r3, #52	; 0x34
 80181b4:	b212      	sxth	r2, r2
 80181b6:	801a      	strh	r2, [r3, #0]
}
 80181b8:	bf00      	nop
 80181ba:	3714      	adds	r7, #20
 80181bc:	46bd      	mov	sp, r7
 80181be:	bd90      	pop	{r4, r7, pc}

080181c0 <msgUnpackDelayResp>:

/* Unpack delayResp message */
void msgUnpackDelayResp(const octet_t *buf, MsgDelayResp *resp)
{
 80181c0:	b580      	push	{r7, lr}
 80181c2:	b082      	sub	sp, #8
 80181c4:	af00      	add	r7, sp, #0
 80181c6:	6078      	str	r0, [r7, #4]
 80181c8:	6039      	str	r1, [r7, #0]
	resp->receiveTimestamp.secondsField.msb = flip16(*(int16_t*)(buf  + 34));
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	3322      	adds	r3, #34	; 0x22
 80181ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80181d2:	b29b      	uxth	r3, r3
 80181d4:	4618      	mov	r0, r3
 80181d6:	f7f0 fc29 	bl	8008a2c <lwip_htons>
 80181da:	4603      	mov	r3, r0
 80181dc:	461a      	mov	r2, r3
 80181de:	683b      	ldr	r3, [r7, #0]
 80181e0:	809a      	strh	r2, [r3, #4]
	resp->receiveTimestamp.secondsField.lsb = flip32(*(uint32_t*)(buf + 36));
 80181e2:	687b      	ldr	r3, [r7, #4]
 80181e4:	3324      	adds	r3, #36	; 0x24
 80181e6:	681b      	ldr	r3, [r3, #0]
 80181e8:	4618      	mov	r0, r3
 80181ea:	f7f0 fc2c 	bl	8008a46 <lwip_htonl>
 80181ee:	4602      	mov	r2, r0
 80181f0:	683b      	ldr	r3, [r7, #0]
 80181f2:	601a      	str	r2, [r3, #0]
	resp->receiveTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
 80181f4:	687b      	ldr	r3, [r7, #4]
 80181f6:	3328      	adds	r3, #40	; 0x28
 80181f8:	681b      	ldr	r3, [r3, #0]
 80181fa:	4618      	mov	r0, r3
 80181fc:	f7f0 fc23 	bl	8008a46 <lwip_htonl>
 8018200:	4602      	mov	r2, r0
 8018202:	683b      	ldr	r3, [r7, #0]
 8018204:	609a      	str	r2, [r3, #8]
	memcpy(resp->requestingPortIdentity.clockIdentity, (buf + 44), CLOCK_IDENTITY_LENGTH);
 8018206:	683b      	ldr	r3, [r7, #0]
 8018208:	f103 000c 	add.w	r0, r3, #12
 801820c:	687b      	ldr	r3, [r7, #4]
 801820e:	332c      	adds	r3, #44	; 0x2c
 8018210:	2208      	movs	r2, #8
 8018212:	4619      	mov	r1, r3
 8018214:	f001 fc3f 	bl	8019a96 <memcpy>
	resp->requestingPortIdentity.portNumber = flip16(*(int16_t*)(buf  + 52));
 8018218:	687b      	ldr	r3, [r7, #4]
 801821a:	3334      	adds	r3, #52	; 0x34
 801821c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018220:	b29b      	uxth	r3, r3
 8018222:	4618      	mov	r0, r3
 8018224:	f7f0 fc02 	bl	8008a2c <lwip_htons>
 8018228:	4603      	mov	r3, r0
 801822a:	b21a      	sxth	r2, r3
 801822c:	683b      	ldr	r3, [r7, #0]
 801822e:	829a      	strh	r2, [r3, #20]
}
 8018230:	bf00      	nop
 8018232:	3708      	adds	r7, #8
 8018234:	46bd      	mov	sp, r7
 8018236:	bd80      	pop	{r7, pc}

08018238 <msgPackPDelayReq>:

/* Pack PdelayReq message */
void msgPackPDelayReq(const PtpClock *ptpClock, octet_t *buf, const Timestamp *originTimestamp)
{
 8018238:	b590      	push	{r4, r7, lr}
 801823a:	b085      	sub	sp, #20
 801823c:	af00      	add	r7, sp, #0
 801823e:	60f8      	str	r0, [r7, #12]
 8018240:	60b9      	str	r1, [r7, #8]
 8018242:	607a      	str	r2, [r7, #4]
	/* Changes in header */
	*(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; //RAZ messageType
 8018244:	68bb      	ldr	r3, [r7, #8]
 8018246:	781b      	ldrb	r3, [r3, #0]
 8018248:	f023 030f 	bic.w	r3, r3, #15
 801824c:	b2da      	uxtb	r2, r3
 801824e:	68bb      	ldr	r3, [r7, #8]
 8018250:	701a      	strb	r2, [r3, #0]
	*(char*)(buf + 0) = *(char*)(buf + 0) | PDELAY_REQ; //Table 19
 8018252:	68bb      	ldr	r3, [r7, #8]
 8018254:	781b      	ldrb	r3, [r3, #0]
 8018256:	f043 0302 	orr.w	r3, r3, #2
 801825a:	b2da      	uxtb	r2, r3
 801825c:	68bb      	ldr	r3, [r7, #8]
 801825e:	701a      	strb	r2, [r3, #0]
	*(int16_t*)(buf + 2)  = flip16(PDELAY_REQ_LENGTH);
 8018260:	2036      	movs	r0, #54	; 0x36
 8018262:	f7f0 fbe3 	bl	8008a2c <lwip_htons>
 8018266:	4603      	mov	r3, r0
 8018268:	461a      	mov	r2, r3
 801826a:	68bb      	ldr	r3, [r7, #8]
 801826c:	3302      	adds	r3, #2
 801826e:	b212      	sxth	r2, r2
 8018270:	801a      	strh	r2, [r3, #0]
	*(int16_t*)(buf + 30) = flip16(ptpClock->sentPDelayReqSequenceId);
 8018272:	68fb      	ldr	r3, [r7, #12]
 8018274:	f9b3 3380 	ldrsh.w	r3, [r3, #896]	; 0x380
 8018278:	b29b      	uxth	r3, r3
 801827a:	4618      	mov	r0, r3
 801827c:	f7f0 fbd6 	bl	8008a2c <lwip_htons>
 8018280:	4603      	mov	r3, r0
 8018282:	461a      	mov	r2, r3
 8018284:	68bb      	ldr	r3, [r7, #8]
 8018286:	331e      	adds	r3, #30
 8018288:	b212      	sxth	r2, r2
 801828a:	801a      	strh	r2, [r3, #0]
	*(uint8_t*)(buf + 32) = CTRL_OTHER; //Table 23
 801828c:	68bb      	ldr	r3, [r7, #8]
 801828e:	3320      	adds	r3, #32
 8018290:	2205      	movs	r2, #5
 8018292:	701a      	strb	r2, [r3, #0]
	*(int8_t*)(buf + 33) = 0x7F; //Table 24
 8018294:	68bb      	ldr	r3, [r7, #8]
 8018296:	3321      	adds	r3, #33	; 0x21
 8018298:	227f      	movs	r2, #127	; 0x7f
 801829a:	701a      	strb	r2, [r3, #0]
	memset((buf + 8), 0, 8);
 801829c:	68bb      	ldr	r3, [r7, #8]
 801829e:	3308      	adds	r3, #8
 80182a0:	2208      	movs	r2, #8
 80182a2:	2100      	movs	r1, #0
 80182a4:	4618      	mov	r0, r3
 80182a6:	f001 fc01 	bl	8019aac <memset>

	/* Pdelay_req message */
	*(int16_t*)(buf + 34) = flip16(originTimestamp->secondsField.msb);
 80182aa:	687b      	ldr	r3, [r7, #4]
 80182ac:	889b      	ldrh	r3, [r3, #4]
 80182ae:	4618      	mov	r0, r3
 80182b0:	f7f0 fbbc 	bl	8008a2c <lwip_htons>
 80182b4:	4603      	mov	r3, r0
 80182b6:	461a      	mov	r2, r3
 80182b8:	68bb      	ldr	r3, [r7, #8]
 80182ba:	3322      	adds	r3, #34	; 0x22
 80182bc:	b212      	sxth	r2, r2
 80182be:	801a      	strh	r2, [r3, #0]
	*(uint32_t*)(buf + 36) = flip32(originTimestamp->secondsField.lsb);
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	681a      	ldr	r2, [r3, #0]
 80182c4:	68bb      	ldr	r3, [r7, #8]
 80182c6:	f103 0424 	add.w	r4, r3, #36	; 0x24
 80182ca:	4610      	mov	r0, r2
 80182cc:	f7f0 fbbb 	bl	8008a46 <lwip_htonl>
 80182d0:	4603      	mov	r3, r0
 80182d2:	6023      	str	r3, [r4, #0]
	*(uint32_t*)(buf + 40) = flip32(originTimestamp->nanosecondsField);
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	689a      	ldr	r2, [r3, #8]
 80182d8:	68bb      	ldr	r3, [r7, #8]
 80182da:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80182de:	4610      	mov	r0, r2
 80182e0:	f7f0 fbb1 	bl	8008a46 <lwip_htonl>
 80182e4:	4603      	mov	r3, r0
 80182e6:	6023      	str	r3, [r4, #0]

	memset((buf + 44), 0, 10); // RAZ reserved octets
 80182e8:	68bb      	ldr	r3, [r7, #8]
 80182ea:	332c      	adds	r3, #44	; 0x2c
 80182ec:	220a      	movs	r2, #10
 80182ee:	2100      	movs	r1, #0
 80182f0:	4618      	mov	r0, r3
 80182f2:	f001 fbdb 	bl	8019aac <memset>
}
 80182f6:	bf00      	nop
 80182f8:	3714      	adds	r7, #20
 80182fa:	46bd      	mov	sp, r7
 80182fc:	bd90      	pop	{r4, r7, pc}

080182fe <msgPackPDelayResp>:
	pdelayreq->originTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
}

/* Pack PdelayResp message */
void msgPackPDelayResp(octet_t *buf, const MsgHeader *header, const Timestamp *requestReceiptTimestamp)
{
 80182fe:	b590      	push	{r4, r7, lr}
 8018300:	b085      	sub	sp, #20
 8018302:	af00      	add	r7, sp, #0
 8018304:	60f8      	str	r0, [r7, #12]
 8018306:	60b9      	str	r1, [r7, #8]
 8018308:	607a      	str	r2, [r7, #4]
	/* Changes in header */
	*(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; //RAZ messageType
 801830a:	68fb      	ldr	r3, [r7, #12]
 801830c:	781b      	ldrb	r3, [r3, #0]
 801830e:	f023 030f 	bic.w	r3, r3, #15
 8018312:	b2da      	uxtb	r2, r3
 8018314:	68fb      	ldr	r3, [r7, #12]
 8018316:	701a      	strb	r2, [r3, #0]
	*(char*)(buf + 0) = *(char*)(buf + 0) | PDELAY_RESP; //Table 19
 8018318:	68fb      	ldr	r3, [r7, #12]
 801831a:	781b      	ldrb	r3, [r3, #0]
 801831c:	f043 0303 	orr.w	r3, r3, #3
 8018320:	b2da      	uxtb	r2, r3
 8018322:	68fb      	ldr	r3, [r7, #12]
 8018324:	701a      	strb	r2, [r3, #0]
	*(int16_t*)(buf + 2)  = flip16(PDELAY_RESP_LENGTH);
 8018326:	2036      	movs	r0, #54	; 0x36
 8018328:	f7f0 fb80 	bl	8008a2c <lwip_htons>
 801832c:	4603      	mov	r3, r0
 801832e:	461a      	mov	r2, r3
 8018330:	68fb      	ldr	r3, [r7, #12]
 8018332:	3302      	adds	r3, #2
 8018334:	b212      	sxth	r2, r2
 8018336:	801a      	strh	r2, [r3, #0]
	/* *(uint8_t*)(buf+4) = header->domainNumber; */ /* TODO: Why? */
	memset((buf + 8), 0, 8);
 8018338:	68fb      	ldr	r3, [r7, #12]
 801833a:	3308      	adds	r3, #8
 801833c:	2208      	movs	r2, #8
 801833e:	2100      	movs	r1, #0
 8018340:	4618      	mov	r0, r3
 8018342:	f001 fbb3 	bl	8019aac <memset>
	*(int16_t*)(buf + 30) = flip16(header->sequenceId);
 8018346:	68bb      	ldr	r3, [r7, #8]
 8018348:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 801834c:	b29b      	uxth	r3, r3
 801834e:	4618      	mov	r0, r3
 8018350:	f7f0 fb6c 	bl	8008a2c <lwip_htons>
 8018354:	4603      	mov	r3, r0
 8018356:	461a      	mov	r2, r3
 8018358:	68fb      	ldr	r3, [r7, #12]
 801835a:	331e      	adds	r3, #30
 801835c:	b212      	sxth	r2, r2
 801835e:	801a      	strh	r2, [r3, #0]
	*(uint8_t*)(buf + 32) = CTRL_OTHER; //Table 23
 8018360:	68fb      	ldr	r3, [r7, #12]
 8018362:	3320      	adds	r3, #32
 8018364:	2205      	movs	r2, #5
 8018366:	701a      	strb	r2, [r3, #0]
	*(int8_t*)(buf + 33) = 0x7F; //Table 24
 8018368:	68fb      	ldr	r3, [r7, #12]
 801836a:	3321      	adds	r3, #33	; 0x21
 801836c:	227f      	movs	r2, #127	; 0x7f
 801836e:	701a      	strb	r2, [r3, #0]

	/* Pdelay_resp message */
	*(int16_t*)(buf + 34) = flip16(requestReceiptTimestamp->secondsField.msb);
 8018370:	687b      	ldr	r3, [r7, #4]
 8018372:	889b      	ldrh	r3, [r3, #4]
 8018374:	4618      	mov	r0, r3
 8018376:	f7f0 fb59 	bl	8008a2c <lwip_htons>
 801837a:	4603      	mov	r3, r0
 801837c:	461a      	mov	r2, r3
 801837e:	68fb      	ldr	r3, [r7, #12]
 8018380:	3322      	adds	r3, #34	; 0x22
 8018382:	b212      	sxth	r2, r2
 8018384:	801a      	strh	r2, [r3, #0]
	*(uint32_t*)(buf + 36) = flip32(requestReceiptTimestamp->secondsField.lsb);
 8018386:	687b      	ldr	r3, [r7, #4]
 8018388:	681a      	ldr	r2, [r3, #0]
 801838a:	68fb      	ldr	r3, [r7, #12]
 801838c:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8018390:	4610      	mov	r0, r2
 8018392:	f7f0 fb58 	bl	8008a46 <lwip_htonl>
 8018396:	4603      	mov	r3, r0
 8018398:	6023      	str	r3, [r4, #0]
	*(uint32_t*)(buf + 40) = flip32(requestReceiptTimestamp->nanosecondsField);
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	689a      	ldr	r2, [r3, #8]
 801839e:	68fb      	ldr	r3, [r7, #12]
 80183a0:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80183a4:	4610      	mov	r0, r2
 80183a6:	f7f0 fb4e 	bl	8008a46 <lwip_htonl>
 80183aa:	4603      	mov	r3, r0
 80183ac:	6023      	str	r3, [r4, #0]
	memcpy((buf + 44), header->sourcePortIdentity.clockIdentity, CLOCK_IDENTITY_LENGTH);
 80183ae:	68fb      	ldr	r3, [r7, #12]
 80183b0:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 80183b4:	68bb      	ldr	r3, [r7, #8]
 80183b6:	3318      	adds	r3, #24
 80183b8:	2208      	movs	r2, #8
 80183ba:	4619      	mov	r1, r3
 80183bc:	f001 fb6b 	bl	8019a96 <memcpy>
	*(int16_t*)(buf + 52) = flip16(header->sourcePortIdentity.portNumber);
 80183c0:	68bb      	ldr	r3, [r7, #8]
 80183c2:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80183c6:	b29b      	uxth	r3, r3
 80183c8:	4618      	mov	r0, r3
 80183ca:	f7f0 fb2f 	bl	8008a2c <lwip_htons>
 80183ce:	4603      	mov	r3, r0
 80183d0:	461a      	mov	r2, r3
 80183d2:	68fb      	ldr	r3, [r7, #12]
 80183d4:	3334      	adds	r3, #52	; 0x34
 80183d6:	b212      	sxth	r2, r2
 80183d8:	801a      	strh	r2, [r3, #0]

}
 80183da:	bf00      	nop
 80183dc:	3714      	adds	r7, #20
 80183de:	46bd      	mov	sp, r7
 80183e0:	bd90      	pop	{r4, r7, pc}

080183e2 <msgUnpackPDelayResp>:

/* Unpack PdelayResp message */
void msgUnpackPDelayResp(const octet_t *buf, MsgPDelayResp *presp)
{
 80183e2:	b580      	push	{r7, lr}
 80183e4:	b082      	sub	sp, #8
 80183e6:	af00      	add	r7, sp, #0
 80183e8:	6078      	str	r0, [r7, #4]
 80183ea:	6039      	str	r1, [r7, #0]
	presp->requestReceiptTimestamp.secondsField.msb = flip16(*(int16_t*)(buf  + 34));
 80183ec:	687b      	ldr	r3, [r7, #4]
 80183ee:	3322      	adds	r3, #34	; 0x22
 80183f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80183f4:	b29b      	uxth	r3, r3
 80183f6:	4618      	mov	r0, r3
 80183f8:	f7f0 fb18 	bl	8008a2c <lwip_htons>
 80183fc:	4603      	mov	r3, r0
 80183fe:	461a      	mov	r2, r3
 8018400:	683b      	ldr	r3, [r7, #0]
 8018402:	809a      	strh	r2, [r3, #4]
	presp->requestReceiptTimestamp.secondsField.lsb = flip32(*(uint32_t*)(buf + 36));
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	3324      	adds	r3, #36	; 0x24
 8018408:	681b      	ldr	r3, [r3, #0]
 801840a:	4618      	mov	r0, r3
 801840c:	f7f0 fb1b 	bl	8008a46 <lwip_htonl>
 8018410:	4602      	mov	r2, r0
 8018412:	683b      	ldr	r3, [r7, #0]
 8018414:	601a      	str	r2, [r3, #0]
	presp->requestReceiptTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
 8018416:	687b      	ldr	r3, [r7, #4]
 8018418:	3328      	adds	r3, #40	; 0x28
 801841a:	681b      	ldr	r3, [r3, #0]
 801841c:	4618      	mov	r0, r3
 801841e:	f7f0 fb12 	bl	8008a46 <lwip_htonl>
 8018422:	4602      	mov	r2, r0
 8018424:	683b      	ldr	r3, [r7, #0]
 8018426:	609a      	str	r2, [r3, #8]
	memcpy(presp->requestingPortIdentity.clockIdentity, (buf + 44), CLOCK_IDENTITY_LENGTH);
 8018428:	683b      	ldr	r3, [r7, #0]
 801842a:	f103 000c 	add.w	r0, r3, #12
 801842e:	687b      	ldr	r3, [r7, #4]
 8018430:	332c      	adds	r3, #44	; 0x2c
 8018432:	2208      	movs	r2, #8
 8018434:	4619      	mov	r1, r3
 8018436:	f001 fb2e 	bl	8019a96 <memcpy>
	presp->requestingPortIdentity.portNumber = flip16(*(int16_t*)(buf + 52));
 801843a:	687b      	ldr	r3, [r7, #4]
 801843c:	3334      	adds	r3, #52	; 0x34
 801843e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018442:	b29b      	uxth	r3, r3
 8018444:	4618      	mov	r0, r3
 8018446:	f7f0 faf1 	bl	8008a2c <lwip_htons>
 801844a:	4603      	mov	r3, r0
 801844c:	b21a      	sxth	r2, r3
 801844e:	683b      	ldr	r3, [r7, #0]
 8018450:	829a      	strh	r2, [r3, #20]
}
 8018452:	bf00      	nop
 8018454:	3708      	adds	r7, #8
 8018456:	46bd      	mov	sp, r7
 8018458:	bd80      	pop	{r7, pc}

0801845a <msgPackPDelayRespFollowUp>:

/* Pack PdelayRespfollowup message */
void msgPackPDelayRespFollowUp(octet_t *buf, const MsgHeader *header, const Timestamp *responseOriginTimestamp)
{
 801845a:	b590      	push	{r4, r7, lr}
 801845c:	b085      	sub	sp, #20
 801845e:	af00      	add	r7, sp, #0
 8018460:	60f8      	str	r0, [r7, #12]
 8018462:	60b9      	str	r1, [r7, #8]
 8018464:	607a      	str	r2, [r7, #4]
	/* Changes in header */
	*(char*)(buf + 0) = *(char*)(buf + 0) & 0xF0; //RAZ messageType
 8018466:	68fb      	ldr	r3, [r7, #12]
 8018468:	781b      	ldrb	r3, [r3, #0]
 801846a:	f023 030f 	bic.w	r3, r3, #15
 801846e:	b2da      	uxtb	r2, r3
 8018470:	68fb      	ldr	r3, [r7, #12]
 8018472:	701a      	strb	r2, [r3, #0]
	*(char*)(buf + 0) = *(char*)(buf + 0) | PDELAY_RESP_FOLLOW_UP; //Table 19
 8018474:	68fb      	ldr	r3, [r7, #12]
 8018476:	781b      	ldrb	r3, [r3, #0]
 8018478:	f043 030a 	orr.w	r3, r3, #10
 801847c:	b2da      	uxtb	r2, r3
 801847e:	68fb      	ldr	r3, [r7, #12]
 8018480:	701a      	strb	r2, [r3, #0]
	*(int16_t*)(buf + 2)  = flip16(PDELAY_RESP_FOLLOW_UP_LENGTH);
 8018482:	2036      	movs	r0, #54	; 0x36
 8018484:	f7f0 fad2 	bl	8008a2c <lwip_htons>
 8018488:	4603      	mov	r3, r0
 801848a:	461a      	mov	r2, r3
 801848c:	68fb      	ldr	r3, [r7, #12]
 801848e:	3302      	adds	r3, #2
 8018490:	b212      	sxth	r2, r2
 8018492:	801a      	strh	r2, [r3, #0]
	*(int16_t*)(buf + 30) = flip16(header->sequenceId);
 8018494:	68bb      	ldr	r3, [r7, #8]
 8018496:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 801849a:	b29b      	uxth	r3, r3
 801849c:	4618      	mov	r0, r3
 801849e:	f7f0 fac5 	bl	8008a2c <lwip_htons>
 80184a2:	4603      	mov	r3, r0
 80184a4:	461a      	mov	r2, r3
 80184a6:	68fb      	ldr	r3, [r7, #12]
 80184a8:	331e      	adds	r3, #30
 80184aa:	b212      	sxth	r2, r2
 80184ac:	801a      	strh	r2, [r3, #0]
	*(uint8_t*)(buf + 32) = CTRL_OTHER; //Table 23
 80184ae:	68fb      	ldr	r3, [r7, #12]
 80184b0:	3320      	adds	r3, #32
 80184b2:	2205      	movs	r2, #5
 80184b4:	701a      	strb	r2, [r3, #0]
	*(int8_t*)(buf + 33) = 0x7F; //Table 24
 80184b6:	68fb      	ldr	r3, [r7, #12]
 80184b8:	3321      	adds	r3, #33	; 0x21
 80184ba:	227f      	movs	r2, #127	; 0x7f
 80184bc:	701a      	strb	r2, [r3, #0]

	/* Copy correctionField of  PdelayReqMessage */
	*(int32_t*)(buf + 8) = flip32(header->correctionfield >> 32);
 80184be:	68bb      	ldr	r3, [r7, #8]
 80184c0:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
 80184c4:	f04f 0300 	mov.w	r3, #0
 80184c8:	f04f 0400 	mov.w	r4, #0
 80184cc:	0013      	movs	r3, r2
 80184ce:	17d4      	asrs	r4, r2, #31
 80184d0:	4618      	mov	r0, r3
 80184d2:	f7f0 fab8 	bl	8008a46 <lwip_htonl>
 80184d6:	4602      	mov	r2, r0
 80184d8:	68fb      	ldr	r3, [r7, #12]
 80184da:	3308      	adds	r3, #8
 80184dc:	601a      	str	r2, [r3, #0]
	*(int32_t*)(buf + 12) = flip32((int32_t)header->correctionfield);
 80184de:	68bb      	ldr	r3, [r7, #8]
 80184e0:	f103 0410 	add.w	r4, r3, #16
 80184e4:	e9d4 3400 	ldrd	r3, r4, [r4]
 80184e8:	4618      	mov	r0, r3
 80184ea:	f7f0 faac 	bl	8008a46 <lwip_htonl>
 80184ee:	4602      	mov	r2, r0
 80184f0:	68fb      	ldr	r3, [r7, #12]
 80184f2:	330c      	adds	r3, #12
 80184f4:	601a      	str	r2, [r3, #0]

	/* Pdelay_resp_follow_up message */
	*(int16_t*)(buf + 34) = flip16(responseOriginTimestamp->secondsField.msb);
 80184f6:	687b      	ldr	r3, [r7, #4]
 80184f8:	889b      	ldrh	r3, [r3, #4]
 80184fa:	4618      	mov	r0, r3
 80184fc:	f7f0 fa96 	bl	8008a2c <lwip_htons>
 8018500:	4603      	mov	r3, r0
 8018502:	461a      	mov	r2, r3
 8018504:	68fb      	ldr	r3, [r7, #12]
 8018506:	3322      	adds	r3, #34	; 0x22
 8018508:	b212      	sxth	r2, r2
 801850a:	801a      	strh	r2, [r3, #0]
	*(uint32_t*)(buf + 36) = flip32(responseOriginTimestamp->secondsField.lsb);
 801850c:	687b      	ldr	r3, [r7, #4]
 801850e:	681a      	ldr	r2, [r3, #0]
 8018510:	68fb      	ldr	r3, [r7, #12]
 8018512:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8018516:	4610      	mov	r0, r2
 8018518:	f7f0 fa95 	bl	8008a46 <lwip_htonl>
 801851c:	4603      	mov	r3, r0
 801851e:	6023      	str	r3, [r4, #0]
	*(uint32_t*)(buf + 40) = flip32(responseOriginTimestamp->nanosecondsField);
 8018520:	687b      	ldr	r3, [r7, #4]
 8018522:	689a      	ldr	r2, [r3, #8]
 8018524:	68fb      	ldr	r3, [r7, #12]
 8018526:	f103 0428 	add.w	r4, r3, #40	; 0x28
 801852a:	4610      	mov	r0, r2
 801852c:	f7f0 fa8b 	bl	8008a46 <lwip_htonl>
 8018530:	4603      	mov	r3, r0
 8018532:	6023      	str	r3, [r4, #0]
	memcpy((buf + 44), header->sourcePortIdentity.clockIdentity, CLOCK_IDENTITY_LENGTH);
 8018534:	68fb      	ldr	r3, [r7, #12]
 8018536:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 801853a:	68bb      	ldr	r3, [r7, #8]
 801853c:	3318      	adds	r3, #24
 801853e:	2208      	movs	r2, #8
 8018540:	4619      	mov	r1, r3
 8018542:	f001 faa8 	bl	8019a96 <memcpy>
	*(int16_t*)(buf + 52) = flip16(header->sourcePortIdentity.portNumber);
 8018546:	68bb      	ldr	r3, [r7, #8]
 8018548:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 801854c:	b29b      	uxth	r3, r3
 801854e:	4618      	mov	r0, r3
 8018550:	f7f0 fa6c 	bl	8008a2c <lwip_htons>
 8018554:	4603      	mov	r3, r0
 8018556:	461a      	mov	r2, r3
 8018558:	68fb      	ldr	r3, [r7, #12]
 801855a:	3334      	adds	r3, #52	; 0x34
 801855c:	b212      	sxth	r2, r2
 801855e:	801a      	strh	r2, [r3, #0]
}
 8018560:	bf00      	nop
 8018562:	3714      	adds	r7, #20
 8018564:	46bd      	mov	sp, r7
 8018566:	bd90      	pop	{r4, r7, pc}

08018568 <msgUnpackPDelayRespFollowUp>:

/* Unpack PdelayResp message */
void msgUnpackPDelayRespFollowUp(const octet_t *buf, MsgPDelayRespFollowUp *prespfollow)
{
 8018568:	b580      	push	{r7, lr}
 801856a:	b082      	sub	sp, #8
 801856c:	af00      	add	r7, sp, #0
 801856e:	6078      	str	r0, [r7, #4]
 8018570:	6039      	str	r1, [r7, #0]
	prespfollow->responseOriginTimestamp.secondsField.msb = flip16(*(int16_t*)(buf  + 34));
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	3322      	adds	r3, #34	; 0x22
 8018576:	f9b3 3000 	ldrsh.w	r3, [r3]
 801857a:	b29b      	uxth	r3, r3
 801857c:	4618      	mov	r0, r3
 801857e:	f7f0 fa55 	bl	8008a2c <lwip_htons>
 8018582:	4603      	mov	r3, r0
 8018584:	461a      	mov	r2, r3
 8018586:	683b      	ldr	r3, [r7, #0]
 8018588:	809a      	strh	r2, [r3, #4]
	prespfollow->responseOriginTimestamp.secondsField.lsb = flip32(*(uint32_t*)(buf + 36));
 801858a:	687b      	ldr	r3, [r7, #4]
 801858c:	3324      	adds	r3, #36	; 0x24
 801858e:	681b      	ldr	r3, [r3, #0]
 8018590:	4618      	mov	r0, r3
 8018592:	f7f0 fa58 	bl	8008a46 <lwip_htonl>
 8018596:	4602      	mov	r2, r0
 8018598:	683b      	ldr	r3, [r7, #0]
 801859a:	601a      	str	r2, [r3, #0]
	prespfollow->responseOriginTimestamp.nanosecondsField = flip32(*(uint32_t*)(buf + 40));
 801859c:	687b      	ldr	r3, [r7, #4]
 801859e:	3328      	adds	r3, #40	; 0x28
 80185a0:	681b      	ldr	r3, [r3, #0]
 80185a2:	4618      	mov	r0, r3
 80185a4:	f7f0 fa4f 	bl	8008a46 <lwip_htonl>
 80185a8:	4602      	mov	r2, r0
 80185aa:	683b      	ldr	r3, [r7, #0]
 80185ac:	609a      	str	r2, [r3, #8]
	memcpy(prespfollow->requestingPortIdentity.clockIdentity, (buf + 44), CLOCK_IDENTITY_LENGTH);
 80185ae:	683b      	ldr	r3, [r7, #0]
 80185b0:	f103 000c 	add.w	r0, r3, #12
 80185b4:	687b      	ldr	r3, [r7, #4]
 80185b6:	332c      	adds	r3, #44	; 0x2c
 80185b8:	2208      	movs	r2, #8
 80185ba:	4619      	mov	r1, r3
 80185bc:	f001 fa6b 	bl	8019a96 <memcpy>
	prespfollow->requestingPortIdentity.portNumber = flip16(*(int16_t*)(buf + 52));
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	3334      	adds	r3, #52	; 0x34
 80185c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80185c8:	b29b      	uxth	r3, r3
 80185ca:	4618      	mov	r0, r3
 80185cc:	f7f0 fa2e 	bl	8008a2c <lwip_htons>
 80185d0:	4603      	mov	r3, r0
 80185d2:	b21a      	sxth	r2, r3
 80185d4:	683b      	ldr	r3, [r7, #0]
 80185d6:	829a      	strh	r2, [r3, #20]
}
 80185d8:	bf00      	nop
 80185da:	3708      	adds	r7, #8
 80185dc:	46bd      	mov	sp, r7
 80185de:	bd80      	pop	{r7, pc}

080185e0 <netQInit>:

#include "../ptpd.h"
#include "../../LWIP/Target/ethernetif.h"
/* Initialize network queue. */
static void netQInit(BufQueue *queue)
{
 80185e0:	b580      	push	{r7, lr}
 80185e2:	b082      	sub	sp, #8
 80185e4:	af00      	add	r7, sp, #0
 80185e6:	6078      	str	r0, [r7, #4]
	queue->head = 0;
 80185e8:	687b      	ldr	r3, [r7, #4]
 80185ea:	2200      	movs	r2, #0
 80185ec:	821a      	strh	r2, [r3, #16]
	queue->tail = 0;
 80185ee:	687b      	ldr	r3, [r7, #4]
 80185f0:	2200      	movs	r2, #0
 80185f2:	825a      	strh	r2, [r3, #18]
	sys_mutex_new(&queue->mutex);
 80185f4:	687b      	ldr	r3, [r7, #4]
 80185f6:	3314      	adds	r3, #20
 80185f8:	4618      	mov	r0, r3
 80185fa:	f7fb fe93 	bl	8014324 <sys_mutex_new>
}
 80185fe:	bf00      	nop
 8018600:	3708      	adds	r7, #8
 8018602:	46bd      	mov	sp, r7
 8018604:	bd80      	pop	{r7, pc}

08018606 <netQPut>:

/* Put data to the network queue. */
static bool netQPut(BufQueue *queue, void *pbuf)
{
 8018606:	b580      	push	{r7, lr}
 8018608:	b084      	sub	sp, #16
 801860a:	af00      	add	r7, sp, #0
 801860c:	6078      	str	r0, [r7, #4]
 801860e:	6039      	str	r1, [r7, #0]
	bool retval = FALSE;
 8018610:	2300      	movs	r3, #0
 8018612:	73fb      	strb	r3, [r7, #15]

	sys_mutex_lock(&queue->mutex);
 8018614:	687b      	ldr	r3, [r7, #4]
 8018616:	3314      	adds	r3, #20
 8018618:	4618      	mov	r0, r3
 801861a:	f7fb fe9f 	bl	801435c <sys_mutex_lock>

	// Is there room on the queue for the buffer?
	if (((queue->head + 1) & PBUF_QUEUE_MASK) != queue->tail)
 801861e:	687b      	ldr	r3, [r7, #4]
 8018620:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8018624:	3301      	adds	r3, #1
 8018626:	f003 0303 	and.w	r3, r3, #3
 801862a:	687a      	ldr	r2, [r7, #4]
 801862c:	f9b2 2012 	ldrsh.w	r2, [r2, #18]
 8018630:	4293      	cmp	r3, r2
 8018632:	d015      	beq.n	8018660 <netQPut+0x5a>
	{
		// Place the buffer in the queue.
		queue->head = (queue->head + 1) & PBUF_QUEUE_MASK;
 8018634:	687b      	ldr	r3, [r7, #4]
 8018636:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801863a:	b29b      	uxth	r3, r3
 801863c:	3301      	adds	r3, #1
 801863e:	b29b      	uxth	r3, r3
 8018640:	b21b      	sxth	r3, r3
 8018642:	f003 0303 	and.w	r3, r3, #3
 8018646:	b21a      	sxth	r2, r3
 8018648:	687b      	ldr	r3, [r7, #4]
 801864a:	821a      	strh	r2, [r3, #16]
		queue->pbuf[queue->head] = pbuf;
 801864c:	687b      	ldr	r3, [r7, #4]
 801864e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8018652:	4619      	mov	r1, r3
 8018654:	687b      	ldr	r3, [r7, #4]
 8018656:	683a      	ldr	r2, [r7, #0]
 8018658:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		retval = TRUE;
 801865c:	2301      	movs	r3, #1
 801865e:	73fb      	strb	r3, [r7, #15]
	}

	sys_mutex_unlock(&queue->mutex);
 8018660:	687b      	ldr	r3, [r7, #4]
 8018662:	3314      	adds	r3, #20
 8018664:	4618      	mov	r0, r3
 8018666:	f7fb fe88 	bl	801437a <sys_mutex_unlock>

	return retval;
 801866a:	7bfb      	ldrb	r3, [r7, #15]
}
 801866c:	4618      	mov	r0, r3
 801866e:	3710      	adds	r7, #16
 8018670:	46bd      	mov	sp, r7
 8018672:	bd80      	pop	{r7, pc}

08018674 <netQGet>:

/* Get data from the network queue. */
static void* netQGet(BufQueue *queue)
{
 8018674:	b580      	push	{r7, lr}
 8018676:	b084      	sub	sp, #16
 8018678:	af00      	add	r7, sp, #0
 801867a:	6078      	str	r0, [r7, #4]
	void *pbuf = NULL;
 801867c:	2300      	movs	r3, #0
 801867e:	60fb      	str	r3, [r7, #12]

	sys_mutex_lock(&queue->mutex);
 8018680:	687b      	ldr	r3, [r7, #4]
 8018682:	3314      	adds	r3, #20
 8018684:	4618      	mov	r0, r3
 8018686:	f7fb fe69 	bl	801435c <sys_mutex_lock>

	// Is there a buffer on the queue?
	if (queue->tail != queue->head)
 801868a:	687b      	ldr	r3, [r7, #4]
 801868c:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8018690:	687b      	ldr	r3, [r7, #4]
 8018692:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8018696:	429a      	cmp	r2, r3
 8018698:	d013      	beq.n	80186c2 <netQGet+0x4e>
	{
		// Get the buffer from the queue.
		queue->tail = (queue->tail + 1) & PBUF_QUEUE_MASK;
 801869a:	687b      	ldr	r3, [r7, #4]
 801869c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80186a0:	b29b      	uxth	r3, r3
 80186a2:	3301      	adds	r3, #1
 80186a4:	b29b      	uxth	r3, r3
 80186a6:	b21b      	sxth	r3, r3
 80186a8:	f003 0303 	and.w	r3, r3, #3
 80186ac:	b21a      	sxth	r2, r3
 80186ae:	687b      	ldr	r3, [r7, #4]
 80186b0:	825a      	strh	r2, [r3, #18]
		pbuf = queue->pbuf[queue->tail];
 80186b2:	687b      	ldr	r3, [r7, #4]
 80186b4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80186b8:	461a      	mov	r2, r3
 80186ba:	687b      	ldr	r3, [r7, #4]
 80186bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80186c0:	60fb      	str	r3, [r7, #12]
	}

	sys_mutex_unlock(&queue->mutex);
 80186c2:	687b      	ldr	r3, [r7, #4]
 80186c4:	3314      	adds	r3, #20
 80186c6:	4618      	mov	r0, r3
 80186c8:	f7fb fe57 	bl	801437a <sys_mutex_unlock>

	return pbuf;
 80186cc:	68fb      	ldr	r3, [r7, #12]
}
 80186ce:	4618      	mov	r0, r3
 80186d0:	3710      	adds	r7, #16
 80186d2:	46bd      	mov	sp, r7
 80186d4:	bd80      	pop	{r7, pc}

080186d6 <netQEmpty>:

/* Free any remaining pbufs in the queue. */
static void netQEmpty(BufQueue *queue)
{
 80186d6:	b580      	push	{r7, lr}
 80186d8:	b082      	sub	sp, #8
 80186da:	af00      	add	r7, sp, #0
 80186dc:	6078      	str	r0, [r7, #4]
	sys_mutex_lock(&queue->mutex);
 80186de:	687b      	ldr	r3, [r7, #4]
 80186e0:	3314      	adds	r3, #20
 80186e2:	4618      	mov	r0, r3
 80186e4:	f7fb fe3a 	bl	801435c <sys_mutex_lock>

	// Free each remaining buffer in the queue.
	while (queue->tail != queue->head)
 80186e8:	e015      	b.n	8018716 <netQEmpty+0x40>
	{
		// Get the buffer from the queue.
		queue->tail = (queue->tail + 1) & PBUF_QUEUE_MASK;
 80186ea:	687b      	ldr	r3, [r7, #4]
 80186ec:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80186f0:	b29b      	uxth	r3, r3
 80186f2:	3301      	adds	r3, #1
 80186f4:	b29b      	uxth	r3, r3
 80186f6:	b21b      	sxth	r3, r3
 80186f8:	f003 0303 	and.w	r3, r3, #3
 80186fc:	b21a      	sxth	r2, r3
 80186fe:	687b      	ldr	r3, [r7, #4]
 8018700:	825a      	strh	r2, [r3, #18]
		pbuf_free(queue->pbuf[queue->tail]);
 8018702:	687b      	ldr	r3, [r7, #4]
 8018704:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8018708:	461a      	mov	r2, r3
 801870a:	687b      	ldr	r3, [r7, #4]
 801870c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018710:	4618      	mov	r0, r3
 8018712:	f7f1 fe49 	bl	800a3a8 <pbuf_free>
	while (queue->tail != queue->head)
 8018716:	687b      	ldr	r3, [r7, #4]
 8018718:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 801871c:	687b      	ldr	r3, [r7, #4]
 801871e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8018722:	429a      	cmp	r2, r3
 8018724:	d1e1      	bne.n	80186ea <netQEmpty+0x14>
	}

	sys_mutex_unlock(&queue->mutex);
 8018726:	687b      	ldr	r3, [r7, #4]
 8018728:	3314      	adds	r3, #20
 801872a:	4618      	mov	r0, r3
 801872c:	f7fb fe25 	bl	801437a <sys_mutex_unlock>
}
 8018730:	bf00      	nop
 8018732:	3708      	adds	r7, #8
 8018734:	46bd      	mov	sp, r7
 8018736:	bd80      	pop	{r7, pc}

08018738 <netQCheck>:

/* Check if something is in the queue */
static bool netQCheck(BufQueue *queue)
{
 8018738:	b580      	push	{r7, lr}
 801873a:	b084      	sub	sp, #16
 801873c:	af00      	add	r7, sp, #0
 801873e:	6078      	str	r0, [r7, #4]
	bool retval = FALSE;
 8018740:	2300      	movs	r3, #0
 8018742:	73fb      	strb	r3, [r7, #15]

	sys_mutex_lock(&queue->mutex);
 8018744:	687b      	ldr	r3, [r7, #4]
 8018746:	3314      	adds	r3, #20
 8018748:	4618      	mov	r0, r3
 801874a:	f7fb fe07 	bl	801435c <sys_mutex_lock>

	if (queue->tail != queue->head)
 801874e:	687b      	ldr	r3, [r7, #4]
 8018750:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8018754:	687b      	ldr	r3, [r7, #4]
 8018756:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801875a:	429a      	cmp	r2, r3
 801875c:	d001      	beq.n	8018762 <netQCheck+0x2a>
		retval = TRUE;
 801875e:	2301      	movs	r3, #1
 8018760:	73fb      	strb	r3, [r7, #15]

	sys_mutex_unlock(&queue->mutex);
 8018762:	687b      	ldr	r3, [r7, #4]
 8018764:	3314      	adds	r3, #20
 8018766:	4618      	mov	r0, r3
 8018768:	f7fb fe07 	bl	801437a <sys_mutex_unlock>

	return retval;
 801876c:	7bfb      	ldrb	r3, [r7, #15]
}
 801876e:	4618      	mov	r0, r3
 8018770:	3710      	adds	r7, #16
 8018772:	46bd      	mov	sp, r7
 8018774:	bd80      	pop	{r7, pc}
	...

08018778 <findIface>:

/* Find interface to  be used.  uuid should be filled with MAC address of the interface.
 Will return the IPv4 address of  the interface. */
static int32_t findIface(const octet_t *ifaceName, octet_t *uuid,
		NetPath *netPath)
{
 8018778:	b580      	push	{r7, lr}
 801877a:	b086      	sub	sp, #24
 801877c:	af00      	add	r7, sp, #0
 801877e:	60f8      	str	r0, [r7, #12]
 8018780:	60b9      	str	r1, [r7, #8]
 8018782:	607a      	str	r2, [r7, #4]
	struct netif *iface;

	iface = netif_default;
 8018784:	4b09      	ldr	r3, [pc, #36]	; (80187ac <findIface+0x34>)
 8018786:	681b      	ldr	r3, [r3, #0]
 8018788:	617b      	str	r3, [r7, #20]
	memcpy(uuid, iface->hwaddr, iface->hwaddr_len);
 801878a:	697b      	ldr	r3, [r7, #20]
 801878c:	f103 012d 	add.w	r1, r3, #45	; 0x2d
 8018790:	697b      	ldr	r3, [r7, #20]
 8018792:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018796:	461a      	mov	r2, r3
 8018798:	68b8      	ldr	r0, [r7, #8]
 801879a:	f001 f97c 	bl	8019a96 <memcpy>

	return iface->ip_addr.addr;
 801879e:	697b      	ldr	r3, [r7, #20]
 80187a0:	685b      	ldr	r3, [r3, #4]
}
 80187a2:	4618      	mov	r0, r3
 80187a4:	3718      	adds	r7, #24
 80187a6:	46bd      	mov	sp, r7
 80187a8:	bd80      	pop	{r7, pc}
 80187aa:	bf00      	nop
 80187ac:	2000b7f0 	.word	0x2000b7f0

080187b0 <netRecvEventCallback>:

/* Process an incoming message on the Event port. */
static void netRecvEventCallback(void *arg, struct udp_pcb *pcb, struct pbuf *p,
		const ip_addr_t *addr, u16_t port)
{
 80187b0:	b580      	push	{r7, lr}
 80187b2:	b088      	sub	sp, #32
 80187b4:	af00      	add	r7, sp, #0
 80187b6:	60f8      	str	r0, [r7, #12]
 80187b8:	60b9      	str	r1, [r7, #8]
 80187ba:	607a      	str	r2, [r7, #4]
 80187bc:	603b      	str	r3, [r7, #0]
	NetPath *netPath = (NetPath*) arg;
 80187be:	68fb      	ldr	r3, [r7, #12]
 80187c0:	61fb      	str	r3, [r7, #28]

	/* Place the incoming message on the Event Port QUEUE. */
	if (!netQPut(&netPath->eventQ, p))
 80187c2:	69fb      	ldr	r3, [r7, #28]
 80187c4:	3314      	adds	r3, #20
 80187c6:	6879      	ldr	r1, [r7, #4]
 80187c8:	4618      	mov	r0, r3
 80187ca:	f7ff ff1c 	bl	8018606 <netQPut>
 80187ce:	4603      	mov	r3, r0
 80187d0:	f083 0301 	eor.w	r3, r3, #1
 80187d4:	b2db      	uxtb	r3, r3
 80187d6:	2b00      	cmp	r3, #0
 80187d8:	d011      	beq.n	80187fe <netRecvEventCallback+0x4e>
	{
		pbuf_free(p);
 80187da:	6878      	ldr	r0, [r7, #4]
 80187dc:	f7f1 fde4 	bl	800a3a8 <pbuf_free>
		ERROR("netRecvEventCallback: queue full\n");
 80187e0:	f107 0314 	add.w	r3, r7, #20
 80187e4:	4618      	mov	r0, r3
 80187e6:	f000 ff99 	bl	801971c <getTime>
 80187ea:	697b      	ldr	r3, [r7, #20]
 80187ec:	69ba      	ldr	r2, [r7, #24]
 80187ee:	4619      	mov	r1, r3
 80187f0:	4805      	ldr	r0, [pc, #20]	; (8018808 <netRecvEventCallback+0x58>)
 80187f2:	f001 ff93 	bl	801a71c <iprintf>
 80187f6:	4805      	ldr	r0, [pc, #20]	; (801880c <netRecvEventCallback+0x5c>)
 80187f8:	f002 f804 	bl	801a804 <puts>
		return;
 80187fc:	e001      	b.n	8018802 <netRecvEventCallback+0x52>
	}

	/* Alert the PTP thread there is now something to do. */
	ptpd_alert();
 80187fe:	f7ff f8ed 	bl	80179dc <ptpd_alert>
}
 8018802:	3720      	adds	r7, #32
 8018804:	46bd      	mov	sp, r7
 8018806:	bd80      	pop	{r7, pc}
 8018808:	08021518 	.word	0x08021518
 801880c:	08021528 	.word	0x08021528

08018810 <netRecvGeneralCallback>:

/* Process an incoming message on the General port. */
static void netRecvGeneralCallback(void *arg, struct udp_pcb *pcb,
		struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8018810:	b580      	push	{r7, lr}
 8018812:	b088      	sub	sp, #32
 8018814:	af00      	add	r7, sp, #0
 8018816:	60f8      	str	r0, [r7, #12]
 8018818:	60b9      	str	r1, [r7, #8]
 801881a:	607a      	str	r2, [r7, #4]
 801881c:	603b      	str	r3, [r7, #0]
	NetPath *netPath = (NetPath*) arg;
 801881e:	68fb      	ldr	r3, [r7, #12]
 8018820:	61fb      	str	r3, [r7, #28]

	/* Place the incoming message on the Event Port QUEUE. */
	if (!netQPut(&netPath->generalQ, p))
 8018822:	69fb      	ldr	r3, [r7, #28]
 8018824:	332c      	adds	r3, #44	; 0x2c
 8018826:	6879      	ldr	r1, [r7, #4]
 8018828:	4618      	mov	r0, r3
 801882a:	f7ff feec 	bl	8018606 <netQPut>
 801882e:	4603      	mov	r3, r0
 8018830:	f083 0301 	eor.w	r3, r3, #1
 8018834:	b2db      	uxtb	r3, r3
 8018836:	2b00      	cmp	r3, #0
 8018838:	d011      	beq.n	801885e <netRecvGeneralCallback+0x4e>
	{
		pbuf_free(p);
 801883a:	6878      	ldr	r0, [r7, #4]
 801883c:	f7f1 fdb4 	bl	800a3a8 <pbuf_free>
		ERROR("netRecvGeneralCallback: queue full\n");
 8018840:	f107 0314 	add.w	r3, r7, #20
 8018844:	4618      	mov	r0, r3
 8018846:	f000 ff69 	bl	801971c <getTime>
 801884a:	697b      	ldr	r3, [r7, #20]
 801884c:	69ba      	ldr	r2, [r7, #24]
 801884e:	4619      	mov	r1, r3
 8018850:	4805      	ldr	r0, [pc, #20]	; (8018868 <netRecvGeneralCallback+0x58>)
 8018852:	f001 ff63 	bl	801a71c <iprintf>
 8018856:	4805      	ldr	r0, [pc, #20]	; (801886c <netRecvGeneralCallback+0x5c>)
 8018858:	f001 ffd4 	bl	801a804 <puts>
		return;
 801885c:	e001      	b.n	8018862 <netRecvGeneralCallback+0x52>
	}

	/* Alert the PTP thread there is now something to do. */
	ptpd_alert();
 801885e:	f7ff f8bd 	bl	80179dc <ptpd_alert>
}
 8018862:	3720      	adds	r7, #32
 8018864:	46bd      	mov	sp, r7
 8018866:	bd80      	pop	{r7, pc}
 8018868:	08021518 	.word	0x08021518
 801886c:	0802154c 	.word	0x0802154c

08018870 <netInit>:

/* Start  all of the UDP stuff */
bool netInit(NetPath *netPath, PtpClock *ptpClock)
{
 8018870:	b590      	push	{r4, r7, lr}
 8018872:	b095      	sub	sp, #84	; 0x54
 8018874:	af00      	add	r7, sp, #0
 8018876:	6078      	str	r0, [r7, #4]
 8018878:	6039      	str	r1, [r7, #0]
	struct in_addr netAddr;
	ip_addr_t interfaceAddr;
	char addrStr[NET_ADDRESS_LENGTH];

	DBG("netInit\n");
 801887a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801887e:	4618      	mov	r0, r3
 8018880:	f000 ff4c 	bl	801971c <getTime>
 8018884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018886:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018888:	4619      	mov	r1, r3
 801888a:	4875      	ldr	r0, [pc, #468]	; (8018a60 <netInit+0x1f0>)
 801888c:	f001 ff46 	bl	801a71c <iprintf>
 8018890:	4874      	ldr	r0, [pc, #464]	; (8018a64 <netInit+0x1f4>)
 8018892:	f001 ffb7 	bl	801a804 <puts>

	/* Initialize the buffer queues. */
	netQInit(&netPath->eventQ);
 8018896:	687b      	ldr	r3, [r7, #4]
 8018898:	3314      	adds	r3, #20
 801889a:	4618      	mov	r0, r3
 801889c:	f7ff fea0 	bl	80185e0 <netQInit>
	netQInit(&netPath->generalQ);
 80188a0:	687b      	ldr	r3, [r7, #4]
 80188a2:	332c      	adds	r3, #44	; 0x2c
 80188a4:	4618      	mov	r0, r3
 80188a6:	f7ff fe9b 	bl	80185e0 <netQInit>

	/* Find a network interface */
	interfaceAddr.addr = findIface(ptpClock->rtOpts->ifaceName,
 80188aa:	683b      	ldr	r3, [r7, #0]
 80188ac:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
 80188b0:	f103 000c 	add.w	r0, r3, #12
			ptpClock->portUuidField, netPath);
 80188b4:	683b      	ldr	r3, [r7, #0]
 80188b6:	f203 4311 	addw	r3, r3, #1041	; 0x411
	interfaceAddr.addr = findIface(ptpClock->rtOpts->ifaceName,
 80188ba:	687a      	ldr	r2, [r7, #4]
 80188bc:	4619      	mov	r1, r3
 80188be:	f7ff ff5b 	bl	8018778 <findIface>
 80188c2:	4603      	mov	r3, r0
 80188c4:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!(interfaceAddr.addr))
 80188c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80188c8:	2b00      	cmp	r3, #0
 80188ca:	d10e      	bne.n	80188ea <netInit+0x7a>
	{
		ERROR("netInit: Failed to find interface address\n");
 80188cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80188d0:	4618      	mov	r0, r3
 80188d2:	f000 ff23 	bl	801971c <getTime>
 80188d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80188d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80188da:	4619      	mov	r1, r3
 80188dc:	4862      	ldr	r0, [pc, #392]	; (8018a68 <netInit+0x1f8>)
 80188de:	f001 ff1d 	bl	801a71c <iprintf>
 80188e2:	4862      	ldr	r0, [pc, #392]	; (8018a6c <netInit+0x1fc>)
 80188e4:	f001 ff8e 	bl	801a804 <puts>
		goto fail01;
 80188e8:	e0b4      	b.n	8018a54 <netInit+0x1e4>
	}

	/* Open lwIP raw udp interfaces for the event port. */
	netPath->eventPcb = udp_new();
 80188ea:	f7f7 f983 	bl	800fbf4 <udp_new>
 80188ee:	4602      	mov	r2, r0
 80188f0:	687b      	ldr	r3, [r7, #4]
 80188f2:	60da      	str	r2, [r3, #12]
	if (NULL == netPath->eventPcb)
 80188f4:	687b      	ldr	r3, [r7, #4]
 80188f6:	68db      	ldr	r3, [r3, #12]
 80188f8:	2b00      	cmp	r3, #0
 80188fa:	d10e      	bne.n	801891a <netInit+0xaa>
	{
		ERROR("netInit: Failed to open Event UDP PCB\n");
 80188fc:	f107 0320 	add.w	r3, r7, #32
 8018900:	4618      	mov	r0, r3
 8018902:	f000 ff0b 	bl	801971c <getTime>
 8018906:	6a3b      	ldr	r3, [r7, #32]
 8018908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801890a:	4619      	mov	r1, r3
 801890c:	4856      	ldr	r0, [pc, #344]	; (8018a68 <netInit+0x1f8>)
 801890e:	f001 ff05 	bl	801a71c <iprintf>
 8018912:	4857      	ldr	r0, [pc, #348]	; (8018a70 <netInit+0x200>)
 8018914:	f001 ff76 	bl	801a804 <puts>
		goto fail02;
 8018918:	e09c      	b.n	8018a54 <netInit+0x1e4>
	}

	/* Open lwIP raw udp interfaces for the general port. */
	netPath->generalPcb = udp_new();
 801891a:	f7f7 f96b 	bl	800fbf4 <udp_new>
 801891e:	4602      	mov	r2, r0
 8018920:	687b      	ldr	r3, [r7, #4]
 8018922:	611a      	str	r2, [r3, #16]
	if (NULL == netPath->generalPcb)
 8018924:	687b      	ldr	r3, [r7, #4]
 8018926:	691b      	ldr	r3, [r3, #16]
 8018928:	2b00      	cmp	r3, #0
 801892a:	d10e      	bne.n	801894a <netInit+0xda>
	{
		ERROR("netInit: Failed to open General UDP PCB\n");
 801892c:	f107 0318 	add.w	r3, r7, #24
 8018930:	4618      	mov	r0, r3
 8018932:	f000 fef3 	bl	801971c <getTime>
 8018936:	69bb      	ldr	r3, [r7, #24]
 8018938:	69fa      	ldr	r2, [r7, #28]
 801893a:	4619      	mov	r1, r3
 801893c:	484a      	ldr	r0, [pc, #296]	; (8018a68 <netInit+0x1f8>)
 801893e:	f001 feed 	bl	801a71c <iprintf>
 8018942:	484c      	ldr	r0, [pc, #304]	; (8018a74 <netInit+0x204>)
 8018944:	f001 ff5e 	bl	801a804 <puts>
		goto fail03;
 8018948:	e07f      	b.n	8018a4a <netInit+0x1da>
	}

	/* Configure network (broadcast/unicast) addresses. */
	netPath->unicastAddr = 0; /* disable unicast */
 801894a:	687b      	ldr	r3, [r7, #4]
 801894c:	2200      	movs	r2, #0
 801894e:	609a      	str	r2, [r3, #8]

	/* Init General multicast IP address */
	memcpy(addrStr, DEFAULT_PTP_DOMAIN_ADDRESS, NET_ADDRESS_LENGTH);
 8018950:	4b49      	ldr	r3, [pc, #292]	; (8018a78 <netInit+0x208>)
 8018952:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8018956:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8018958:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (!inet_aton(addrStr, &netAddr))
 801895c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8018960:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8018964:	4611      	mov	r1, r2
 8018966:	4618      	mov	r0, r3
 8018968:	f7fa fc46 	bl	80131f8 <ip4addr_aton>
 801896c:	4603      	mov	r3, r0
 801896e:	2b00      	cmp	r3, #0
 8018970:	d111      	bne.n	8018996 <netInit+0x126>
	{
		ERROR("netInit: failed to encode multi-cast address: %s\n", addrStr);
 8018972:	f107 0310 	add.w	r3, r7, #16
 8018976:	4618      	mov	r0, r3
 8018978:	f000 fed0 	bl	801971c <getTime>
 801897c:	693b      	ldr	r3, [r7, #16]
 801897e:	697a      	ldr	r2, [r7, #20]
 8018980:	4619      	mov	r1, r3
 8018982:	4839      	ldr	r0, [pc, #228]	; (8018a68 <netInit+0x1f8>)
 8018984:	f001 feca 	bl	801a71c <iprintf>
 8018988:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801898c:	4619      	mov	r1, r3
 801898e:	483b      	ldr	r0, [pc, #236]	; (8018a7c <netInit+0x20c>)
 8018990:	f001 fec4 	bl	801a71c <iprintf>
		goto fail04;
 8018994:	e054      	b.n	8018a40 <netInit+0x1d0>
	}
	netPath->multicastAddr = netAddr.s_addr;
 8018996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018998:	461a      	mov	r2, r3
 801899a:	687b      	ldr	r3, [r7, #4]
 801899c:	601a      	str	r2, [r3, #0]
	/* Join multicast group (for receiving) on specified interface */

//	printf("Join group: %s, %d\n", DEFAULT_PTP_DOMAIN_ADDRESS,
	//		igmp_joingroup(&interfaceAddr, (ip_addr_t*) &netAddr));
	/* Init Peer multicast IP address */
	memcpy(addrStr, PEER_PTP_DOMAIN_ADDRESS, NET_ADDRESS_LENGTH);
 801899e:	4b38      	ldr	r3, [pc, #224]	; (8018a80 <netInit+0x210>)
 80189a0:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80189a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80189a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (!inet_aton(addrStr, &netAddr))
 80189aa:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80189ae:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80189b2:	4611      	mov	r1, r2
 80189b4:	4618      	mov	r0, r3
 80189b6:	f7fa fc1f 	bl	80131f8 <ip4addr_aton>
 80189ba:	4603      	mov	r3, r0
 80189bc:	2b00      	cmp	r3, #0
 80189be:	d111      	bne.n	80189e4 <netInit+0x174>
	{
		ERROR("netInit: failed to encode peer multi-cast address: %s\n",
 80189c0:	f107 0308 	add.w	r3, r7, #8
 80189c4:	4618      	mov	r0, r3
 80189c6:	f000 fea9 	bl	801971c <getTime>
 80189ca:	68bb      	ldr	r3, [r7, #8]
 80189cc:	68fa      	ldr	r2, [r7, #12]
 80189ce:	4619      	mov	r1, r3
 80189d0:	4825      	ldr	r0, [pc, #148]	; (8018a68 <netInit+0x1f8>)
 80189d2:	f001 fea3 	bl	801a71c <iprintf>
 80189d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80189da:	4619      	mov	r1, r3
 80189dc:	4829      	ldr	r0, [pc, #164]	; (8018a84 <netInit+0x214>)
 80189de:	f001 fe9d 	bl	801a71c <iprintf>
				addrStr);
		goto fail04;
 80189e2:	e02d      	b.n	8018a40 <netInit+0x1d0>
	}
	netPath->peerMulticastAddr = netAddr.s_addr;
 80189e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80189e6:	461a      	mov	r2, r3
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	605a      	str	r2, [r3, #4]
	//	igmp_joingroup(&interfaceAddr, (ip_addr_t*) &netAddr));
	/* Multicast send only on specified interface. */

	//netPath->eventPcb->multicast_ip.addr = netPath->multicastAddr;
	//netPath->generalPcb->multicast_ip.addr = netPath->multicastAddr;
	netPath->eventPcb->local_ip.addr = netPath->multicastAddr;
 80189ec:	687b      	ldr	r3, [r7, #4]
 80189ee:	681a      	ldr	r2, [r3, #0]
 80189f0:	687b      	ldr	r3, [r7, #4]
 80189f2:	68db      	ldr	r3, [r3, #12]
 80189f4:	601a      	str	r2, [r3, #0]
	netPath->generalPcb->local_ip.addr = netPath->multicastAddr;
 80189f6:	687b      	ldr	r3, [r7, #4]
 80189f8:	681a      	ldr	r2, [r3, #0]
 80189fa:	687b      	ldr	r3, [r7, #4]
 80189fc:	691b      	ldr	r3, [r3, #16]
 80189fe:	601a      	str	r2, [r3, #0]

	/* Establish the appropriate UDP bindings/connections for events. */
	udp_recv(netPath->eventPcb, netRecvEventCallback, netPath);
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	68db      	ldr	r3, [r3, #12]
 8018a04:	687a      	ldr	r2, [r7, #4]
 8018a06:	4920      	ldr	r1, [pc, #128]	; (8018a88 <netInit+0x218>)
 8018a08:	4618      	mov	r0, r3
 8018a0a:	f7f7 f8af 	bl	800fb6c <udp_recv>
	udp_bind(netPath->eventPcb, IP_ADDR_ANY, PTP_EVENT_PORT);
 8018a0e:	687b      	ldr	r3, [r7, #4]
 8018a10:	68db      	ldr	r3, [r3, #12]
 8018a12:	f240 123f 	movw	r2, #319	; 0x13f
 8018a16:	491d      	ldr	r1, [pc, #116]	; (8018a8c <netInit+0x21c>)
 8018a18:	4618      	mov	r0, r3
 8018a1a:	f7f6 ffe1 	bl	800f9e0 <udp_bind>
	/*  udp_connect(netPath->eventPcb, &netAddr, PTP_EVENT_PORT); */

	/* Establish the appropriate UDP bindings/connections for general. */
	udp_recv(netPath->generalPcb, netRecvGeneralCallback, netPath);
 8018a1e:	687b      	ldr	r3, [r7, #4]
 8018a20:	691b      	ldr	r3, [r3, #16]
 8018a22:	687a      	ldr	r2, [r7, #4]
 8018a24:	491a      	ldr	r1, [pc, #104]	; (8018a90 <netInit+0x220>)
 8018a26:	4618      	mov	r0, r3
 8018a28:	f7f7 f8a0 	bl	800fb6c <udp_recv>
	udp_bind(netPath->generalPcb, IP_ADDR_ANY, PTP_GENERAL_PORT);
 8018a2c:	687b      	ldr	r3, [r7, #4]
 8018a2e:	691b      	ldr	r3, [r3, #16]
 8018a30:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8018a34:	4915      	ldr	r1, [pc, #84]	; (8018a8c <netInit+0x21c>)
 8018a36:	4618      	mov	r0, r3
 8018a38:	f7f6 ffd2 	bl	800f9e0 <udp_bind>
	/*  udp_connect(netPath->generalPcb, &netAddr, PTP_GENERAL_PORT); */

	/* Return a success code. */
	return TRUE;
 8018a3c:	2301      	movs	r3, #1
 8018a3e:	e00a      	b.n	8018a56 <netInit+0x1e6>

	fail04: udp_remove(netPath->generalPcb);
 8018a40:	687b      	ldr	r3, [r7, #4]
 8018a42:	691b      	ldr	r3, [r3, #16]
 8018a44:	4618      	mov	r0, r3
 8018a46:	f7f7 f8a3 	bl	800fb90 <udp_remove>
	fail03: udp_remove(netPath->eventPcb);
 8018a4a:	687b      	ldr	r3, [r7, #4]
 8018a4c:	68db      	ldr	r3, [r3, #12]
 8018a4e:	4618      	mov	r0, r3
 8018a50:	f7f7 f89e 	bl	800fb90 <udp_remove>
	fail02: fail01: return FALSE;
 8018a54:	2300      	movs	r3, #0
}
 8018a56:	4618      	mov	r0, r3
 8018a58:	3754      	adds	r7, #84	; 0x54
 8018a5a:	46bd      	mov	sp, r7
 8018a5c:	bd90      	pop	{r4, r7, pc}
 8018a5e:	bf00      	nop
 8018a60:	080214fc 	.word	0x080214fc
 8018a64:	08021570 	.word	0x08021570
 8018a68:	08021518 	.word	0x08021518
 8018a6c:	08021578 	.word	0x08021578
 8018a70:	080215a4 	.word	0x080215a4
 8018a74:	080215cc 	.word	0x080215cc
 8018a78:	080215f4 	.word	0x080215f4
 8018a7c:	08021600 	.word	0x08021600
 8018a80:	08021634 	.word	0x08021634
 8018a84:	08021640 	.word	0x08021640
 8018a88:	080187b1 	.word	0x080187b1
 8018a8c:	08021d18 	.word	0x08021d18
 8018a90:	08018811 	.word	0x08018811

08018a94 <netSelect>:

/* Wait for a packet  to come in on either port.  For now, there is no wait.
 * Simply check to  see if a packet is available on either port and return 1,
 *  otherwise return 0. */
int32_t netSelect(NetPath *netPath, const TimeInternal *timeout)
{
 8018a94:	b580      	push	{r7, lr}
 8018a96:	b082      	sub	sp, #8
 8018a98:	af00      	add	r7, sp, #0
 8018a9a:	6078      	str	r0, [r7, #4]
 8018a9c:	6039      	str	r1, [r7, #0]
	/* Check the packet queues.  If there is data, return TRUE. */
	if (netQCheck(&netPath->eventQ) || netQCheck(&netPath->generalQ))
 8018a9e:	687b      	ldr	r3, [r7, #4]
 8018aa0:	3314      	adds	r3, #20
 8018aa2:	4618      	mov	r0, r3
 8018aa4:	f7ff fe48 	bl	8018738 <netQCheck>
 8018aa8:	4603      	mov	r3, r0
 8018aaa:	2b00      	cmp	r3, #0
 8018aac:	d107      	bne.n	8018abe <netSelect+0x2a>
 8018aae:	687b      	ldr	r3, [r7, #4]
 8018ab0:	332c      	adds	r3, #44	; 0x2c
 8018ab2:	4618      	mov	r0, r3
 8018ab4:	f7ff fe40 	bl	8018738 <netQCheck>
 8018ab8:	4603      	mov	r3, r0
 8018aba:	2b00      	cmp	r3, #0
 8018abc:	d001      	beq.n	8018ac2 <netSelect+0x2e>
		return 1;
 8018abe:	2301      	movs	r3, #1
 8018ac0:	e000      	b.n	8018ac4 <netSelect+0x30>

	return 0;
 8018ac2:	2300      	movs	r3, #0
}
 8018ac4:	4618      	mov	r0, r3
 8018ac6:	3708      	adds	r7, #8
 8018ac8:	46bd      	mov	sp, r7
 8018aca:	bd80      	pop	{r7, pc}

08018acc <netEmptyEventQ>:

/* Delete all waiting packets in event queue. */
void netEmptyEventQ(NetPath *netPath)
{
 8018acc:	b580      	push	{r7, lr}
 8018ace:	b082      	sub	sp, #8
 8018ad0:	af00      	add	r7, sp, #0
 8018ad2:	6078      	str	r0, [r7, #4]
	netQEmpty(&netPath->eventQ);
 8018ad4:	687b      	ldr	r3, [r7, #4]
 8018ad6:	3314      	adds	r3, #20
 8018ad8:	4618      	mov	r0, r3
 8018ada:	f7ff fdfc 	bl	80186d6 <netQEmpty>
}
 8018ade:	bf00      	nop
 8018ae0:	3708      	adds	r7, #8
 8018ae2:	46bd      	mov	sp, r7
 8018ae4:	bd80      	pop	{r7, pc}
	...

08018ae8 <netRecv>:

static ssize_t netRecv(octet_t *buf, TimeInternal *time, BufQueue *msgQueue)
{
 8018ae8:	b580      	push	{r7, lr}
 8018aea:	b08e      	sub	sp, #56	; 0x38
 8018aec:	af00      	add	r7, sp, #0
 8018aee:	60f8      	str	r0, [r7, #12]
 8018af0:	60b9      	str	r1, [r7, #8]
 8018af2:	607a      	str	r2, [r7, #4]
	u16_t length;
	struct pbuf *p;
	struct pbuf *pcopy;

	/* Get the next buffer from the queue. */
	if ((p = (struct pbuf*) netQGet(msgQueue)) == NULL)
 8018af4:	6878      	ldr	r0, [r7, #4]
 8018af6:	f7ff fdbd 	bl	8018674 <netQGet>
 8018afa:	62b8      	str	r0, [r7, #40]	; 0x28
 8018afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018afe:	2b00      	cmp	r3, #0
 8018b00:	d101      	bne.n	8018b06 <netRecv+0x1e>
	{
		return 0;
 8018b02:	2300      	movs	r3, #0
 8018b04:	e05f      	b.n	8018bc6 <netRecv+0xde>
	}

	/* Verify that we have enough space to store the contents. */
	if (p->tot_len > PACKET_SIZE)
 8018b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b08:	891b      	ldrh	r3, [r3, #8]
 8018b0a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8018b0e:	d912      	bls.n	8018b36 <netRecv+0x4e>
	{
		ERROR("netRecv: received truncated message\n");
 8018b10:	f107 031c 	add.w	r3, r7, #28
 8018b14:	4618      	mov	r0, r3
 8018b16:	f000 fe01 	bl	801971c <getTime>
 8018b1a:	69fb      	ldr	r3, [r7, #28]
 8018b1c:	6a3a      	ldr	r2, [r7, #32]
 8018b1e:	4619      	mov	r1, r3
 8018b20:	482b      	ldr	r0, [pc, #172]	; (8018bd0 <netRecv+0xe8>)
 8018b22:	f001 fdfb 	bl	801a71c <iprintf>
 8018b26:	482b      	ldr	r0, [pc, #172]	; (8018bd4 <netRecv+0xec>)
 8018b28:	f001 fe6c 	bl	801a804 <puts>
		pbuf_free(p);
 8018b2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018b2e:	f7f1 fc3b 	bl	800a3a8 <pbuf_free>
		return 0;
 8018b32:	2300      	movs	r3, #0
 8018b34:	e047      	b.n	8018bc6 <netRecv+0xde>
	}

	/* Verify there is contents to copy. */
	if (p->tot_len == 0)
 8018b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b38:	891b      	ldrh	r3, [r3, #8]
 8018b3a:	2b00      	cmp	r3, #0
 8018b3c:	d112      	bne.n	8018b64 <netRecv+0x7c>
	{
		ERROR("netRecv: received empty packet\n");
 8018b3e:	f107 0314 	add.w	r3, r7, #20
 8018b42:	4618      	mov	r0, r3
 8018b44:	f000 fdea 	bl	801971c <getTime>
 8018b48:	697b      	ldr	r3, [r7, #20]
 8018b4a:	69ba      	ldr	r2, [r7, #24]
 8018b4c:	4619      	mov	r1, r3
 8018b4e:	4820      	ldr	r0, [pc, #128]	; (8018bd0 <netRecv+0xe8>)
 8018b50:	f001 fde4 	bl	801a71c <iprintf>
 8018b54:	4820      	ldr	r0, [pc, #128]	; (8018bd8 <netRecv+0xf0>)
 8018b56:	f001 fe55 	bl	801a804 <puts>
		pbuf_free(p);
 8018b5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018b5c:	f7f1 fc24 	bl	800a3a8 <pbuf_free>
		return 0;
 8018b60:	2300      	movs	r3, #0
 8018b62:	e030      	b.n	8018bc6 <netRecv+0xde>
	}

	if (time != NULL)
 8018b64:	68bb      	ldr	r3, [r7, #8]
 8018b66:	2b00      	cmp	r3, #0
 8018b68:	d002      	beq.n	8018b70 <netRecv+0x88>
	{
#if LWIP_PTP
		time->seconds = p->time_sec;
		time->nanoseconds = p->time_nsec;
#else
		getTime(time);
 8018b6a:	68b8      	ldr	r0, [r7, #8]
 8018b6c:	f000 fdd6 	bl	801971c <getTime>
#endif
	}

	/* Get the length of the buffer to copy. */
	length = p->tot_len;
 8018b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b72:	891b      	ldrh	r3, [r3, #8]
 8018b74:	84fb      	strh	r3, [r7, #38]	; 0x26

	/* Copy the pbuf payload into the buffer. */
	pcopy = p;
 8018b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b78:	62fb      	str	r3, [r7, #44]	; 0x2c
	j = 0;
 8018b7a:	2300      	movs	r3, #0
 8018b7c:	633b      	str	r3, [r7, #48]	; 0x30
	for (i = 0; i < length; i++)
 8018b7e:	2300      	movs	r3, #0
 8018b80:	637b      	str	r3, [r7, #52]	; 0x34
 8018b82:	e018      	b.n	8018bb6 <netRecv+0xce>
	{
		// Copy the next byte in the payload.
		buf[i] = ((u8_t*) pcopy->payload)[j++];
 8018b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b86:	685a      	ldr	r2, [r3, #4]
 8018b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b8a:	1c59      	adds	r1, r3, #1
 8018b8c:	6339      	str	r1, [r7, #48]	; 0x30
 8018b8e:	441a      	add	r2, r3
 8018b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018b92:	68f9      	ldr	r1, [r7, #12]
 8018b94:	440b      	add	r3, r1
 8018b96:	7812      	ldrb	r2, [r2, #0]
 8018b98:	701a      	strb	r2, [r3, #0]

		// Skip to the next buffer in the payload?
		if (j == pcopy->len)
 8018b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b9c:	895b      	ldrh	r3, [r3, #10]
 8018b9e:	461a      	mov	r2, r3
 8018ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ba2:	4293      	cmp	r3, r2
 8018ba4:	d104      	bne.n	8018bb0 <netRecv+0xc8>
		{
			// Move to the next buffer.
			pcopy = pcopy->next;
 8018ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ba8:	681b      	ldr	r3, [r3, #0]
 8018baa:	62fb      	str	r3, [r7, #44]	; 0x2c
			j = 0;
 8018bac:	2300      	movs	r3, #0
 8018bae:	633b      	str	r3, [r7, #48]	; 0x30
	for (i = 0; i < length; i++)
 8018bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018bb2:	3301      	adds	r3, #1
 8018bb4:	637b      	str	r3, [r7, #52]	; 0x34
 8018bb6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018bb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018bba:	429a      	cmp	r2, r3
 8018bbc:	dbe2      	blt.n	8018b84 <netRecv+0x9c>
		}
	}

	/* Free up the pbuf (chain). */
	pbuf_free(p);
 8018bbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018bc0:	f7f1 fbf2 	bl	800a3a8 <pbuf_free>

	return length;
 8018bc4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8018bc6:	4618      	mov	r0, r3
 8018bc8:	3738      	adds	r7, #56	; 0x38
 8018bca:	46bd      	mov	sp, r7
 8018bcc:	bd80      	pop	{r7, pc}
 8018bce:	bf00      	nop
 8018bd0:	08021518 	.word	0x08021518
 8018bd4:	08021678 	.word	0x08021678
 8018bd8:	0802169c 	.word	0x0802169c

08018bdc <netRecvEvent>:

ssize_t netRecvEvent(NetPath *netPath, octet_t *buf, TimeInternal *time)
{
 8018bdc:	b580      	push	{r7, lr}
 8018bde:	b084      	sub	sp, #16
 8018be0:	af00      	add	r7, sp, #0
 8018be2:	60f8      	str	r0, [r7, #12]
 8018be4:	60b9      	str	r1, [r7, #8]
 8018be6:	607a      	str	r2, [r7, #4]
	return netRecv(buf, time, &netPath->eventQ);
 8018be8:	68fb      	ldr	r3, [r7, #12]
 8018bea:	3314      	adds	r3, #20
 8018bec:	461a      	mov	r2, r3
 8018bee:	6879      	ldr	r1, [r7, #4]
 8018bf0:	68b8      	ldr	r0, [r7, #8]
 8018bf2:	f7ff ff79 	bl	8018ae8 <netRecv>
 8018bf6:	4603      	mov	r3, r0
}
 8018bf8:	4618      	mov	r0, r3
 8018bfa:	3710      	adds	r7, #16
 8018bfc:	46bd      	mov	sp, r7
 8018bfe:	bd80      	pop	{r7, pc}

08018c00 <netRecvGeneral>:

ssize_t netRecvGeneral(NetPath *netPath, octet_t *buf, TimeInternal *time)
{
 8018c00:	b580      	push	{r7, lr}
 8018c02:	b084      	sub	sp, #16
 8018c04:	af00      	add	r7, sp, #0
 8018c06:	60f8      	str	r0, [r7, #12]
 8018c08:	60b9      	str	r1, [r7, #8]
 8018c0a:	607a      	str	r2, [r7, #4]
	return netRecv(buf, time, &netPath->generalQ);
 8018c0c:	68fb      	ldr	r3, [r7, #12]
 8018c0e:	332c      	adds	r3, #44	; 0x2c
 8018c10:	461a      	mov	r2, r3
 8018c12:	6879      	ldr	r1, [r7, #4]
 8018c14:	68b8      	ldr	r0, [r7, #8]
 8018c16:	f7ff ff67 	bl	8018ae8 <netRecv>
 8018c1a:	4603      	mov	r3, r0
}
 8018c1c:	4618      	mov	r0, r3
 8018c1e:	3710      	adds	r7, #16
 8018c20:	46bd      	mov	sp, r7
 8018c22:	bd80      	pop	{r7, pc}

08018c24 <netSend>:

static ssize_t netSend(const octet_t *buf, int16_t length, TimeInternal *time,
		const int32_t *addr, struct udp_pcb *pcb)
{
 8018c24:	b580      	push	{r7, lr}
 8018c26:	b090      	sub	sp, #64	; 0x40
 8018c28:	af00      	add	r7, sp, #0
 8018c2a:	60f8      	str	r0, [r7, #12]
 8018c2c:	607a      	str	r2, [r7, #4]
 8018c2e:	603b      	str	r3, [r7, #0]
 8018c30:	460b      	mov	r3, r1
 8018c32:	817b      	strh	r3, [r7, #10]
	err_t result;
	struct pbuf *p;

	/* Allocate the tx pbuf based on the current size. */
	p = pbuf_alloc(PBUF_TRANSPORT, length, PBUF_RAM);
 8018c34:	897b      	ldrh	r3, [r7, #10]
 8018c36:	2200      	movs	r2, #0
 8018c38:	4619      	mov	r1, r3
 8018c3a:	2000      	movs	r0, #0
 8018c3c:	f7f1 f842 	bl	8009cc4 <pbuf_alloc>
 8018c40:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (NULL == p)
 8018c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018c44:	2b00      	cmp	r3, #0
 8018c46:	d10e      	bne.n	8018c66 <netSend+0x42>
	{
		ERROR("netSend: Failed to allocate Tx Buffer\n");
 8018c48:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8018c4c:	4618      	mov	r0, r3
 8018c4e:	f000 fd65 	bl	801971c <getTime>
 8018c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018c54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018c56:	4619      	mov	r1, r3
 8018c58:	483b      	ldr	r0, [pc, #236]	; (8018d48 <netSend+0x124>)
 8018c5a:	f001 fd5f 	bl	801a71c <iprintf>
 8018c5e:	483b      	ldr	r0, [pc, #236]	; (8018d4c <netSend+0x128>)
 8018c60:	f001 fdd0 	bl	801a804 <puts>
		goto fail01;
 8018c64:	e069      	b.n	8018d3a <netSend+0x116>
	}

	/* Copy the incoming data into the pbuf payload. */
	result = pbuf_take(p, buf, length);
 8018c66:	897b      	ldrh	r3, [r7, #10]
 8018c68:	461a      	mov	r2, r3
 8018c6a:	68f9      	ldr	r1, [r7, #12]
 8018c6c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8018c6e:	f7f1 fe5b 	bl	800a928 <pbuf_take>
 8018c72:	4603      	mov	r3, r0
 8018c74:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	if (ERR_OK != result)
 8018c78:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8018c7c:	2b00      	cmp	r3, #0
 8018c7e:	d011      	beq.n	8018ca4 <netSend+0x80>
	{
		ERROR("netSend: Failed to copy data to Pbuf (%d)\n", result);
 8018c80:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8018c84:	4618      	mov	r0, r3
 8018c86:	f000 fd49 	bl	801971c <getTime>
 8018c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018c8e:	4619      	mov	r1, r3
 8018c90:	482d      	ldr	r0, [pc, #180]	; (8018d48 <netSend+0x124>)
 8018c92:	f001 fd43 	bl	801a71c <iprintf>
 8018c96:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8018c9a:	4619      	mov	r1, r3
 8018c9c:	482c      	ldr	r0, [pc, #176]	; (8018d50 <netSend+0x12c>)
 8018c9e:	f001 fd3d 	bl	801a71c <iprintf>
		goto fail02;
 8018ca2:	e047      	b.n	8018d34 <netSend+0x110>

	/* send the buffer. */
#if PROTOCOL == IEEE802_3
	result = raw_sendto(p);
#else
	result = udp_sendto(pcb, p, (void*) addr, pcb->local_port);
 8018ca4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018ca6:	8a5b      	ldrh	r3, [r3, #18]
 8018ca8:	683a      	ldr	r2, [r7, #0]
 8018caa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8018cac:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8018cae:	f7f6 fd95 	bl	800f7dc <udp_sendto>
 8018cb2:	4603      	mov	r3, r0
 8018cb4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
#endif
	if (ERR_OK != result)
 8018cb8:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8018cbc:	2b00      	cmp	r3, #0
 8018cbe:	d011      	beq.n	8018ce4 <netSend+0xc0>
	{
		ERROR("netSend: Failed to send data (%d)\n", result);
 8018cc0:	f107 0320 	add.w	r3, r7, #32
 8018cc4:	4618      	mov	r0, r3
 8018cc6:	f000 fd29 	bl	801971c <getTime>
 8018cca:	6a3b      	ldr	r3, [r7, #32]
 8018ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018cce:	4619      	mov	r1, r3
 8018cd0:	481d      	ldr	r0, [pc, #116]	; (8018d48 <netSend+0x124>)
 8018cd2:	f001 fd23 	bl	801a71c <iprintf>
 8018cd6:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8018cda:	4619      	mov	r1, r3
 8018cdc:	481d      	ldr	r0, [pc, #116]	; (8018d54 <netSend+0x130>)
 8018cde:	f001 fd1d 	bl	801a71c <iprintf>
		goto fail02;
 8018ce2:	e027      	b.n	8018d34 <netSend+0x110>
	}

	if (time != NULL)
 8018ce4:	687b      	ldr	r3, [r7, #4]
 8018ce6:	2b00      	cmp	r3, #0
 8018ce8:	d016      	beq.n	8018d18 <netSend+0xf4>
		/* TODO: use of loopback mode */
		/*
		 time->seconds = 0;
		 time->nanoseconds = 0;
		 */
		getTime(time);
 8018cea:	6878      	ldr	r0, [r7, #4]
 8018cec:	f000 fd16 	bl	801971c <getTime>
#endif
		DBGV("netSend: %d sec %d nsec\n", time->seconds, time->nanoseconds);
 8018cf0:	f107 0318 	add.w	r3, r7, #24
 8018cf4:	4618      	mov	r0, r3
 8018cf6:	f000 fd11 	bl	801971c <getTime>
 8018cfa:	69bb      	ldr	r3, [r7, #24]
 8018cfc:	69fa      	ldr	r2, [r7, #28]
 8018cfe:	4619      	mov	r1, r3
 8018d00:	4815      	ldr	r0, [pc, #84]	; (8018d58 <netSend+0x134>)
 8018d02:	f001 fd0b 	bl	801a71c <iprintf>
 8018d06:	687b      	ldr	r3, [r7, #4]
 8018d08:	6819      	ldr	r1, [r3, #0]
 8018d0a:	687b      	ldr	r3, [r7, #4]
 8018d0c:	685b      	ldr	r3, [r3, #4]
 8018d0e:	461a      	mov	r2, r3
 8018d10:	4812      	ldr	r0, [pc, #72]	; (8018d5c <netSend+0x138>)
 8018d12:	f001 fd03 	bl	801a71c <iprintf>
 8018d16:	e00d      	b.n	8018d34 <netSend+0x110>
	}
	else
	{
		DBGV("netSend\n");
 8018d18:	f107 0310 	add.w	r3, r7, #16
 8018d1c:	4618      	mov	r0, r3
 8018d1e:	f000 fcfd 	bl	801971c <getTime>
 8018d22:	693b      	ldr	r3, [r7, #16]
 8018d24:	697a      	ldr	r2, [r7, #20]
 8018d26:	4619      	mov	r1, r3
 8018d28:	480b      	ldr	r0, [pc, #44]	; (8018d58 <netSend+0x134>)
 8018d2a:	f001 fcf7 	bl	801a71c <iprintf>
 8018d2e:	480c      	ldr	r0, [pc, #48]	; (8018d60 <netSend+0x13c>)
 8018d30:	f001 fd68 	bl	801a804 <puts>
	}

	fail02: pbuf_free(p);
 8018d34:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8018d36:	f7f1 fb37 	bl	800a3a8 <pbuf_free>

	fail01: return length;
 8018d3a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]

	/*  return (0 == result) ? length : 0; */
}
 8018d3e:	4618      	mov	r0, r3
 8018d40:	3740      	adds	r7, #64	; 0x40
 8018d42:	46bd      	mov	sp, r7
 8018d44:	bd80      	pop	{r7, pc}
 8018d46:	bf00      	nop
 8018d48:	08021518 	.word	0x08021518
 8018d4c:	080216bc 	.word	0x080216bc
 8018d50:	080216e4 	.word	0x080216e4
 8018d54:	08021710 	.word	0x08021710
 8018d58:	08021734 	.word	0x08021734
 8018d5c:	08021744 	.word	0x08021744
 8018d60:	08021760 	.word	0x08021760

08018d64 <netSendEvent>:

ssize_t netSendEvent(NetPath *netPath, const octet_t *buf, int16_t length,
		TimeInternal *time)
{
 8018d64:	b580      	push	{r7, lr}
 8018d66:	b086      	sub	sp, #24
 8018d68:	af02      	add	r7, sp, #8
 8018d6a:	60f8      	str	r0, [r7, #12]
 8018d6c:	60b9      	str	r1, [r7, #8]
 8018d6e:	603b      	str	r3, [r7, #0]
 8018d70:	4613      	mov	r3, r2
 8018d72:	80fb      	strh	r3, [r7, #6]
	return netSend(buf, length, time, &netPath->multicastAddr,
 8018d74:	68fa      	ldr	r2, [r7, #12]
 8018d76:	68fb      	ldr	r3, [r7, #12]
 8018d78:	68db      	ldr	r3, [r3, #12]
 8018d7a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8018d7e:	9300      	str	r3, [sp, #0]
 8018d80:	4613      	mov	r3, r2
 8018d82:	683a      	ldr	r2, [r7, #0]
 8018d84:	68b8      	ldr	r0, [r7, #8]
 8018d86:	f7ff ff4d 	bl	8018c24 <netSend>
 8018d8a:	4603      	mov	r3, r0
			netPath->eventPcb);
}
 8018d8c:	4618      	mov	r0, r3
 8018d8e:	3710      	adds	r7, #16
 8018d90:	46bd      	mov	sp, r7
 8018d92:	bd80      	pop	{r7, pc}

08018d94 <netSendGeneral>:

ssize_t netSendGeneral(NetPath *netPath, const octet_t *buf, int16_t length)
{
 8018d94:	b580      	push	{r7, lr}
 8018d96:	b086      	sub	sp, #24
 8018d98:	af02      	add	r7, sp, #8
 8018d9a:	60f8      	str	r0, [r7, #12]
 8018d9c:	60b9      	str	r1, [r7, #8]
 8018d9e:	4613      	mov	r3, r2
 8018da0:	80fb      	strh	r3, [r7, #6]
	return netSend(buf, length, NULL, &netPath->multicastAddr,
 8018da2:	68fa      	ldr	r2, [r7, #12]
 8018da4:	68fb      	ldr	r3, [r7, #12]
 8018da6:	691b      	ldr	r3, [r3, #16]
 8018da8:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8018dac:	9300      	str	r3, [sp, #0]
 8018dae:	4613      	mov	r3, r2
 8018db0:	2200      	movs	r2, #0
 8018db2:	68b8      	ldr	r0, [r7, #8]
 8018db4:	f7ff ff36 	bl	8018c24 <netSend>
 8018db8:	4603      	mov	r3, r0
			netPath->generalPcb);
}
 8018dba:	4618      	mov	r0, r3
 8018dbc:	3710      	adds	r7, #16
 8018dbe:	46bd      	mov	sp, r7
 8018dc0:	bd80      	pop	{r7, pc}

08018dc2 <netSendPeerGeneral>:

ssize_t netSendPeerGeneral(NetPath *netPath, const octet_t *buf, int16_t length)
{
 8018dc2:	b580      	push	{r7, lr}
 8018dc4:	b086      	sub	sp, #24
 8018dc6:	af02      	add	r7, sp, #8
 8018dc8:	60f8      	str	r0, [r7, #12]
 8018dca:	60b9      	str	r1, [r7, #8]
 8018dcc:	4613      	mov	r3, r2
 8018dce:	80fb      	strh	r3, [r7, #6]
	return netSend(buf, length, NULL, &netPath->peerMulticastAddr,
 8018dd0:	68fb      	ldr	r3, [r7, #12]
 8018dd2:	1d1a      	adds	r2, r3, #4
 8018dd4:	68fb      	ldr	r3, [r7, #12]
 8018dd6:	691b      	ldr	r3, [r3, #16]
 8018dd8:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8018ddc:	9300      	str	r3, [sp, #0]
 8018dde:	4613      	mov	r3, r2
 8018de0:	2200      	movs	r2, #0
 8018de2:	68b8      	ldr	r0, [r7, #8]
 8018de4:	f7ff ff1e 	bl	8018c24 <netSend>
 8018de8:	4603      	mov	r3, r0
			netPath->generalPcb);
}
 8018dea:	4618      	mov	r0, r3
 8018dec:	3710      	adds	r7, #16
 8018dee:	46bd      	mov	sp, r7
 8018df0:	bd80      	pop	{r7, pc}

08018df2 <netSendPeerEvent>:

ssize_t netSendPeerEvent(NetPath *netPath, const octet_t *buf, int16_t length,
		TimeInternal *time)
{
 8018df2:	b580      	push	{r7, lr}
 8018df4:	b086      	sub	sp, #24
 8018df6:	af02      	add	r7, sp, #8
 8018df8:	60f8      	str	r0, [r7, #12]
 8018dfa:	60b9      	str	r1, [r7, #8]
 8018dfc:	603b      	str	r3, [r7, #0]
 8018dfe:	4613      	mov	r3, r2
 8018e00:	80fb      	strh	r3, [r7, #6]
	return netSend(buf, length, time, &netPath->peerMulticastAddr,
 8018e02:	68fb      	ldr	r3, [r7, #12]
 8018e04:	1d1a      	adds	r2, r3, #4
 8018e06:	68fb      	ldr	r3, [r7, #12]
 8018e08:	68db      	ldr	r3, [r3, #12]
 8018e0a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8018e0e:	9300      	str	r3, [sp, #0]
 8018e10:	4613      	mov	r3, r2
 8018e12:	683a      	ldr	r2, [r7, #0]
 8018e14:	68b8      	ldr	r0, [r7, #8]
 8018e16:	f7ff ff05 	bl	8018c24 <netSend>
 8018e1a:	4603      	mov	r3, r0
			netPath->eventPcb);
}
 8018e1c:	4618      	mov	r0, r3
 8018e1e:	3710      	adds	r7, #16
 8018e20:	46bd      	mov	sp, r7
 8018e22:	bd80      	pop	{r7, pc}

08018e24 <max>:

/**
 * \brief return maximum of two numbers
 */
static __INLINE int32_t max(int32_t a, int32_t b)
{
 8018e24:	b480      	push	{r7}
 8018e26:	b083      	sub	sp, #12
 8018e28:	af00      	add	r7, sp, #0
 8018e2a:	6078      	str	r0, [r7, #4]
 8018e2c:	6039      	str	r1, [r7, #0]
	return a > b ? a : b;
 8018e2e:	683a      	ldr	r2, [r7, #0]
 8018e30:	687b      	ldr	r3, [r7, #4]
 8018e32:	4293      	cmp	r3, r2
 8018e34:	bfb8      	it	lt
 8018e36:	4613      	movlt	r3, r2
}
 8018e38:	4618      	mov	r0, r3
 8018e3a:	370c      	adds	r7, #12
 8018e3c:	46bd      	mov	sp, r7
 8018e3e:	bc80      	pop	{r7}
 8018e40:	4770      	bx	lr

08018e42 <min>:

/**
 * \brief return minimum of two numbers
 */
static __INLINE int32_t min(int32_t a, int32_t b)
{
 8018e42:	b480      	push	{r7}
 8018e44:	b083      	sub	sp, #12
 8018e46:	af00      	add	r7, sp, #0
 8018e48:	6078      	str	r0, [r7, #4]
 8018e4a:	6039      	str	r1, [r7, #0]
	return a > b ? b : a;
 8018e4c:	687a      	ldr	r2, [r7, #4]
 8018e4e:	683b      	ldr	r3, [r7, #0]
 8018e50:	4293      	cmp	r3, r2
 8018e52:	bfa8      	it	ge
 8018e54:	4613      	movge	r3, r2
}
 8018e56:	4618      	mov	r0, r3
 8018e58:	370c      	adds	r7, #12
 8018e5a:	46bd      	mov	sp, r7
 8018e5c:	bc80      	pop	{r7}
 8018e5e:	4770      	bx	lr

08018e60 <initClock>:
#include "../ptpd.h"

void initClock(PtpClock *ptpClock)
{
 8018e60:	b580      	push	{r7, lr}
 8018e62:	b084      	sub	sp, #16
 8018e64:	af00      	add	r7, sp, #0
 8018e66:	6078      	str	r0, [r7, #4]
	DBG("initClock\n");
 8018e68:	f107 0308 	add.w	r3, r7, #8
 8018e6c:	4618      	mov	r0, r3
 8018e6e:	f000 fc55 	bl	801971c <getTime>
 8018e72:	68bb      	ldr	r3, [r7, #8]
 8018e74:	68fa      	ldr	r2, [r7, #12]
 8018e76:	4619      	mov	r1, r3
 8018e78:	483d      	ldr	r0, [pc, #244]	; (8018f70 <initClock+0x110>)
 8018e7a:	f001 fc4f 	bl	801a71c <iprintf>
 8018e7e:	483d      	ldr	r0, [pc, #244]	; (8018f74 <initClock+0x114>)
 8018e80:	f001 fcc0 	bl	801a804 <puts>

	/* Clear vars */
	ptpClock->Tms.seconds = ptpClock->Tms.nanoseconds = 0;
 8018e84:	687b      	ldr	r3, [r7, #4]
 8018e86:	2200      	movs	r2, #0
 8018e88:	f8c3 232c 	str.w	r2, [r3, #812]	; 0x32c
 8018e8c:	687b      	ldr	r3, [r7, #4]
 8018e8e:	f8d3 232c 	ldr.w	r2, [r3, #812]	; 0x32c
 8018e92:	687b      	ldr	r3, [r7, #4]
 8018e94:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
	ptpClock->observedDrift = 0;  /* clears clock servo accumulator (the I term) */
 8018e98:	687b      	ldr	r3, [r7, #4]
 8018e9a:	2200      	movs	r2, #0
 8018e9c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

	/* One way delay */
	ptpClock->owd_filt.n = 0;
 8018ea0:	687b      	ldr	r3, [r7, #4]
 8018ea2:	2200      	movs	r2, #0
 8018ea4:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
	ptpClock->owd_filt.s = ptpClock->servo.sDelay;
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	f8d3 3434 	ldr.w	r3, [r3, #1076]	; 0x434
 8018eae:	4618      	mov	r0, r3
 8018eb0:	f7e8 f96e 	bl	8001190 <__aeabi_f2iz>
 8018eb4:	4603      	mov	r3, r0
 8018eb6:	b21a      	sxth	r2, r3
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	f8a3 23a8 	strh.w	r2, [r3, #936]	; 0x3a8

	/* Offset from master */
	ptpClock->ofm_filt.n = 0;
 8018ebe:	687b      	ldr	r3, [r7, #4]
 8018ec0:	2200      	movs	r2, #0
 8018ec2:	f8c3 239c 	str.w	r2, [r3, #924]	; 0x39c
	ptpClock->ofm_filt.s = ptpClock->servo.sOffset;
 8018ec6:	687b      	ldr	r3, [r7, #4]
 8018ec8:	f9b3 2438 	ldrsh.w	r2, [r3, #1080]	; 0x438
 8018ecc:	687b      	ldr	r3, [r7, #4]
 8018ece:	f8a3 2398 	strh.w	r2, [r3, #920]	; 0x398
		ptpClock->slv_filt.s = 6;
		ptpClock->offsetHistory[0] = 0;
		ptpClock->offsetHistory[1] = 0;
	}

	ptpClock->waitingForFollowUp = FALSE;
 8018ed2:	687b      	ldr	r3, [r7, #4]
 8018ed4:	2200      	movs	r2, #0
 8018ed6:	f883 238c 	strb.w	r2, [r3, #908]	; 0x38c

	ptpClock->waitingForPDelayRespFollowUp = FALSE;
 8018eda:	687b      	ldr	r3, [r7, #4]
 8018edc:	2200      	movs	r2, #0
 8018ede:	f883 238d 	strb.w	r2, [r3, #909]	; 0x38d

	ptpClock->pdelay_t1.seconds = ptpClock->pdelay_t1.nanoseconds = 0;
 8018ee2:	687b      	ldr	r3, [r7, #4]
 8018ee4:	2200      	movs	r2, #0
 8018ee6:	f8c3 233c 	str.w	r2, [r3, #828]	; 0x33c
 8018eea:	687b      	ldr	r3, [r7, #4]
 8018eec:	f8d3 233c 	ldr.w	r2, [r3, #828]	; 0x33c
 8018ef0:	687b      	ldr	r3, [r7, #4]
 8018ef2:	f8c3 2338 	str.w	r2, [r3, #824]	; 0x338
	ptpClock->pdelay_t2.seconds = ptpClock->pdelay_t2.nanoseconds = 0;
 8018ef6:	687b      	ldr	r3, [r7, #4]
 8018ef8:	2200      	movs	r2, #0
 8018efa:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
 8018efe:	687b      	ldr	r3, [r7, #4]
 8018f00:	f8d3 2344 	ldr.w	r2, [r3, #836]	; 0x344
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
	ptpClock->pdelay_t3.seconds = ptpClock->pdelay_t3.nanoseconds = 0;
 8018f0a:	687b      	ldr	r3, [r7, #4]
 8018f0c:	2200      	movs	r2, #0
 8018f0e:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
 8018f12:	687b      	ldr	r3, [r7, #4]
 8018f14:	f8d3 234c 	ldr.w	r2, [r3, #844]	; 0x34c
 8018f18:	687b      	ldr	r3, [r7, #4]
 8018f1a:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	ptpClock->pdelay_t4.seconds = ptpClock->pdelay_t4.nanoseconds = 0;
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	2200      	movs	r2, #0
 8018f22:	f8c3 2354 	str.w	r2, [r3, #852]	; 0x354
 8018f26:	687b      	ldr	r3, [r7, #4]
 8018f28:	f8d3 2354 	ldr.w	r2, [r3, #852]	; 0x354
 8018f2c:	687b      	ldr	r3, [r7, #4]
 8018f2e:	f8c3 2350 	str.w	r2, [r3, #848]	; 0x350

	/* Reset parent statistics */
	ptpClock->parentDS.parentStats = FALSE;
 8018f32:	687b      	ldr	r3, [r7, #4]
 8018f34:	2200      	movs	r2, #0
 8018f36:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	ptpClock->parentDS.observedParentClockPhaseChangeRate = 0;
 8018f3a:	687b      	ldr	r3, [r7, #4]
 8018f3c:	2200      	movs	r2, #0
 8018f3e:	639a      	str	r2, [r3, #56]	; 0x38
	ptpClock->parentDS.observedParentOffsetScaledLogVariance = 0;
 8018f40:	687b      	ldr	r3, [r7, #4]
 8018f42:	2200      	movs	r2, #0
 8018f44:	869a      	strh	r2, [r3, #52]	; 0x34

	/* Level clock */
	if (!ptpClock->servo.noAdjust)
 8018f46:	687b      	ldr	r3, [r7, #4]
 8018f48:	f893 3429 	ldrb.w	r3, [r3, #1065]	; 0x429
 8018f4c:	f083 0301 	eor.w	r3, r3, #1
 8018f50:	b2db      	uxtb	r3, r3
 8018f52:	2b00      	cmp	r3, #0
 8018f54:	d002      	beq.n	8018f5c <initClock+0xfc>
		adjFreq(0);
 8018f56:	2000      	movs	r0, #0
 8018f58:	f000 fc2c 	bl	80197b4 <adjFreq>

	netEmptyEventQ(&ptpClock->netPath);
 8018f5c:	687b      	ldr	r3, [r7, #4]
 8018f5e:	f503 7373 	add.w	r3, r3, #972	; 0x3cc
 8018f62:	4618      	mov	r0, r3
 8018f64:	f7ff fdb2 	bl	8018acc <netEmptyEventQ>
}
 8018f68:	bf00      	nop
 8018f6a:	3710      	adds	r7, #16
 8018f6c:	46bd      	mov	sp, r7
 8018f6e:	bd80      	pop	{r7, pc}
 8018f70:	08021768 	.word	0x08021768
 8018f74:	08021778 	.word	0x08021778

08018f78 <order>:

static int32_t order(int32_t n)
{
 8018f78:	b580      	push	{r7, lr}
 8018f7a:	b082      	sub	sp, #8
 8018f7c:	af00      	add	r7, sp, #0
 8018f7e:	6078      	str	r0, [r7, #4]
	if (n < 0) {
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	2b00      	cmp	r3, #0
 8018f84:	da02      	bge.n	8018f8c <order+0x14>
		n = -n;
 8018f86:	687b      	ldr	r3, [r7, #4]
 8018f88:	425b      	negs	r3, r3
 8018f8a:	607b      	str	r3, [r7, #4]
	}
	if (n == 0) {
 8018f8c:	687b      	ldr	r3, [r7, #4]
 8018f8e:	2b00      	cmp	r3, #0
 8018f90:	d101      	bne.n	8018f96 <order+0x1e>
		return 0;
 8018f92:	2300      	movs	r3, #0
 8018f94:	e004      	b.n	8018fa0 <order+0x28>
	}
	return floorLog2(n);
 8018f96:	687b      	ldr	r3, [r7, #4]
 8018f98:	4618      	mov	r0, r3
 8018f9a:	f7fb fba3 	bl	80146e4 <floorLog2>
 8018f9e:	4603      	mov	r3, r0
}
 8018fa0:	4618      	mov	r0, r3
 8018fa2:	3708      	adds	r7, #8
 8018fa4:	46bd      	mov	sp, r7
 8018fa6:	bd80      	pop	{r7, pc}

08018fa8 <filter>:

/* Exponencial smoothing */
static void filter(int32_t * nsec_current, Filter * filt)
{
 8018fa8:	b580      	push	{r7, lr}
 8018faa:	b086      	sub	sp, #24
 8018fac:	af00      	add	r7, sp, #0
 8018fae:	6078      	str	r0, [r7, #4]
 8018fb0:	6039      	str	r1, [r7, #0]
			y_sum[n] = y_sum[n-1] + x[n-1] - y[n-1]
			y[n] = y_sum[n] / 2^s
	*/

	/* Increment number of samples */
	filt->n++;
 8018fb2:	683b      	ldr	r3, [r7, #0]
 8018fb4:	68db      	ldr	r3, [r3, #12]
 8018fb6:	1c5a      	adds	r2, r3, #1
 8018fb8:	683b      	ldr	r3, [r7, #0]
 8018fba:	60da      	str	r2, [r3, #12]

	/* If it is first time, we are running filter, initialize it */
	if (filt->n == 1)
 8018fbc:	683b      	ldr	r3, [r7, #0]
 8018fbe:	68db      	ldr	r3, [r3, #12]
 8018fc0:	2b01      	cmp	r3, #1
 8018fc2:	d10a      	bne.n	8018fda <filter+0x32>
	{
			filt->y_prev = *nsec_current;
 8018fc4:	687b      	ldr	r3, [r7, #4]
 8018fc6:	681a      	ldr	r2, [r3, #0]
 8018fc8:	683b      	ldr	r3, [r7, #0]
 8018fca:	601a      	str	r2, [r3, #0]
			filt->y_sum = *nsec_current;
 8018fcc:	687b      	ldr	r3, [r7, #4]
 8018fce:	681a      	ldr	r2, [r3, #0]
 8018fd0:	683b      	ldr	r3, [r7, #0]
 8018fd2:	605a      	str	r2, [r3, #4]
			filt->s_prev = 0;
 8018fd4:	683b      	ldr	r3, [r7, #0]
 8018fd6:	2200      	movs	r2, #0
 8018fd8:	815a      	strh	r2, [r3, #10]
	}

	s = filt->s;
 8018fda:	683b      	ldr	r3, [r7, #0]
 8018fdc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8018fe0:	617b      	str	r3, [r7, #20]

	/* Speedup filter, if not 2^s > n */
	if ((1<<s) > filt->n)
 8018fe2:	2201      	movs	r2, #1
 8018fe4:	697b      	ldr	r3, [r7, #20]
 8018fe6:	409a      	lsls	r2, r3
 8018fe8:	683b      	ldr	r3, [r7, #0]
 8018fea:	68db      	ldr	r3, [r3, #12]
 8018fec:	429a      	cmp	r2, r3
 8018fee:	dd06      	ble.n	8018ffe <filter+0x56>
	{
		/* Lower the filter order */
		s = order(filt->n);
 8018ff0:	683b      	ldr	r3, [r7, #0]
 8018ff2:	68db      	ldr	r3, [r3, #12]
 8018ff4:	4618      	mov	r0, r3
 8018ff6:	f7ff ffbf 	bl	8018f78 <order>
 8018ffa:	6178      	str	r0, [r7, #20]
 8018ffc:	e004      	b.n	8019008 <filter+0x60>
	}
	else
	{
		/* Avoid overflowing of n */
		filt->n = 1<<s;
 8018ffe:	2201      	movs	r2, #1
 8019000:	697b      	ldr	r3, [r7, #20]
 8019002:	409a      	lsls	r2, r3
 8019004:	683b      	ldr	r3, [r7, #0]
 8019006:	60da      	str	r2, [r3, #12]
	}

	/* Avoid overflowing of filter. 30 is because using signed 32bit integers */
	s2 = 30 - order(max(filt->y_prev, *nsec_current));
 8019008:	683b      	ldr	r3, [r7, #0]
 801900a:	681a      	ldr	r2, [r3, #0]
 801900c:	687b      	ldr	r3, [r7, #4]
 801900e:	681b      	ldr	r3, [r3, #0]
 8019010:	4619      	mov	r1, r3
 8019012:	4610      	mov	r0, r2
 8019014:	f7ff ff06 	bl	8018e24 <max>
 8019018:	4603      	mov	r3, r0
 801901a:	4618      	mov	r0, r3
 801901c:	f7ff ffac 	bl	8018f78 <order>
 8019020:	4603      	mov	r3, r0
 8019022:	f1c3 031e 	rsb	r3, r3, #30
 8019026:	613b      	str	r3, [r7, #16]

	/* Use the lower filter order, higher will overflow */
	s = min(s, s2);
 8019028:	6939      	ldr	r1, [r7, #16]
 801902a:	6978      	ldr	r0, [r7, #20]
 801902c:	f7ff ff09 	bl	8018e42 <min>
 8019030:	6178      	str	r0, [r7, #20]

	/* If the order of the filter changed, change also y_sum value */
	if (filt->s_prev > s) {
 8019032:	683b      	ldr	r3, [r7, #0]
 8019034:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8019038:	461a      	mov	r2, r3
 801903a:	697b      	ldr	r3, [r7, #20]
 801903c:	4293      	cmp	r3, r2
 801903e:	da0b      	bge.n	8019058 <filter+0xb0>
		filt->y_sum >>= (filt->s_prev - s);
 8019040:	683b      	ldr	r3, [r7, #0]
 8019042:	685a      	ldr	r2, [r3, #4]
 8019044:	683b      	ldr	r3, [r7, #0]
 8019046:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801904a:	4619      	mov	r1, r3
 801904c:	697b      	ldr	r3, [r7, #20]
 801904e:	1acb      	subs	r3, r1, r3
 8019050:	411a      	asrs	r2, r3
 8019052:	683b      	ldr	r3, [r7, #0]
 8019054:	605a      	str	r2, [r3, #4]
 8019056:	e011      	b.n	801907c <filter+0xd4>
	} else if (filt->s_prev < s) {
 8019058:	683b      	ldr	r3, [r7, #0]
 801905a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801905e:	461a      	mov	r2, r3
 8019060:	697b      	ldr	r3, [r7, #20]
 8019062:	4293      	cmp	r3, r2
 8019064:	dd0a      	ble.n	801907c <filter+0xd4>
		filt->y_sum <<= (s - filt->s_prev);
 8019066:	683b      	ldr	r3, [r7, #0]
 8019068:	685a      	ldr	r2, [r3, #4]
 801906a:	683b      	ldr	r3, [r7, #0]
 801906c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8019070:	4619      	mov	r1, r3
 8019072:	697b      	ldr	r3, [r7, #20]
 8019074:	1a5b      	subs	r3, r3, r1
 8019076:	409a      	lsls	r2, r3
 8019078:	683b      	ldr	r3, [r7, #0]
 801907a:	605a      	str	r2, [r3, #4]
	}

	/* Compute the filter itself */
	filt->y_sum += *nsec_current - filt->y_prev;
 801907c:	683b      	ldr	r3, [r7, #0]
 801907e:	685a      	ldr	r2, [r3, #4]
 8019080:	687b      	ldr	r3, [r7, #4]
 8019082:	6819      	ldr	r1, [r3, #0]
 8019084:	683b      	ldr	r3, [r7, #0]
 8019086:	681b      	ldr	r3, [r3, #0]
 8019088:	1acb      	subs	r3, r1, r3
 801908a:	441a      	add	r2, r3
 801908c:	683b      	ldr	r3, [r7, #0]
 801908e:	605a      	str	r2, [r3, #4]
	filt->y_prev = filt->y_sum >> s;
 8019090:	683b      	ldr	r3, [r7, #0]
 8019092:	685a      	ldr	r2, [r3, #4]
 8019094:	697b      	ldr	r3, [r7, #20]
 8019096:	411a      	asrs	r2, r3
 8019098:	683b      	ldr	r3, [r7, #0]
 801909a:	601a      	str	r2, [r3, #0]

	/* Save previous order of the filter */
	filt->s_prev = s;
 801909c:	697b      	ldr	r3, [r7, #20]
 801909e:	b21a      	sxth	r2, r3
 80190a0:	683b      	ldr	r3, [r7, #0]
 80190a2:	815a      	strh	r2, [r3, #10]

	DBGV("filter: %d -> %d (%d)\n", *nsec_current, filt->y_prev, s);
 80190a4:	f107 0308 	add.w	r3, r7, #8
 80190a8:	4618      	mov	r0, r3
 80190aa:	f000 fb37 	bl	801971c <getTime>
 80190ae:	68bb      	ldr	r3, [r7, #8]
 80190b0:	68fa      	ldr	r2, [r7, #12]
 80190b2:	4619      	mov	r1, r3
 80190b4:	4809      	ldr	r0, [pc, #36]	; (80190dc <filter+0x134>)
 80190b6:	f001 fb31 	bl	801a71c <iprintf>
 80190ba:	687b      	ldr	r3, [r7, #4]
 80190bc:	6819      	ldr	r1, [r3, #0]
 80190be:	683b      	ldr	r3, [r7, #0]
 80190c0:	681a      	ldr	r2, [r3, #0]
 80190c2:	697b      	ldr	r3, [r7, #20]
 80190c4:	4806      	ldr	r0, [pc, #24]	; (80190e0 <filter+0x138>)
 80190c6:	f001 fb29 	bl	801a71c <iprintf>

	/* Actualize target value */
	*nsec_current = filt->y_prev;
 80190ca:	683b      	ldr	r3, [r7, #0]
 80190cc:	681a      	ldr	r2, [r3, #0]
 80190ce:	687b      	ldr	r3, [r7, #4]
 80190d0:	601a      	str	r2, [r3, #0]
}
 80190d2:	bf00      	nop
 80190d4:	3718      	adds	r7, #24
 80190d6:	46bd      	mov	sp, r7
 80190d8:	bd80      	pop	{r7, pc}
 80190da:	bf00      	nop
 80190dc:	08021784 	.word	0x08021784
 80190e0:	08021794 	.word	0x08021794

080190e4 <updateOffset>:

/* 11.2 */
void updateOffset(PtpClock *ptpClock, const TimeInternal *syncEventIngressTimestamp,
									const TimeInternal *preciseOriginTimestamp, const TimeInternal *correctionField)
{
 80190e4:	b580      	push	{r7, lr}
 80190e6:	b088      	sub	sp, #32
 80190e8:	af00      	add	r7, sp, #0
 80190ea:	60f8      	str	r0, [r7, #12]
 80190ec:	60b9      	str	r1, [r7, #8]
 80190ee:	607a      	str	r2, [r7, #4]
 80190f0:	603b      	str	r3, [r7, #0]
	DBGV("updateOffset\n");
 80190f2:	f107 0318 	add.w	r3, r7, #24
 80190f6:	4618      	mov	r0, r3
 80190f8:	f000 fb10 	bl	801971c <getTime>
 80190fc:	69bb      	ldr	r3, [r7, #24]
 80190fe:	69fa      	ldr	r2, [r7, #28]
 8019100:	4619      	mov	r1, r3
 8019102:	484e      	ldr	r0, [pc, #312]	; (801923c <updateOffset+0x158>)
 8019104:	f001 fb0a 	bl	801a71c <iprintf>
 8019108:	484d      	ldr	r0, [pc, #308]	; (8019240 <updateOffset+0x15c>)
 801910a:	f001 fb7b 	bl	801a804 <puts>
	/*  <offsetFromMaster> = <syncEventIngressTimestamp> - <preciseOriginTimestamp>
		 - <meanPathDelay>  -  correctionField  of  Sync  message
		 -  correctionField  of  Follow_Up message. */

	/* Compute offsetFromMaster */
	subTime(&ptpClock->Tms, syncEventIngressTimestamp, preciseOriginTimestamp);
 801910e:	68fb      	ldr	r3, [r7, #12]
 8019110:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8019114:	687a      	ldr	r2, [r7, #4]
 8019116:	68b9      	ldr	r1, [r7, #8]
 8019118:	4618      	mov	r0, r3
 801911a:	f7fb fa9c 	bl	8014656 <subTime>
	subTime(&ptpClock->Tms, &ptpClock->Tms, correctionField);
 801911e:	68fb      	ldr	r3, [r7, #12]
 8019120:	f503 704a 	add.w	r0, r3, #808	; 0x328
 8019124:	68fb      	ldr	r3, [r7, #12]
 8019126:	f503 734a 	add.w	r3, r3, #808	; 0x328
 801912a:	683a      	ldr	r2, [r7, #0]
 801912c:	4619      	mov	r1, r3
 801912e:	f7fb fa92 	bl	8014656 <subTime>

	ptpClock->currentDS.offsetFromMaster = ptpClock->Tms;
 8019132:	68fb      	ldr	r3, [r7, #12]
 8019134:	68fa      	ldr	r2, [r7, #12]
 8019136:	3318      	adds	r3, #24
 8019138:	f502 724a 	add.w	r2, r2, #808	; 0x328
 801913c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8019140:	e883 0003 	stmia.w	r3, {r0, r1}

	switch (ptpClock->portDS.delayMechanism)
 8019144:	68fb      	ldr	r3, [r7, #12]
 8019146:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 801914a:	2b01      	cmp	r3, #1
 801914c:	d002      	beq.n	8019154 <updateOffset+0x70>
 801914e:	2b02      	cmp	r3, #2
 8019150:	d00c      	beq.n	801916c <updateOffset+0x88>
		case P2P:
				subTime(&ptpClock->currentDS.offsetFromMaster, &ptpClock->currentDS.offsetFromMaster, &ptpClock->portDS.peerMeanPathDelay);
				break;

		default:
				break;
 8019152:	e017      	b.n	8019184 <updateOffset+0xa0>
				subTime(&ptpClock->currentDS.offsetFromMaster, &ptpClock->currentDS.offsetFromMaster, &ptpClock->currentDS.meanPathDelay);
 8019154:	68fb      	ldr	r3, [r7, #12]
 8019156:	f103 0018 	add.w	r0, r3, #24
 801915a:	68fb      	ldr	r3, [r7, #12]
 801915c:	f103 0118 	add.w	r1, r3, #24
 8019160:	68fb      	ldr	r3, [r7, #12]
 8019162:	3320      	adds	r3, #32
 8019164:	461a      	mov	r2, r3
 8019166:	f7fb fa76 	bl	8014656 <subTime>
				break;
 801916a:	e00b      	b.n	8019184 <updateOffset+0xa0>
				subTime(&ptpClock->currentDS.offsetFromMaster, &ptpClock->currentDS.offsetFromMaster, &ptpClock->portDS.peerMeanPathDelay);
 801916c:	68fb      	ldr	r3, [r7, #12]
 801916e:	f103 0018 	add.w	r0, r3, #24
 8019172:	68fb      	ldr	r3, [r7, #12]
 8019174:	f103 0118 	add.w	r1, r3, #24
 8019178:	68fb      	ldr	r3, [r7, #12]
 801917a:	3364      	adds	r3, #100	; 0x64
 801917c:	461a      	mov	r2, r3
 801917e:	f7fb fa6a 	bl	8014656 <subTime>
				break;
 8019182:	bf00      	nop
	}

	if (ptpClock->currentDS.offsetFromMaster.seconds != 0)
 8019184:	68fb      	ldr	r3, [r7, #12]
 8019186:	699b      	ldr	r3, [r3, #24]
 8019188:	2b00      	cmp	r3, #0
 801918a:	d01b      	beq.n	80191c4 <updateOffset+0xe0>
	{
		if (ptpClock->portDS.portState == PTP_SLAVE)
 801918c:	68fb      	ldr	r3, [r7, #12]
 801918e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8019192:	2b08      	cmp	r3, #8
 8019194:	d107      	bne.n	80191a6 <updateOffset+0xc2>
		{
				setFlag(ptpClock->events, SYNCHRONIZATION_FAULT);
 8019196:	68fb      	ldr	r3, [r7, #12]
 8019198:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
 801919c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80191a0:	68fb      	ldr	r3, [r7, #12]
 80191a2:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
		}

		DBGV("updateOffset: cannot filter seconds\n");
 80191a6:	f107 0310 	add.w	r3, r7, #16
 80191aa:	4618      	mov	r0, r3
 80191ac:	f000 fab6 	bl	801971c <getTime>
 80191b0:	693b      	ldr	r3, [r7, #16]
 80191b2:	697a      	ldr	r2, [r7, #20]
 80191b4:	4619      	mov	r1, r3
 80191b6:	4821      	ldr	r0, [pc, #132]	; (801923c <updateOffset+0x158>)
 80191b8:	f001 fab0 	bl	801a71c <iprintf>
 80191bc:	4821      	ldr	r0, [pc, #132]	; (8019244 <updateOffset+0x160>)
 80191be:	f001 fb21 	bl	801a804 <puts>

		return;
 80191c2:	e037      	b.n	8019234 <updateOffset+0x150>
	}

	/* Filter offsetFromMaster */
	filter(&ptpClock->currentDS.offsetFromMaster.nanoseconds, &ptpClock->ofm_filt);
 80191c4:	68fb      	ldr	r3, [r7, #12]
 80191c6:	f103 021c 	add.w	r2, r3, #28
 80191ca:	68fb      	ldr	r3, [r7, #12]
 80191cc:	f503 7364 	add.w	r3, r3, #912	; 0x390
 80191d0:	4619      	mov	r1, r3
 80191d2:	4610      	mov	r0, r2
 80191d4:	f7ff fee8 	bl	8018fa8 <filter>

	/* Check results */
	if (abs(ptpClock->currentDS.offsetFromMaster.nanoseconds) < DEFAULT_CALIBRATED_OFFSET_NS)
 80191d8:	68fb      	ldr	r3, [r7, #12]
 80191da:	69db      	ldr	r3, [r3, #28]
 80191dc:	4a1a      	ldr	r2, [pc, #104]	; (8019248 <updateOffset+0x164>)
 80191de:	4293      	cmp	r3, r2
 80191e0:	db13      	blt.n	801920a <updateOffset+0x126>
 80191e2:	68fb      	ldr	r3, [r7, #12]
 80191e4:	69db      	ldr	r3, [r3, #28]
 80191e6:	f242 720f 	movw	r2, #9999	; 0x270f
 80191ea:	4293      	cmp	r3, r2
 80191ec:	dc0d      	bgt.n	801920a <updateOffset+0x126>
	{
		if (ptpClock->portDS.portState == PTP_UNCALIBRATED)
 80191ee:	68fb      	ldr	r3, [r7, #12]
 80191f0:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80191f4:	2b07      	cmp	r3, #7
 80191f6:	d11d      	bne.n	8019234 <updateOffset+0x150>
		{
				setFlag(ptpClock->events, MASTER_CLOCK_SELECTED);
 80191f8:	68fb      	ldr	r3, [r7, #12]
 80191fa:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
 80191fe:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8019202:	68fb      	ldr	r3, [r7, #12]
 8019204:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
		if (ptpClock->portDS.portState == PTP_UNCALIBRATED)
 8019208:	e014      	b.n	8019234 <updateOffset+0x150>
		}
	}
	else if (abs(ptpClock->currentDS.offsetFromMaster.nanoseconds) > DEFAULT_UNCALIBRATED_OFFSET_NS)
 801920a:	68fb      	ldr	r3, [r7, #12]
 801920c:	69db      	ldr	r3, [r3, #28]
 801920e:	2b00      	cmp	r3, #0
 8019210:	bfb8      	it	lt
 8019212:	425b      	neglt	r3, r3
 8019214:	4a0d      	ldr	r2, [pc, #52]	; (801924c <updateOffset+0x168>)
 8019216:	4293      	cmp	r3, r2
 8019218:	dd0c      	ble.n	8019234 <updateOffset+0x150>
	{
		if (ptpClock->portDS.portState == PTP_SLAVE)
 801921a:	68fb      	ldr	r3, [r7, #12]
 801921c:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8019220:	2b08      	cmp	r3, #8
 8019222:	d107      	bne.n	8019234 <updateOffset+0x150>
		{
				setFlag(ptpClock->events, SYNCHRONIZATION_FAULT);
 8019224:	68fb      	ldr	r3, [r7, #12]
 8019226:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
 801922a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801922e:	68fb      	ldr	r3, [r7, #12]
 8019230:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
		}
	}
}
 8019234:	3720      	adds	r7, #32
 8019236:	46bd      	mov	sp, r7
 8019238:	bd80      	pop	{r7, pc}
 801923a:	bf00      	nop
 801923c:	08021784 	.word	0x08021784
 8019240:	080217ac 	.word	0x080217ac
 8019244:	080217bc 	.word	0x080217bc
 8019248:	ffffd8f1 	.word	0xffffd8f1
 801924c:	000f4240 	.word	0x000f4240

08019250 <updateDelay>:

/* 11.3 */
void updateDelay(PtpClock * ptpClock, const TimeInternal *delayEventEgressTimestamp,
								 const TimeInternal *recieveTimestamp, const TimeInternal *correctionField)
{
 8019250:	b580      	push	{r7, lr}
 8019252:	b088      	sub	sp, #32
 8019254:	af00      	add	r7, sp, #0
 8019256:	60f8      	str	r0, [r7, #12]
 8019258:	60b9      	str	r1, [r7, #8]
 801925a:	607a      	str	r2, [r7, #4]
 801925c:	603b      	str	r3, [r7, #0]
	/* Tms valid ? */
	if (0 == ptpClock->ofm_filt.n)
 801925e:	68fb      	ldr	r3, [r7, #12]
 8019260:	f8d3 339c 	ldr.w	r3, [r3, #924]	; 0x39c
 8019264:	2b00      	cmp	r3, #0
 8019266:	d10e      	bne.n	8019286 <updateDelay+0x36>
	{
		DBGV("updateDelay: Tms is not valid");
 8019268:	f107 0318 	add.w	r3, r7, #24
 801926c:	4618      	mov	r0, r3
 801926e:	f000 fa55 	bl	801971c <getTime>
 8019272:	69bb      	ldr	r3, [r7, #24]
 8019274:	69fa      	ldr	r2, [r7, #28]
 8019276:	4619      	mov	r1, r3
 8019278:	4824      	ldr	r0, [pc, #144]	; (801930c <updateDelay+0xbc>)
 801927a:	f001 fa4f 	bl	801a71c <iprintf>
 801927e:	4824      	ldr	r0, [pc, #144]	; (8019310 <updateDelay+0xc0>)
 8019280:	f001 fa4c 	bl	801a71c <iprintf>
		return;
 8019284:	e03f      	b.n	8019306 <updateDelay+0xb6>
	}

	subTime(&ptpClock->Tsm, recieveTimestamp, delayEventEgressTimestamp);
 8019286:	68fb      	ldr	r3, [r7, #12]
 8019288:	f503 734c 	add.w	r3, r3, #816	; 0x330
 801928c:	68ba      	ldr	r2, [r7, #8]
 801928e:	6879      	ldr	r1, [r7, #4]
 8019290:	4618      	mov	r0, r3
 8019292:	f7fb f9e0 	bl	8014656 <subTime>
	subTime(&ptpClock->Tsm, &ptpClock->Tsm, correctionField);
 8019296:	68fb      	ldr	r3, [r7, #12]
 8019298:	f503 704c 	add.w	r0, r3, #816	; 0x330
 801929c:	68fb      	ldr	r3, [r7, #12]
 801929e:	f503 734c 	add.w	r3, r3, #816	; 0x330
 80192a2:	683a      	ldr	r2, [r7, #0]
 80192a4:	4619      	mov	r1, r3
 80192a6:	f7fb f9d6 	bl	8014656 <subTime>
	addTime(&ptpClock->currentDS.meanPathDelay, &ptpClock->Tms, &ptpClock->Tsm);
 80192aa:	68fb      	ldr	r3, [r7, #12]
 80192ac:	f103 0020 	add.w	r0, r3, #32
 80192b0:	68fb      	ldr	r3, [r7, #12]
 80192b2:	f503 714a 	add.w	r1, r3, #808	; 0x328
 80192b6:	68fb      	ldr	r3, [r7, #12]
 80192b8:	f503 734c 	add.w	r3, r3, #816	; 0x330
 80192bc:	461a      	mov	r2, r3
 80192be:	f7fb f9af 	bl	8014620 <addTime>
	div2Time(&ptpClock->currentDS.meanPathDelay);
 80192c2:	68fb      	ldr	r3, [r7, #12]
 80192c4:	3320      	adds	r3, #32
 80192c6:	4618      	mov	r0, r3
 80192c8:	f7fb f9e0 	bl	801468c <div2Time>

	/* Filter delay */
	if (0 != ptpClock->currentDS.meanPathDelay.seconds)
 80192cc:	68fb      	ldr	r3, [r7, #12]
 80192ce:	6a1b      	ldr	r3, [r3, #32]
 80192d0:	2b00      	cmp	r3, #0
 80192d2:	d00e      	beq.n	80192f2 <updateDelay+0xa2>
	{
		DBGV("updateDelay: cannot filter with seconds");
 80192d4:	f107 0310 	add.w	r3, r7, #16
 80192d8:	4618      	mov	r0, r3
 80192da:	f000 fa1f 	bl	801971c <getTime>
 80192de:	693b      	ldr	r3, [r7, #16]
 80192e0:	697a      	ldr	r2, [r7, #20]
 80192e2:	4619      	mov	r1, r3
 80192e4:	4809      	ldr	r0, [pc, #36]	; (801930c <updateDelay+0xbc>)
 80192e6:	f001 fa19 	bl	801a71c <iprintf>
 80192ea:	480a      	ldr	r0, [pc, #40]	; (8019314 <updateDelay+0xc4>)
 80192ec:	f001 fa16 	bl	801a71c <iprintf>
 80192f0:	e009      	b.n	8019306 <updateDelay+0xb6>
	}
	else
	{
		filter(&ptpClock->currentDS.meanPathDelay.nanoseconds, &ptpClock->owd_filt);
 80192f2:	68fb      	ldr	r3, [r7, #12]
 80192f4:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80192f8:	68fb      	ldr	r3, [r7, #12]
 80192fa:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 80192fe:	4619      	mov	r1, r3
 8019300:	4610      	mov	r0, r2
 8019302:	f7ff fe51 	bl	8018fa8 <filter>
	}
}
 8019306:	3720      	adds	r7, #32
 8019308:	46bd      	mov	sp, r7
 801930a:	bd80      	pop	{r7, pc}
 801930c:	08021784 	.word	0x08021784
 8019310:	080217e0 	.word	0x080217e0
 8019314:	08021800 	.word	0x08021800

08019318 <updatePeerDelay>:

void updatePeerDelay(PtpClock *ptpClock, const TimeInternal *correctionField, bool  twoStep)
{
 8019318:	b580      	push	{r7, lr}
 801931a:	b08c      	sub	sp, #48	; 0x30
 801931c:	af00      	add	r7, sp, #0
 801931e:	60f8      	str	r0, [r7, #12]
 8019320:	60b9      	str	r1, [r7, #8]
 8019322:	4613      	mov	r3, r2
 8019324:	71fb      	strb	r3, [r7, #7]
	DBGV("updatePeerDelay\n");
 8019326:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801932a:	4618      	mov	r0, r3
 801932c:	f000 f9f6 	bl	801971c <getTime>
 8019330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019332:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019334:	4619      	mov	r1, r3
 8019336:	4831      	ldr	r0, [pc, #196]	; (80193fc <updatePeerDelay+0xe4>)
 8019338:	f001 f9f0 	bl	801a71c <iprintf>
 801933c:	4830      	ldr	r0, [pc, #192]	; (8019400 <updatePeerDelay+0xe8>)
 801933e:	f001 fa61 	bl	801a804 <puts>

	if (twoStep)
 8019342:	79fb      	ldrb	r3, [r7, #7]
 8019344:	2b00      	cmp	r3, #0
 8019346:	d01f      	beq.n	8019388 <updatePeerDelay+0x70>
	{
		TimeInternal Tab, Tba;
		subTime(&Tab, &ptpClock->pdelay_t2 , &ptpClock->pdelay_t1);
 8019348:	68fb      	ldr	r3, [r7, #12]
 801934a:	f503 7150 	add.w	r1, r3, #832	; 0x340
 801934e:	68fb      	ldr	r3, [r7, #12]
 8019350:	f503 724e 	add.w	r2, r3, #824	; 0x338
 8019354:	f107 0320 	add.w	r3, r7, #32
 8019358:	4618      	mov	r0, r3
 801935a:	f7fb f97c 	bl	8014656 <subTime>
		subTime(&Tba, &ptpClock->pdelay_t4, &ptpClock->pdelay_t3);
 801935e:	68fb      	ldr	r3, [r7, #12]
 8019360:	f503 7154 	add.w	r1, r3, #848	; 0x350
 8019364:	68fb      	ldr	r3, [r7, #12]
 8019366:	f503 7252 	add.w	r2, r3, #840	; 0x348
 801936a:	f107 0318 	add.w	r3, r7, #24
 801936e:	4618      	mov	r0, r3
 8019370:	f7fb f971 	bl	8014656 <subTime>
		addTime(&ptpClock->portDS.peerMeanPathDelay, &Tab, &Tba);
 8019374:	68fb      	ldr	r3, [r7, #12]
 8019376:	3364      	adds	r3, #100	; 0x64
 8019378:	f107 0218 	add.w	r2, r7, #24
 801937c:	f107 0120 	add.w	r1, r7, #32
 8019380:	4618      	mov	r0, r3
 8019382:	f7fb f94d 	bl	8014620 <addTime>
 8019386:	e00b      	b.n	80193a0 <updatePeerDelay+0x88>
	}
	else /* One step  clock */
	{
		subTime(&ptpClock->portDS.peerMeanPathDelay, &ptpClock->pdelay_t4, &ptpClock->pdelay_t1);
 8019388:	68fb      	ldr	r3, [r7, #12]
 801938a:	f103 0064 	add.w	r0, r3, #100	; 0x64
 801938e:	68fb      	ldr	r3, [r7, #12]
 8019390:	f503 7154 	add.w	r1, r3, #848	; 0x350
 8019394:	68fb      	ldr	r3, [r7, #12]
 8019396:	f503 734e 	add.w	r3, r3, #824	; 0x338
 801939a:	461a      	mov	r2, r3
 801939c:	f7fb f95b 	bl	8014656 <subTime>
	}

	subTime(&ptpClock->portDS.peerMeanPathDelay, &ptpClock->portDS.peerMeanPathDelay, correctionField);
 80193a0:	68fb      	ldr	r3, [r7, #12]
 80193a2:	f103 0064 	add.w	r0, r3, #100	; 0x64
 80193a6:	68fb      	ldr	r3, [r7, #12]
 80193a8:	3364      	adds	r3, #100	; 0x64
 80193aa:	68ba      	ldr	r2, [r7, #8]
 80193ac:	4619      	mov	r1, r3
 80193ae:	f7fb f952 	bl	8014656 <subTime>
	div2Time(&ptpClock->portDS.peerMeanPathDelay);
 80193b2:	68fb      	ldr	r3, [r7, #12]
 80193b4:	3364      	adds	r3, #100	; 0x64
 80193b6:	4618      	mov	r0, r3
 80193b8:	f7fb f968 	bl	801468c <div2Time>

	/* Filter delay */
	if (ptpClock->portDS.peerMeanPathDelay.seconds != 0)
 80193bc:	68fb      	ldr	r3, [r7, #12]
 80193be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80193c0:	2b00      	cmp	r3, #0
 80193c2:	d00e      	beq.n	80193e2 <updatePeerDelay+0xca>
	{
		DBGV("updatePeerDelay: cannot filter with seconds");
 80193c4:	f107 0310 	add.w	r3, r7, #16
 80193c8:	4618      	mov	r0, r3
 80193ca:	f000 f9a7 	bl	801971c <getTime>
 80193ce:	693b      	ldr	r3, [r7, #16]
 80193d0:	697a      	ldr	r2, [r7, #20]
 80193d2:	4619      	mov	r1, r3
 80193d4:	4809      	ldr	r0, [pc, #36]	; (80193fc <updatePeerDelay+0xe4>)
 80193d6:	f001 f9a1 	bl	801a71c <iprintf>
 80193da:	480a      	ldr	r0, [pc, #40]	; (8019404 <updatePeerDelay+0xec>)
 80193dc:	f001 f99e 	bl	801a71c <iprintf>
		return;
 80193e0:	e009      	b.n	80193f6 <updatePeerDelay+0xde>
	}
	else
	{
		filter(&ptpClock->portDS.peerMeanPathDelay.nanoseconds, &ptpClock->owd_filt);
 80193e2:	68fb      	ldr	r3, [r7, #12]
 80193e4:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80193e8:	68fb      	ldr	r3, [r7, #12]
 80193ea:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
 80193ee:	4619      	mov	r1, r3
 80193f0:	4610      	mov	r0, r2
 80193f2:	f7ff fdd9 	bl	8018fa8 <filter>
	}
}
 80193f6:	3730      	adds	r7, #48	; 0x30
 80193f8:	46bd      	mov	sp, r7
 80193fa:	bd80      	pop	{r7, pc}
 80193fc:	08021784 	.word	0x08021784
 8019400:	08021828 	.word	0x08021828
 8019404:	08021838 	.word	0x08021838

08019408 <updateClock>:

void updateClock(PtpClock *ptpClock)
{
 8019408:	b590      	push	{r4, r7, lr}
 801940a:	b097      	sub	sp, #92	; 0x5c
 801940c:	af00      	add	r7, sp, #0
 801940e:	6078      	str	r0, [r7, #4]
	int32_t adj;
	TimeInternal timeTmp;
	int32_t offsetNorm;

	DBGV("updateClock\n");
 8019410:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8019414:	4618      	mov	r0, r3
 8019416:	f000 f981 	bl	801971c <getTime>
 801941a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801941c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801941e:	4619      	mov	r1, r3
 8019420:	488e      	ldr	r0, [pc, #568]	; (801965c <updateClock+0x254>)
 8019422:	f001 f97b 	bl	801a71c <iprintf>
 8019426:	488e      	ldr	r0, [pc, #568]	; (8019660 <updateClock+0x258>)
 8019428:	f001 f9ec 	bl	801a804 <puts>

	if (ptpClock->currentDS.offsetFromMaster.seconds != 0 || abs(ptpClock->currentDS.offsetFromMaster.nanoseconds) > MAX_ADJ_OFFSET_NS)
 801942c:	687b      	ldr	r3, [r7, #4]
 801942e:	699b      	ldr	r3, [r3, #24]
 8019430:	2b00      	cmp	r3, #0
 8019432:	d107      	bne.n	8019444 <updateClock+0x3c>
 8019434:	687b      	ldr	r3, [r7, #4]
 8019436:	69db      	ldr	r3, [r3, #28]
 8019438:	2b00      	cmp	r3, #0
 801943a:	bfb8      	it	lt
 801943c:	425b      	neglt	r3, r3
 801943e:	4a89      	ldr	r2, [pc, #548]	; (8019664 <updateClock+0x25c>)
 8019440:	4293      	cmp	r3, r2
 8019442:	dd37      	ble.n	80194b4 <updateClock+0xac>
	{
		/* if secs, reset clock or set freq adjustment to max */
		if (!ptpClock->servo.noAdjust)
 8019444:	687b      	ldr	r3, [r7, #4]
 8019446:	f893 3429 	ldrb.w	r3, [r3, #1065]	; 0x429
 801944a:	f083 0301 	eor.w	r3, r3, #1
 801944e:	b2db      	uxtb	r3, r3
 8019450:	2b00      	cmp	r3, #0
 8019452:	f000 809b 	beq.w	801958c <updateClock+0x184>
		{
			if (!ptpClock->servo.noResetClock)
 8019456:	687b      	ldr	r3, [r7, #4]
 8019458:	f893 3428 	ldrb.w	r3, [r3, #1064]	; 0x428
 801945c:	f083 0301 	eor.w	r3, r3, #1
 8019460:	b2db      	uxtb	r3, r3
 8019462:	2b00      	cmp	r3, #0
 8019464:	d017      	beq.n	8019496 <updateClock+0x8e>
			{
				getTime(&timeTmp);
 8019466:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801946a:	4618      	mov	r0, r3
 801946c:	f000 f956 	bl	801971c <getTime>
				subTime(&timeTmp, &timeTmp, &ptpClock->currentDS.offsetFromMaster);
 8019470:	687b      	ldr	r3, [r7, #4]
 8019472:	f103 0218 	add.w	r2, r3, #24
 8019476:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801947a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801947e:	4618      	mov	r0, r3
 8019480:	f7fb f8e9 	bl	8014656 <subTime>
				setTime(&timeTmp);
 8019484:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8019488:	4618      	mov	r0, r3
 801948a:	f000 f95b 	bl	8019744 <setTime>
				initClock(ptpClock);
 801948e:	6878      	ldr	r0, [r7, #4]
 8019490:	f7ff fce6 	bl	8018e60 <initClock>
		if (!ptpClock->servo.noAdjust)
 8019494:	e07a      	b.n	801958c <updateClock+0x184>
			}
			else
			{
				adj = ptpClock->currentDS.offsetFromMaster.nanoseconds > 0 ? ADJ_FREQ_MAX : -ADJ_FREQ_MAX;
 8019496:	687b      	ldr	r3, [r7, #4]
 8019498:	69db      	ldr	r3, [r3, #28]
 801949a:	2b00      	cmp	r3, #0
 801949c:	dd02      	ble.n	80194a4 <updateClock+0x9c>
 801949e:	f44f 23fa 	mov.w	r3, #512000	; 0x7d000
 80194a2:	e000      	b.n	80194a6 <updateClock+0x9e>
 80194a4:	4b70      	ldr	r3, [pc, #448]	; (8019668 <updateClock+0x260>)
 80194a6:	653b      	str	r3, [r7, #80]	; 0x50
				adjFreq(-adj);
 80194a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80194aa:	425b      	negs	r3, r3
 80194ac:	4618      	mov	r0, r3
 80194ae:	f000 f981 	bl	80197b4 <adjFreq>
		if (!ptpClock->servo.noAdjust)
 80194b2:	e06b      	b.n	801958c <updateClock+0x184>
		/* the PI controller */

		/* normalize offset to 1s sync interval -> response of the servo will
		 * be same for all sync interval values, but faster/slower
		 * (possible lost of precision/overflow but much more stable) */
		offsetNorm = ptpClock->currentDS.offsetFromMaster.nanoseconds;
 80194b4:	687b      	ldr	r3, [r7, #4]
 80194b6:	69db      	ldr	r3, [r3, #28]
 80194b8:	657b      	str	r3, [r7, #84]	; 0x54
		if (ptpClock->portDS.logSyncInterval > 0)
 80194ba:	687b      	ldr	r3, [r7, #4]
 80194bc:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 80194c0:	2b00      	cmp	r3, #0
 80194c2:	dd07      	ble.n	80194d4 <updateClock+0xcc>
			offsetNorm >>= ptpClock->portDS.logSyncInterval;
 80194c4:	687b      	ldr	r3, [r7, #4]
 80194c6:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 80194ca:	461a      	mov	r2, r3
 80194cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80194ce:	4113      	asrs	r3, r2
 80194d0:	657b      	str	r3, [r7, #84]	; 0x54
 80194d2:	e00c      	b.n	80194ee <updateClock+0xe6>
		else if (ptpClock->portDS.logSyncInterval < 0)
 80194d4:	687b      	ldr	r3, [r7, #4]
 80194d6:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 80194da:	2b00      	cmp	r3, #0
 80194dc:	da07      	bge.n	80194ee <updateClock+0xe6>
			offsetNorm <<= -ptpClock->portDS.logSyncInterval;
 80194de:	687b      	ldr	r3, [r7, #4]
 80194e0:	f993 306e 	ldrsb.w	r3, [r3, #110]	; 0x6e
 80194e4:	425b      	negs	r3, r3
 80194e6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80194e8:	fa02 f303 	lsl.w	r3, r2, r3
 80194ec:	657b      	str	r3, [r7, #84]	; 0x54

		/* the accumulator for the I component */
		ptpClock->observedDrift += (int32_t)((float)offsetNorm * (float)ptpClock->servo.ai);
 80194ee:	687b      	ldr	r3, [r7, #4]
 80194f0:	f8d3 43c4 	ldr.w	r4, [r3, #964]	; 0x3c4
 80194f4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80194f6:	f7e7 fc31 	bl	8000d5c <__aeabi_i2f>
 80194fa:	4602      	mov	r2, r0
 80194fc:	687b      	ldr	r3, [r7, #4]
 80194fe:	f8d3 3430 	ldr.w	r3, [r3, #1072]	; 0x430
 8019502:	4619      	mov	r1, r3
 8019504:	4610      	mov	r0, r2
 8019506:	f7e7 fc7d 	bl	8000e04 <__aeabi_fmul>
 801950a:	4603      	mov	r3, r0
 801950c:	4618      	mov	r0, r3
 801950e:	f7e7 fe3f 	bl	8001190 <__aeabi_f2iz>
 8019512:	4603      	mov	r3, r0
 8019514:	18e2      	adds	r2, r4, r3
 8019516:	687b      	ldr	r3, [r7, #4]
 8019518:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

		/* clamp the accumulator to ADJ_FREQ_MAX for sanity */
		if (ptpClock->observedDrift > ADJ_FREQ_MAX)
 801951c:	687b      	ldr	r3, [r7, #4]
 801951e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8019522:	f5b3 2ffa 	cmp.w	r3, #512000	; 0x7d000
 8019526:	dd05      	ble.n	8019534 <updateClock+0x12c>
			ptpClock->observedDrift = ADJ_FREQ_MAX;
 8019528:	687b      	ldr	r3, [r7, #4]
 801952a:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 801952e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
 8019532:	e009      	b.n	8019548 <updateClock+0x140>
		else if (ptpClock->observedDrift < -ADJ_FREQ_MAX)
 8019534:	687b      	ldr	r3, [r7, #4]
 8019536:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801953a:	f513 2ffa 	cmn.w	r3, #512000	; 0x7d000
 801953e:	da03      	bge.n	8019548 <updateClock+0x140>
			ptpClock->observedDrift = -ADJ_FREQ_MAX;
 8019540:	687b      	ldr	r3, [r7, #4]
 8019542:	4a49      	ldr	r2, [pc, #292]	; (8019668 <updateClock+0x260>)
 8019544:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

		/* apply controller output as a clock tick rate adjustment */
		if (!ptpClock->servo.noAdjust)
 8019548:	687b      	ldr	r3, [r7, #4]
 801954a:	f893 3429 	ldrb.w	r3, [r3, #1065]	; 0x429
 801954e:	f083 0301 	eor.w	r3, r3, #1
 8019552:	b2db      	uxtb	r3, r3
 8019554:	2b00      	cmp	r3, #0
 8019556:	d019      	beq.n	801958c <updateClock+0x184>
		{
			adj = (int32_t)((float)offsetNorm * (float)ptpClock->servo.ap) + ptpClock->observedDrift;
 8019558:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801955a:	f7e7 fbff 	bl	8000d5c <__aeabi_i2f>
 801955e:	4602      	mov	r2, r0
 8019560:	687b      	ldr	r3, [r7, #4]
 8019562:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 8019566:	4619      	mov	r1, r3
 8019568:	4610      	mov	r0, r2
 801956a:	f7e7 fc4b 	bl	8000e04 <__aeabi_fmul>
 801956e:	4603      	mov	r3, r0
 8019570:	4618      	mov	r0, r3
 8019572:	f7e7 fe0d 	bl	8001190 <__aeabi_f2iz>
 8019576:	4602      	mov	r2, r0
 8019578:	687b      	ldr	r3, [r7, #4]
 801957a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801957e:	4413      	add	r3, r2
 8019580:	653b      	str	r3, [r7, #80]	; 0x50
			adjFreq(-adj);
 8019582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019584:	425b      	negs	r3, r3
 8019586:	4618      	mov	r0, r3
 8019588:	f000 f914 	bl	80197b4 <adjFreq>
			ptpClock->parentDS.observedParentOffsetScaledLogVariance = 17000 + scaledLogVariance;
			DBGV("updateClock: observed scalled log variance: 0x%x\n", ptpClock->parentDS.observedParentOffsetScaledLogVariance);
		}
	}

	switch (ptpClock->portDS.delayMechanism)
 801958c:	687b      	ldr	r3, [r7, #4]
 801958e:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8019592:	2b01      	cmp	r3, #1
 8019594:	d002      	beq.n	801959c <updateClock+0x194>
 8019596:	2b02      	cmp	r3, #2
 8019598:	d014      	beq.n	80195c4 <updateClock+0x1bc>
 801959a:	e027      	b.n	80195ec <updateClock+0x1e4>
	{
		case E2E:
			DBG("updateClock: one-way delay averaged (E2E): %d sec %d nsec\n",
 801959c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80195a0:	4618      	mov	r0, r3
 80195a2:	f000 f8bb 	bl	801971c <getTime>
 80195a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80195aa:	4619      	mov	r1, r3
 80195ac:	482f      	ldr	r0, [pc, #188]	; (801966c <updateClock+0x264>)
 80195ae:	f001 f8b5 	bl	801a71c <iprintf>
 80195b2:	687b      	ldr	r3, [r7, #4]
 80195b4:	6a19      	ldr	r1, [r3, #32]
 80195b6:	687b      	ldr	r3, [r7, #4]
 80195b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195ba:	461a      	mov	r2, r3
 80195bc:	482c      	ldr	r0, [pc, #176]	; (8019670 <updateClock+0x268>)
 80195be:	f001 f8ad 	bl	801a71c <iprintf>
					ptpClock->currentDS.meanPathDelay.seconds, ptpClock->currentDS.meanPathDelay.nanoseconds);
			break;
 80195c2:	e021      	b.n	8019608 <updateClock+0x200>

		case P2P:
			DBG("updateClock: one-way delay averaged (P2P): %d sec %d nsec\n",
 80195c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80195c8:	4618      	mov	r0, r3
 80195ca:	f000 f8a7 	bl	801971c <getTime>
 80195ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80195d2:	4619      	mov	r1, r3
 80195d4:	4825      	ldr	r0, [pc, #148]	; (801966c <updateClock+0x264>)
 80195d6:	f001 f8a1 	bl	801a71c <iprintf>
 80195da:	687b      	ldr	r3, [r7, #4]
 80195dc:	6e59      	ldr	r1, [r3, #100]	; 0x64
 80195de:	687b      	ldr	r3, [r7, #4]
 80195e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80195e2:	461a      	mov	r2, r3
 80195e4:	4823      	ldr	r0, [pc, #140]	; (8019674 <updateClock+0x26c>)
 80195e6:	f001 f899 	bl	801a71c <iprintf>
					ptpClock->portDS.peerMeanPathDelay.seconds, ptpClock->portDS.peerMeanPathDelay.nanoseconds);
			break;
 80195ea:	e00d      	b.n	8019608 <updateClock+0x200>

		default:
			DBG("updateClock: one-way delay not computed\n");
 80195ec:	f107 031c 	add.w	r3, r7, #28
 80195f0:	4618      	mov	r0, r3
 80195f2:	f000 f893 	bl	801971c <getTime>
 80195f6:	69fb      	ldr	r3, [r7, #28]
 80195f8:	6a3a      	ldr	r2, [r7, #32]
 80195fa:	4619      	mov	r1, r3
 80195fc:	481b      	ldr	r0, [pc, #108]	; (801966c <updateClock+0x264>)
 80195fe:	f001 f88d 	bl	801a71c <iprintf>
 8019602:	481d      	ldr	r0, [pc, #116]	; (8019678 <updateClock+0x270>)
 8019604:	f001 f8fe 	bl	801a804 <puts>
	}

	DBG("updateClock: offset from master: %d sec %d nsec\n",
 8019608:	f107 0314 	add.w	r3, r7, #20
 801960c:	4618      	mov	r0, r3
 801960e:	f000 f885 	bl	801971c <getTime>
 8019612:	697b      	ldr	r3, [r7, #20]
 8019614:	69ba      	ldr	r2, [r7, #24]
 8019616:	4619      	mov	r1, r3
 8019618:	4814      	ldr	r0, [pc, #80]	; (801966c <updateClock+0x264>)
 801961a:	f001 f87f 	bl	801a71c <iprintf>
 801961e:	687b      	ldr	r3, [r7, #4]
 8019620:	6999      	ldr	r1, [r3, #24]
 8019622:	687b      	ldr	r3, [r7, #4]
 8019624:	69db      	ldr	r3, [r3, #28]
 8019626:	461a      	mov	r2, r3
 8019628:	4814      	ldr	r0, [pc, #80]	; (801967c <updateClock+0x274>)
 801962a:	f001 f877 	bl	801a71c <iprintf>
			ptpClock->currentDS.offsetFromMaster.seconds,
			ptpClock->currentDS.offsetFromMaster.nanoseconds);
	DBG("updateClock: observed drift: %d\n", ptpClock->observedDrift);
 801962e:	f107 030c 	add.w	r3, r7, #12
 8019632:	4618      	mov	r0, r3
 8019634:	f000 f872 	bl	801971c <getTime>
 8019638:	68fb      	ldr	r3, [r7, #12]
 801963a:	693a      	ldr	r2, [r7, #16]
 801963c:	4619      	mov	r1, r3
 801963e:	480b      	ldr	r0, [pc, #44]	; (801966c <updateClock+0x264>)
 8019640:	f001 f86c 	bl	801a71c <iprintf>
 8019644:	687b      	ldr	r3, [r7, #4]
 8019646:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801964a:	4619      	mov	r1, r3
 801964c:	480c      	ldr	r0, [pc, #48]	; (8019680 <updateClock+0x278>)
 801964e:	f001 f865 	bl	801a71c <iprintf>
}
 8019652:	bf00      	nop
 8019654:	375c      	adds	r7, #92	; 0x5c
 8019656:	46bd      	mov	sp, r7
 8019658:	bd90      	pop	{r4, r7, pc}
 801965a:	bf00      	nop
 801965c:	08021784 	.word	0x08021784
 8019660:	08021864 	.word	0x08021864
 8019664:	05f5e100 	.word	0x05f5e100
 8019668:	fff83000 	.word	0xfff83000
 801966c:	08021768 	.word	0x08021768
 8019670:	08021870 	.word	0x08021870
 8019674:	080218ac 	.word	0x080218ac
 8019678:	080218e8 	.word	0x080218e8
 801967c:	08021910 	.word	0x08021910
 8019680:	08021944 	.word	0x08021944

08019684 <ptpdStartup>:
{
	netShutdown(&ptpClock->netPath);
}

int16_t ptpdStartup(PtpClock * ptpClock, RunTimeOpts *rtOpts, ForeignMasterRecord* foreign)
{
 8019684:	b580      	push	{r7, lr}
 8019686:	b086      	sub	sp, #24
 8019688:	af00      	add	r7, sp, #0
 801968a:	60f8      	str	r0, [r7, #12]
 801968c:	60b9      	str	r1, [r7, #8]
 801968e:	607a      	str	r2, [r7, #4]
	ptpClock->rtOpts = rtOpts;
 8019690:	68fb      	ldr	r3, [r7, #12]
 8019692:	68ba      	ldr	r2, [r7, #8]
 8019694:	f8c3 2444 	str.w	r2, [r3, #1092]	; 0x444
	ptpClock->foreignMasterDS.records = foreign;
 8019698:	68fb      	ldr	r3, [r7, #12]
 801969a:	687a      	ldr	r2, [r7, #4]
 801969c:	675a      	str	r2, [r3, #116]	; 0x74

	/* 9.2.2 */
	if (rtOpts->slaveOnly) rtOpts->clockQuality.clockClass = DEFAULT_CLOCK_CLASS_SLAVE_ONLY;
 801969e:	68bb      	ldr	r3, [r7, #8]
 80196a0:	7a5b      	ldrb	r3, [r3, #9]
 80196a2:	2b00      	cmp	r3, #0
 80196a4:	d002      	beq.n	80196ac <ptpdStartup+0x28>
 80196a6:	68bb      	ldr	r3, [r7, #8]
 80196a8:	22ff      	movs	r2, #255	; 0xff
 80196aa:	709a      	strb	r2, [r3, #2]

	/* No negative or zero attenuation */
	if (rtOpts->servo.ap < 1) rtOpts->servo.ap = 1;
 80196ac:	68bb      	ldr	r3, [r7, #8]
 80196ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80196b0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80196b4:	4618      	mov	r0, r3
 80196b6:	f7e7 fd43 	bl	8001140 <__aeabi_fcmplt>
 80196ba:	4603      	mov	r3, r0
 80196bc:	2b00      	cmp	r3, #0
 80196be:	d003      	beq.n	80196c8 <ptpdStartup+0x44>
 80196c0:	68bb      	ldr	r3, [r7, #8]
 80196c2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80196c6:	639a      	str	r2, [r3, #56]	; 0x38
	if (rtOpts->servo.ai < 1) rtOpts->servo.ai = 1;
 80196c8:	68bb      	ldr	r3, [r7, #8]
 80196ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80196cc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80196d0:	4618      	mov	r0, r3
 80196d2:	f7e7 fd35 	bl	8001140 <__aeabi_fcmplt>
 80196d6:	4603      	mov	r3, r0
 80196d8:	2b00      	cmp	r3, #0
 80196da:	d003      	beq.n	80196e4 <ptpdStartup+0x60>
 80196dc:	68bb      	ldr	r3, [r7, #8]
 80196de:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80196e2:	63da      	str	r2, [r3, #60]	; 0x3c

	DBG("event POWER UP\n");
 80196e4:	f107 0310 	add.w	r3, r7, #16
 80196e8:	4618      	mov	r0, r3
 80196ea:	f000 f817 	bl	801971c <getTime>
 80196ee:	693b      	ldr	r3, [r7, #16]
 80196f0:	697a      	ldr	r2, [r7, #20]
 80196f2:	4619      	mov	r1, r3
 80196f4:	4807      	ldr	r0, [pc, #28]	; (8019714 <ptpdStartup+0x90>)
 80196f6:	f001 f811 	bl	801a71c <iprintf>
 80196fa:	4807      	ldr	r0, [pc, #28]	; (8019718 <ptpdStartup+0x94>)
 80196fc:	f001 f882 	bl	801a804 <puts>

	toState(ptpClock, PTP_INITIALIZING);
 8019700:	2100      	movs	r1, #0
 8019702:	68f8      	ldr	r0, [r7, #12]
 8019704:	f7fb fe20 	bl	8015348 <toState>

	return 0;
 8019708:	2300      	movs	r3, #0
}
 801970a:	4618      	mov	r0, r3
 801970c:	3718      	adds	r7, #24
 801970e:	46bd      	mov	sp, r7
 8019710:	bd80      	pop	{r7, pc}
 8019712:	bf00      	nop
 8019714:	08021968 	.word	0x08021968
 8019718:	08021978 	.word	0x08021978

0801971c <getTime>:
	printf("drift: %c%d.%03d ppm\n", sign, abs(ptpClock->observedDrift / 1000),
			abs(ptpClock->observedDrift % 1000));
}

void getTime(TimeInternal *time)
{
 801971c:	b580      	push	{r7, lr}
 801971e:	b084      	sub	sp, #16
 8019720:	af00      	add	r7, sp, #0
 8019722:	6078      	str	r0, [r7, #4]
	struct ptptime_t timestamp;
	ETH_PTPTime_GetTime(&timestamp);
 8019724:	f107 0308 	add.w	r3, r7, #8
 8019728:	4618      	mov	r0, r3
 801972a:	f7eb f869 	bl	8004800 <ETH_PTPTime_GetTime>
	time->seconds = timestamp.tv_sec;
 801972e:	68ba      	ldr	r2, [r7, #8]
 8019730:	687b      	ldr	r3, [r7, #4]
 8019732:	601a      	str	r2, [r3, #0]
	time->nanoseconds = timestamp.tv_nsec;
 8019734:	68fa      	ldr	r2, [r7, #12]
 8019736:	687b      	ldr	r3, [r7, #4]
 8019738:	605a      	str	r2, [r3, #4]
}
 801973a:	bf00      	nop
 801973c:	3710      	adds	r7, #16
 801973e:	46bd      	mov	sp, r7
 8019740:	bd80      	pop	{r7, pc}
	...

08019744 <setTime>:

void setTime(const TimeInternal *time)
{
 8019744:	b580      	push	{r7, lr}
 8019746:	b086      	sub	sp, #24
 8019748:	af00      	add	r7, sp, #0
 801974a:	6078      	str	r0, [r7, #4]
	struct ptptime_t ts;

	ts.tv_sec = time->seconds;
 801974c:	687b      	ldr	r3, [r7, #4]
 801974e:	681b      	ldr	r3, [r3, #0]
 8019750:	613b      	str	r3, [r7, #16]
	ts.tv_nsec = time->nanoseconds;
 8019752:	687b      	ldr	r3, [r7, #4]
 8019754:	685b      	ldr	r3, [r3, #4]
 8019756:	617b      	str	r3, [r7, #20]
#if LWIP_PTP
	ETH_PTPTime_SetTime(&ts);
#endif
	DBG("resetting system clock to %d sec %d nsec\n", time->seconds,
 8019758:	f107 0308 	add.w	r3, r7, #8
 801975c:	4618      	mov	r0, r3
 801975e:	f7ff ffdd 	bl	801971c <getTime>
 8019762:	68bb      	ldr	r3, [r7, #8]
 8019764:	68fa      	ldr	r2, [r7, #12]
 8019766:	4619      	mov	r1, r3
 8019768:	4807      	ldr	r0, [pc, #28]	; (8019788 <setTime+0x44>)
 801976a:	f000 ffd7 	bl	801a71c <iprintf>
 801976e:	687b      	ldr	r3, [r7, #4]
 8019770:	6819      	ldr	r1, [r3, #0]
 8019772:	687b      	ldr	r3, [r7, #4]
 8019774:	685b      	ldr	r3, [r3, #4]
 8019776:	461a      	mov	r2, r3
 8019778:	4804      	ldr	r0, [pc, #16]	; (801978c <setTime+0x48>)
 801977a:	f000 ffcf 	bl	801a71c <iprintf>
			time->nanoseconds);
}
 801977e:	bf00      	nop
 8019780:	3718      	adds	r7, #24
 8019782:	46bd      	mov	sp, r7
 8019784:	bd80      	pop	{r7, pc}
 8019786:	bf00      	nop
 8019788:	08021a84 	.word	0x08021a84
 801978c:	08021a94 	.word	0x08021a94

08019790 <getRand>:
	ETH_PTPTime_UpdateOffset(&timeoffset);
	DBGV("updateTime: updated\n");
}

uint32_t getRand(uint32_t randMax)
{
 8019790:	b580      	push	{r7, lr}
 8019792:	b082      	sub	sp, #8
 8019794:	af00      	add	r7, sp, #0
 8019796:	6078      	str	r0, [r7, #4]
	return rand() % randMax;
 8019798:	f001 f83c 	bl	801a814 <rand>
 801979c:	4603      	mov	r3, r0
 801979e:	687a      	ldr	r2, [r7, #4]
 80197a0:	fbb3 f2f2 	udiv	r2, r3, r2
 80197a4:	6879      	ldr	r1, [r7, #4]
 80197a6:	fb01 f202 	mul.w	r2, r1, r2
 80197aa:	1a9b      	subs	r3, r3, r2
}
 80197ac:	4618      	mov	r0, r3
 80197ae:	3708      	adds	r7, #8
 80197b0:	46bd      	mov	sp, r7
 80197b2:	bd80      	pop	{r7, pc}

080197b4 <adjFreq>:

bool adjFreq(int32_t adj)
{
 80197b4:	b580      	push	{r7, lr}
 80197b6:	b084      	sub	sp, #16
 80197b8:	af00      	add	r7, sp, #0
 80197ba:	6078      	str	r0, [r7, #4]
	DBGV("adjFreq %d\n", adj);
 80197bc:	f107 0308 	add.w	r3, r7, #8
 80197c0:	4618      	mov	r0, r3
 80197c2:	f7ff ffab 	bl	801971c <getTime>
 80197c6:	68bb      	ldr	r3, [r7, #8]
 80197c8:	68fa      	ldr	r2, [r7, #12]
 80197ca:	4619      	mov	r1, r3
 80197cc:	480c      	ldr	r0, [pc, #48]	; (8019800 <adjFreq+0x4c>)
 80197ce:	f000 ffa5 	bl	801a71c <iprintf>
 80197d2:	6879      	ldr	r1, [r7, #4]
 80197d4:	480b      	ldr	r0, [pc, #44]	; (8019804 <adjFreq+0x50>)
 80197d6:	f000 ffa1 	bl	801a71c <iprintf>

	if (adj > ADJ_FREQ_MAX)
 80197da:	687b      	ldr	r3, [r7, #4]
 80197dc:	f5b3 2ffa 	cmp.w	r3, #512000	; 0x7d000
 80197e0:	dd03      	ble.n	80197ea <adjFreq+0x36>
		adj = ADJ_FREQ_MAX;
 80197e2:	f44f 23fa 	mov.w	r3, #512000	; 0x7d000
 80197e6:	607b      	str	r3, [r7, #4]
 80197e8:	e005      	b.n	80197f6 <adjFreq+0x42>
	else if (adj < -ADJ_FREQ_MAX)
 80197ea:	687b      	ldr	r3, [r7, #4]
 80197ec:	f513 2ffa 	cmn.w	r3, #512000	; 0x7d000
 80197f0:	da01      	bge.n	80197f6 <adjFreq+0x42>
		adj = -ADJ_FREQ_MAX;
 80197f2:	4b05      	ldr	r3, [pc, #20]	; (8019808 <adjFreq+0x54>)
 80197f4:	607b      	str	r3, [r7, #4]

	/* Fine update method */
#if LWIP_PTP
	ETH_PTPTime_AdjFreq(adj);
#endif
	return TRUE;
 80197f6:	2301      	movs	r3, #1
}
 80197f8:	4618      	mov	r0, r3
 80197fa:	3710      	adds	r7, #16
 80197fc:	46bd      	mov	sp, r7
 80197fe:	bd80      	pop	{r7, pc}
 8019800:	08021ac0 	.word	0x08021ac0
 8019804:	08021b00 	.word	0x08021b00
 8019808:	fff83000 	.word	0xfff83000

0801980c <timerCallback>:
/* An array to hold the various system timer handles. */
static PTP_TIMER ptpdTimers[TIMER_ARRAY_SIZE];
static bool ptpdTimersExpired[TIMER_ARRAY_SIZE];

static void timerCallback(PTP_TIMER timer)
{
 801980c:	b580      	push	{r7, lr}
 801980e:	b086      	sub	sp, #24
 8019810:	af00      	add	r7, sp, #0
 8019812:	6078      	str	r0, [r7, #4]
	int index = (int) PTP_TIMER_GETID(timer);
 8019814:	6878      	ldr	r0, [r7, #4]
 8019816:	f7ee fbd1 	bl	8007fbc <pvTimerGetTimerID>
 801981a:	4603      	mov	r3, r0
 801981c:	617b      	str	r3, [r7, #20]
	DBG("Timer callback ID:%d\n", index);
 801981e:	f107 030c 	add.w	r3, r7, #12
 8019822:	4618      	mov	r0, r3
 8019824:	f7ff ff7a 	bl	801971c <getTime>
 8019828:	68fb      	ldr	r3, [r7, #12]
 801982a:	693a      	ldr	r2, [r7, #16]
 801982c:	4619      	mov	r1, r3
 801982e:	480a      	ldr	r0, [pc, #40]	; (8019858 <timerCallback+0x4c>)
 8019830:	f000 ff74 	bl	801a71c <iprintf>
 8019834:	6979      	ldr	r1, [r7, #20]
 8019836:	4809      	ldr	r0, [pc, #36]	; (801985c <timerCallback+0x50>)
 8019838:	f000 ff70 	bl	801a71c <iprintf>
	// Sanity check the index.
	if (index < TIMER_ARRAY_SIZE)
 801983c:	697b      	ldr	r3, [r7, #20]
 801983e:	2b05      	cmp	r3, #5
 8019840:	dc06      	bgt.n	8019850 <timerCallback+0x44>
	{
		/* Mark the indicated timer as expired. */
		ptpdTimersExpired[index] = TRUE;
 8019842:	4a07      	ldr	r2, [pc, #28]	; (8019860 <timerCallback+0x54>)
 8019844:	697b      	ldr	r3, [r7, #20]
 8019846:	4413      	add	r3, r2
 8019848:	2201      	movs	r2, #1
 801984a:	701a      	strb	r2, [r3, #0]

		/* Notify the PTP thread of a pending operation. */
		ptpd_alert();
 801984c:	f7fe f8c6 	bl	80179dc <ptpd_alert>
	}
}
 8019850:	bf00      	nop
 8019852:	3718      	adds	r7, #24
 8019854:	46bd      	mov	sp, r7
 8019856:	bd80      	pop	{r7, pc}
 8019858:	08021b0c 	.word	0x08021b0c
 801985c:	08021b1c 	.word	0x08021b1c
 8019860:	20004d64 	.word	0x20004d64

08019864 <initTimer>:

void initTimer(void)
{
 8019864:	b590      	push	{r4, r7, lr}
 8019866:	b087      	sub	sp, #28
 8019868:	af02      	add	r7, sp, #8
	int32_t i;

	DBG("initTimer\n");
 801986a:	1d3b      	adds	r3, r7, #4
 801986c:	4618      	mov	r0, r3
 801986e:	f7ff ff55 	bl	801971c <getTime>
 8019872:	687b      	ldr	r3, [r7, #4]
 8019874:	68ba      	ldr	r2, [r7, #8]
 8019876:	4619      	mov	r1, r3
 8019878:	481b      	ldr	r0, [pc, #108]	; (80198e8 <initTimer+0x84>)
 801987a:	f000 ff4f 	bl	801a71c <iprintf>
 801987e:	481b      	ldr	r0, [pc, #108]	; (80198ec <initTimer+0x88>)
 8019880:	f000 ffc0 	bl	801a804 <puts>

	/* Create the various timers used in the system. */
	for (i = 0; i < TIMER_ARRAY_SIZE; i++)
 8019884:	2300      	movs	r3, #0
 8019886:	60fb      	str	r3, [r7, #12]
 8019888:	e026      	b.n	80198d8 <initTimer+0x74>
	{
		// Mark the timer as not expired.
		// Initialize the timer.
		//sys_timer_new(&ptpdTimers[i], timerCallback, osTimerOnce, (void *) i);
		ptpdTimers[i] = PTP_TIMER_NEW(timerCallback, osTimerPeriodic,
 801988a:	68fa      	ldr	r2, [r7, #12]
 801988c:	4b18      	ldr	r3, [pc, #96]	; (80198f0 <initTimer+0x8c>)
 801988e:	9300      	str	r3, [sp, #0]
 8019890:	4613      	mov	r3, r2
 8019892:	2201      	movs	r2, #1
 8019894:	2101      	movs	r1, #1
 8019896:	4817      	ldr	r0, [pc, #92]	; (80198f4 <initTimer+0x90>)
 8019898:	f7ee f85a 	bl	8007950 <xTimerCreate>
 801989c:	4601      	mov	r1, r0
 801989e:	4a16      	ldr	r2, [pc, #88]	; (80198f8 <initTimer+0x94>)
 80198a0:	68fb      	ldr	r3, [r7, #12]
 80198a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				(void* ) i);
		printf("PTP Timer: %x \tID: %x\n", ptpdTimers[i],
 80198a6:	4a14      	ldr	r2, [pc, #80]	; (80198f8 <initTimer+0x94>)
 80198a8:	68fb      	ldr	r3, [r7, #12]
 80198aa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80198ae:	4a12      	ldr	r2, [pc, #72]	; (80198f8 <initTimer+0x94>)
 80198b0:	68fb      	ldr	r3, [r7, #12]
 80198b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80198b6:	4618      	mov	r0, r3
 80198b8:	f7ee fb80 	bl	8007fbc <pvTimerGetTimerID>
 80198bc:	4603      	mov	r3, r0
 80198be:	461a      	mov	r2, r3
 80198c0:	4621      	mov	r1, r4
 80198c2:	480e      	ldr	r0, [pc, #56]	; (80198fc <initTimer+0x98>)
 80198c4:	f000 ff2a 	bl	801a71c <iprintf>
				PTP_TIMER_GETID(ptpdTimers[i]));
		ptpdTimersExpired[i] = FALSE;
 80198c8:	4a0d      	ldr	r2, [pc, #52]	; (8019900 <initTimer+0x9c>)
 80198ca:	68fb      	ldr	r3, [r7, #12]
 80198cc:	4413      	add	r3, r2
 80198ce:	2200      	movs	r2, #0
 80198d0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TIMER_ARRAY_SIZE; i++)
 80198d2:	68fb      	ldr	r3, [r7, #12]
 80198d4:	3301      	adds	r3, #1
 80198d6:	60fb      	str	r3, [r7, #12]
 80198d8:	68fb      	ldr	r3, [r7, #12]
 80198da:	2b05      	cmp	r3, #5
 80198dc:	ddd5      	ble.n	801988a <initTimer+0x26>
	}
}
 80198de:	bf00      	nop
 80198e0:	3714      	adds	r7, #20
 80198e2:	46bd      	mov	sp, r7
 80198e4:	bd90      	pop	{r4, r7, pc}
 80198e6:	bf00      	nop
 80198e8:	08021b0c 	.word	0x08021b0c
 80198ec:	08021b34 	.word	0x08021b34
 80198f0:	0801980d 	.word	0x0801980d
 80198f4:	08021b40 	.word	0x08021b40
 80198f8:	20004d4c 	.word	0x20004d4c
 80198fc:	08021b44 	.word	0x08021b44
 8019900:	20004d64 	.word	0x20004d64

08019904 <timerStop>:

void timerStop(int32_t index)
{
 8019904:	b580      	push	{r7, lr}
 8019906:	b084      	sub	sp, #16
 8019908:	af00      	add	r7, sp, #0
 801990a:	6078      	str	r0, [r7, #4]
	/* Sanity check the index. */
	if (index >= TIMER_ARRAY_SIZE)
 801990c:	687b      	ldr	r3, [r7, #4]
 801990e:	2b05      	cmp	r3, #5
 8019910:	dc1b      	bgt.n	801994a <timerStop+0x46>
		return;

	// Cancel the timer and reset the expired flag.
	DBGV("timerStop: stop timer %d\n", index);
 8019912:	f107 0308 	add.w	r3, r7, #8
 8019916:	4618      	mov	r0, r3
 8019918:	f7ff ff00 	bl	801971c <getTime>
 801991c:	68bb      	ldr	r3, [r7, #8]
 801991e:	68fa      	ldr	r2, [r7, #12]
 8019920:	4619      	mov	r1, r3
 8019922:	480c      	ldr	r0, [pc, #48]	; (8019954 <timerStop+0x50>)
 8019924:	f000 fefa 	bl	801a71c <iprintf>
 8019928:	6879      	ldr	r1, [r7, #4]
 801992a:	480b      	ldr	r0, [pc, #44]	; (8019958 <timerStop+0x54>)
 801992c:	f000 fef6 	bl	801a71c <iprintf>
	//sys_timer_stop(&ptpdTimers[index]);
	PTP_TIMER_STOP(ptpdTimers[index]);
 8019930:	4a0a      	ldr	r2, [pc, #40]	; (801995c <timerStop+0x58>)
 8019932:	687b      	ldr	r3, [r7, #4]
 8019934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019938:	4618      	mov	r0, r3
 801993a:	f7eb fcdd 	bl	80052f8 <osTimerStop>

	ptpdTimersExpired[index] = FALSE;
 801993e:	4a08      	ldr	r2, [pc, #32]	; (8019960 <timerStop+0x5c>)
 8019940:	687b      	ldr	r3, [r7, #4]
 8019942:	4413      	add	r3, r2
 8019944:	2200      	movs	r2, #0
 8019946:	701a      	strb	r2, [r3, #0]
 8019948:	e000      	b.n	801994c <timerStop+0x48>
		return;
 801994a:	bf00      	nop
}
 801994c:	3710      	adds	r7, #16
 801994e:	46bd      	mov	sp, r7
 8019950:	bd80      	pop	{r7, pc}
 8019952:	bf00      	nop
 8019954:	08021b5c 	.word	0x08021b5c
 8019958:	08021b6c 	.word	0x08021b6c
 801995c:	20004d4c 	.word	0x20004d4c
 8019960:	20004d64 	.word	0x20004d64

08019964 <timerStart>:

void timerStart(int32_t index, uint32_t interval_ms)
{
 8019964:	b580      	push	{r7, lr}
 8019966:	b084      	sub	sp, #16
 8019968:	af00      	add	r7, sp, #0
 801996a:	6078      	str	r0, [r7, #4]
 801996c:	6039      	str	r1, [r7, #0]
	/* Sanity check the index. */
	if (index >= TIMER_ARRAY_SIZE)
 801996e:	687b      	ldr	r3, [r7, #4]
 8019970:	2b05      	cmp	r3, #5
 8019972:	dc1d      	bgt.n	80199b0 <timerStart+0x4c>
		return;

	// Set the timer duration and start the timer.
	DBGV("timerStart: set timer %d to %d\n", index, interval_ms);
 8019974:	f107 0308 	add.w	r3, r7, #8
 8019978:	4618      	mov	r0, r3
 801997a:	f7ff fecf 	bl	801971c <getTime>
 801997e:	68bb      	ldr	r3, [r7, #8]
 8019980:	68fa      	ldr	r2, [r7, #12]
 8019982:	4619      	mov	r1, r3
 8019984:	480c      	ldr	r0, [pc, #48]	; (80199b8 <timerStart+0x54>)
 8019986:	f000 fec9 	bl	801a71c <iprintf>
 801998a:	683a      	ldr	r2, [r7, #0]
 801998c:	6879      	ldr	r1, [r7, #4]
 801998e:	480b      	ldr	r0, [pc, #44]	; (80199bc <timerStart+0x58>)
 8019990:	f000 fec4 	bl	801a71c <iprintf>
	ptpdTimersExpired[index] = FALSE;
 8019994:	4a0a      	ldr	r2, [pc, #40]	; (80199c0 <timerStart+0x5c>)
 8019996:	687b      	ldr	r3, [r7, #4]
 8019998:	4413      	add	r3, r2
 801999a:	2200      	movs	r2, #0
 801999c:	701a      	strb	r2, [r3, #0]
	//sys_timer_start(&ptpdTimers[index], interval_ms);
	PTP_TIMER_START(ptpdTimers[index], interval_ms);
 801999e:	4a09      	ldr	r2, [pc, #36]	; (80199c4 <timerStart+0x60>)
 80199a0:	687b      	ldr	r3, [r7, #4]
 80199a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80199a6:	6839      	ldr	r1, [r7, #0]
 80199a8:	4618      	mov	r0, r3
 80199aa:	f7eb fc5f 	bl	800526c <osTimerStart>
 80199ae:	e000      	b.n	80199b2 <timerStart+0x4e>
		return;
 80199b0:	bf00      	nop
}
 80199b2:	3710      	adds	r7, #16
 80199b4:	46bd      	mov	sp, r7
 80199b6:	bd80      	pop	{r7, pc}
 80199b8:	08021b5c 	.word	0x08021b5c
 80199bc:	08021b88 	.word	0x08021b88
 80199c0:	20004d64 	.word	0x20004d64
 80199c4:	20004d4c 	.word	0x20004d4c

080199c8 <timerExpired>:

bool timerExpired(int32_t index)
{
 80199c8:	b580      	push	{r7, lr}
 80199ca:	b084      	sub	sp, #16
 80199cc:	af00      	add	r7, sp, #0
 80199ce:	6078      	str	r0, [r7, #4]
	/* Sanity check the index. */
	if (index >= TIMER_ARRAY_SIZE)
 80199d0:	687b      	ldr	r3, [r7, #4]
 80199d2:	2b05      	cmp	r3, #5
 80199d4:	dd01      	ble.n	80199da <timerExpired+0x12>
		return FALSE;
 80199d6:	2300      	movs	r3, #0
 80199d8:	e01f      	b.n	8019a1a <timerExpired+0x52>

	/* Determine if the timer expired. */
	if (!ptpdTimersExpired[index])
 80199da:	4a12      	ldr	r2, [pc, #72]	; (8019a24 <timerExpired+0x5c>)
 80199dc:	687b      	ldr	r3, [r7, #4]
 80199de:	4413      	add	r3, r2
 80199e0:	781b      	ldrb	r3, [r3, #0]
 80199e2:	f083 0301 	eor.w	r3, r3, #1
 80199e6:	b2db      	uxtb	r3, r3
 80199e8:	2b00      	cmp	r3, #0
 80199ea:	d001      	beq.n	80199f0 <timerExpired+0x28>
		return FALSE;
 80199ec:	2300      	movs	r3, #0
 80199ee:	e014      	b.n	8019a1a <timerExpired+0x52>
	DBGV("timerExpired: timer %d expired\n", index);
 80199f0:	f107 0308 	add.w	r3, r7, #8
 80199f4:	4618      	mov	r0, r3
 80199f6:	f7ff fe91 	bl	801971c <getTime>
 80199fa:	68bb      	ldr	r3, [r7, #8]
 80199fc:	68fa      	ldr	r2, [r7, #12]
 80199fe:	4619      	mov	r1, r3
 8019a00:	4809      	ldr	r0, [pc, #36]	; (8019a28 <timerExpired+0x60>)
 8019a02:	f000 fe8b 	bl	801a71c <iprintf>
 8019a06:	6879      	ldr	r1, [r7, #4]
 8019a08:	4808      	ldr	r0, [pc, #32]	; (8019a2c <timerExpired+0x64>)
 8019a0a:	f000 fe87 	bl	801a71c <iprintf>
	ptpdTimersExpired[index] = FALSE;
 8019a0e:	4a05      	ldr	r2, [pc, #20]	; (8019a24 <timerExpired+0x5c>)
 8019a10:	687b      	ldr	r3, [r7, #4]
 8019a12:	4413      	add	r3, r2
 8019a14:	2200      	movs	r2, #0
 8019a16:	701a      	strb	r2, [r3, #0]

	return TRUE;
 8019a18:	2301      	movs	r3, #1
}
 8019a1a:	4618      	mov	r0, r3
 8019a1c:	3710      	adds	r7, #16
 8019a1e:	46bd      	mov	sp, r7
 8019a20:	bd80      	pop	{r7, pc}
 8019a22:	bf00      	nop
 8019a24:	20004d64 	.word	0x20004d64
 8019a28:	08021b5c 	.word	0x08021b5c
 8019a2c:	08021ba8 	.word	0x08021ba8

08019a30 <__libc_init_array>:
 8019a30:	b570      	push	{r4, r5, r6, lr}
 8019a32:	2500      	movs	r5, #0
 8019a34:	4e0c      	ldr	r6, [pc, #48]	; (8019a68 <__libc_init_array+0x38>)
 8019a36:	4c0d      	ldr	r4, [pc, #52]	; (8019a6c <__libc_init_array+0x3c>)
 8019a38:	1ba4      	subs	r4, r4, r6
 8019a3a:	10a4      	asrs	r4, r4, #2
 8019a3c:	42a5      	cmp	r5, r4
 8019a3e:	d109      	bne.n	8019a54 <__libc_init_array+0x24>
 8019a40:	f004 faa6 	bl	801df90 <_init>
 8019a44:	2500      	movs	r5, #0
 8019a46:	4e0a      	ldr	r6, [pc, #40]	; (8019a70 <__libc_init_array+0x40>)
 8019a48:	4c0a      	ldr	r4, [pc, #40]	; (8019a74 <__libc_init_array+0x44>)
 8019a4a:	1ba4      	subs	r4, r4, r6
 8019a4c:	10a4      	asrs	r4, r4, #2
 8019a4e:	42a5      	cmp	r5, r4
 8019a50:	d105      	bne.n	8019a5e <__libc_init_array+0x2e>
 8019a52:	bd70      	pop	{r4, r5, r6, pc}
 8019a54:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8019a58:	4798      	blx	r3
 8019a5a:	3501      	adds	r5, #1
 8019a5c:	e7ee      	b.n	8019a3c <__libc_init_array+0xc>
 8019a5e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8019a62:	4798      	blx	r3
 8019a64:	3501      	adds	r5, #1
 8019a66:	e7f2      	b.n	8019a4e <__libc_init_array+0x1e>
 8019a68:	08022060 	.word	0x08022060
 8019a6c:	08022060 	.word	0x08022060
 8019a70:	08022060 	.word	0x08022060
 8019a74:	08022064 	.word	0x08022064

08019a78 <memcmp>:
 8019a78:	b530      	push	{r4, r5, lr}
 8019a7a:	2400      	movs	r4, #0
 8019a7c:	42a2      	cmp	r2, r4
 8019a7e:	d101      	bne.n	8019a84 <memcmp+0xc>
 8019a80:	2000      	movs	r0, #0
 8019a82:	e007      	b.n	8019a94 <memcmp+0x1c>
 8019a84:	5d03      	ldrb	r3, [r0, r4]
 8019a86:	3401      	adds	r4, #1
 8019a88:	190d      	adds	r5, r1, r4
 8019a8a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8019a8e:	42ab      	cmp	r3, r5
 8019a90:	d0f4      	beq.n	8019a7c <memcmp+0x4>
 8019a92:	1b58      	subs	r0, r3, r5
 8019a94:	bd30      	pop	{r4, r5, pc}

08019a96 <memcpy>:
 8019a96:	b510      	push	{r4, lr}
 8019a98:	1e43      	subs	r3, r0, #1
 8019a9a:	440a      	add	r2, r1
 8019a9c:	4291      	cmp	r1, r2
 8019a9e:	d100      	bne.n	8019aa2 <memcpy+0xc>
 8019aa0:	bd10      	pop	{r4, pc}
 8019aa2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019aa6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019aaa:	e7f7      	b.n	8019a9c <memcpy+0x6>

08019aac <memset>:
 8019aac:	4603      	mov	r3, r0
 8019aae:	4402      	add	r2, r0
 8019ab0:	4293      	cmp	r3, r2
 8019ab2:	d100      	bne.n	8019ab6 <memset+0xa>
 8019ab4:	4770      	bx	lr
 8019ab6:	f803 1b01 	strb.w	r1, [r3], #1
 8019aba:	e7f9      	b.n	8019ab0 <memset+0x4>

08019abc <__cvt>:
 8019abc:	2b00      	cmp	r3, #0
 8019abe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019ac2:	461e      	mov	r6, r3
 8019ac4:	bfbb      	ittet	lt
 8019ac6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8019aca:	461e      	movlt	r6, r3
 8019acc:	2300      	movge	r3, #0
 8019ace:	232d      	movlt	r3, #45	; 0x2d
 8019ad0:	b088      	sub	sp, #32
 8019ad2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8019ad4:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8019ad8:	f027 0720 	bic.w	r7, r7, #32
 8019adc:	2f46      	cmp	r7, #70	; 0x46
 8019ade:	4614      	mov	r4, r2
 8019ae0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8019ae2:	700b      	strb	r3, [r1, #0]
 8019ae4:	d004      	beq.n	8019af0 <__cvt+0x34>
 8019ae6:	2f45      	cmp	r7, #69	; 0x45
 8019ae8:	d100      	bne.n	8019aec <__cvt+0x30>
 8019aea:	3501      	adds	r5, #1
 8019aec:	2302      	movs	r3, #2
 8019aee:	e000      	b.n	8019af2 <__cvt+0x36>
 8019af0:	2303      	movs	r3, #3
 8019af2:	aa07      	add	r2, sp, #28
 8019af4:	9204      	str	r2, [sp, #16]
 8019af6:	aa06      	add	r2, sp, #24
 8019af8:	e9cd a202 	strd	sl, r2, [sp, #8]
 8019afc:	e9cd 3500 	strd	r3, r5, [sp]
 8019b00:	4622      	mov	r2, r4
 8019b02:	4633      	mov	r3, r6
 8019b04:	f001 ff00 	bl	801b908 <_dtoa_r>
 8019b08:	2f47      	cmp	r7, #71	; 0x47
 8019b0a:	4680      	mov	r8, r0
 8019b0c:	d102      	bne.n	8019b14 <__cvt+0x58>
 8019b0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8019b10:	07db      	lsls	r3, r3, #31
 8019b12:	d526      	bpl.n	8019b62 <__cvt+0xa6>
 8019b14:	2f46      	cmp	r7, #70	; 0x46
 8019b16:	eb08 0905 	add.w	r9, r8, r5
 8019b1a:	d111      	bne.n	8019b40 <__cvt+0x84>
 8019b1c:	f898 3000 	ldrb.w	r3, [r8]
 8019b20:	2b30      	cmp	r3, #48	; 0x30
 8019b22:	d10a      	bne.n	8019b3a <__cvt+0x7e>
 8019b24:	2200      	movs	r2, #0
 8019b26:	2300      	movs	r3, #0
 8019b28:	4620      	mov	r0, r4
 8019b2a:	4631      	mov	r1, r6
 8019b2c:	f7e6 ff7c 	bl	8000a28 <__aeabi_dcmpeq>
 8019b30:	b918      	cbnz	r0, 8019b3a <__cvt+0x7e>
 8019b32:	f1c5 0501 	rsb	r5, r5, #1
 8019b36:	f8ca 5000 	str.w	r5, [sl]
 8019b3a:	f8da 3000 	ldr.w	r3, [sl]
 8019b3e:	4499      	add	r9, r3
 8019b40:	2200      	movs	r2, #0
 8019b42:	2300      	movs	r3, #0
 8019b44:	4620      	mov	r0, r4
 8019b46:	4631      	mov	r1, r6
 8019b48:	f7e6 ff6e 	bl	8000a28 <__aeabi_dcmpeq>
 8019b4c:	b938      	cbnz	r0, 8019b5e <__cvt+0xa2>
 8019b4e:	2230      	movs	r2, #48	; 0x30
 8019b50:	9b07      	ldr	r3, [sp, #28]
 8019b52:	454b      	cmp	r3, r9
 8019b54:	d205      	bcs.n	8019b62 <__cvt+0xa6>
 8019b56:	1c59      	adds	r1, r3, #1
 8019b58:	9107      	str	r1, [sp, #28]
 8019b5a:	701a      	strb	r2, [r3, #0]
 8019b5c:	e7f8      	b.n	8019b50 <__cvt+0x94>
 8019b5e:	f8cd 901c 	str.w	r9, [sp, #28]
 8019b62:	4640      	mov	r0, r8
 8019b64:	9b07      	ldr	r3, [sp, #28]
 8019b66:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8019b68:	eba3 0308 	sub.w	r3, r3, r8
 8019b6c:	6013      	str	r3, [r2, #0]
 8019b6e:	b008      	add	sp, #32
 8019b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08019b74 <__exponent>:
 8019b74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019b76:	2900      	cmp	r1, #0
 8019b78:	bfb4      	ite	lt
 8019b7a:	232d      	movlt	r3, #45	; 0x2d
 8019b7c:	232b      	movge	r3, #43	; 0x2b
 8019b7e:	4604      	mov	r4, r0
 8019b80:	bfb8      	it	lt
 8019b82:	4249      	neglt	r1, r1
 8019b84:	2909      	cmp	r1, #9
 8019b86:	f804 2b02 	strb.w	r2, [r4], #2
 8019b8a:	7043      	strb	r3, [r0, #1]
 8019b8c:	dd21      	ble.n	8019bd2 <__exponent+0x5e>
 8019b8e:	f10d 0307 	add.w	r3, sp, #7
 8019b92:	461f      	mov	r7, r3
 8019b94:	260a      	movs	r6, #10
 8019b96:	fb91 f5f6 	sdiv	r5, r1, r6
 8019b9a:	fb06 1115 	mls	r1, r6, r5, r1
 8019b9e:	2d09      	cmp	r5, #9
 8019ba0:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8019ba4:	f803 1c01 	strb.w	r1, [r3, #-1]
 8019ba8:	f103 32ff 	add.w	r2, r3, #4294967295
 8019bac:	4629      	mov	r1, r5
 8019bae:	dc09      	bgt.n	8019bc4 <__exponent+0x50>
 8019bb0:	3130      	adds	r1, #48	; 0x30
 8019bb2:	3b02      	subs	r3, #2
 8019bb4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8019bb8:	42bb      	cmp	r3, r7
 8019bba:	4622      	mov	r2, r4
 8019bbc:	d304      	bcc.n	8019bc8 <__exponent+0x54>
 8019bbe:	1a10      	subs	r0, r2, r0
 8019bc0:	b003      	add	sp, #12
 8019bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019bc4:	4613      	mov	r3, r2
 8019bc6:	e7e6      	b.n	8019b96 <__exponent+0x22>
 8019bc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019bcc:	f804 2b01 	strb.w	r2, [r4], #1
 8019bd0:	e7f2      	b.n	8019bb8 <__exponent+0x44>
 8019bd2:	2330      	movs	r3, #48	; 0x30
 8019bd4:	4419      	add	r1, r3
 8019bd6:	7083      	strb	r3, [r0, #2]
 8019bd8:	1d02      	adds	r2, r0, #4
 8019bda:	70c1      	strb	r1, [r0, #3]
 8019bdc:	e7ef      	b.n	8019bbe <__exponent+0x4a>
	...

08019be0 <_printf_float>:
 8019be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019be4:	b091      	sub	sp, #68	; 0x44
 8019be6:	460c      	mov	r4, r1
 8019be8:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8019bea:	4693      	mov	fp, r2
 8019bec:	461e      	mov	r6, r3
 8019bee:	4605      	mov	r5, r0
 8019bf0:	f003 f8e6 	bl	801cdc0 <_localeconv_r>
 8019bf4:	6803      	ldr	r3, [r0, #0]
 8019bf6:	4618      	mov	r0, r3
 8019bf8:	9309      	str	r3, [sp, #36]	; 0x24
 8019bfa:	f7e6 fae9 	bl	80001d0 <strlen>
 8019bfe:	2300      	movs	r3, #0
 8019c00:	930e      	str	r3, [sp, #56]	; 0x38
 8019c02:	683b      	ldr	r3, [r7, #0]
 8019c04:	900a      	str	r0, [sp, #40]	; 0x28
 8019c06:	3307      	adds	r3, #7
 8019c08:	f023 0307 	bic.w	r3, r3, #7
 8019c0c:	f103 0208 	add.w	r2, r3, #8
 8019c10:	f894 8018 	ldrb.w	r8, [r4, #24]
 8019c14:	f8d4 a000 	ldr.w	sl, [r4]
 8019c18:	603a      	str	r2, [r7, #0]
 8019c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c1e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8019c22:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8019c26:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8019c2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8019c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8019c30:	4ba6      	ldr	r3, [pc, #664]	; (8019ecc <_printf_float+0x2ec>)
 8019c32:	4638      	mov	r0, r7
 8019c34:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019c36:	f7e6 ff29 	bl	8000a8c <__aeabi_dcmpun>
 8019c3a:	bb68      	cbnz	r0, 8019c98 <_printf_float+0xb8>
 8019c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8019c40:	4ba2      	ldr	r3, [pc, #648]	; (8019ecc <_printf_float+0x2ec>)
 8019c42:	4638      	mov	r0, r7
 8019c44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8019c46:	f7e6 ff03 	bl	8000a50 <__aeabi_dcmple>
 8019c4a:	bb28      	cbnz	r0, 8019c98 <_printf_float+0xb8>
 8019c4c:	2200      	movs	r2, #0
 8019c4e:	2300      	movs	r3, #0
 8019c50:	4638      	mov	r0, r7
 8019c52:	4649      	mov	r1, r9
 8019c54:	f7e6 fef2 	bl	8000a3c <__aeabi_dcmplt>
 8019c58:	b110      	cbz	r0, 8019c60 <_printf_float+0x80>
 8019c5a:	232d      	movs	r3, #45	; 0x2d
 8019c5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019c60:	4f9b      	ldr	r7, [pc, #620]	; (8019ed0 <_printf_float+0x2f0>)
 8019c62:	4b9c      	ldr	r3, [pc, #624]	; (8019ed4 <_printf_float+0x2f4>)
 8019c64:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8019c68:	bf98      	it	ls
 8019c6a:	461f      	movls	r7, r3
 8019c6c:	2303      	movs	r3, #3
 8019c6e:	f04f 0900 	mov.w	r9, #0
 8019c72:	6123      	str	r3, [r4, #16]
 8019c74:	f02a 0304 	bic.w	r3, sl, #4
 8019c78:	6023      	str	r3, [r4, #0]
 8019c7a:	9600      	str	r6, [sp, #0]
 8019c7c:	465b      	mov	r3, fp
 8019c7e:	aa0f      	add	r2, sp, #60	; 0x3c
 8019c80:	4621      	mov	r1, r4
 8019c82:	4628      	mov	r0, r5
 8019c84:	f000 f9e2 	bl	801a04c <_printf_common>
 8019c88:	3001      	adds	r0, #1
 8019c8a:	f040 8090 	bne.w	8019dae <_printf_float+0x1ce>
 8019c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8019c92:	b011      	add	sp, #68	; 0x44
 8019c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c98:	463a      	mov	r2, r7
 8019c9a:	464b      	mov	r3, r9
 8019c9c:	4638      	mov	r0, r7
 8019c9e:	4649      	mov	r1, r9
 8019ca0:	f7e6 fef4 	bl	8000a8c <__aeabi_dcmpun>
 8019ca4:	b110      	cbz	r0, 8019cac <_printf_float+0xcc>
 8019ca6:	4f8c      	ldr	r7, [pc, #560]	; (8019ed8 <_printf_float+0x2f8>)
 8019ca8:	4b8c      	ldr	r3, [pc, #560]	; (8019edc <_printf_float+0x2fc>)
 8019caa:	e7db      	b.n	8019c64 <_printf_float+0x84>
 8019cac:	6863      	ldr	r3, [r4, #4]
 8019cae:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8019cb2:	1c59      	adds	r1, r3, #1
 8019cb4:	a80d      	add	r0, sp, #52	; 0x34
 8019cb6:	a90e      	add	r1, sp, #56	; 0x38
 8019cb8:	d140      	bne.n	8019d3c <_printf_float+0x15c>
 8019cba:	2306      	movs	r3, #6
 8019cbc:	6063      	str	r3, [r4, #4]
 8019cbe:	f04f 0c00 	mov.w	ip, #0
 8019cc2:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8019cc6:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8019cca:	6863      	ldr	r3, [r4, #4]
 8019ccc:	6022      	str	r2, [r4, #0]
 8019cce:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8019cd2:	9300      	str	r3, [sp, #0]
 8019cd4:	463a      	mov	r2, r7
 8019cd6:	464b      	mov	r3, r9
 8019cd8:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8019cdc:	4628      	mov	r0, r5
 8019cde:	f7ff feed 	bl	8019abc <__cvt>
 8019ce2:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8019ce6:	2b47      	cmp	r3, #71	; 0x47
 8019ce8:	4607      	mov	r7, r0
 8019cea:	d109      	bne.n	8019d00 <_printf_float+0x120>
 8019cec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019cee:	1cd8      	adds	r0, r3, #3
 8019cf0:	db02      	blt.n	8019cf8 <_printf_float+0x118>
 8019cf2:	6862      	ldr	r2, [r4, #4]
 8019cf4:	4293      	cmp	r3, r2
 8019cf6:	dd47      	ble.n	8019d88 <_printf_float+0x1a8>
 8019cf8:	f1a8 0802 	sub.w	r8, r8, #2
 8019cfc:	fa5f f888 	uxtb.w	r8, r8
 8019d00:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8019d04:	990d      	ldr	r1, [sp, #52]	; 0x34
 8019d06:	d824      	bhi.n	8019d52 <_printf_float+0x172>
 8019d08:	3901      	subs	r1, #1
 8019d0a:	4642      	mov	r2, r8
 8019d0c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8019d10:	910d      	str	r1, [sp, #52]	; 0x34
 8019d12:	f7ff ff2f 	bl	8019b74 <__exponent>
 8019d16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019d18:	4681      	mov	r9, r0
 8019d1a:	1813      	adds	r3, r2, r0
 8019d1c:	2a01      	cmp	r2, #1
 8019d1e:	6123      	str	r3, [r4, #16]
 8019d20:	dc02      	bgt.n	8019d28 <_printf_float+0x148>
 8019d22:	6822      	ldr	r2, [r4, #0]
 8019d24:	07d1      	lsls	r1, r2, #31
 8019d26:	d501      	bpl.n	8019d2c <_printf_float+0x14c>
 8019d28:	3301      	adds	r3, #1
 8019d2a:	6123      	str	r3, [r4, #16]
 8019d2c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8019d30:	2b00      	cmp	r3, #0
 8019d32:	d0a2      	beq.n	8019c7a <_printf_float+0x9a>
 8019d34:	232d      	movs	r3, #45	; 0x2d
 8019d36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019d3a:	e79e      	b.n	8019c7a <_printf_float+0x9a>
 8019d3c:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8019d40:	f000 816e 	beq.w	801a020 <_printf_float+0x440>
 8019d44:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8019d48:	d1b9      	bne.n	8019cbe <_printf_float+0xde>
 8019d4a:	2b00      	cmp	r3, #0
 8019d4c:	d1b7      	bne.n	8019cbe <_printf_float+0xde>
 8019d4e:	2301      	movs	r3, #1
 8019d50:	e7b4      	b.n	8019cbc <_printf_float+0xdc>
 8019d52:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8019d56:	d119      	bne.n	8019d8c <_printf_float+0x1ac>
 8019d58:	2900      	cmp	r1, #0
 8019d5a:	6863      	ldr	r3, [r4, #4]
 8019d5c:	dd0c      	ble.n	8019d78 <_printf_float+0x198>
 8019d5e:	6121      	str	r1, [r4, #16]
 8019d60:	b913      	cbnz	r3, 8019d68 <_printf_float+0x188>
 8019d62:	6822      	ldr	r2, [r4, #0]
 8019d64:	07d2      	lsls	r2, r2, #31
 8019d66:	d502      	bpl.n	8019d6e <_printf_float+0x18e>
 8019d68:	3301      	adds	r3, #1
 8019d6a:	440b      	add	r3, r1
 8019d6c:	6123      	str	r3, [r4, #16]
 8019d6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019d70:	f04f 0900 	mov.w	r9, #0
 8019d74:	65a3      	str	r3, [r4, #88]	; 0x58
 8019d76:	e7d9      	b.n	8019d2c <_printf_float+0x14c>
 8019d78:	b913      	cbnz	r3, 8019d80 <_printf_float+0x1a0>
 8019d7a:	6822      	ldr	r2, [r4, #0]
 8019d7c:	07d0      	lsls	r0, r2, #31
 8019d7e:	d501      	bpl.n	8019d84 <_printf_float+0x1a4>
 8019d80:	3302      	adds	r3, #2
 8019d82:	e7f3      	b.n	8019d6c <_printf_float+0x18c>
 8019d84:	2301      	movs	r3, #1
 8019d86:	e7f1      	b.n	8019d6c <_printf_float+0x18c>
 8019d88:	f04f 0867 	mov.w	r8, #103	; 0x67
 8019d8c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8019d90:	4293      	cmp	r3, r2
 8019d92:	db05      	blt.n	8019da0 <_printf_float+0x1c0>
 8019d94:	6822      	ldr	r2, [r4, #0]
 8019d96:	6123      	str	r3, [r4, #16]
 8019d98:	07d1      	lsls	r1, r2, #31
 8019d9a:	d5e8      	bpl.n	8019d6e <_printf_float+0x18e>
 8019d9c:	3301      	adds	r3, #1
 8019d9e:	e7e5      	b.n	8019d6c <_printf_float+0x18c>
 8019da0:	2b00      	cmp	r3, #0
 8019da2:	bfcc      	ite	gt
 8019da4:	2301      	movgt	r3, #1
 8019da6:	f1c3 0302 	rsble	r3, r3, #2
 8019daa:	4413      	add	r3, r2
 8019dac:	e7de      	b.n	8019d6c <_printf_float+0x18c>
 8019dae:	6823      	ldr	r3, [r4, #0]
 8019db0:	055a      	lsls	r2, r3, #21
 8019db2:	d407      	bmi.n	8019dc4 <_printf_float+0x1e4>
 8019db4:	6923      	ldr	r3, [r4, #16]
 8019db6:	463a      	mov	r2, r7
 8019db8:	4659      	mov	r1, fp
 8019dba:	4628      	mov	r0, r5
 8019dbc:	47b0      	blx	r6
 8019dbe:	3001      	adds	r0, #1
 8019dc0:	d129      	bne.n	8019e16 <_printf_float+0x236>
 8019dc2:	e764      	b.n	8019c8e <_printf_float+0xae>
 8019dc4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8019dc8:	f240 80d7 	bls.w	8019f7a <_printf_float+0x39a>
 8019dcc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8019dd0:	2200      	movs	r2, #0
 8019dd2:	2300      	movs	r3, #0
 8019dd4:	f7e6 fe28 	bl	8000a28 <__aeabi_dcmpeq>
 8019dd8:	b388      	cbz	r0, 8019e3e <_printf_float+0x25e>
 8019dda:	2301      	movs	r3, #1
 8019ddc:	4a40      	ldr	r2, [pc, #256]	; (8019ee0 <_printf_float+0x300>)
 8019dde:	4659      	mov	r1, fp
 8019de0:	4628      	mov	r0, r5
 8019de2:	47b0      	blx	r6
 8019de4:	3001      	adds	r0, #1
 8019de6:	f43f af52 	beq.w	8019c8e <_printf_float+0xae>
 8019dea:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8019dee:	429a      	cmp	r2, r3
 8019df0:	db02      	blt.n	8019df8 <_printf_float+0x218>
 8019df2:	6823      	ldr	r3, [r4, #0]
 8019df4:	07d8      	lsls	r0, r3, #31
 8019df6:	d50e      	bpl.n	8019e16 <_printf_float+0x236>
 8019df8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019dfc:	4659      	mov	r1, fp
 8019dfe:	4628      	mov	r0, r5
 8019e00:	47b0      	blx	r6
 8019e02:	3001      	adds	r0, #1
 8019e04:	f43f af43 	beq.w	8019c8e <_printf_float+0xae>
 8019e08:	2700      	movs	r7, #0
 8019e0a:	f104 081a 	add.w	r8, r4, #26
 8019e0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019e10:	3b01      	subs	r3, #1
 8019e12:	42bb      	cmp	r3, r7
 8019e14:	dc09      	bgt.n	8019e2a <_printf_float+0x24a>
 8019e16:	6823      	ldr	r3, [r4, #0]
 8019e18:	079f      	lsls	r7, r3, #30
 8019e1a:	f100 80fd 	bmi.w	801a018 <_printf_float+0x438>
 8019e1e:	68e0      	ldr	r0, [r4, #12]
 8019e20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8019e22:	4298      	cmp	r0, r3
 8019e24:	bfb8      	it	lt
 8019e26:	4618      	movlt	r0, r3
 8019e28:	e733      	b.n	8019c92 <_printf_float+0xb2>
 8019e2a:	2301      	movs	r3, #1
 8019e2c:	4642      	mov	r2, r8
 8019e2e:	4659      	mov	r1, fp
 8019e30:	4628      	mov	r0, r5
 8019e32:	47b0      	blx	r6
 8019e34:	3001      	adds	r0, #1
 8019e36:	f43f af2a 	beq.w	8019c8e <_printf_float+0xae>
 8019e3a:	3701      	adds	r7, #1
 8019e3c:	e7e7      	b.n	8019e0e <_printf_float+0x22e>
 8019e3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019e40:	2b00      	cmp	r3, #0
 8019e42:	dc2b      	bgt.n	8019e9c <_printf_float+0x2bc>
 8019e44:	2301      	movs	r3, #1
 8019e46:	4a26      	ldr	r2, [pc, #152]	; (8019ee0 <_printf_float+0x300>)
 8019e48:	4659      	mov	r1, fp
 8019e4a:	4628      	mov	r0, r5
 8019e4c:	47b0      	blx	r6
 8019e4e:	3001      	adds	r0, #1
 8019e50:	f43f af1d 	beq.w	8019c8e <_printf_float+0xae>
 8019e54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019e56:	b923      	cbnz	r3, 8019e62 <_printf_float+0x282>
 8019e58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019e5a:	b913      	cbnz	r3, 8019e62 <_printf_float+0x282>
 8019e5c:	6823      	ldr	r3, [r4, #0]
 8019e5e:	07d9      	lsls	r1, r3, #31
 8019e60:	d5d9      	bpl.n	8019e16 <_printf_float+0x236>
 8019e62:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019e66:	4659      	mov	r1, fp
 8019e68:	4628      	mov	r0, r5
 8019e6a:	47b0      	blx	r6
 8019e6c:	3001      	adds	r0, #1
 8019e6e:	f43f af0e 	beq.w	8019c8e <_printf_float+0xae>
 8019e72:	f04f 0800 	mov.w	r8, #0
 8019e76:	f104 091a 	add.w	r9, r4, #26
 8019e7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019e7c:	425b      	negs	r3, r3
 8019e7e:	4543      	cmp	r3, r8
 8019e80:	dc01      	bgt.n	8019e86 <_printf_float+0x2a6>
 8019e82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019e84:	e797      	b.n	8019db6 <_printf_float+0x1d6>
 8019e86:	2301      	movs	r3, #1
 8019e88:	464a      	mov	r2, r9
 8019e8a:	4659      	mov	r1, fp
 8019e8c:	4628      	mov	r0, r5
 8019e8e:	47b0      	blx	r6
 8019e90:	3001      	adds	r0, #1
 8019e92:	f43f aefc 	beq.w	8019c8e <_printf_float+0xae>
 8019e96:	f108 0801 	add.w	r8, r8, #1
 8019e9a:	e7ee      	b.n	8019e7a <_printf_float+0x29a>
 8019e9c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019e9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019ea0:	429a      	cmp	r2, r3
 8019ea2:	bfa8      	it	ge
 8019ea4:	461a      	movge	r2, r3
 8019ea6:	2a00      	cmp	r2, #0
 8019ea8:	4690      	mov	r8, r2
 8019eaa:	dd07      	ble.n	8019ebc <_printf_float+0x2dc>
 8019eac:	4613      	mov	r3, r2
 8019eae:	4659      	mov	r1, fp
 8019eb0:	463a      	mov	r2, r7
 8019eb2:	4628      	mov	r0, r5
 8019eb4:	47b0      	blx	r6
 8019eb6:	3001      	adds	r0, #1
 8019eb8:	f43f aee9 	beq.w	8019c8e <_printf_float+0xae>
 8019ebc:	f104 031a 	add.w	r3, r4, #26
 8019ec0:	f04f 0a00 	mov.w	sl, #0
 8019ec4:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8019ec8:	930b      	str	r3, [sp, #44]	; 0x2c
 8019eca:	e015      	b.n	8019ef8 <_printf_float+0x318>
 8019ecc:	7fefffff 	.word	0x7fefffff
 8019ed0:	08021d40 	.word	0x08021d40
 8019ed4:	08021d3c 	.word	0x08021d3c
 8019ed8:	08021d48 	.word	0x08021d48
 8019edc:	08021d44 	.word	0x08021d44
 8019ee0:	08021d4c 	.word	0x08021d4c
 8019ee4:	2301      	movs	r3, #1
 8019ee6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019ee8:	4659      	mov	r1, fp
 8019eea:	4628      	mov	r0, r5
 8019eec:	47b0      	blx	r6
 8019eee:	3001      	adds	r0, #1
 8019ef0:	f43f aecd 	beq.w	8019c8e <_printf_float+0xae>
 8019ef4:	f10a 0a01 	add.w	sl, sl, #1
 8019ef8:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8019efc:	eba9 0308 	sub.w	r3, r9, r8
 8019f00:	4553      	cmp	r3, sl
 8019f02:	dcef      	bgt.n	8019ee4 <_printf_float+0x304>
 8019f04:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8019f08:	429a      	cmp	r2, r3
 8019f0a:	444f      	add	r7, r9
 8019f0c:	db14      	blt.n	8019f38 <_printf_float+0x358>
 8019f0e:	6823      	ldr	r3, [r4, #0]
 8019f10:	07da      	lsls	r2, r3, #31
 8019f12:	d411      	bmi.n	8019f38 <_printf_float+0x358>
 8019f14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019f16:	990d      	ldr	r1, [sp, #52]	; 0x34
 8019f18:	eba3 0209 	sub.w	r2, r3, r9
 8019f1c:	eba3 0901 	sub.w	r9, r3, r1
 8019f20:	4591      	cmp	r9, r2
 8019f22:	bfa8      	it	ge
 8019f24:	4691      	movge	r9, r2
 8019f26:	f1b9 0f00 	cmp.w	r9, #0
 8019f2a:	dc0d      	bgt.n	8019f48 <_printf_float+0x368>
 8019f2c:	2700      	movs	r7, #0
 8019f2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019f32:	f104 081a 	add.w	r8, r4, #26
 8019f36:	e018      	b.n	8019f6a <_printf_float+0x38a>
 8019f38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019f3c:	4659      	mov	r1, fp
 8019f3e:	4628      	mov	r0, r5
 8019f40:	47b0      	blx	r6
 8019f42:	3001      	adds	r0, #1
 8019f44:	d1e6      	bne.n	8019f14 <_printf_float+0x334>
 8019f46:	e6a2      	b.n	8019c8e <_printf_float+0xae>
 8019f48:	464b      	mov	r3, r9
 8019f4a:	463a      	mov	r2, r7
 8019f4c:	4659      	mov	r1, fp
 8019f4e:	4628      	mov	r0, r5
 8019f50:	47b0      	blx	r6
 8019f52:	3001      	adds	r0, #1
 8019f54:	d1ea      	bne.n	8019f2c <_printf_float+0x34c>
 8019f56:	e69a      	b.n	8019c8e <_printf_float+0xae>
 8019f58:	2301      	movs	r3, #1
 8019f5a:	4642      	mov	r2, r8
 8019f5c:	4659      	mov	r1, fp
 8019f5e:	4628      	mov	r0, r5
 8019f60:	47b0      	blx	r6
 8019f62:	3001      	adds	r0, #1
 8019f64:	f43f ae93 	beq.w	8019c8e <_printf_float+0xae>
 8019f68:	3701      	adds	r7, #1
 8019f6a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8019f6e:	1a9b      	subs	r3, r3, r2
 8019f70:	eba3 0309 	sub.w	r3, r3, r9
 8019f74:	42bb      	cmp	r3, r7
 8019f76:	dcef      	bgt.n	8019f58 <_printf_float+0x378>
 8019f78:	e74d      	b.n	8019e16 <_printf_float+0x236>
 8019f7a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019f7c:	2a01      	cmp	r2, #1
 8019f7e:	dc01      	bgt.n	8019f84 <_printf_float+0x3a4>
 8019f80:	07db      	lsls	r3, r3, #31
 8019f82:	d538      	bpl.n	8019ff6 <_printf_float+0x416>
 8019f84:	2301      	movs	r3, #1
 8019f86:	463a      	mov	r2, r7
 8019f88:	4659      	mov	r1, fp
 8019f8a:	4628      	mov	r0, r5
 8019f8c:	47b0      	blx	r6
 8019f8e:	3001      	adds	r0, #1
 8019f90:	f43f ae7d 	beq.w	8019c8e <_printf_float+0xae>
 8019f94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8019f98:	4659      	mov	r1, fp
 8019f9a:	4628      	mov	r0, r5
 8019f9c:	47b0      	blx	r6
 8019f9e:	3001      	adds	r0, #1
 8019fa0:	f107 0701 	add.w	r7, r7, #1
 8019fa4:	f43f ae73 	beq.w	8019c8e <_printf_float+0xae>
 8019fa8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8019fac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019fae:	2200      	movs	r2, #0
 8019fb0:	f103 38ff 	add.w	r8, r3, #4294967295
 8019fb4:	2300      	movs	r3, #0
 8019fb6:	f7e6 fd37 	bl	8000a28 <__aeabi_dcmpeq>
 8019fba:	b9c0      	cbnz	r0, 8019fee <_printf_float+0x40e>
 8019fbc:	4643      	mov	r3, r8
 8019fbe:	463a      	mov	r2, r7
 8019fc0:	4659      	mov	r1, fp
 8019fc2:	4628      	mov	r0, r5
 8019fc4:	47b0      	blx	r6
 8019fc6:	3001      	adds	r0, #1
 8019fc8:	d10d      	bne.n	8019fe6 <_printf_float+0x406>
 8019fca:	e660      	b.n	8019c8e <_printf_float+0xae>
 8019fcc:	2301      	movs	r3, #1
 8019fce:	4642      	mov	r2, r8
 8019fd0:	4659      	mov	r1, fp
 8019fd2:	4628      	mov	r0, r5
 8019fd4:	47b0      	blx	r6
 8019fd6:	3001      	adds	r0, #1
 8019fd8:	f43f ae59 	beq.w	8019c8e <_printf_float+0xae>
 8019fdc:	3701      	adds	r7, #1
 8019fde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019fe0:	3b01      	subs	r3, #1
 8019fe2:	42bb      	cmp	r3, r7
 8019fe4:	dcf2      	bgt.n	8019fcc <_printf_float+0x3ec>
 8019fe6:	464b      	mov	r3, r9
 8019fe8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8019fec:	e6e4      	b.n	8019db8 <_printf_float+0x1d8>
 8019fee:	2700      	movs	r7, #0
 8019ff0:	f104 081a 	add.w	r8, r4, #26
 8019ff4:	e7f3      	b.n	8019fde <_printf_float+0x3fe>
 8019ff6:	2301      	movs	r3, #1
 8019ff8:	e7e1      	b.n	8019fbe <_printf_float+0x3de>
 8019ffa:	2301      	movs	r3, #1
 8019ffc:	4642      	mov	r2, r8
 8019ffe:	4659      	mov	r1, fp
 801a000:	4628      	mov	r0, r5
 801a002:	47b0      	blx	r6
 801a004:	3001      	adds	r0, #1
 801a006:	f43f ae42 	beq.w	8019c8e <_printf_float+0xae>
 801a00a:	3701      	adds	r7, #1
 801a00c:	68e3      	ldr	r3, [r4, #12]
 801a00e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a010:	1a9b      	subs	r3, r3, r2
 801a012:	42bb      	cmp	r3, r7
 801a014:	dcf1      	bgt.n	8019ffa <_printf_float+0x41a>
 801a016:	e702      	b.n	8019e1e <_printf_float+0x23e>
 801a018:	2700      	movs	r7, #0
 801a01a:	f104 0819 	add.w	r8, r4, #25
 801a01e:	e7f5      	b.n	801a00c <_printf_float+0x42c>
 801a020:	2b00      	cmp	r3, #0
 801a022:	f43f ae94 	beq.w	8019d4e <_printf_float+0x16e>
 801a026:	f04f 0c00 	mov.w	ip, #0
 801a02a:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 801a02e:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 801a032:	6022      	str	r2, [r4, #0]
 801a034:	e9cd 0803 	strd	r0, r8, [sp, #12]
 801a038:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801a03c:	9300      	str	r3, [sp, #0]
 801a03e:	463a      	mov	r2, r7
 801a040:	464b      	mov	r3, r9
 801a042:	4628      	mov	r0, r5
 801a044:	f7ff fd3a 	bl	8019abc <__cvt>
 801a048:	4607      	mov	r7, r0
 801a04a:	e64f      	b.n	8019cec <_printf_float+0x10c>

0801a04c <_printf_common>:
 801a04c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a050:	4691      	mov	r9, r2
 801a052:	461f      	mov	r7, r3
 801a054:	688a      	ldr	r2, [r1, #8]
 801a056:	690b      	ldr	r3, [r1, #16]
 801a058:	4606      	mov	r6, r0
 801a05a:	4293      	cmp	r3, r2
 801a05c:	bfb8      	it	lt
 801a05e:	4613      	movlt	r3, r2
 801a060:	f8c9 3000 	str.w	r3, [r9]
 801a064:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a068:	460c      	mov	r4, r1
 801a06a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a06e:	b112      	cbz	r2, 801a076 <_printf_common+0x2a>
 801a070:	3301      	adds	r3, #1
 801a072:	f8c9 3000 	str.w	r3, [r9]
 801a076:	6823      	ldr	r3, [r4, #0]
 801a078:	0699      	lsls	r1, r3, #26
 801a07a:	bf42      	ittt	mi
 801a07c:	f8d9 3000 	ldrmi.w	r3, [r9]
 801a080:	3302      	addmi	r3, #2
 801a082:	f8c9 3000 	strmi.w	r3, [r9]
 801a086:	6825      	ldr	r5, [r4, #0]
 801a088:	f015 0506 	ands.w	r5, r5, #6
 801a08c:	d107      	bne.n	801a09e <_printf_common+0x52>
 801a08e:	f104 0a19 	add.w	sl, r4, #25
 801a092:	68e3      	ldr	r3, [r4, #12]
 801a094:	f8d9 2000 	ldr.w	r2, [r9]
 801a098:	1a9b      	subs	r3, r3, r2
 801a09a:	42ab      	cmp	r3, r5
 801a09c:	dc29      	bgt.n	801a0f2 <_printf_common+0xa6>
 801a09e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801a0a2:	6822      	ldr	r2, [r4, #0]
 801a0a4:	3300      	adds	r3, #0
 801a0a6:	bf18      	it	ne
 801a0a8:	2301      	movne	r3, #1
 801a0aa:	0692      	lsls	r2, r2, #26
 801a0ac:	d42e      	bmi.n	801a10c <_printf_common+0xc0>
 801a0ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a0b2:	4639      	mov	r1, r7
 801a0b4:	4630      	mov	r0, r6
 801a0b6:	47c0      	blx	r8
 801a0b8:	3001      	adds	r0, #1
 801a0ba:	d021      	beq.n	801a100 <_printf_common+0xb4>
 801a0bc:	6823      	ldr	r3, [r4, #0]
 801a0be:	68e5      	ldr	r5, [r4, #12]
 801a0c0:	f003 0306 	and.w	r3, r3, #6
 801a0c4:	2b04      	cmp	r3, #4
 801a0c6:	bf18      	it	ne
 801a0c8:	2500      	movne	r5, #0
 801a0ca:	f8d9 2000 	ldr.w	r2, [r9]
 801a0ce:	f04f 0900 	mov.w	r9, #0
 801a0d2:	bf08      	it	eq
 801a0d4:	1aad      	subeq	r5, r5, r2
 801a0d6:	68a3      	ldr	r3, [r4, #8]
 801a0d8:	6922      	ldr	r2, [r4, #16]
 801a0da:	bf08      	it	eq
 801a0dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a0e0:	4293      	cmp	r3, r2
 801a0e2:	bfc4      	itt	gt
 801a0e4:	1a9b      	subgt	r3, r3, r2
 801a0e6:	18ed      	addgt	r5, r5, r3
 801a0e8:	341a      	adds	r4, #26
 801a0ea:	454d      	cmp	r5, r9
 801a0ec:	d11a      	bne.n	801a124 <_printf_common+0xd8>
 801a0ee:	2000      	movs	r0, #0
 801a0f0:	e008      	b.n	801a104 <_printf_common+0xb8>
 801a0f2:	2301      	movs	r3, #1
 801a0f4:	4652      	mov	r2, sl
 801a0f6:	4639      	mov	r1, r7
 801a0f8:	4630      	mov	r0, r6
 801a0fa:	47c0      	blx	r8
 801a0fc:	3001      	adds	r0, #1
 801a0fe:	d103      	bne.n	801a108 <_printf_common+0xbc>
 801a100:	f04f 30ff 	mov.w	r0, #4294967295
 801a104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a108:	3501      	adds	r5, #1
 801a10a:	e7c2      	b.n	801a092 <_printf_common+0x46>
 801a10c:	2030      	movs	r0, #48	; 0x30
 801a10e:	18e1      	adds	r1, r4, r3
 801a110:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a114:	1c5a      	adds	r2, r3, #1
 801a116:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a11a:	4422      	add	r2, r4
 801a11c:	3302      	adds	r3, #2
 801a11e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a122:	e7c4      	b.n	801a0ae <_printf_common+0x62>
 801a124:	2301      	movs	r3, #1
 801a126:	4622      	mov	r2, r4
 801a128:	4639      	mov	r1, r7
 801a12a:	4630      	mov	r0, r6
 801a12c:	47c0      	blx	r8
 801a12e:	3001      	adds	r0, #1
 801a130:	d0e6      	beq.n	801a100 <_printf_common+0xb4>
 801a132:	f109 0901 	add.w	r9, r9, #1
 801a136:	e7d8      	b.n	801a0ea <_printf_common+0x9e>

0801a138 <_printf_i>:
 801a138:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a13c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801a140:	460c      	mov	r4, r1
 801a142:	7e09      	ldrb	r1, [r1, #24]
 801a144:	b085      	sub	sp, #20
 801a146:	296e      	cmp	r1, #110	; 0x6e
 801a148:	4617      	mov	r7, r2
 801a14a:	4606      	mov	r6, r0
 801a14c:	4698      	mov	r8, r3
 801a14e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a150:	f000 80b3 	beq.w	801a2ba <_printf_i+0x182>
 801a154:	d822      	bhi.n	801a19c <_printf_i+0x64>
 801a156:	2963      	cmp	r1, #99	; 0x63
 801a158:	d036      	beq.n	801a1c8 <_printf_i+0x90>
 801a15a:	d80a      	bhi.n	801a172 <_printf_i+0x3a>
 801a15c:	2900      	cmp	r1, #0
 801a15e:	f000 80b9 	beq.w	801a2d4 <_printf_i+0x19c>
 801a162:	2958      	cmp	r1, #88	; 0x58
 801a164:	f000 8083 	beq.w	801a26e <_printf_i+0x136>
 801a168:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a16c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801a170:	e032      	b.n	801a1d8 <_printf_i+0xa0>
 801a172:	2964      	cmp	r1, #100	; 0x64
 801a174:	d001      	beq.n	801a17a <_printf_i+0x42>
 801a176:	2969      	cmp	r1, #105	; 0x69
 801a178:	d1f6      	bne.n	801a168 <_printf_i+0x30>
 801a17a:	6820      	ldr	r0, [r4, #0]
 801a17c:	6813      	ldr	r3, [r2, #0]
 801a17e:	0605      	lsls	r5, r0, #24
 801a180:	f103 0104 	add.w	r1, r3, #4
 801a184:	d52a      	bpl.n	801a1dc <_printf_i+0xa4>
 801a186:	681b      	ldr	r3, [r3, #0]
 801a188:	6011      	str	r1, [r2, #0]
 801a18a:	2b00      	cmp	r3, #0
 801a18c:	da03      	bge.n	801a196 <_printf_i+0x5e>
 801a18e:	222d      	movs	r2, #45	; 0x2d
 801a190:	425b      	negs	r3, r3
 801a192:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801a196:	486f      	ldr	r0, [pc, #444]	; (801a354 <_printf_i+0x21c>)
 801a198:	220a      	movs	r2, #10
 801a19a:	e039      	b.n	801a210 <_printf_i+0xd8>
 801a19c:	2973      	cmp	r1, #115	; 0x73
 801a19e:	f000 809d 	beq.w	801a2dc <_printf_i+0x1a4>
 801a1a2:	d808      	bhi.n	801a1b6 <_printf_i+0x7e>
 801a1a4:	296f      	cmp	r1, #111	; 0x6f
 801a1a6:	d020      	beq.n	801a1ea <_printf_i+0xb2>
 801a1a8:	2970      	cmp	r1, #112	; 0x70
 801a1aa:	d1dd      	bne.n	801a168 <_printf_i+0x30>
 801a1ac:	6823      	ldr	r3, [r4, #0]
 801a1ae:	f043 0320 	orr.w	r3, r3, #32
 801a1b2:	6023      	str	r3, [r4, #0]
 801a1b4:	e003      	b.n	801a1be <_printf_i+0x86>
 801a1b6:	2975      	cmp	r1, #117	; 0x75
 801a1b8:	d017      	beq.n	801a1ea <_printf_i+0xb2>
 801a1ba:	2978      	cmp	r1, #120	; 0x78
 801a1bc:	d1d4      	bne.n	801a168 <_printf_i+0x30>
 801a1be:	2378      	movs	r3, #120	; 0x78
 801a1c0:	4865      	ldr	r0, [pc, #404]	; (801a358 <_printf_i+0x220>)
 801a1c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a1c6:	e055      	b.n	801a274 <_printf_i+0x13c>
 801a1c8:	6813      	ldr	r3, [r2, #0]
 801a1ca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a1ce:	1d19      	adds	r1, r3, #4
 801a1d0:	681b      	ldr	r3, [r3, #0]
 801a1d2:	6011      	str	r1, [r2, #0]
 801a1d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a1d8:	2301      	movs	r3, #1
 801a1da:	e08c      	b.n	801a2f6 <_printf_i+0x1be>
 801a1dc:	681b      	ldr	r3, [r3, #0]
 801a1de:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a1e2:	6011      	str	r1, [r2, #0]
 801a1e4:	bf18      	it	ne
 801a1e6:	b21b      	sxthne	r3, r3
 801a1e8:	e7cf      	b.n	801a18a <_printf_i+0x52>
 801a1ea:	6813      	ldr	r3, [r2, #0]
 801a1ec:	6825      	ldr	r5, [r4, #0]
 801a1ee:	1d18      	adds	r0, r3, #4
 801a1f0:	6010      	str	r0, [r2, #0]
 801a1f2:	0628      	lsls	r0, r5, #24
 801a1f4:	d501      	bpl.n	801a1fa <_printf_i+0xc2>
 801a1f6:	681b      	ldr	r3, [r3, #0]
 801a1f8:	e002      	b.n	801a200 <_printf_i+0xc8>
 801a1fa:	0668      	lsls	r0, r5, #25
 801a1fc:	d5fb      	bpl.n	801a1f6 <_printf_i+0xbe>
 801a1fe:	881b      	ldrh	r3, [r3, #0]
 801a200:	296f      	cmp	r1, #111	; 0x6f
 801a202:	bf14      	ite	ne
 801a204:	220a      	movne	r2, #10
 801a206:	2208      	moveq	r2, #8
 801a208:	4852      	ldr	r0, [pc, #328]	; (801a354 <_printf_i+0x21c>)
 801a20a:	2100      	movs	r1, #0
 801a20c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a210:	6865      	ldr	r5, [r4, #4]
 801a212:	2d00      	cmp	r5, #0
 801a214:	60a5      	str	r5, [r4, #8]
 801a216:	f2c0 8095 	blt.w	801a344 <_printf_i+0x20c>
 801a21a:	6821      	ldr	r1, [r4, #0]
 801a21c:	f021 0104 	bic.w	r1, r1, #4
 801a220:	6021      	str	r1, [r4, #0]
 801a222:	2b00      	cmp	r3, #0
 801a224:	d13d      	bne.n	801a2a2 <_printf_i+0x16a>
 801a226:	2d00      	cmp	r5, #0
 801a228:	f040 808e 	bne.w	801a348 <_printf_i+0x210>
 801a22c:	4665      	mov	r5, ip
 801a22e:	2a08      	cmp	r2, #8
 801a230:	d10b      	bne.n	801a24a <_printf_i+0x112>
 801a232:	6823      	ldr	r3, [r4, #0]
 801a234:	07db      	lsls	r3, r3, #31
 801a236:	d508      	bpl.n	801a24a <_printf_i+0x112>
 801a238:	6923      	ldr	r3, [r4, #16]
 801a23a:	6862      	ldr	r2, [r4, #4]
 801a23c:	429a      	cmp	r2, r3
 801a23e:	bfde      	ittt	le
 801a240:	2330      	movle	r3, #48	; 0x30
 801a242:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a246:	f105 35ff 	addle.w	r5, r5, #4294967295
 801a24a:	ebac 0305 	sub.w	r3, ip, r5
 801a24e:	6123      	str	r3, [r4, #16]
 801a250:	f8cd 8000 	str.w	r8, [sp]
 801a254:	463b      	mov	r3, r7
 801a256:	aa03      	add	r2, sp, #12
 801a258:	4621      	mov	r1, r4
 801a25a:	4630      	mov	r0, r6
 801a25c:	f7ff fef6 	bl	801a04c <_printf_common>
 801a260:	3001      	adds	r0, #1
 801a262:	d14d      	bne.n	801a300 <_printf_i+0x1c8>
 801a264:	f04f 30ff 	mov.w	r0, #4294967295
 801a268:	b005      	add	sp, #20
 801a26a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a26e:	4839      	ldr	r0, [pc, #228]	; (801a354 <_printf_i+0x21c>)
 801a270:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801a274:	6813      	ldr	r3, [r2, #0]
 801a276:	6821      	ldr	r1, [r4, #0]
 801a278:	1d1d      	adds	r5, r3, #4
 801a27a:	681b      	ldr	r3, [r3, #0]
 801a27c:	6015      	str	r5, [r2, #0]
 801a27e:	060a      	lsls	r2, r1, #24
 801a280:	d50b      	bpl.n	801a29a <_printf_i+0x162>
 801a282:	07ca      	lsls	r2, r1, #31
 801a284:	bf44      	itt	mi
 801a286:	f041 0120 	orrmi.w	r1, r1, #32
 801a28a:	6021      	strmi	r1, [r4, #0]
 801a28c:	b91b      	cbnz	r3, 801a296 <_printf_i+0x15e>
 801a28e:	6822      	ldr	r2, [r4, #0]
 801a290:	f022 0220 	bic.w	r2, r2, #32
 801a294:	6022      	str	r2, [r4, #0]
 801a296:	2210      	movs	r2, #16
 801a298:	e7b7      	b.n	801a20a <_printf_i+0xd2>
 801a29a:	064d      	lsls	r5, r1, #25
 801a29c:	bf48      	it	mi
 801a29e:	b29b      	uxthmi	r3, r3
 801a2a0:	e7ef      	b.n	801a282 <_printf_i+0x14a>
 801a2a2:	4665      	mov	r5, ip
 801a2a4:	fbb3 f1f2 	udiv	r1, r3, r2
 801a2a8:	fb02 3311 	mls	r3, r2, r1, r3
 801a2ac:	5cc3      	ldrb	r3, [r0, r3]
 801a2ae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801a2b2:	460b      	mov	r3, r1
 801a2b4:	2900      	cmp	r1, #0
 801a2b6:	d1f5      	bne.n	801a2a4 <_printf_i+0x16c>
 801a2b8:	e7b9      	b.n	801a22e <_printf_i+0xf6>
 801a2ba:	6813      	ldr	r3, [r2, #0]
 801a2bc:	6825      	ldr	r5, [r4, #0]
 801a2be:	1d18      	adds	r0, r3, #4
 801a2c0:	6961      	ldr	r1, [r4, #20]
 801a2c2:	6010      	str	r0, [r2, #0]
 801a2c4:	0628      	lsls	r0, r5, #24
 801a2c6:	681b      	ldr	r3, [r3, #0]
 801a2c8:	d501      	bpl.n	801a2ce <_printf_i+0x196>
 801a2ca:	6019      	str	r1, [r3, #0]
 801a2cc:	e002      	b.n	801a2d4 <_printf_i+0x19c>
 801a2ce:	066a      	lsls	r2, r5, #25
 801a2d0:	d5fb      	bpl.n	801a2ca <_printf_i+0x192>
 801a2d2:	8019      	strh	r1, [r3, #0]
 801a2d4:	2300      	movs	r3, #0
 801a2d6:	4665      	mov	r5, ip
 801a2d8:	6123      	str	r3, [r4, #16]
 801a2da:	e7b9      	b.n	801a250 <_printf_i+0x118>
 801a2dc:	6813      	ldr	r3, [r2, #0]
 801a2de:	1d19      	adds	r1, r3, #4
 801a2e0:	6011      	str	r1, [r2, #0]
 801a2e2:	681d      	ldr	r5, [r3, #0]
 801a2e4:	6862      	ldr	r2, [r4, #4]
 801a2e6:	2100      	movs	r1, #0
 801a2e8:	4628      	mov	r0, r5
 801a2ea:	f002 fdf5 	bl	801ced8 <memchr>
 801a2ee:	b108      	cbz	r0, 801a2f4 <_printf_i+0x1bc>
 801a2f0:	1b40      	subs	r0, r0, r5
 801a2f2:	6060      	str	r0, [r4, #4]
 801a2f4:	6863      	ldr	r3, [r4, #4]
 801a2f6:	6123      	str	r3, [r4, #16]
 801a2f8:	2300      	movs	r3, #0
 801a2fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a2fe:	e7a7      	b.n	801a250 <_printf_i+0x118>
 801a300:	6923      	ldr	r3, [r4, #16]
 801a302:	462a      	mov	r2, r5
 801a304:	4639      	mov	r1, r7
 801a306:	4630      	mov	r0, r6
 801a308:	47c0      	blx	r8
 801a30a:	3001      	adds	r0, #1
 801a30c:	d0aa      	beq.n	801a264 <_printf_i+0x12c>
 801a30e:	6823      	ldr	r3, [r4, #0]
 801a310:	079b      	lsls	r3, r3, #30
 801a312:	d413      	bmi.n	801a33c <_printf_i+0x204>
 801a314:	68e0      	ldr	r0, [r4, #12]
 801a316:	9b03      	ldr	r3, [sp, #12]
 801a318:	4298      	cmp	r0, r3
 801a31a:	bfb8      	it	lt
 801a31c:	4618      	movlt	r0, r3
 801a31e:	e7a3      	b.n	801a268 <_printf_i+0x130>
 801a320:	2301      	movs	r3, #1
 801a322:	464a      	mov	r2, r9
 801a324:	4639      	mov	r1, r7
 801a326:	4630      	mov	r0, r6
 801a328:	47c0      	blx	r8
 801a32a:	3001      	adds	r0, #1
 801a32c:	d09a      	beq.n	801a264 <_printf_i+0x12c>
 801a32e:	3501      	adds	r5, #1
 801a330:	68e3      	ldr	r3, [r4, #12]
 801a332:	9a03      	ldr	r2, [sp, #12]
 801a334:	1a9b      	subs	r3, r3, r2
 801a336:	42ab      	cmp	r3, r5
 801a338:	dcf2      	bgt.n	801a320 <_printf_i+0x1e8>
 801a33a:	e7eb      	b.n	801a314 <_printf_i+0x1dc>
 801a33c:	2500      	movs	r5, #0
 801a33e:	f104 0919 	add.w	r9, r4, #25
 801a342:	e7f5      	b.n	801a330 <_printf_i+0x1f8>
 801a344:	2b00      	cmp	r3, #0
 801a346:	d1ac      	bne.n	801a2a2 <_printf_i+0x16a>
 801a348:	7803      	ldrb	r3, [r0, #0]
 801a34a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a34e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a352:	e76c      	b.n	801a22e <_printf_i+0xf6>
 801a354:	08021d4e 	.word	0x08021d4e
 801a358:	08021d5f 	.word	0x08021d5f

0801a35c <_scanf_float>:
 801a35c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a360:	469a      	mov	sl, r3
 801a362:	688b      	ldr	r3, [r1, #8]
 801a364:	4616      	mov	r6, r2
 801a366:	1e5a      	subs	r2, r3, #1
 801a368:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801a36c:	bf88      	it	hi
 801a36e:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 801a372:	b087      	sub	sp, #28
 801a374:	bf85      	ittet	hi
 801a376:	189b      	addhi	r3, r3, r2
 801a378:	9301      	strhi	r3, [sp, #4]
 801a37a:	2300      	movls	r3, #0
 801a37c:	f240 135d 	movwhi	r3, #349	; 0x15d
 801a380:	4688      	mov	r8, r1
 801a382:	f04f 0b00 	mov.w	fp, #0
 801a386:	bf8c      	ite	hi
 801a388:	608b      	strhi	r3, [r1, #8]
 801a38a:	9301      	strls	r3, [sp, #4]
 801a38c:	680b      	ldr	r3, [r1, #0]
 801a38e:	4607      	mov	r7, r0
 801a390:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801a394:	f848 3b1c 	str.w	r3, [r8], #28
 801a398:	460c      	mov	r4, r1
 801a39a:	4645      	mov	r5, r8
 801a39c:	465a      	mov	r2, fp
 801a39e:	46d9      	mov	r9, fp
 801a3a0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 801a3a4:	f8cd b008 	str.w	fp, [sp, #8]
 801a3a8:	68a1      	ldr	r1, [r4, #8]
 801a3aa:	b181      	cbz	r1, 801a3ce <_scanf_float+0x72>
 801a3ac:	6833      	ldr	r3, [r6, #0]
 801a3ae:	781b      	ldrb	r3, [r3, #0]
 801a3b0:	2b49      	cmp	r3, #73	; 0x49
 801a3b2:	d071      	beq.n	801a498 <_scanf_float+0x13c>
 801a3b4:	d84d      	bhi.n	801a452 <_scanf_float+0xf6>
 801a3b6:	2b39      	cmp	r3, #57	; 0x39
 801a3b8:	d840      	bhi.n	801a43c <_scanf_float+0xe0>
 801a3ba:	2b31      	cmp	r3, #49	; 0x31
 801a3bc:	f080 8088 	bcs.w	801a4d0 <_scanf_float+0x174>
 801a3c0:	2b2d      	cmp	r3, #45	; 0x2d
 801a3c2:	f000 8090 	beq.w	801a4e6 <_scanf_float+0x18a>
 801a3c6:	d815      	bhi.n	801a3f4 <_scanf_float+0x98>
 801a3c8:	2b2b      	cmp	r3, #43	; 0x2b
 801a3ca:	f000 808c 	beq.w	801a4e6 <_scanf_float+0x18a>
 801a3ce:	f1b9 0f00 	cmp.w	r9, #0
 801a3d2:	d003      	beq.n	801a3dc <_scanf_float+0x80>
 801a3d4:	6823      	ldr	r3, [r4, #0]
 801a3d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801a3da:	6023      	str	r3, [r4, #0]
 801a3dc:	3a01      	subs	r2, #1
 801a3de:	2a01      	cmp	r2, #1
 801a3e0:	f200 80ea 	bhi.w	801a5b8 <_scanf_float+0x25c>
 801a3e4:	4545      	cmp	r5, r8
 801a3e6:	f200 80dc 	bhi.w	801a5a2 <_scanf_float+0x246>
 801a3ea:	2601      	movs	r6, #1
 801a3ec:	4630      	mov	r0, r6
 801a3ee:	b007      	add	sp, #28
 801a3f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a3f4:	2b2e      	cmp	r3, #46	; 0x2e
 801a3f6:	f000 809f 	beq.w	801a538 <_scanf_float+0x1dc>
 801a3fa:	2b30      	cmp	r3, #48	; 0x30
 801a3fc:	d1e7      	bne.n	801a3ce <_scanf_float+0x72>
 801a3fe:	6820      	ldr	r0, [r4, #0]
 801a400:	f410 7f80 	tst.w	r0, #256	; 0x100
 801a404:	d064      	beq.n	801a4d0 <_scanf_float+0x174>
 801a406:	9b01      	ldr	r3, [sp, #4]
 801a408:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 801a40c:	6020      	str	r0, [r4, #0]
 801a40e:	f109 0901 	add.w	r9, r9, #1
 801a412:	b11b      	cbz	r3, 801a41c <_scanf_float+0xc0>
 801a414:	3b01      	subs	r3, #1
 801a416:	3101      	adds	r1, #1
 801a418:	9301      	str	r3, [sp, #4]
 801a41a:	60a1      	str	r1, [r4, #8]
 801a41c:	68a3      	ldr	r3, [r4, #8]
 801a41e:	3b01      	subs	r3, #1
 801a420:	60a3      	str	r3, [r4, #8]
 801a422:	6923      	ldr	r3, [r4, #16]
 801a424:	3301      	adds	r3, #1
 801a426:	6123      	str	r3, [r4, #16]
 801a428:	6873      	ldr	r3, [r6, #4]
 801a42a:	3b01      	subs	r3, #1
 801a42c:	2b00      	cmp	r3, #0
 801a42e:	6073      	str	r3, [r6, #4]
 801a430:	f340 80ac 	ble.w	801a58c <_scanf_float+0x230>
 801a434:	6833      	ldr	r3, [r6, #0]
 801a436:	3301      	adds	r3, #1
 801a438:	6033      	str	r3, [r6, #0]
 801a43a:	e7b5      	b.n	801a3a8 <_scanf_float+0x4c>
 801a43c:	2b45      	cmp	r3, #69	; 0x45
 801a43e:	f000 8085 	beq.w	801a54c <_scanf_float+0x1f0>
 801a442:	2b46      	cmp	r3, #70	; 0x46
 801a444:	d06a      	beq.n	801a51c <_scanf_float+0x1c0>
 801a446:	2b41      	cmp	r3, #65	; 0x41
 801a448:	d1c1      	bne.n	801a3ce <_scanf_float+0x72>
 801a44a:	2a01      	cmp	r2, #1
 801a44c:	d1bf      	bne.n	801a3ce <_scanf_float+0x72>
 801a44e:	2202      	movs	r2, #2
 801a450:	e046      	b.n	801a4e0 <_scanf_float+0x184>
 801a452:	2b65      	cmp	r3, #101	; 0x65
 801a454:	d07a      	beq.n	801a54c <_scanf_float+0x1f0>
 801a456:	d818      	bhi.n	801a48a <_scanf_float+0x12e>
 801a458:	2b54      	cmp	r3, #84	; 0x54
 801a45a:	d066      	beq.n	801a52a <_scanf_float+0x1ce>
 801a45c:	d811      	bhi.n	801a482 <_scanf_float+0x126>
 801a45e:	2b4e      	cmp	r3, #78	; 0x4e
 801a460:	d1b5      	bne.n	801a3ce <_scanf_float+0x72>
 801a462:	2a00      	cmp	r2, #0
 801a464:	d146      	bne.n	801a4f4 <_scanf_float+0x198>
 801a466:	f1b9 0f00 	cmp.w	r9, #0
 801a46a:	d145      	bne.n	801a4f8 <_scanf_float+0x19c>
 801a46c:	6821      	ldr	r1, [r4, #0]
 801a46e:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801a472:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 801a476:	d13f      	bne.n	801a4f8 <_scanf_float+0x19c>
 801a478:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801a47c:	6021      	str	r1, [r4, #0]
 801a47e:	2201      	movs	r2, #1
 801a480:	e02e      	b.n	801a4e0 <_scanf_float+0x184>
 801a482:	2b59      	cmp	r3, #89	; 0x59
 801a484:	d01e      	beq.n	801a4c4 <_scanf_float+0x168>
 801a486:	2b61      	cmp	r3, #97	; 0x61
 801a488:	e7de      	b.n	801a448 <_scanf_float+0xec>
 801a48a:	2b6e      	cmp	r3, #110	; 0x6e
 801a48c:	d0e9      	beq.n	801a462 <_scanf_float+0x106>
 801a48e:	d815      	bhi.n	801a4bc <_scanf_float+0x160>
 801a490:	2b66      	cmp	r3, #102	; 0x66
 801a492:	d043      	beq.n	801a51c <_scanf_float+0x1c0>
 801a494:	2b69      	cmp	r3, #105	; 0x69
 801a496:	d19a      	bne.n	801a3ce <_scanf_float+0x72>
 801a498:	f1bb 0f00 	cmp.w	fp, #0
 801a49c:	d138      	bne.n	801a510 <_scanf_float+0x1b4>
 801a49e:	f1b9 0f00 	cmp.w	r9, #0
 801a4a2:	d197      	bne.n	801a3d4 <_scanf_float+0x78>
 801a4a4:	6821      	ldr	r1, [r4, #0]
 801a4a6:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801a4aa:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 801a4ae:	d195      	bne.n	801a3dc <_scanf_float+0x80>
 801a4b0:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801a4b4:	6021      	str	r1, [r4, #0]
 801a4b6:	f04f 0b01 	mov.w	fp, #1
 801a4ba:	e011      	b.n	801a4e0 <_scanf_float+0x184>
 801a4bc:	2b74      	cmp	r3, #116	; 0x74
 801a4be:	d034      	beq.n	801a52a <_scanf_float+0x1ce>
 801a4c0:	2b79      	cmp	r3, #121	; 0x79
 801a4c2:	d184      	bne.n	801a3ce <_scanf_float+0x72>
 801a4c4:	f1bb 0f07 	cmp.w	fp, #7
 801a4c8:	d181      	bne.n	801a3ce <_scanf_float+0x72>
 801a4ca:	f04f 0b08 	mov.w	fp, #8
 801a4ce:	e007      	b.n	801a4e0 <_scanf_float+0x184>
 801a4d0:	eb12 0f0b 	cmn.w	r2, fp
 801a4d4:	f47f af7b 	bne.w	801a3ce <_scanf_float+0x72>
 801a4d8:	6821      	ldr	r1, [r4, #0]
 801a4da:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 801a4de:	6021      	str	r1, [r4, #0]
 801a4e0:	702b      	strb	r3, [r5, #0]
 801a4e2:	3501      	adds	r5, #1
 801a4e4:	e79a      	b.n	801a41c <_scanf_float+0xc0>
 801a4e6:	6821      	ldr	r1, [r4, #0]
 801a4e8:	0608      	lsls	r0, r1, #24
 801a4ea:	f57f af70 	bpl.w	801a3ce <_scanf_float+0x72>
 801a4ee:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801a4f2:	e7f4      	b.n	801a4de <_scanf_float+0x182>
 801a4f4:	2a02      	cmp	r2, #2
 801a4f6:	d047      	beq.n	801a588 <_scanf_float+0x22c>
 801a4f8:	f1bb 0f01 	cmp.w	fp, #1
 801a4fc:	d003      	beq.n	801a506 <_scanf_float+0x1aa>
 801a4fe:	f1bb 0f04 	cmp.w	fp, #4
 801a502:	f47f af64 	bne.w	801a3ce <_scanf_float+0x72>
 801a506:	f10b 0b01 	add.w	fp, fp, #1
 801a50a:	fa5f fb8b 	uxtb.w	fp, fp
 801a50e:	e7e7      	b.n	801a4e0 <_scanf_float+0x184>
 801a510:	f1bb 0f03 	cmp.w	fp, #3
 801a514:	d0f7      	beq.n	801a506 <_scanf_float+0x1aa>
 801a516:	f1bb 0f05 	cmp.w	fp, #5
 801a51a:	e7f2      	b.n	801a502 <_scanf_float+0x1a6>
 801a51c:	f1bb 0f02 	cmp.w	fp, #2
 801a520:	f47f af55 	bne.w	801a3ce <_scanf_float+0x72>
 801a524:	f04f 0b03 	mov.w	fp, #3
 801a528:	e7da      	b.n	801a4e0 <_scanf_float+0x184>
 801a52a:	f1bb 0f06 	cmp.w	fp, #6
 801a52e:	f47f af4e 	bne.w	801a3ce <_scanf_float+0x72>
 801a532:	f04f 0b07 	mov.w	fp, #7
 801a536:	e7d3      	b.n	801a4e0 <_scanf_float+0x184>
 801a538:	6821      	ldr	r1, [r4, #0]
 801a53a:	0588      	lsls	r0, r1, #22
 801a53c:	f57f af47 	bpl.w	801a3ce <_scanf_float+0x72>
 801a540:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 801a544:	6021      	str	r1, [r4, #0]
 801a546:	f8cd 9008 	str.w	r9, [sp, #8]
 801a54a:	e7c9      	b.n	801a4e0 <_scanf_float+0x184>
 801a54c:	6821      	ldr	r1, [r4, #0]
 801a54e:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 801a552:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801a556:	d006      	beq.n	801a566 <_scanf_float+0x20a>
 801a558:	0548      	lsls	r0, r1, #21
 801a55a:	f57f af38 	bpl.w	801a3ce <_scanf_float+0x72>
 801a55e:	f1b9 0f00 	cmp.w	r9, #0
 801a562:	f43f af3b 	beq.w	801a3dc <_scanf_float+0x80>
 801a566:	0588      	lsls	r0, r1, #22
 801a568:	bf58      	it	pl
 801a56a:	9802      	ldrpl	r0, [sp, #8]
 801a56c:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801a570:	bf58      	it	pl
 801a572:	eba9 0000 	subpl.w	r0, r9, r0
 801a576:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 801a57a:	bf58      	it	pl
 801a57c:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 801a580:	6021      	str	r1, [r4, #0]
 801a582:	f04f 0900 	mov.w	r9, #0
 801a586:	e7ab      	b.n	801a4e0 <_scanf_float+0x184>
 801a588:	2203      	movs	r2, #3
 801a58a:	e7a9      	b.n	801a4e0 <_scanf_float+0x184>
 801a58c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801a590:	4631      	mov	r1, r6
 801a592:	4638      	mov	r0, r7
 801a594:	9205      	str	r2, [sp, #20]
 801a596:	4798      	blx	r3
 801a598:	9a05      	ldr	r2, [sp, #20]
 801a59a:	2800      	cmp	r0, #0
 801a59c:	f43f af04 	beq.w	801a3a8 <_scanf_float+0x4c>
 801a5a0:	e715      	b.n	801a3ce <_scanf_float+0x72>
 801a5a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a5a6:	4632      	mov	r2, r6
 801a5a8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801a5ac:	4638      	mov	r0, r7
 801a5ae:	4798      	blx	r3
 801a5b0:	6923      	ldr	r3, [r4, #16]
 801a5b2:	3b01      	subs	r3, #1
 801a5b4:	6123      	str	r3, [r4, #16]
 801a5b6:	e715      	b.n	801a3e4 <_scanf_float+0x88>
 801a5b8:	f10b 33ff 	add.w	r3, fp, #4294967295
 801a5bc:	2b06      	cmp	r3, #6
 801a5be:	d80a      	bhi.n	801a5d6 <_scanf_float+0x27a>
 801a5c0:	f1bb 0f02 	cmp.w	fp, #2
 801a5c4:	d967      	bls.n	801a696 <_scanf_float+0x33a>
 801a5c6:	f1ab 0b03 	sub.w	fp, fp, #3
 801a5ca:	fa5f fb8b 	uxtb.w	fp, fp
 801a5ce:	eba5 0b0b 	sub.w	fp, r5, fp
 801a5d2:	455d      	cmp	r5, fp
 801a5d4:	d14a      	bne.n	801a66c <_scanf_float+0x310>
 801a5d6:	6823      	ldr	r3, [r4, #0]
 801a5d8:	05da      	lsls	r2, r3, #23
 801a5da:	d51f      	bpl.n	801a61c <_scanf_float+0x2c0>
 801a5dc:	055b      	lsls	r3, r3, #21
 801a5de:	d467      	bmi.n	801a6b0 <_scanf_float+0x354>
 801a5e0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801a5e4:	6923      	ldr	r3, [r4, #16]
 801a5e6:	2965      	cmp	r1, #101	; 0x65
 801a5e8:	f103 33ff 	add.w	r3, r3, #4294967295
 801a5ec:	f105 3bff 	add.w	fp, r5, #4294967295
 801a5f0:	6123      	str	r3, [r4, #16]
 801a5f2:	d00d      	beq.n	801a610 <_scanf_float+0x2b4>
 801a5f4:	2945      	cmp	r1, #69	; 0x45
 801a5f6:	d00b      	beq.n	801a610 <_scanf_float+0x2b4>
 801a5f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a5fc:	4632      	mov	r2, r6
 801a5fe:	4638      	mov	r0, r7
 801a600:	4798      	blx	r3
 801a602:	6923      	ldr	r3, [r4, #16]
 801a604:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 801a608:	3b01      	subs	r3, #1
 801a60a:	f1a5 0b02 	sub.w	fp, r5, #2
 801a60e:	6123      	str	r3, [r4, #16]
 801a610:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a614:	4632      	mov	r2, r6
 801a616:	4638      	mov	r0, r7
 801a618:	4798      	blx	r3
 801a61a:	465d      	mov	r5, fp
 801a61c:	6826      	ldr	r6, [r4, #0]
 801a61e:	f016 0610 	ands.w	r6, r6, #16
 801a622:	d176      	bne.n	801a712 <_scanf_float+0x3b6>
 801a624:	702e      	strb	r6, [r5, #0]
 801a626:	6823      	ldr	r3, [r4, #0]
 801a628:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801a62c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a630:	d141      	bne.n	801a6b6 <_scanf_float+0x35a>
 801a632:	9b02      	ldr	r3, [sp, #8]
 801a634:	eba9 0303 	sub.w	r3, r9, r3
 801a638:	425a      	negs	r2, r3
 801a63a:	2b00      	cmp	r3, #0
 801a63c:	d148      	bne.n	801a6d0 <_scanf_float+0x374>
 801a63e:	4641      	mov	r1, r8
 801a640:	2200      	movs	r2, #0
 801a642:	4638      	mov	r0, r7
 801a644:	f000 ff74 	bl	801b530 <_strtod_r>
 801a648:	6825      	ldr	r5, [r4, #0]
 801a64a:	4680      	mov	r8, r0
 801a64c:	f015 0f02 	tst.w	r5, #2
 801a650:	4689      	mov	r9, r1
 801a652:	f8da 3000 	ldr.w	r3, [sl]
 801a656:	d046      	beq.n	801a6e6 <_scanf_float+0x38a>
 801a658:	1d1a      	adds	r2, r3, #4
 801a65a:	f8ca 2000 	str.w	r2, [sl]
 801a65e:	681b      	ldr	r3, [r3, #0]
 801a660:	e9c3 8900 	strd	r8, r9, [r3]
 801a664:	68e3      	ldr	r3, [r4, #12]
 801a666:	3301      	adds	r3, #1
 801a668:	60e3      	str	r3, [r4, #12]
 801a66a:	e6bf      	b.n	801a3ec <_scanf_float+0x90>
 801a66c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a670:	4632      	mov	r2, r6
 801a672:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801a676:	4638      	mov	r0, r7
 801a678:	4798      	blx	r3
 801a67a:	6923      	ldr	r3, [r4, #16]
 801a67c:	3b01      	subs	r3, #1
 801a67e:	6123      	str	r3, [r4, #16]
 801a680:	e7a7      	b.n	801a5d2 <_scanf_float+0x276>
 801a682:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a686:	4632      	mov	r2, r6
 801a688:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801a68c:	4638      	mov	r0, r7
 801a68e:	4798      	blx	r3
 801a690:	6923      	ldr	r3, [r4, #16]
 801a692:	3b01      	subs	r3, #1
 801a694:	6123      	str	r3, [r4, #16]
 801a696:	4545      	cmp	r5, r8
 801a698:	d8f3      	bhi.n	801a682 <_scanf_float+0x326>
 801a69a:	e6a6      	b.n	801a3ea <_scanf_float+0x8e>
 801a69c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a6a0:	4632      	mov	r2, r6
 801a6a2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801a6a6:	4638      	mov	r0, r7
 801a6a8:	4798      	blx	r3
 801a6aa:	6923      	ldr	r3, [r4, #16]
 801a6ac:	3b01      	subs	r3, #1
 801a6ae:	6123      	str	r3, [r4, #16]
 801a6b0:	4545      	cmp	r5, r8
 801a6b2:	d8f3      	bhi.n	801a69c <_scanf_float+0x340>
 801a6b4:	e699      	b.n	801a3ea <_scanf_float+0x8e>
 801a6b6:	9b03      	ldr	r3, [sp, #12]
 801a6b8:	2b00      	cmp	r3, #0
 801a6ba:	d0c0      	beq.n	801a63e <_scanf_float+0x2e2>
 801a6bc:	9904      	ldr	r1, [sp, #16]
 801a6be:	230a      	movs	r3, #10
 801a6c0:	4632      	mov	r2, r6
 801a6c2:	3101      	adds	r1, #1
 801a6c4:	4638      	mov	r0, r7
 801a6c6:	f000 ffbf 	bl	801b648 <_strtol_r>
 801a6ca:	9b03      	ldr	r3, [sp, #12]
 801a6cc:	9d04      	ldr	r5, [sp, #16]
 801a6ce:	1ac2      	subs	r2, r0, r3
 801a6d0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801a6d4:	429d      	cmp	r5, r3
 801a6d6:	bf28      	it	cs
 801a6d8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 801a6dc:	490e      	ldr	r1, [pc, #56]	; (801a718 <_scanf_float+0x3bc>)
 801a6de:	4628      	mov	r0, r5
 801a6e0:	f000 f8d0 	bl	801a884 <siprintf>
 801a6e4:	e7ab      	b.n	801a63e <_scanf_float+0x2e2>
 801a6e6:	1d1f      	adds	r7, r3, #4
 801a6e8:	f015 0504 	ands.w	r5, r5, #4
 801a6ec:	f8ca 7000 	str.w	r7, [sl]
 801a6f0:	d1b5      	bne.n	801a65e <_scanf_float+0x302>
 801a6f2:	681f      	ldr	r7, [r3, #0]
 801a6f4:	4602      	mov	r2, r0
 801a6f6:	460b      	mov	r3, r1
 801a6f8:	f7e6 f9c8 	bl	8000a8c <__aeabi_dcmpun>
 801a6fc:	b120      	cbz	r0, 801a708 <_scanf_float+0x3ac>
 801a6fe:	4628      	mov	r0, r5
 801a700:	f000 f8bc 	bl	801a87c <nanf>
 801a704:	6038      	str	r0, [r7, #0]
 801a706:	e7ad      	b.n	801a664 <_scanf_float+0x308>
 801a708:	4640      	mov	r0, r8
 801a70a:	4649      	mov	r1, r9
 801a70c:	f7e6 fa1c 	bl	8000b48 <__aeabi_d2f>
 801a710:	e7f8      	b.n	801a704 <_scanf_float+0x3a8>
 801a712:	2600      	movs	r6, #0
 801a714:	e66a      	b.n	801a3ec <_scanf_float+0x90>
 801a716:	bf00      	nop
 801a718:	08021d70 	.word	0x08021d70

0801a71c <iprintf>:
 801a71c:	b40f      	push	{r0, r1, r2, r3}
 801a71e:	4b0a      	ldr	r3, [pc, #40]	; (801a748 <iprintf+0x2c>)
 801a720:	b513      	push	{r0, r1, r4, lr}
 801a722:	681c      	ldr	r4, [r3, #0]
 801a724:	b124      	cbz	r4, 801a730 <iprintf+0x14>
 801a726:	69a3      	ldr	r3, [r4, #24]
 801a728:	b913      	cbnz	r3, 801a730 <iprintf+0x14>
 801a72a:	4620      	mov	r0, r4
 801a72c:	f001 ff90 	bl	801c650 <__sinit>
 801a730:	ab05      	add	r3, sp, #20
 801a732:	9a04      	ldr	r2, [sp, #16]
 801a734:	68a1      	ldr	r1, [r4, #8]
 801a736:	4620      	mov	r0, r4
 801a738:	9301      	str	r3, [sp, #4]
 801a73a:	f003 fa01 	bl	801db40 <_vfiprintf_r>
 801a73e:	b002      	add	sp, #8
 801a740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a744:	b004      	add	sp, #16
 801a746:	4770      	bx	lr
 801a748:	2000001c 	.word	0x2000001c

0801a74c <_puts_r>:
 801a74c:	b570      	push	{r4, r5, r6, lr}
 801a74e:	460e      	mov	r6, r1
 801a750:	4605      	mov	r5, r0
 801a752:	b118      	cbz	r0, 801a75c <_puts_r+0x10>
 801a754:	6983      	ldr	r3, [r0, #24]
 801a756:	b90b      	cbnz	r3, 801a75c <_puts_r+0x10>
 801a758:	f001 ff7a 	bl	801c650 <__sinit>
 801a75c:	69ab      	ldr	r3, [r5, #24]
 801a75e:	68ac      	ldr	r4, [r5, #8]
 801a760:	b913      	cbnz	r3, 801a768 <_puts_r+0x1c>
 801a762:	4628      	mov	r0, r5
 801a764:	f001 ff74 	bl	801c650 <__sinit>
 801a768:	4b23      	ldr	r3, [pc, #140]	; (801a7f8 <_puts_r+0xac>)
 801a76a:	429c      	cmp	r4, r3
 801a76c:	d117      	bne.n	801a79e <_puts_r+0x52>
 801a76e:	686c      	ldr	r4, [r5, #4]
 801a770:	89a3      	ldrh	r3, [r4, #12]
 801a772:	071b      	lsls	r3, r3, #28
 801a774:	d51d      	bpl.n	801a7b2 <_puts_r+0x66>
 801a776:	6923      	ldr	r3, [r4, #16]
 801a778:	b1db      	cbz	r3, 801a7b2 <_puts_r+0x66>
 801a77a:	3e01      	subs	r6, #1
 801a77c:	68a3      	ldr	r3, [r4, #8]
 801a77e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801a782:	3b01      	subs	r3, #1
 801a784:	60a3      	str	r3, [r4, #8]
 801a786:	b9e9      	cbnz	r1, 801a7c4 <_puts_r+0x78>
 801a788:	2b00      	cmp	r3, #0
 801a78a:	da2e      	bge.n	801a7ea <_puts_r+0x9e>
 801a78c:	4622      	mov	r2, r4
 801a78e:	210a      	movs	r1, #10
 801a790:	4628      	mov	r0, r5
 801a792:	f000 ff6b 	bl	801b66c <__swbuf_r>
 801a796:	3001      	adds	r0, #1
 801a798:	d011      	beq.n	801a7be <_puts_r+0x72>
 801a79a:	200a      	movs	r0, #10
 801a79c:	e011      	b.n	801a7c2 <_puts_r+0x76>
 801a79e:	4b17      	ldr	r3, [pc, #92]	; (801a7fc <_puts_r+0xb0>)
 801a7a0:	429c      	cmp	r4, r3
 801a7a2:	d101      	bne.n	801a7a8 <_puts_r+0x5c>
 801a7a4:	68ac      	ldr	r4, [r5, #8]
 801a7a6:	e7e3      	b.n	801a770 <_puts_r+0x24>
 801a7a8:	4b15      	ldr	r3, [pc, #84]	; (801a800 <_puts_r+0xb4>)
 801a7aa:	429c      	cmp	r4, r3
 801a7ac:	bf08      	it	eq
 801a7ae:	68ec      	ldreq	r4, [r5, #12]
 801a7b0:	e7de      	b.n	801a770 <_puts_r+0x24>
 801a7b2:	4621      	mov	r1, r4
 801a7b4:	4628      	mov	r0, r5
 801a7b6:	f000 ffab 	bl	801b710 <__swsetup_r>
 801a7ba:	2800      	cmp	r0, #0
 801a7bc:	d0dd      	beq.n	801a77a <_puts_r+0x2e>
 801a7be:	f04f 30ff 	mov.w	r0, #4294967295
 801a7c2:	bd70      	pop	{r4, r5, r6, pc}
 801a7c4:	2b00      	cmp	r3, #0
 801a7c6:	da04      	bge.n	801a7d2 <_puts_r+0x86>
 801a7c8:	69a2      	ldr	r2, [r4, #24]
 801a7ca:	429a      	cmp	r2, r3
 801a7cc:	dc06      	bgt.n	801a7dc <_puts_r+0x90>
 801a7ce:	290a      	cmp	r1, #10
 801a7d0:	d004      	beq.n	801a7dc <_puts_r+0x90>
 801a7d2:	6823      	ldr	r3, [r4, #0]
 801a7d4:	1c5a      	adds	r2, r3, #1
 801a7d6:	6022      	str	r2, [r4, #0]
 801a7d8:	7019      	strb	r1, [r3, #0]
 801a7da:	e7cf      	b.n	801a77c <_puts_r+0x30>
 801a7dc:	4622      	mov	r2, r4
 801a7de:	4628      	mov	r0, r5
 801a7e0:	f000 ff44 	bl	801b66c <__swbuf_r>
 801a7e4:	3001      	adds	r0, #1
 801a7e6:	d1c9      	bne.n	801a77c <_puts_r+0x30>
 801a7e8:	e7e9      	b.n	801a7be <_puts_r+0x72>
 801a7ea:	200a      	movs	r0, #10
 801a7ec:	6823      	ldr	r3, [r4, #0]
 801a7ee:	1c5a      	adds	r2, r3, #1
 801a7f0:	6022      	str	r2, [r4, #0]
 801a7f2:	7018      	strb	r0, [r3, #0]
 801a7f4:	e7e5      	b.n	801a7c2 <_puts_r+0x76>
 801a7f6:	bf00      	nop
 801a7f8:	08021df8 	.word	0x08021df8
 801a7fc:	08021e18 	.word	0x08021e18
 801a800:	08021dd8 	.word	0x08021dd8

0801a804 <puts>:
 801a804:	4b02      	ldr	r3, [pc, #8]	; (801a810 <puts+0xc>)
 801a806:	4601      	mov	r1, r0
 801a808:	6818      	ldr	r0, [r3, #0]
 801a80a:	f7ff bf9f 	b.w	801a74c <_puts_r>
 801a80e:	bf00      	nop
 801a810:	2000001c 	.word	0x2000001c

0801a814 <rand>:
 801a814:	b538      	push	{r3, r4, r5, lr}
 801a816:	4b13      	ldr	r3, [pc, #76]	; (801a864 <rand+0x50>)
 801a818:	681c      	ldr	r4, [r3, #0]
 801a81a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801a81c:	b97b      	cbnz	r3, 801a83e <rand+0x2a>
 801a81e:	2018      	movs	r0, #24
 801a820:	f002 fb40 	bl	801cea4 <malloc>
 801a824:	4a10      	ldr	r2, [pc, #64]	; (801a868 <rand+0x54>)
 801a826:	4b11      	ldr	r3, [pc, #68]	; (801a86c <rand+0x58>)
 801a828:	63a0      	str	r0, [r4, #56]	; 0x38
 801a82a:	e9c0 2300 	strd	r2, r3, [r0]
 801a82e:	4b10      	ldr	r3, [pc, #64]	; (801a870 <rand+0x5c>)
 801a830:	2201      	movs	r2, #1
 801a832:	6083      	str	r3, [r0, #8]
 801a834:	230b      	movs	r3, #11
 801a836:	8183      	strh	r3, [r0, #12]
 801a838:	2300      	movs	r3, #0
 801a83a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801a83e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801a840:	480c      	ldr	r0, [pc, #48]	; (801a874 <rand+0x60>)
 801a842:	690a      	ldr	r2, [r1, #16]
 801a844:	694b      	ldr	r3, [r1, #20]
 801a846:	4350      	muls	r0, r2
 801a848:	4c0b      	ldr	r4, [pc, #44]	; (801a878 <rand+0x64>)
 801a84a:	fb04 0003 	mla	r0, r4, r3, r0
 801a84e:	fba2 2304 	umull	r2, r3, r2, r4
 801a852:	4403      	add	r3, r0
 801a854:	1c54      	adds	r4, r2, #1
 801a856:	f143 0500 	adc.w	r5, r3, #0
 801a85a:	e9c1 4504 	strd	r4, r5, [r1, #16]
 801a85e:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 801a862:	bd38      	pop	{r3, r4, r5, pc}
 801a864:	2000001c 	.word	0x2000001c
 801a868:	abcd330e 	.word	0xabcd330e
 801a86c:	e66d1234 	.word	0xe66d1234
 801a870:	0005deec 	.word	0x0005deec
 801a874:	5851f42d 	.word	0x5851f42d
 801a878:	4c957f2d 	.word	0x4c957f2d

0801a87c <nanf>:
 801a87c:	4800      	ldr	r0, [pc, #0]	; (801a880 <nanf+0x4>)
 801a87e:	4770      	bx	lr
 801a880:	7fc00000 	.word	0x7fc00000

0801a884 <siprintf>:
 801a884:	b40e      	push	{r1, r2, r3}
 801a886:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a88a:	b500      	push	{lr}
 801a88c:	b09c      	sub	sp, #112	; 0x70
 801a88e:	ab1d      	add	r3, sp, #116	; 0x74
 801a890:	9002      	str	r0, [sp, #8]
 801a892:	9006      	str	r0, [sp, #24]
 801a894:	9107      	str	r1, [sp, #28]
 801a896:	9104      	str	r1, [sp, #16]
 801a898:	4808      	ldr	r0, [pc, #32]	; (801a8bc <siprintf+0x38>)
 801a89a:	4909      	ldr	r1, [pc, #36]	; (801a8c0 <siprintf+0x3c>)
 801a89c:	f853 2b04 	ldr.w	r2, [r3], #4
 801a8a0:	9105      	str	r1, [sp, #20]
 801a8a2:	6800      	ldr	r0, [r0, #0]
 801a8a4:	a902      	add	r1, sp, #8
 801a8a6:	9301      	str	r3, [sp, #4]
 801a8a8:	f003 f82a 	bl	801d900 <_svfiprintf_r>
 801a8ac:	2200      	movs	r2, #0
 801a8ae:	9b02      	ldr	r3, [sp, #8]
 801a8b0:	701a      	strb	r2, [r3, #0]
 801a8b2:	b01c      	add	sp, #112	; 0x70
 801a8b4:	f85d eb04 	ldr.w	lr, [sp], #4
 801a8b8:	b003      	add	sp, #12
 801a8ba:	4770      	bx	lr
 801a8bc:	2000001c 	.word	0x2000001c
 801a8c0:	ffff0208 	.word	0xffff0208

0801a8c4 <strncmp>:
 801a8c4:	b510      	push	{r4, lr}
 801a8c6:	b16a      	cbz	r2, 801a8e4 <strncmp+0x20>
 801a8c8:	3901      	subs	r1, #1
 801a8ca:	1884      	adds	r4, r0, r2
 801a8cc:	f810 3b01 	ldrb.w	r3, [r0], #1
 801a8d0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801a8d4:	4293      	cmp	r3, r2
 801a8d6:	d103      	bne.n	801a8e0 <strncmp+0x1c>
 801a8d8:	42a0      	cmp	r0, r4
 801a8da:	d001      	beq.n	801a8e0 <strncmp+0x1c>
 801a8dc:	2b00      	cmp	r3, #0
 801a8de:	d1f5      	bne.n	801a8cc <strncmp+0x8>
 801a8e0:	1a98      	subs	r0, r3, r2
 801a8e2:	bd10      	pop	{r4, pc}
 801a8e4:	4610      	mov	r0, r2
 801a8e6:	e7fc      	b.n	801a8e2 <strncmp+0x1e>

0801a8e8 <sulp>:
 801a8e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a8ec:	460f      	mov	r7, r1
 801a8ee:	4690      	mov	r8, r2
 801a8f0:	f002 fdca 	bl	801d488 <__ulp>
 801a8f4:	4604      	mov	r4, r0
 801a8f6:	460d      	mov	r5, r1
 801a8f8:	f1b8 0f00 	cmp.w	r8, #0
 801a8fc:	d011      	beq.n	801a922 <sulp+0x3a>
 801a8fe:	f3c7 530a 	ubfx	r3, r7, #20, #11
 801a902:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801a906:	2b00      	cmp	r3, #0
 801a908:	dd0b      	ble.n	801a922 <sulp+0x3a>
 801a90a:	2400      	movs	r4, #0
 801a90c:	051b      	lsls	r3, r3, #20
 801a90e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801a912:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801a916:	4622      	mov	r2, r4
 801a918:	462b      	mov	r3, r5
 801a91a:	f7e5 fe1d 	bl	8000558 <__aeabi_dmul>
 801a91e:	4604      	mov	r4, r0
 801a920:	460d      	mov	r5, r1
 801a922:	4620      	mov	r0, r4
 801a924:	4629      	mov	r1, r5
 801a926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a92a:	0000      	movs	r0, r0
 801a92c:	0000      	movs	r0, r0
	...

0801a930 <_strtod_l>:
 801a930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a934:	461f      	mov	r7, r3
 801a936:	2300      	movs	r3, #0
 801a938:	b0a1      	sub	sp, #132	; 0x84
 801a93a:	4683      	mov	fp, r0
 801a93c:	4638      	mov	r0, r7
 801a93e:	460e      	mov	r6, r1
 801a940:	9217      	str	r2, [sp, #92]	; 0x5c
 801a942:	931c      	str	r3, [sp, #112]	; 0x70
 801a944:	f002 fa39 	bl	801cdba <__localeconv_l>
 801a948:	4680      	mov	r8, r0
 801a94a:	6800      	ldr	r0, [r0, #0]
 801a94c:	f7e5 fc40 	bl	80001d0 <strlen>
 801a950:	f04f 0900 	mov.w	r9, #0
 801a954:	4604      	mov	r4, r0
 801a956:	f04f 0a00 	mov.w	sl, #0
 801a95a:	961b      	str	r6, [sp, #108]	; 0x6c
 801a95c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801a95e:	781a      	ldrb	r2, [r3, #0]
 801a960:	2a0d      	cmp	r2, #13
 801a962:	d832      	bhi.n	801a9ca <_strtod_l+0x9a>
 801a964:	2a09      	cmp	r2, #9
 801a966:	d236      	bcs.n	801a9d6 <_strtod_l+0xa6>
 801a968:	2a00      	cmp	r2, #0
 801a96a:	d03e      	beq.n	801a9ea <_strtod_l+0xba>
 801a96c:	2300      	movs	r3, #0
 801a96e:	930d      	str	r3, [sp, #52]	; 0x34
 801a970:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801a972:	782b      	ldrb	r3, [r5, #0]
 801a974:	2b30      	cmp	r3, #48	; 0x30
 801a976:	f040 80ac 	bne.w	801aad2 <_strtod_l+0x1a2>
 801a97a:	786b      	ldrb	r3, [r5, #1]
 801a97c:	2b58      	cmp	r3, #88	; 0x58
 801a97e:	d001      	beq.n	801a984 <_strtod_l+0x54>
 801a980:	2b78      	cmp	r3, #120	; 0x78
 801a982:	d167      	bne.n	801aa54 <_strtod_l+0x124>
 801a984:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a986:	9702      	str	r7, [sp, #8]
 801a988:	9301      	str	r3, [sp, #4]
 801a98a:	ab1c      	add	r3, sp, #112	; 0x70
 801a98c:	9300      	str	r3, [sp, #0]
 801a98e:	4a89      	ldr	r2, [pc, #548]	; (801abb4 <_strtod_l+0x284>)
 801a990:	ab1d      	add	r3, sp, #116	; 0x74
 801a992:	a91b      	add	r1, sp, #108	; 0x6c
 801a994:	4658      	mov	r0, fp
 801a996:	f001 ff35 	bl	801c804 <__gethex>
 801a99a:	f010 0407 	ands.w	r4, r0, #7
 801a99e:	4606      	mov	r6, r0
 801a9a0:	d005      	beq.n	801a9ae <_strtod_l+0x7e>
 801a9a2:	2c06      	cmp	r4, #6
 801a9a4:	d12b      	bne.n	801a9fe <_strtod_l+0xce>
 801a9a6:	2300      	movs	r3, #0
 801a9a8:	3501      	adds	r5, #1
 801a9aa:	951b      	str	r5, [sp, #108]	; 0x6c
 801a9ac:	930d      	str	r3, [sp, #52]	; 0x34
 801a9ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a9b0:	2b00      	cmp	r3, #0
 801a9b2:	f040 85a6 	bne.w	801b502 <_strtod_l+0xbd2>
 801a9b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a9b8:	b1e3      	cbz	r3, 801a9f4 <_strtod_l+0xc4>
 801a9ba:	464a      	mov	r2, r9
 801a9bc:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 801a9c0:	4610      	mov	r0, r2
 801a9c2:	4619      	mov	r1, r3
 801a9c4:	b021      	add	sp, #132	; 0x84
 801a9c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9ca:	2a2b      	cmp	r2, #43	; 0x2b
 801a9cc:	d015      	beq.n	801a9fa <_strtod_l+0xca>
 801a9ce:	2a2d      	cmp	r2, #45	; 0x2d
 801a9d0:	d004      	beq.n	801a9dc <_strtod_l+0xac>
 801a9d2:	2a20      	cmp	r2, #32
 801a9d4:	d1ca      	bne.n	801a96c <_strtod_l+0x3c>
 801a9d6:	3301      	adds	r3, #1
 801a9d8:	931b      	str	r3, [sp, #108]	; 0x6c
 801a9da:	e7bf      	b.n	801a95c <_strtod_l+0x2c>
 801a9dc:	2201      	movs	r2, #1
 801a9de:	920d      	str	r2, [sp, #52]	; 0x34
 801a9e0:	1c5a      	adds	r2, r3, #1
 801a9e2:	921b      	str	r2, [sp, #108]	; 0x6c
 801a9e4:	785b      	ldrb	r3, [r3, #1]
 801a9e6:	2b00      	cmp	r3, #0
 801a9e8:	d1c2      	bne.n	801a970 <_strtod_l+0x40>
 801a9ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801a9ec:	961b      	str	r6, [sp, #108]	; 0x6c
 801a9ee:	2b00      	cmp	r3, #0
 801a9f0:	f040 8585 	bne.w	801b4fe <_strtod_l+0xbce>
 801a9f4:	464a      	mov	r2, r9
 801a9f6:	4653      	mov	r3, sl
 801a9f8:	e7e2      	b.n	801a9c0 <_strtod_l+0x90>
 801a9fa:	2200      	movs	r2, #0
 801a9fc:	e7ef      	b.n	801a9de <_strtod_l+0xae>
 801a9fe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801aa00:	b13a      	cbz	r2, 801aa12 <_strtod_l+0xe2>
 801aa02:	2135      	movs	r1, #53	; 0x35
 801aa04:	a81e      	add	r0, sp, #120	; 0x78
 801aa06:	f002 fe32 	bl	801d66e <__copybits>
 801aa0a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801aa0c:	4658      	mov	r0, fp
 801aa0e:	f002 faa5 	bl	801cf5c <_Bfree>
 801aa12:	3c01      	subs	r4, #1
 801aa14:	2c04      	cmp	r4, #4
 801aa16:	d806      	bhi.n	801aa26 <_strtod_l+0xf6>
 801aa18:	e8df f004 	tbb	[pc, r4]
 801aa1c:	1714030a 	.word	0x1714030a
 801aa20:	0a          	.byte	0x0a
 801aa21:	00          	.byte	0x00
 801aa22:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 801aa26:	0731      	lsls	r1, r6, #28
 801aa28:	d5c1      	bpl.n	801a9ae <_strtod_l+0x7e>
 801aa2a:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 801aa2e:	e7be      	b.n	801a9ae <_strtod_l+0x7e>
 801aa30:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801aa32:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 801aa36:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801aa3a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801aa3e:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 801aa42:	e7f0      	b.n	801aa26 <_strtod_l+0xf6>
 801aa44:	f8df a170 	ldr.w	sl, [pc, #368]	; 801abb8 <_strtod_l+0x288>
 801aa48:	e7ed      	b.n	801aa26 <_strtod_l+0xf6>
 801aa4a:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801aa4e:	f04f 39ff 	mov.w	r9, #4294967295
 801aa52:	e7e8      	b.n	801aa26 <_strtod_l+0xf6>
 801aa54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801aa56:	1c5a      	adds	r2, r3, #1
 801aa58:	921b      	str	r2, [sp, #108]	; 0x6c
 801aa5a:	785b      	ldrb	r3, [r3, #1]
 801aa5c:	2b30      	cmp	r3, #48	; 0x30
 801aa5e:	d0f9      	beq.n	801aa54 <_strtod_l+0x124>
 801aa60:	2b00      	cmp	r3, #0
 801aa62:	d0a4      	beq.n	801a9ae <_strtod_l+0x7e>
 801aa64:	2301      	movs	r3, #1
 801aa66:	2500      	movs	r5, #0
 801aa68:	220a      	movs	r2, #10
 801aa6a:	9307      	str	r3, [sp, #28]
 801aa6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801aa6e:	9506      	str	r5, [sp, #24]
 801aa70:	9308      	str	r3, [sp, #32]
 801aa72:	9504      	str	r5, [sp, #16]
 801aa74:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801aa76:	7807      	ldrb	r7, [r0, #0]
 801aa78:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 801aa7c:	b2d9      	uxtb	r1, r3
 801aa7e:	2909      	cmp	r1, #9
 801aa80:	d929      	bls.n	801aad6 <_strtod_l+0x1a6>
 801aa82:	4622      	mov	r2, r4
 801aa84:	f8d8 1000 	ldr.w	r1, [r8]
 801aa88:	f7ff ff1c 	bl	801a8c4 <strncmp>
 801aa8c:	2800      	cmp	r0, #0
 801aa8e:	d031      	beq.n	801aaf4 <_strtod_l+0x1c4>
 801aa90:	2000      	movs	r0, #0
 801aa92:	463b      	mov	r3, r7
 801aa94:	4602      	mov	r2, r0
 801aa96:	9c04      	ldr	r4, [sp, #16]
 801aa98:	9005      	str	r0, [sp, #20]
 801aa9a:	2b65      	cmp	r3, #101	; 0x65
 801aa9c:	d001      	beq.n	801aaa2 <_strtod_l+0x172>
 801aa9e:	2b45      	cmp	r3, #69	; 0x45
 801aaa0:	d114      	bne.n	801aacc <_strtod_l+0x19c>
 801aaa2:	b924      	cbnz	r4, 801aaae <_strtod_l+0x17e>
 801aaa4:	b910      	cbnz	r0, 801aaac <_strtod_l+0x17c>
 801aaa6:	9b07      	ldr	r3, [sp, #28]
 801aaa8:	2b00      	cmp	r3, #0
 801aaaa:	d09e      	beq.n	801a9ea <_strtod_l+0xba>
 801aaac:	2400      	movs	r4, #0
 801aaae:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 801aab0:	1c73      	adds	r3, r6, #1
 801aab2:	931b      	str	r3, [sp, #108]	; 0x6c
 801aab4:	7873      	ldrb	r3, [r6, #1]
 801aab6:	2b2b      	cmp	r3, #43	; 0x2b
 801aab8:	d078      	beq.n	801abac <_strtod_l+0x27c>
 801aaba:	2b2d      	cmp	r3, #45	; 0x2d
 801aabc:	d070      	beq.n	801aba0 <_strtod_l+0x270>
 801aabe:	f04f 0c00 	mov.w	ip, #0
 801aac2:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 801aac6:	2f09      	cmp	r7, #9
 801aac8:	d97c      	bls.n	801abc4 <_strtod_l+0x294>
 801aaca:	961b      	str	r6, [sp, #108]	; 0x6c
 801aacc:	f04f 0e00 	mov.w	lr, #0
 801aad0:	e09a      	b.n	801ac08 <_strtod_l+0x2d8>
 801aad2:	2300      	movs	r3, #0
 801aad4:	e7c7      	b.n	801aa66 <_strtod_l+0x136>
 801aad6:	9904      	ldr	r1, [sp, #16]
 801aad8:	3001      	adds	r0, #1
 801aada:	2908      	cmp	r1, #8
 801aadc:	bfd7      	itett	le
 801aade:	9906      	ldrle	r1, [sp, #24]
 801aae0:	fb02 3505 	mlagt	r5, r2, r5, r3
 801aae4:	fb02 3301 	mlale	r3, r2, r1, r3
 801aae8:	9306      	strle	r3, [sp, #24]
 801aaea:	9b04      	ldr	r3, [sp, #16]
 801aaec:	901b      	str	r0, [sp, #108]	; 0x6c
 801aaee:	3301      	adds	r3, #1
 801aaf0:	9304      	str	r3, [sp, #16]
 801aaf2:	e7bf      	b.n	801aa74 <_strtod_l+0x144>
 801aaf4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801aaf6:	191a      	adds	r2, r3, r4
 801aaf8:	921b      	str	r2, [sp, #108]	; 0x6c
 801aafa:	9a04      	ldr	r2, [sp, #16]
 801aafc:	5d1b      	ldrb	r3, [r3, r4]
 801aafe:	2a00      	cmp	r2, #0
 801ab00:	d037      	beq.n	801ab72 <_strtod_l+0x242>
 801ab02:	4602      	mov	r2, r0
 801ab04:	9c04      	ldr	r4, [sp, #16]
 801ab06:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801ab0a:	2909      	cmp	r1, #9
 801ab0c:	d913      	bls.n	801ab36 <_strtod_l+0x206>
 801ab0e:	2101      	movs	r1, #1
 801ab10:	9105      	str	r1, [sp, #20]
 801ab12:	e7c2      	b.n	801aa9a <_strtod_l+0x16a>
 801ab14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ab16:	3001      	adds	r0, #1
 801ab18:	1c5a      	adds	r2, r3, #1
 801ab1a:	921b      	str	r2, [sp, #108]	; 0x6c
 801ab1c:	785b      	ldrb	r3, [r3, #1]
 801ab1e:	2b30      	cmp	r3, #48	; 0x30
 801ab20:	d0f8      	beq.n	801ab14 <_strtod_l+0x1e4>
 801ab22:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801ab26:	2a08      	cmp	r2, #8
 801ab28:	f200 84f0 	bhi.w	801b50c <_strtod_l+0xbdc>
 801ab2c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801ab2e:	9208      	str	r2, [sp, #32]
 801ab30:	4602      	mov	r2, r0
 801ab32:	2000      	movs	r0, #0
 801ab34:	4604      	mov	r4, r0
 801ab36:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 801ab3a:	f100 0101 	add.w	r1, r0, #1
 801ab3e:	d012      	beq.n	801ab66 <_strtod_l+0x236>
 801ab40:	440a      	add	r2, r1
 801ab42:	270a      	movs	r7, #10
 801ab44:	4621      	mov	r1, r4
 801ab46:	eb00 0c04 	add.w	ip, r0, r4
 801ab4a:	458c      	cmp	ip, r1
 801ab4c:	d113      	bne.n	801ab76 <_strtod_l+0x246>
 801ab4e:	1821      	adds	r1, r4, r0
 801ab50:	2908      	cmp	r1, #8
 801ab52:	f104 0401 	add.w	r4, r4, #1
 801ab56:	4404      	add	r4, r0
 801ab58:	dc19      	bgt.n	801ab8e <_strtod_l+0x25e>
 801ab5a:	210a      	movs	r1, #10
 801ab5c:	9b06      	ldr	r3, [sp, #24]
 801ab5e:	fb01 e303 	mla	r3, r1, r3, lr
 801ab62:	9306      	str	r3, [sp, #24]
 801ab64:	2100      	movs	r1, #0
 801ab66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ab68:	1c58      	adds	r0, r3, #1
 801ab6a:	901b      	str	r0, [sp, #108]	; 0x6c
 801ab6c:	785b      	ldrb	r3, [r3, #1]
 801ab6e:	4608      	mov	r0, r1
 801ab70:	e7c9      	b.n	801ab06 <_strtod_l+0x1d6>
 801ab72:	9804      	ldr	r0, [sp, #16]
 801ab74:	e7d3      	b.n	801ab1e <_strtod_l+0x1ee>
 801ab76:	2908      	cmp	r1, #8
 801ab78:	f101 0101 	add.w	r1, r1, #1
 801ab7c:	dc03      	bgt.n	801ab86 <_strtod_l+0x256>
 801ab7e:	9b06      	ldr	r3, [sp, #24]
 801ab80:	437b      	muls	r3, r7
 801ab82:	9306      	str	r3, [sp, #24]
 801ab84:	e7e1      	b.n	801ab4a <_strtod_l+0x21a>
 801ab86:	2910      	cmp	r1, #16
 801ab88:	bfd8      	it	le
 801ab8a:	437d      	mulle	r5, r7
 801ab8c:	e7dd      	b.n	801ab4a <_strtod_l+0x21a>
 801ab8e:	2c10      	cmp	r4, #16
 801ab90:	bfdc      	itt	le
 801ab92:	210a      	movle	r1, #10
 801ab94:	fb01 e505 	mlale	r5, r1, r5, lr
 801ab98:	e7e4      	b.n	801ab64 <_strtod_l+0x234>
 801ab9a:	2301      	movs	r3, #1
 801ab9c:	9305      	str	r3, [sp, #20]
 801ab9e:	e781      	b.n	801aaa4 <_strtod_l+0x174>
 801aba0:	f04f 0c01 	mov.w	ip, #1
 801aba4:	1cb3      	adds	r3, r6, #2
 801aba6:	931b      	str	r3, [sp, #108]	; 0x6c
 801aba8:	78b3      	ldrb	r3, [r6, #2]
 801abaa:	e78a      	b.n	801aac2 <_strtod_l+0x192>
 801abac:	f04f 0c00 	mov.w	ip, #0
 801abb0:	e7f8      	b.n	801aba4 <_strtod_l+0x274>
 801abb2:	bf00      	nop
 801abb4:	08021d78 	.word	0x08021d78
 801abb8:	7ff00000 	.word	0x7ff00000
 801abbc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801abbe:	1c5f      	adds	r7, r3, #1
 801abc0:	971b      	str	r7, [sp, #108]	; 0x6c
 801abc2:	785b      	ldrb	r3, [r3, #1]
 801abc4:	2b30      	cmp	r3, #48	; 0x30
 801abc6:	d0f9      	beq.n	801abbc <_strtod_l+0x28c>
 801abc8:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 801abcc:	2f08      	cmp	r7, #8
 801abce:	f63f af7d 	bhi.w	801aacc <_strtod_l+0x19c>
 801abd2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801abd6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801abd8:	9309      	str	r3, [sp, #36]	; 0x24
 801abda:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801abdc:	1c5f      	adds	r7, r3, #1
 801abde:	971b      	str	r7, [sp, #108]	; 0x6c
 801abe0:	785b      	ldrb	r3, [r3, #1]
 801abe2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 801abe6:	f1b8 0f09 	cmp.w	r8, #9
 801abea:	d937      	bls.n	801ac5c <_strtod_l+0x32c>
 801abec:	9909      	ldr	r1, [sp, #36]	; 0x24
 801abee:	1a7f      	subs	r7, r7, r1
 801abf0:	2f08      	cmp	r7, #8
 801abf2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801abf6:	dc37      	bgt.n	801ac68 <_strtod_l+0x338>
 801abf8:	45be      	cmp	lr, r7
 801abfa:	bfa8      	it	ge
 801abfc:	46be      	movge	lr, r7
 801abfe:	f1bc 0f00 	cmp.w	ip, #0
 801ac02:	d001      	beq.n	801ac08 <_strtod_l+0x2d8>
 801ac04:	f1ce 0e00 	rsb	lr, lr, #0
 801ac08:	2c00      	cmp	r4, #0
 801ac0a:	d151      	bne.n	801acb0 <_strtod_l+0x380>
 801ac0c:	2800      	cmp	r0, #0
 801ac0e:	f47f aece 	bne.w	801a9ae <_strtod_l+0x7e>
 801ac12:	9a07      	ldr	r2, [sp, #28]
 801ac14:	2a00      	cmp	r2, #0
 801ac16:	f47f aeca 	bne.w	801a9ae <_strtod_l+0x7e>
 801ac1a:	9a05      	ldr	r2, [sp, #20]
 801ac1c:	2a00      	cmp	r2, #0
 801ac1e:	f47f aee4 	bne.w	801a9ea <_strtod_l+0xba>
 801ac22:	2b4e      	cmp	r3, #78	; 0x4e
 801ac24:	d027      	beq.n	801ac76 <_strtod_l+0x346>
 801ac26:	dc21      	bgt.n	801ac6c <_strtod_l+0x33c>
 801ac28:	2b49      	cmp	r3, #73	; 0x49
 801ac2a:	f47f aede 	bne.w	801a9ea <_strtod_l+0xba>
 801ac2e:	49a4      	ldr	r1, [pc, #656]	; (801aec0 <_strtod_l+0x590>)
 801ac30:	a81b      	add	r0, sp, #108	; 0x6c
 801ac32:	f002 f81b 	bl	801cc6c <__match>
 801ac36:	2800      	cmp	r0, #0
 801ac38:	f43f aed7 	beq.w	801a9ea <_strtod_l+0xba>
 801ac3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ac3e:	49a1      	ldr	r1, [pc, #644]	; (801aec4 <_strtod_l+0x594>)
 801ac40:	3b01      	subs	r3, #1
 801ac42:	a81b      	add	r0, sp, #108	; 0x6c
 801ac44:	931b      	str	r3, [sp, #108]	; 0x6c
 801ac46:	f002 f811 	bl	801cc6c <__match>
 801ac4a:	b910      	cbnz	r0, 801ac52 <_strtod_l+0x322>
 801ac4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ac4e:	3301      	adds	r3, #1
 801ac50:	931b      	str	r3, [sp, #108]	; 0x6c
 801ac52:	f8df a284 	ldr.w	sl, [pc, #644]	; 801aed8 <_strtod_l+0x5a8>
 801ac56:	f04f 0900 	mov.w	r9, #0
 801ac5a:	e6a8      	b.n	801a9ae <_strtod_l+0x7e>
 801ac5c:	210a      	movs	r1, #10
 801ac5e:	fb01 3e0e 	mla	lr, r1, lr, r3
 801ac62:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801ac66:	e7b8      	b.n	801abda <_strtod_l+0x2aa>
 801ac68:	46be      	mov	lr, r7
 801ac6a:	e7c8      	b.n	801abfe <_strtod_l+0x2ce>
 801ac6c:	2b69      	cmp	r3, #105	; 0x69
 801ac6e:	d0de      	beq.n	801ac2e <_strtod_l+0x2fe>
 801ac70:	2b6e      	cmp	r3, #110	; 0x6e
 801ac72:	f47f aeba 	bne.w	801a9ea <_strtod_l+0xba>
 801ac76:	4994      	ldr	r1, [pc, #592]	; (801aec8 <_strtod_l+0x598>)
 801ac78:	a81b      	add	r0, sp, #108	; 0x6c
 801ac7a:	f001 fff7 	bl	801cc6c <__match>
 801ac7e:	2800      	cmp	r0, #0
 801ac80:	f43f aeb3 	beq.w	801a9ea <_strtod_l+0xba>
 801ac84:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801ac86:	781b      	ldrb	r3, [r3, #0]
 801ac88:	2b28      	cmp	r3, #40	; 0x28
 801ac8a:	d10e      	bne.n	801acaa <_strtod_l+0x37a>
 801ac8c:	aa1e      	add	r2, sp, #120	; 0x78
 801ac8e:	498f      	ldr	r1, [pc, #572]	; (801aecc <_strtod_l+0x59c>)
 801ac90:	a81b      	add	r0, sp, #108	; 0x6c
 801ac92:	f001 ffff 	bl	801cc94 <__hexnan>
 801ac96:	2805      	cmp	r0, #5
 801ac98:	d107      	bne.n	801acaa <_strtod_l+0x37a>
 801ac9a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801ac9c:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 801aca0:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 801aca4:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 801aca8:	e681      	b.n	801a9ae <_strtod_l+0x7e>
 801acaa:	f8df a234 	ldr.w	sl, [pc, #564]	; 801aee0 <_strtod_l+0x5b0>
 801acae:	e7d2      	b.n	801ac56 <_strtod_l+0x326>
 801acb0:	ebae 0302 	sub.w	r3, lr, r2
 801acb4:	9307      	str	r3, [sp, #28]
 801acb6:	9b04      	ldr	r3, [sp, #16]
 801acb8:	9806      	ldr	r0, [sp, #24]
 801acba:	2b00      	cmp	r3, #0
 801acbc:	bf08      	it	eq
 801acbe:	4623      	moveq	r3, r4
 801acc0:	2c10      	cmp	r4, #16
 801acc2:	9304      	str	r3, [sp, #16]
 801acc4:	46a0      	mov	r8, r4
 801acc6:	bfa8      	it	ge
 801acc8:	f04f 0810 	movge.w	r8, #16
 801accc:	f7e5 fbca 	bl	8000464 <__aeabi_ui2d>
 801acd0:	2c09      	cmp	r4, #9
 801acd2:	4681      	mov	r9, r0
 801acd4:	468a      	mov	sl, r1
 801acd6:	dc13      	bgt.n	801ad00 <_strtod_l+0x3d0>
 801acd8:	9b07      	ldr	r3, [sp, #28]
 801acda:	2b00      	cmp	r3, #0
 801acdc:	f43f ae67 	beq.w	801a9ae <_strtod_l+0x7e>
 801ace0:	9b07      	ldr	r3, [sp, #28]
 801ace2:	dd7e      	ble.n	801ade2 <_strtod_l+0x4b2>
 801ace4:	2b16      	cmp	r3, #22
 801ace6:	dc65      	bgt.n	801adb4 <_strtod_l+0x484>
 801ace8:	4a79      	ldr	r2, [pc, #484]	; (801aed0 <_strtod_l+0x5a0>)
 801acea:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 801acee:	464a      	mov	r2, r9
 801acf0:	e9de 0100 	ldrd	r0, r1, [lr]
 801acf4:	4653      	mov	r3, sl
 801acf6:	f7e5 fc2f 	bl	8000558 <__aeabi_dmul>
 801acfa:	4681      	mov	r9, r0
 801acfc:	468a      	mov	sl, r1
 801acfe:	e656      	b.n	801a9ae <_strtod_l+0x7e>
 801ad00:	4b73      	ldr	r3, [pc, #460]	; (801aed0 <_strtod_l+0x5a0>)
 801ad02:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801ad06:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801ad0a:	f7e5 fc25 	bl	8000558 <__aeabi_dmul>
 801ad0e:	4606      	mov	r6, r0
 801ad10:	4628      	mov	r0, r5
 801ad12:	460f      	mov	r7, r1
 801ad14:	f7e5 fba6 	bl	8000464 <__aeabi_ui2d>
 801ad18:	4602      	mov	r2, r0
 801ad1a:	460b      	mov	r3, r1
 801ad1c:	4630      	mov	r0, r6
 801ad1e:	4639      	mov	r1, r7
 801ad20:	f7e5 fa64 	bl	80001ec <__adddf3>
 801ad24:	2c0f      	cmp	r4, #15
 801ad26:	4681      	mov	r9, r0
 801ad28:	468a      	mov	sl, r1
 801ad2a:	ddd5      	ble.n	801acd8 <_strtod_l+0x3a8>
 801ad2c:	9b07      	ldr	r3, [sp, #28]
 801ad2e:	eba4 0808 	sub.w	r8, r4, r8
 801ad32:	4498      	add	r8, r3
 801ad34:	f1b8 0f00 	cmp.w	r8, #0
 801ad38:	f340 809a 	ble.w	801ae70 <_strtod_l+0x540>
 801ad3c:	f018 030f 	ands.w	r3, r8, #15
 801ad40:	d00a      	beq.n	801ad58 <_strtod_l+0x428>
 801ad42:	4963      	ldr	r1, [pc, #396]	; (801aed0 <_strtod_l+0x5a0>)
 801ad44:	464a      	mov	r2, r9
 801ad46:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801ad4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ad4e:	4653      	mov	r3, sl
 801ad50:	f7e5 fc02 	bl	8000558 <__aeabi_dmul>
 801ad54:	4681      	mov	r9, r0
 801ad56:	468a      	mov	sl, r1
 801ad58:	f038 080f 	bics.w	r8, r8, #15
 801ad5c:	d077      	beq.n	801ae4e <_strtod_l+0x51e>
 801ad5e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801ad62:	dd4b      	ble.n	801adfc <_strtod_l+0x4cc>
 801ad64:	f04f 0800 	mov.w	r8, #0
 801ad68:	f8cd 8010 	str.w	r8, [sp, #16]
 801ad6c:	f8cd 8020 	str.w	r8, [sp, #32]
 801ad70:	f8cd 8018 	str.w	r8, [sp, #24]
 801ad74:	2322      	movs	r3, #34	; 0x22
 801ad76:	f04f 0900 	mov.w	r9, #0
 801ad7a:	f8df a15c 	ldr.w	sl, [pc, #348]	; 801aed8 <_strtod_l+0x5a8>
 801ad7e:	f8cb 3000 	str.w	r3, [fp]
 801ad82:	9b08      	ldr	r3, [sp, #32]
 801ad84:	2b00      	cmp	r3, #0
 801ad86:	f43f ae12 	beq.w	801a9ae <_strtod_l+0x7e>
 801ad8a:	991c      	ldr	r1, [sp, #112]	; 0x70
 801ad8c:	4658      	mov	r0, fp
 801ad8e:	f002 f8e5 	bl	801cf5c <_Bfree>
 801ad92:	9906      	ldr	r1, [sp, #24]
 801ad94:	4658      	mov	r0, fp
 801ad96:	f002 f8e1 	bl	801cf5c <_Bfree>
 801ad9a:	9904      	ldr	r1, [sp, #16]
 801ad9c:	4658      	mov	r0, fp
 801ad9e:	f002 f8dd 	bl	801cf5c <_Bfree>
 801ada2:	9908      	ldr	r1, [sp, #32]
 801ada4:	4658      	mov	r0, fp
 801ada6:	f002 f8d9 	bl	801cf5c <_Bfree>
 801adaa:	4641      	mov	r1, r8
 801adac:	4658      	mov	r0, fp
 801adae:	f002 f8d5 	bl	801cf5c <_Bfree>
 801adb2:	e5fc      	b.n	801a9ae <_strtod_l+0x7e>
 801adb4:	9a07      	ldr	r2, [sp, #28]
 801adb6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 801adba:	4293      	cmp	r3, r2
 801adbc:	dbb6      	blt.n	801ad2c <_strtod_l+0x3fc>
 801adbe:	4d44      	ldr	r5, [pc, #272]	; (801aed0 <_strtod_l+0x5a0>)
 801adc0:	f1c4 040f 	rsb	r4, r4, #15
 801adc4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 801adc8:	464a      	mov	r2, r9
 801adca:	e9d1 0100 	ldrd	r0, r1, [r1]
 801adce:	4653      	mov	r3, sl
 801add0:	f7e5 fbc2 	bl	8000558 <__aeabi_dmul>
 801add4:	9b07      	ldr	r3, [sp, #28]
 801add6:	1b1c      	subs	r4, r3, r4
 801add8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 801addc:	e9d5 2300 	ldrd	r2, r3, [r5]
 801ade0:	e789      	b.n	801acf6 <_strtod_l+0x3c6>
 801ade2:	f113 0f16 	cmn.w	r3, #22
 801ade6:	dba1      	blt.n	801ad2c <_strtod_l+0x3fc>
 801ade8:	4a39      	ldr	r2, [pc, #228]	; (801aed0 <_strtod_l+0x5a0>)
 801adea:	4648      	mov	r0, r9
 801adec:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 801adf0:	e9d2 2300 	ldrd	r2, r3, [r2]
 801adf4:	4651      	mov	r1, sl
 801adf6:	f7e5 fcd9 	bl	80007ac <__aeabi_ddiv>
 801adfa:	e77e      	b.n	801acfa <_strtod_l+0x3ca>
 801adfc:	2300      	movs	r3, #0
 801adfe:	4648      	mov	r0, r9
 801ae00:	4651      	mov	r1, sl
 801ae02:	461d      	mov	r5, r3
 801ae04:	4e33      	ldr	r6, [pc, #204]	; (801aed4 <_strtod_l+0x5a4>)
 801ae06:	ea4f 1828 	mov.w	r8, r8, asr #4
 801ae0a:	f1b8 0f01 	cmp.w	r8, #1
 801ae0e:	dc21      	bgt.n	801ae54 <_strtod_l+0x524>
 801ae10:	b10b      	cbz	r3, 801ae16 <_strtod_l+0x4e6>
 801ae12:	4681      	mov	r9, r0
 801ae14:	468a      	mov	sl, r1
 801ae16:	4b2f      	ldr	r3, [pc, #188]	; (801aed4 <_strtod_l+0x5a4>)
 801ae18:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 801ae1c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801ae20:	464a      	mov	r2, r9
 801ae22:	e9d5 0100 	ldrd	r0, r1, [r5]
 801ae26:	4653      	mov	r3, sl
 801ae28:	f7e5 fb96 	bl	8000558 <__aeabi_dmul>
 801ae2c:	4b2a      	ldr	r3, [pc, #168]	; (801aed8 <_strtod_l+0x5a8>)
 801ae2e:	460a      	mov	r2, r1
 801ae30:	400b      	ands	r3, r1
 801ae32:	492a      	ldr	r1, [pc, #168]	; (801aedc <_strtod_l+0x5ac>)
 801ae34:	4681      	mov	r9, r0
 801ae36:	428b      	cmp	r3, r1
 801ae38:	d894      	bhi.n	801ad64 <_strtod_l+0x434>
 801ae3a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801ae3e:	428b      	cmp	r3, r1
 801ae40:	bf86      	itte	hi
 801ae42:	f04f 39ff 	movhi.w	r9, #4294967295
 801ae46:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 801aee4 <_strtod_l+0x5b4>
 801ae4a:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 801ae4e:	2300      	movs	r3, #0
 801ae50:	9305      	str	r3, [sp, #20]
 801ae52:	e07b      	b.n	801af4c <_strtod_l+0x61c>
 801ae54:	f018 0f01 	tst.w	r8, #1
 801ae58:	d006      	beq.n	801ae68 <_strtod_l+0x538>
 801ae5a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 801ae5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae62:	f7e5 fb79 	bl	8000558 <__aeabi_dmul>
 801ae66:	2301      	movs	r3, #1
 801ae68:	3501      	adds	r5, #1
 801ae6a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801ae6e:	e7cc      	b.n	801ae0a <_strtod_l+0x4da>
 801ae70:	d0ed      	beq.n	801ae4e <_strtod_l+0x51e>
 801ae72:	f1c8 0800 	rsb	r8, r8, #0
 801ae76:	f018 020f 	ands.w	r2, r8, #15
 801ae7a:	d00a      	beq.n	801ae92 <_strtod_l+0x562>
 801ae7c:	4b14      	ldr	r3, [pc, #80]	; (801aed0 <_strtod_l+0x5a0>)
 801ae7e:	4648      	mov	r0, r9
 801ae80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ae84:	4651      	mov	r1, sl
 801ae86:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae8a:	f7e5 fc8f 	bl	80007ac <__aeabi_ddiv>
 801ae8e:	4681      	mov	r9, r0
 801ae90:	468a      	mov	sl, r1
 801ae92:	ea5f 1828 	movs.w	r8, r8, asr #4
 801ae96:	d0da      	beq.n	801ae4e <_strtod_l+0x51e>
 801ae98:	f1b8 0f1f 	cmp.w	r8, #31
 801ae9c:	dd24      	ble.n	801aee8 <_strtod_l+0x5b8>
 801ae9e:	f04f 0800 	mov.w	r8, #0
 801aea2:	f8cd 8010 	str.w	r8, [sp, #16]
 801aea6:	f8cd 8020 	str.w	r8, [sp, #32]
 801aeaa:	f8cd 8018 	str.w	r8, [sp, #24]
 801aeae:	2322      	movs	r3, #34	; 0x22
 801aeb0:	f04f 0900 	mov.w	r9, #0
 801aeb4:	f04f 0a00 	mov.w	sl, #0
 801aeb8:	f8cb 3000 	str.w	r3, [fp]
 801aebc:	e761      	b.n	801ad82 <_strtod_l+0x452>
 801aebe:	bf00      	nop
 801aec0:	08021d41 	.word	0x08021d41
 801aec4:	08021dcb 	.word	0x08021dcb
 801aec8:	08021d49 	.word	0x08021d49
 801aecc:	08021d8c 	.word	0x08021d8c
 801aed0:	08021e70 	.word	0x08021e70
 801aed4:	08021e48 	.word	0x08021e48
 801aed8:	7ff00000 	.word	0x7ff00000
 801aedc:	7ca00000 	.word	0x7ca00000
 801aee0:	fff80000 	.word	0xfff80000
 801aee4:	7fefffff 	.word	0x7fefffff
 801aee8:	f018 0310 	ands.w	r3, r8, #16
 801aeec:	bf18      	it	ne
 801aeee:	236a      	movne	r3, #106	; 0x6a
 801aef0:	4648      	mov	r0, r9
 801aef2:	9305      	str	r3, [sp, #20]
 801aef4:	4651      	mov	r1, sl
 801aef6:	2300      	movs	r3, #0
 801aef8:	4da1      	ldr	r5, [pc, #644]	; (801b180 <_strtod_l+0x850>)
 801aefa:	f1b8 0f00 	cmp.w	r8, #0
 801aefe:	f300 8113 	bgt.w	801b128 <_strtod_l+0x7f8>
 801af02:	b10b      	cbz	r3, 801af08 <_strtod_l+0x5d8>
 801af04:	4681      	mov	r9, r0
 801af06:	468a      	mov	sl, r1
 801af08:	9b05      	ldr	r3, [sp, #20]
 801af0a:	b1bb      	cbz	r3, 801af3c <_strtod_l+0x60c>
 801af0c:	f3ca 530a 	ubfx	r3, sl, #20, #11
 801af10:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801af14:	2b00      	cmp	r3, #0
 801af16:	4651      	mov	r1, sl
 801af18:	dd10      	ble.n	801af3c <_strtod_l+0x60c>
 801af1a:	2b1f      	cmp	r3, #31
 801af1c:	f340 8110 	ble.w	801b140 <_strtod_l+0x810>
 801af20:	2b34      	cmp	r3, #52	; 0x34
 801af22:	bfd8      	it	le
 801af24:	f04f 32ff 	movle.w	r2, #4294967295
 801af28:	f04f 0900 	mov.w	r9, #0
 801af2c:	bfcf      	iteee	gt
 801af2e:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 801af32:	3b20      	suble	r3, #32
 801af34:	fa02 f303 	lslle.w	r3, r2, r3
 801af38:	ea03 0a01 	andle.w	sl, r3, r1
 801af3c:	2200      	movs	r2, #0
 801af3e:	2300      	movs	r3, #0
 801af40:	4648      	mov	r0, r9
 801af42:	4651      	mov	r1, sl
 801af44:	f7e5 fd70 	bl	8000a28 <__aeabi_dcmpeq>
 801af48:	2800      	cmp	r0, #0
 801af4a:	d1a8      	bne.n	801ae9e <_strtod_l+0x56e>
 801af4c:	9b06      	ldr	r3, [sp, #24]
 801af4e:	9a04      	ldr	r2, [sp, #16]
 801af50:	9300      	str	r3, [sp, #0]
 801af52:	9908      	ldr	r1, [sp, #32]
 801af54:	4623      	mov	r3, r4
 801af56:	4658      	mov	r0, fp
 801af58:	f002 f852 	bl	801d000 <__s2b>
 801af5c:	9008      	str	r0, [sp, #32]
 801af5e:	2800      	cmp	r0, #0
 801af60:	f43f af00 	beq.w	801ad64 <_strtod_l+0x434>
 801af64:	9a07      	ldr	r2, [sp, #28]
 801af66:	9b07      	ldr	r3, [sp, #28]
 801af68:	2a00      	cmp	r2, #0
 801af6a:	f1c3 0300 	rsb	r3, r3, #0
 801af6e:	bfa8      	it	ge
 801af70:	2300      	movge	r3, #0
 801af72:	f04f 0800 	mov.w	r8, #0
 801af76:	930e      	str	r3, [sp, #56]	; 0x38
 801af78:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801af7c:	9316      	str	r3, [sp, #88]	; 0x58
 801af7e:	f8cd 8010 	str.w	r8, [sp, #16]
 801af82:	9b08      	ldr	r3, [sp, #32]
 801af84:	4658      	mov	r0, fp
 801af86:	6859      	ldr	r1, [r3, #4]
 801af88:	f001 ffb4 	bl	801cef4 <_Balloc>
 801af8c:	9006      	str	r0, [sp, #24]
 801af8e:	2800      	cmp	r0, #0
 801af90:	f43f aef0 	beq.w	801ad74 <_strtod_l+0x444>
 801af94:	9b08      	ldr	r3, [sp, #32]
 801af96:	300c      	adds	r0, #12
 801af98:	691a      	ldr	r2, [r3, #16]
 801af9a:	f103 010c 	add.w	r1, r3, #12
 801af9e:	3202      	adds	r2, #2
 801afa0:	0092      	lsls	r2, r2, #2
 801afa2:	f7fe fd78 	bl	8019a96 <memcpy>
 801afa6:	ab1e      	add	r3, sp, #120	; 0x78
 801afa8:	9301      	str	r3, [sp, #4]
 801afaa:	ab1d      	add	r3, sp, #116	; 0x74
 801afac:	9300      	str	r3, [sp, #0]
 801afae:	464a      	mov	r2, r9
 801afb0:	4653      	mov	r3, sl
 801afb2:	4658      	mov	r0, fp
 801afb4:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 801afb8:	f002 fadc 	bl	801d574 <__d2b>
 801afbc:	901c      	str	r0, [sp, #112]	; 0x70
 801afbe:	2800      	cmp	r0, #0
 801afc0:	f43f aed8 	beq.w	801ad74 <_strtod_l+0x444>
 801afc4:	2101      	movs	r1, #1
 801afc6:	4658      	mov	r0, fp
 801afc8:	f002 f8a6 	bl	801d118 <__i2b>
 801afcc:	9004      	str	r0, [sp, #16]
 801afce:	4603      	mov	r3, r0
 801afd0:	2800      	cmp	r0, #0
 801afd2:	f43f aecf 	beq.w	801ad74 <_strtod_l+0x444>
 801afd6:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801afd8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801afda:	2d00      	cmp	r5, #0
 801afdc:	bfab      	itete	ge
 801afde:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 801afe0:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 801afe2:	18ee      	addge	r6, r5, r3
 801afe4:	1b5c      	sublt	r4, r3, r5
 801afe6:	9b05      	ldr	r3, [sp, #20]
 801afe8:	bfa8      	it	ge
 801afea:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 801afec:	eba5 0503 	sub.w	r5, r5, r3
 801aff0:	4415      	add	r5, r2
 801aff2:	4b64      	ldr	r3, [pc, #400]	; (801b184 <_strtod_l+0x854>)
 801aff4:	f105 35ff 	add.w	r5, r5, #4294967295
 801aff8:	bfb8      	it	lt
 801affa:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 801affc:	429d      	cmp	r5, r3
 801affe:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801b002:	f280 80af 	bge.w	801b164 <_strtod_l+0x834>
 801b006:	1b5b      	subs	r3, r3, r5
 801b008:	2b1f      	cmp	r3, #31
 801b00a:	eba2 0203 	sub.w	r2, r2, r3
 801b00e:	f04f 0701 	mov.w	r7, #1
 801b012:	f300 809c 	bgt.w	801b14e <_strtod_l+0x81e>
 801b016:	2500      	movs	r5, #0
 801b018:	fa07 f303 	lsl.w	r3, r7, r3
 801b01c:	930f      	str	r3, [sp, #60]	; 0x3c
 801b01e:	18b7      	adds	r7, r6, r2
 801b020:	9b05      	ldr	r3, [sp, #20]
 801b022:	42be      	cmp	r6, r7
 801b024:	4414      	add	r4, r2
 801b026:	441c      	add	r4, r3
 801b028:	4633      	mov	r3, r6
 801b02a:	bfa8      	it	ge
 801b02c:	463b      	movge	r3, r7
 801b02e:	42a3      	cmp	r3, r4
 801b030:	bfa8      	it	ge
 801b032:	4623      	movge	r3, r4
 801b034:	2b00      	cmp	r3, #0
 801b036:	bfc2      	ittt	gt
 801b038:	1aff      	subgt	r7, r7, r3
 801b03a:	1ae4      	subgt	r4, r4, r3
 801b03c:	1af6      	subgt	r6, r6, r3
 801b03e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b040:	b1bb      	cbz	r3, 801b072 <_strtod_l+0x742>
 801b042:	461a      	mov	r2, r3
 801b044:	9904      	ldr	r1, [sp, #16]
 801b046:	4658      	mov	r0, fp
 801b048:	f002 f904 	bl	801d254 <__pow5mult>
 801b04c:	9004      	str	r0, [sp, #16]
 801b04e:	2800      	cmp	r0, #0
 801b050:	f43f ae90 	beq.w	801ad74 <_strtod_l+0x444>
 801b054:	4601      	mov	r1, r0
 801b056:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801b058:	4658      	mov	r0, fp
 801b05a:	f002 f866 	bl	801d12a <__multiply>
 801b05e:	9009      	str	r0, [sp, #36]	; 0x24
 801b060:	2800      	cmp	r0, #0
 801b062:	f43f ae87 	beq.w	801ad74 <_strtod_l+0x444>
 801b066:	991c      	ldr	r1, [sp, #112]	; 0x70
 801b068:	4658      	mov	r0, fp
 801b06a:	f001 ff77 	bl	801cf5c <_Bfree>
 801b06e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b070:	931c      	str	r3, [sp, #112]	; 0x70
 801b072:	2f00      	cmp	r7, #0
 801b074:	dc7a      	bgt.n	801b16c <_strtod_l+0x83c>
 801b076:	9b07      	ldr	r3, [sp, #28]
 801b078:	2b00      	cmp	r3, #0
 801b07a:	dd08      	ble.n	801b08e <_strtod_l+0x75e>
 801b07c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801b07e:	9906      	ldr	r1, [sp, #24]
 801b080:	4658      	mov	r0, fp
 801b082:	f002 f8e7 	bl	801d254 <__pow5mult>
 801b086:	9006      	str	r0, [sp, #24]
 801b088:	2800      	cmp	r0, #0
 801b08a:	f43f ae73 	beq.w	801ad74 <_strtod_l+0x444>
 801b08e:	2c00      	cmp	r4, #0
 801b090:	dd08      	ble.n	801b0a4 <_strtod_l+0x774>
 801b092:	4622      	mov	r2, r4
 801b094:	9906      	ldr	r1, [sp, #24]
 801b096:	4658      	mov	r0, fp
 801b098:	f002 f92a 	bl	801d2f0 <__lshift>
 801b09c:	9006      	str	r0, [sp, #24]
 801b09e:	2800      	cmp	r0, #0
 801b0a0:	f43f ae68 	beq.w	801ad74 <_strtod_l+0x444>
 801b0a4:	2e00      	cmp	r6, #0
 801b0a6:	dd08      	ble.n	801b0ba <_strtod_l+0x78a>
 801b0a8:	4632      	mov	r2, r6
 801b0aa:	9904      	ldr	r1, [sp, #16]
 801b0ac:	4658      	mov	r0, fp
 801b0ae:	f002 f91f 	bl	801d2f0 <__lshift>
 801b0b2:	9004      	str	r0, [sp, #16]
 801b0b4:	2800      	cmp	r0, #0
 801b0b6:	f43f ae5d 	beq.w	801ad74 <_strtod_l+0x444>
 801b0ba:	9a06      	ldr	r2, [sp, #24]
 801b0bc:	991c      	ldr	r1, [sp, #112]	; 0x70
 801b0be:	4658      	mov	r0, fp
 801b0c0:	f002 f984 	bl	801d3cc <__mdiff>
 801b0c4:	4680      	mov	r8, r0
 801b0c6:	2800      	cmp	r0, #0
 801b0c8:	f43f ae54 	beq.w	801ad74 <_strtod_l+0x444>
 801b0cc:	2400      	movs	r4, #0
 801b0ce:	68c3      	ldr	r3, [r0, #12]
 801b0d0:	9904      	ldr	r1, [sp, #16]
 801b0d2:	60c4      	str	r4, [r0, #12]
 801b0d4:	930c      	str	r3, [sp, #48]	; 0x30
 801b0d6:	f002 f95f 	bl	801d398 <__mcmp>
 801b0da:	42a0      	cmp	r0, r4
 801b0dc:	da54      	bge.n	801b188 <_strtod_l+0x858>
 801b0de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b0e0:	b9f3      	cbnz	r3, 801b120 <_strtod_l+0x7f0>
 801b0e2:	f1b9 0f00 	cmp.w	r9, #0
 801b0e6:	d11b      	bne.n	801b120 <_strtod_l+0x7f0>
 801b0e8:	f3ca 0313 	ubfx	r3, sl, #0, #20
 801b0ec:	b9c3      	cbnz	r3, 801b120 <_strtod_l+0x7f0>
 801b0ee:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 801b0f2:	0d1b      	lsrs	r3, r3, #20
 801b0f4:	051b      	lsls	r3, r3, #20
 801b0f6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801b0fa:	d911      	bls.n	801b120 <_strtod_l+0x7f0>
 801b0fc:	f8d8 3014 	ldr.w	r3, [r8, #20]
 801b100:	b91b      	cbnz	r3, 801b10a <_strtod_l+0x7da>
 801b102:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801b106:	2b01      	cmp	r3, #1
 801b108:	dd0a      	ble.n	801b120 <_strtod_l+0x7f0>
 801b10a:	4641      	mov	r1, r8
 801b10c:	2201      	movs	r2, #1
 801b10e:	4658      	mov	r0, fp
 801b110:	f002 f8ee 	bl	801d2f0 <__lshift>
 801b114:	9904      	ldr	r1, [sp, #16]
 801b116:	4680      	mov	r8, r0
 801b118:	f002 f93e 	bl	801d398 <__mcmp>
 801b11c:	2800      	cmp	r0, #0
 801b11e:	dc68      	bgt.n	801b1f2 <_strtod_l+0x8c2>
 801b120:	9b05      	ldr	r3, [sp, #20]
 801b122:	2b00      	cmp	r3, #0
 801b124:	d172      	bne.n	801b20c <_strtod_l+0x8dc>
 801b126:	e630      	b.n	801ad8a <_strtod_l+0x45a>
 801b128:	f018 0f01 	tst.w	r8, #1
 801b12c:	d004      	beq.n	801b138 <_strtod_l+0x808>
 801b12e:	e9d5 2300 	ldrd	r2, r3, [r5]
 801b132:	f7e5 fa11 	bl	8000558 <__aeabi_dmul>
 801b136:	2301      	movs	r3, #1
 801b138:	ea4f 0868 	mov.w	r8, r8, asr #1
 801b13c:	3508      	adds	r5, #8
 801b13e:	e6dc      	b.n	801aefa <_strtod_l+0x5ca>
 801b140:	f04f 32ff 	mov.w	r2, #4294967295
 801b144:	fa02 f303 	lsl.w	r3, r2, r3
 801b148:	ea03 0909 	and.w	r9, r3, r9
 801b14c:	e6f6      	b.n	801af3c <_strtod_l+0x60c>
 801b14e:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 801b152:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 801b156:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 801b15a:	35e2      	adds	r5, #226	; 0xe2
 801b15c:	fa07 f505 	lsl.w	r5, r7, r5
 801b160:	970f      	str	r7, [sp, #60]	; 0x3c
 801b162:	e75c      	b.n	801b01e <_strtod_l+0x6ee>
 801b164:	2301      	movs	r3, #1
 801b166:	2500      	movs	r5, #0
 801b168:	930f      	str	r3, [sp, #60]	; 0x3c
 801b16a:	e758      	b.n	801b01e <_strtod_l+0x6ee>
 801b16c:	463a      	mov	r2, r7
 801b16e:	991c      	ldr	r1, [sp, #112]	; 0x70
 801b170:	4658      	mov	r0, fp
 801b172:	f002 f8bd 	bl	801d2f0 <__lshift>
 801b176:	901c      	str	r0, [sp, #112]	; 0x70
 801b178:	2800      	cmp	r0, #0
 801b17a:	f47f af7c 	bne.w	801b076 <_strtod_l+0x746>
 801b17e:	e5f9      	b.n	801ad74 <_strtod_l+0x444>
 801b180:	08021da0 	.word	0x08021da0
 801b184:	fffffc02 	.word	0xfffffc02
 801b188:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801b18c:	f040 8089 	bne.w	801b2a2 <_strtod_l+0x972>
 801b190:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b192:	f3ca 0313 	ubfx	r3, sl, #0, #20
 801b196:	b342      	cbz	r2, 801b1ea <_strtod_l+0x8ba>
 801b198:	4aaf      	ldr	r2, [pc, #700]	; (801b458 <_strtod_l+0xb28>)
 801b19a:	4293      	cmp	r3, r2
 801b19c:	d156      	bne.n	801b24c <_strtod_l+0x91c>
 801b19e:	9b05      	ldr	r3, [sp, #20]
 801b1a0:	4648      	mov	r0, r9
 801b1a2:	b1eb      	cbz	r3, 801b1e0 <_strtod_l+0x8b0>
 801b1a4:	4653      	mov	r3, sl
 801b1a6:	4aad      	ldr	r2, [pc, #692]	; (801b45c <_strtod_l+0xb2c>)
 801b1a8:	f04f 31ff 	mov.w	r1, #4294967295
 801b1ac:	401a      	ands	r2, r3
 801b1ae:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801b1b2:	d818      	bhi.n	801b1e6 <_strtod_l+0x8b6>
 801b1b4:	0d12      	lsrs	r2, r2, #20
 801b1b6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801b1ba:	fa01 f303 	lsl.w	r3, r1, r3
 801b1be:	4298      	cmp	r0, r3
 801b1c0:	d144      	bne.n	801b24c <_strtod_l+0x91c>
 801b1c2:	4ba7      	ldr	r3, [pc, #668]	; (801b460 <_strtod_l+0xb30>)
 801b1c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b1c6:	429a      	cmp	r2, r3
 801b1c8:	d102      	bne.n	801b1d0 <_strtod_l+0x8a0>
 801b1ca:	3001      	adds	r0, #1
 801b1cc:	f43f add2 	beq.w	801ad74 <_strtod_l+0x444>
 801b1d0:	4ba2      	ldr	r3, [pc, #648]	; (801b45c <_strtod_l+0xb2c>)
 801b1d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b1d4:	f04f 0900 	mov.w	r9, #0
 801b1d8:	401a      	ands	r2, r3
 801b1da:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 801b1de:	e79f      	b.n	801b120 <_strtod_l+0x7f0>
 801b1e0:	f04f 33ff 	mov.w	r3, #4294967295
 801b1e4:	e7eb      	b.n	801b1be <_strtod_l+0x88e>
 801b1e6:	460b      	mov	r3, r1
 801b1e8:	e7e9      	b.n	801b1be <_strtod_l+0x88e>
 801b1ea:	bb7b      	cbnz	r3, 801b24c <_strtod_l+0x91c>
 801b1ec:	f1b9 0f00 	cmp.w	r9, #0
 801b1f0:	d12c      	bne.n	801b24c <_strtod_l+0x91c>
 801b1f2:	9905      	ldr	r1, [sp, #20]
 801b1f4:	4653      	mov	r3, sl
 801b1f6:	4a99      	ldr	r2, [pc, #612]	; (801b45c <_strtod_l+0xb2c>)
 801b1f8:	b1f1      	cbz	r1, 801b238 <_strtod_l+0x908>
 801b1fa:	ea02 010a 	and.w	r1, r2, sl
 801b1fe:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801b202:	dc19      	bgt.n	801b238 <_strtod_l+0x908>
 801b204:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801b208:	f77f ae51 	ble.w	801aeae <_strtod_l+0x57e>
 801b20c:	2300      	movs	r3, #0
 801b20e:	4a95      	ldr	r2, [pc, #596]	; (801b464 <_strtod_l+0xb34>)
 801b210:	4648      	mov	r0, r9
 801b212:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 801b216:	4651      	mov	r1, sl
 801b218:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 801b21c:	f7e5 f99c 	bl	8000558 <__aeabi_dmul>
 801b220:	4681      	mov	r9, r0
 801b222:	468a      	mov	sl, r1
 801b224:	2900      	cmp	r1, #0
 801b226:	f47f adb0 	bne.w	801ad8a <_strtod_l+0x45a>
 801b22a:	2800      	cmp	r0, #0
 801b22c:	f47f adad 	bne.w	801ad8a <_strtod_l+0x45a>
 801b230:	2322      	movs	r3, #34	; 0x22
 801b232:	f8cb 3000 	str.w	r3, [fp]
 801b236:	e5a8      	b.n	801ad8a <_strtod_l+0x45a>
 801b238:	4013      	ands	r3, r2
 801b23a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801b23e:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 801b242:	f04f 39ff 	mov.w	r9, #4294967295
 801b246:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 801b24a:	e769      	b.n	801b120 <_strtod_l+0x7f0>
 801b24c:	b19d      	cbz	r5, 801b276 <_strtod_l+0x946>
 801b24e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b250:	421d      	tst	r5, r3
 801b252:	f43f af65 	beq.w	801b120 <_strtod_l+0x7f0>
 801b256:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b258:	9a05      	ldr	r2, [sp, #20]
 801b25a:	4648      	mov	r0, r9
 801b25c:	4651      	mov	r1, sl
 801b25e:	b173      	cbz	r3, 801b27e <_strtod_l+0x94e>
 801b260:	f7ff fb42 	bl	801a8e8 <sulp>
 801b264:	4602      	mov	r2, r0
 801b266:	460b      	mov	r3, r1
 801b268:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801b26c:	f7e4 ffbe 	bl	80001ec <__adddf3>
 801b270:	4681      	mov	r9, r0
 801b272:	468a      	mov	sl, r1
 801b274:	e754      	b.n	801b120 <_strtod_l+0x7f0>
 801b276:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b278:	ea13 0f09 	tst.w	r3, r9
 801b27c:	e7e9      	b.n	801b252 <_strtod_l+0x922>
 801b27e:	f7ff fb33 	bl	801a8e8 <sulp>
 801b282:	4602      	mov	r2, r0
 801b284:	460b      	mov	r3, r1
 801b286:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801b28a:	f7e4 ffad 	bl	80001e8 <__aeabi_dsub>
 801b28e:	2200      	movs	r2, #0
 801b290:	2300      	movs	r3, #0
 801b292:	4681      	mov	r9, r0
 801b294:	468a      	mov	sl, r1
 801b296:	f7e5 fbc7 	bl	8000a28 <__aeabi_dcmpeq>
 801b29a:	2800      	cmp	r0, #0
 801b29c:	f47f ae07 	bne.w	801aeae <_strtod_l+0x57e>
 801b2a0:	e73e      	b.n	801b120 <_strtod_l+0x7f0>
 801b2a2:	9904      	ldr	r1, [sp, #16]
 801b2a4:	4640      	mov	r0, r8
 801b2a6:	f002 f9b4 	bl	801d612 <__ratio>
 801b2aa:	2200      	movs	r2, #0
 801b2ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b2b0:	4606      	mov	r6, r0
 801b2b2:	460f      	mov	r7, r1
 801b2b4:	f7e5 fbcc 	bl	8000a50 <__aeabi_dcmple>
 801b2b8:	2800      	cmp	r0, #0
 801b2ba:	d075      	beq.n	801b3a8 <_strtod_l+0xa78>
 801b2bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b2be:	2b00      	cmp	r3, #0
 801b2c0:	d047      	beq.n	801b352 <_strtod_l+0xa22>
 801b2c2:	2600      	movs	r6, #0
 801b2c4:	4f68      	ldr	r7, [pc, #416]	; (801b468 <_strtod_l+0xb38>)
 801b2c6:	4d68      	ldr	r5, [pc, #416]	; (801b468 <_strtod_l+0xb38>)
 801b2c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b2ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801b2ce:	0d1b      	lsrs	r3, r3, #20
 801b2d0:	051b      	lsls	r3, r3, #20
 801b2d2:	930f      	str	r3, [sp, #60]	; 0x3c
 801b2d4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b2d6:	4b65      	ldr	r3, [pc, #404]	; (801b46c <_strtod_l+0xb3c>)
 801b2d8:	429a      	cmp	r2, r3
 801b2da:	f040 80cf 	bne.w	801b47c <_strtod_l+0xb4c>
 801b2de:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801b2e2:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 801b2e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b2e8:	4648      	mov	r0, r9
 801b2ea:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 801b2ee:	4651      	mov	r1, sl
 801b2f0:	f002 f8ca 	bl	801d488 <__ulp>
 801b2f4:	4602      	mov	r2, r0
 801b2f6:	460b      	mov	r3, r1
 801b2f8:	4630      	mov	r0, r6
 801b2fa:	4639      	mov	r1, r7
 801b2fc:	f7e5 f92c 	bl	8000558 <__aeabi_dmul>
 801b300:	464a      	mov	r2, r9
 801b302:	4653      	mov	r3, sl
 801b304:	f7e4 ff72 	bl	80001ec <__adddf3>
 801b308:	460b      	mov	r3, r1
 801b30a:	4954      	ldr	r1, [pc, #336]	; (801b45c <_strtod_l+0xb2c>)
 801b30c:	4a58      	ldr	r2, [pc, #352]	; (801b470 <_strtod_l+0xb40>)
 801b30e:	4019      	ands	r1, r3
 801b310:	4291      	cmp	r1, r2
 801b312:	4681      	mov	r9, r0
 801b314:	d95e      	bls.n	801b3d4 <_strtod_l+0xaa4>
 801b316:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b318:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801b31c:	4293      	cmp	r3, r2
 801b31e:	d103      	bne.n	801b328 <_strtod_l+0x9f8>
 801b320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b322:	3301      	adds	r3, #1
 801b324:	f43f ad26 	beq.w	801ad74 <_strtod_l+0x444>
 801b328:	f04f 39ff 	mov.w	r9, #4294967295
 801b32c:	f8df a130 	ldr.w	sl, [pc, #304]	; 801b460 <_strtod_l+0xb30>
 801b330:	991c      	ldr	r1, [sp, #112]	; 0x70
 801b332:	4658      	mov	r0, fp
 801b334:	f001 fe12 	bl	801cf5c <_Bfree>
 801b338:	9906      	ldr	r1, [sp, #24]
 801b33a:	4658      	mov	r0, fp
 801b33c:	f001 fe0e 	bl	801cf5c <_Bfree>
 801b340:	9904      	ldr	r1, [sp, #16]
 801b342:	4658      	mov	r0, fp
 801b344:	f001 fe0a 	bl	801cf5c <_Bfree>
 801b348:	4641      	mov	r1, r8
 801b34a:	4658      	mov	r0, fp
 801b34c:	f001 fe06 	bl	801cf5c <_Bfree>
 801b350:	e617      	b.n	801af82 <_strtod_l+0x652>
 801b352:	f1b9 0f00 	cmp.w	r9, #0
 801b356:	d119      	bne.n	801b38c <_strtod_l+0xa5c>
 801b358:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b35a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b35e:	b9e3      	cbnz	r3, 801b39a <_strtod_l+0xa6a>
 801b360:	2200      	movs	r2, #0
 801b362:	4b41      	ldr	r3, [pc, #260]	; (801b468 <_strtod_l+0xb38>)
 801b364:	4630      	mov	r0, r6
 801b366:	4639      	mov	r1, r7
 801b368:	f7e5 fb68 	bl	8000a3c <__aeabi_dcmplt>
 801b36c:	b9c8      	cbnz	r0, 801b3a2 <_strtod_l+0xa72>
 801b36e:	2200      	movs	r2, #0
 801b370:	4b40      	ldr	r3, [pc, #256]	; (801b474 <_strtod_l+0xb44>)
 801b372:	4630      	mov	r0, r6
 801b374:	4639      	mov	r1, r7
 801b376:	f7e5 f8ef 	bl	8000558 <__aeabi_dmul>
 801b37a:	4604      	mov	r4, r0
 801b37c:	460d      	mov	r5, r1
 801b37e:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 801b382:	9418      	str	r4, [sp, #96]	; 0x60
 801b384:	9319      	str	r3, [sp, #100]	; 0x64
 801b386:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 801b38a:	e79d      	b.n	801b2c8 <_strtod_l+0x998>
 801b38c:	f1b9 0f01 	cmp.w	r9, #1
 801b390:	d103      	bne.n	801b39a <_strtod_l+0xa6a>
 801b392:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b394:	2b00      	cmp	r3, #0
 801b396:	f43f ad8a 	beq.w	801aeae <_strtod_l+0x57e>
 801b39a:	2600      	movs	r6, #0
 801b39c:	4f36      	ldr	r7, [pc, #216]	; (801b478 <_strtod_l+0xb48>)
 801b39e:	2400      	movs	r4, #0
 801b3a0:	e791      	b.n	801b2c6 <_strtod_l+0x996>
 801b3a2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801b3a4:	4d33      	ldr	r5, [pc, #204]	; (801b474 <_strtod_l+0xb44>)
 801b3a6:	e7ea      	b.n	801b37e <_strtod_l+0xa4e>
 801b3a8:	4b32      	ldr	r3, [pc, #200]	; (801b474 <_strtod_l+0xb44>)
 801b3aa:	2200      	movs	r2, #0
 801b3ac:	4630      	mov	r0, r6
 801b3ae:	4639      	mov	r1, r7
 801b3b0:	f7e5 f8d2 	bl	8000558 <__aeabi_dmul>
 801b3b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b3b6:	4604      	mov	r4, r0
 801b3b8:	460d      	mov	r5, r1
 801b3ba:	b933      	cbnz	r3, 801b3ca <_strtod_l+0xa9a>
 801b3bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b3c0:	9010      	str	r0, [sp, #64]	; 0x40
 801b3c2:	9311      	str	r3, [sp, #68]	; 0x44
 801b3c4:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 801b3c8:	e77e      	b.n	801b2c8 <_strtod_l+0x998>
 801b3ca:	4602      	mov	r2, r0
 801b3cc:	460b      	mov	r3, r1
 801b3ce:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 801b3d2:	e7f7      	b.n	801b3c4 <_strtod_l+0xa94>
 801b3d4:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 801b3d8:	9b05      	ldr	r3, [sp, #20]
 801b3da:	2b00      	cmp	r3, #0
 801b3dc:	d1a8      	bne.n	801b330 <_strtod_l+0xa00>
 801b3de:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 801b3e2:	0d1b      	lsrs	r3, r3, #20
 801b3e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b3e6:	051b      	lsls	r3, r3, #20
 801b3e8:	429a      	cmp	r2, r3
 801b3ea:	4656      	mov	r6, sl
 801b3ec:	d1a0      	bne.n	801b330 <_strtod_l+0xa00>
 801b3ee:	4629      	mov	r1, r5
 801b3f0:	4620      	mov	r0, r4
 801b3f2:	f7e5 fb61 	bl	8000ab8 <__aeabi_d2iz>
 801b3f6:	f7e5 f845 	bl	8000484 <__aeabi_i2d>
 801b3fa:	460b      	mov	r3, r1
 801b3fc:	4602      	mov	r2, r0
 801b3fe:	4629      	mov	r1, r5
 801b400:	4620      	mov	r0, r4
 801b402:	f7e4 fef1 	bl	80001e8 <__aeabi_dsub>
 801b406:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b408:	4604      	mov	r4, r0
 801b40a:	460d      	mov	r5, r1
 801b40c:	b933      	cbnz	r3, 801b41c <_strtod_l+0xaec>
 801b40e:	f1b9 0f00 	cmp.w	r9, #0
 801b412:	d103      	bne.n	801b41c <_strtod_l+0xaec>
 801b414:	f3ca 0613 	ubfx	r6, sl, #0, #20
 801b418:	2e00      	cmp	r6, #0
 801b41a:	d06a      	beq.n	801b4f2 <_strtod_l+0xbc2>
 801b41c:	a30a      	add	r3, pc, #40	; (adr r3, 801b448 <_strtod_l+0xb18>)
 801b41e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b422:	4620      	mov	r0, r4
 801b424:	4629      	mov	r1, r5
 801b426:	f7e5 fb09 	bl	8000a3c <__aeabi_dcmplt>
 801b42a:	2800      	cmp	r0, #0
 801b42c:	f47f acad 	bne.w	801ad8a <_strtod_l+0x45a>
 801b430:	a307      	add	r3, pc, #28	; (adr r3, 801b450 <_strtod_l+0xb20>)
 801b432:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b436:	4620      	mov	r0, r4
 801b438:	4629      	mov	r1, r5
 801b43a:	f7e5 fb1d 	bl	8000a78 <__aeabi_dcmpgt>
 801b43e:	2800      	cmp	r0, #0
 801b440:	f43f af76 	beq.w	801b330 <_strtod_l+0xa00>
 801b444:	e4a1      	b.n	801ad8a <_strtod_l+0x45a>
 801b446:	bf00      	nop
 801b448:	94a03595 	.word	0x94a03595
 801b44c:	3fdfffff 	.word	0x3fdfffff
 801b450:	35afe535 	.word	0x35afe535
 801b454:	3fe00000 	.word	0x3fe00000
 801b458:	000fffff 	.word	0x000fffff
 801b45c:	7ff00000 	.word	0x7ff00000
 801b460:	7fefffff 	.word	0x7fefffff
 801b464:	39500000 	.word	0x39500000
 801b468:	3ff00000 	.word	0x3ff00000
 801b46c:	7fe00000 	.word	0x7fe00000
 801b470:	7c9fffff 	.word	0x7c9fffff
 801b474:	3fe00000 	.word	0x3fe00000
 801b478:	bff00000 	.word	0xbff00000
 801b47c:	9b05      	ldr	r3, [sp, #20]
 801b47e:	b313      	cbz	r3, 801b4c6 <_strtod_l+0xb96>
 801b480:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b482:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801b486:	d81e      	bhi.n	801b4c6 <_strtod_l+0xb96>
 801b488:	a325      	add	r3, pc, #148	; (adr r3, 801b520 <_strtod_l+0xbf0>)
 801b48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b48e:	4620      	mov	r0, r4
 801b490:	4629      	mov	r1, r5
 801b492:	f7e5 fadd 	bl	8000a50 <__aeabi_dcmple>
 801b496:	b190      	cbz	r0, 801b4be <_strtod_l+0xb8e>
 801b498:	4629      	mov	r1, r5
 801b49a:	4620      	mov	r0, r4
 801b49c:	f7e5 fb34 	bl	8000b08 <__aeabi_d2uiz>
 801b4a0:	2800      	cmp	r0, #0
 801b4a2:	bf08      	it	eq
 801b4a4:	2001      	moveq	r0, #1
 801b4a6:	f7e4 ffdd 	bl	8000464 <__aeabi_ui2d>
 801b4aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b4ac:	4604      	mov	r4, r0
 801b4ae:	460d      	mov	r5, r1
 801b4b0:	b9d3      	cbnz	r3, 801b4e8 <_strtod_l+0xbb8>
 801b4b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b4b6:	9012      	str	r0, [sp, #72]	; 0x48
 801b4b8:	9313      	str	r3, [sp, #76]	; 0x4c
 801b4ba:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 801b4be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b4c0:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 801b4c4:	1a9f      	subs	r7, r3, r2
 801b4c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801b4ca:	f001 ffdd 	bl	801d488 <__ulp>
 801b4ce:	4602      	mov	r2, r0
 801b4d0:	460b      	mov	r3, r1
 801b4d2:	4630      	mov	r0, r6
 801b4d4:	4639      	mov	r1, r7
 801b4d6:	f7e5 f83f 	bl	8000558 <__aeabi_dmul>
 801b4da:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801b4de:	f7e4 fe85 	bl	80001ec <__adddf3>
 801b4e2:	4681      	mov	r9, r0
 801b4e4:	468a      	mov	sl, r1
 801b4e6:	e777      	b.n	801b3d8 <_strtod_l+0xaa8>
 801b4e8:	4602      	mov	r2, r0
 801b4ea:	460b      	mov	r3, r1
 801b4ec:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 801b4f0:	e7e3      	b.n	801b4ba <_strtod_l+0xb8a>
 801b4f2:	a30d      	add	r3, pc, #52	; (adr r3, 801b528 <_strtod_l+0xbf8>)
 801b4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4f8:	f7e5 faa0 	bl	8000a3c <__aeabi_dcmplt>
 801b4fc:	e79f      	b.n	801b43e <_strtod_l+0xb0e>
 801b4fe:	2300      	movs	r3, #0
 801b500:	930d      	str	r3, [sp, #52]	; 0x34
 801b502:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b504:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801b506:	6013      	str	r3, [r2, #0]
 801b508:	f7ff ba55 	b.w	801a9b6 <_strtod_l+0x86>
 801b50c:	2b65      	cmp	r3, #101	; 0x65
 801b50e:	f04f 0200 	mov.w	r2, #0
 801b512:	f43f ab42 	beq.w	801ab9a <_strtod_l+0x26a>
 801b516:	2101      	movs	r1, #1
 801b518:	4614      	mov	r4, r2
 801b51a:	9105      	str	r1, [sp, #20]
 801b51c:	f7ff babf 	b.w	801aa9e <_strtod_l+0x16e>
 801b520:	ffc00000 	.word	0xffc00000
 801b524:	41dfffff 	.word	0x41dfffff
 801b528:	94a03595 	.word	0x94a03595
 801b52c:	3fcfffff 	.word	0x3fcfffff

0801b530 <_strtod_r>:
 801b530:	4b05      	ldr	r3, [pc, #20]	; (801b548 <_strtod_r+0x18>)
 801b532:	b410      	push	{r4}
 801b534:	681b      	ldr	r3, [r3, #0]
 801b536:	4c05      	ldr	r4, [pc, #20]	; (801b54c <_strtod_r+0x1c>)
 801b538:	6a1b      	ldr	r3, [r3, #32]
 801b53a:	2b00      	cmp	r3, #0
 801b53c:	bf08      	it	eq
 801b53e:	4623      	moveq	r3, r4
 801b540:	bc10      	pop	{r4}
 801b542:	f7ff b9f5 	b.w	801a930 <_strtod_l>
 801b546:	bf00      	nop
 801b548:	2000001c 	.word	0x2000001c
 801b54c:	20000080 	.word	0x20000080

0801b550 <_strtol_l.isra.0>:
 801b550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b554:	4680      	mov	r8, r0
 801b556:	4689      	mov	r9, r1
 801b558:	4692      	mov	sl, r2
 801b55a:	461e      	mov	r6, r3
 801b55c:	460f      	mov	r7, r1
 801b55e:	463d      	mov	r5, r7
 801b560:	9808      	ldr	r0, [sp, #32]
 801b562:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b566:	f001 fc25 	bl	801cdb4 <__locale_ctype_ptr_l>
 801b56a:	4420      	add	r0, r4
 801b56c:	7843      	ldrb	r3, [r0, #1]
 801b56e:	f013 0308 	ands.w	r3, r3, #8
 801b572:	d132      	bne.n	801b5da <_strtol_l.isra.0+0x8a>
 801b574:	2c2d      	cmp	r4, #45	; 0x2d
 801b576:	d132      	bne.n	801b5de <_strtol_l.isra.0+0x8e>
 801b578:	2201      	movs	r2, #1
 801b57a:	787c      	ldrb	r4, [r7, #1]
 801b57c:	1cbd      	adds	r5, r7, #2
 801b57e:	2e00      	cmp	r6, #0
 801b580:	d05d      	beq.n	801b63e <_strtol_l.isra.0+0xee>
 801b582:	2e10      	cmp	r6, #16
 801b584:	d109      	bne.n	801b59a <_strtol_l.isra.0+0x4a>
 801b586:	2c30      	cmp	r4, #48	; 0x30
 801b588:	d107      	bne.n	801b59a <_strtol_l.isra.0+0x4a>
 801b58a:	782b      	ldrb	r3, [r5, #0]
 801b58c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801b590:	2b58      	cmp	r3, #88	; 0x58
 801b592:	d14f      	bne.n	801b634 <_strtol_l.isra.0+0xe4>
 801b594:	2610      	movs	r6, #16
 801b596:	786c      	ldrb	r4, [r5, #1]
 801b598:	3502      	adds	r5, #2
 801b59a:	2a00      	cmp	r2, #0
 801b59c:	bf14      	ite	ne
 801b59e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801b5a2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801b5a6:	2700      	movs	r7, #0
 801b5a8:	fbb1 fcf6 	udiv	ip, r1, r6
 801b5ac:	4638      	mov	r0, r7
 801b5ae:	fb06 1e1c 	mls	lr, r6, ip, r1
 801b5b2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801b5b6:	2b09      	cmp	r3, #9
 801b5b8:	d817      	bhi.n	801b5ea <_strtol_l.isra.0+0x9a>
 801b5ba:	461c      	mov	r4, r3
 801b5bc:	42a6      	cmp	r6, r4
 801b5be:	dd23      	ble.n	801b608 <_strtol_l.isra.0+0xb8>
 801b5c0:	1c7b      	adds	r3, r7, #1
 801b5c2:	d007      	beq.n	801b5d4 <_strtol_l.isra.0+0x84>
 801b5c4:	4584      	cmp	ip, r0
 801b5c6:	d31c      	bcc.n	801b602 <_strtol_l.isra.0+0xb2>
 801b5c8:	d101      	bne.n	801b5ce <_strtol_l.isra.0+0x7e>
 801b5ca:	45a6      	cmp	lr, r4
 801b5cc:	db19      	blt.n	801b602 <_strtol_l.isra.0+0xb2>
 801b5ce:	2701      	movs	r7, #1
 801b5d0:	fb00 4006 	mla	r0, r0, r6, r4
 801b5d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b5d8:	e7eb      	b.n	801b5b2 <_strtol_l.isra.0+0x62>
 801b5da:	462f      	mov	r7, r5
 801b5dc:	e7bf      	b.n	801b55e <_strtol_l.isra.0+0xe>
 801b5de:	2c2b      	cmp	r4, #43	; 0x2b
 801b5e0:	bf04      	itt	eq
 801b5e2:	1cbd      	addeq	r5, r7, #2
 801b5e4:	787c      	ldrbeq	r4, [r7, #1]
 801b5e6:	461a      	mov	r2, r3
 801b5e8:	e7c9      	b.n	801b57e <_strtol_l.isra.0+0x2e>
 801b5ea:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801b5ee:	2b19      	cmp	r3, #25
 801b5f0:	d801      	bhi.n	801b5f6 <_strtol_l.isra.0+0xa6>
 801b5f2:	3c37      	subs	r4, #55	; 0x37
 801b5f4:	e7e2      	b.n	801b5bc <_strtol_l.isra.0+0x6c>
 801b5f6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801b5fa:	2b19      	cmp	r3, #25
 801b5fc:	d804      	bhi.n	801b608 <_strtol_l.isra.0+0xb8>
 801b5fe:	3c57      	subs	r4, #87	; 0x57
 801b600:	e7dc      	b.n	801b5bc <_strtol_l.isra.0+0x6c>
 801b602:	f04f 37ff 	mov.w	r7, #4294967295
 801b606:	e7e5      	b.n	801b5d4 <_strtol_l.isra.0+0x84>
 801b608:	1c7b      	adds	r3, r7, #1
 801b60a:	d108      	bne.n	801b61e <_strtol_l.isra.0+0xce>
 801b60c:	2322      	movs	r3, #34	; 0x22
 801b60e:	4608      	mov	r0, r1
 801b610:	f8c8 3000 	str.w	r3, [r8]
 801b614:	f1ba 0f00 	cmp.w	sl, #0
 801b618:	d107      	bne.n	801b62a <_strtol_l.isra.0+0xda>
 801b61a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b61e:	b102      	cbz	r2, 801b622 <_strtol_l.isra.0+0xd2>
 801b620:	4240      	negs	r0, r0
 801b622:	f1ba 0f00 	cmp.w	sl, #0
 801b626:	d0f8      	beq.n	801b61a <_strtol_l.isra.0+0xca>
 801b628:	b10f      	cbz	r7, 801b62e <_strtol_l.isra.0+0xde>
 801b62a:	f105 39ff 	add.w	r9, r5, #4294967295
 801b62e:	f8ca 9000 	str.w	r9, [sl]
 801b632:	e7f2      	b.n	801b61a <_strtol_l.isra.0+0xca>
 801b634:	2430      	movs	r4, #48	; 0x30
 801b636:	2e00      	cmp	r6, #0
 801b638:	d1af      	bne.n	801b59a <_strtol_l.isra.0+0x4a>
 801b63a:	2608      	movs	r6, #8
 801b63c:	e7ad      	b.n	801b59a <_strtol_l.isra.0+0x4a>
 801b63e:	2c30      	cmp	r4, #48	; 0x30
 801b640:	d0a3      	beq.n	801b58a <_strtol_l.isra.0+0x3a>
 801b642:	260a      	movs	r6, #10
 801b644:	e7a9      	b.n	801b59a <_strtol_l.isra.0+0x4a>
	...

0801b648 <_strtol_r>:
 801b648:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b64a:	4c06      	ldr	r4, [pc, #24]	; (801b664 <_strtol_r+0x1c>)
 801b64c:	4d06      	ldr	r5, [pc, #24]	; (801b668 <_strtol_r+0x20>)
 801b64e:	6824      	ldr	r4, [r4, #0]
 801b650:	6a24      	ldr	r4, [r4, #32]
 801b652:	2c00      	cmp	r4, #0
 801b654:	bf08      	it	eq
 801b656:	462c      	moveq	r4, r5
 801b658:	9400      	str	r4, [sp, #0]
 801b65a:	f7ff ff79 	bl	801b550 <_strtol_l.isra.0>
 801b65e:	b003      	add	sp, #12
 801b660:	bd30      	pop	{r4, r5, pc}
 801b662:	bf00      	nop
 801b664:	2000001c 	.word	0x2000001c
 801b668:	20000080 	.word	0x20000080

0801b66c <__swbuf_r>:
 801b66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b66e:	460e      	mov	r6, r1
 801b670:	4614      	mov	r4, r2
 801b672:	4605      	mov	r5, r0
 801b674:	b118      	cbz	r0, 801b67e <__swbuf_r+0x12>
 801b676:	6983      	ldr	r3, [r0, #24]
 801b678:	b90b      	cbnz	r3, 801b67e <__swbuf_r+0x12>
 801b67a:	f000 ffe9 	bl	801c650 <__sinit>
 801b67e:	4b21      	ldr	r3, [pc, #132]	; (801b704 <__swbuf_r+0x98>)
 801b680:	429c      	cmp	r4, r3
 801b682:	d12a      	bne.n	801b6da <__swbuf_r+0x6e>
 801b684:	686c      	ldr	r4, [r5, #4]
 801b686:	69a3      	ldr	r3, [r4, #24]
 801b688:	60a3      	str	r3, [r4, #8]
 801b68a:	89a3      	ldrh	r3, [r4, #12]
 801b68c:	071a      	lsls	r2, r3, #28
 801b68e:	d52e      	bpl.n	801b6ee <__swbuf_r+0x82>
 801b690:	6923      	ldr	r3, [r4, #16]
 801b692:	b363      	cbz	r3, 801b6ee <__swbuf_r+0x82>
 801b694:	6923      	ldr	r3, [r4, #16]
 801b696:	6820      	ldr	r0, [r4, #0]
 801b698:	b2f6      	uxtb	r6, r6
 801b69a:	1ac0      	subs	r0, r0, r3
 801b69c:	6963      	ldr	r3, [r4, #20]
 801b69e:	4637      	mov	r7, r6
 801b6a0:	4283      	cmp	r3, r0
 801b6a2:	dc04      	bgt.n	801b6ae <__swbuf_r+0x42>
 801b6a4:	4621      	mov	r1, r4
 801b6a6:	4628      	mov	r0, r5
 801b6a8:	f000 ff68 	bl	801c57c <_fflush_r>
 801b6ac:	bb28      	cbnz	r0, 801b6fa <__swbuf_r+0x8e>
 801b6ae:	68a3      	ldr	r3, [r4, #8]
 801b6b0:	3001      	adds	r0, #1
 801b6b2:	3b01      	subs	r3, #1
 801b6b4:	60a3      	str	r3, [r4, #8]
 801b6b6:	6823      	ldr	r3, [r4, #0]
 801b6b8:	1c5a      	adds	r2, r3, #1
 801b6ba:	6022      	str	r2, [r4, #0]
 801b6bc:	701e      	strb	r6, [r3, #0]
 801b6be:	6963      	ldr	r3, [r4, #20]
 801b6c0:	4283      	cmp	r3, r0
 801b6c2:	d004      	beq.n	801b6ce <__swbuf_r+0x62>
 801b6c4:	89a3      	ldrh	r3, [r4, #12]
 801b6c6:	07db      	lsls	r3, r3, #31
 801b6c8:	d519      	bpl.n	801b6fe <__swbuf_r+0x92>
 801b6ca:	2e0a      	cmp	r6, #10
 801b6cc:	d117      	bne.n	801b6fe <__swbuf_r+0x92>
 801b6ce:	4621      	mov	r1, r4
 801b6d0:	4628      	mov	r0, r5
 801b6d2:	f000 ff53 	bl	801c57c <_fflush_r>
 801b6d6:	b190      	cbz	r0, 801b6fe <__swbuf_r+0x92>
 801b6d8:	e00f      	b.n	801b6fa <__swbuf_r+0x8e>
 801b6da:	4b0b      	ldr	r3, [pc, #44]	; (801b708 <__swbuf_r+0x9c>)
 801b6dc:	429c      	cmp	r4, r3
 801b6de:	d101      	bne.n	801b6e4 <__swbuf_r+0x78>
 801b6e0:	68ac      	ldr	r4, [r5, #8]
 801b6e2:	e7d0      	b.n	801b686 <__swbuf_r+0x1a>
 801b6e4:	4b09      	ldr	r3, [pc, #36]	; (801b70c <__swbuf_r+0xa0>)
 801b6e6:	429c      	cmp	r4, r3
 801b6e8:	bf08      	it	eq
 801b6ea:	68ec      	ldreq	r4, [r5, #12]
 801b6ec:	e7cb      	b.n	801b686 <__swbuf_r+0x1a>
 801b6ee:	4621      	mov	r1, r4
 801b6f0:	4628      	mov	r0, r5
 801b6f2:	f000 f80d 	bl	801b710 <__swsetup_r>
 801b6f6:	2800      	cmp	r0, #0
 801b6f8:	d0cc      	beq.n	801b694 <__swbuf_r+0x28>
 801b6fa:	f04f 37ff 	mov.w	r7, #4294967295
 801b6fe:	4638      	mov	r0, r7
 801b700:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b702:	bf00      	nop
 801b704:	08021df8 	.word	0x08021df8
 801b708:	08021e18 	.word	0x08021e18
 801b70c:	08021dd8 	.word	0x08021dd8

0801b710 <__swsetup_r>:
 801b710:	4b32      	ldr	r3, [pc, #200]	; (801b7dc <__swsetup_r+0xcc>)
 801b712:	b570      	push	{r4, r5, r6, lr}
 801b714:	681d      	ldr	r5, [r3, #0]
 801b716:	4606      	mov	r6, r0
 801b718:	460c      	mov	r4, r1
 801b71a:	b125      	cbz	r5, 801b726 <__swsetup_r+0x16>
 801b71c:	69ab      	ldr	r3, [r5, #24]
 801b71e:	b913      	cbnz	r3, 801b726 <__swsetup_r+0x16>
 801b720:	4628      	mov	r0, r5
 801b722:	f000 ff95 	bl	801c650 <__sinit>
 801b726:	4b2e      	ldr	r3, [pc, #184]	; (801b7e0 <__swsetup_r+0xd0>)
 801b728:	429c      	cmp	r4, r3
 801b72a:	d10f      	bne.n	801b74c <__swsetup_r+0x3c>
 801b72c:	686c      	ldr	r4, [r5, #4]
 801b72e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b732:	b29a      	uxth	r2, r3
 801b734:	0715      	lsls	r5, r2, #28
 801b736:	d42c      	bmi.n	801b792 <__swsetup_r+0x82>
 801b738:	06d0      	lsls	r0, r2, #27
 801b73a:	d411      	bmi.n	801b760 <__swsetup_r+0x50>
 801b73c:	2209      	movs	r2, #9
 801b73e:	6032      	str	r2, [r6, #0]
 801b740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b744:	81a3      	strh	r3, [r4, #12]
 801b746:	f04f 30ff 	mov.w	r0, #4294967295
 801b74a:	e03e      	b.n	801b7ca <__swsetup_r+0xba>
 801b74c:	4b25      	ldr	r3, [pc, #148]	; (801b7e4 <__swsetup_r+0xd4>)
 801b74e:	429c      	cmp	r4, r3
 801b750:	d101      	bne.n	801b756 <__swsetup_r+0x46>
 801b752:	68ac      	ldr	r4, [r5, #8]
 801b754:	e7eb      	b.n	801b72e <__swsetup_r+0x1e>
 801b756:	4b24      	ldr	r3, [pc, #144]	; (801b7e8 <__swsetup_r+0xd8>)
 801b758:	429c      	cmp	r4, r3
 801b75a:	bf08      	it	eq
 801b75c:	68ec      	ldreq	r4, [r5, #12]
 801b75e:	e7e6      	b.n	801b72e <__swsetup_r+0x1e>
 801b760:	0751      	lsls	r1, r2, #29
 801b762:	d512      	bpl.n	801b78a <__swsetup_r+0x7a>
 801b764:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b766:	b141      	cbz	r1, 801b77a <__swsetup_r+0x6a>
 801b768:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b76c:	4299      	cmp	r1, r3
 801b76e:	d002      	beq.n	801b776 <__swsetup_r+0x66>
 801b770:	4630      	mov	r0, r6
 801b772:	f001 ffc5 	bl	801d700 <_free_r>
 801b776:	2300      	movs	r3, #0
 801b778:	6363      	str	r3, [r4, #52]	; 0x34
 801b77a:	89a3      	ldrh	r3, [r4, #12]
 801b77c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b780:	81a3      	strh	r3, [r4, #12]
 801b782:	2300      	movs	r3, #0
 801b784:	6063      	str	r3, [r4, #4]
 801b786:	6923      	ldr	r3, [r4, #16]
 801b788:	6023      	str	r3, [r4, #0]
 801b78a:	89a3      	ldrh	r3, [r4, #12]
 801b78c:	f043 0308 	orr.w	r3, r3, #8
 801b790:	81a3      	strh	r3, [r4, #12]
 801b792:	6923      	ldr	r3, [r4, #16]
 801b794:	b94b      	cbnz	r3, 801b7aa <__swsetup_r+0x9a>
 801b796:	89a3      	ldrh	r3, [r4, #12]
 801b798:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b79c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b7a0:	d003      	beq.n	801b7aa <__swsetup_r+0x9a>
 801b7a2:	4621      	mov	r1, r4
 801b7a4:	4630      	mov	r0, r6
 801b7a6:	f001 fb3d 	bl	801ce24 <__smakebuf_r>
 801b7aa:	89a2      	ldrh	r2, [r4, #12]
 801b7ac:	f012 0301 	ands.w	r3, r2, #1
 801b7b0:	d00c      	beq.n	801b7cc <__swsetup_r+0xbc>
 801b7b2:	2300      	movs	r3, #0
 801b7b4:	60a3      	str	r3, [r4, #8]
 801b7b6:	6963      	ldr	r3, [r4, #20]
 801b7b8:	425b      	negs	r3, r3
 801b7ba:	61a3      	str	r3, [r4, #24]
 801b7bc:	6923      	ldr	r3, [r4, #16]
 801b7be:	b953      	cbnz	r3, 801b7d6 <__swsetup_r+0xc6>
 801b7c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b7c4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801b7c8:	d1ba      	bne.n	801b740 <__swsetup_r+0x30>
 801b7ca:	bd70      	pop	{r4, r5, r6, pc}
 801b7cc:	0792      	lsls	r2, r2, #30
 801b7ce:	bf58      	it	pl
 801b7d0:	6963      	ldrpl	r3, [r4, #20]
 801b7d2:	60a3      	str	r3, [r4, #8]
 801b7d4:	e7f2      	b.n	801b7bc <__swsetup_r+0xac>
 801b7d6:	2000      	movs	r0, #0
 801b7d8:	e7f7      	b.n	801b7ca <__swsetup_r+0xba>
 801b7da:	bf00      	nop
 801b7dc:	2000001c 	.word	0x2000001c
 801b7e0:	08021df8 	.word	0x08021df8
 801b7e4:	08021e18 	.word	0x08021e18
 801b7e8:	08021dd8 	.word	0x08021dd8

0801b7ec <quorem>:
 801b7ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7f0:	6903      	ldr	r3, [r0, #16]
 801b7f2:	690c      	ldr	r4, [r1, #16]
 801b7f4:	4680      	mov	r8, r0
 801b7f6:	42a3      	cmp	r3, r4
 801b7f8:	f2c0 8084 	blt.w	801b904 <quorem+0x118>
 801b7fc:	3c01      	subs	r4, #1
 801b7fe:	f101 0714 	add.w	r7, r1, #20
 801b802:	f100 0614 	add.w	r6, r0, #20
 801b806:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 801b80a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801b80e:	3501      	adds	r5, #1
 801b810:	fbb0 f5f5 	udiv	r5, r0, r5
 801b814:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801b818:	eb06 030c 	add.w	r3, r6, ip
 801b81c:	eb07 090c 	add.w	r9, r7, ip
 801b820:	9301      	str	r3, [sp, #4]
 801b822:	b39d      	cbz	r5, 801b88c <quorem+0xa0>
 801b824:	f04f 0a00 	mov.w	sl, #0
 801b828:	4638      	mov	r0, r7
 801b82a:	46b6      	mov	lr, r6
 801b82c:	46d3      	mov	fp, sl
 801b82e:	f850 2b04 	ldr.w	r2, [r0], #4
 801b832:	b293      	uxth	r3, r2
 801b834:	fb05 a303 	mla	r3, r5, r3, sl
 801b838:	0c12      	lsrs	r2, r2, #16
 801b83a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801b83e:	fb05 a202 	mla	r2, r5, r2, sl
 801b842:	b29b      	uxth	r3, r3
 801b844:	ebab 0303 	sub.w	r3, fp, r3
 801b848:	f8de b000 	ldr.w	fp, [lr]
 801b84c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801b850:	fa1f fb8b 	uxth.w	fp, fp
 801b854:	445b      	add	r3, fp
 801b856:	fa1f fb82 	uxth.w	fp, r2
 801b85a:	f8de 2000 	ldr.w	r2, [lr]
 801b85e:	4581      	cmp	r9, r0
 801b860:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 801b864:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b868:	b29b      	uxth	r3, r3
 801b86a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b86e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801b872:	f84e 3b04 	str.w	r3, [lr], #4
 801b876:	d2da      	bcs.n	801b82e <quorem+0x42>
 801b878:	f856 300c 	ldr.w	r3, [r6, ip]
 801b87c:	b933      	cbnz	r3, 801b88c <quorem+0xa0>
 801b87e:	9b01      	ldr	r3, [sp, #4]
 801b880:	3b04      	subs	r3, #4
 801b882:	429e      	cmp	r6, r3
 801b884:	461a      	mov	r2, r3
 801b886:	d331      	bcc.n	801b8ec <quorem+0x100>
 801b888:	f8c8 4010 	str.w	r4, [r8, #16]
 801b88c:	4640      	mov	r0, r8
 801b88e:	f001 fd83 	bl	801d398 <__mcmp>
 801b892:	2800      	cmp	r0, #0
 801b894:	db26      	blt.n	801b8e4 <quorem+0xf8>
 801b896:	4630      	mov	r0, r6
 801b898:	f04f 0c00 	mov.w	ip, #0
 801b89c:	3501      	adds	r5, #1
 801b89e:	f857 1b04 	ldr.w	r1, [r7], #4
 801b8a2:	f8d0 e000 	ldr.w	lr, [r0]
 801b8a6:	b28b      	uxth	r3, r1
 801b8a8:	ebac 0303 	sub.w	r3, ip, r3
 801b8ac:	fa1f f28e 	uxth.w	r2, lr
 801b8b0:	4413      	add	r3, r2
 801b8b2:	0c0a      	lsrs	r2, r1, #16
 801b8b4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801b8b8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b8bc:	b29b      	uxth	r3, r3
 801b8be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b8c2:	45b9      	cmp	r9, r7
 801b8c4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801b8c8:	f840 3b04 	str.w	r3, [r0], #4
 801b8cc:	d2e7      	bcs.n	801b89e <quorem+0xb2>
 801b8ce:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801b8d2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 801b8d6:	b92a      	cbnz	r2, 801b8e4 <quorem+0xf8>
 801b8d8:	3b04      	subs	r3, #4
 801b8da:	429e      	cmp	r6, r3
 801b8dc:	461a      	mov	r2, r3
 801b8de:	d30b      	bcc.n	801b8f8 <quorem+0x10c>
 801b8e0:	f8c8 4010 	str.w	r4, [r8, #16]
 801b8e4:	4628      	mov	r0, r5
 801b8e6:	b003      	add	sp, #12
 801b8e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b8ec:	6812      	ldr	r2, [r2, #0]
 801b8ee:	3b04      	subs	r3, #4
 801b8f0:	2a00      	cmp	r2, #0
 801b8f2:	d1c9      	bne.n	801b888 <quorem+0x9c>
 801b8f4:	3c01      	subs	r4, #1
 801b8f6:	e7c4      	b.n	801b882 <quorem+0x96>
 801b8f8:	6812      	ldr	r2, [r2, #0]
 801b8fa:	3b04      	subs	r3, #4
 801b8fc:	2a00      	cmp	r2, #0
 801b8fe:	d1ef      	bne.n	801b8e0 <quorem+0xf4>
 801b900:	3c01      	subs	r4, #1
 801b902:	e7ea      	b.n	801b8da <quorem+0xee>
 801b904:	2000      	movs	r0, #0
 801b906:	e7ee      	b.n	801b8e6 <quorem+0xfa>

0801b908 <_dtoa_r>:
 801b908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b90c:	4616      	mov	r6, r2
 801b90e:	461f      	mov	r7, r3
 801b910:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801b912:	b095      	sub	sp, #84	; 0x54
 801b914:	4604      	mov	r4, r0
 801b916:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 801b91a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801b91e:	b93d      	cbnz	r5, 801b930 <_dtoa_r+0x28>
 801b920:	2010      	movs	r0, #16
 801b922:	f001 fabf 	bl	801cea4 <malloc>
 801b926:	6260      	str	r0, [r4, #36]	; 0x24
 801b928:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801b92c:	6005      	str	r5, [r0, #0]
 801b92e:	60c5      	str	r5, [r0, #12]
 801b930:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b932:	6819      	ldr	r1, [r3, #0]
 801b934:	b151      	cbz	r1, 801b94c <_dtoa_r+0x44>
 801b936:	685a      	ldr	r2, [r3, #4]
 801b938:	2301      	movs	r3, #1
 801b93a:	4093      	lsls	r3, r2
 801b93c:	604a      	str	r2, [r1, #4]
 801b93e:	608b      	str	r3, [r1, #8]
 801b940:	4620      	mov	r0, r4
 801b942:	f001 fb0b 	bl	801cf5c <_Bfree>
 801b946:	2200      	movs	r2, #0
 801b948:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b94a:	601a      	str	r2, [r3, #0]
 801b94c:	1e3b      	subs	r3, r7, #0
 801b94e:	bfaf      	iteee	ge
 801b950:	2300      	movge	r3, #0
 801b952:	2201      	movlt	r2, #1
 801b954:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801b958:	9303      	strlt	r3, [sp, #12]
 801b95a:	bfac      	ite	ge
 801b95c:	f8c8 3000 	strge.w	r3, [r8]
 801b960:	f8c8 2000 	strlt.w	r2, [r8]
 801b964:	4bae      	ldr	r3, [pc, #696]	; (801bc20 <_dtoa_r+0x318>)
 801b966:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801b96a:	ea33 0308 	bics.w	r3, r3, r8
 801b96e:	d11b      	bne.n	801b9a8 <_dtoa_r+0xa0>
 801b970:	f242 730f 	movw	r3, #9999	; 0x270f
 801b974:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801b976:	6013      	str	r3, [r2, #0]
 801b978:	9b02      	ldr	r3, [sp, #8]
 801b97a:	b923      	cbnz	r3, 801b986 <_dtoa_r+0x7e>
 801b97c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801b980:	2800      	cmp	r0, #0
 801b982:	f000 8545 	beq.w	801c410 <_dtoa_r+0xb08>
 801b986:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801b988:	b953      	cbnz	r3, 801b9a0 <_dtoa_r+0x98>
 801b98a:	4ba6      	ldr	r3, [pc, #664]	; (801bc24 <_dtoa_r+0x31c>)
 801b98c:	e021      	b.n	801b9d2 <_dtoa_r+0xca>
 801b98e:	4ba6      	ldr	r3, [pc, #664]	; (801bc28 <_dtoa_r+0x320>)
 801b990:	9306      	str	r3, [sp, #24]
 801b992:	3308      	adds	r3, #8
 801b994:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801b996:	6013      	str	r3, [r2, #0]
 801b998:	9806      	ldr	r0, [sp, #24]
 801b99a:	b015      	add	sp, #84	; 0x54
 801b99c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b9a0:	4ba0      	ldr	r3, [pc, #640]	; (801bc24 <_dtoa_r+0x31c>)
 801b9a2:	9306      	str	r3, [sp, #24]
 801b9a4:	3303      	adds	r3, #3
 801b9a6:	e7f5      	b.n	801b994 <_dtoa_r+0x8c>
 801b9a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801b9ac:	2200      	movs	r2, #0
 801b9ae:	2300      	movs	r3, #0
 801b9b0:	4630      	mov	r0, r6
 801b9b2:	4639      	mov	r1, r7
 801b9b4:	f7e5 f838 	bl	8000a28 <__aeabi_dcmpeq>
 801b9b8:	4682      	mov	sl, r0
 801b9ba:	b160      	cbz	r0, 801b9d6 <_dtoa_r+0xce>
 801b9bc:	2301      	movs	r3, #1
 801b9be:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801b9c0:	6013      	str	r3, [r2, #0]
 801b9c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801b9c4:	2b00      	cmp	r3, #0
 801b9c6:	f000 8520 	beq.w	801c40a <_dtoa_r+0xb02>
 801b9ca:	4b98      	ldr	r3, [pc, #608]	; (801bc2c <_dtoa_r+0x324>)
 801b9cc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801b9ce:	6013      	str	r3, [r2, #0]
 801b9d0:	3b01      	subs	r3, #1
 801b9d2:	9306      	str	r3, [sp, #24]
 801b9d4:	e7e0      	b.n	801b998 <_dtoa_r+0x90>
 801b9d6:	ab12      	add	r3, sp, #72	; 0x48
 801b9d8:	9301      	str	r3, [sp, #4]
 801b9da:	ab13      	add	r3, sp, #76	; 0x4c
 801b9dc:	9300      	str	r3, [sp, #0]
 801b9de:	4632      	mov	r2, r6
 801b9e0:	463b      	mov	r3, r7
 801b9e2:	4620      	mov	r0, r4
 801b9e4:	f001 fdc6 	bl	801d574 <__d2b>
 801b9e8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801b9ec:	4683      	mov	fp, r0
 801b9ee:	2d00      	cmp	r5, #0
 801b9f0:	d07d      	beq.n	801baee <_dtoa_r+0x1e6>
 801b9f2:	46b0      	mov	r8, r6
 801b9f4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801b9f8:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 801b9fc:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 801ba00:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801ba04:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 801ba08:	2200      	movs	r2, #0
 801ba0a:	4b89      	ldr	r3, [pc, #548]	; (801bc30 <_dtoa_r+0x328>)
 801ba0c:	4640      	mov	r0, r8
 801ba0e:	4649      	mov	r1, r9
 801ba10:	f7e4 fbea 	bl	80001e8 <__aeabi_dsub>
 801ba14:	a37c      	add	r3, pc, #496	; (adr r3, 801bc08 <_dtoa_r+0x300>)
 801ba16:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba1a:	f7e4 fd9d 	bl	8000558 <__aeabi_dmul>
 801ba1e:	a37c      	add	r3, pc, #496	; (adr r3, 801bc10 <_dtoa_r+0x308>)
 801ba20:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba24:	f7e4 fbe2 	bl	80001ec <__adddf3>
 801ba28:	4606      	mov	r6, r0
 801ba2a:	4628      	mov	r0, r5
 801ba2c:	460f      	mov	r7, r1
 801ba2e:	f7e4 fd29 	bl	8000484 <__aeabi_i2d>
 801ba32:	a379      	add	r3, pc, #484	; (adr r3, 801bc18 <_dtoa_r+0x310>)
 801ba34:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba38:	f7e4 fd8e 	bl	8000558 <__aeabi_dmul>
 801ba3c:	4602      	mov	r2, r0
 801ba3e:	460b      	mov	r3, r1
 801ba40:	4630      	mov	r0, r6
 801ba42:	4639      	mov	r1, r7
 801ba44:	f7e4 fbd2 	bl	80001ec <__adddf3>
 801ba48:	4606      	mov	r6, r0
 801ba4a:	460f      	mov	r7, r1
 801ba4c:	f7e5 f834 	bl	8000ab8 <__aeabi_d2iz>
 801ba50:	2200      	movs	r2, #0
 801ba52:	4682      	mov	sl, r0
 801ba54:	2300      	movs	r3, #0
 801ba56:	4630      	mov	r0, r6
 801ba58:	4639      	mov	r1, r7
 801ba5a:	f7e4 ffef 	bl	8000a3c <__aeabi_dcmplt>
 801ba5e:	b148      	cbz	r0, 801ba74 <_dtoa_r+0x16c>
 801ba60:	4650      	mov	r0, sl
 801ba62:	f7e4 fd0f 	bl	8000484 <__aeabi_i2d>
 801ba66:	4632      	mov	r2, r6
 801ba68:	463b      	mov	r3, r7
 801ba6a:	f7e4 ffdd 	bl	8000a28 <__aeabi_dcmpeq>
 801ba6e:	b908      	cbnz	r0, 801ba74 <_dtoa_r+0x16c>
 801ba70:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ba74:	f1ba 0f16 	cmp.w	sl, #22
 801ba78:	d85a      	bhi.n	801bb30 <_dtoa_r+0x228>
 801ba7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ba7e:	496d      	ldr	r1, [pc, #436]	; (801bc34 <_dtoa_r+0x32c>)
 801ba80:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801ba84:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ba88:	f7e4 fff6 	bl	8000a78 <__aeabi_dcmpgt>
 801ba8c:	2800      	cmp	r0, #0
 801ba8e:	d051      	beq.n	801bb34 <_dtoa_r+0x22c>
 801ba90:	2300      	movs	r3, #0
 801ba92:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ba96:	930d      	str	r3, [sp, #52]	; 0x34
 801ba98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ba9a:	1b5d      	subs	r5, r3, r5
 801ba9c:	1e6b      	subs	r3, r5, #1
 801ba9e:	9307      	str	r3, [sp, #28]
 801baa0:	bf43      	ittte	mi
 801baa2:	2300      	movmi	r3, #0
 801baa4:	f1c5 0901 	rsbmi	r9, r5, #1
 801baa8:	9307      	strmi	r3, [sp, #28]
 801baaa:	f04f 0900 	movpl.w	r9, #0
 801baae:	f1ba 0f00 	cmp.w	sl, #0
 801bab2:	db41      	blt.n	801bb38 <_dtoa_r+0x230>
 801bab4:	9b07      	ldr	r3, [sp, #28]
 801bab6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 801baba:	4453      	add	r3, sl
 801babc:	9307      	str	r3, [sp, #28]
 801babe:	2300      	movs	r3, #0
 801bac0:	9308      	str	r3, [sp, #32]
 801bac2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801bac4:	2b09      	cmp	r3, #9
 801bac6:	f200 808f 	bhi.w	801bbe8 <_dtoa_r+0x2e0>
 801baca:	2b05      	cmp	r3, #5
 801bacc:	bfc4      	itt	gt
 801bace:	3b04      	subgt	r3, #4
 801bad0:	931e      	strgt	r3, [sp, #120]	; 0x78
 801bad2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801bad4:	bfc8      	it	gt
 801bad6:	2500      	movgt	r5, #0
 801bad8:	f1a3 0302 	sub.w	r3, r3, #2
 801badc:	bfd8      	it	le
 801bade:	2501      	movle	r5, #1
 801bae0:	2b03      	cmp	r3, #3
 801bae2:	f200 808d 	bhi.w	801bc00 <_dtoa_r+0x2f8>
 801bae6:	e8df f003 	tbb	[pc, r3]
 801baea:	7d7b      	.short	0x7d7b
 801baec:	6f2f      	.short	0x6f2f
 801baee:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801baf2:	441d      	add	r5, r3
 801baf4:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801baf8:	2820      	cmp	r0, #32
 801bafa:	dd13      	ble.n	801bb24 <_dtoa_r+0x21c>
 801bafc:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801bb00:	9b02      	ldr	r3, [sp, #8]
 801bb02:	fa08 f800 	lsl.w	r8, r8, r0
 801bb06:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801bb0a:	fa23 f000 	lsr.w	r0, r3, r0
 801bb0e:	ea48 0000 	orr.w	r0, r8, r0
 801bb12:	f7e4 fca7 	bl	8000464 <__aeabi_ui2d>
 801bb16:	2301      	movs	r3, #1
 801bb18:	4680      	mov	r8, r0
 801bb1a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 801bb1e:	3d01      	subs	r5, #1
 801bb20:	9310      	str	r3, [sp, #64]	; 0x40
 801bb22:	e771      	b.n	801ba08 <_dtoa_r+0x100>
 801bb24:	9b02      	ldr	r3, [sp, #8]
 801bb26:	f1c0 0020 	rsb	r0, r0, #32
 801bb2a:	fa03 f000 	lsl.w	r0, r3, r0
 801bb2e:	e7f0      	b.n	801bb12 <_dtoa_r+0x20a>
 801bb30:	2301      	movs	r3, #1
 801bb32:	e7b0      	b.n	801ba96 <_dtoa_r+0x18e>
 801bb34:	900d      	str	r0, [sp, #52]	; 0x34
 801bb36:	e7af      	b.n	801ba98 <_dtoa_r+0x190>
 801bb38:	f1ca 0300 	rsb	r3, sl, #0
 801bb3c:	9308      	str	r3, [sp, #32]
 801bb3e:	2300      	movs	r3, #0
 801bb40:	eba9 090a 	sub.w	r9, r9, sl
 801bb44:	930c      	str	r3, [sp, #48]	; 0x30
 801bb46:	e7bc      	b.n	801bac2 <_dtoa_r+0x1ba>
 801bb48:	2301      	movs	r3, #1
 801bb4a:	9309      	str	r3, [sp, #36]	; 0x24
 801bb4c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801bb4e:	2b00      	cmp	r3, #0
 801bb50:	dd74      	ble.n	801bc3c <_dtoa_r+0x334>
 801bb52:	4698      	mov	r8, r3
 801bb54:	9304      	str	r3, [sp, #16]
 801bb56:	2200      	movs	r2, #0
 801bb58:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801bb5a:	6072      	str	r2, [r6, #4]
 801bb5c:	2204      	movs	r2, #4
 801bb5e:	f102 0014 	add.w	r0, r2, #20
 801bb62:	4298      	cmp	r0, r3
 801bb64:	6871      	ldr	r1, [r6, #4]
 801bb66:	d96e      	bls.n	801bc46 <_dtoa_r+0x33e>
 801bb68:	4620      	mov	r0, r4
 801bb6a:	f001 f9c3 	bl	801cef4 <_Balloc>
 801bb6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801bb70:	6030      	str	r0, [r6, #0]
 801bb72:	681b      	ldr	r3, [r3, #0]
 801bb74:	f1b8 0f0e 	cmp.w	r8, #14
 801bb78:	9306      	str	r3, [sp, #24]
 801bb7a:	f200 80ed 	bhi.w	801bd58 <_dtoa_r+0x450>
 801bb7e:	2d00      	cmp	r5, #0
 801bb80:	f000 80ea 	beq.w	801bd58 <_dtoa_r+0x450>
 801bb84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bb88:	f1ba 0f00 	cmp.w	sl, #0
 801bb8c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801bb90:	dd77      	ble.n	801bc82 <_dtoa_r+0x37a>
 801bb92:	4a28      	ldr	r2, [pc, #160]	; (801bc34 <_dtoa_r+0x32c>)
 801bb94:	f00a 030f 	and.w	r3, sl, #15
 801bb98:	ea4f 162a 	mov.w	r6, sl, asr #4
 801bb9c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801bba0:	06f0      	lsls	r0, r6, #27
 801bba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bba6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801bbaa:	d568      	bpl.n	801bc7e <_dtoa_r+0x376>
 801bbac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801bbb0:	4b21      	ldr	r3, [pc, #132]	; (801bc38 <_dtoa_r+0x330>)
 801bbb2:	2503      	movs	r5, #3
 801bbb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801bbb8:	f7e4 fdf8 	bl	80007ac <__aeabi_ddiv>
 801bbbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bbc0:	f006 060f 	and.w	r6, r6, #15
 801bbc4:	4f1c      	ldr	r7, [pc, #112]	; (801bc38 <_dtoa_r+0x330>)
 801bbc6:	e04f      	b.n	801bc68 <_dtoa_r+0x360>
 801bbc8:	2301      	movs	r3, #1
 801bbca:	9309      	str	r3, [sp, #36]	; 0x24
 801bbcc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801bbce:	4453      	add	r3, sl
 801bbd0:	f103 0801 	add.w	r8, r3, #1
 801bbd4:	9304      	str	r3, [sp, #16]
 801bbd6:	4643      	mov	r3, r8
 801bbd8:	2b01      	cmp	r3, #1
 801bbda:	bfb8      	it	lt
 801bbdc:	2301      	movlt	r3, #1
 801bbde:	e7ba      	b.n	801bb56 <_dtoa_r+0x24e>
 801bbe0:	2300      	movs	r3, #0
 801bbe2:	e7b2      	b.n	801bb4a <_dtoa_r+0x242>
 801bbe4:	2300      	movs	r3, #0
 801bbe6:	e7f0      	b.n	801bbca <_dtoa_r+0x2c2>
 801bbe8:	2501      	movs	r5, #1
 801bbea:	2300      	movs	r3, #0
 801bbec:	9509      	str	r5, [sp, #36]	; 0x24
 801bbee:	931e      	str	r3, [sp, #120]	; 0x78
 801bbf0:	f04f 33ff 	mov.w	r3, #4294967295
 801bbf4:	2200      	movs	r2, #0
 801bbf6:	9304      	str	r3, [sp, #16]
 801bbf8:	4698      	mov	r8, r3
 801bbfa:	2312      	movs	r3, #18
 801bbfc:	921f      	str	r2, [sp, #124]	; 0x7c
 801bbfe:	e7aa      	b.n	801bb56 <_dtoa_r+0x24e>
 801bc00:	2301      	movs	r3, #1
 801bc02:	9309      	str	r3, [sp, #36]	; 0x24
 801bc04:	e7f4      	b.n	801bbf0 <_dtoa_r+0x2e8>
 801bc06:	bf00      	nop
 801bc08:	636f4361 	.word	0x636f4361
 801bc0c:	3fd287a7 	.word	0x3fd287a7
 801bc10:	8b60c8b3 	.word	0x8b60c8b3
 801bc14:	3fc68a28 	.word	0x3fc68a28
 801bc18:	509f79fb 	.word	0x509f79fb
 801bc1c:	3fd34413 	.word	0x3fd34413
 801bc20:	7ff00000 	.word	0x7ff00000
 801bc24:	08021dd1 	.word	0x08021dd1
 801bc28:	08021dc8 	.word	0x08021dc8
 801bc2c:	08021d4d 	.word	0x08021d4d
 801bc30:	3ff80000 	.word	0x3ff80000
 801bc34:	08021e70 	.word	0x08021e70
 801bc38:	08021e48 	.word	0x08021e48
 801bc3c:	2301      	movs	r3, #1
 801bc3e:	9304      	str	r3, [sp, #16]
 801bc40:	4698      	mov	r8, r3
 801bc42:	461a      	mov	r2, r3
 801bc44:	e7da      	b.n	801bbfc <_dtoa_r+0x2f4>
 801bc46:	3101      	adds	r1, #1
 801bc48:	6071      	str	r1, [r6, #4]
 801bc4a:	0052      	lsls	r2, r2, #1
 801bc4c:	e787      	b.n	801bb5e <_dtoa_r+0x256>
 801bc4e:	07f1      	lsls	r1, r6, #31
 801bc50:	d508      	bpl.n	801bc64 <_dtoa_r+0x35c>
 801bc52:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801bc56:	e9d7 2300 	ldrd	r2, r3, [r7]
 801bc5a:	f7e4 fc7d 	bl	8000558 <__aeabi_dmul>
 801bc5e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801bc62:	3501      	adds	r5, #1
 801bc64:	1076      	asrs	r6, r6, #1
 801bc66:	3708      	adds	r7, #8
 801bc68:	2e00      	cmp	r6, #0
 801bc6a:	d1f0      	bne.n	801bc4e <_dtoa_r+0x346>
 801bc6c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801bc70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bc74:	f7e4 fd9a 	bl	80007ac <__aeabi_ddiv>
 801bc78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bc7c:	e01b      	b.n	801bcb6 <_dtoa_r+0x3ae>
 801bc7e:	2502      	movs	r5, #2
 801bc80:	e7a0      	b.n	801bbc4 <_dtoa_r+0x2bc>
 801bc82:	f000 80a4 	beq.w	801bdce <_dtoa_r+0x4c6>
 801bc86:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 801bc8a:	f1ca 0600 	rsb	r6, sl, #0
 801bc8e:	4ba0      	ldr	r3, [pc, #640]	; (801bf10 <_dtoa_r+0x608>)
 801bc90:	f006 020f 	and.w	r2, r6, #15
 801bc94:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bc98:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc9c:	f7e4 fc5c 	bl	8000558 <__aeabi_dmul>
 801bca0:	2502      	movs	r5, #2
 801bca2:	2300      	movs	r3, #0
 801bca4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bca8:	4f9a      	ldr	r7, [pc, #616]	; (801bf14 <_dtoa_r+0x60c>)
 801bcaa:	1136      	asrs	r6, r6, #4
 801bcac:	2e00      	cmp	r6, #0
 801bcae:	f040 8083 	bne.w	801bdb8 <_dtoa_r+0x4b0>
 801bcb2:	2b00      	cmp	r3, #0
 801bcb4:	d1e0      	bne.n	801bc78 <_dtoa_r+0x370>
 801bcb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bcb8:	2b00      	cmp	r3, #0
 801bcba:	f000 808a 	beq.w	801bdd2 <_dtoa_r+0x4ca>
 801bcbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bcc2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801bcc6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801bcca:	2200      	movs	r2, #0
 801bccc:	4b92      	ldr	r3, [pc, #584]	; (801bf18 <_dtoa_r+0x610>)
 801bcce:	f7e4 feb5 	bl	8000a3c <__aeabi_dcmplt>
 801bcd2:	2800      	cmp	r0, #0
 801bcd4:	d07d      	beq.n	801bdd2 <_dtoa_r+0x4ca>
 801bcd6:	f1b8 0f00 	cmp.w	r8, #0
 801bcda:	d07a      	beq.n	801bdd2 <_dtoa_r+0x4ca>
 801bcdc:	9b04      	ldr	r3, [sp, #16]
 801bcde:	2b00      	cmp	r3, #0
 801bce0:	dd36      	ble.n	801bd50 <_dtoa_r+0x448>
 801bce2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801bce6:	2200      	movs	r2, #0
 801bce8:	4b8c      	ldr	r3, [pc, #560]	; (801bf1c <_dtoa_r+0x614>)
 801bcea:	f7e4 fc35 	bl	8000558 <__aeabi_dmul>
 801bcee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bcf2:	9e04      	ldr	r6, [sp, #16]
 801bcf4:	f10a 37ff 	add.w	r7, sl, #4294967295
 801bcf8:	3501      	adds	r5, #1
 801bcfa:	4628      	mov	r0, r5
 801bcfc:	f7e4 fbc2 	bl	8000484 <__aeabi_i2d>
 801bd00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bd04:	f7e4 fc28 	bl	8000558 <__aeabi_dmul>
 801bd08:	2200      	movs	r2, #0
 801bd0a:	4b85      	ldr	r3, [pc, #532]	; (801bf20 <_dtoa_r+0x618>)
 801bd0c:	f7e4 fa6e 	bl	80001ec <__adddf3>
 801bd10:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 801bd14:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801bd18:	950b      	str	r5, [sp, #44]	; 0x2c
 801bd1a:	2e00      	cmp	r6, #0
 801bd1c:	d15c      	bne.n	801bdd8 <_dtoa_r+0x4d0>
 801bd1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bd22:	2200      	movs	r2, #0
 801bd24:	4b7f      	ldr	r3, [pc, #508]	; (801bf24 <_dtoa_r+0x61c>)
 801bd26:	f7e4 fa5f 	bl	80001e8 <__aeabi_dsub>
 801bd2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bd2c:	462b      	mov	r3, r5
 801bd2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bd32:	f7e4 fea1 	bl	8000a78 <__aeabi_dcmpgt>
 801bd36:	2800      	cmp	r0, #0
 801bd38:	f040 8281 	bne.w	801c23e <_dtoa_r+0x936>
 801bd3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bd40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bd42:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 801bd46:	f7e4 fe79 	bl	8000a3c <__aeabi_dcmplt>
 801bd4a:	2800      	cmp	r0, #0
 801bd4c:	f040 8275 	bne.w	801c23a <_dtoa_r+0x932>
 801bd50:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801bd54:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801bd58:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801bd5a:	2b00      	cmp	r3, #0
 801bd5c:	f2c0 814b 	blt.w	801bff6 <_dtoa_r+0x6ee>
 801bd60:	f1ba 0f0e 	cmp.w	sl, #14
 801bd64:	f300 8147 	bgt.w	801bff6 <_dtoa_r+0x6ee>
 801bd68:	4b69      	ldr	r3, [pc, #420]	; (801bf10 <_dtoa_r+0x608>)
 801bd6a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801bd6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd72:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801bd76:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801bd78:	2b00      	cmp	r3, #0
 801bd7a:	f280 80d7 	bge.w	801bf2c <_dtoa_r+0x624>
 801bd7e:	f1b8 0f00 	cmp.w	r8, #0
 801bd82:	f300 80d3 	bgt.w	801bf2c <_dtoa_r+0x624>
 801bd86:	f040 8257 	bne.w	801c238 <_dtoa_r+0x930>
 801bd8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801bd8e:	2200      	movs	r2, #0
 801bd90:	4b64      	ldr	r3, [pc, #400]	; (801bf24 <_dtoa_r+0x61c>)
 801bd92:	f7e4 fbe1 	bl	8000558 <__aeabi_dmul>
 801bd96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bd9a:	f7e4 fe63 	bl	8000a64 <__aeabi_dcmpge>
 801bd9e:	4646      	mov	r6, r8
 801bda0:	4647      	mov	r7, r8
 801bda2:	2800      	cmp	r0, #0
 801bda4:	f040 822d 	bne.w	801c202 <_dtoa_r+0x8fa>
 801bda8:	9b06      	ldr	r3, [sp, #24]
 801bdaa:	9a06      	ldr	r2, [sp, #24]
 801bdac:	1c5d      	adds	r5, r3, #1
 801bdae:	2331      	movs	r3, #49	; 0x31
 801bdb0:	f10a 0a01 	add.w	sl, sl, #1
 801bdb4:	7013      	strb	r3, [r2, #0]
 801bdb6:	e228      	b.n	801c20a <_dtoa_r+0x902>
 801bdb8:	07f2      	lsls	r2, r6, #31
 801bdba:	d505      	bpl.n	801bdc8 <_dtoa_r+0x4c0>
 801bdbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 801bdc0:	f7e4 fbca 	bl	8000558 <__aeabi_dmul>
 801bdc4:	2301      	movs	r3, #1
 801bdc6:	3501      	adds	r5, #1
 801bdc8:	1076      	asrs	r6, r6, #1
 801bdca:	3708      	adds	r7, #8
 801bdcc:	e76e      	b.n	801bcac <_dtoa_r+0x3a4>
 801bdce:	2502      	movs	r5, #2
 801bdd0:	e771      	b.n	801bcb6 <_dtoa_r+0x3ae>
 801bdd2:	4657      	mov	r7, sl
 801bdd4:	4646      	mov	r6, r8
 801bdd6:	e790      	b.n	801bcfa <_dtoa_r+0x3f2>
 801bdd8:	4b4d      	ldr	r3, [pc, #308]	; (801bf10 <_dtoa_r+0x608>)
 801bdda:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801bdde:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801bde2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bde4:	2b00      	cmp	r3, #0
 801bde6:	d048      	beq.n	801be7a <_dtoa_r+0x572>
 801bde8:	4602      	mov	r2, r0
 801bdea:	460b      	mov	r3, r1
 801bdec:	2000      	movs	r0, #0
 801bdee:	494e      	ldr	r1, [pc, #312]	; (801bf28 <_dtoa_r+0x620>)
 801bdf0:	f7e4 fcdc 	bl	80007ac <__aeabi_ddiv>
 801bdf4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801bdf8:	f7e4 f9f6 	bl	80001e8 <__aeabi_dsub>
 801bdfc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801be00:	9d06      	ldr	r5, [sp, #24]
 801be02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801be06:	f7e4 fe57 	bl	8000ab8 <__aeabi_d2iz>
 801be0a:	9011      	str	r0, [sp, #68]	; 0x44
 801be0c:	f7e4 fb3a 	bl	8000484 <__aeabi_i2d>
 801be10:	4602      	mov	r2, r0
 801be12:	460b      	mov	r3, r1
 801be14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801be18:	f7e4 f9e6 	bl	80001e8 <__aeabi_dsub>
 801be1c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801be1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801be22:	3330      	adds	r3, #48	; 0x30
 801be24:	f805 3b01 	strb.w	r3, [r5], #1
 801be28:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801be2c:	f7e4 fe06 	bl	8000a3c <__aeabi_dcmplt>
 801be30:	2800      	cmp	r0, #0
 801be32:	d163      	bne.n	801befc <_dtoa_r+0x5f4>
 801be34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801be38:	2000      	movs	r0, #0
 801be3a:	4937      	ldr	r1, [pc, #220]	; (801bf18 <_dtoa_r+0x610>)
 801be3c:	f7e4 f9d4 	bl	80001e8 <__aeabi_dsub>
 801be40:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801be44:	f7e4 fdfa 	bl	8000a3c <__aeabi_dcmplt>
 801be48:	2800      	cmp	r0, #0
 801be4a:	f040 80b5 	bne.w	801bfb8 <_dtoa_r+0x6b0>
 801be4e:	9b06      	ldr	r3, [sp, #24]
 801be50:	1aeb      	subs	r3, r5, r3
 801be52:	429e      	cmp	r6, r3
 801be54:	f77f af7c 	ble.w	801bd50 <_dtoa_r+0x448>
 801be58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801be5c:	2200      	movs	r2, #0
 801be5e:	4b2f      	ldr	r3, [pc, #188]	; (801bf1c <_dtoa_r+0x614>)
 801be60:	f7e4 fb7a 	bl	8000558 <__aeabi_dmul>
 801be64:	2200      	movs	r2, #0
 801be66:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801be6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801be6e:	4b2b      	ldr	r3, [pc, #172]	; (801bf1c <_dtoa_r+0x614>)
 801be70:	f7e4 fb72 	bl	8000558 <__aeabi_dmul>
 801be74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801be78:	e7c3      	b.n	801be02 <_dtoa_r+0x4fa>
 801be7a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801be7e:	f7e4 fb6b 	bl	8000558 <__aeabi_dmul>
 801be82:	9b06      	ldr	r3, [sp, #24]
 801be84:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801be88:	199d      	adds	r5, r3, r6
 801be8a:	461e      	mov	r6, r3
 801be8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801be90:	f7e4 fe12 	bl	8000ab8 <__aeabi_d2iz>
 801be94:	9011      	str	r0, [sp, #68]	; 0x44
 801be96:	f7e4 faf5 	bl	8000484 <__aeabi_i2d>
 801be9a:	4602      	mov	r2, r0
 801be9c:	460b      	mov	r3, r1
 801be9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bea2:	f7e4 f9a1 	bl	80001e8 <__aeabi_dsub>
 801bea6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bea8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801beac:	3330      	adds	r3, #48	; 0x30
 801beae:	f806 3b01 	strb.w	r3, [r6], #1
 801beb2:	42ae      	cmp	r6, r5
 801beb4:	f04f 0200 	mov.w	r2, #0
 801beb8:	d124      	bne.n	801bf04 <_dtoa_r+0x5fc>
 801beba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801bebe:	4b1a      	ldr	r3, [pc, #104]	; (801bf28 <_dtoa_r+0x620>)
 801bec0:	f7e4 f994 	bl	80001ec <__adddf3>
 801bec4:	4602      	mov	r2, r0
 801bec6:	460b      	mov	r3, r1
 801bec8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801becc:	f7e4 fdd4 	bl	8000a78 <__aeabi_dcmpgt>
 801bed0:	2800      	cmp	r0, #0
 801bed2:	d171      	bne.n	801bfb8 <_dtoa_r+0x6b0>
 801bed4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801bed8:	2000      	movs	r0, #0
 801beda:	4913      	ldr	r1, [pc, #76]	; (801bf28 <_dtoa_r+0x620>)
 801bedc:	f7e4 f984 	bl	80001e8 <__aeabi_dsub>
 801bee0:	4602      	mov	r2, r0
 801bee2:	460b      	mov	r3, r1
 801bee4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bee8:	f7e4 fda8 	bl	8000a3c <__aeabi_dcmplt>
 801beec:	2800      	cmp	r0, #0
 801beee:	f43f af2f 	beq.w	801bd50 <_dtoa_r+0x448>
 801bef2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801bef6:	1e6a      	subs	r2, r5, #1
 801bef8:	2b30      	cmp	r3, #48	; 0x30
 801befa:	d001      	beq.n	801bf00 <_dtoa_r+0x5f8>
 801befc:	46ba      	mov	sl, r7
 801befe:	e04a      	b.n	801bf96 <_dtoa_r+0x68e>
 801bf00:	4615      	mov	r5, r2
 801bf02:	e7f6      	b.n	801bef2 <_dtoa_r+0x5ea>
 801bf04:	4b05      	ldr	r3, [pc, #20]	; (801bf1c <_dtoa_r+0x614>)
 801bf06:	f7e4 fb27 	bl	8000558 <__aeabi_dmul>
 801bf0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801bf0e:	e7bd      	b.n	801be8c <_dtoa_r+0x584>
 801bf10:	08021e70 	.word	0x08021e70
 801bf14:	08021e48 	.word	0x08021e48
 801bf18:	3ff00000 	.word	0x3ff00000
 801bf1c:	40240000 	.word	0x40240000
 801bf20:	401c0000 	.word	0x401c0000
 801bf24:	40140000 	.word	0x40140000
 801bf28:	3fe00000 	.word	0x3fe00000
 801bf2c:	9d06      	ldr	r5, [sp, #24]
 801bf2e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801bf32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bf36:	4630      	mov	r0, r6
 801bf38:	4639      	mov	r1, r7
 801bf3a:	f7e4 fc37 	bl	80007ac <__aeabi_ddiv>
 801bf3e:	f7e4 fdbb 	bl	8000ab8 <__aeabi_d2iz>
 801bf42:	4681      	mov	r9, r0
 801bf44:	f7e4 fa9e 	bl	8000484 <__aeabi_i2d>
 801bf48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bf4c:	f7e4 fb04 	bl	8000558 <__aeabi_dmul>
 801bf50:	4602      	mov	r2, r0
 801bf52:	460b      	mov	r3, r1
 801bf54:	4630      	mov	r0, r6
 801bf56:	4639      	mov	r1, r7
 801bf58:	f7e4 f946 	bl	80001e8 <__aeabi_dsub>
 801bf5c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 801bf60:	f805 6b01 	strb.w	r6, [r5], #1
 801bf64:	9e06      	ldr	r6, [sp, #24]
 801bf66:	4602      	mov	r2, r0
 801bf68:	1bae      	subs	r6, r5, r6
 801bf6a:	45b0      	cmp	r8, r6
 801bf6c:	460b      	mov	r3, r1
 801bf6e:	d135      	bne.n	801bfdc <_dtoa_r+0x6d4>
 801bf70:	f7e4 f93c 	bl	80001ec <__adddf3>
 801bf74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bf78:	4606      	mov	r6, r0
 801bf7a:	460f      	mov	r7, r1
 801bf7c:	f7e4 fd7c 	bl	8000a78 <__aeabi_dcmpgt>
 801bf80:	b9c8      	cbnz	r0, 801bfb6 <_dtoa_r+0x6ae>
 801bf82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bf86:	4630      	mov	r0, r6
 801bf88:	4639      	mov	r1, r7
 801bf8a:	f7e4 fd4d 	bl	8000a28 <__aeabi_dcmpeq>
 801bf8e:	b110      	cbz	r0, 801bf96 <_dtoa_r+0x68e>
 801bf90:	f019 0f01 	tst.w	r9, #1
 801bf94:	d10f      	bne.n	801bfb6 <_dtoa_r+0x6ae>
 801bf96:	4659      	mov	r1, fp
 801bf98:	4620      	mov	r0, r4
 801bf9a:	f000 ffdf 	bl	801cf5c <_Bfree>
 801bf9e:	2300      	movs	r3, #0
 801bfa0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801bfa2:	702b      	strb	r3, [r5, #0]
 801bfa4:	f10a 0301 	add.w	r3, sl, #1
 801bfa8:	6013      	str	r3, [r2, #0]
 801bfaa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801bfac:	2b00      	cmp	r3, #0
 801bfae:	f43f acf3 	beq.w	801b998 <_dtoa_r+0x90>
 801bfb2:	601d      	str	r5, [r3, #0]
 801bfb4:	e4f0      	b.n	801b998 <_dtoa_r+0x90>
 801bfb6:	4657      	mov	r7, sl
 801bfb8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801bfbc:	1e6b      	subs	r3, r5, #1
 801bfbe:	2a39      	cmp	r2, #57	; 0x39
 801bfc0:	d106      	bne.n	801bfd0 <_dtoa_r+0x6c8>
 801bfc2:	9a06      	ldr	r2, [sp, #24]
 801bfc4:	429a      	cmp	r2, r3
 801bfc6:	d107      	bne.n	801bfd8 <_dtoa_r+0x6d0>
 801bfc8:	2330      	movs	r3, #48	; 0x30
 801bfca:	7013      	strb	r3, [r2, #0]
 801bfcc:	4613      	mov	r3, r2
 801bfce:	3701      	adds	r7, #1
 801bfd0:	781a      	ldrb	r2, [r3, #0]
 801bfd2:	3201      	adds	r2, #1
 801bfd4:	701a      	strb	r2, [r3, #0]
 801bfd6:	e791      	b.n	801befc <_dtoa_r+0x5f4>
 801bfd8:	461d      	mov	r5, r3
 801bfda:	e7ed      	b.n	801bfb8 <_dtoa_r+0x6b0>
 801bfdc:	2200      	movs	r2, #0
 801bfde:	4b99      	ldr	r3, [pc, #612]	; (801c244 <_dtoa_r+0x93c>)
 801bfe0:	f7e4 faba 	bl	8000558 <__aeabi_dmul>
 801bfe4:	2200      	movs	r2, #0
 801bfe6:	2300      	movs	r3, #0
 801bfe8:	4606      	mov	r6, r0
 801bfea:	460f      	mov	r7, r1
 801bfec:	f7e4 fd1c 	bl	8000a28 <__aeabi_dcmpeq>
 801bff0:	2800      	cmp	r0, #0
 801bff2:	d09e      	beq.n	801bf32 <_dtoa_r+0x62a>
 801bff4:	e7cf      	b.n	801bf96 <_dtoa_r+0x68e>
 801bff6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bff8:	2a00      	cmp	r2, #0
 801bffa:	f000 8088 	beq.w	801c10e <_dtoa_r+0x806>
 801bffe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801c000:	2a01      	cmp	r2, #1
 801c002:	dc6d      	bgt.n	801c0e0 <_dtoa_r+0x7d8>
 801c004:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c006:	2a00      	cmp	r2, #0
 801c008:	d066      	beq.n	801c0d8 <_dtoa_r+0x7d0>
 801c00a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801c00e:	464d      	mov	r5, r9
 801c010:	9e08      	ldr	r6, [sp, #32]
 801c012:	9a07      	ldr	r2, [sp, #28]
 801c014:	2101      	movs	r1, #1
 801c016:	441a      	add	r2, r3
 801c018:	4620      	mov	r0, r4
 801c01a:	4499      	add	r9, r3
 801c01c:	9207      	str	r2, [sp, #28]
 801c01e:	f001 f87b 	bl	801d118 <__i2b>
 801c022:	4607      	mov	r7, r0
 801c024:	2d00      	cmp	r5, #0
 801c026:	dd0b      	ble.n	801c040 <_dtoa_r+0x738>
 801c028:	9b07      	ldr	r3, [sp, #28]
 801c02a:	2b00      	cmp	r3, #0
 801c02c:	dd08      	ble.n	801c040 <_dtoa_r+0x738>
 801c02e:	42ab      	cmp	r3, r5
 801c030:	bfa8      	it	ge
 801c032:	462b      	movge	r3, r5
 801c034:	9a07      	ldr	r2, [sp, #28]
 801c036:	eba9 0903 	sub.w	r9, r9, r3
 801c03a:	1aed      	subs	r5, r5, r3
 801c03c:	1ad3      	subs	r3, r2, r3
 801c03e:	9307      	str	r3, [sp, #28]
 801c040:	9b08      	ldr	r3, [sp, #32]
 801c042:	b1eb      	cbz	r3, 801c080 <_dtoa_r+0x778>
 801c044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c046:	2b00      	cmp	r3, #0
 801c048:	d065      	beq.n	801c116 <_dtoa_r+0x80e>
 801c04a:	b18e      	cbz	r6, 801c070 <_dtoa_r+0x768>
 801c04c:	4639      	mov	r1, r7
 801c04e:	4632      	mov	r2, r6
 801c050:	4620      	mov	r0, r4
 801c052:	f001 f8ff 	bl	801d254 <__pow5mult>
 801c056:	465a      	mov	r2, fp
 801c058:	4601      	mov	r1, r0
 801c05a:	4607      	mov	r7, r0
 801c05c:	4620      	mov	r0, r4
 801c05e:	f001 f864 	bl	801d12a <__multiply>
 801c062:	4659      	mov	r1, fp
 801c064:	900a      	str	r0, [sp, #40]	; 0x28
 801c066:	4620      	mov	r0, r4
 801c068:	f000 ff78 	bl	801cf5c <_Bfree>
 801c06c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c06e:	469b      	mov	fp, r3
 801c070:	9b08      	ldr	r3, [sp, #32]
 801c072:	1b9a      	subs	r2, r3, r6
 801c074:	d004      	beq.n	801c080 <_dtoa_r+0x778>
 801c076:	4659      	mov	r1, fp
 801c078:	4620      	mov	r0, r4
 801c07a:	f001 f8eb 	bl	801d254 <__pow5mult>
 801c07e:	4683      	mov	fp, r0
 801c080:	2101      	movs	r1, #1
 801c082:	4620      	mov	r0, r4
 801c084:	f001 f848 	bl	801d118 <__i2b>
 801c088:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c08a:	4606      	mov	r6, r0
 801c08c:	2b00      	cmp	r3, #0
 801c08e:	f000 81c6 	beq.w	801c41e <_dtoa_r+0xb16>
 801c092:	461a      	mov	r2, r3
 801c094:	4601      	mov	r1, r0
 801c096:	4620      	mov	r0, r4
 801c098:	f001 f8dc 	bl	801d254 <__pow5mult>
 801c09c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801c09e:	4606      	mov	r6, r0
 801c0a0:	2b01      	cmp	r3, #1
 801c0a2:	dc3e      	bgt.n	801c122 <_dtoa_r+0x81a>
 801c0a4:	9b02      	ldr	r3, [sp, #8]
 801c0a6:	2b00      	cmp	r3, #0
 801c0a8:	d137      	bne.n	801c11a <_dtoa_r+0x812>
 801c0aa:	9b03      	ldr	r3, [sp, #12]
 801c0ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c0b0:	2b00      	cmp	r3, #0
 801c0b2:	d134      	bne.n	801c11e <_dtoa_r+0x816>
 801c0b4:	9b03      	ldr	r3, [sp, #12]
 801c0b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c0ba:	0d1b      	lsrs	r3, r3, #20
 801c0bc:	051b      	lsls	r3, r3, #20
 801c0be:	b12b      	cbz	r3, 801c0cc <_dtoa_r+0x7c4>
 801c0c0:	9b07      	ldr	r3, [sp, #28]
 801c0c2:	f109 0901 	add.w	r9, r9, #1
 801c0c6:	3301      	adds	r3, #1
 801c0c8:	9307      	str	r3, [sp, #28]
 801c0ca:	2301      	movs	r3, #1
 801c0cc:	9308      	str	r3, [sp, #32]
 801c0ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c0d0:	2b00      	cmp	r3, #0
 801c0d2:	d128      	bne.n	801c126 <_dtoa_r+0x81e>
 801c0d4:	2001      	movs	r0, #1
 801c0d6:	e02e      	b.n	801c136 <_dtoa_r+0x82e>
 801c0d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801c0da:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801c0de:	e796      	b.n	801c00e <_dtoa_r+0x706>
 801c0e0:	9b08      	ldr	r3, [sp, #32]
 801c0e2:	f108 36ff 	add.w	r6, r8, #4294967295
 801c0e6:	42b3      	cmp	r3, r6
 801c0e8:	bfb7      	itett	lt
 801c0ea:	9b08      	ldrlt	r3, [sp, #32]
 801c0ec:	1b9e      	subge	r6, r3, r6
 801c0ee:	1af2      	sublt	r2, r6, r3
 801c0f0:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 801c0f2:	bfbf      	itttt	lt
 801c0f4:	9608      	strlt	r6, [sp, #32]
 801c0f6:	189b      	addlt	r3, r3, r2
 801c0f8:	930c      	strlt	r3, [sp, #48]	; 0x30
 801c0fa:	2600      	movlt	r6, #0
 801c0fc:	f1b8 0f00 	cmp.w	r8, #0
 801c100:	bfb9      	ittee	lt
 801c102:	eba9 0508 	sublt.w	r5, r9, r8
 801c106:	2300      	movlt	r3, #0
 801c108:	464d      	movge	r5, r9
 801c10a:	4643      	movge	r3, r8
 801c10c:	e781      	b.n	801c012 <_dtoa_r+0x70a>
 801c10e:	9e08      	ldr	r6, [sp, #32]
 801c110:	464d      	mov	r5, r9
 801c112:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801c114:	e786      	b.n	801c024 <_dtoa_r+0x71c>
 801c116:	9a08      	ldr	r2, [sp, #32]
 801c118:	e7ad      	b.n	801c076 <_dtoa_r+0x76e>
 801c11a:	2300      	movs	r3, #0
 801c11c:	e7d6      	b.n	801c0cc <_dtoa_r+0x7c4>
 801c11e:	9b02      	ldr	r3, [sp, #8]
 801c120:	e7d4      	b.n	801c0cc <_dtoa_r+0x7c4>
 801c122:	2300      	movs	r3, #0
 801c124:	9308      	str	r3, [sp, #32]
 801c126:	6933      	ldr	r3, [r6, #16]
 801c128:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801c12c:	6918      	ldr	r0, [r3, #16]
 801c12e:	f000 ffa5 	bl	801d07c <__hi0bits>
 801c132:	f1c0 0020 	rsb	r0, r0, #32
 801c136:	9b07      	ldr	r3, [sp, #28]
 801c138:	4418      	add	r0, r3
 801c13a:	f010 001f 	ands.w	r0, r0, #31
 801c13e:	d047      	beq.n	801c1d0 <_dtoa_r+0x8c8>
 801c140:	f1c0 0320 	rsb	r3, r0, #32
 801c144:	2b04      	cmp	r3, #4
 801c146:	dd3b      	ble.n	801c1c0 <_dtoa_r+0x8b8>
 801c148:	9b07      	ldr	r3, [sp, #28]
 801c14a:	f1c0 001c 	rsb	r0, r0, #28
 801c14e:	4481      	add	r9, r0
 801c150:	4405      	add	r5, r0
 801c152:	4403      	add	r3, r0
 801c154:	9307      	str	r3, [sp, #28]
 801c156:	f1b9 0f00 	cmp.w	r9, #0
 801c15a:	dd05      	ble.n	801c168 <_dtoa_r+0x860>
 801c15c:	4659      	mov	r1, fp
 801c15e:	464a      	mov	r2, r9
 801c160:	4620      	mov	r0, r4
 801c162:	f001 f8c5 	bl	801d2f0 <__lshift>
 801c166:	4683      	mov	fp, r0
 801c168:	9b07      	ldr	r3, [sp, #28]
 801c16a:	2b00      	cmp	r3, #0
 801c16c:	dd05      	ble.n	801c17a <_dtoa_r+0x872>
 801c16e:	4631      	mov	r1, r6
 801c170:	461a      	mov	r2, r3
 801c172:	4620      	mov	r0, r4
 801c174:	f001 f8bc 	bl	801d2f0 <__lshift>
 801c178:	4606      	mov	r6, r0
 801c17a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801c17c:	b353      	cbz	r3, 801c1d4 <_dtoa_r+0x8cc>
 801c17e:	4631      	mov	r1, r6
 801c180:	4658      	mov	r0, fp
 801c182:	f001 f909 	bl	801d398 <__mcmp>
 801c186:	2800      	cmp	r0, #0
 801c188:	da24      	bge.n	801c1d4 <_dtoa_r+0x8cc>
 801c18a:	2300      	movs	r3, #0
 801c18c:	4659      	mov	r1, fp
 801c18e:	220a      	movs	r2, #10
 801c190:	4620      	mov	r0, r4
 801c192:	f000 fefa 	bl	801cf8a <__multadd>
 801c196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c198:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c19c:	4683      	mov	fp, r0
 801c19e:	2b00      	cmp	r3, #0
 801c1a0:	f000 8144 	beq.w	801c42c <_dtoa_r+0xb24>
 801c1a4:	2300      	movs	r3, #0
 801c1a6:	4639      	mov	r1, r7
 801c1a8:	220a      	movs	r2, #10
 801c1aa:	4620      	mov	r0, r4
 801c1ac:	f000 feed 	bl	801cf8a <__multadd>
 801c1b0:	9b04      	ldr	r3, [sp, #16]
 801c1b2:	4607      	mov	r7, r0
 801c1b4:	2b00      	cmp	r3, #0
 801c1b6:	dc4d      	bgt.n	801c254 <_dtoa_r+0x94c>
 801c1b8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801c1ba:	2b02      	cmp	r3, #2
 801c1bc:	dd4a      	ble.n	801c254 <_dtoa_r+0x94c>
 801c1be:	e011      	b.n	801c1e4 <_dtoa_r+0x8dc>
 801c1c0:	d0c9      	beq.n	801c156 <_dtoa_r+0x84e>
 801c1c2:	9a07      	ldr	r2, [sp, #28]
 801c1c4:	331c      	adds	r3, #28
 801c1c6:	441a      	add	r2, r3
 801c1c8:	4499      	add	r9, r3
 801c1ca:	441d      	add	r5, r3
 801c1cc:	4613      	mov	r3, r2
 801c1ce:	e7c1      	b.n	801c154 <_dtoa_r+0x84c>
 801c1d0:	4603      	mov	r3, r0
 801c1d2:	e7f6      	b.n	801c1c2 <_dtoa_r+0x8ba>
 801c1d4:	f1b8 0f00 	cmp.w	r8, #0
 801c1d8:	dc36      	bgt.n	801c248 <_dtoa_r+0x940>
 801c1da:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801c1dc:	2b02      	cmp	r3, #2
 801c1de:	dd33      	ble.n	801c248 <_dtoa_r+0x940>
 801c1e0:	f8cd 8010 	str.w	r8, [sp, #16]
 801c1e4:	9b04      	ldr	r3, [sp, #16]
 801c1e6:	b963      	cbnz	r3, 801c202 <_dtoa_r+0x8fa>
 801c1e8:	4631      	mov	r1, r6
 801c1ea:	2205      	movs	r2, #5
 801c1ec:	4620      	mov	r0, r4
 801c1ee:	f000 fecc 	bl	801cf8a <__multadd>
 801c1f2:	4601      	mov	r1, r0
 801c1f4:	4606      	mov	r6, r0
 801c1f6:	4658      	mov	r0, fp
 801c1f8:	f001 f8ce 	bl	801d398 <__mcmp>
 801c1fc:	2800      	cmp	r0, #0
 801c1fe:	f73f add3 	bgt.w	801bda8 <_dtoa_r+0x4a0>
 801c202:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c204:	9d06      	ldr	r5, [sp, #24]
 801c206:	ea6f 0a03 	mvn.w	sl, r3
 801c20a:	f04f 0900 	mov.w	r9, #0
 801c20e:	4631      	mov	r1, r6
 801c210:	4620      	mov	r0, r4
 801c212:	f000 fea3 	bl	801cf5c <_Bfree>
 801c216:	2f00      	cmp	r7, #0
 801c218:	f43f aebd 	beq.w	801bf96 <_dtoa_r+0x68e>
 801c21c:	f1b9 0f00 	cmp.w	r9, #0
 801c220:	d005      	beq.n	801c22e <_dtoa_r+0x926>
 801c222:	45b9      	cmp	r9, r7
 801c224:	d003      	beq.n	801c22e <_dtoa_r+0x926>
 801c226:	4649      	mov	r1, r9
 801c228:	4620      	mov	r0, r4
 801c22a:	f000 fe97 	bl	801cf5c <_Bfree>
 801c22e:	4639      	mov	r1, r7
 801c230:	4620      	mov	r0, r4
 801c232:	f000 fe93 	bl	801cf5c <_Bfree>
 801c236:	e6ae      	b.n	801bf96 <_dtoa_r+0x68e>
 801c238:	2600      	movs	r6, #0
 801c23a:	4637      	mov	r7, r6
 801c23c:	e7e1      	b.n	801c202 <_dtoa_r+0x8fa>
 801c23e:	46ba      	mov	sl, r7
 801c240:	4637      	mov	r7, r6
 801c242:	e5b1      	b.n	801bda8 <_dtoa_r+0x4a0>
 801c244:	40240000 	.word	0x40240000
 801c248:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c24a:	f8cd 8010 	str.w	r8, [sp, #16]
 801c24e:	2b00      	cmp	r3, #0
 801c250:	f000 80f3 	beq.w	801c43a <_dtoa_r+0xb32>
 801c254:	2d00      	cmp	r5, #0
 801c256:	dd05      	ble.n	801c264 <_dtoa_r+0x95c>
 801c258:	4639      	mov	r1, r7
 801c25a:	462a      	mov	r2, r5
 801c25c:	4620      	mov	r0, r4
 801c25e:	f001 f847 	bl	801d2f0 <__lshift>
 801c262:	4607      	mov	r7, r0
 801c264:	9b08      	ldr	r3, [sp, #32]
 801c266:	2b00      	cmp	r3, #0
 801c268:	d04c      	beq.n	801c304 <_dtoa_r+0x9fc>
 801c26a:	6879      	ldr	r1, [r7, #4]
 801c26c:	4620      	mov	r0, r4
 801c26e:	f000 fe41 	bl	801cef4 <_Balloc>
 801c272:	4605      	mov	r5, r0
 801c274:	693a      	ldr	r2, [r7, #16]
 801c276:	f107 010c 	add.w	r1, r7, #12
 801c27a:	3202      	adds	r2, #2
 801c27c:	0092      	lsls	r2, r2, #2
 801c27e:	300c      	adds	r0, #12
 801c280:	f7fd fc09 	bl	8019a96 <memcpy>
 801c284:	2201      	movs	r2, #1
 801c286:	4629      	mov	r1, r5
 801c288:	4620      	mov	r0, r4
 801c28a:	f001 f831 	bl	801d2f0 <__lshift>
 801c28e:	46b9      	mov	r9, r7
 801c290:	4607      	mov	r7, r0
 801c292:	9b06      	ldr	r3, [sp, #24]
 801c294:	9307      	str	r3, [sp, #28]
 801c296:	9b02      	ldr	r3, [sp, #8]
 801c298:	f003 0301 	and.w	r3, r3, #1
 801c29c:	9308      	str	r3, [sp, #32]
 801c29e:	4631      	mov	r1, r6
 801c2a0:	4658      	mov	r0, fp
 801c2a2:	f7ff faa3 	bl	801b7ec <quorem>
 801c2a6:	4649      	mov	r1, r9
 801c2a8:	4605      	mov	r5, r0
 801c2aa:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801c2ae:	4658      	mov	r0, fp
 801c2b0:	f001 f872 	bl	801d398 <__mcmp>
 801c2b4:	463a      	mov	r2, r7
 801c2b6:	9002      	str	r0, [sp, #8]
 801c2b8:	4631      	mov	r1, r6
 801c2ba:	4620      	mov	r0, r4
 801c2bc:	f001 f886 	bl	801d3cc <__mdiff>
 801c2c0:	68c3      	ldr	r3, [r0, #12]
 801c2c2:	4602      	mov	r2, r0
 801c2c4:	bb03      	cbnz	r3, 801c308 <_dtoa_r+0xa00>
 801c2c6:	4601      	mov	r1, r0
 801c2c8:	9009      	str	r0, [sp, #36]	; 0x24
 801c2ca:	4658      	mov	r0, fp
 801c2cc:	f001 f864 	bl	801d398 <__mcmp>
 801c2d0:	4603      	mov	r3, r0
 801c2d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c2d4:	4611      	mov	r1, r2
 801c2d6:	4620      	mov	r0, r4
 801c2d8:	9309      	str	r3, [sp, #36]	; 0x24
 801c2da:	f000 fe3f 	bl	801cf5c <_Bfree>
 801c2de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c2e0:	b9a3      	cbnz	r3, 801c30c <_dtoa_r+0xa04>
 801c2e2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801c2e4:	b992      	cbnz	r2, 801c30c <_dtoa_r+0xa04>
 801c2e6:	9a08      	ldr	r2, [sp, #32]
 801c2e8:	b982      	cbnz	r2, 801c30c <_dtoa_r+0xa04>
 801c2ea:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801c2ee:	d029      	beq.n	801c344 <_dtoa_r+0xa3c>
 801c2f0:	9b02      	ldr	r3, [sp, #8]
 801c2f2:	2b00      	cmp	r3, #0
 801c2f4:	dd01      	ble.n	801c2fa <_dtoa_r+0x9f2>
 801c2f6:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801c2fa:	9b07      	ldr	r3, [sp, #28]
 801c2fc:	1c5d      	adds	r5, r3, #1
 801c2fe:	f883 8000 	strb.w	r8, [r3]
 801c302:	e784      	b.n	801c20e <_dtoa_r+0x906>
 801c304:	4638      	mov	r0, r7
 801c306:	e7c2      	b.n	801c28e <_dtoa_r+0x986>
 801c308:	2301      	movs	r3, #1
 801c30a:	e7e3      	b.n	801c2d4 <_dtoa_r+0x9cc>
 801c30c:	9a02      	ldr	r2, [sp, #8]
 801c30e:	2a00      	cmp	r2, #0
 801c310:	db04      	blt.n	801c31c <_dtoa_r+0xa14>
 801c312:	d123      	bne.n	801c35c <_dtoa_r+0xa54>
 801c314:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801c316:	bb0a      	cbnz	r2, 801c35c <_dtoa_r+0xa54>
 801c318:	9a08      	ldr	r2, [sp, #32]
 801c31a:	b9fa      	cbnz	r2, 801c35c <_dtoa_r+0xa54>
 801c31c:	2b00      	cmp	r3, #0
 801c31e:	ddec      	ble.n	801c2fa <_dtoa_r+0x9f2>
 801c320:	4659      	mov	r1, fp
 801c322:	2201      	movs	r2, #1
 801c324:	4620      	mov	r0, r4
 801c326:	f000 ffe3 	bl	801d2f0 <__lshift>
 801c32a:	4631      	mov	r1, r6
 801c32c:	4683      	mov	fp, r0
 801c32e:	f001 f833 	bl	801d398 <__mcmp>
 801c332:	2800      	cmp	r0, #0
 801c334:	dc03      	bgt.n	801c33e <_dtoa_r+0xa36>
 801c336:	d1e0      	bne.n	801c2fa <_dtoa_r+0x9f2>
 801c338:	f018 0f01 	tst.w	r8, #1
 801c33c:	d0dd      	beq.n	801c2fa <_dtoa_r+0x9f2>
 801c33e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801c342:	d1d8      	bne.n	801c2f6 <_dtoa_r+0x9ee>
 801c344:	9b07      	ldr	r3, [sp, #28]
 801c346:	9a07      	ldr	r2, [sp, #28]
 801c348:	1c5d      	adds	r5, r3, #1
 801c34a:	2339      	movs	r3, #57	; 0x39
 801c34c:	7013      	strb	r3, [r2, #0]
 801c34e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801c352:	1e6a      	subs	r2, r5, #1
 801c354:	2b39      	cmp	r3, #57	; 0x39
 801c356:	d04d      	beq.n	801c3f4 <_dtoa_r+0xaec>
 801c358:	3301      	adds	r3, #1
 801c35a:	e052      	b.n	801c402 <_dtoa_r+0xafa>
 801c35c:	9a07      	ldr	r2, [sp, #28]
 801c35e:	2b00      	cmp	r3, #0
 801c360:	f102 0501 	add.w	r5, r2, #1
 801c364:	dd06      	ble.n	801c374 <_dtoa_r+0xa6c>
 801c366:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801c36a:	d0eb      	beq.n	801c344 <_dtoa_r+0xa3c>
 801c36c:	f108 0801 	add.w	r8, r8, #1
 801c370:	9b07      	ldr	r3, [sp, #28]
 801c372:	e7c4      	b.n	801c2fe <_dtoa_r+0x9f6>
 801c374:	9b06      	ldr	r3, [sp, #24]
 801c376:	9a04      	ldr	r2, [sp, #16]
 801c378:	1aeb      	subs	r3, r5, r3
 801c37a:	4293      	cmp	r3, r2
 801c37c:	f805 8c01 	strb.w	r8, [r5, #-1]
 801c380:	d021      	beq.n	801c3c6 <_dtoa_r+0xabe>
 801c382:	4659      	mov	r1, fp
 801c384:	2300      	movs	r3, #0
 801c386:	220a      	movs	r2, #10
 801c388:	4620      	mov	r0, r4
 801c38a:	f000 fdfe 	bl	801cf8a <__multadd>
 801c38e:	45b9      	cmp	r9, r7
 801c390:	4683      	mov	fp, r0
 801c392:	f04f 0300 	mov.w	r3, #0
 801c396:	f04f 020a 	mov.w	r2, #10
 801c39a:	4649      	mov	r1, r9
 801c39c:	4620      	mov	r0, r4
 801c39e:	d105      	bne.n	801c3ac <_dtoa_r+0xaa4>
 801c3a0:	f000 fdf3 	bl	801cf8a <__multadd>
 801c3a4:	4681      	mov	r9, r0
 801c3a6:	4607      	mov	r7, r0
 801c3a8:	9507      	str	r5, [sp, #28]
 801c3aa:	e778      	b.n	801c29e <_dtoa_r+0x996>
 801c3ac:	f000 fded 	bl	801cf8a <__multadd>
 801c3b0:	4639      	mov	r1, r7
 801c3b2:	4681      	mov	r9, r0
 801c3b4:	2300      	movs	r3, #0
 801c3b6:	220a      	movs	r2, #10
 801c3b8:	4620      	mov	r0, r4
 801c3ba:	f000 fde6 	bl	801cf8a <__multadd>
 801c3be:	4607      	mov	r7, r0
 801c3c0:	e7f2      	b.n	801c3a8 <_dtoa_r+0xaa0>
 801c3c2:	f04f 0900 	mov.w	r9, #0
 801c3c6:	4659      	mov	r1, fp
 801c3c8:	2201      	movs	r2, #1
 801c3ca:	4620      	mov	r0, r4
 801c3cc:	f000 ff90 	bl	801d2f0 <__lshift>
 801c3d0:	4631      	mov	r1, r6
 801c3d2:	4683      	mov	fp, r0
 801c3d4:	f000 ffe0 	bl	801d398 <__mcmp>
 801c3d8:	2800      	cmp	r0, #0
 801c3da:	dcb8      	bgt.n	801c34e <_dtoa_r+0xa46>
 801c3dc:	d102      	bne.n	801c3e4 <_dtoa_r+0xadc>
 801c3de:	f018 0f01 	tst.w	r8, #1
 801c3e2:	d1b4      	bne.n	801c34e <_dtoa_r+0xa46>
 801c3e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801c3e8:	1e6a      	subs	r2, r5, #1
 801c3ea:	2b30      	cmp	r3, #48	; 0x30
 801c3ec:	f47f af0f 	bne.w	801c20e <_dtoa_r+0x906>
 801c3f0:	4615      	mov	r5, r2
 801c3f2:	e7f7      	b.n	801c3e4 <_dtoa_r+0xadc>
 801c3f4:	9b06      	ldr	r3, [sp, #24]
 801c3f6:	4293      	cmp	r3, r2
 801c3f8:	d105      	bne.n	801c406 <_dtoa_r+0xafe>
 801c3fa:	2331      	movs	r3, #49	; 0x31
 801c3fc:	9a06      	ldr	r2, [sp, #24]
 801c3fe:	f10a 0a01 	add.w	sl, sl, #1
 801c402:	7013      	strb	r3, [r2, #0]
 801c404:	e703      	b.n	801c20e <_dtoa_r+0x906>
 801c406:	4615      	mov	r5, r2
 801c408:	e7a1      	b.n	801c34e <_dtoa_r+0xa46>
 801c40a:	4b17      	ldr	r3, [pc, #92]	; (801c468 <_dtoa_r+0xb60>)
 801c40c:	f7ff bae1 	b.w	801b9d2 <_dtoa_r+0xca>
 801c410:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801c412:	2b00      	cmp	r3, #0
 801c414:	f47f aabb 	bne.w	801b98e <_dtoa_r+0x86>
 801c418:	4b14      	ldr	r3, [pc, #80]	; (801c46c <_dtoa_r+0xb64>)
 801c41a:	f7ff bada 	b.w	801b9d2 <_dtoa_r+0xca>
 801c41e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801c420:	2b01      	cmp	r3, #1
 801c422:	f77f ae3f 	ble.w	801c0a4 <_dtoa_r+0x79c>
 801c426:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c428:	9308      	str	r3, [sp, #32]
 801c42a:	e653      	b.n	801c0d4 <_dtoa_r+0x7cc>
 801c42c:	9b04      	ldr	r3, [sp, #16]
 801c42e:	2b00      	cmp	r3, #0
 801c430:	dc03      	bgt.n	801c43a <_dtoa_r+0xb32>
 801c432:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801c434:	2b02      	cmp	r3, #2
 801c436:	f73f aed5 	bgt.w	801c1e4 <_dtoa_r+0x8dc>
 801c43a:	9d06      	ldr	r5, [sp, #24]
 801c43c:	4631      	mov	r1, r6
 801c43e:	4658      	mov	r0, fp
 801c440:	f7ff f9d4 	bl	801b7ec <quorem>
 801c444:	9b06      	ldr	r3, [sp, #24]
 801c446:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801c44a:	f805 8b01 	strb.w	r8, [r5], #1
 801c44e:	9a04      	ldr	r2, [sp, #16]
 801c450:	1aeb      	subs	r3, r5, r3
 801c452:	429a      	cmp	r2, r3
 801c454:	ddb5      	ble.n	801c3c2 <_dtoa_r+0xaba>
 801c456:	4659      	mov	r1, fp
 801c458:	2300      	movs	r3, #0
 801c45a:	220a      	movs	r2, #10
 801c45c:	4620      	mov	r0, r4
 801c45e:	f000 fd94 	bl	801cf8a <__multadd>
 801c462:	4683      	mov	fp, r0
 801c464:	e7ea      	b.n	801c43c <_dtoa_r+0xb34>
 801c466:	bf00      	nop
 801c468:	08021d4c 	.word	0x08021d4c
 801c46c:	08021dc8 	.word	0x08021dc8

0801c470 <__sflush_r>:
 801c470:	898a      	ldrh	r2, [r1, #12]
 801c472:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c476:	4605      	mov	r5, r0
 801c478:	0710      	lsls	r0, r2, #28
 801c47a:	460c      	mov	r4, r1
 801c47c:	d458      	bmi.n	801c530 <__sflush_r+0xc0>
 801c47e:	684b      	ldr	r3, [r1, #4]
 801c480:	2b00      	cmp	r3, #0
 801c482:	dc05      	bgt.n	801c490 <__sflush_r+0x20>
 801c484:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801c486:	2b00      	cmp	r3, #0
 801c488:	dc02      	bgt.n	801c490 <__sflush_r+0x20>
 801c48a:	2000      	movs	r0, #0
 801c48c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c490:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c492:	2e00      	cmp	r6, #0
 801c494:	d0f9      	beq.n	801c48a <__sflush_r+0x1a>
 801c496:	2300      	movs	r3, #0
 801c498:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801c49c:	682f      	ldr	r7, [r5, #0]
 801c49e:	6a21      	ldr	r1, [r4, #32]
 801c4a0:	602b      	str	r3, [r5, #0]
 801c4a2:	d032      	beq.n	801c50a <__sflush_r+0x9a>
 801c4a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801c4a6:	89a3      	ldrh	r3, [r4, #12]
 801c4a8:	075a      	lsls	r2, r3, #29
 801c4aa:	d505      	bpl.n	801c4b8 <__sflush_r+0x48>
 801c4ac:	6863      	ldr	r3, [r4, #4]
 801c4ae:	1ac0      	subs	r0, r0, r3
 801c4b0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801c4b2:	b10b      	cbz	r3, 801c4b8 <__sflush_r+0x48>
 801c4b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801c4b6:	1ac0      	subs	r0, r0, r3
 801c4b8:	2300      	movs	r3, #0
 801c4ba:	4602      	mov	r2, r0
 801c4bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801c4be:	6a21      	ldr	r1, [r4, #32]
 801c4c0:	4628      	mov	r0, r5
 801c4c2:	47b0      	blx	r6
 801c4c4:	1c43      	adds	r3, r0, #1
 801c4c6:	89a3      	ldrh	r3, [r4, #12]
 801c4c8:	d106      	bne.n	801c4d8 <__sflush_r+0x68>
 801c4ca:	6829      	ldr	r1, [r5, #0]
 801c4cc:	291d      	cmp	r1, #29
 801c4ce:	d848      	bhi.n	801c562 <__sflush_r+0xf2>
 801c4d0:	4a29      	ldr	r2, [pc, #164]	; (801c578 <__sflush_r+0x108>)
 801c4d2:	40ca      	lsrs	r2, r1
 801c4d4:	07d6      	lsls	r6, r2, #31
 801c4d6:	d544      	bpl.n	801c562 <__sflush_r+0xf2>
 801c4d8:	2200      	movs	r2, #0
 801c4da:	6062      	str	r2, [r4, #4]
 801c4dc:	6922      	ldr	r2, [r4, #16]
 801c4de:	04d9      	lsls	r1, r3, #19
 801c4e0:	6022      	str	r2, [r4, #0]
 801c4e2:	d504      	bpl.n	801c4ee <__sflush_r+0x7e>
 801c4e4:	1c42      	adds	r2, r0, #1
 801c4e6:	d101      	bne.n	801c4ec <__sflush_r+0x7c>
 801c4e8:	682b      	ldr	r3, [r5, #0]
 801c4ea:	b903      	cbnz	r3, 801c4ee <__sflush_r+0x7e>
 801c4ec:	6560      	str	r0, [r4, #84]	; 0x54
 801c4ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c4f0:	602f      	str	r7, [r5, #0]
 801c4f2:	2900      	cmp	r1, #0
 801c4f4:	d0c9      	beq.n	801c48a <__sflush_r+0x1a>
 801c4f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c4fa:	4299      	cmp	r1, r3
 801c4fc:	d002      	beq.n	801c504 <__sflush_r+0x94>
 801c4fe:	4628      	mov	r0, r5
 801c500:	f001 f8fe 	bl	801d700 <_free_r>
 801c504:	2000      	movs	r0, #0
 801c506:	6360      	str	r0, [r4, #52]	; 0x34
 801c508:	e7c0      	b.n	801c48c <__sflush_r+0x1c>
 801c50a:	2301      	movs	r3, #1
 801c50c:	4628      	mov	r0, r5
 801c50e:	47b0      	blx	r6
 801c510:	1c41      	adds	r1, r0, #1
 801c512:	d1c8      	bne.n	801c4a6 <__sflush_r+0x36>
 801c514:	682b      	ldr	r3, [r5, #0]
 801c516:	2b00      	cmp	r3, #0
 801c518:	d0c5      	beq.n	801c4a6 <__sflush_r+0x36>
 801c51a:	2b1d      	cmp	r3, #29
 801c51c:	d001      	beq.n	801c522 <__sflush_r+0xb2>
 801c51e:	2b16      	cmp	r3, #22
 801c520:	d101      	bne.n	801c526 <__sflush_r+0xb6>
 801c522:	602f      	str	r7, [r5, #0]
 801c524:	e7b1      	b.n	801c48a <__sflush_r+0x1a>
 801c526:	89a3      	ldrh	r3, [r4, #12]
 801c528:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c52c:	81a3      	strh	r3, [r4, #12]
 801c52e:	e7ad      	b.n	801c48c <__sflush_r+0x1c>
 801c530:	690f      	ldr	r7, [r1, #16]
 801c532:	2f00      	cmp	r7, #0
 801c534:	d0a9      	beq.n	801c48a <__sflush_r+0x1a>
 801c536:	0793      	lsls	r3, r2, #30
 801c538:	bf18      	it	ne
 801c53a:	2300      	movne	r3, #0
 801c53c:	680e      	ldr	r6, [r1, #0]
 801c53e:	bf08      	it	eq
 801c540:	694b      	ldreq	r3, [r1, #20]
 801c542:	eba6 0807 	sub.w	r8, r6, r7
 801c546:	600f      	str	r7, [r1, #0]
 801c548:	608b      	str	r3, [r1, #8]
 801c54a:	f1b8 0f00 	cmp.w	r8, #0
 801c54e:	dd9c      	ble.n	801c48a <__sflush_r+0x1a>
 801c550:	4643      	mov	r3, r8
 801c552:	463a      	mov	r2, r7
 801c554:	6a21      	ldr	r1, [r4, #32]
 801c556:	4628      	mov	r0, r5
 801c558:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801c55a:	47b0      	blx	r6
 801c55c:	2800      	cmp	r0, #0
 801c55e:	dc06      	bgt.n	801c56e <__sflush_r+0xfe>
 801c560:	89a3      	ldrh	r3, [r4, #12]
 801c562:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c566:	81a3      	strh	r3, [r4, #12]
 801c568:	f04f 30ff 	mov.w	r0, #4294967295
 801c56c:	e78e      	b.n	801c48c <__sflush_r+0x1c>
 801c56e:	4407      	add	r7, r0
 801c570:	eba8 0800 	sub.w	r8, r8, r0
 801c574:	e7e9      	b.n	801c54a <__sflush_r+0xda>
 801c576:	bf00      	nop
 801c578:	20400001 	.word	0x20400001

0801c57c <_fflush_r>:
 801c57c:	b538      	push	{r3, r4, r5, lr}
 801c57e:	690b      	ldr	r3, [r1, #16]
 801c580:	4605      	mov	r5, r0
 801c582:	460c      	mov	r4, r1
 801c584:	b1db      	cbz	r3, 801c5be <_fflush_r+0x42>
 801c586:	b118      	cbz	r0, 801c590 <_fflush_r+0x14>
 801c588:	6983      	ldr	r3, [r0, #24]
 801c58a:	b90b      	cbnz	r3, 801c590 <_fflush_r+0x14>
 801c58c:	f000 f860 	bl	801c650 <__sinit>
 801c590:	4b0c      	ldr	r3, [pc, #48]	; (801c5c4 <_fflush_r+0x48>)
 801c592:	429c      	cmp	r4, r3
 801c594:	d109      	bne.n	801c5aa <_fflush_r+0x2e>
 801c596:	686c      	ldr	r4, [r5, #4]
 801c598:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c59c:	b17b      	cbz	r3, 801c5be <_fflush_r+0x42>
 801c59e:	4621      	mov	r1, r4
 801c5a0:	4628      	mov	r0, r5
 801c5a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c5a6:	f7ff bf63 	b.w	801c470 <__sflush_r>
 801c5aa:	4b07      	ldr	r3, [pc, #28]	; (801c5c8 <_fflush_r+0x4c>)
 801c5ac:	429c      	cmp	r4, r3
 801c5ae:	d101      	bne.n	801c5b4 <_fflush_r+0x38>
 801c5b0:	68ac      	ldr	r4, [r5, #8]
 801c5b2:	e7f1      	b.n	801c598 <_fflush_r+0x1c>
 801c5b4:	4b05      	ldr	r3, [pc, #20]	; (801c5cc <_fflush_r+0x50>)
 801c5b6:	429c      	cmp	r4, r3
 801c5b8:	bf08      	it	eq
 801c5ba:	68ec      	ldreq	r4, [r5, #12]
 801c5bc:	e7ec      	b.n	801c598 <_fflush_r+0x1c>
 801c5be:	2000      	movs	r0, #0
 801c5c0:	bd38      	pop	{r3, r4, r5, pc}
 801c5c2:	bf00      	nop
 801c5c4:	08021df8 	.word	0x08021df8
 801c5c8:	08021e18 	.word	0x08021e18
 801c5cc:	08021dd8 	.word	0x08021dd8

0801c5d0 <std>:
 801c5d0:	2300      	movs	r3, #0
 801c5d2:	b510      	push	{r4, lr}
 801c5d4:	4604      	mov	r4, r0
 801c5d6:	e9c0 3300 	strd	r3, r3, [r0]
 801c5da:	6083      	str	r3, [r0, #8]
 801c5dc:	8181      	strh	r1, [r0, #12]
 801c5de:	6643      	str	r3, [r0, #100]	; 0x64
 801c5e0:	81c2      	strh	r2, [r0, #14]
 801c5e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c5e6:	6183      	str	r3, [r0, #24]
 801c5e8:	4619      	mov	r1, r3
 801c5ea:	2208      	movs	r2, #8
 801c5ec:	305c      	adds	r0, #92	; 0x5c
 801c5ee:	f7fd fa5d 	bl	8019aac <memset>
 801c5f2:	4b05      	ldr	r3, [pc, #20]	; (801c608 <std+0x38>)
 801c5f4:	6224      	str	r4, [r4, #32]
 801c5f6:	6263      	str	r3, [r4, #36]	; 0x24
 801c5f8:	4b04      	ldr	r3, [pc, #16]	; (801c60c <std+0x3c>)
 801c5fa:	62a3      	str	r3, [r4, #40]	; 0x28
 801c5fc:	4b04      	ldr	r3, [pc, #16]	; (801c610 <std+0x40>)
 801c5fe:	62e3      	str	r3, [r4, #44]	; 0x2c
 801c600:	4b04      	ldr	r3, [pc, #16]	; (801c614 <std+0x44>)
 801c602:	6323      	str	r3, [r4, #48]	; 0x30
 801c604:	bd10      	pop	{r4, pc}
 801c606:	bf00      	nop
 801c608:	0801dd8d 	.word	0x0801dd8d
 801c60c:	0801ddaf 	.word	0x0801ddaf
 801c610:	0801dde7 	.word	0x0801dde7
 801c614:	0801de0b 	.word	0x0801de0b

0801c618 <_cleanup_r>:
 801c618:	4901      	ldr	r1, [pc, #4]	; (801c620 <_cleanup_r+0x8>)
 801c61a:	f000 b885 	b.w	801c728 <_fwalk_reent>
 801c61e:	bf00      	nop
 801c620:	0801c57d 	.word	0x0801c57d

0801c624 <__sfmoreglue>:
 801c624:	b570      	push	{r4, r5, r6, lr}
 801c626:	2568      	movs	r5, #104	; 0x68
 801c628:	1e4a      	subs	r2, r1, #1
 801c62a:	4355      	muls	r5, r2
 801c62c:	460e      	mov	r6, r1
 801c62e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801c632:	f001 f8b1 	bl	801d798 <_malloc_r>
 801c636:	4604      	mov	r4, r0
 801c638:	b140      	cbz	r0, 801c64c <__sfmoreglue+0x28>
 801c63a:	2100      	movs	r1, #0
 801c63c:	e9c0 1600 	strd	r1, r6, [r0]
 801c640:	300c      	adds	r0, #12
 801c642:	60a0      	str	r0, [r4, #8]
 801c644:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801c648:	f7fd fa30 	bl	8019aac <memset>
 801c64c:	4620      	mov	r0, r4
 801c64e:	bd70      	pop	{r4, r5, r6, pc}

0801c650 <__sinit>:
 801c650:	6983      	ldr	r3, [r0, #24]
 801c652:	b510      	push	{r4, lr}
 801c654:	4604      	mov	r4, r0
 801c656:	bb33      	cbnz	r3, 801c6a6 <__sinit+0x56>
 801c658:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801c65c:	6503      	str	r3, [r0, #80]	; 0x50
 801c65e:	4b12      	ldr	r3, [pc, #72]	; (801c6a8 <__sinit+0x58>)
 801c660:	4a12      	ldr	r2, [pc, #72]	; (801c6ac <__sinit+0x5c>)
 801c662:	681b      	ldr	r3, [r3, #0]
 801c664:	6282      	str	r2, [r0, #40]	; 0x28
 801c666:	4298      	cmp	r0, r3
 801c668:	bf04      	itt	eq
 801c66a:	2301      	moveq	r3, #1
 801c66c:	6183      	streq	r3, [r0, #24]
 801c66e:	f000 f81f 	bl	801c6b0 <__sfp>
 801c672:	6060      	str	r0, [r4, #4]
 801c674:	4620      	mov	r0, r4
 801c676:	f000 f81b 	bl	801c6b0 <__sfp>
 801c67a:	60a0      	str	r0, [r4, #8]
 801c67c:	4620      	mov	r0, r4
 801c67e:	f000 f817 	bl	801c6b0 <__sfp>
 801c682:	2200      	movs	r2, #0
 801c684:	60e0      	str	r0, [r4, #12]
 801c686:	2104      	movs	r1, #4
 801c688:	6860      	ldr	r0, [r4, #4]
 801c68a:	f7ff ffa1 	bl	801c5d0 <std>
 801c68e:	2201      	movs	r2, #1
 801c690:	2109      	movs	r1, #9
 801c692:	68a0      	ldr	r0, [r4, #8]
 801c694:	f7ff ff9c 	bl	801c5d0 <std>
 801c698:	2202      	movs	r2, #2
 801c69a:	2112      	movs	r1, #18
 801c69c:	68e0      	ldr	r0, [r4, #12]
 801c69e:	f7ff ff97 	bl	801c5d0 <std>
 801c6a2:	2301      	movs	r3, #1
 801c6a4:	61a3      	str	r3, [r4, #24]
 801c6a6:	bd10      	pop	{r4, pc}
 801c6a8:	08021d38 	.word	0x08021d38
 801c6ac:	0801c619 	.word	0x0801c619

0801c6b0 <__sfp>:
 801c6b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c6b2:	4b1b      	ldr	r3, [pc, #108]	; (801c720 <__sfp+0x70>)
 801c6b4:	4607      	mov	r7, r0
 801c6b6:	681e      	ldr	r6, [r3, #0]
 801c6b8:	69b3      	ldr	r3, [r6, #24]
 801c6ba:	b913      	cbnz	r3, 801c6c2 <__sfp+0x12>
 801c6bc:	4630      	mov	r0, r6
 801c6be:	f7ff ffc7 	bl	801c650 <__sinit>
 801c6c2:	3648      	adds	r6, #72	; 0x48
 801c6c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801c6c8:	3b01      	subs	r3, #1
 801c6ca:	d503      	bpl.n	801c6d4 <__sfp+0x24>
 801c6cc:	6833      	ldr	r3, [r6, #0]
 801c6ce:	b133      	cbz	r3, 801c6de <__sfp+0x2e>
 801c6d0:	6836      	ldr	r6, [r6, #0]
 801c6d2:	e7f7      	b.n	801c6c4 <__sfp+0x14>
 801c6d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801c6d8:	b16d      	cbz	r5, 801c6f6 <__sfp+0x46>
 801c6da:	3468      	adds	r4, #104	; 0x68
 801c6dc:	e7f4      	b.n	801c6c8 <__sfp+0x18>
 801c6de:	2104      	movs	r1, #4
 801c6e0:	4638      	mov	r0, r7
 801c6e2:	f7ff ff9f 	bl	801c624 <__sfmoreglue>
 801c6e6:	6030      	str	r0, [r6, #0]
 801c6e8:	2800      	cmp	r0, #0
 801c6ea:	d1f1      	bne.n	801c6d0 <__sfp+0x20>
 801c6ec:	230c      	movs	r3, #12
 801c6ee:	4604      	mov	r4, r0
 801c6f0:	603b      	str	r3, [r7, #0]
 801c6f2:	4620      	mov	r0, r4
 801c6f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c6f6:	4b0b      	ldr	r3, [pc, #44]	; (801c724 <__sfp+0x74>)
 801c6f8:	6665      	str	r5, [r4, #100]	; 0x64
 801c6fa:	e9c4 5500 	strd	r5, r5, [r4]
 801c6fe:	60a5      	str	r5, [r4, #8]
 801c700:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801c704:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801c708:	2208      	movs	r2, #8
 801c70a:	4629      	mov	r1, r5
 801c70c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801c710:	f7fd f9cc 	bl	8019aac <memset>
 801c714:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801c718:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801c71c:	e7e9      	b.n	801c6f2 <__sfp+0x42>
 801c71e:	bf00      	nop
 801c720:	08021d38 	.word	0x08021d38
 801c724:	ffff0001 	.word	0xffff0001

0801c728 <_fwalk_reent>:
 801c728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c72c:	4680      	mov	r8, r0
 801c72e:	4689      	mov	r9, r1
 801c730:	2600      	movs	r6, #0
 801c732:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801c736:	b914      	cbnz	r4, 801c73e <_fwalk_reent+0x16>
 801c738:	4630      	mov	r0, r6
 801c73a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c73e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801c742:	3f01      	subs	r7, #1
 801c744:	d501      	bpl.n	801c74a <_fwalk_reent+0x22>
 801c746:	6824      	ldr	r4, [r4, #0]
 801c748:	e7f5      	b.n	801c736 <_fwalk_reent+0xe>
 801c74a:	89ab      	ldrh	r3, [r5, #12]
 801c74c:	2b01      	cmp	r3, #1
 801c74e:	d907      	bls.n	801c760 <_fwalk_reent+0x38>
 801c750:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c754:	3301      	adds	r3, #1
 801c756:	d003      	beq.n	801c760 <_fwalk_reent+0x38>
 801c758:	4629      	mov	r1, r5
 801c75a:	4640      	mov	r0, r8
 801c75c:	47c8      	blx	r9
 801c75e:	4306      	orrs	r6, r0
 801c760:	3568      	adds	r5, #104	; 0x68
 801c762:	e7ee      	b.n	801c742 <_fwalk_reent+0x1a>

0801c764 <rshift>:
 801c764:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c766:	6906      	ldr	r6, [r0, #16]
 801c768:	114b      	asrs	r3, r1, #5
 801c76a:	429e      	cmp	r6, r3
 801c76c:	f100 0414 	add.w	r4, r0, #20
 801c770:	dd31      	ble.n	801c7d6 <rshift+0x72>
 801c772:	f011 011f 	ands.w	r1, r1, #31
 801c776:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801c77a:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801c77e:	d108      	bne.n	801c792 <rshift+0x2e>
 801c780:	4621      	mov	r1, r4
 801c782:	42b2      	cmp	r2, r6
 801c784:	460b      	mov	r3, r1
 801c786:	d211      	bcs.n	801c7ac <rshift+0x48>
 801c788:	f852 3b04 	ldr.w	r3, [r2], #4
 801c78c:	f841 3b04 	str.w	r3, [r1], #4
 801c790:	e7f7      	b.n	801c782 <rshift+0x1e>
 801c792:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801c796:	4623      	mov	r3, r4
 801c798:	f1c1 0c20 	rsb	ip, r1, #32
 801c79c:	40cd      	lsrs	r5, r1
 801c79e:	3204      	adds	r2, #4
 801c7a0:	42b2      	cmp	r2, r6
 801c7a2:	4617      	mov	r7, r2
 801c7a4:	d30d      	bcc.n	801c7c2 <rshift+0x5e>
 801c7a6:	601d      	str	r5, [r3, #0]
 801c7a8:	b105      	cbz	r5, 801c7ac <rshift+0x48>
 801c7aa:	3304      	adds	r3, #4
 801c7ac:	42a3      	cmp	r3, r4
 801c7ae:	eba3 0204 	sub.w	r2, r3, r4
 801c7b2:	bf08      	it	eq
 801c7b4:	2300      	moveq	r3, #0
 801c7b6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801c7ba:	6102      	str	r2, [r0, #16]
 801c7bc:	bf08      	it	eq
 801c7be:	6143      	streq	r3, [r0, #20]
 801c7c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c7c2:	683f      	ldr	r7, [r7, #0]
 801c7c4:	fa07 f70c 	lsl.w	r7, r7, ip
 801c7c8:	433d      	orrs	r5, r7
 801c7ca:	f843 5b04 	str.w	r5, [r3], #4
 801c7ce:	f852 5b04 	ldr.w	r5, [r2], #4
 801c7d2:	40cd      	lsrs	r5, r1
 801c7d4:	e7e4      	b.n	801c7a0 <rshift+0x3c>
 801c7d6:	4623      	mov	r3, r4
 801c7d8:	e7e8      	b.n	801c7ac <rshift+0x48>

0801c7da <__hexdig_fun>:
 801c7da:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801c7de:	2b09      	cmp	r3, #9
 801c7e0:	d802      	bhi.n	801c7e8 <__hexdig_fun+0xe>
 801c7e2:	3820      	subs	r0, #32
 801c7e4:	b2c0      	uxtb	r0, r0
 801c7e6:	4770      	bx	lr
 801c7e8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801c7ec:	2b05      	cmp	r3, #5
 801c7ee:	d801      	bhi.n	801c7f4 <__hexdig_fun+0x1a>
 801c7f0:	3847      	subs	r0, #71	; 0x47
 801c7f2:	e7f7      	b.n	801c7e4 <__hexdig_fun+0xa>
 801c7f4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801c7f8:	2b05      	cmp	r3, #5
 801c7fa:	d801      	bhi.n	801c800 <__hexdig_fun+0x26>
 801c7fc:	3827      	subs	r0, #39	; 0x27
 801c7fe:	e7f1      	b.n	801c7e4 <__hexdig_fun+0xa>
 801c800:	2000      	movs	r0, #0
 801c802:	4770      	bx	lr

0801c804 <__gethex>:
 801c804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c808:	b08b      	sub	sp, #44	; 0x2c
 801c80a:	9002      	str	r0, [sp, #8]
 801c80c:	9816      	ldr	r0, [sp, #88]	; 0x58
 801c80e:	468a      	mov	sl, r1
 801c810:	4690      	mov	r8, r2
 801c812:	9306      	str	r3, [sp, #24]
 801c814:	f000 fad1 	bl	801cdba <__localeconv_l>
 801c818:	6803      	ldr	r3, [r0, #0]
 801c81a:	f04f 0b00 	mov.w	fp, #0
 801c81e:	4618      	mov	r0, r3
 801c820:	9303      	str	r3, [sp, #12]
 801c822:	f7e3 fcd5 	bl	80001d0 <strlen>
 801c826:	9b03      	ldr	r3, [sp, #12]
 801c828:	9001      	str	r0, [sp, #4]
 801c82a:	4403      	add	r3, r0
 801c82c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801c830:	9307      	str	r3, [sp, #28]
 801c832:	f8da 3000 	ldr.w	r3, [sl]
 801c836:	3302      	adds	r3, #2
 801c838:	461f      	mov	r7, r3
 801c83a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801c83e:	2830      	cmp	r0, #48	; 0x30
 801c840:	d06c      	beq.n	801c91c <__gethex+0x118>
 801c842:	f7ff ffca 	bl	801c7da <__hexdig_fun>
 801c846:	4604      	mov	r4, r0
 801c848:	2800      	cmp	r0, #0
 801c84a:	d16a      	bne.n	801c922 <__gethex+0x11e>
 801c84c:	9a01      	ldr	r2, [sp, #4]
 801c84e:	9903      	ldr	r1, [sp, #12]
 801c850:	4638      	mov	r0, r7
 801c852:	f7fe f837 	bl	801a8c4 <strncmp>
 801c856:	2800      	cmp	r0, #0
 801c858:	d166      	bne.n	801c928 <__gethex+0x124>
 801c85a:	9b01      	ldr	r3, [sp, #4]
 801c85c:	5cf8      	ldrb	r0, [r7, r3]
 801c85e:	18fe      	adds	r6, r7, r3
 801c860:	f7ff ffbb 	bl	801c7da <__hexdig_fun>
 801c864:	2800      	cmp	r0, #0
 801c866:	d062      	beq.n	801c92e <__gethex+0x12a>
 801c868:	4633      	mov	r3, r6
 801c86a:	7818      	ldrb	r0, [r3, #0]
 801c86c:	461f      	mov	r7, r3
 801c86e:	2830      	cmp	r0, #48	; 0x30
 801c870:	f103 0301 	add.w	r3, r3, #1
 801c874:	d0f9      	beq.n	801c86a <__gethex+0x66>
 801c876:	f7ff ffb0 	bl	801c7da <__hexdig_fun>
 801c87a:	fab0 f580 	clz	r5, r0
 801c87e:	4634      	mov	r4, r6
 801c880:	f04f 0b01 	mov.w	fp, #1
 801c884:	096d      	lsrs	r5, r5, #5
 801c886:	463a      	mov	r2, r7
 801c888:	4616      	mov	r6, r2
 801c88a:	7830      	ldrb	r0, [r6, #0]
 801c88c:	3201      	adds	r2, #1
 801c88e:	f7ff ffa4 	bl	801c7da <__hexdig_fun>
 801c892:	2800      	cmp	r0, #0
 801c894:	d1f8      	bne.n	801c888 <__gethex+0x84>
 801c896:	9a01      	ldr	r2, [sp, #4]
 801c898:	9903      	ldr	r1, [sp, #12]
 801c89a:	4630      	mov	r0, r6
 801c89c:	f7fe f812 	bl	801a8c4 <strncmp>
 801c8a0:	b950      	cbnz	r0, 801c8b8 <__gethex+0xb4>
 801c8a2:	b954      	cbnz	r4, 801c8ba <__gethex+0xb6>
 801c8a4:	9b01      	ldr	r3, [sp, #4]
 801c8a6:	18f4      	adds	r4, r6, r3
 801c8a8:	4622      	mov	r2, r4
 801c8aa:	4616      	mov	r6, r2
 801c8ac:	7830      	ldrb	r0, [r6, #0]
 801c8ae:	3201      	adds	r2, #1
 801c8b0:	f7ff ff93 	bl	801c7da <__hexdig_fun>
 801c8b4:	2800      	cmp	r0, #0
 801c8b6:	d1f8      	bne.n	801c8aa <__gethex+0xa6>
 801c8b8:	b10c      	cbz	r4, 801c8be <__gethex+0xba>
 801c8ba:	1ba4      	subs	r4, r4, r6
 801c8bc:	00a4      	lsls	r4, r4, #2
 801c8be:	7833      	ldrb	r3, [r6, #0]
 801c8c0:	2b50      	cmp	r3, #80	; 0x50
 801c8c2:	d001      	beq.n	801c8c8 <__gethex+0xc4>
 801c8c4:	2b70      	cmp	r3, #112	; 0x70
 801c8c6:	d140      	bne.n	801c94a <__gethex+0x146>
 801c8c8:	7873      	ldrb	r3, [r6, #1]
 801c8ca:	2b2b      	cmp	r3, #43	; 0x2b
 801c8cc:	d031      	beq.n	801c932 <__gethex+0x12e>
 801c8ce:	2b2d      	cmp	r3, #45	; 0x2d
 801c8d0:	d033      	beq.n	801c93a <__gethex+0x136>
 801c8d2:	f04f 0900 	mov.w	r9, #0
 801c8d6:	1c71      	adds	r1, r6, #1
 801c8d8:	7808      	ldrb	r0, [r1, #0]
 801c8da:	f7ff ff7e 	bl	801c7da <__hexdig_fun>
 801c8de:	1e43      	subs	r3, r0, #1
 801c8e0:	b2db      	uxtb	r3, r3
 801c8e2:	2b18      	cmp	r3, #24
 801c8e4:	d831      	bhi.n	801c94a <__gethex+0x146>
 801c8e6:	f1a0 0210 	sub.w	r2, r0, #16
 801c8ea:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801c8ee:	f7ff ff74 	bl	801c7da <__hexdig_fun>
 801c8f2:	1e43      	subs	r3, r0, #1
 801c8f4:	b2db      	uxtb	r3, r3
 801c8f6:	2b18      	cmp	r3, #24
 801c8f8:	d922      	bls.n	801c940 <__gethex+0x13c>
 801c8fa:	f1b9 0f00 	cmp.w	r9, #0
 801c8fe:	d000      	beq.n	801c902 <__gethex+0xfe>
 801c900:	4252      	negs	r2, r2
 801c902:	4414      	add	r4, r2
 801c904:	f8ca 1000 	str.w	r1, [sl]
 801c908:	b30d      	cbz	r5, 801c94e <__gethex+0x14a>
 801c90a:	f1bb 0f00 	cmp.w	fp, #0
 801c90e:	bf0c      	ite	eq
 801c910:	2706      	moveq	r7, #6
 801c912:	2700      	movne	r7, #0
 801c914:	4638      	mov	r0, r7
 801c916:	b00b      	add	sp, #44	; 0x2c
 801c918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c91c:	f10b 0b01 	add.w	fp, fp, #1
 801c920:	e78a      	b.n	801c838 <__gethex+0x34>
 801c922:	2500      	movs	r5, #0
 801c924:	462c      	mov	r4, r5
 801c926:	e7ae      	b.n	801c886 <__gethex+0x82>
 801c928:	463e      	mov	r6, r7
 801c92a:	2501      	movs	r5, #1
 801c92c:	e7c7      	b.n	801c8be <__gethex+0xba>
 801c92e:	4604      	mov	r4, r0
 801c930:	e7fb      	b.n	801c92a <__gethex+0x126>
 801c932:	f04f 0900 	mov.w	r9, #0
 801c936:	1cb1      	adds	r1, r6, #2
 801c938:	e7ce      	b.n	801c8d8 <__gethex+0xd4>
 801c93a:	f04f 0901 	mov.w	r9, #1
 801c93e:	e7fa      	b.n	801c936 <__gethex+0x132>
 801c940:	230a      	movs	r3, #10
 801c942:	fb03 0202 	mla	r2, r3, r2, r0
 801c946:	3a10      	subs	r2, #16
 801c948:	e7cf      	b.n	801c8ea <__gethex+0xe6>
 801c94a:	4631      	mov	r1, r6
 801c94c:	e7da      	b.n	801c904 <__gethex+0x100>
 801c94e:	4629      	mov	r1, r5
 801c950:	1bf3      	subs	r3, r6, r7
 801c952:	3b01      	subs	r3, #1
 801c954:	2b07      	cmp	r3, #7
 801c956:	dc49      	bgt.n	801c9ec <__gethex+0x1e8>
 801c958:	9802      	ldr	r0, [sp, #8]
 801c95a:	f000 facb 	bl	801cef4 <_Balloc>
 801c95e:	f04f 0b00 	mov.w	fp, #0
 801c962:	4605      	mov	r5, r0
 801c964:	46da      	mov	sl, fp
 801c966:	9b01      	ldr	r3, [sp, #4]
 801c968:	f100 0914 	add.w	r9, r0, #20
 801c96c:	f1c3 0301 	rsb	r3, r3, #1
 801c970:	f8cd 9010 	str.w	r9, [sp, #16]
 801c974:	9308      	str	r3, [sp, #32]
 801c976:	42b7      	cmp	r7, r6
 801c978:	d33b      	bcc.n	801c9f2 <__gethex+0x1ee>
 801c97a:	9804      	ldr	r0, [sp, #16]
 801c97c:	f840 ab04 	str.w	sl, [r0], #4
 801c980:	eba0 0009 	sub.w	r0, r0, r9
 801c984:	1080      	asrs	r0, r0, #2
 801c986:	6128      	str	r0, [r5, #16]
 801c988:	0147      	lsls	r7, r0, #5
 801c98a:	4650      	mov	r0, sl
 801c98c:	f000 fb76 	bl	801d07c <__hi0bits>
 801c990:	f8d8 6000 	ldr.w	r6, [r8]
 801c994:	1a3f      	subs	r7, r7, r0
 801c996:	42b7      	cmp	r7, r6
 801c998:	dd64      	ble.n	801ca64 <__gethex+0x260>
 801c99a:	1bbf      	subs	r7, r7, r6
 801c99c:	4639      	mov	r1, r7
 801c99e:	4628      	mov	r0, r5
 801c9a0:	f000 fe7f 	bl	801d6a2 <__any_on>
 801c9a4:	4682      	mov	sl, r0
 801c9a6:	b178      	cbz	r0, 801c9c8 <__gethex+0x1c4>
 801c9a8:	f04f 0a01 	mov.w	sl, #1
 801c9ac:	1e7b      	subs	r3, r7, #1
 801c9ae:	1159      	asrs	r1, r3, #5
 801c9b0:	f003 021f 	and.w	r2, r3, #31
 801c9b4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801c9b8:	fa0a f202 	lsl.w	r2, sl, r2
 801c9bc:	420a      	tst	r2, r1
 801c9be:	d003      	beq.n	801c9c8 <__gethex+0x1c4>
 801c9c0:	4553      	cmp	r3, sl
 801c9c2:	dc46      	bgt.n	801ca52 <__gethex+0x24e>
 801c9c4:	f04f 0a02 	mov.w	sl, #2
 801c9c8:	4639      	mov	r1, r7
 801c9ca:	4628      	mov	r0, r5
 801c9cc:	f7ff feca 	bl	801c764 <rshift>
 801c9d0:	443c      	add	r4, r7
 801c9d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c9d6:	42a3      	cmp	r3, r4
 801c9d8:	da52      	bge.n	801ca80 <__gethex+0x27c>
 801c9da:	4629      	mov	r1, r5
 801c9dc:	9802      	ldr	r0, [sp, #8]
 801c9de:	f000 fabd 	bl	801cf5c <_Bfree>
 801c9e2:	2300      	movs	r3, #0
 801c9e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c9e6:	27a3      	movs	r7, #163	; 0xa3
 801c9e8:	6013      	str	r3, [r2, #0]
 801c9ea:	e793      	b.n	801c914 <__gethex+0x110>
 801c9ec:	3101      	adds	r1, #1
 801c9ee:	105b      	asrs	r3, r3, #1
 801c9f0:	e7b0      	b.n	801c954 <__gethex+0x150>
 801c9f2:	1e73      	subs	r3, r6, #1
 801c9f4:	9305      	str	r3, [sp, #20]
 801c9f6:	9a07      	ldr	r2, [sp, #28]
 801c9f8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801c9fc:	4293      	cmp	r3, r2
 801c9fe:	d018      	beq.n	801ca32 <__gethex+0x22e>
 801ca00:	f1bb 0f20 	cmp.w	fp, #32
 801ca04:	d107      	bne.n	801ca16 <__gethex+0x212>
 801ca06:	9b04      	ldr	r3, [sp, #16]
 801ca08:	f8c3 a000 	str.w	sl, [r3]
 801ca0c:	f04f 0a00 	mov.w	sl, #0
 801ca10:	46d3      	mov	fp, sl
 801ca12:	3304      	adds	r3, #4
 801ca14:	9304      	str	r3, [sp, #16]
 801ca16:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801ca1a:	f7ff fede 	bl	801c7da <__hexdig_fun>
 801ca1e:	f000 000f 	and.w	r0, r0, #15
 801ca22:	fa00 f00b 	lsl.w	r0, r0, fp
 801ca26:	ea4a 0a00 	orr.w	sl, sl, r0
 801ca2a:	f10b 0b04 	add.w	fp, fp, #4
 801ca2e:	9b05      	ldr	r3, [sp, #20]
 801ca30:	e00d      	b.n	801ca4e <__gethex+0x24a>
 801ca32:	9b05      	ldr	r3, [sp, #20]
 801ca34:	9a08      	ldr	r2, [sp, #32]
 801ca36:	4413      	add	r3, r2
 801ca38:	42bb      	cmp	r3, r7
 801ca3a:	d3e1      	bcc.n	801ca00 <__gethex+0x1fc>
 801ca3c:	4618      	mov	r0, r3
 801ca3e:	9a01      	ldr	r2, [sp, #4]
 801ca40:	9903      	ldr	r1, [sp, #12]
 801ca42:	9309      	str	r3, [sp, #36]	; 0x24
 801ca44:	f7fd ff3e 	bl	801a8c4 <strncmp>
 801ca48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ca4a:	2800      	cmp	r0, #0
 801ca4c:	d1d8      	bne.n	801ca00 <__gethex+0x1fc>
 801ca4e:	461e      	mov	r6, r3
 801ca50:	e791      	b.n	801c976 <__gethex+0x172>
 801ca52:	1eb9      	subs	r1, r7, #2
 801ca54:	4628      	mov	r0, r5
 801ca56:	f000 fe24 	bl	801d6a2 <__any_on>
 801ca5a:	2800      	cmp	r0, #0
 801ca5c:	d0b2      	beq.n	801c9c4 <__gethex+0x1c0>
 801ca5e:	f04f 0a03 	mov.w	sl, #3
 801ca62:	e7b1      	b.n	801c9c8 <__gethex+0x1c4>
 801ca64:	da09      	bge.n	801ca7a <__gethex+0x276>
 801ca66:	1bf7      	subs	r7, r6, r7
 801ca68:	4629      	mov	r1, r5
 801ca6a:	463a      	mov	r2, r7
 801ca6c:	9802      	ldr	r0, [sp, #8]
 801ca6e:	f000 fc3f 	bl	801d2f0 <__lshift>
 801ca72:	4605      	mov	r5, r0
 801ca74:	1be4      	subs	r4, r4, r7
 801ca76:	f100 0914 	add.w	r9, r0, #20
 801ca7a:	f04f 0a00 	mov.w	sl, #0
 801ca7e:	e7a8      	b.n	801c9d2 <__gethex+0x1ce>
 801ca80:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801ca84:	42a0      	cmp	r0, r4
 801ca86:	dd6b      	ble.n	801cb60 <__gethex+0x35c>
 801ca88:	1b04      	subs	r4, r0, r4
 801ca8a:	42a6      	cmp	r6, r4
 801ca8c:	dc2e      	bgt.n	801caec <__gethex+0x2e8>
 801ca8e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801ca92:	2b02      	cmp	r3, #2
 801ca94:	d022      	beq.n	801cadc <__gethex+0x2d8>
 801ca96:	2b03      	cmp	r3, #3
 801ca98:	d024      	beq.n	801cae4 <__gethex+0x2e0>
 801ca9a:	2b01      	cmp	r3, #1
 801ca9c:	d115      	bne.n	801caca <__gethex+0x2c6>
 801ca9e:	42a6      	cmp	r6, r4
 801caa0:	d113      	bne.n	801caca <__gethex+0x2c6>
 801caa2:	2e01      	cmp	r6, #1
 801caa4:	dc0b      	bgt.n	801cabe <__gethex+0x2ba>
 801caa6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801caaa:	9a06      	ldr	r2, [sp, #24]
 801caac:	2762      	movs	r7, #98	; 0x62
 801caae:	6013      	str	r3, [r2, #0]
 801cab0:	2301      	movs	r3, #1
 801cab2:	612b      	str	r3, [r5, #16]
 801cab4:	f8c9 3000 	str.w	r3, [r9]
 801cab8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801caba:	601d      	str	r5, [r3, #0]
 801cabc:	e72a      	b.n	801c914 <__gethex+0x110>
 801cabe:	1e71      	subs	r1, r6, #1
 801cac0:	4628      	mov	r0, r5
 801cac2:	f000 fdee 	bl	801d6a2 <__any_on>
 801cac6:	2800      	cmp	r0, #0
 801cac8:	d1ed      	bne.n	801caa6 <__gethex+0x2a2>
 801caca:	4629      	mov	r1, r5
 801cacc:	9802      	ldr	r0, [sp, #8]
 801cace:	f000 fa45 	bl	801cf5c <_Bfree>
 801cad2:	2300      	movs	r3, #0
 801cad4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801cad6:	2750      	movs	r7, #80	; 0x50
 801cad8:	6013      	str	r3, [r2, #0]
 801cada:	e71b      	b.n	801c914 <__gethex+0x110>
 801cadc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cade:	2b00      	cmp	r3, #0
 801cae0:	d0e1      	beq.n	801caa6 <__gethex+0x2a2>
 801cae2:	e7f2      	b.n	801caca <__gethex+0x2c6>
 801cae4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cae6:	2b00      	cmp	r3, #0
 801cae8:	d1dd      	bne.n	801caa6 <__gethex+0x2a2>
 801caea:	e7ee      	b.n	801caca <__gethex+0x2c6>
 801caec:	1e67      	subs	r7, r4, #1
 801caee:	f1ba 0f00 	cmp.w	sl, #0
 801caf2:	d132      	bne.n	801cb5a <__gethex+0x356>
 801caf4:	b127      	cbz	r7, 801cb00 <__gethex+0x2fc>
 801caf6:	4639      	mov	r1, r7
 801caf8:	4628      	mov	r0, r5
 801cafa:	f000 fdd2 	bl	801d6a2 <__any_on>
 801cafe:	4682      	mov	sl, r0
 801cb00:	2301      	movs	r3, #1
 801cb02:	117a      	asrs	r2, r7, #5
 801cb04:	f007 071f 	and.w	r7, r7, #31
 801cb08:	fa03 f707 	lsl.w	r7, r3, r7
 801cb0c:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801cb10:	4621      	mov	r1, r4
 801cb12:	421f      	tst	r7, r3
 801cb14:	f04f 0702 	mov.w	r7, #2
 801cb18:	4628      	mov	r0, r5
 801cb1a:	bf18      	it	ne
 801cb1c:	f04a 0a02 	orrne.w	sl, sl, #2
 801cb20:	1b36      	subs	r6, r6, r4
 801cb22:	f7ff fe1f 	bl	801c764 <rshift>
 801cb26:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801cb2a:	f1ba 0f00 	cmp.w	sl, #0
 801cb2e:	d048      	beq.n	801cbc2 <__gethex+0x3be>
 801cb30:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801cb34:	2b02      	cmp	r3, #2
 801cb36:	d015      	beq.n	801cb64 <__gethex+0x360>
 801cb38:	2b03      	cmp	r3, #3
 801cb3a:	d017      	beq.n	801cb6c <__gethex+0x368>
 801cb3c:	2b01      	cmp	r3, #1
 801cb3e:	d109      	bne.n	801cb54 <__gethex+0x350>
 801cb40:	f01a 0f02 	tst.w	sl, #2
 801cb44:	d006      	beq.n	801cb54 <__gethex+0x350>
 801cb46:	f8d9 3000 	ldr.w	r3, [r9]
 801cb4a:	ea4a 0a03 	orr.w	sl, sl, r3
 801cb4e:	f01a 0f01 	tst.w	sl, #1
 801cb52:	d10e      	bne.n	801cb72 <__gethex+0x36e>
 801cb54:	f047 0710 	orr.w	r7, r7, #16
 801cb58:	e033      	b.n	801cbc2 <__gethex+0x3be>
 801cb5a:	f04f 0a01 	mov.w	sl, #1
 801cb5e:	e7cf      	b.n	801cb00 <__gethex+0x2fc>
 801cb60:	2701      	movs	r7, #1
 801cb62:	e7e2      	b.n	801cb2a <__gethex+0x326>
 801cb64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cb66:	f1c3 0301 	rsb	r3, r3, #1
 801cb6a:	9315      	str	r3, [sp, #84]	; 0x54
 801cb6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801cb6e:	2b00      	cmp	r3, #0
 801cb70:	d0f0      	beq.n	801cb54 <__gethex+0x350>
 801cb72:	f04f 0c00 	mov.w	ip, #0
 801cb76:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801cb7a:	f105 0314 	add.w	r3, r5, #20
 801cb7e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801cb82:	eb03 010a 	add.w	r1, r3, sl
 801cb86:	4618      	mov	r0, r3
 801cb88:	f853 2b04 	ldr.w	r2, [r3], #4
 801cb8c:	f1b2 3fff 	cmp.w	r2, #4294967295
 801cb90:	d01c      	beq.n	801cbcc <__gethex+0x3c8>
 801cb92:	3201      	adds	r2, #1
 801cb94:	6002      	str	r2, [r0, #0]
 801cb96:	2f02      	cmp	r7, #2
 801cb98:	f105 0314 	add.w	r3, r5, #20
 801cb9c:	d138      	bne.n	801cc10 <__gethex+0x40c>
 801cb9e:	f8d8 2000 	ldr.w	r2, [r8]
 801cba2:	3a01      	subs	r2, #1
 801cba4:	42b2      	cmp	r2, r6
 801cba6:	d10a      	bne.n	801cbbe <__gethex+0x3ba>
 801cba8:	2201      	movs	r2, #1
 801cbaa:	1171      	asrs	r1, r6, #5
 801cbac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801cbb0:	f006 061f 	and.w	r6, r6, #31
 801cbb4:	fa02 f606 	lsl.w	r6, r2, r6
 801cbb8:	421e      	tst	r6, r3
 801cbba:	bf18      	it	ne
 801cbbc:	4617      	movne	r7, r2
 801cbbe:	f047 0720 	orr.w	r7, r7, #32
 801cbc2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801cbc4:	601d      	str	r5, [r3, #0]
 801cbc6:	9b06      	ldr	r3, [sp, #24]
 801cbc8:	601c      	str	r4, [r3, #0]
 801cbca:	e6a3      	b.n	801c914 <__gethex+0x110>
 801cbcc:	4299      	cmp	r1, r3
 801cbce:	f843 cc04 	str.w	ip, [r3, #-4]
 801cbd2:	d8d8      	bhi.n	801cb86 <__gethex+0x382>
 801cbd4:	68ab      	ldr	r3, [r5, #8]
 801cbd6:	4599      	cmp	r9, r3
 801cbd8:	db12      	blt.n	801cc00 <__gethex+0x3fc>
 801cbda:	6869      	ldr	r1, [r5, #4]
 801cbdc:	9802      	ldr	r0, [sp, #8]
 801cbde:	3101      	adds	r1, #1
 801cbe0:	f000 f988 	bl	801cef4 <_Balloc>
 801cbe4:	4683      	mov	fp, r0
 801cbe6:	692a      	ldr	r2, [r5, #16]
 801cbe8:	f105 010c 	add.w	r1, r5, #12
 801cbec:	3202      	adds	r2, #2
 801cbee:	0092      	lsls	r2, r2, #2
 801cbf0:	300c      	adds	r0, #12
 801cbf2:	f7fc ff50 	bl	8019a96 <memcpy>
 801cbf6:	4629      	mov	r1, r5
 801cbf8:	9802      	ldr	r0, [sp, #8]
 801cbfa:	f000 f9af 	bl	801cf5c <_Bfree>
 801cbfe:	465d      	mov	r5, fp
 801cc00:	692b      	ldr	r3, [r5, #16]
 801cc02:	1c5a      	adds	r2, r3, #1
 801cc04:	612a      	str	r2, [r5, #16]
 801cc06:	2201      	movs	r2, #1
 801cc08:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801cc0c:	615a      	str	r2, [r3, #20]
 801cc0e:	e7c2      	b.n	801cb96 <__gethex+0x392>
 801cc10:	692a      	ldr	r2, [r5, #16]
 801cc12:	454a      	cmp	r2, r9
 801cc14:	dd0b      	ble.n	801cc2e <__gethex+0x42a>
 801cc16:	2101      	movs	r1, #1
 801cc18:	4628      	mov	r0, r5
 801cc1a:	f7ff fda3 	bl	801c764 <rshift>
 801cc1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801cc22:	3401      	adds	r4, #1
 801cc24:	42a3      	cmp	r3, r4
 801cc26:	f6ff aed8 	blt.w	801c9da <__gethex+0x1d6>
 801cc2a:	2701      	movs	r7, #1
 801cc2c:	e7c7      	b.n	801cbbe <__gethex+0x3ba>
 801cc2e:	f016 061f 	ands.w	r6, r6, #31
 801cc32:	d0fa      	beq.n	801cc2a <__gethex+0x426>
 801cc34:	449a      	add	sl, r3
 801cc36:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801cc3a:	f000 fa1f 	bl	801d07c <__hi0bits>
 801cc3e:	f1c6 0620 	rsb	r6, r6, #32
 801cc42:	42b0      	cmp	r0, r6
 801cc44:	dbe7      	blt.n	801cc16 <__gethex+0x412>
 801cc46:	e7f0      	b.n	801cc2a <__gethex+0x426>

0801cc48 <L_shift>:
 801cc48:	f1c2 0208 	rsb	r2, r2, #8
 801cc4c:	0092      	lsls	r2, r2, #2
 801cc4e:	b570      	push	{r4, r5, r6, lr}
 801cc50:	f1c2 0620 	rsb	r6, r2, #32
 801cc54:	6843      	ldr	r3, [r0, #4]
 801cc56:	6804      	ldr	r4, [r0, #0]
 801cc58:	fa03 f506 	lsl.w	r5, r3, r6
 801cc5c:	432c      	orrs	r4, r5
 801cc5e:	40d3      	lsrs	r3, r2
 801cc60:	6004      	str	r4, [r0, #0]
 801cc62:	f840 3f04 	str.w	r3, [r0, #4]!
 801cc66:	4288      	cmp	r0, r1
 801cc68:	d3f4      	bcc.n	801cc54 <L_shift+0xc>
 801cc6a:	bd70      	pop	{r4, r5, r6, pc}

0801cc6c <__match>:
 801cc6c:	b530      	push	{r4, r5, lr}
 801cc6e:	6803      	ldr	r3, [r0, #0]
 801cc70:	3301      	adds	r3, #1
 801cc72:	f811 4b01 	ldrb.w	r4, [r1], #1
 801cc76:	b914      	cbnz	r4, 801cc7e <__match+0x12>
 801cc78:	6003      	str	r3, [r0, #0]
 801cc7a:	2001      	movs	r0, #1
 801cc7c:	bd30      	pop	{r4, r5, pc}
 801cc7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cc82:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801cc86:	2d19      	cmp	r5, #25
 801cc88:	bf98      	it	ls
 801cc8a:	3220      	addls	r2, #32
 801cc8c:	42a2      	cmp	r2, r4
 801cc8e:	d0f0      	beq.n	801cc72 <__match+0x6>
 801cc90:	2000      	movs	r0, #0
 801cc92:	e7f3      	b.n	801cc7c <__match+0x10>

0801cc94 <__hexnan>:
 801cc94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc98:	2500      	movs	r5, #0
 801cc9a:	680b      	ldr	r3, [r1, #0]
 801cc9c:	4682      	mov	sl, r0
 801cc9e:	115f      	asrs	r7, r3, #5
 801cca0:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801cca4:	f013 031f 	ands.w	r3, r3, #31
 801cca8:	bf18      	it	ne
 801ccaa:	3704      	addne	r7, #4
 801ccac:	1f3e      	subs	r6, r7, #4
 801ccae:	4690      	mov	r8, r2
 801ccb0:	46b1      	mov	r9, r6
 801ccb2:	4634      	mov	r4, r6
 801ccb4:	46ab      	mov	fp, r5
 801ccb6:	b087      	sub	sp, #28
 801ccb8:	6801      	ldr	r1, [r0, #0]
 801ccba:	9301      	str	r3, [sp, #4]
 801ccbc:	f847 5c04 	str.w	r5, [r7, #-4]
 801ccc0:	9502      	str	r5, [sp, #8]
 801ccc2:	784a      	ldrb	r2, [r1, #1]
 801ccc4:	1c4b      	adds	r3, r1, #1
 801ccc6:	9303      	str	r3, [sp, #12]
 801ccc8:	b342      	cbz	r2, 801cd1c <__hexnan+0x88>
 801ccca:	4610      	mov	r0, r2
 801cccc:	9105      	str	r1, [sp, #20]
 801ccce:	9204      	str	r2, [sp, #16]
 801ccd0:	f7ff fd83 	bl	801c7da <__hexdig_fun>
 801ccd4:	2800      	cmp	r0, #0
 801ccd6:	d143      	bne.n	801cd60 <__hexnan+0xcc>
 801ccd8:	9a04      	ldr	r2, [sp, #16]
 801ccda:	9905      	ldr	r1, [sp, #20]
 801ccdc:	2a20      	cmp	r2, #32
 801ccde:	d818      	bhi.n	801cd12 <__hexnan+0x7e>
 801cce0:	9b02      	ldr	r3, [sp, #8]
 801cce2:	459b      	cmp	fp, r3
 801cce4:	dd13      	ble.n	801cd0e <__hexnan+0x7a>
 801cce6:	454c      	cmp	r4, r9
 801cce8:	d206      	bcs.n	801ccf8 <__hexnan+0x64>
 801ccea:	2d07      	cmp	r5, #7
 801ccec:	dc04      	bgt.n	801ccf8 <__hexnan+0x64>
 801ccee:	462a      	mov	r2, r5
 801ccf0:	4649      	mov	r1, r9
 801ccf2:	4620      	mov	r0, r4
 801ccf4:	f7ff ffa8 	bl	801cc48 <L_shift>
 801ccf8:	4544      	cmp	r4, r8
 801ccfa:	d944      	bls.n	801cd86 <__hexnan+0xf2>
 801ccfc:	2300      	movs	r3, #0
 801ccfe:	f1a4 0904 	sub.w	r9, r4, #4
 801cd02:	f844 3c04 	str.w	r3, [r4, #-4]
 801cd06:	461d      	mov	r5, r3
 801cd08:	464c      	mov	r4, r9
 801cd0a:	f8cd b008 	str.w	fp, [sp, #8]
 801cd0e:	9903      	ldr	r1, [sp, #12]
 801cd10:	e7d7      	b.n	801ccc2 <__hexnan+0x2e>
 801cd12:	2a29      	cmp	r2, #41	; 0x29
 801cd14:	d14a      	bne.n	801cdac <__hexnan+0x118>
 801cd16:	3102      	adds	r1, #2
 801cd18:	f8ca 1000 	str.w	r1, [sl]
 801cd1c:	f1bb 0f00 	cmp.w	fp, #0
 801cd20:	d044      	beq.n	801cdac <__hexnan+0x118>
 801cd22:	454c      	cmp	r4, r9
 801cd24:	d206      	bcs.n	801cd34 <__hexnan+0xa0>
 801cd26:	2d07      	cmp	r5, #7
 801cd28:	dc04      	bgt.n	801cd34 <__hexnan+0xa0>
 801cd2a:	462a      	mov	r2, r5
 801cd2c:	4649      	mov	r1, r9
 801cd2e:	4620      	mov	r0, r4
 801cd30:	f7ff ff8a 	bl	801cc48 <L_shift>
 801cd34:	4544      	cmp	r4, r8
 801cd36:	d928      	bls.n	801cd8a <__hexnan+0xf6>
 801cd38:	4643      	mov	r3, r8
 801cd3a:	f854 2b04 	ldr.w	r2, [r4], #4
 801cd3e:	42a6      	cmp	r6, r4
 801cd40:	f843 2b04 	str.w	r2, [r3], #4
 801cd44:	d2f9      	bcs.n	801cd3a <__hexnan+0xa6>
 801cd46:	2200      	movs	r2, #0
 801cd48:	f843 2b04 	str.w	r2, [r3], #4
 801cd4c:	429e      	cmp	r6, r3
 801cd4e:	d2fb      	bcs.n	801cd48 <__hexnan+0xb4>
 801cd50:	6833      	ldr	r3, [r6, #0]
 801cd52:	b91b      	cbnz	r3, 801cd5c <__hexnan+0xc8>
 801cd54:	4546      	cmp	r6, r8
 801cd56:	d127      	bne.n	801cda8 <__hexnan+0x114>
 801cd58:	2301      	movs	r3, #1
 801cd5a:	6033      	str	r3, [r6, #0]
 801cd5c:	2005      	movs	r0, #5
 801cd5e:	e026      	b.n	801cdae <__hexnan+0x11a>
 801cd60:	3501      	adds	r5, #1
 801cd62:	2d08      	cmp	r5, #8
 801cd64:	f10b 0b01 	add.w	fp, fp, #1
 801cd68:	dd06      	ble.n	801cd78 <__hexnan+0xe4>
 801cd6a:	4544      	cmp	r4, r8
 801cd6c:	d9cf      	bls.n	801cd0e <__hexnan+0x7a>
 801cd6e:	2300      	movs	r3, #0
 801cd70:	2501      	movs	r5, #1
 801cd72:	f844 3c04 	str.w	r3, [r4, #-4]
 801cd76:	3c04      	subs	r4, #4
 801cd78:	6822      	ldr	r2, [r4, #0]
 801cd7a:	f000 000f 	and.w	r0, r0, #15
 801cd7e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801cd82:	6020      	str	r0, [r4, #0]
 801cd84:	e7c3      	b.n	801cd0e <__hexnan+0x7a>
 801cd86:	2508      	movs	r5, #8
 801cd88:	e7c1      	b.n	801cd0e <__hexnan+0x7a>
 801cd8a:	9b01      	ldr	r3, [sp, #4]
 801cd8c:	2b00      	cmp	r3, #0
 801cd8e:	d0df      	beq.n	801cd50 <__hexnan+0xbc>
 801cd90:	f04f 32ff 	mov.w	r2, #4294967295
 801cd94:	f1c3 0320 	rsb	r3, r3, #32
 801cd98:	fa22 f303 	lsr.w	r3, r2, r3
 801cd9c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 801cda0:	401a      	ands	r2, r3
 801cda2:	f847 2c04 	str.w	r2, [r7, #-4]
 801cda6:	e7d3      	b.n	801cd50 <__hexnan+0xbc>
 801cda8:	3e04      	subs	r6, #4
 801cdaa:	e7d1      	b.n	801cd50 <__hexnan+0xbc>
 801cdac:	2004      	movs	r0, #4
 801cdae:	b007      	add	sp, #28
 801cdb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cdb4 <__locale_ctype_ptr_l>:
 801cdb4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801cdb8:	4770      	bx	lr

0801cdba <__localeconv_l>:
 801cdba:	30f0      	adds	r0, #240	; 0xf0
 801cdbc:	4770      	bx	lr
	...

0801cdc0 <_localeconv_r>:
 801cdc0:	4b04      	ldr	r3, [pc, #16]	; (801cdd4 <_localeconv_r+0x14>)
 801cdc2:	681b      	ldr	r3, [r3, #0]
 801cdc4:	6a18      	ldr	r0, [r3, #32]
 801cdc6:	4b04      	ldr	r3, [pc, #16]	; (801cdd8 <_localeconv_r+0x18>)
 801cdc8:	2800      	cmp	r0, #0
 801cdca:	bf08      	it	eq
 801cdcc:	4618      	moveq	r0, r3
 801cdce:	30f0      	adds	r0, #240	; 0xf0
 801cdd0:	4770      	bx	lr
 801cdd2:	bf00      	nop
 801cdd4:	2000001c 	.word	0x2000001c
 801cdd8:	20000080 	.word	0x20000080

0801cddc <__swhatbuf_r>:
 801cddc:	b570      	push	{r4, r5, r6, lr}
 801cdde:	460e      	mov	r6, r1
 801cde0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801cde4:	b096      	sub	sp, #88	; 0x58
 801cde6:	2900      	cmp	r1, #0
 801cde8:	4614      	mov	r4, r2
 801cdea:	461d      	mov	r5, r3
 801cdec:	da07      	bge.n	801cdfe <__swhatbuf_r+0x22>
 801cdee:	2300      	movs	r3, #0
 801cdf0:	602b      	str	r3, [r5, #0]
 801cdf2:	89b3      	ldrh	r3, [r6, #12]
 801cdf4:	061a      	lsls	r2, r3, #24
 801cdf6:	d410      	bmi.n	801ce1a <__swhatbuf_r+0x3e>
 801cdf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801cdfc:	e00e      	b.n	801ce1c <__swhatbuf_r+0x40>
 801cdfe:	466a      	mov	r2, sp
 801ce00:	f001 f836 	bl	801de70 <_fstat_r>
 801ce04:	2800      	cmp	r0, #0
 801ce06:	dbf2      	blt.n	801cdee <__swhatbuf_r+0x12>
 801ce08:	9a01      	ldr	r2, [sp, #4]
 801ce0a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801ce0e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801ce12:	425a      	negs	r2, r3
 801ce14:	415a      	adcs	r2, r3
 801ce16:	602a      	str	r2, [r5, #0]
 801ce18:	e7ee      	b.n	801cdf8 <__swhatbuf_r+0x1c>
 801ce1a:	2340      	movs	r3, #64	; 0x40
 801ce1c:	2000      	movs	r0, #0
 801ce1e:	6023      	str	r3, [r4, #0]
 801ce20:	b016      	add	sp, #88	; 0x58
 801ce22:	bd70      	pop	{r4, r5, r6, pc}

0801ce24 <__smakebuf_r>:
 801ce24:	898b      	ldrh	r3, [r1, #12]
 801ce26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ce28:	079d      	lsls	r5, r3, #30
 801ce2a:	4606      	mov	r6, r0
 801ce2c:	460c      	mov	r4, r1
 801ce2e:	d507      	bpl.n	801ce40 <__smakebuf_r+0x1c>
 801ce30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ce34:	6023      	str	r3, [r4, #0]
 801ce36:	6123      	str	r3, [r4, #16]
 801ce38:	2301      	movs	r3, #1
 801ce3a:	6163      	str	r3, [r4, #20]
 801ce3c:	b002      	add	sp, #8
 801ce3e:	bd70      	pop	{r4, r5, r6, pc}
 801ce40:	ab01      	add	r3, sp, #4
 801ce42:	466a      	mov	r2, sp
 801ce44:	f7ff ffca 	bl	801cddc <__swhatbuf_r>
 801ce48:	9900      	ldr	r1, [sp, #0]
 801ce4a:	4605      	mov	r5, r0
 801ce4c:	4630      	mov	r0, r6
 801ce4e:	f000 fca3 	bl	801d798 <_malloc_r>
 801ce52:	b948      	cbnz	r0, 801ce68 <__smakebuf_r+0x44>
 801ce54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ce58:	059a      	lsls	r2, r3, #22
 801ce5a:	d4ef      	bmi.n	801ce3c <__smakebuf_r+0x18>
 801ce5c:	f023 0303 	bic.w	r3, r3, #3
 801ce60:	f043 0302 	orr.w	r3, r3, #2
 801ce64:	81a3      	strh	r3, [r4, #12]
 801ce66:	e7e3      	b.n	801ce30 <__smakebuf_r+0xc>
 801ce68:	4b0d      	ldr	r3, [pc, #52]	; (801cea0 <__smakebuf_r+0x7c>)
 801ce6a:	62b3      	str	r3, [r6, #40]	; 0x28
 801ce6c:	89a3      	ldrh	r3, [r4, #12]
 801ce6e:	6020      	str	r0, [r4, #0]
 801ce70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ce74:	81a3      	strh	r3, [r4, #12]
 801ce76:	9b00      	ldr	r3, [sp, #0]
 801ce78:	6120      	str	r0, [r4, #16]
 801ce7a:	6163      	str	r3, [r4, #20]
 801ce7c:	9b01      	ldr	r3, [sp, #4]
 801ce7e:	b15b      	cbz	r3, 801ce98 <__smakebuf_r+0x74>
 801ce80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ce84:	4630      	mov	r0, r6
 801ce86:	f001 f805 	bl	801de94 <_isatty_r>
 801ce8a:	b128      	cbz	r0, 801ce98 <__smakebuf_r+0x74>
 801ce8c:	89a3      	ldrh	r3, [r4, #12]
 801ce8e:	f023 0303 	bic.w	r3, r3, #3
 801ce92:	f043 0301 	orr.w	r3, r3, #1
 801ce96:	81a3      	strh	r3, [r4, #12]
 801ce98:	89a3      	ldrh	r3, [r4, #12]
 801ce9a:	431d      	orrs	r5, r3
 801ce9c:	81a5      	strh	r5, [r4, #12]
 801ce9e:	e7cd      	b.n	801ce3c <__smakebuf_r+0x18>
 801cea0:	0801c619 	.word	0x0801c619

0801cea4 <malloc>:
 801cea4:	4b02      	ldr	r3, [pc, #8]	; (801ceb0 <malloc+0xc>)
 801cea6:	4601      	mov	r1, r0
 801cea8:	6818      	ldr	r0, [r3, #0]
 801ceaa:	f000 bc75 	b.w	801d798 <_malloc_r>
 801ceae:	bf00      	nop
 801ceb0:	2000001c 	.word	0x2000001c

0801ceb4 <__ascii_mbtowc>:
 801ceb4:	b082      	sub	sp, #8
 801ceb6:	b901      	cbnz	r1, 801ceba <__ascii_mbtowc+0x6>
 801ceb8:	a901      	add	r1, sp, #4
 801ceba:	b142      	cbz	r2, 801cece <__ascii_mbtowc+0x1a>
 801cebc:	b14b      	cbz	r3, 801ced2 <__ascii_mbtowc+0x1e>
 801cebe:	7813      	ldrb	r3, [r2, #0]
 801cec0:	600b      	str	r3, [r1, #0]
 801cec2:	7812      	ldrb	r2, [r2, #0]
 801cec4:	1c10      	adds	r0, r2, #0
 801cec6:	bf18      	it	ne
 801cec8:	2001      	movne	r0, #1
 801ceca:	b002      	add	sp, #8
 801cecc:	4770      	bx	lr
 801cece:	4610      	mov	r0, r2
 801ced0:	e7fb      	b.n	801ceca <__ascii_mbtowc+0x16>
 801ced2:	f06f 0001 	mvn.w	r0, #1
 801ced6:	e7f8      	b.n	801ceca <__ascii_mbtowc+0x16>

0801ced8 <memchr>:
 801ced8:	b510      	push	{r4, lr}
 801ceda:	b2c9      	uxtb	r1, r1
 801cedc:	4402      	add	r2, r0
 801cede:	4290      	cmp	r0, r2
 801cee0:	4603      	mov	r3, r0
 801cee2:	d101      	bne.n	801cee8 <memchr+0x10>
 801cee4:	2300      	movs	r3, #0
 801cee6:	e003      	b.n	801cef0 <memchr+0x18>
 801cee8:	781c      	ldrb	r4, [r3, #0]
 801ceea:	3001      	adds	r0, #1
 801ceec:	428c      	cmp	r4, r1
 801ceee:	d1f6      	bne.n	801cede <memchr+0x6>
 801cef0:	4618      	mov	r0, r3
 801cef2:	bd10      	pop	{r4, pc}

0801cef4 <_Balloc>:
 801cef4:	b570      	push	{r4, r5, r6, lr}
 801cef6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801cef8:	4604      	mov	r4, r0
 801cefa:	460e      	mov	r6, r1
 801cefc:	b93d      	cbnz	r5, 801cf0e <_Balloc+0x1a>
 801cefe:	2010      	movs	r0, #16
 801cf00:	f7ff ffd0 	bl	801cea4 <malloc>
 801cf04:	6260      	str	r0, [r4, #36]	; 0x24
 801cf06:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801cf0a:	6005      	str	r5, [r0, #0]
 801cf0c:	60c5      	str	r5, [r0, #12]
 801cf0e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801cf10:	68eb      	ldr	r3, [r5, #12]
 801cf12:	b183      	cbz	r3, 801cf36 <_Balloc+0x42>
 801cf14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cf16:	68db      	ldr	r3, [r3, #12]
 801cf18:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801cf1c:	b9b8      	cbnz	r0, 801cf4e <_Balloc+0x5a>
 801cf1e:	2101      	movs	r1, #1
 801cf20:	fa01 f506 	lsl.w	r5, r1, r6
 801cf24:	1d6a      	adds	r2, r5, #5
 801cf26:	0092      	lsls	r2, r2, #2
 801cf28:	4620      	mov	r0, r4
 801cf2a:	f000 fbdb 	bl	801d6e4 <_calloc_r>
 801cf2e:	b160      	cbz	r0, 801cf4a <_Balloc+0x56>
 801cf30:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801cf34:	e00e      	b.n	801cf54 <_Balloc+0x60>
 801cf36:	2221      	movs	r2, #33	; 0x21
 801cf38:	2104      	movs	r1, #4
 801cf3a:	4620      	mov	r0, r4
 801cf3c:	f000 fbd2 	bl	801d6e4 <_calloc_r>
 801cf40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cf42:	60e8      	str	r0, [r5, #12]
 801cf44:	68db      	ldr	r3, [r3, #12]
 801cf46:	2b00      	cmp	r3, #0
 801cf48:	d1e4      	bne.n	801cf14 <_Balloc+0x20>
 801cf4a:	2000      	movs	r0, #0
 801cf4c:	bd70      	pop	{r4, r5, r6, pc}
 801cf4e:	6802      	ldr	r2, [r0, #0]
 801cf50:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801cf54:	2300      	movs	r3, #0
 801cf56:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801cf5a:	e7f7      	b.n	801cf4c <_Balloc+0x58>

0801cf5c <_Bfree>:
 801cf5c:	b570      	push	{r4, r5, r6, lr}
 801cf5e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801cf60:	4606      	mov	r6, r0
 801cf62:	460d      	mov	r5, r1
 801cf64:	b93c      	cbnz	r4, 801cf76 <_Bfree+0x1a>
 801cf66:	2010      	movs	r0, #16
 801cf68:	f7ff ff9c 	bl	801cea4 <malloc>
 801cf6c:	6270      	str	r0, [r6, #36]	; 0x24
 801cf6e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801cf72:	6004      	str	r4, [r0, #0]
 801cf74:	60c4      	str	r4, [r0, #12]
 801cf76:	b13d      	cbz	r5, 801cf88 <_Bfree+0x2c>
 801cf78:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801cf7a:	686a      	ldr	r2, [r5, #4]
 801cf7c:	68db      	ldr	r3, [r3, #12]
 801cf7e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801cf82:	6029      	str	r1, [r5, #0]
 801cf84:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801cf88:	bd70      	pop	{r4, r5, r6, pc}

0801cf8a <__multadd>:
 801cf8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cf8e:	461f      	mov	r7, r3
 801cf90:	4606      	mov	r6, r0
 801cf92:	460c      	mov	r4, r1
 801cf94:	2300      	movs	r3, #0
 801cf96:	690d      	ldr	r5, [r1, #16]
 801cf98:	f101 0c14 	add.w	ip, r1, #20
 801cf9c:	f8dc 0000 	ldr.w	r0, [ip]
 801cfa0:	3301      	adds	r3, #1
 801cfa2:	b281      	uxth	r1, r0
 801cfa4:	fb02 7101 	mla	r1, r2, r1, r7
 801cfa8:	0c00      	lsrs	r0, r0, #16
 801cfaa:	0c0f      	lsrs	r7, r1, #16
 801cfac:	fb02 7000 	mla	r0, r2, r0, r7
 801cfb0:	b289      	uxth	r1, r1
 801cfb2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801cfb6:	429d      	cmp	r5, r3
 801cfb8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801cfbc:	f84c 1b04 	str.w	r1, [ip], #4
 801cfc0:	dcec      	bgt.n	801cf9c <__multadd+0x12>
 801cfc2:	b1d7      	cbz	r7, 801cffa <__multadd+0x70>
 801cfc4:	68a3      	ldr	r3, [r4, #8]
 801cfc6:	42ab      	cmp	r3, r5
 801cfc8:	dc12      	bgt.n	801cff0 <__multadd+0x66>
 801cfca:	6861      	ldr	r1, [r4, #4]
 801cfcc:	4630      	mov	r0, r6
 801cfce:	3101      	adds	r1, #1
 801cfd0:	f7ff ff90 	bl	801cef4 <_Balloc>
 801cfd4:	4680      	mov	r8, r0
 801cfd6:	6922      	ldr	r2, [r4, #16]
 801cfd8:	f104 010c 	add.w	r1, r4, #12
 801cfdc:	3202      	adds	r2, #2
 801cfde:	0092      	lsls	r2, r2, #2
 801cfe0:	300c      	adds	r0, #12
 801cfe2:	f7fc fd58 	bl	8019a96 <memcpy>
 801cfe6:	4621      	mov	r1, r4
 801cfe8:	4630      	mov	r0, r6
 801cfea:	f7ff ffb7 	bl	801cf5c <_Bfree>
 801cfee:	4644      	mov	r4, r8
 801cff0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801cff4:	3501      	adds	r5, #1
 801cff6:	615f      	str	r7, [r3, #20]
 801cff8:	6125      	str	r5, [r4, #16]
 801cffa:	4620      	mov	r0, r4
 801cffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d000 <__s2b>:
 801d000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d004:	4615      	mov	r5, r2
 801d006:	2209      	movs	r2, #9
 801d008:	461f      	mov	r7, r3
 801d00a:	3308      	adds	r3, #8
 801d00c:	460c      	mov	r4, r1
 801d00e:	fb93 f3f2 	sdiv	r3, r3, r2
 801d012:	4606      	mov	r6, r0
 801d014:	2201      	movs	r2, #1
 801d016:	2100      	movs	r1, #0
 801d018:	429a      	cmp	r2, r3
 801d01a:	db20      	blt.n	801d05e <__s2b+0x5e>
 801d01c:	4630      	mov	r0, r6
 801d01e:	f7ff ff69 	bl	801cef4 <_Balloc>
 801d022:	9b08      	ldr	r3, [sp, #32]
 801d024:	2d09      	cmp	r5, #9
 801d026:	6143      	str	r3, [r0, #20]
 801d028:	f04f 0301 	mov.w	r3, #1
 801d02c:	6103      	str	r3, [r0, #16]
 801d02e:	dd19      	ble.n	801d064 <__s2b+0x64>
 801d030:	f104 0809 	add.w	r8, r4, #9
 801d034:	46c1      	mov	r9, r8
 801d036:	442c      	add	r4, r5
 801d038:	f819 3b01 	ldrb.w	r3, [r9], #1
 801d03c:	4601      	mov	r1, r0
 801d03e:	3b30      	subs	r3, #48	; 0x30
 801d040:	220a      	movs	r2, #10
 801d042:	4630      	mov	r0, r6
 801d044:	f7ff ffa1 	bl	801cf8a <__multadd>
 801d048:	45a1      	cmp	r9, r4
 801d04a:	d1f5      	bne.n	801d038 <__s2b+0x38>
 801d04c:	eb08 0405 	add.w	r4, r8, r5
 801d050:	3c08      	subs	r4, #8
 801d052:	1b2d      	subs	r5, r5, r4
 801d054:	1963      	adds	r3, r4, r5
 801d056:	42bb      	cmp	r3, r7
 801d058:	db07      	blt.n	801d06a <__s2b+0x6a>
 801d05a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d05e:	0052      	lsls	r2, r2, #1
 801d060:	3101      	adds	r1, #1
 801d062:	e7d9      	b.n	801d018 <__s2b+0x18>
 801d064:	340a      	adds	r4, #10
 801d066:	2509      	movs	r5, #9
 801d068:	e7f3      	b.n	801d052 <__s2b+0x52>
 801d06a:	f814 3b01 	ldrb.w	r3, [r4], #1
 801d06e:	4601      	mov	r1, r0
 801d070:	3b30      	subs	r3, #48	; 0x30
 801d072:	220a      	movs	r2, #10
 801d074:	4630      	mov	r0, r6
 801d076:	f7ff ff88 	bl	801cf8a <__multadd>
 801d07a:	e7eb      	b.n	801d054 <__s2b+0x54>

0801d07c <__hi0bits>:
 801d07c:	0c02      	lsrs	r2, r0, #16
 801d07e:	0412      	lsls	r2, r2, #16
 801d080:	4603      	mov	r3, r0
 801d082:	b9b2      	cbnz	r2, 801d0b2 <__hi0bits+0x36>
 801d084:	0403      	lsls	r3, r0, #16
 801d086:	2010      	movs	r0, #16
 801d088:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801d08c:	bf04      	itt	eq
 801d08e:	021b      	lsleq	r3, r3, #8
 801d090:	3008      	addeq	r0, #8
 801d092:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801d096:	bf04      	itt	eq
 801d098:	011b      	lsleq	r3, r3, #4
 801d09a:	3004      	addeq	r0, #4
 801d09c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801d0a0:	bf04      	itt	eq
 801d0a2:	009b      	lsleq	r3, r3, #2
 801d0a4:	3002      	addeq	r0, #2
 801d0a6:	2b00      	cmp	r3, #0
 801d0a8:	db06      	blt.n	801d0b8 <__hi0bits+0x3c>
 801d0aa:	005b      	lsls	r3, r3, #1
 801d0ac:	d503      	bpl.n	801d0b6 <__hi0bits+0x3a>
 801d0ae:	3001      	adds	r0, #1
 801d0b0:	4770      	bx	lr
 801d0b2:	2000      	movs	r0, #0
 801d0b4:	e7e8      	b.n	801d088 <__hi0bits+0xc>
 801d0b6:	2020      	movs	r0, #32
 801d0b8:	4770      	bx	lr

0801d0ba <__lo0bits>:
 801d0ba:	6803      	ldr	r3, [r0, #0]
 801d0bc:	4601      	mov	r1, r0
 801d0be:	f013 0207 	ands.w	r2, r3, #7
 801d0c2:	d00b      	beq.n	801d0dc <__lo0bits+0x22>
 801d0c4:	07da      	lsls	r2, r3, #31
 801d0c6:	d423      	bmi.n	801d110 <__lo0bits+0x56>
 801d0c8:	0798      	lsls	r0, r3, #30
 801d0ca:	bf49      	itett	mi
 801d0cc:	085b      	lsrmi	r3, r3, #1
 801d0ce:	089b      	lsrpl	r3, r3, #2
 801d0d0:	2001      	movmi	r0, #1
 801d0d2:	600b      	strmi	r3, [r1, #0]
 801d0d4:	bf5c      	itt	pl
 801d0d6:	600b      	strpl	r3, [r1, #0]
 801d0d8:	2002      	movpl	r0, #2
 801d0da:	4770      	bx	lr
 801d0dc:	b298      	uxth	r0, r3
 801d0de:	b9a8      	cbnz	r0, 801d10c <__lo0bits+0x52>
 801d0e0:	2010      	movs	r0, #16
 801d0e2:	0c1b      	lsrs	r3, r3, #16
 801d0e4:	f013 0fff 	tst.w	r3, #255	; 0xff
 801d0e8:	bf04      	itt	eq
 801d0ea:	0a1b      	lsreq	r3, r3, #8
 801d0ec:	3008      	addeq	r0, #8
 801d0ee:	071a      	lsls	r2, r3, #28
 801d0f0:	bf04      	itt	eq
 801d0f2:	091b      	lsreq	r3, r3, #4
 801d0f4:	3004      	addeq	r0, #4
 801d0f6:	079a      	lsls	r2, r3, #30
 801d0f8:	bf04      	itt	eq
 801d0fa:	089b      	lsreq	r3, r3, #2
 801d0fc:	3002      	addeq	r0, #2
 801d0fe:	07da      	lsls	r2, r3, #31
 801d100:	d402      	bmi.n	801d108 <__lo0bits+0x4e>
 801d102:	085b      	lsrs	r3, r3, #1
 801d104:	d006      	beq.n	801d114 <__lo0bits+0x5a>
 801d106:	3001      	adds	r0, #1
 801d108:	600b      	str	r3, [r1, #0]
 801d10a:	4770      	bx	lr
 801d10c:	4610      	mov	r0, r2
 801d10e:	e7e9      	b.n	801d0e4 <__lo0bits+0x2a>
 801d110:	2000      	movs	r0, #0
 801d112:	4770      	bx	lr
 801d114:	2020      	movs	r0, #32
 801d116:	4770      	bx	lr

0801d118 <__i2b>:
 801d118:	b510      	push	{r4, lr}
 801d11a:	460c      	mov	r4, r1
 801d11c:	2101      	movs	r1, #1
 801d11e:	f7ff fee9 	bl	801cef4 <_Balloc>
 801d122:	2201      	movs	r2, #1
 801d124:	6144      	str	r4, [r0, #20]
 801d126:	6102      	str	r2, [r0, #16]
 801d128:	bd10      	pop	{r4, pc}

0801d12a <__multiply>:
 801d12a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d12e:	4614      	mov	r4, r2
 801d130:	690a      	ldr	r2, [r1, #16]
 801d132:	6923      	ldr	r3, [r4, #16]
 801d134:	4688      	mov	r8, r1
 801d136:	429a      	cmp	r2, r3
 801d138:	bfbe      	ittt	lt
 801d13a:	460b      	movlt	r3, r1
 801d13c:	46a0      	movlt	r8, r4
 801d13e:	461c      	movlt	r4, r3
 801d140:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801d144:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801d148:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801d14c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801d150:	eb07 0609 	add.w	r6, r7, r9
 801d154:	42b3      	cmp	r3, r6
 801d156:	bfb8      	it	lt
 801d158:	3101      	addlt	r1, #1
 801d15a:	f7ff fecb 	bl	801cef4 <_Balloc>
 801d15e:	f100 0514 	add.w	r5, r0, #20
 801d162:	462b      	mov	r3, r5
 801d164:	2200      	movs	r2, #0
 801d166:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801d16a:	4573      	cmp	r3, lr
 801d16c:	d316      	bcc.n	801d19c <__multiply+0x72>
 801d16e:	f104 0214 	add.w	r2, r4, #20
 801d172:	f108 0114 	add.w	r1, r8, #20
 801d176:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801d17a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801d17e:	9300      	str	r3, [sp, #0]
 801d180:	9b00      	ldr	r3, [sp, #0]
 801d182:	9201      	str	r2, [sp, #4]
 801d184:	4293      	cmp	r3, r2
 801d186:	d80c      	bhi.n	801d1a2 <__multiply+0x78>
 801d188:	2e00      	cmp	r6, #0
 801d18a:	dd03      	ble.n	801d194 <__multiply+0x6a>
 801d18c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801d190:	2b00      	cmp	r3, #0
 801d192:	d05d      	beq.n	801d250 <__multiply+0x126>
 801d194:	6106      	str	r6, [r0, #16]
 801d196:	b003      	add	sp, #12
 801d198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d19c:	f843 2b04 	str.w	r2, [r3], #4
 801d1a0:	e7e3      	b.n	801d16a <__multiply+0x40>
 801d1a2:	f8b2 b000 	ldrh.w	fp, [r2]
 801d1a6:	f1bb 0f00 	cmp.w	fp, #0
 801d1aa:	d023      	beq.n	801d1f4 <__multiply+0xca>
 801d1ac:	4689      	mov	r9, r1
 801d1ae:	46ac      	mov	ip, r5
 801d1b0:	f04f 0800 	mov.w	r8, #0
 801d1b4:	f859 4b04 	ldr.w	r4, [r9], #4
 801d1b8:	f8dc a000 	ldr.w	sl, [ip]
 801d1bc:	b2a3      	uxth	r3, r4
 801d1be:	fa1f fa8a 	uxth.w	sl, sl
 801d1c2:	fb0b a303 	mla	r3, fp, r3, sl
 801d1c6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801d1ca:	f8dc 4000 	ldr.w	r4, [ip]
 801d1ce:	4443      	add	r3, r8
 801d1d0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801d1d4:	fb0b 840a 	mla	r4, fp, sl, r8
 801d1d8:	46e2      	mov	sl, ip
 801d1da:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801d1de:	b29b      	uxth	r3, r3
 801d1e0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801d1e4:	454f      	cmp	r7, r9
 801d1e6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801d1ea:	f84a 3b04 	str.w	r3, [sl], #4
 801d1ee:	d82b      	bhi.n	801d248 <__multiply+0x11e>
 801d1f0:	f8cc 8004 	str.w	r8, [ip, #4]
 801d1f4:	9b01      	ldr	r3, [sp, #4]
 801d1f6:	3204      	adds	r2, #4
 801d1f8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801d1fc:	f1ba 0f00 	cmp.w	sl, #0
 801d200:	d020      	beq.n	801d244 <__multiply+0x11a>
 801d202:	4689      	mov	r9, r1
 801d204:	46a8      	mov	r8, r5
 801d206:	f04f 0b00 	mov.w	fp, #0
 801d20a:	682b      	ldr	r3, [r5, #0]
 801d20c:	f8b9 c000 	ldrh.w	ip, [r9]
 801d210:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801d214:	b29b      	uxth	r3, r3
 801d216:	fb0a 440c 	mla	r4, sl, ip, r4
 801d21a:	46c4      	mov	ip, r8
 801d21c:	445c      	add	r4, fp
 801d21e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801d222:	f84c 3b04 	str.w	r3, [ip], #4
 801d226:	f859 3b04 	ldr.w	r3, [r9], #4
 801d22a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801d22e:	0c1b      	lsrs	r3, r3, #16
 801d230:	fb0a b303 	mla	r3, sl, r3, fp
 801d234:	454f      	cmp	r7, r9
 801d236:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801d23a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801d23e:	d805      	bhi.n	801d24c <__multiply+0x122>
 801d240:	f8c8 3004 	str.w	r3, [r8, #4]
 801d244:	3504      	adds	r5, #4
 801d246:	e79b      	b.n	801d180 <__multiply+0x56>
 801d248:	46d4      	mov	ip, sl
 801d24a:	e7b3      	b.n	801d1b4 <__multiply+0x8a>
 801d24c:	46e0      	mov	r8, ip
 801d24e:	e7dd      	b.n	801d20c <__multiply+0xe2>
 801d250:	3e01      	subs	r6, #1
 801d252:	e799      	b.n	801d188 <__multiply+0x5e>

0801d254 <__pow5mult>:
 801d254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d258:	4615      	mov	r5, r2
 801d25a:	f012 0203 	ands.w	r2, r2, #3
 801d25e:	4606      	mov	r6, r0
 801d260:	460f      	mov	r7, r1
 801d262:	d007      	beq.n	801d274 <__pow5mult+0x20>
 801d264:	4c21      	ldr	r4, [pc, #132]	; (801d2ec <__pow5mult+0x98>)
 801d266:	3a01      	subs	r2, #1
 801d268:	2300      	movs	r3, #0
 801d26a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d26e:	f7ff fe8c 	bl	801cf8a <__multadd>
 801d272:	4607      	mov	r7, r0
 801d274:	10ad      	asrs	r5, r5, #2
 801d276:	d035      	beq.n	801d2e4 <__pow5mult+0x90>
 801d278:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801d27a:	b93c      	cbnz	r4, 801d28c <__pow5mult+0x38>
 801d27c:	2010      	movs	r0, #16
 801d27e:	f7ff fe11 	bl	801cea4 <malloc>
 801d282:	6270      	str	r0, [r6, #36]	; 0x24
 801d284:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801d288:	6004      	str	r4, [r0, #0]
 801d28a:	60c4      	str	r4, [r0, #12]
 801d28c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801d290:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801d294:	b94c      	cbnz	r4, 801d2aa <__pow5mult+0x56>
 801d296:	f240 2171 	movw	r1, #625	; 0x271
 801d29a:	4630      	mov	r0, r6
 801d29c:	f7ff ff3c 	bl	801d118 <__i2b>
 801d2a0:	2300      	movs	r3, #0
 801d2a2:	4604      	mov	r4, r0
 801d2a4:	f8c8 0008 	str.w	r0, [r8, #8]
 801d2a8:	6003      	str	r3, [r0, #0]
 801d2aa:	f04f 0800 	mov.w	r8, #0
 801d2ae:	07eb      	lsls	r3, r5, #31
 801d2b0:	d50a      	bpl.n	801d2c8 <__pow5mult+0x74>
 801d2b2:	4639      	mov	r1, r7
 801d2b4:	4622      	mov	r2, r4
 801d2b6:	4630      	mov	r0, r6
 801d2b8:	f7ff ff37 	bl	801d12a <__multiply>
 801d2bc:	4681      	mov	r9, r0
 801d2be:	4639      	mov	r1, r7
 801d2c0:	4630      	mov	r0, r6
 801d2c2:	f7ff fe4b 	bl	801cf5c <_Bfree>
 801d2c6:	464f      	mov	r7, r9
 801d2c8:	106d      	asrs	r5, r5, #1
 801d2ca:	d00b      	beq.n	801d2e4 <__pow5mult+0x90>
 801d2cc:	6820      	ldr	r0, [r4, #0]
 801d2ce:	b938      	cbnz	r0, 801d2e0 <__pow5mult+0x8c>
 801d2d0:	4622      	mov	r2, r4
 801d2d2:	4621      	mov	r1, r4
 801d2d4:	4630      	mov	r0, r6
 801d2d6:	f7ff ff28 	bl	801d12a <__multiply>
 801d2da:	6020      	str	r0, [r4, #0]
 801d2dc:	f8c0 8000 	str.w	r8, [r0]
 801d2e0:	4604      	mov	r4, r0
 801d2e2:	e7e4      	b.n	801d2ae <__pow5mult+0x5a>
 801d2e4:	4638      	mov	r0, r7
 801d2e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d2ea:	bf00      	nop
 801d2ec:	08021f38 	.word	0x08021f38

0801d2f0 <__lshift>:
 801d2f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d2f4:	460c      	mov	r4, r1
 801d2f6:	4607      	mov	r7, r0
 801d2f8:	4616      	mov	r6, r2
 801d2fa:	6923      	ldr	r3, [r4, #16]
 801d2fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801d300:	eb0a 0903 	add.w	r9, sl, r3
 801d304:	6849      	ldr	r1, [r1, #4]
 801d306:	68a3      	ldr	r3, [r4, #8]
 801d308:	f109 0501 	add.w	r5, r9, #1
 801d30c:	42ab      	cmp	r3, r5
 801d30e:	db32      	blt.n	801d376 <__lshift+0x86>
 801d310:	4638      	mov	r0, r7
 801d312:	f7ff fdef 	bl	801cef4 <_Balloc>
 801d316:	2300      	movs	r3, #0
 801d318:	4680      	mov	r8, r0
 801d31a:	461a      	mov	r2, r3
 801d31c:	f100 0114 	add.w	r1, r0, #20
 801d320:	4553      	cmp	r3, sl
 801d322:	db2b      	blt.n	801d37c <__lshift+0x8c>
 801d324:	6920      	ldr	r0, [r4, #16]
 801d326:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801d32a:	f104 0314 	add.w	r3, r4, #20
 801d32e:	f016 021f 	ands.w	r2, r6, #31
 801d332:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801d336:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801d33a:	d025      	beq.n	801d388 <__lshift+0x98>
 801d33c:	2000      	movs	r0, #0
 801d33e:	f1c2 0e20 	rsb	lr, r2, #32
 801d342:	468a      	mov	sl, r1
 801d344:	681e      	ldr	r6, [r3, #0]
 801d346:	4096      	lsls	r6, r2
 801d348:	4330      	orrs	r0, r6
 801d34a:	f84a 0b04 	str.w	r0, [sl], #4
 801d34e:	f853 0b04 	ldr.w	r0, [r3], #4
 801d352:	459c      	cmp	ip, r3
 801d354:	fa20 f00e 	lsr.w	r0, r0, lr
 801d358:	d814      	bhi.n	801d384 <__lshift+0x94>
 801d35a:	6048      	str	r0, [r1, #4]
 801d35c:	b108      	cbz	r0, 801d362 <__lshift+0x72>
 801d35e:	f109 0502 	add.w	r5, r9, #2
 801d362:	3d01      	subs	r5, #1
 801d364:	4638      	mov	r0, r7
 801d366:	f8c8 5010 	str.w	r5, [r8, #16]
 801d36a:	4621      	mov	r1, r4
 801d36c:	f7ff fdf6 	bl	801cf5c <_Bfree>
 801d370:	4640      	mov	r0, r8
 801d372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d376:	3101      	adds	r1, #1
 801d378:	005b      	lsls	r3, r3, #1
 801d37a:	e7c7      	b.n	801d30c <__lshift+0x1c>
 801d37c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801d380:	3301      	adds	r3, #1
 801d382:	e7cd      	b.n	801d320 <__lshift+0x30>
 801d384:	4651      	mov	r1, sl
 801d386:	e7dc      	b.n	801d342 <__lshift+0x52>
 801d388:	3904      	subs	r1, #4
 801d38a:	f853 2b04 	ldr.w	r2, [r3], #4
 801d38e:	459c      	cmp	ip, r3
 801d390:	f841 2f04 	str.w	r2, [r1, #4]!
 801d394:	d8f9      	bhi.n	801d38a <__lshift+0x9a>
 801d396:	e7e4      	b.n	801d362 <__lshift+0x72>

0801d398 <__mcmp>:
 801d398:	6903      	ldr	r3, [r0, #16]
 801d39a:	690a      	ldr	r2, [r1, #16]
 801d39c:	b530      	push	{r4, r5, lr}
 801d39e:	1a9b      	subs	r3, r3, r2
 801d3a0:	d10c      	bne.n	801d3bc <__mcmp+0x24>
 801d3a2:	0092      	lsls	r2, r2, #2
 801d3a4:	3014      	adds	r0, #20
 801d3a6:	3114      	adds	r1, #20
 801d3a8:	1884      	adds	r4, r0, r2
 801d3aa:	4411      	add	r1, r2
 801d3ac:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801d3b0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801d3b4:	4295      	cmp	r5, r2
 801d3b6:	d003      	beq.n	801d3c0 <__mcmp+0x28>
 801d3b8:	d305      	bcc.n	801d3c6 <__mcmp+0x2e>
 801d3ba:	2301      	movs	r3, #1
 801d3bc:	4618      	mov	r0, r3
 801d3be:	bd30      	pop	{r4, r5, pc}
 801d3c0:	42a0      	cmp	r0, r4
 801d3c2:	d3f3      	bcc.n	801d3ac <__mcmp+0x14>
 801d3c4:	e7fa      	b.n	801d3bc <__mcmp+0x24>
 801d3c6:	f04f 33ff 	mov.w	r3, #4294967295
 801d3ca:	e7f7      	b.n	801d3bc <__mcmp+0x24>

0801d3cc <__mdiff>:
 801d3cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d3d0:	460d      	mov	r5, r1
 801d3d2:	4607      	mov	r7, r0
 801d3d4:	4611      	mov	r1, r2
 801d3d6:	4628      	mov	r0, r5
 801d3d8:	4614      	mov	r4, r2
 801d3da:	f7ff ffdd 	bl	801d398 <__mcmp>
 801d3de:	1e06      	subs	r6, r0, #0
 801d3e0:	d108      	bne.n	801d3f4 <__mdiff+0x28>
 801d3e2:	4631      	mov	r1, r6
 801d3e4:	4638      	mov	r0, r7
 801d3e6:	f7ff fd85 	bl	801cef4 <_Balloc>
 801d3ea:	2301      	movs	r3, #1
 801d3ec:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801d3f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d3f4:	bfa4      	itt	ge
 801d3f6:	4623      	movge	r3, r4
 801d3f8:	462c      	movge	r4, r5
 801d3fa:	4638      	mov	r0, r7
 801d3fc:	6861      	ldr	r1, [r4, #4]
 801d3fe:	bfa6      	itte	ge
 801d400:	461d      	movge	r5, r3
 801d402:	2600      	movge	r6, #0
 801d404:	2601      	movlt	r6, #1
 801d406:	f7ff fd75 	bl	801cef4 <_Balloc>
 801d40a:	f04f 0e00 	mov.w	lr, #0
 801d40e:	60c6      	str	r6, [r0, #12]
 801d410:	692b      	ldr	r3, [r5, #16]
 801d412:	6926      	ldr	r6, [r4, #16]
 801d414:	f104 0214 	add.w	r2, r4, #20
 801d418:	f105 0914 	add.w	r9, r5, #20
 801d41c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801d420:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801d424:	f100 0114 	add.w	r1, r0, #20
 801d428:	f852 ab04 	ldr.w	sl, [r2], #4
 801d42c:	f859 5b04 	ldr.w	r5, [r9], #4
 801d430:	fa1f f38a 	uxth.w	r3, sl
 801d434:	4473      	add	r3, lr
 801d436:	b2ac      	uxth	r4, r5
 801d438:	1b1b      	subs	r3, r3, r4
 801d43a:	0c2c      	lsrs	r4, r5, #16
 801d43c:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 801d440:	eb04 4423 	add.w	r4, r4, r3, asr #16
 801d444:	b29b      	uxth	r3, r3
 801d446:	ea4f 4e24 	mov.w	lr, r4, asr #16
 801d44a:	45c8      	cmp	r8, r9
 801d44c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 801d450:	4694      	mov	ip, r2
 801d452:	f841 4b04 	str.w	r4, [r1], #4
 801d456:	d8e7      	bhi.n	801d428 <__mdiff+0x5c>
 801d458:	45bc      	cmp	ip, r7
 801d45a:	d304      	bcc.n	801d466 <__mdiff+0x9a>
 801d45c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 801d460:	b183      	cbz	r3, 801d484 <__mdiff+0xb8>
 801d462:	6106      	str	r6, [r0, #16]
 801d464:	e7c4      	b.n	801d3f0 <__mdiff+0x24>
 801d466:	f85c 4b04 	ldr.w	r4, [ip], #4
 801d46a:	b2a2      	uxth	r2, r4
 801d46c:	4472      	add	r2, lr
 801d46e:	1413      	asrs	r3, r2, #16
 801d470:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801d474:	b292      	uxth	r2, r2
 801d476:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801d47a:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801d47e:	f841 2b04 	str.w	r2, [r1], #4
 801d482:	e7e9      	b.n	801d458 <__mdiff+0x8c>
 801d484:	3e01      	subs	r6, #1
 801d486:	e7e9      	b.n	801d45c <__mdiff+0x90>

0801d488 <__ulp>:
 801d488:	4b10      	ldr	r3, [pc, #64]	; (801d4cc <__ulp+0x44>)
 801d48a:	400b      	ands	r3, r1
 801d48c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 801d490:	2b00      	cmp	r3, #0
 801d492:	dd02      	ble.n	801d49a <__ulp+0x12>
 801d494:	2000      	movs	r0, #0
 801d496:	4619      	mov	r1, r3
 801d498:	4770      	bx	lr
 801d49a:	425b      	negs	r3, r3
 801d49c:	151b      	asrs	r3, r3, #20
 801d49e:	2b13      	cmp	r3, #19
 801d4a0:	f04f 0000 	mov.w	r0, #0
 801d4a4:	f04f 0100 	mov.w	r1, #0
 801d4a8:	dc04      	bgt.n	801d4b4 <__ulp+0x2c>
 801d4aa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801d4ae:	fa42 f103 	asr.w	r1, r2, r3
 801d4b2:	4770      	bx	lr
 801d4b4:	2201      	movs	r2, #1
 801d4b6:	3b14      	subs	r3, #20
 801d4b8:	2b1e      	cmp	r3, #30
 801d4ba:	bfce      	itee	gt
 801d4bc:	4613      	movgt	r3, r2
 801d4be:	f1c3 031f 	rsble	r3, r3, #31
 801d4c2:	fa02 f303 	lslle.w	r3, r2, r3
 801d4c6:	4618      	mov	r0, r3
 801d4c8:	4770      	bx	lr
 801d4ca:	bf00      	nop
 801d4cc:	7ff00000 	.word	0x7ff00000

0801d4d0 <__b2d>:
 801d4d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d4d4:	6907      	ldr	r7, [r0, #16]
 801d4d6:	f100 0914 	add.w	r9, r0, #20
 801d4da:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 801d4de:	f857 6c04 	ldr.w	r6, [r7, #-4]
 801d4e2:	f1a7 0804 	sub.w	r8, r7, #4
 801d4e6:	4630      	mov	r0, r6
 801d4e8:	f7ff fdc8 	bl	801d07c <__hi0bits>
 801d4ec:	f1c0 0320 	rsb	r3, r0, #32
 801d4f0:	280a      	cmp	r0, #10
 801d4f2:	600b      	str	r3, [r1, #0]
 801d4f4:	491e      	ldr	r1, [pc, #120]	; (801d570 <__b2d+0xa0>)
 801d4f6:	dc17      	bgt.n	801d528 <__b2d+0x58>
 801d4f8:	45c1      	cmp	r9, r8
 801d4fa:	bf28      	it	cs
 801d4fc:	2200      	movcs	r2, #0
 801d4fe:	f1c0 0c0b 	rsb	ip, r0, #11
 801d502:	fa26 f30c 	lsr.w	r3, r6, ip
 801d506:	bf38      	it	cc
 801d508:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 801d50c:	ea43 0501 	orr.w	r5, r3, r1
 801d510:	f100 0315 	add.w	r3, r0, #21
 801d514:	fa06 f303 	lsl.w	r3, r6, r3
 801d518:	fa22 f20c 	lsr.w	r2, r2, ip
 801d51c:	ea43 0402 	orr.w	r4, r3, r2
 801d520:	4620      	mov	r0, r4
 801d522:	4629      	mov	r1, r5
 801d524:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d528:	45c1      	cmp	r9, r8
 801d52a:	bf3a      	itte	cc
 801d52c:	f1a7 0808 	subcc.w	r8, r7, #8
 801d530:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 801d534:	2200      	movcs	r2, #0
 801d536:	f1b0 030b 	subs.w	r3, r0, #11
 801d53a:	d015      	beq.n	801d568 <__b2d+0x98>
 801d53c:	409e      	lsls	r6, r3
 801d53e:	f1c3 0720 	rsb	r7, r3, #32
 801d542:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 801d546:	fa22 f107 	lsr.w	r1, r2, r7
 801d54a:	45c8      	cmp	r8, r9
 801d54c:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 801d550:	ea46 0501 	orr.w	r5, r6, r1
 801d554:	bf94      	ite	ls
 801d556:	2100      	movls	r1, #0
 801d558:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 801d55c:	fa02 f003 	lsl.w	r0, r2, r3
 801d560:	40f9      	lsrs	r1, r7
 801d562:	ea40 0401 	orr.w	r4, r0, r1
 801d566:	e7db      	b.n	801d520 <__b2d+0x50>
 801d568:	ea46 0501 	orr.w	r5, r6, r1
 801d56c:	4614      	mov	r4, r2
 801d56e:	e7d7      	b.n	801d520 <__b2d+0x50>
 801d570:	3ff00000 	.word	0x3ff00000

0801d574 <__d2b>:
 801d574:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801d578:	461c      	mov	r4, r3
 801d57a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 801d57e:	2101      	movs	r1, #1
 801d580:	4690      	mov	r8, r2
 801d582:	f7ff fcb7 	bl	801cef4 <_Balloc>
 801d586:	f3c4 0213 	ubfx	r2, r4, #0, #20
 801d58a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 801d58e:	4607      	mov	r7, r0
 801d590:	bb34      	cbnz	r4, 801d5e0 <__d2b+0x6c>
 801d592:	9201      	str	r2, [sp, #4]
 801d594:	f1b8 0200 	subs.w	r2, r8, #0
 801d598:	d027      	beq.n	801d5ea <__d2b+0x76>
 801d59a:	a802      	add	r0, sp, #8
 801d59c:	f840 2d08 	str.w	r2, [r0, #-8]!
 801d5a0:	f7ff fd8b 	bl	801d0ba <__lo0bits>
 801d5a4:	9900      	ldr	r1, [sp, #0]
 801d5a6:	b1f0      	cbz	r0, 801d5e6 <__d2b+0x72>
 801d5a8:	9a01      	ldr	r2, [sp, #4]
 801d5aa:	f1c0 0320 	rsb	r3, r0, #32
 801d5ae:	fa02 f303 	lsl.w	r3, r2, r3
 801d5b2:	430b      	orrs	r3, r1
 801d5b4:	40c2      	lsrs	r2, r0
 801d5b6:	617b      	str	r3, [r7, #20]
 801d5b8:	9201      	str	r2, [sp, #4]
 801d5ba:	9b01      	ldr	r3, [sp, #4]
 801d5bc:	2b00      	cmp	r3, #0
 801d5be:	bf14      	ite	ne
 801d5c0:	2102      	movne	r1, #2
 801d5c2:	2101      	moveq	r1, #1
 801d5c4:	61bb      	str	r3, [r7, #24]
 801d5c6:	6139      	str	r1, [r7, #16]
 801d5c8:	b1c4      	cbz	r4, 801d5fc <__d2b+0x88>
 801d5ca:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801d5ce:	4404      	add	r4, r0
 801d5d0:	6034      	str	r4, [r6, #0]
 801d5d2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801d5d6:	6028      	str	r0, [r5, #0]
 801d5d8:	4638      	mov	r0, r7
 801d5da:	b002      	add	sp, #8
 801d5dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d5e0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801d5e4:	e7d5      	b.n	801d592 <__d2b+0x1e>
 801d5e6:	6179      	str	r1, [r7, #20]
 801d5e8:	e7e7      	b.n	801d5ba <__d2b+0x46>
 801d5ea:	a801      	add	r0, sp, #4
 801d5ec:	f7ff fd65 	bl	801d0ba <__lo0bits>
 801d5f0:	2101      	movs	r1, #1
 801d5f2:	9b01      	ldr	r3, [sp, #4]
 801d5f4:	6139      	str	r1, [r7, #16]
 801d5f6:	617b      	str	r3, [r7, #20]
 801d5f8:	3020      	adds	r0, #32
 801d5fa:	e7e5      	b.n	801d5c8 <__d2b+0x54>
 801d5fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801d600:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801d604:	6030      	str	r0, [r6, #0]
 801d606:	6918      	ldr	r0, [r3, #16]
 801d608:	f7ff fd38 	bl	801d07c <__hi0bits>
 801d60c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801d610:	e7e1      	b.n	801d5d6 <__d2b+0x62>

0801d612 <__ratio>:
 801d612:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d616:	4688      	mov	r8, r1
 801d618:	4669      	mov	r1, sp
 801d61a:	4681      	mov	r9, r0
 801d61c:	f7ff ff58 	bl	801d4d0 <__b2d>
 801d620:	468b      	mov	fp, r1
 801d622:	4606      	mov	r6, r0
 801d624:	460f      	mov	r7, r1
 801d626:	4640      	mov	r0, r8
 801d628:	a901      	add	r1, sp, #4
 801d62a:	f7ff ff51 	bl	801d4d0 <__b2d>
 801d62e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801d632:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801d636:	460d      	mov	r5, r1
 801d638:	eba3 0c02 	sub.w	ip, r3, r2
 801d63c:	e9dd 3200 	ldrd	r3, r2, [sp]
 801d640:	1a9b      	subs	r3, r3, r2
 801d642:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801d646:	2b00      	cmp	r3, #0
 801d648:	bfd5      	itete	le
 801d64a:	460a      	movle	r2, r1
 801d64c:	463a      	movgt	r2, r7
 801d64e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801d652:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801d656:	bfd8      	it	le
 801d658:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 801d65c:	462b      	mov	r3, r5
 801d65e:	4602      	mov	r2, r0
 801d660:	4659      	mov	r1, fp
 801d662:	4630      	mov	r0, r6
 801d664:	f7e3 f8a2 	bl	80007ac <__aeabi_ddiv>
 801d668:	b003      	add	sp, #12
 801d66a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d66e <__copybits>:
 801d66e:	3901      	subs	r1, #1
 801d670:	b510      	push	{r4, lr}
 801d672:	1149      	asrs	r1, r1, #5
 801d674:	6914      	ldr	r4, [r2, #16]
 801d676:	3101      	adds	r1, #1
 801d678:	f102 0314 	add.w	r3, r2, #20
 801d67c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801d680:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801d684:	42a3      	cmp	r3, r4
 801d686:	4602      	mov	r2, r0
 801d688:	d303      	bcc.n	801d692 <__copybits+0x24>
 801d68a:	2300      	movs	r3, #0
 801d68c:	428a      	cmp	r2, r1
 801d68e:	d305      	bcc.n	801d69c <__copybits+0x2e>
 801d690:	bd10      	pop	{r4, pc}
 801d692:	f853 2b04 	ldr.w	r2, [r3], #4
 801d696:	f840 2b04 	str.w	r2, [r0], #4
 801d69a:	e7f3      	b.n	801d684 <__copybits+0x16>
 801d69c:	f842 3b04 	str.w	r3, [r2], #4
 801d6a0:	e7f4      	b.n	801d68c <__copybits+0x1e>

0801d6a2 <__any_on>:
 801d6a2:	f100 0214 	add.w	r2, r0, #20
 801d6a6:	6900      	ldr	r0, [r0, #16]
 801d6a8:	114b      	asrs	r3, r1, #5
 801d6aa:	4298      	cmp	r0, r3
 801d6ac:	b510      	push	{r4, lr}
 801d6ae:	db11      	blt.n	801d6d4 <__any_on+0x32>
 801d6b0:	dd0a      	ble.n	801d6c8 <__any_on+0x26>
 801d6b2:	f011 011f 	ands.w	r1, r1, #31
 801d6b6:	d007      	beq.n	801d6c8 <__any_on+0x26>
 801d6b8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801d6bc:	fa24 f001 	lsr.w	r0, r4, r1
 801d6c0:	fa00 f101 	lsl.w	r1, r0, r1
 801d6c4:	428c      	cmp	r4, r1
 801d6c6:	d10b      	bne.n	801d6e0 <__any_on+0x3e>
 801d6c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d6cc:	4293      	cmp	r3, r2
 801d6ce:	d803      	bhi.n	801d6d8 <__any_on+0x36>
 801d6d0:	2000      	movs	r0, #0
 801d6d2:	bd10      	pop	{r4, pc}
 801d6d4:	4603      	mov	r3, r0
 801d6d6:	e7f7      	b.n	801d6c8 <__any_on+0x26>
 801d6d8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801d6dc:	2900      	cmp	r1, #0
 801d6de:	d0f5      	beq.n	801d6cc <__any_on+0x2a>
 801d6e0:	2001      	movs	r0, #1
 801d6e2:	e7f6      	b.n	801d6d2 <__any_on+0x30>

0801d6e4 <_calloc_r>:
 801d6e4:	b538      	push	{r3, r4, r5, lr}
 801d6e6:	fb02 f401 	mul.w	r4, r2, r1
 801d6ea:	4621      	mov	r1, r4
 801d6ec:	f000 f854 	bl	801d798 <_malloc_r>
 801d6f0:	4605      	mov	r5, r0
 801d6f2:	b118      	cbz	r0, 801d6fc <_calloc_r+0x18>
 801d6f4:	4622      	mov	r2, r4
 801d6f6:	2100      	movs	r1, #0
 801d6f8:	f7fc f9d8 	bl	8019aac <memset>
 801d6fc:	4628      	mov	r0, r5
 801d6fe:	bd38      	pop	{r3, r4, r5, pc}

0801d700 <_free_r>:
 801d700:	b538      	push	{r3, r4, r5, lr}
 801d702:	4605      	mov	r5, r0
 801d704:	2900      	cmp	r1, #0
 801d706:	d043      	beq.n	801d790 <_free_r+0x90>
 801d708:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d70c:	1f0c      	subs	r4, r1, #4
 801d70e:	2b00      	cmp	r3, #0
 801d710:	bfb8      	it	lt
 801d712:	18e4      	addlt	r4, r4, r3
 801d714:	f000 fbf9 	bl	801df0a <__malloc_lock>
 801d718:	4a1e      	ldr	r2, [pc, #120]	; (801d794 <_free_r+0x94>)
 801d71a:	6813      	ldr	r3, [r2, #0]
 801d71c:	4610      	mov	r0, r2
 801d71e:	b933      	cbnz	r3, 801d72e <_free_r+0x2e>
 801d720:	6063      	str	r3, [r4, #4]
 801d722:	6014      	str	r4, [r2, #0]
 801d724:	4628      	mov	r0, r5
 801d726:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d72a:	f000 bbef 	b.w	801df0c <__malloc_unlock>
 801d72e:	42a3      	cmp	r3, r4
 801d730:	d90b      	bls.n	801d74a <_free_r+0x4a>
 801d732:	6821      	ldr	r1, [r4, #0]
 801d734:	1862      	adds	r2, r4, r1
 801d736:	4293      	cmp	r3, r2
 801d738:	bf01      	itttt	eq
 801d73a:	681a      	ldreq	r2, [r3, #0]
 801d73c:	685b      	ldreq	r3, [r3, #4]
 801d73e:	1852      	addeq	r2, r2, r1
 801d740:	6022      	streq	r2, [r4, #0]
 801d742:	6063      	str	r3, [r4, #4]
 801d744:	6004      	str	r4, [r0, #0]
 801d746:	e7ed      	b.n	801d724 <_free_r+0x24>
 801d748:	4613      	mov	r3, r2
 801d74a:	685a      	ldr	r2, [r3, #4]
 801d74c:	b10a      	cbz	r2, 801d752 <_free_r+0x52>
 801d74e:	42a2      	cmp	r2, r4
 801d750:	d9fa      	bls.n	801d748 <_free_r+0x48>
 801d752:	6819      	ldr	r1, [r3, #0]
 801d754:	1858      	adds	r0, r3, r1
 801d756:	42a0      	cmp	r0, r4
 801d758:	d10b      	bne.n	801d772 <_free_r+0x72>
 801d75a:	6820      	ldr	r0, [r4, #0]
 801d75c:	4401      	add	r1, r0
 801d75e:	1858      	adds	r0, r3, r1
 801d760:	4282      	cmp	r2, r0
 801d762:	6019      	str	r1, [r3, #0]
 801d764:	d1de      	bne.n	801d724 <_free_r+0x24>
 801d766:	6810      	ldr	r0, [r2, #0]
 801d768:	6852      	ldr	r2, [r2, #4]
 801d76a:	4401      	add	r1, r0
 801d76c:	6019      	str	r1, [r3, #0]
 801d76e:	605a      	str	r2, [r3, #4]
 801d770:	e7d8      	b.n	801d724 <_free_r+0x24>
 801d772:	d902      	bls.n	801d77a <_free_r+0x7a>
 801d774:	230c      	movs	r3, #12
 801d776:	602b      	str	r3, [r5, #0]
 801d778:	e7d4      	b.n	801d724 <_free_r+0x24>
 801d77a:	6820      	ldr	r0, [r4, #0]
 801d77c:	1821      	adds	r1, r4, r0
 801d77e:	428a      	cmp	r2, r1
 801d780:	bf01      	itttt	eq
 801d782:	6811      	ldreq	r1, [r2, #0]
 801d784:	6852      	ldreq	r2, [r2, #4]
 801d786:	1809      	addeq	r1, r1, r0
 801d788:	6021      	streq	r1, [r4, #0]
 801d78a:	6062      	str	r2, [r4, #4]
 801d78c:	605c      	str	r4, [r3, #4]
 801d78e:	e7c9      	b.n	801d724 <_free_r+0x24>
 801d790:	bd38      	pop	{r3, r4, r5, pc}
 801d792:	bf00      	nop
 801d794:	20004d6c 	.word	0x20004d6c

0801d798 <_malloc_r>:
 801d798:	b570      	push	{r4, r5, r6, lr}
 801d79a:	1ccd      	adds	r5, r1, #3
 801d79c:	f025 0503 	bic.w	r5, r5, #3
 801d7a0:	3508      	adds	r5, #8
 801d7a2:	2d0c      	cmp	r5, #12
 801d7a4:	bf38      	it	cc
 801d7a6:	250c      	movcc	r5, #12
 801d7a8:	2d00      	cmp	r5, #0
 801d7aa:	4606      	mov	r6, r0
 801d7ac:	db01      	blt.n	801d7b2 <_malloc_r+0x1a>
 801d7ae:	42a9      	cmp	r1, r5
 801d7b0:	d903      	bls.n	801d7ba <_malloc_r+0x22>
 801d7b2:	230c      	movs	r3, #12
 801d7b4:	6033      	str	r3, [r6, #0]
 801d7b6:	2000      	movs	r0, #0
 801d7b8:	bd70      	pop	{r4, r5, r6, pc}
 801d7ba:	f000 fba6 	bl	801df0a <__malloc_lock>
 801d7be:	4a21      	ldr	r2, [pc, #132]	; (801d844 <_malloc_r+0xac>)
 801d7c0:	6814      	ldr	r4, [r2, #0]
 801d7c2:	4621      	mov	r1, r4
 801d7c4:	b991      	cbnz	r1, 801d7ec <_malloc_r+0x54>
 801d7c6:	4c20      	ldr	r4, [pc, #128]	; (801d848 <_malloc_r+0xb0>)
 801d7c8:	6823      	ldr	r3, [r4, #0]
 801d7ca:	b91b      	cbnz	r3, 801d7d4 <_malloc_r+0x3c>
 801d7cc:	4630      	mov	r0, r6
 801d7ce:	f000 facd 	bl	801dd6c <_sbrk_r>
 801d7d2:	6020      	str	r0, [r4, #0]
 801d7d4:	4629      	mov	r1, r5
 801d7d6:	4630      	mov	r0, r6
 801d7d8:	f000 fac8 	bl	801dd6c <_sbrk_r>
 801d7dc:	1c43      	adds	r3, r0, #1
 801d7de:	d124      	bne.n	801d82a <_malloc_r+0x92>
 801d7e0:	230c      	movs	r3, #12
 801d7e2:	4630      	mov	r0, r6
 801d7e4:	6033      	str	r3, [r6, #0]
 801d7e6:	f000 fb91 	bl	801df0c <__malloc_unlock>
 801d7ea:	e7e4      	b.n	801d7b6 <_malloc_r+0x1e>
 801d7ec:	680b      	ldr	r3, [r1, #0]
 801d7ee:	1b5b      	subs	r3, r3, r5
 801d7f0:	d418      	bmi.n	801d824 <_malloc_r+0x8c>
 801d7f2:	2b0b      	cmp	r3, #11
 801d7f4:	d90f      	bls.n	801d816 <_malloc_r+0x7e>
 801d7f6:	600b      	str	r3, [r1, #0]
 801d7f8:	18cc      	adds	r4, r1, r3
 801d7fa:	50cd      	str	r5, [r1, r3]
 801d7fc:	4630      	mov	r0, r6
 801d7fe:	f000 fb85 	bl	801df0c <__malloc_unlock>
 801d802:	f104 000b 	add.w	r0, r4, #11
 801d806:	1d23      	adds	r3, r4, #4
 801d808:	f020 0007 	bic.w	r0, r0, #7
 801d80c:	1ac3      	subs	r3, r0, r3
 801d80e:	d0d3      	beq.n	801d7b8 <_malloc_r+0x20>
 801d810:	425a      	negs	r2, r3
 801d812:	50e2      	str	r2, [r4, r3]
 801d814:	e7d0      	b.n	801d7b8 <_malloc_r+0x20>
 801d816:	684b      	ldr	r3, [r1, #4]
 801d818:	428c      	cmp	r4, r1
 801d81a:	bf16      	itet	ne
 801d81c:	6063      	strne	r3, [r4, #4]
 801d81e:	6013      	streq	r3, [r2, #0]
 801d820:	460c      	movne	r4, r1
 801d822:	e7eb      	b.n	801d7fc <_malloc_r+0x64>
 801d824:	460c      	mov	r4, r1
 801d826:	6849      	ldr	r1, [r1, #4]
 801d828:	e7cc      	b.n	801d7c4 <_malloc_r+0x2c>
 801d82a:	1cc4      	adds	r4, r0, #3
 801d82c:	f024 0403 	bic.w	r4, r4, #3
 801d830:	42a0      	cmp	r0, r4
 801d832:	d005      	beq.n	801d840 <_malloc_r+0xa8>
 801d834:	1a21      	subs	r1, r4, r0
 801d836:	4630      	mov	r0, r6
 801d838:	f000 fa98 	bl	801dd6c <_sbrk_r>
 801d83c:	3001      	adds	r0, #1
 801d83e:	d0cf      	beq.n	801d7e0 <_malloc_r+0x48>
 801d840:	6025      	str	r5, [r4, #0]
 801d842:	e7db      	b.n	801d7fc <_malloc_r+0x64>
 801d844:	20004d6c 	.word	0x20004d6c
 801d848:	20004d70 	.word	0x20004d70

0801d84c <__ssputs_r>:
 801d84c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d850:	688e      	ldr	r6, [r1, #8]
 801d852:	4682      	mov	sl, r0
 801d854:	429e      	cmp	r6, r3
 801d856:	460c      	mov	r4, r1
 801d858:	4690      	mov	r8, r2
 801d85a:	4699      	mov	r9, r3
 801d85c:	d837      	bhi.n	801d8ce <__ssputs_r+0x82>
 801d85e:	898a      	ldrh	r2, [r1, #12]
 801d860:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801d864:	d031      	beq.n	801d8ca <__ssputs_r+0x7e>
 801d866:	2302      	movs	r3, #2
 801d868:	6825      	ldr	r5, [r4, #0]
 801d86a:	6909      	ldr	r1, [r1, #16]
 801d86c:	1a6f      	subs	r7, r5, r1
 801d86e:	6965      	ldr	r5, [r4, #20]
 801d870:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d874:	fb95 f5f3 	sdiv	r5, r5, r3
 801d878:	f109 0301 	add.w	r3, r9, #1
 801d87c:	443b      	add	r3, r7
 801d87e:	429d      	cmp	r5, r3
 801d880:	bf38      	it	cc
 801d882:	461d      	movcc	r5, r3
 801d884:	0553      	lsls	r3, r2, #21
 801d886:	d530      	bpl.n	801d8ea <__ssputs_r+0x9e>
 801d888:	4629      	mov	r1, r5
 801d88a:	f7ff ff85 	bl	801d798 <_malloc_r>
 801d88e:	4606      	mov	r6, r0
 801d890:	b950      	cbnz	r0, 801d8a8 <__ssputs_r+0x5c>
 801d892:	230c      	movs	r3, #12
 801d894:	f04f 30ff 	mov.w	r0, #4294967295
 801d898:	f8ca 3000 	str.w	r3, [sl]
 801d89c:	89a3      	ldrh	r3, [r4, #12]
 801d89e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d8a2:	81a3      	strh	r3, [r4, #12]
 801d8a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d8a8:	463a      	mov	r2, r7
 801d8aa:	6921      	ldr	r1, [r4, #16]
 801d8ac:	f7fc f8f3 	bl	8019a96 <memcpy>
 801d8b0:	89a3      	ldrh	r3, [r4, #12]
 801d8b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801d8b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d8ba:	81a3      	strh	r3, [r4, #12]
 801d8bc:	6126      	str	r6, [r4, #16]
 801d8be:	443e      	add	r6, r7
 801d8c0:	6026      	str	r6, [r4, #0]
 801d8c2:	464e      	mov	r6, r9
 801d8c4:	6165      	str	r5, [r4, #20]
 801d8c6:	1bed      	subs	r5, r5, r7
 801d8c8:	60a5      	str	r5, [r4, #8]
 801d8ca:	454e      	cmp	r6, r9
 801d8cc:	d900      	bls.n	801d8d0 <__ssputs_r+0x84>
 801d8ce:	464e      	mov	r6, r9
 801d8d0:	4632      	mov	r2, r6
 801d8d2:	4641      	mov	r1, r8
 801d8d4:	6820      	ldr	r0, [r4, #0]
 801d8d6:	f000 faff 	bl	801ded8 <memmove>
 801d8da:	68a3      	ldr	r3, [r4, #8]
 801d8dc:	2000      	movs	r0, #0
 801d8de:	1b9b      	subs	r3, r3, r6
 801d8e0:	60a3      	str	r3, [r4, #8]
 801d8e2:	6823      	ldr	r3, [r4, #0]
 801d8e4:	441e      	add	r6, r3
 801d8e6:	6026      	str	r6, [r4, #0]
 801d8e8:	e7dc      	b.n	801d8a4 <__ssputs_r+0x58>
 801d8ea:	462a      	mov	r2, r5
 801d8ec:	f000 fb0f 	bl	801df0e <_realloc_r>
 801d8f0:	4606      	mov	r6, r0
 801d8f2:	2800      	cmp	r0, #0
 801d8f4:	d1e2      	bne.n	801d8bc <__ssputs_r+0x70>
 801d8f6:	6921      	ldr	r1, [r4, #16]
 801d8f8:	4650      	mov	r0, sl
 801d8fa:	f7ff ff01 	bl	801d700 <_free_r>
 801d8fe:	e7c8      	b.n	801d892 <__ssputs_r+0x46>

0801d900 <_svfiprintf_r>:
 801d900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d904:	461d      	mov	r5, r3
 801d906:	898b      	ldrh	r3, [r1, #12]
 801d908:	b09d      	sub	sp, #116	; 0x74
 801d90a:	061f      	lsls	r7, r3, #24
 801d90c:	4680      	mov	r8, r0
 801d90e:	460c      	mov	r4, r1
 801d910:	4616      	mov	r6, r2
 801d912:	d50f      	bpl.n	801d934 <_svfiprintf_r+0x34>
 801d914:	690b      	ldr	r3, [r1, #16]
 801d916:	b96b      	cbnz	r3, 801d934 <_svfiprintf_r+0x34>
 801d918:	2140      	movs	r1, #64	; 0x40
 801d91a:	f7ff ff3d 	bl	801d798 <_malloc_r>
 801d91e:	6020      	str	r0, [r4, #0]
 801d920:	6120      	str	r0, [r4, #16]
 801d922:	b928      	cbnz	r0, 801d930 <_svfiprintf_r+0x30>
 801d924:	230c      	movs	r3, #12
 801d926:	f8c8 3000 	str.w	r3, [r8]
 801d92a:	f04f 30ff 	mov.w	r0, #4294967295
 801d92e:	e0c8      	b.n	801dac2 <_svfiprintf_r+0x1c2>
 801d930:	2340      	movs	r3, #64	; 0x40
 801d932:	6163      	str	r3, [r4, #20]
 801d934:	2300      	movs	r3, #0
 801d936:	9309      	str	r3, [sp, #36]	; 0x24
 801d938:	2320      	movs	r3, #32
 801d93a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d93e:	2330      	movs	r3, #48	; 0x30
 801d940:	f04f 0b01 	mov.w	fp, #1
 801d944:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d948:	9503      	str	r5, [sp, #12]
 801d94a:	4637      	mov	r7, r6
 801d94c:	463d      	mov	r5, r7
 801d94e:	f815 3b01 	ldrb.w	r3, [r5], #1
 801d952:	b10b      	cbz	r3, 801d958 <_svfiprintf_r+0x58>
 801d954:	2b25      	cmp	r3, #37	; 0x25
 801d956:	d13e      	bne.n	801d9d6 <_svfiprintf_r+0xd6>
 801d958:	ebb7 0a06 	subs.w	sl, r7, r6
 801d95c:	d00b      	beq.n	801d976 <_svfiprintf_r+0x76>
 801d95e:	4653      	mov	r3, sl
 801d960:	4632      	mov	r2, r6
 801d962:	4621      	mov	r1, r4
 801d964:	4640      	mov	r0, r8
 801d966:	f7ff ff71 	bl	801d84c <__ssputs_r>
 801d96a:	3001      	adds	r0, #1
 801d96c:	f000 80a4 	beq.w	801dab8 <_svfiprintf_r+0x1b8>
 801d970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d972:	4453      	add	r3, sl
 801d974:	9309      	str	r3, [sp, #36]	; 0x24
 801d976:	783b      	ldrb	r3, [r7, #0]
 801d978:	2b00      	cmp	r3, #0
 801d97a:	f000 809d 	beq.w	801dab8 <_svfiprintf_r+0x1b8>
 801d97e:	2300      	movs	r3, #0
 801d980:	f04f 32ff 	mov.w	r2, #4294967295
 801d984:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d988:	9304      	str	r3, [sp, #16]
 801d98a:	9307      	str	r3, [sp, #28]
 801d98c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d990:	931a      	str	r3, [sp, #104]	; 0x68
 801d992:	462f      	mov	r7, r5
 801d994:	2205      	movs	r2, #5
 801d996:	f817 1b01 	ldrb.w	r1, [r7], #1
 801d99a:	4850      	ldr	r0, [pc, #320]	; (801dadc <_svfiprintf_r+0x1dc>)
 801d99c:	f7ff fa9c 	bl	801ced8 <memchr>
 801d9a0:	9b04      	ldr	r3, [sp, #16]
 801d9a2:	b9d0      	cbnz	r0, 801d9da <_svfiprintf_r+0xda>
 801d9a4:	06d9      	lsls	r1, r3, #27
 801d9a6:	bf44      	itt	mi
 801d9a8:	2220      	movmi	r2, #32
 801d9aa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801d9ae:	071a      	lsls	r2, r3, #28
 801d9b0:	bf44      	itt	mi
 801d9b2:	222b      	movmi	r2, #43	; 0x2b
 801d9b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801d9b8:	782a      	ldrb	r2, [r5, #0]
 801d9ba:	2a2a      	cmp	r2, #42	; 0x2a
 801d9bc:	d015      	beq.n	801d9ea <_svfiprintf_r+0xea>
 801d9be:	462f      	mov	r7, r5
 801d9c0:	2000      	movs	r0, #0
 801d9c2:	250a      	movs	r5, #10
 801d9c4:	9a07      	ldr	r2, [sp, #28]
 801d9c6:	4639      	mov	r1, r7
 801d9c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d9cc:	3b30      	subs	r3, #48	; 0x30
 801d9ce:	2b09      	cmp	r3, #9
 801d9d0:	d94d      	bls.n	801da6e <_svfiprintf_r+0x16e>
 801d9d2:	b1b8      	cbz	r0, 801da04 <_svfiprintf_r+0x104>
 801d9d4:	e00f      	b.n	801d9f6 <_svfiprintf_r+0xf6>
 801d9d6:	462f      	mov	r7, r5
 801d9d8:	e7b8      	b.n	801d94c <_svfiprintf_r+0x4c>
 801d9da:	4a40      	ldr	r2, [pc, #256]	; (801dadc <_svfiprintf_r+0x1dc>)
 801d9dc:	463d      	mov	r5, r7
 801d9de:	1a80      	subs	r0, r0, r2
 801d9e0:	fa0b f000 	lsl.w	r0, fp, r0
 801d9e4:	4318      	orrs	r0, r3
 801d9e6:	9004      	str	r0, [sp, #16]
 801d9e8:	e7d3      	b.n	801d992 <_svfiprintf_r+0x92>
 801d9ea:	9a03      	ldr	r2, [sp, #12]
 801d9ec:	1d11      	adds	r1, r2, #4
 801d9ee:	6812      	ldr	r2, [r2, #0]
 801d9f0:	9103      	str	r1, [sp, #12]
 801d9f2:	2a00      	cmp	r2, #0
 801d9f4:	db01      	blt.n	801d9fa <_svfiprintf_r+0xfa>
 801d9f6:	9207      	str	r2, [sp, #28]
 801d9f8:	e004      	b.n	801da04 <_svfiprintf_r+0x104>
 801d9fa:	4252      	negs	r2, r2
 801d9fc:	f043 0302 	orr.w	r3, r3, #2
 801da00:	9207      	str	r2, [sp, #28]
 801da02:	9304      	str	r3, [sp, #16]
 801da04:	783b      	ldrb	r3, [r7, #0]
 801da06:	2b2e      	cmp	r3, #46	; 0x2e
 801da08:	d10c      	bne.n	801da24 <_svfiprintf_r+0x124>
 801da0a:	787b      	ldrb	r3, [r7, #1]
 801da0c:	2b2a      	cmp	r3, #42	; 0x2a
 801da0e:	d133      	bne.n	801da78 <_svfiprintf_r+0x178>
 801da10:	9b03      	ldr	r3, [sp, #12]
 801da12:	3702      	adds	r7, #2
 801da14:	1d1a      	adds	r2, r3, #4
 801da16:	681b      	ldr	r3, [r3, #0]
 801da18:	9203      	str	r2, [sp, #12]
 801da1a:	2b00      	cmp	r3, #0
 801da1c:	bfb8      	it	lt
 801da1e:	f04f 33ff 	movlt.w	r3, #4294967295
 801da22:	9305      	str	r3, [sp, #20]
 801da24:	4d2e      	ldr	r5, [pc, #184]	; (801dae0 <_svfiprintf_r+0x1e0>)
 801da26:	2203      	movs	r2, #3
 801da28:	7839      	ldrb	r1, [r7, #0]
 801da2a:	4628      	mov	r0, r5
 801da2c:	f7ff fa54 	bl	801ced8 <memchr>
 801da30:	b138      	cbz	r0, 801da42 <_svfiprintf_r+0x142>
 801da32:	2340      	movs	r3, #64	; 0x40
 801da34:	1b40      	subs	r0, r0, r5
 801da36:	fa03 f000 	lsl.w	r0, r3, r0
 801da3a:	9b04      	ldr	r3, [sp, #16]
 801da3c:	3701      	adds	r7, #1
 801da3e:	4303      	orrs	r3, r0
 801da40:	9304      	str	r3, [sp, #16]
 801da42:	7839      	ldrb	r1, [r7, #0]
 801da44:	2206      	movs	r2, #6
 801da46:	4827      	ldr	r0, [pc, #156]	; (801dae4 <_svfiprintf_r+0x1e4>)
 801da48:	1c7e      	adds	r6, r7, #1
 801da4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801da4e:	f7ff fa43 	bl	801ced8 <memchr>
 801da52:	2800      	cmp	r0, #0
 801da54:	d038      	beq.n	801dac8 <_svfiprintf_r+0x1c8>
 801da56:	4b24      	ldr	r3, [pc, #144]	; (801dae8 <_svfiprintf_r+0x1e8>)
 801da58:	bb13      	cbnz	r3, 801daa0 <_svfiprintf_r+0x1a0>
 801da5a:	9b03      	ldr	r3, [sp, #12]
 801da5c:	3307      	adds	r3, #7
 801da5e:	f023 0307 	bic.w	r3, r3, #7
 801da62:	3308      	adds	r3, #8
 801da64:	9303      	str	r3, [sp, #12]
 801da66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801da68:	444b      	add	r3, r9
 801da6a:	9309      	str	r3, [sp, #36]	; 0x24
 801da6c:	e76d      	b.n	801d94a <_svfiprintf_r+0x4a>
 801da6e:	fb05 3202 	mla	r2, r5, r2, r3
 801da72:	2001      	movs	r0, #1
 801da74:	460f      	mov	r7, r1
 801da76:	e7a6      	b.n	801d9c6 <_svfiprintf_r+0xc6>
 801da78:	2300      	movs	r3, #0
 801da7a:	250a      	movs	r5, #10
 801da7c:	4619      	mov	r1, r3
 801da7e:	3701      	adds	r7, #1
 801da80:	9305      	str	r3, [sp, #20]
 801da82:	4638      	mov	r0, r7
 801da84:	f810 2b01 	ldrb.w	r2, [r0], #1
 801da88:	3a30      	subs	r2, #48	; 0x30
 801da8a:	2a09      	cmp	r2, #9
 801da8c:	d903      	bls.n	801da96 <_svfiprintf_r+0x196>
 801da8e:	2b00      	cmp	r3, #0
 801da90:	d0c8      	beq.n	801da24 <_svfiprintf_r+0x124>
 801da92:	9105      	str	r1, [sp, #20]
 801da94:	e7c6      	b.n	801da24 <_svfiprintf_r+0x124>
 801da96:	fb05 2101 	mla	r1, r5, r1, r2
 801da9a:	2301      	movs	r3, #1
 801da9c:	4607      	mov	r7, r0
 801da9e:	e7f0      	b.n	801da82 <_svfiprintf_r+0x182>
 801daa0:	ab03      	add	r3, sp, #12
 801daa2:	9300      	str	r3, [sp, #0]
 801daa4:	4622      	mov	r2, r4
 801daa6:	4b11      	ldr	r3, [pc, #68]	; (801daec <_svfiprintf_r+0x1ec>)
 801daa8:	a904      	add	r1, sp, #16
 801daaa:	4640      	mov	r0, r8
 801daac:	f7fc f898 	bl	8019be0 <_printf_float>
 801dab0:	f1b0 3fff 	cmp.w	r0, #4294967295
 801dab4:	4681      	mov	r9, r0
 801dab6:	d1d6      	bne.n	801da66 <_svfiprintf_r+0x166>
 801dab8:	89a3      	ldrh	r3, [r4, #12]
 801daba:	065b      	lsls	r3, r3, #25
 801dabc:	f53f af35 	bmi.w	801d92a <_svfiprintf_r+0x2a>
 801dac0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801dac2:	b01d      	add	sp, #116	; 0x74
 801dac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dac8:	ab03      	add	r3, sp, #12
 801daca:	9300      	str	r3, [sp, #0]
 801dacc:	4622      	mov	r2, r4
 801dace:	4b07      	ldr	r3, [pc, #28]	; (801daec <_svfiprintf_r+0x1ec>)
 801dad0:	a904      	add	r1, sp, #16
 801dad2:	4640      	mov	r0, r8
 801dad4:	f7fc fb30 	bl	801a138 <_printf_i>
 801dad8:	e7ea      	b.n	801dab0 <_svfiprintf_r+0x1b0>
 801dada:	bf00      	nop
 801dadc:	08021f44 	.word	0x08021f44
 801dae0:	08021f4a 	.word	0x08021f4a
 801dae4:	08021f4e 	.word	0x08021f4e
 801dae8:	08019be1 	.word	0x08019be1
 801daec:	0801d84d 	.word	0x0801d84d

0801daf0 <__sfputc_r>:
 801daf0:	6893      	ldr	r3, [r2, #8]
 801daf2:	b410      	push	{r4}
 801daf4:	3b01      	subs	r3, #1
 801daf6:	2b00      	cmp	r3, #0
 801daf8:	6093      	str	r3, [r2, #8]
 801dafa:	da07      	bge.n	801db0c <__sfputc_r+0x1c>
 801dafc:	6994      	ldr	r4, [r2, #24]
 801dafe:	42a3      	cmp	r3, r4
 801db00:	db01      	blt.n	801db06 <__sfputc_r+0x16>
 801db02:	290a      	cmp	r1, #10
 801db04:	d102      	bne.n	801db0c <__sfputc_r+0x1c>
 801db06:	bc10      	pop	{r4}
 801db08:	f7fd bdb0 	b.w	801b66c <__swbuf_r>
 801db0c:	6813      	ldr	r3, [r2, #0]
 801db0e:	1c58      	adds	r0, r3, #1
 801db10:	6010      	str	r0, [r2, #0]
 801db12:	7019      	strb	r1, [r3, #0]
 801db14:	4608      	mov	r0, r1
 801db16:	bc10      	pop	{r4}
 801db18:	4770      	bx	lr

0801db1a <__sfputs_r>:
 801db1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801db1c:	4606      	mov	r6, r0
 801db1e:	460f      	mov	r7, r1
 801db20:	4614      	mov	r4, r2
 801db22:	18d5      	adds	r5, r2, r3
 801db24:	42ac      	cmp	r4, r5
 801db26:	d101      	bne.n	801db2c <__sfputs_r+0x12>
 801db28:	2000      	movs	r0, #0
 801db2a:	e007      	b.n	801db3c <__sfputs_r+0x22>
 801db2c:	463a      	mov	r2, r7
 801db2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801db32:	4630      	mov	r0, r6
 801db34:	f7ff ffdc 	bl	801daf0 <__sfputc_r>
 801db38:	1c43      	adds	r3, r0, #1
 801db3a:	d1f3      	bne.n	801db24 <__sfputs_r+0xa>
 801db3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801db40 <_vfiprintf_r>:
 801db40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db44:	460c      	mov	r4, r1
 801db46:	b09d      	sub	sp, #116	; 0x74
 801db48:	4617      	mov	r7, r2
 801db4a:	461d      	mov	r5, r3
 801db4c:	4606      	mov	r6, r0
 801db4e:	b118      	cbz	r0, 801db58 <_vfiprintf_r+0x18>
 801db50:	6983      	ldr	r3, [r0, #24]
 801db52:	b90b      	cbnz	r3, 801db58 <_vfiprintf_r+0x18>
 801db54:	f7fe fd7c 	bl	801c650 <__sinit>
 801db58:	4b7c      	ldr	r3, [pc, #496]	; (801dd4c <_vfiprintf_r+0x20c>)
 801db5a:	429c      	cmp	r4, r3
 801db5c:	d158      	bne.n	801dc10 <_vfiprintf_r+0xd0>
 801db5e:	6874      	ldr	r4, [r6, #4]
 801db60:	89a3      	ldrh	r3, [r4, #12]
 801db62:	0718      	lsls	r0, r3, #28
 801db64:	d55e      	bpl.n	801dc24 <_vfiprintf_r+0xe4>
 801db66:	6923      	ldr	r3, [r4, #16]
 801db68:	2b00      	cmp	r3, #0
 801db6a:	d05b      	beq.n	801dc24 <_vfiprintf_r+0xe4>
 801db6c:	2300      	movs	r3, #0
 801db6e:	9309      	str	r3, [sp, #36]	; 0x24
 801db70:	2320      	movs	r3, #32
 801db72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801db76:	2330      	movs	r3, #48	; 0x30
 801db78:	f04f 0b01 	mov.w	fp, #1
 801db7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801db80:	9503      	str	r5, [sp, #12]
 801db82:	46b8      	mov	r8, r7
 801db84:	4645      	mov	r5, r8
 801db86:	f815 3b01 	ldrb.w	r3, [r5], #1
 801db8a:	b10b      	cbz	r3, 801db90 <_vfiprintf_r+0x50>
 801db8c:	2b25      	cmp	r3, #37	; 0x25
 801db8e:	d154      	bne.n	801dc3a <_vfiprintf_r+0xfa>
 801db90:	ebb8 0a07 	subs.w	sl, r8, r7
 801db94:	d00b      	beq.n	801dbae <_vfiprintf_r+0x6e>
 801db96:	4653      	mov	r3, sl
 801db98:	463a      	mov	r2, r7
 801db9a:	4621      	mov	r1, r4
 801db9c:	4630      	mov	r0, r6
 801db9e:	f7ff ffbc 	bl	801db1a <__sfputs_r>
 801dba2:	3001      	adds	r0, #1
 801dba4:	f000 80c2 	beq.w	801dd2c <_vfiprintf_r+0x1ec>
 801dba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dbaa:	4453      	add	r3, sl
 801dbac:	9309      	str	r3, [sp, #36]	; 0x24
 801dbae:	f898 3000 	ldrb.w	r3, [r8]
 801dbb2:	2b00      	cmp	r3, #0
 801dbb4:	f000 80ba 	beq.w	801dd2c <_vfiprintf_r+0x1ec>
 801dbb8:	2300      	movs	r3, #0
 801dbba:	f04f 32ff 	mov.w	r2, #4294967295
 801dbbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801dbc2:	9304      	str	r3, [sp, #16]
 801dbc4:	9307      	str	r3, [sp, #28]
 801dbc6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801dbca:	931a      	str	r3, [sp, #104]	; 0x68
 801dbcc:	46a8      	mov	r8, r5
 801dbce:	2205      	movs	r2, #5
 801dbd0:	f818 1b01 	ldrb.w	r1, [r8], #1
 801dbd4:	485e      	ldr	r0, [pc, #376]	; (801dd50 <_vfiprintf_r+0x210>)
 801dbd6:	f7ff f97f 	bl	801ced8 <memchr>
 801dbda:	9b04      	ldr	r3, [sp, #16]
 801dbdc:	bb78      	cbnz	r0, 801dc3e <_vfiprintf_r+0xfe>
 801dbde:	06d9      	lsls	r1, r3, #27
 801dbe0:	bf44      	itt	mi
 801dbe2:	2220      	movmi	r2, #32
 801dbe4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801dbe8:	071a      	lsls	r2, r3, #28
 801dbea:	bf44      	itt	mi
 801dbec:	222b      	movmi	r2, #43	; 0x2b
 801dbee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801dbf2:	782a      	ldrb	r2, [r5, #0]
 801dbf4:	2a2a      	cmp	r2, #42	; 0x2a
 801dbf6:	d02a      	beq.n	801dc4e <_vfiprintf_r+0x10e>
 801dbf8:	46a8      	mov	r8, r5
 801dbfa:	2000      	movs	r0, #0
 801dbfc:	250a      	movs	r5, #10
 801dbfe:	9a07      	ldr	r2, [sp, #28]
 801dc00:	4641      	mov	r1, r8
 801dc02:	f811 3b01 	ldrb.w	r3, [r1], #1
 801dc06:	3b30      	subs	r3, #48	; 0x30
 801dc08:	2b09      	cmp	r3, #9
 801dc0a:	d969      	bls.n	801dce0 <_vfiprintf_r+0x1a0>
 801dc0c:	b360      	cbz	r0, 801dc68 <_vfiprintf_r+0x128>
 801dc0e:	e024      	b.n	801dc5a <_vfiprintf_r+0x11a>
 801dc10:	4b50      	ldr	r3, [pc, #320]	; (801dd54 <_vfiprintf_r+0x214>)
 801dc12:	429c      	cmp	r4, r3
 801dc14:	d101      	bne.n	801dc1a <_vfiprintf_r+0xda>
 801dc16:	68b4      	ldr	r4, [r6, #8]
 801dc18:	e7a2      	b.n	801db60 <_vfiprintf_r+0x20>
 801dc1a:	4b4f      	ldr	r3, [pc, #316]	; (801dd58 <_vfiprintf_r+0x218>)
 801dc1c:	429c      	cmp	r4, r3
 801dc1e:	bf08      	it	eq
 801dc20:	68f4      	ldreq	r4, [r6, #12]
 801dc22:	e79d      	b.n	801db60 <_vfiprintf_r+0x20>
 801dc24:	4621      	mov	r1, r4
 801dc26:	4630      	mov	r0, r6
 801dc28:	f7fd fd72 	bl	801b710 <__swsetup_r>
 801dc2c:	2800      	cmp	r0, #0
 801dc2e:	d09d      	beq.n	801db6c <_vfiprintf_r+0x2c>
 801dc30:	f04f 30ff 	mov.w	r0, #4294967295
 801dc34:	b01d      	add	sp, #116	; 0x74
 801dc36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc3a:	46a8      	mov	r8, r5
 801dc3c:	e7a2      	b.n	801db84 <_vfiprintf_r+0x44>
 801dc3e:	4a44      	ldr	r2, [pc, #272]	; (801dd50 <_vfiprintf_r+0x210>)
 801dc40:	4645      	mov	r5, r8
 801dc42:	1a80      	subs	r0, r0, r2
 801dc44:	fa0b f000 	lsl.w	r0, fp, r0
 801dc48:	4318      	orrs	r0, r3
 801dc4a:	9004      	str	r0, [sp, #16]
 801dc4c:	e7be      	b.n	801dbcc <_vfiprintf_r+0x8c>
 801dc4e:	9a03      	ldr	r2, [sp, #12]
 801dc50:	1d11      	adds	r1, r2, #4
 801dc52:	6812      	ldr	r2, [r2, #0]
 801dc54:	9103      	str	r1, [sp, #12]
 801dc56:	2a00      	cmp	r2, #0
 801dc58:	db01      	blt.n	801dc5e <_vfiprintf_r+0x11e>
 801dc5a:	9207      	str	r2, [sp, #28]
 801dc5c:	e004      	b.n	801dc68 <_vfiprintf_r+0x128>
 801dc5e:	4252      	negs	r2, r2
 801dc60:	f043 0302 	orr.w	r3, r3, #2
 801dc64:	9207      	str	r2, [sp, #28]
 801dc66:	9304      	str	r3, [sp, #16]
 801dc68:	f898 3000 	ldrb.w	r3, [r8]
 801dc6c:	2b2e      	cmp	r3, #46	; 0x2e
 801dc6e:	d10e      	bne.n	801dc8e <_vfiprintf_r+0x14e>
 801dc70:	f898 3001 	ldrb.w	r3, [r8, #1]
 801dc74:	2b2a      	cmp	r3, #42	; 0x2a
 801dc76:	d138      	bne.n	801dcea <_vfiprintf_r+0x1aa>
 801dc78:	9b03      	ldr	r3, [sp, #12]
 801dc7a:	f108 0802 	add.w	r8, r8, #2
 801dc7e:	1d1a      	adds	r2, r3, #4
 801dc80:	681b      	ldr	r3, [r3, #0]
 801dc82:	9203      	str	r2, [sp, #12]
 801dc84:	2b00      	cmp	r3, #0
 801dc86:	bfb8      	it	lt
 801dc88:	f04f 33ff 	movlt.w	r3, #4294967295
 801dc8c:	9305      	str	r3, [sp, #20]
 801dc8e:	4d33      	ldr	r5, [pc, #204]	; (801dd5c <_vfiprintf_r+0x21c>)
 801dc90:	2203      	movs	r2, #3
 801dc92:	f898 1000 	ldrb.w	r1, [r8]
 801dc96:	4628      	mov	r0, r5
 801dc98:	f7ff f91e 	bl	801ced8 <memchr>
 801dc9c:	b140      	cbz	r0, 801dcb0 <_vfiprintf_r+0x170>
 801dc9e:	2340      	movs	r3, #64	; 0x40
 801dca0:	1b40      	subs	r0, r0, r5
 801dca2:	fa03 f000 	lsl.w	r0, r3, r0
 801dca6:	9b04      	ldr	r3, [sp, #16]
 801dca8:	f108 0801 	add.w	r8, r8, #1
 801dcac:	4303      	orrs	r3, r0
 801dcae:	9304      	str	r3, [sp, #16]
 801dcb0:	f898 1000 	ldrb.w	r1, [r8]
 801dcb4:	2206      	movs	r2, #6
 801dcb6:	482a      	ldr	r0, [pc, #168]	; (801dd60 <_vfiprintf_r+0x220>)
 801dcb8:	f108 0701 	add.w	r7, r8, #1
 801dcbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801dcc0:	f7ff f90a 	bl	801ced8 <memchr>
 801dcc4:	2800      	cmp	r0, #0
 801dcc6:	d037      	beq.n	801dd38 <_vfiprintf_r+0x1f8>
 801dcc8:	4b26      	ldr	r3, [pc, #152]	; (801dd64 <_vfiprintf_r+0x224>)
 801dcca:	bb1b      	cbnz	r3, 801dd14 <_vfiprintf_r+0x1d4>
 801dccc:	9b03      	ldr	r3, [sp, #12]
 801dcce:	3307      	adds	r3, #7
 801dcd0:	f023 0307 	bic.w	r3, r3, #7
 801dcd4:	3308      	adds	r3, #8
 801dcd6:	9303      	str	r3, [sp, #12]
 801dcd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dcda:	444b      	add	r3, r9
 801dcdc:	9309      	str	r3, [sp, #36]	; 0x24
 801dcde:	e750      	b.n	801db82 <_vfiprintf_r+0x42>
 801dce0:	fb05 3202 	mla	r2, r5, r2, r3
 801dce4:	2001      	movs	r0, #1
 801dce6:	4688      	mov	r8, r1
 801dce8:	e78a      	b.n	801dc00 <_vfiprintf_r+0xc0>
 801dcea:	2300      	movs	r3, #0
 801dcec:	250a      	movs	r5, #10
 801dcee:	4619      	mov	r1, r3
 801dcf0:	f108 0801 	add.w	r8, r8, #1
 801dcf4:	9305      	str	r3, [sp, #20]
 801dcf6:	4640      	mov	r0, r8
 801dcf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801dcfc:	3a30      	subs	r2, #48	; 0x30
 801dcfe:	2a09      	cmp	r2, #9
 801dd00:	d903      	bls.n	801dd0a <_vfiprintf_r+0x1ca>
 801dd02:	2b00      	cmp	r3, #0
 801dd04:	d0c3      	beq.n	801dc8e <_vfiprintf_r+0x14e>
 801dd06:	9105      	str	r1, [sp, #20]
 801dd08:	e7c1      	b.n	801dc8e <_vfiprintf_r+0x14e>
 801dd0a:	fb05 2101 	mla	r1, r5, r1, r2
 801dd0e:	2301      	movs	r3, #1
 801dd10:	4680      	mov	r8, r0
 801dd12:	e7f0      	b.n	801dcf6 <_vfiprintf_r+0x1b6>
 801dd14:	ab03      	add	r3, sp, #12
 801dd16:	9300      	str	r3, [sp, #0]
 801dd18:	4622      	mov	r2, r4
 801dd1a:	4b13      	ldr	r3, [pc, #76]	; (801dd68 <_vfiprintf_r+0x228>)
 801dd1c:	a904      	add	r1, sp, #16
 801dd1e:	4630      	mov	r0, r6
 801dd20:	f7fb ff5e 	bl	8019be0 <_printf_float>
 801dd24:	f1b0 3fff 	cmp.w	r0, #4294967295
 801dd28:	4681      	mov	r9, r0
 801dd2a:	d1d5      	bne.n	801dcd8 <_vfiprintf_r+0x198>
 801dd2c:	89a3      	ldrh	r3, [r4, #12]
 801dd2e:	065b      	lsls	r3, r3, #25
 801dd30:	f53f af7e 	bmi.w	801dc30 <_vfiprintf_r+0xf0>
 801dd34:	9809      	ldr	r0, [sp, #36]	; 0x24
 801dd36:	e77d      	b.n	801dc34 <_vfiprintf_r+0xf4>
 801dd38:	ab03      	add	r3, sp, #12
 801dd3a:	9300      	str	r3, [sp, #0]
 801dd3c:	4622      	mov	r2, r4
 801dd3e:	4b0a      	ldr	r3, [pc, #40]	; (801dd68 <_vfiprintf_r+0x228>)
 801dd40:	a904      	add	r1, sp, #16
 801dd42:	4630      	mov	r0, r6
 801dd44:	f7fc f9f8 	bl	801a138 <_printf_i>
 801dd48:	e7ec      	b.n	801dd24 <_vfiprintf_r+0x1e4>
 801dd4a:	bf00      	nop
 801dd4c:	08021df8 	.word	0x08021df8
 801dd50:	08021f44 	.word	0x08021f44
 801dd54:	08021e18 	.word	0x08021e18
 801dd58:	08021dd8 	.word	0x08021dd8
 801dd5c:	08021f4a 	.word	0x08021f4a
 801dd60:	08021f4e 	.word	0x08021f4e
 801dd64:	08019be1 	.word	0x08019be1
 801dd68:	0801db1b 	.word	0x0801db1b

0801dd6c <_sbrk_r>:
 801dd6c:	b538      	push	{r3, r4, r5, lr}
 801dd6e:	2300      	movs	r3, #0
 801dd70:	4c05      	ldr	r4, [pc, #20]	; (801dd88 <_sbrk_r+0x1c>)
 801dd72:	4605      	mov	r5, r0
 801dd74:	4608      	mov	r0, r1
 801dd76:	6023      	str	r3, [r4, #0]
 801dd78:	f7e3 ff4e 	bl	8001c18 <_sbrk>
 801dd7c:	1c43      	adds	r3, r0, #1
 801dd7e:	d102      	bne.n	801dd86 <_sbrk_r+0x1a>
 801dd80:	6823      	ldr	r3, [r4, #0]
 801dd82:	b103      	cbz	r3, 801dd86 <_sbrk_r+0x1a>
 801dd84:	602b      	str	r3, [r5, #0]
 801dd86:	bd38      	pop	{r3, r4, r5, pc}
 801dd88:	2000b84c 	.word	0x2000b84c

0801dd8c <__sread>:
 801dd8c:	b510      	push	{r4, lr}
 801dd8e:	460c      	mov	r4, r1
 801dd90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dd94:	f000 f8e2 	bl	801df5c <_read_r>
 801dd98:	2800      	cmp	r0, #0
 801dd9a:	bfab      	itete	ge
 801dd9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801dd9e:	89a3      	ldrhlt	r3, [r4, #12]
 801dda0:	181b      	addge	r3, r3, r0
 801dda2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801dda6:	bfac      	ite	ge
 801dda8:	6563      	strge	r3, [r4, #84]	; 0x54
 801ddaa:	81a3      	strhlt	r3, [r4, #12]
 801ddac:	bd10      	pop	{r4, pc}

0801ddae <__swrite>:
 801ddae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ddb2:	461f      	mov	r7, r3
 801ddb4:	898b      	ldrh	r3, [r1, #12]
 801ddb6:	4605      	mov	r5, r0
 801ddb8:	05db      	lsls	r3, r3, #23
 801ddba:	460c      	mov	r4, r1
 801ddbc:	4616      	mov	r6, r2
 801ddbe:	d505      	bpl.n	801ddcc <__swrite+0x1e>
 801ddc0:	2302      	movs	r3, #2
 801ddc2:	2200      	movs	r2, #0
 801ddc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ddc8:	f000 f874 	bl	801deb4 <_lseek_r>
 801ddcc:	89a3      	ldrh	r3, [r4, #12]
 801ddce:	4632      	mov	r2, r6
 801ddd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ddd4:	81a3      	strh	r3, [r4, #12]
 801ddd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ddda:	463b      	mov	r3, r7
 801dddc:	4628      	mov	r0, r5
 801ddde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801dde2:	f000 b823 	b.w	801de2c <_write_r>

0801dde6 <__sseek>:
 801dde6:	b510      	push	{r4, lr}
 801dde8:	460c      	mov	r4, r1
 801ddea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ddee:	f000 f861 	bl	801deb4 <_lseek_r>
 801ddf2:	1c43      	adds	r3, r0, #1
 801ddf4:	89a3      	ldrh	r3, [r4, #12]
 801ddf6:	bf15      	itete	ne
 801ddf8:	6560      	strne	r0, [r4, #84]	; 0x54
 801ddfa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ddfe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801de02:	81a3      	strheq	r3, [r4, #12]
 801de04:	bf18      	it	ne
 801de06:	81a3      	strhne	r3, [r4, #12]
 801de08:	bd10      	pop	{r4, pc}

0801de0a <__sclose>:
 801de0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801de0e:	f000 b81f 	b.w	801de50 <_close_r>

0801de12 <__ascii_wctomb>:
 801de12:	b149      	cbz	r1, 801de28 <__ascii_wctomb+0x16>
 801de14:	2aff      	cmp	r2, #255	; 0xff
 801de16:	bf8b      	itete	hi
 801de18:	238a      	movhi	r3, #138	; 0x8a
 801de1a:	700a      	strbls	r2, [r1, #0]
 801de1c:	6003      	strhi	r3, [r0, #0]
 801de1e:	2001      	movls	r0, #1
 801de20:	bf88      	it	hi
 801de22:	f04f 30ff 	movhi.w	r0, #4294967295
 801de26:	4770      	bx	lr
 801de28:	4608      	mov	r0, r1
 801de2a:	4770      	bx	lr

0801de2c <_write_r>:
 801de2c:	b538      	push	{r3, r4, r5, lr}
 801de2e:	4605      	mov	r5, r0
 801de30:	4608      	mov	r0, r1
 801de32:	4611      	mov	r1, r2
 801de34:	2200      	movs	r2, #0
 801de36:	4c05      	ldr	r4, [pc, #20]	; (801de4c <_write_r+0x20>)
 801de38:	6022      	str	r2, [r4, #0]
 801de3a:	461a      	mov	r2, r3
 801de3c:	f7e3 fe9f 	bl	8001b7e <_write>
 801de40:	1c43      	adds	r3, r0, #1
 801de42:	d102      	bne.n	801de4a <_write_r+0x1e>
 801de44:	6823      	ldr	r3, [r4, #0]
 801de46:	b103      	cbz	r3, 801de4a <_write_r+0x1e>
 801de48:	602b      	str	r3, [r5, #0]
 801de4a:	bd38      	pop	{r3, r4, r5, pc}
 801de4c:	2000b84c 	.word	0x2000b84c

0801de50 <_close_r>:
 801de50:	b538      	push	{r3, r4, r5, lr}
 801de52:	2300      	movs	r3, #0
 801de54:	4c05      	ldr	r4, [pc, #20]	; (801de6c <_close_r+0x1c>)
 801de56:	4605      	mov	r5, r0
 801de58:	4608      	mov	r0, r1
 801de5a:	6023      	str	r3, [r4, #0]
 801de5c:	f7e3 feab 	bl	8001bb6 <_close>
 801de60:	1c43      	adds	r3, r0, #1
 801de62:	d102      	bne.n	801de6a <_close_r+0x1a>
 801de64:	6823      	ldr	r3, [r4, #0]
 801de66:	b103      	cbz	r3, 801de6a <_close_r+0x1a>
 801de68:	602b      	str	r3, [r5, #0]
 801de6a:	bd38      	pop	{r3, r4, r5, pc}
 801de6c:	2000b84c 	.word	0x2000b84c

0801de70 <_fstat_r>:
 801de70:	b538      	push	{r3, r4, r5, lr}
 801de72:	2300      	movs	r3, #0
 801de74:	4c06      	ldr	r4, [pc, #24]	; (801de90 <_fstat_r+0x20>)
 801de76:	4605      	mov	r5, r0
 801de78:	4608      	mov	r0, r1
 801de7a:	4611      	mov	r1, r2
 801de7c:	6023      	str	r3, [r4, #0]
 801de7e:	f7e3 fea5 	bl	8001bcc <_fstat>
 801de82:	1c43      	adds	r3, r0, #1
 801de84:	d102      	bne.n	801de8c <_fstat_r+0x1c>
 801de86:	6823      	ldr	r3, [r4, #0]
 801de88:	b103      	cbz	r3, 801de8c <_fstat_r+0x1c>
 801de8a:	602b      	str	r3, [r5, #0]
 801de8c:	bd38      	pop	{r3, r4, r5, pc}
 801de8e:	bf00      	nop
 801de90:	2000b84c 	.word	0x2000b84c

0801de94 <_isatty_r>:
 801de94:	b538      	push	{r3, r4, r5, lr}
 801de96:	2300      	movs	r3, #0
 801de98:	4c05      	ldr	r4, [pc, #20]	; (801deb0 <_isatty_r+0x1c>)
 801de9a:	4605      	mov	r5, r0
 801de9c:	4608      	mov	r0, r1
 801de9e:	6023      	str	r3, [r4, #0]
 801dea0:	f7e3 fea3 	bl	8001bea <_isatty>
 801dea4:	1c43      	adds	r3, r0, #1
 801dea6:	d102      	bne.n	801deae <_isatty_r+0x1a>
 801dea8:	6823      	ldr	r3, [r4, #0]
 801deaa:	b103      	cbz	r3, 801deae <_isatty_r+0x1a>
 801deac:	602b      	str	r3, [r5, #0]
 801deae:	bd38      	pop	{r3, r4, r5, pc}
 801deb0:	2000b84c 	.word	0x2000b84c

0801deb4 <_lseek_r>:
 801deb4:	b538      	push	{r3, r4, r5, lr}
 801deb6:	4605      	mov	r5, r0
 801deb8:	4608      	mov	r0, r1
 801deba:	4611      	mov	r1, r2
 801debc:	2200      	movs	r2, #0
 801debe:	4c05      	ldr	r4, [pc, #20]	; (801ded4 <_lseek_r+0x20>)
 801dec0:	6022      	str	r2, [r4, #0]
 801dec2:	461a      	mov	r2, r3
 801dec4:	f7e3 fe9b 	bl	8001bfe <_lseek>
 801dec8:	1c43      	adds	r3, r0, #1
 801deca:	d102      	bne.n	801ded2 <_lseek_r+0x1e>
 801decc:	6823      	ldr	r3, [r4, #0]
 801dece:	b103      	cbz	r3, 801ded2 <_lseek_r+0x1e>
 801ded0:	602b      	str	r3, [r5, #0]
 801ded2:	bd38      	pop	{r3, r4, r5, pc}
 801ded4:	2000b84c 	.word	0x2000b84c

0801ded8 <memmove>:
 801ded8:	4288      	cmp	r0, r1
 801deda:	b510      	push	{r4, lr}
 801dedc:	eb01 0302 	add.w	r3, r1, r2
 801dee0:	d807      	bhi.n	801def2 <memmove+0x1a>
 801dee2:	1e42      	subs	r2, r0, #1
 801dee4:	4299      	cmp	r1, r3
 801dee6:	d00a      	beq.n	801defe <memmove+0x26>
 801dee8:	f811 4b01 	ldrb.w	r4, [r1], #1
 801deec:	f802 4f01 	strb.w	r4, [r2, #1]!
 801def0:	e7f8      	b.n	801dee4 <memmove+0xc>
 801def2:	4283      	cmp	r3, r0
 801def4:	d9f5      	bls.n	801dee2 <memmove+0xa>
 801def6:	1881      	adds	r1, r0, r2
 801def8:	1ad2      	subs	r2, r2, r3
 801defa:	42d3      	cmn	r3, r2
 801defc:	d100      	bne.n	801df00 <memmove+0x28>
 801defe:	bd10      	pop	{r4, pc}
 801df00:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801df04:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801df08:	e7f7      	b.n	801defa <memmove+0x22>

0801df0a <__malloc_lock>:
 801df0a:	4770      	bx	lr

0801df0c <__malloc_unlock>:
 801df0c:	4770      	bx	lr

0801df0e <_realloc_r>:
 801df0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801df10:	4607      	mov	r7, r0
 801df12:	4614      	mov	r4, r2
 801df14:	460e      	mov	r6, r1
 801df16:	b921      	cbnz	r1, 801df22 <_realloc_r+0x14>
 801df18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801df1c:	4611      	mov	r1, r2
 801df1e:	f7ff bc3b 	b.w	801d798 <_malloc_r>
 801df22:	b922      	cbnz	r2, 801df2e <_realloc_r+0x20>
 801df24:	f7ff fbec 	bl	801d700 <_free_r>
 801df28:	4625      	mov	r5, r4
 801df2a:	4628      	mov	r0, r5
 801df2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801df2e:	f000 f827 	bl	801df80 <_malloc_usable_size_r>
 801df32:	42a0      	cmp	r0, r4
 801df34:	d20f      	bcs.n	801df56 <_realloc_r+0x48>
 801df36:	4621      	mov	r1, r4
 801df38:	4638      	mov	r0, r7
 801df3a:	f7ff fc2d 	bl	801d798 <_malloc_r>
 801df3e:	4605      	mov	r5, r0
 801df40:	2800      	cmp	r0, #0
 801df42:	d0f2      	beq.n	801df2a <_realloc_r+0x1c>
 801df44:	4631      	mov	r1, r6
 801df46:	4622      	mov	r2, r4
 801df48:	f7fb fda5 	bl	8019a96 <memcpy>
 801df4c:	4631      	mov	r1, r6
 801df4e:	4638      	mov	r0, r7
 801df50:	f7ff fbd6 	bl	801d700 <_free_r>
 801df54:	e7e9      	b.n	801df2a <_realloc_r+0x1c>
 801df56:	4635      	mov	r5, r6
 801df58:	e7e7      	b.n	801df2a <_realloc_r+0x1c>
	...

0801df5c <_read_r>:
 801df5c:	b538      	push	{r3, r4, r5, lr}
 801df5e:	4605      	mov	r5, r0
 801df60:	4608      	mov	r0, r1
 801df62:	4611      	mov	r1, r2
 801df64:	2200      	movs	r2, #0
 801df66:	4c05      	ldr	r4, [pc, #20]	; (801df7c <_read_r+0x20>)
 801df68:	6022      	str	r2, [r4, #0]
 801df6a:	461a      	mov	r2, r3
 801df6c:	f7e3 fdea 	bl	8001b44 <_read>
 801df70:	1c43      	adds	r3, r0, #1
 801df72:	d102      	bne.n	801df7a <_read_r+0x1e>
 801df74:	6823      	ldr	r3, [r4, #0]
 801df76:	b103      	cbz	r3, 801df7a <_read_r+0x1e>
 801df78:	602b      	str	r3, [r5, #0]
 801df7a:	bd38      	pop	{r3, r4, r5, pc}
 801df7c:	2000b84c 	.word	0x2000b84c

0801df80 <_malloc_usable_size_r>:
 801df80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801df84:	1f18      	subs	r0, r3, #4
 801df86:	2b00      	cmp	r3, #0
 801df88:	bfbc      	itt	lt
 801df8a:	580b      	ldrlt	r3, [r1, r0]
 801df8c:	18c0      	addlt	r0, r0, r3
 801df8e:	4770      	bx	lr

0801df90 <_init>:
 801df90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801df92:	bf00      	nop
 801df94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801df96:	bc08      	pop	{r3}
 801df98:	469e      	mov	lr, r3
 801df9a:	4770      	bx	lr

0801df9c <_fini>:
 801df9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801df9e:	bf00      	nop
 801dfa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dfa2:	bc08      	pop	{r3}
 801dfa4:	469e      	mov	lr, r3
 801dfa6:	4770      	bx	lr
