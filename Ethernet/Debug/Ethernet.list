
Ethernet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f208  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002360  0800f38c  0800f38c  0001f38c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080116ec  080116ec  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  080116ec  080116ec  000216ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080116f4  080116f4  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080116f4  080116f4  000216f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080116f8  080116f8  000216f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080116fc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000068b0  2000007c  08011778  0003007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000692c  08011778  0003692c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029e2e  00000000  00000000  000300a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005198  00000000  00000000  00059ed3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011e8  00000000  00000000  0005f070  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001080  00000000  00000000  00060258  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b449  00000000  00000000  000612d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001cbb7  00000000  00000000  0008c721  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d25a5  00000000  00000000  000a92d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017b87d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ce8  00000000  00000000  0017b8f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	2000007c 	.word	0x2000007c
 80001a0:	00000000 	.word	0x00000000
 80001a4:	0800f374 	.word	0x0800f374

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000080 	.word	0x20000080
 80001c0:	0800f374 	.word	0x0800f374

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b974 	b.w	80004c4 <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	468c      	mov	ip, r1
 80001fa:	4604      	mov	r4, r0
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d14b      	bne.n	800029a <__udivmoddi4+0xa6>
 8000202:	428a      	cmp	r2, r1
 8000204:	4615      	mov	r5, r2
 8000206:	d967      	bls.n	80002d8 <__udivmoddi4+0xe4>
 8000208:	fab2 f282 	clz	r2, r2
 800020c:	b14a      	cbz	r2, 8000222 <__udivmoddi4+0x2e>
 800020e:	f1c2 0720 	rsb	r7, r2, #32
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	fa20 f707 	lsr.w	r7, r0, r7
 800021a:	4095      	lsls	r5, r2
 800021c:	ea47 0c03 	orr.w	ip, r7, r3
 8000220:	4094      	lsls	r4, r2
 8000222:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000226:	fbbc f7fe 	udiv	r7, ip, lr
 800022a:	fa1f f885 	uxth.w	r8, r5
 800022e:	fb0e c317 	mls	r3, lr, r7, ip
 8000232:	fb07 f908 	mul.w	r9, r7, r8
 8000236:	0c21      	lsrs	r1, r4, #16
 8000238:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023c:	4599      	cmp	r9, r3
 800023e:	d909      	bls.n	8000254 <__udivmoddi4+0x60>
 8000240:	18eb      	adds	r3, r5, r3
 8000242:	f107 31ff 	add.w	r1, r7, #4294967295
 8000246:	f080 811c 	bcs.w	8000482 <__udivmoddi4+0x28e>
 800024a:	4599      	cmp	r9, r3
 800024c:	f240 8119 	bls.w	8000482 <__udivmoddi4+0x28e>
 8000250:	3f02      	subs	r7, #2
 8000252:	442b      	add	r3, r5
 8000254:	eba3 0309 	sub.w	r3, r3, r9
 8000258:	fbb3 f0fe 	udiv	r0, r3, lr
 800025c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000260:	fb00 f108 	mul.w	r1, r0, r8
 8000264:	b2a4      	uxth	r4, r4
 8000266:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026a:	42a1      	cmp	r1, r4
 800026c:	d909      	bls.n	8000282 <__udivmoddi4+0x8e>
 800026e:	192c      	adds	r4, r5, r4
 8000270:	f100 33ff 	add.w	r3, r0, #4294967295
 8000274:	f080 8107 	bcs.w	8000486 <__udivmoddi4+0x292>
 8000278:	42a1      	cmp	r1, r4
 800027a:	f240 8104 	bls.w	8000486 <__udivmoddi4+0x292>
 800027e:	3802      	subs	r0, #2
 8000280:	442c      	add	r4, r5
 8000282:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000286:	2700      	movs	r7, #0
 8000288:	1a64      	subs	r4, r4, r1
 800028a:	b11e      	cbz	r6, 8000294 <__udivmoddi4+0xa0>
 800028c:	2300      	movs	r3, #0
 800028e:	40d4      	lsrs	r4, r2
 8000290:	e9c6 4300 	strd	r4, r3, [r6]
 8000294:	4639      	mov	r1, r7
 8000296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029a:	428b      	cmp	r3, r1
 800029c:	d909      	bls.n	80002b2 <__udivmoddi4+0xbe>
 800029e:	2e00      	cmp	r6, #0
 80002a0:	f000 80ec 	beq.w	800047c <__udivmoddi4+0x288>
 80002a4:	2700      	movs	r7, #0
 80002a6:	e9c6 0100 	strd	r0, r1, [r6]
 80002aa:	4638      	mov	r0, r7
 80002ac:	4639      	mov	r1, r7
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	fab3 f783 	clz	r7, r3
 80002b6:	2f00      	cmp	r7, #0
 80002b8:	d148      	bne.n	800034c <__udivmoddi4+0x158>
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xd0>
 80002be:	4282      	cmp	r2, r0
 80002c0:	f200 80fb 	bhi.w	80004ba <__udivmoddi4+0x2c6>
 80002c4:	1a84      	subs	r4, r0, r2
 80002c6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	469c      	mov	ip, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d0e0      	beq.n	8000294 <__udivmoddi4+0xa0>
 80002d2:	e9c6 4c00 	strd	r4, ip, [r6]
 80002d6:	e7dd      	b.n	8000294 <__udivmoddi4+0xa0>
 80002d8:	b902      	cbnz	r2, 80002dc <__udivmoddi4+0xe8>
 80002da:	deff      	udf	#255	; 0xff
 80002dc:	fab2 f282 	clz	r2, r2
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f040 808f 	bne.w	8000404 <__udivmoddi4+0x210>
 80002e6:	2701      	movs	r7, #1
 80002e8:	1b49      	subs	r1, r1, r5
 80002ea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80002ee:	fa1f f985 	uxth.w	r9, r5
 80002f2:	fbb1 fef8 	udiv	lr, r1, r8
 80002f6:	fb08 111e 	mls	r1, r8, lr, r1
 80002fa:	fb09 f00e 	mul.w	r0, r9, lr
 80002fe:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000302:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000306:	4298      	cmp	r0, r3
 8000308:	d907      	bls.n	800031a <__udivmoddi4+0x126>
 800030a:	18eb      	adds	r3, r5, r3
 800030c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x124>
 8000312:	4298      	cmp	r0, r3
 8000314:	f200 80cd 	bhi.w	80004b2 <__udivmoddi4+0x2be>
 8000318:	468e      	mov	lr, r1
 800031a:	1a1b      	subs	r3, r3, r0
 800031c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000320:	fb08 3310 	mls	r3, r8, r0, r3
 8000324:	fb09 f900 	mul.w	r9, r9, r0
 8000328:	b2a4      	uxth	r4, r4
 800032a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800032e:	45a1      	cmp	r9, r4
 8000330:	d907      	bls.n	8000342 <__udivmoddi4+0x14e>
 8000332:	192c      	adds	r4, r5, r4
 8000334:	f100 33ff 	add.w	r3, r0, #4294967295
 8000338:	d202      	bcs.n	8000340 <__udivmoddi4+0x14c>
 800033a:	45a1      	cmp	r9, r4
 800033c:	f200 80b6 	bhi.w	80004ac <__udivmoddi4+0x2b8>
 8000340:	4618      	mov	r0, r3
 8000342:	eba4 0409 	sub.w	r4, r4, r9
 8000346:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 800034a:	e79e      	b.n	800028a <__udivmoddi4+0x96>
 800034c:	f1c7 0520 	rsb	r5, r7, #32
 8000350:	40bb      	lsls	r3, r7
 8000352:	fa22 fc05 	lsr.w	ip, r2, r5
 8000356:	ea4c 0c03 	orr.w	ip, ip, r3
 800035a:	fa21 f405 	lsr.w	r4, r1, r5
 800035e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000362:	fbb4 f9fe 	udiv	r9, r4, lr
 8000366:	fa1f f88c 	uxth.w	r8, ip
 800036a:	fb0e 4419 	mls	r4, lr, r9, r4
 800036e:	fa20 f305 	lsr.w	r3, r0, r5
 8000372:	40b9      	lsls	r1, r7
 8000374:	fb09 fa08 	mul.w	sl, r9, r8
 8000378:	4319      	orrs	r1, r3
 800037a:	0c0b      	lsrs	r3, r1, #16
 800037c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000380:	45a2      	cmp	sl, r4
 8000382:	fa02 f207 	lsl.w	r2, r2, r7
 8000386:	fa00 f307 	lsl.w	r3, r0, r7
 800038a:	d90b      	bls.n	80003a4 <__udivmoddi4+0x1b0>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f109 30ff 	add.w	r0, r9, #4294967295
 8000394:	f080 8088 	bcs.w	80004a8 <__udivmoddi4+0x2b4>
 8000398:	45a2      	cmp	sl, r4
 800039a:	f240 8085 	bls.w	80004a8 <__udivmoddi4+0x2b4>
 800039e:	f1a9 0902 	sub.w	r9, r9, #2
 80003a2:	4464      	add	r4, ip
 80003a4:	eba4 040a 	sub.w	r4, r4, sl
 80003a8:	fbb4 f0fe 	udiv	r0, r4, lr
 80003ac:	fb0e 4410 	mls	r4, lr, r0, r4
 80003b0:	fb00 fa08 	mul.w	sl, r0, r8
 80003b4:	b289      	uxth	r1, r1
 80003b6:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 80003ba:	45a2      	cmp	sl, r4
 80003bc:	d908      	bls.n	80003d0 <__udivmoddi4+0x1dc>
 80003be:	eb1c 0404 	adds.w	r4, ip, r4
 80003c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c6:	d26b      	bcs.n	80004a0 <__udivmoddi4+0x2ac>
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d969      	bls.n	80004a0 <__udivmoddi4+0x2ac>
 80003cc:	3802      	subs	r0, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d4:	fba0 8902 	umull	r8, r9, r0, r2
 80003d8:	eba4 040a 	sub.w	r4, r4, sl
 80003dc:	454c      	cmp	r4, r9
 80003de:	4641      	mov	r1, r8
 80003e0:	46ce      	mov	lr, r9
 80003e2:	d354      	bcc.n	800048e <__udivmoddi4+0x29a>
 80003e4:	d051      	beq.n	800048a <__udivmoddi4+0x296>
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d069      	beq.n	80004be <__udivmoddi4+0x2ca>
 80003ea:	1a5a      	subs	r2, r3, r1
 80003ec:	eb64 040e 	sbc.w	r4, r4, lr
 80003f0:	fa04 f505 	lsl.w	r5, r4, r5
 80003f4:	fa22 f307 	lsr.w	r3, r2, r7
 80003f8:	40fc      	lsrs	r4, r7
 80003fa:	431d      	orrs	r5, r3
 80003fc:	e9c6 5400 	strd	r5, r4, [r6]
 8000400:	2700      	movs	r7, #0
 8000402:	e747      	b.n	8000294 <__udivmoddi4+0xa0>
 8000404:	4095      	lsls	r5, r2
 8000406:	f1c2 0320 	rsb	r3, r2, #32
 800040a:	fa21 f003 	lsr.w	r0, r1, r3
 800040e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000412:	fbb0 f7f8 	udiv	r7, r0, r8
 8000416:	fa1f f985 	uxth.w	r9, r5
 800041a:	fb08 0017 	mls	r0, r8, r7, r0
 800041e:	fa24 f303 	lsr.w	r3, r4, r3
 8000422:	4091      	lsls	r1, r2
 8000424:	fb07 fc09 	mul.w	ip, r7, r9
 8000428:	430b      	orrs	r3, r1
 800042a:	0c19      	lsrs	r1, r3, #16
 800042c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000430:	458c      	cmp	ip, r1
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d907      	bls.n	8000448 <__udivmoddi4+0x254>
 8000438:	1869      	adds	r1, r5, r1
 800043a:	f107 30ff 	add.w	r0, r7, #4294967295
 800043e:	d231      	bcs.n	80004a4 <__udivmoddi4+0x2b0>
 8000440:	458c      	cmp	ip, r1
 8000442:	d92f      	bls.n	80004a4 <__udivmoddi4+0x2b0>
 8000444:	3f02      	subs	r7, #2
 8000446:	4429      	add	r1, r5
 8000448:	eba1 010c 	sub.w	r1, r1, ip
 800044c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000450:	fb08 1c10 	mls	ip, r8, r0, r1
 8000454:	fb00 fe09 	mul.w	lr, r0, r9
 8000458:	b299      	uxth	r1, r3
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	458e      	cmp	lr, r1
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x27e>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f100 33ff 	add.w	r3, r0, #4294967295
 8000468:	d218      	bcs.n	800049c <__udivmoddi4+0x2a8>
 800046a:	458e      	cmp	lr, r1
 800046c:	d916      	bls.n	800049c <__udivmoddi4+0x2a8>
 800046e:	3802      	subs	r0, #2
 8000470:	4429      	add	r1, r5
 8000472:	eba1 010e 	sub.w	r1, r1, lr
 8000476:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047a:	e73a      	b.n	80002f2 <__udivmoddi4+0xfe>
 800047c:	4637      	mov	r7, r6
 800047e:	4630      	mov	r0, r6
 8000480:	e708      	b.n	8000294 <__udivmoddi4+0xa0>
 8000482:	460f      	mov	r7, r1
 8000484:	e6e6      	b.n	8000254 <__udivmoddi4+0x60>
 8000486:	4618      	mov	r0, r3
 8000488:	e6fb      	b.n	8000282 <__udivmoddi4+0x8e>
 800048a:	4543      	cmp	r3, r8
 800048c:	d2ab      	bcs.n	80003e6 <__udivmoddi4+0x1f2>
 800048e:	ebb8 0102 	subs.w	r1, r8, r2
 8000492:	eb69 020c 	sbc.w	r2, r9, ip
 8000496:	3801      	subs	r0, #1
 8000498:	4696      	mov	lr, r2
 800049a:	e7a4      	b.n	80003e6 <__udivmoddi4+0x1f2>
 800049c:	4618      	mov	r0, r3
 800049e:	e7e8      	b.n	8000472 <__udivmoddi4+0x27e>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e795      	b.n	80003d0 <__udivmoddi4+0x1dc>
 80004a4:	4607      	mov	r7, r0
 80004a6:	e7cf      	b.n	8000448 <__udivmoddi4+0x254>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e77b      	b.n	80003a4 <__udivmoddi4+0x1b0>
 80004ac:	3802      	subs	r0, #2
 80004ae:	442c      	add	r4, r5
 80004b0:	e747      	b.n	8000342 <__udivmoddi4+0x14e>
 80004b2:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b6:	442b      	add	r3, r5
 80004b8:	e72f      	b.n	800031a <__udivmoddi4+0x126>
 80004ba:	4638      	mov	r0, r7
 80004bc:	e707      	b.n	80002ce <__udivmoddi4+0xda>
 80004be:	4637      	mov	r7, r6
 80004c0:	e6e8      	b.n	8000294 <__udivmoddi4+0xa0>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b08c      	sub	sp, #48	; 0x30
 80004cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ce:	f107 031c 	add.w	r3, r7, #28
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
 80004da:	60da      	str	r2, [r3, #12]
 80004dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004de:	2300      	movs	r3, #0
 80004e0:	61bb      	str	r3, [r7, #24]
 80004e2:	4b4b      	ldr	r3, [pc, #300]	; (8000610 <MX_GPIO_Init+0x148>)
 80004e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e6:	4a4a      	ldr	r2, [pc, #296]	; (8000610 <MX_GPIO_Init+0x148>)
 80004e8:	f043 0304 	orr.w	r3, r3, #4
 80004ec:	6313      	str	r3, [r2, #48]	; 0x30
 80004ee:	4b48      	ldr	r3, [pc, #288]	; (8000610 <MX_GPIO_Init+0x148>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	f003 0304 	and.w	r3, r3, #4
 80004f6:	61bb      	str	r3, [r7, #24]
 80004f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004fa:	2300      	movs	r3, #0
 80004fc:	617b      	str	r3, [r7, #20]
 80004fe:	4b44      	ldr	r3, [pc, #272]	; (8000610 <MX_GPIO_Init+0x148>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	4a43      	ldr	r2, [pc, #268]	; (8000610 <MX_GPIO_Init+0x148>)
 8000504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000508:	6313      	str	r3, [r2, #48]	; 0x30
 800050a:	4b41      	ldr	r3, [pc, #260]	; (8000610 <MX_GPIO_Init+0x148>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000512:	617b      	str	r3, [r7, #20]
 8000514:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000516:	2300      	movs	r3, #0
 8000518:	613b      	str	r3, [r7, #16]
 800051a:	4b3d      	ldr	r3, [pc, #244]	; (8000610 <MX_GPIO_Init+0x148>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	4a3c      	ldr	r2, [pc, #240]	; (8000610 <MX_GPIO_Init+0x148>)
 8000520:	f043 0301 	orr.w	r3, r3, #1
 8000524:	6313      	str	r3, [r2, #48]	; 0x30
 8000526:	4b3a      	ldr	r3, [pc, #232]	; (8000610 <MX_GPIO_Init+0x148>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	f003 0301 	and.w	r3, r3, #1
 800052e:	613b      	str	r3, [r7, #16]
 8000530:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	4b36      	ldr	r3, [pc, #216]	; (8000610 <MX_GPIO_Init+0x148>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	4a35      	ldr	r2, [pc, #212]	; (8000610 <MX_GPIO_Init+0x148>)
 800053c:	f043 0302 	orr.w	r3, r3, #2
 8000540:	6313      	str	r3, [r2, #48]	; 0x30
 8000542:	4b33      	ldr	r3, [pc, #204]	; (8000610 <MX_GPIO_Init+0x148>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	f003 0302 	and.w	r3, r3, #2
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800054e:	2300      	movs	r3, #0
 8000550:	60bb      	str	r3, [r7, #8]
 8000552:	4b2f      	ldr	r3, [pc, #188]	; (8000610 <MX_GPIO_Init+0x148>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	4a2e      	ldr	r2, [pc, #184]	; (8000610 <MX_GPIO_Init+0x148>)
 8000558:	f043 0308 	orr.w	r3, r3, #8
 800055c:	6313      	str	r3, [r2, #48]	; 0x30
 800055e:	4b2c      	ldr	r3, [pc, #176]	; (8000610 <MX_GPIO_Init+0x148>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	f003 0308 	and.w	r3, r3, #8
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800056a:	2300      	movs	r3, #0
 800056c:	607b      	str	r3, [r7, #4]
 800056e:	4b28      	ldr	r3, [pc, #160]	; (8000610 <MX_GPIO_Init+0x148>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	4a27      	ldr	r2, [pc, #156]	; (8000610 <MX_GPIO_Init+0x148>)
 8000574:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000578:	6313      	str	r3, [r2, #48]	; 0x30
 800057a:	4b25      	ldr	r3, [pc, #148]	; (8000610 <MX_GPIO_Init+0x148>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000586:	2200      	movs	r2, #0
 8000588:	f244 0181 	movw	r1, #16513	; 0x4081
 800058c:	4821      	ldr	r0, [pc, #132]	; (8000614 <MX_GPIO_Init+0x14c>)
 800058e:	f001 ff7b 	bl	8002488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	2140      	movs	r1, #64	; 0x40
 8000596:	4820      	ldr	r0, [pc, #128]	; (8000618 <MX_GPIO_Init+0x150>)
 8000598:	f001 ff76 	bl	8002488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800059c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005a2:	4b1e      	ldr	r3, [pc, #120]	; (800061c <MX_GPIO_Init+0x154>)
 80005a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a6:	2300      	movs	r3, #0
 80005a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80005aa:	f107 031c 	add.w	r3, r7, #28
 80005ae:	4619      	mov	r1, r3
 80005b0:	481b      	ldr	r0, [pc, #108]	; (8000620 <MX_GPIO_Init+0x158>)
 80005b2:	f001 fdcb 	bl	800214c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80005b6:	f244 0381 	movw	r3, #16513	; 0x4081
 80005ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005bc:	2301      	movs	r3, #1
 80005be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c4:	2300      	movs	r3, #0
 80005c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c8:	f107 031c 	add.w	r3, r7, #28
 80005cc:	4619      	mov	r1, r3
 80005ce:	4811      	ldr	r0, [pc, #68]	; (8000614 <MX_GPIO_Init+0x14c>)
 80005d0:	f001 fdbc 	bl	800214c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80005d4:	2340      	movs	r3, #64	; 0x40
 80005d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d8:	2301      	movs	r3, #1
 80005da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005dc:	2300      	movs	r3, #0
 80005de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e0:	2300      	movs	r3, #0
 80005e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80005e4:	f107 031c 	add.w	r3, r7, #28
 80005e8:	4619      	mov	r1, r3
 80005ea:	480b      	ldr	r0, [pc, #44]	; (8000618 <MX_GPIO_Init+0x150>)
 80005ec:	f001 fdae 	bl	800214c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80005f0:	2380      	movs	r3, #128	; 0x80
 80005f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005f4:	2300      	movs	r3, #0
 80005f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	2300      	movs	r3, #0
 80005fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80005fc:	f107 031c 	add.w	r3, r7, #28
 8000600:	4619      	mov	r1, r3
 8000602:	4805      	ldr	r0, [pc, #20]	; (8000618 <MX_GPIO_Init+0x150>)
 8000604:	f001 fda2 	bl	800214c <HAL_GPIO_Init>

}
 8000608:	bf00      	nop
 800060a:	3730      	adds	r7, #48	; 0x30
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40023800 	.word	0x40023800
 8000614:	40020400 	.word	0x40020400
 8000618:	40021800 	.word	0x40021800
 800061c:	10110000 	.word	0x10110000
 8000620:	40020800 	.word	0x40020800

08000624 <ethernetif_notify_conn_changed>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ethernetif_notify_conn_changed(struct netif *netif)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
	/* NOTE : This is function could be implemented in user file
	 when the callback is needed,
	 */
	if (netif_is_link_up(netif))
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8000632:	089b      	lsrs	r3, r3, #2
 8000634:	f003 0301 	and.w	r3, r3, #1
 8000638:	b2db      	uxtb	r3, r3
 800063a:	2b00      	cmp	r3, #0
 800063c:	d010      	beq.n	8000660 <ethernetif_notify_conn_changed+0x3c>
	{
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, SET);
 800063e:	2201      	movs	r2, #1
 8000640:	2101      	movs	r1, #1
 8000642:	4811      	ldr	r0, [pc, #68]	; (8000688 <ethernetif_notify_conn_changed+0x64>)
 8000644:	f001 ff20 	bl	8002488 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, SET);
 8000648:	2201      	movs	r2, #1
 800064a:	2180      	movs	r1, #128	; 0x80
 800064c:	480e      	ldr	r0, [pc, #56]	; (8000688 <ethernetif_notify_conn_changed+0x64>)
 800064e:	f001 ff1b 	bl	8002488 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000658:	480b      	ldr	r0, [pc, #44]	; (8000688 <ethernetif_notify_conn_changed+0x64>)
 800065a:	f001 ff15 	bl	8002488 <HAL_GPIO_WritePin>
	{
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, RESET);
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET);
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, SET);
	}
}
 800065e:	e00f      	b.n	8000680 <ethernetif_notify_conn_changed+0x5c>
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	2101      	movs	r1, #1
 8000664:	4808      	ldr	r0, [pc, #32]	; (8000688 <ethernetif_notify_conn_changed+0x64>)
 8000666:	f001 ff0f 	bl	8002488 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	2180      	movs	r1, #128	; 0x80
 800066e:	4806      	ldr	r0, [pc, #24]	; (8000688 <ethernetif_notify_conn_changed+0x64>)
 8000670:	f001 ff0a 	bl	8002488 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, SET);
 8000674:	2201      	movs	r2, #1
 8000676:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800067a:	4803      	ldr	r0, [pc, #12]	; (8000688 <ethernetif_notify_conn_changed+0x64>)
 800067c:	f001 ff04 	bl	8002488 <HAL_GPIO_WritePin>
}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40020400 	.word	0x40020400

0800068c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000690:	f000 fa2e 	bl	8000af0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000694:	f000 f80e 	bl	80006b4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000698:	f7ff ff16 	bl	80004c8 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 800069c:	f000 f98c 	bl	80009b8 <MX_USART3_UART_Init>
	//MX_USB_OTG_FS_PCD_Init();
	MX_LWIP_Init();
 80006a0:	f002 fd68 	bl	8003174 <MX_LWIP_Init>
	/* USER CODE BEGIN 2 */
	ethernetif_notify_conn_changed(&gnetif);
 80006a4:	4802      	ldr	r0, [pc, #8]	; (80006b0 <main+0x24>)
 80006a6:	f7ff ffbd 	bl	8000624 <ethernetif_notify_conn_changed>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		MX_LWIP_Process();
 80006aa:	f002 fda9 	bl	8003200 <MX_LWIP_Process>
 80006ae:	e7fc      	b.n	80006aa <main+0x1e>
 80006b0:	20000268 	.word	0x20000268

080006b4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b092      	sub	sp, #72	; 0x48
 80006b8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 80006ba:	f107 0318 	add.w	r3, r7, #24
 80006be:	2230      	movs	r2, #48	; 0x30
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f00d ff24 	bl	800e510 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 80006c8:	1d3b      	adds	r3, r7, #4
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d6:	2302      	movs	r3, #2
 80006d8:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006da:	2301      	movs	r3, #1
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006de:	2310      	movs	r3, #16
 80006e0:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e2:	2302      	movs	r3, #2
 80006e4:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e6:	2300      	movs	r3, #0
 80006e8:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLM = 13;
 80006ea:	230d      	movs	r3, #13
 80006ec:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLN = 195;
 80006ee:	23c3      	movs	r3, #195	; 0xc3
 80006f0:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f2:	2302      	movs	r3, #2
 80006f4:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLQ = 5;
 80006f6:	2305      	movs	r3, #5
 80006f8:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fa:	f107 0318 	add.w	r3, r7, #24
 80006fe:	4618      	mov	r0, r3
 8000700:	f001 feda 	bl	80024b8 <HAL_RCC_OscConfig>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <SystemClock_Config+0x5a>
	{
		Error_Handler();
 800070a:	f000 f81a 	bl	8000742 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800070e:	230f      	movs	r3, #15
 8000710:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000712:	2302      	movs	r3, #2
 8000714:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800071a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800071e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000724:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000726:	1d3b      	adds	r3, r7, #4
 8000728:	2103      	movs	r1, #3
 800072a:	4618      	mov	r0, r3
 800072c:	f002 f92e 	bl	800298c <HAL_RCC_ClockConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0x86>
	{
		Error_Handler();
 8000736:	f000 f804 	bl	8000742 <Error_Handler>
	}
}
 800073a:	bf00      	nop
 800073c:	3748      	adds	r7, #72	; 0x48
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}

08000742 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000746:	bf00      	nop
 8000748:	46bd      	mov	sp, r7
 800074a:	bc80      	pop	{r7}
 800074c:	4770      	bx	lr
	...

08000750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <HAL_MspInit+0x48>)
 800075c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800075e:	4a0e      	ldr	r2, [pc, #56]	; (8000798 <HAL_MspInit+0x48>)
 8000760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000764:	6453      	str	r3, [r2, #68]	; 0x44
 8000766:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <HAL_MspInit+0x48>)
 8000768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800076a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	603b      	str	r3, [r7, #0]
 8000776:	4b08      	ldr	r3, [pc, #32]	; (8000798 <HAL_MspInit+0x48>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077a:	4a07      	ldr	r2, [pc, #28]	; (8000798 <HAL_MspInit+0x48>)
 800077c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000780:	6413      	str	r3, [r2, #64]	; 0x40
 8000782:	4b05      	ldr	r3, [pc, #20]	; (8000798 <HAL_MspInit+0x48>)
 8000784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800078e:	bf00      	nop
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	bc80      	pop	{r7}
 8000796:	4770      	bx	lr
 8000798:	40023800 	.word	0x40023800

0800079c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr

080007a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ac:	e7fe      	b.n	80007ac <HardFault_Handler+0x4>

080007ae <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b2:	e7fe      	b.n	80007b2 <MemManage_Handler+0x4>

080007b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <BusFault_Handler+0x4>

080007ba <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007ba:	b480      	push	{r7}
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007be:	e7fe      	b.n	80007be <UsageFault_Handler+0x4>

080007c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr

080007cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr

080007d8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr

080007e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007e8:	f000 f9d4 	bl	8000b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80007f4:	4802      	ldr	r0, [pc, #8]	; (8000800 <ETH_IRQHandler+0x10>)
 80007f6:	f000 fee8 	bl	80015ca <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	20001b7c 	.word	0x20001b7c

08000804 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000808:	4802      	ldr	r0, [pc, #8]	; (8000814 <ETH_WKUP_IRQHandler+0x10>)
 800080a:	f000 fede 	bl	80015ca <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20001b7c 	.word	0x20001b7c

08000818 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af00      	add	r7, sp, #0
 800081e:	60f8      	str	r0, [r7, #12]
 8000820:	60b9      	str	r1, [r7, #8]
 8000822:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000824:	2300      	movs	r3, #0
 8000826:	617b      	str	r3, [r7, #20]
 8000828:	e00a      	b.n	8000840 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800082a:	f3af 8000 	nop.w
 800082e:	4601      	mov	r1, r0
 8000830:	68bb      	ldr	r3, [r7, #8]
 8000832:	1c5a      	adds	r2, r3, #1
 8000834:	60ba      	str	r2, [r7, #8]
 8000836:	b2ca      	uxtb	r2, r1
 8000838:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	3301      	adds	r3, #1
 800083e:	617b      	str	r3, [r7, #20]
 8000840:	697a      	ldr	r2, [r7, #20]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	429a      	cmp	r2, r3
 8000846:	dbf0      	blt.n	800082a <_read+0x12>
	}

return len;
 8000848:	687b      	ldr	r3, [r7, #4]
}
 800084a:	4618      	mov	r0, r3
 800084c:	3718      	adds	r7, #24
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	b086      	sub	sp, #24
 8000856:	af00      	add	r7, sp, #0
 8000858:	60f8      	str	r0, [r7, #12]
 800085a:	60b9      	str	r1, [r7, #8]
 800085c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]
 8000862:	e009      	b.n	8000878 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	1c5a      	adds	r2, r3, #1
 8000868:	60ba      	str	r2, [r7, #8]
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	4618      	mov	r0, r3
 800086e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	3301      	adds	r3, #1
 8000876:	617b      	str	r3, [r7, #20]
 8000878:	697a      	ldr	r2, [r7, #20]
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	429a      	cmp	r2, r3
 800087e:	dbf1      	blt.n	8000864 <_write+0x12>
	}
	return len;
 8000880:	687b      	ldr	r3, [r7, #4]
}
 8000882:	4618      	mov	r0, r3
 8000884:	3718      	adds	r7, #24
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}

0800088a <_close>:

int _close(int file)
{
 800088a:	b480      	push	{r7}
 800088c:	b083      	sub	sp, #12
 800088e:	af00      	add	r7, sp, #0
 8000890:	6078      	str	r0, [r7, #4]
	return -1;
 8000892:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000896:	4618      	mov	r0, r3
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr

080008a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
 80008a8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008b0:	605a      	str	r2, [r3, #4]
	return 0;
 80008b2:	2300      	movs	r3, #0
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr

080008be <_isatty>:

int _isatty(int file)
{
 80008be:	b480      	push	{r7}
 80008c0:	b083      	sub	sp, #12
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
	return 1;
 80008c6:	2301      	movs	r3, #1
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	370c      	adds	r7, #12
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc80      	pop	{r7}
 80008d0:	4770      	bx	lr

080008d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008d2:	b480      	push	{r7}
 80008d4:	b085      	sub	sp, #20
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	60f8      	str	r0, [r7, #12]
 80008da:	60b9      	str	r1, [r7, #8]
 80008dc:	607a      	str	r2, [r7, #4]
	return 0;
 80008de:	2300      	movs	r3, #0
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3714      	adds	r7, #20
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr
	...

080008ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b087      	sub	sp, #28
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008f4:	4a14      	ldr	r2, [pc, #80]	; (8000948 <_sbrk+0x5c>)
 80008f6:	4b15      	ldr	r3, [pc, #84]	; (800094c <_sbrk+0x60>)
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000900:	4b13      	ldr	r3, [pc, #76]	; (8000950 <_sbrk+0x64>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d102      	bne.n	800090e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000908:	4b11      	ldr	r3, [pc, #68]	; (8000950 <_sbrk+0x64>)
 800090a:	4a12      	ldr	r2, [pc, #72]	; (8000954 <_sbrk+0x68>)
 800090c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800090e:	4b10      	ldr	r3, [pc, #64]	; (8000950 <_sbrk+0x64>)
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4413      	add	r3, r2
 8000916:	693a      	ldr	r2, [r7, #16]
 8000918:	429a      	cmp	r2, r3
 800091a:	d205      	bcs.n	8000928 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800091c:	4b0e      	ldr	r3, [pc, #56]	; (8000958 <_sbrk+0x6c>)
 800091e:	220c      	movs	r2, #12
 8000920:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000922:	f04f 33ff 	mov.w	r3, #4294967295
 8000926:	e009      	b.n	800093c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000928:	4b09      	ldr	r3, [pc, #36]	; (8000950 <_sbrk+0x64>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <_sbrk+0x64>)
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	4413      	add	r3, r2
 8000936:	4a06      	ldr	r2, [pc, #24]	; (8000950 <_sbrk+0x64>)
 8000938:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800093a:	68fb      	ldr	r3, [r7, #12]
}
 800093c:	4618      	mov	r0, r3
 800093e:	371c      	adds	r7, #28
 8000940:	46bd      	mov	sp, r7
 8000942:	bc80      	pop	{r7}
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	20020000 	.word	0x20020000
 800094c:	00000400 	.word	0x00000400
 8000950:	20000098 	.word	0x20000098
 8000954:	20006930 	.word	0x20006930
 8000958:	20006928 	.word	0x20006928

0800095c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <SystemInit+0x50>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a11      	ldr	r2, [pc, #68]	; (80009ac <SystemInit+0x50>)
 8000966:	f043 0301 	orr.w	r3, r3, #1
 800096a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800096c:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <SystemInit+0x50>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <SystemInit+0x50>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a0d      	ldr	r2, [pc, #52]	; (80009ac <SystemInit+0x50>)
 8000978:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800097c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000980:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000982:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <SystemInit+0x50>)
 8000984:	4a0a      	ldr	r2, [pc, #40]	; (80009b0 <SystemInit+0x54>)
 8000986:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000988:	4b08      	ldr	r3, [pc, #32]	; (80009ac <SystemInit+0x50>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a07      	ldr	r2, [pc, #28]	; (80009ac <SystemInit+0x50>)
 800098e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000992:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000994:	4b05      	ldr	r3, [pc, #20]	; (80009ac <SystemInit+0x50>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <SystemInit+0x58>)
 800099c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009a0:	609a      	str	r2, [r3, #8]
#endif
}
 80009a2:	bf00      	nop
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bc80      	pop	{r7}
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	40023800 	.word	0x40023800
 80009b0:	24003010 	.word	0x24003010
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80009bc:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <MX_USART3_UART_Init+0x4c>)
 80009be:	4a12      	ldr	r2, [pc, #72]	; (8000a08 <MX_USART3_UART_Init+0x50>)
 80009c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <MX_USART3_UART_Init+0x4c>)
 80009c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <MX_USART3_UART_Init+0x4c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009d0:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <MX_USART3_UART_Init+0x4c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009d6:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <MX_USART3_UART_Init+0x4c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009dc:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <MX_USART3_UART_Init+0x4c>)
 80009de:	220c      	movs	r2, #12
 80009e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e2:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <MX_USART3_UART_Init+0x4c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <MX_USART3_UART_Init+0x4c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009ee:	4805      	ldr	r0, [pc, #20]	; (8000a04 <MX_USART3_UART_Init+0x4c>)
 80009f0:	f002 f9de 	bl	8002db0 <HAL_UART_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80009fa:	f7ff fea2 	bl	8000742 <Error_Handler>
  }

}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000224 	.word	0x20000224
 8000a08:	40004800 	.word	0x40004800

08000a0c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	; 0x28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a19      	ldr	r2, [pc, #100]	; (8000a90 <HAL_UART_MspInit+0x84>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d12c      	bne.n	8000a88 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <HAL_UART_MspInit+0x88>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a36:	4a17      	ldr	r2, [pc, #92]	; (8000a94 <HAL_UART_MspInit+0x88>)
 8000a38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3e:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <HAL_UART_MspInit+0x88>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <HAL_UART_MspInit+0x88>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a10      	ldr	r2, [pc, #64]	; (8000a94 <HAL_UART_MspInit+0x88>)
 8000a54:	f043 0308 	orr.w	r3, r3, #8
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <HAL_UART_MspInit+0x88>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0308 	and.w	r3, r3, #8
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a66:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a74:	2303      	movs	r3, #3
 8000a76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a78:	2307      	movs	r3, #7
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	4619      	mov	r1, r3
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <HAL_UART_MspInit+0x8c>)
 8000a84:	f001 fb62 	bl	800214c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000a88:	bf00      	nop
 8000a8a:	3728      	adds	r7, #40	; 0x28
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40004800 	.word	0x40004800
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40020c00 	.word	0x40020c00

08000a9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ad4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000aa0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000aa2:	e003      	b.n	8000aac <LoopCopyDataInit>

08000aa4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000aa6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000aa8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000aaa:	3104      	adds	r1, #4

08000aac <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000aac:	480b      	ldr	r0, [pc, #44]	; (8000adc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000aae:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ab0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ab2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ab4:	d3f6      	bcc.n	8000aa4 <CopyDataInit>
  ldr  r2, =_sbss
 8000ab6:	4a0b      	ldr	r2, [pc, #44]	; (8000ae4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ab8:	e002      	b.n	8000ac0 <LoopFillZerobss>

08000aba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000aba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000abc:	f842 3b04 	str.w	r3, [r2], #4

08000ac0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 8000ac0:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ac2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ac4:	d3f9      	bcc.n	8000aba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ac6:	f7ff ff49 	bl	800095c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aca:	f00d fce3 	bl	800e494 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ace:	f7ff fddd 	bl	800068c <main>
  bx  lr
 8000ad2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ad4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000ad8:	080116fc 	.word	0x080116fc
  ldr  r0, =_sdata
 8000adc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ae0:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8000ae4:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8000ae8:	2000692c 	.word	0x2000692c

08000aec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000aec:	e7fe      	b.n	8000aec <ADC_IRQHandler>
	...

08000af0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000af4:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <HAL_Init+0x40>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a0d      	ldr	r2, [pc, #52]	; (8000b30 <HAL_Init+0x40>)
 8000afa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000afe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b00:	4b0b      	ldr	r3, [pc, #44]	; (8000b30 <HAL_Init+0x40>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a0a      	ldr	r2, [pc, #40]	; (8000b30 <HAL_Init+0x40>)
 8000b06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b0c:	4b08      	ldr	r3, [pc, #32]	; (8000b30 <HAL_Init+0x40>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a07      	ldr	r2, [pc, #28]	; (8000b30 <HAL_Init+0x40>)
 8000b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b18:	2003      	movs	r0, #3
 8000b1a:	f000 f945 	bl	8000da8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b1e:	2000      	movs	r0, #0
 8000b20:	f000 f808 	bl	8000b34 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000b24:	f7ff fe14 	bl	8000750 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	40023c00 	.word	0x40023c00

08000b34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <HAL_InitTick+0x54>)
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <HAL_InitTick+0x58>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	4619      	mov	r1, r3
 8000b46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b52:	4618      	mov	r0, r3
 8000b54:	f000 f95d 	bl	8000e12 <HAL_SYSTICK_Config>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e00e      	b.n	8000b80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2b0f      	cmp	r3, #15
 8000b66:	d80a      	bhi.n	8000b7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	6879      	ldr	r1, [r7, #4]
 8000b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b70:	f000 f925 	bl	8000dbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b74:	4a06      	ldr	r2, [pc, #24]	; (8000b90 <HAL_InitTick+0x5c>)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	e000      	b.n	8000b80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000000 	.word	0x20000000
 8000b8c:	20000008 	.word	0x20000008
 8000b90:	20000004 	.word	0x20000004

08000b94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b98:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <HAL_IncTick+0x1c>)
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <HAL_IncTick+0x20>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	4a03      	ldr	r2, [pc, #12]	; (8000bb4 <HAL_IncTick+0x20>)
 8000ba6:	6013      	str	r3, [r2, #0]
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bc80      	pop	{r7}
 8000bae:	4770      	bx	lr
 8000bb0:	20000008 	.word	0x20000008
 8000bb4:	20000264 	.word	0x20000264

08000bb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  return uwTick;
 8000bbc:	4b02      	ldr	r3, [pc, #8]	; (8000bc8 <HAL_GetTick+0x10>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bc80      	pop	{r7}
 8000bc6:	4770      	bx	lr
 8000bc8:	20000264 	.word	0x20000264

08000bcc <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bd4:	f7ff fff0 	bl	8000bb8 <HAL_GetTick>
 8000bd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000be4:	d005      	beq.n	8000bf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000be6:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <HAL_Delay+0x40>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	461a      	mov	r2, r3
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	4413      	add	r3, r2
 8000bf0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bf2:	bf00      	nop
 8000bf4:	f7ff ffe0 	bl	8000bb8 <HAL_GetTick>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	68fa      	ldr	r2, [r7, #12]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d8f7      	bhi.n	8000bf4 <HAL_Delay+0x28>
  {
  }
}
 8000c04:	bf00      	nop
 8000c06:	3710      	adds	r7, #16
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20000008 	.word	0x20000008

08000c10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <__NVIC_SetPriorityGrouping+0x44>)
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c26:	68ba      	ldr	r2, [r7, #8]
 8000c28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c42:	4a04      	ldr	r2, [pc, #16]	; (8000c54 <__NVIC_SetPriorityGrouping+0x44>)
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	60d3      	str	r3, [r2, #12]
}
 8000c48:	bf00      	nop
 8000c4a:	3714      	adds	r7, #20
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bc80      	pop	{r7}
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c5c:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <__NVIC_GetPriorityGrouping+0x18>)
 8000c5e:	68db      	ldr	r3, [r3, #12]
 8000c60:	0a1b      	lsrs	r3, r3, #8
 8000c62:	f003 0307 	and.w	r3, r3, #7
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	db0b      	blt.n	8000c9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	f003 021f 	and.w	r2, r3, #31
 8000c8c:	4906      	ldr	r1, [pc, #24]	; (8000ca8 <__NVIC_EnableIRQ+0x34>)
 8000c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c92:	095b      	lsrs	r3, r3, #5
 8000c94:	2001      	movs	r0, #1
 8000c96:	fa00 f202 	lsl.w	r2, r0, r2
 8000c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr
 8000ca8:	e000e100 	.word	0xe000e100

08000cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	6039      	str	r1, [r7, #0]
 8000cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	db0a      	blt.n	8000cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	490c      	ldr	r1, [pc, #48]	; (8000cf8 <__NVIC_SetPriority+0x4c>)
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	0112      	lsls	r2, r2, #4
 8000ccc:	b2d2      	uxtb	r2, r2
 8000cce:	440b      	add	r3, r1
 8000cd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cd4:	e00a      	b.n	8000cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	4908      	ldr	r1, [pc, #32]	; (8000cfc <__NVIC_SetPriority+0x50>)
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
 8000cde:	f003 030f 	and.w	r3, r3, #15
 8000ce2:	3b04      	subs	r3, #4
 8000ce4:	0112      	lsls	r2, r2, #4
 8000ce6:	b2d2      	uxtb	r2, r2
 8000ce8:	440b      	add	r3, r1
 8000cea:	761a      	strb	r2, [r3, #24]
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bc80      	pop	{r7}
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000e100 	.word	0xe000e100
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b089      	sub	sp, #36	; 0x24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	f1c3 0307 	rsb	r3, r3, #7
 8000d1a:	2b04      	cmp	r3, #4
 8000d1c:	bf28      	it	cs
 8000d1e:	2304      	movcs	r3, #4
 8000d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	3304      	adds	r3, #4
 8000d26:	2b06      	cmp	r3, #6
 8000d28:	d902      	bls.n	8000d30 <NVIC_EncodePriority+0x30>
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3b03      	subs	r3, #3
 8000d2e:	e000      	b.n	8000d32 <NVIC_EncodePriority+0x32>
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d34:	f04f 32ff 	mov.w	r2, #4294967295
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43da      	mvns	r2, r3
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	401a      	ands	r2, r3
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d48:	f04f 31ff 	mov.w	r1, #4294967295
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d52:	43d9      	mvns	r1, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	4313      	orrs	r3, r2
         );
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3724      	adds	r7, #36	; 0x24
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr

08000d64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d74:	d301      	bcc.n	8000d7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d76:	2301      	movs	r3, #1
 8000d78:	e00f      	b.n	8000d9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d7a:	4a0a      	ldr	r2, [pc, #40]	; (8000da4 <SysTick_Config+0x40>)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d82:	210f      	movs	r1, #15
 8000d84:	f04f 30ff 	mov.w	r0, #4294967295
 8000d88:	f7ff ff90 	bl	8000cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d8c:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <SysTick_Config+0x40>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d92:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <SysTick_Config+0x40>)
 8000d94:	2207      	movs	r2, #7
 8000d96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	e000e010 	.word	0xe000e010

08000da8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f7ff ff2d 	bl	8000c10 <__NVIC_SetPriorityGrouping>
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b086      	sub	sp, #24
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	60b9      	str	r1, [r7, #8]
 8000dc8:	607a      	str	r2, [r7, #4]
 8000dca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dd0:	f7ff ff42 	bl	8000c58 <__NVIC_GetPriorityGrouping>
 8000dd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	68b9      	ldr	r1, [r7, #8]
 8000dda:	6978      	ldr	r0, [r7, #20]
 8000ddc:	f7ff ff90 	bl	8000d00 <NVIC_EncodePriority>
 8000de0:	4602      	mov	r2, r0
 8000de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de6:	4611      	mov	r1, r2
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff ff5f 	bl	8000cac <__NVIC_SetPriority>
}
 8000dee:	bf00      	nop
 8000df0:	3718      	adds	r7, #24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b082      	sub	sp, #8
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff ff35 	bl	8000c74 <__NVIC_EnableIRQ>
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff ffa2 	bl	8000d64 <SysTick_Config>
 8000e20:	4603      	mov	r3, r0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b088      	sub	sp, #32
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000e34:	2300      	movs	r3, #0
 8000e36:	61fb      	str	r3, [r7, #28]
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8000e3c:	4ba3      	ldr	r3, [pc, #652]	; (80010cc <HAL_ETH_Init+0x2a0>)
 8000e3e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000e44:	2300      	movs	r3, #0
 8000e46:	613b      	str	r3, [r7, #16]

  /* Check the ETH peripheral state */
  if (heth == NULL)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d101      	bne.n	8000e52 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e175      	b.n	800113e <HAL_ETH_Init+0x312>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));

  if (heth->State == HAL_ETH_STATE_RESET)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d106      	bne.n	8000e6c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2200      	movs	r2, #0
 8000e62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f002 f9ee 	bl	8003248 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60bb      	str	r3, [r7, #8]
 8000e70:	4b97      	ldr	r3, [pc, #604]	; (80010d0 <HAL_ETH_Init+0x2a4>)
 8000e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e74:	4a96      	ldr	r2, [pc, #600]	; (80010d0 <HAL_ETH_Init+0x2a4>)
 8000e76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e7a:	6453      	str	r3, [r2, #68]	; 0x44
 8000e7c:	4b94      	ldr	r3, [pc, #592]	; (80010d0 <HAL_ETH_Init+0x2a4>)
 8000e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000e88:	4b92      	ldr	r3, [pc, #584]	; (80010d4 <HAL_ETH_Init+0x2a8>)
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	4a91      	ldr	r2, [pc, #580]	; (80010d4 <HAL_ETH_Init+0x2a8>)
 8000e8e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000e92:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000e94:	4b8f      	ldr	r3, [pc, #572]	; (80010d4 <HAL_ETH_Init+0x2a8>)
 8000e96:	685a      	ldr	r2, [r3, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6a1b      	ldr	r3, [r3, #32]
 8000e9c:	498d      	ldr	r1, [pc, #564]	; (80010d4 <HAL_ETH_Init+0x2a8>)
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	604b      	str	r3, [r1, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f042 0201 	orr.w	r2, r2, #1
 8000eb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000eb8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000eba:	f7ff fe7d 	bl	8000bb8 <HAL_GetTick>
 8000ebe:	6178      	str	r0, [r7, #20]

  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000ec0:	e011      	b.n	8000ee6 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_SWRESET)
 8000ec2:	f7ff fe79 	bl	8000bb8 <HAL_GetTick>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ed0:	d909      	bls.n	8000ee6 <HAL_ETH_Init+0xba>
    {
      heth->State = HAL_ETH_STATE_TIMEOUT;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2203      	movs	r2, #3
 8000ed6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2200      	movs	r2, #0
 8000ede:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	e12b      	b.n	800113e <HAL_ETH_Init+0x312>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f003 0301 	and.w	r3, r3, #1
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d1e4      	bne.n	8000ec2 <HAL_ETH_Init+0x96>
    }
  }

  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	691b      	ldr	r3, [r3, #16]
 8000efe:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	f023 031c 	bic.w	r3, r3, #28
 8000f06:	61fb      	str	r3, [r7, #28]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000f08:	f001 ff04 	bl	8002d14 <HAL_RCC_GetHCLKFreq>
 8000f0c:	61b8      	str	r0, [r7, #24]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8000f0e:	69bb      	ldr	r3, [r7, #24]
 8000f10:	4a71      	ldr	r2, [pc, #452]	; (80010d8 <HAL_ETH_Init+0x2ac>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d908      	bls.n	8000f28 <HAL_ETH_Init+0xfc>
 8000f16:	69bb      	ldr	r3, [r7, #24]
 8000f18:	4a70      	ldr	r2, [pc, #448]	; (80010dc <HAL_ETH_Init+0x2b0>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d804      	bhi.n	8000f28 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	f043 0308 	orr.w	r3, r3, #8
 8000f24:	61fb      	str	r3, [r7, #28]
 8000f26:	e01a      	b.n	8000f5e <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	4a6c      	ldr	r2, [pc, #432]	; (80010dc <HAL_ETH_Init+0x2b0>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d908      	bls.n	8000f42 <HAL_ETH_Init+0x116>
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	4a6b      	ldr	r2, [pc, #428]	; (80010e0 <HAL_ETH_Init+0x2b4>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d804      	bhi.n	8000f42 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	f043 030c 	orr.w	r3, r3, #12
 8000f3e:	61fb      	str	r3, [r7, #28]
 8000f40:	e00d      	b.n	8000f5e <HAL_ETH_Init+0x132>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	4a66      	ldr	r2, [pc, #408]	; (80010e0 <HAL_ETH_Init+0x2b4>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d903      	bls.n	8000f52 <HAL_ETH_Init+0x126>
 8000f4a:	69bb      	ldr	r3, [r7, #24]
 8000f4c:	4a65      	ldr	r2, [pc, #404]	; (80010e4 <HAL_ETH_Init+0x2b8>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d904      	bls.n	8000f5c <HAL_ETH_Init+0x130>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else /* ((hclk >= 100000000)&&(hclk < 120000000)) */
  {
    /* CSR Clock Range between 100-120 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	f043 0304 	orr.w	r3, r3, #4
 8000f58:	61fb      	str	r3, [r7, #28]
 8000f5a:	e000      	b.n	8000f5e <HAL_ETH_Init+0x132>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8000f5c:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	69fa      	ldr	r2, [r7, #28]
 8000f64:	611a      	str	r2, [r3, #16]

  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000f66:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	6878      	ldr	r0, [r7, #4]
 8000f6e:	f000 fc16 	bl	800179e <HAL_ETH_WritePHYRegister>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d00b      	beq.n	8000f90 <HAL_ETH_Init+0x164>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	613b      	str	r3, [r7, #16]

    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8000f7c:	6939      	ldr	r1, [r7, #16]
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f000 fdcc 	bl	8001b1c <ETH_MACDMAConfig>

    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2201      	movs	r2, #1
 8000f88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Return HAL_ERROR */
    return HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e0d6      	b.n	800113e <HAL_ETH_Init+0x312>
  }

  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8000f90:	20ff      	movs	r0, #255	; 0xff
 8000f92:	f7ff fe1b 	bl	8000bcc <HAL_Delay>

  if ((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	f000 80a4 	beq.w	80010e8 <HAL_ETH_Init+0x2bc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000fa0:	f7ff fe0a 	bl	8000bb8 <HAL_GetTick>
 8000fa4:	6178      	str	r0, [r7, #20]

    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000fa6:	f107 030c 	add.w	r3, r7, #12
 8000faa:	461a      	mov	r2, r3
 8000fac:	2101      	movs	r1, #1
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f000 fb8d 	bl	80016ce <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_LINKED_STATE)
 8000fb4:	f7ff fe00 	bl	8000bb8 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d90f      	bls.n	8000fe6 <HAL_ETH_Init+0x1ba>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000fca:	6939      	ldr	r1, [r7, #16]
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f000 fda5 	bl	8001b1c <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e0ab      	b.n	800113e <HAL_ETH_Init+0x312>
      }
    }
    while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	f003 0304 	and.w	r3, r3, #4
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d0da      	beq.n	8000fa6 <HAL_ETH_Init+0x17a>


    /* Enable Auto-Negotiation */
    if ((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000ff0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f000 fbd1 	bl	800179e <HAL_ETH_WritePHYRegister>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d00b      	beq.n	800101a <HAL_ETH_Init+0x1ee>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001006:	6939      	ldr	r1, [r7, #16]
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f000 fd87 	bl	8001b1c <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2201      	movs	r2, #1
 8001012:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e091      	b.n	800113e <HAL_ETH_Init+0x312>
    }

    /* Get tick */
    tickstart = HAL_GetTick();
 800101a:	f7ff fdcd 	bl	8000bb8 <HAL_GetTick>
 800101e:	6178      	str	r0, [r7, #20]

    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001020:	f107 030c 	add.w	r3, r7, #12
 8001024:	461a      	mov	r2, r3
 8001026:	2101      	movs	r1, #1
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f000 fb50 	bl	80016ce <HAL_ETH_ReadPHYRegister>

      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800102e:	f7ff fdc3 	bl	8000bb8 <HAL_GetTick>
 8001032:	4602      	mov	r2, r0
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	f241 3288 	movw	r2, #5000	; 0x1388
 800103c:	4293      	cmp	r3, r2
 800103e:	d90f      	bls.n	8001060 <HAL_ETH_Init+0x234>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	613b      	str	r3, [r7, #16]

        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001044:	6939      	ldr	r1, [r7, #16]
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f000 fd68 	bl	8001b1c <ETH_MACDMAConfig>

        heth->State = HAL_ETH_STATE_READY;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2201      	movs	r2, #1
 8001050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2200      	movs	r2, #0
 8001058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        return HAL_TIMEOUT;
 800105c:	2303      	movs	r3, #3
 800105e:	e06e      	b.n	800113e <HAL_ETH_Init+0x312>
      }

    }
    while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	f003 0320 	and.w	r3, r3, #32
 8001066:	2b00      	cmp	r3, #0
 8001068:	d0da      	beq.n	8001020 <HAL_ETH_Init+0x1f4>

    /* Read the result of the auto-negotiation */
    if ((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800106a:	f107 030c 	add.w	r3, r7, #12
 800106e:	461a      	mov	r2, r3
 8001070:	211f      	movs	r1, #31
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f000 fb2b 	bl	80016ce <HAL_ETH_ReadPHYRegister>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d00b      	beq.n	8001096 <HAL_ETH_Init+0x26a>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001082:	6939      	ldr	r1, [r7, #16]
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f000 fd49 	bl	8001b1c <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2201      	movs	r2, #1
 800108e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e053      	b.n	800113e <HAL_ETH_Init+0x312>
    }

    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if ((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	f003 0310 	and.w	r3, r3, #16
 800109c:	2b00      	cmp	r3, #0
 800109e:	d004      	beq.n	80010aa <HAL_ETH_Init+0x27e>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010a6:	60da      	str	r2, [r3, #12]
 80010a8:	e002      	b.n	80010b0 <HAL_ETH_Init+0x284>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if ((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f003 0304 	and.w	r3, r3, #4
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	e034      	b.n	800112c <HAL_ETH_Init+0x300>
    }
    else
    {
      /* Set Ethernet speed to 100M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_100M;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010c8:	609a      	str	r2, [r3, #8]
 80010ca:	e02f      	b.n	800112c <HAL_ETH_Init+0x300>
 80010cc:	03938700 	.word	0x03938700
 80010d0:	40023800 	.word	0x40023800
 80010d4:	40013800 	.word	0x40013800
 80010d8:	01312cff 	.word	0x01312cff
 80010dc:	02160ebf 	.word	0x02160ebf
 80010e0:	039386ff 	.word	0x039386ff
 80010e4:	05f5e0ff 	.word	0x05f5e0ff
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

    /* Set MAC Speed and Duplex Mode */
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	08db      	lsrs	r3, r3, #3
 80010ee:	b29a      	uxth	r2, r3
                                                 (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	085b      	lsrs	r3, r3, #1
 80010f6:	b29b      	uxth	r3, r3
    if (HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80010f8:	4313      	orrs	r3, r2
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	461a      	mov	r2, r3
 80010fe:	2100      	movs	r1, #0
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f000 fb4c 	bl	800179e <HAL_ETH_WritePHYRegister>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d00b      	beq.n	8001124 <HAL_ETH_Init+0x2f8>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	613b      	str	r3, [r7, #16]

      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001110:	6939      	ldr	r1, [r7, #16]
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f000 fd02 	bl	8001b1c <ETH_MACDMAConfig>

      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2201      	movs	r2, #1
 800111c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	e00c      	b.n	800113e <HAL_ETH_Init+0x312>
    }

    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001124:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001128:	f7ff fd50 	bl	8000bcc <HAL_Delay>
  }

  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 800112c:	6939      	ldr	r1, [r7, #16]
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f000 fcf4 	bl	8001b1c <ETH_MACDMAConfig>

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2201      	movs	r2, #1
 8001138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3720      	adds	r7, #32
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop

08001148 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001148:	b480      	push	{r7}
 800114a:	b087      	sub	sp, #28
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
 8001154:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001160:	2b01      	cmp	r3, #1
 8001162:	d101      	bne.n	8001168 <HAL_ETH_DMATxDescListInit+0x20>
 8001164:	2302      	movs	r3, #2
 8001166:	e052      	b.n	800120e <HAL_ETH_DMATxDescListInit+0xc6>
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2201      	movs	r2, #1
 800116c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	2202      	movs	r2, #2
 8001174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	68ba      	ldr	r2, [r7, #8]
 800117c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0U; i < TxBuffCount; i++)
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]
 8001182:	e030      	b.n	80011e6 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	015b      	lsls	r3, r3, #5
 8001188:	68ba      	ldr	r2, [r7, #8]
 800118a:	4413      	add	r3, r2
 800118c:	613b      	str	r3, [r7, #16]

    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001194:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i * ETH_TX_BUF_SIZE]);
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800119c:	fb02 f303 	mul.w	r3, r2, r3
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	4413      	add	r3, r2
 80011a4:	461a      	mov	r2, r3
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	609a      	str	r2, [r3, #8]

    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	69db      	ldr	r3, [r3, #28]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d105      	bne.n	80011be <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	601a      	str	r2, [r3, #0]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (TxBuffCount - 1))
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	3b01      	subs	r3, #1
 80011c2:	697a      	ldr	r2, [r7, #20]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d208      	bcs.n	80011da <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab + i + 1);
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	3301      	adds	r3, #1
 80011cc:	015b      	lsls	r3, r3, #5
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	4413      	add	r3, r2
 80011d2:	461a      	mov	r2, r3
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	60da      	str	r2, [r3, #12]
 80011d8:	e002      	b.n	80011e0 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;
 80011da:	68ba      	ldr	r2, [r7, #8]
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < TxBuffCount; i++)
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	3301      	adds	r3, #1
 80011e4:	617b      	str	r3, [r7, #20]
 80011e6:	697a      	ldr	r2, [r7, #20]
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d3ca      	bcc.n	8001184 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }

  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	68ba      	ldr	r2, [r7, #8]
 80011f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011f8:	3310      	adds	r3, #16
 80011fa:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2201      	movs	r2, #1
 8001200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2200      	movs	r2, #0
 8001208:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	371c      	adds	r7, #28
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr

08001218 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001218:	b480      	push	{r7}
 800121a:	b087      	sub	sp, #28
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
 8001224:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;

  /* Process Locked */
  __HAL_LOCK(heth);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001230:	2b01      	cmp	r3, #1
 8001232:	d101      	bne.n	8001238 <HAL_ETH_DMARxDescListInit+0x20>
 8001234:	2302      	movs	r3, #2
 8001236:	e056      	b.n	80012e6 <HAL_ETH_DMARxDescListInit+0xce>
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2201      	movs	r2, #1
 800123c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	2202      	movs	r2, #2
 8001244:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	68ba      	ldr	r2, [r7, #8]
 800124c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Fill each DMARxDesc descriptor with the right values */
  for (i = 0U; i < RxBuffCount; i++)
 800124e:	2300      	movs	r3, #0
 8001250:	617b      	str	r3, [r7, #20]
 8001252:	e034      	b.n	80012be <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab + i;
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	015b      	lsls	r3, r3, #5
 8001258:	68ba      	ldr	r2, [r7, #8]
 800125a:	4413      	add	r3, r2
 800125c:	613b      	str	r3, [r7, #16]

    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001264:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800126c:	605a      	str	r2, [r3, #4]

    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i * ETH_RX_BUF_SIZE]);
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001274:	fb02 f303 	mul.w	r3, r2, r3
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	4413      	add	r3, r2
 800127c:	461a      	mov	r2, r3
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	609a      	str	r2, [r3, #8]

    if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	699b      	ldr	r3, [r3, #24]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d105      	bne.n	8001296 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	605a      	str	r2, [r3, #4]
    }

    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if (i < (RxBuffCount - 1U))
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	3b01      	subs	r3, #1
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	429a      	cmp	r2, r3
 800129e:	d208      	bcs.n	80012b2 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab + i + 1U);
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	3301      	adds	r3, #1
 80012a4:	015b      	lsls	r3, r3, #5
 80012a6:	68ba      	ldr	r2, [r7, #8]
 80012a8:	4413      	add	r3, r2
 80012aa:	461a      	mov	r2, r3
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	60da      	str	r2, [r3, #12]
 80012b0:	e002      	b.n	80012b8 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab);
 80012b2:	68ba      	ldr	r2, [r7, #8]
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	60da      	str	r2, [r3, #12]
  for (i = 0U; i < RxBuffCount; i++)
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	3301      	adds	r3, #1
 80012bc:	617b      	str	r3, [r7, #20]
 80012be:	697a      	ldr	r2, [r7, #20]
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d3c6      	bcc.n	8001254 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }

  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	68ba      	ldr	r2, [r7, #8]
 80012cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012d0:	330c      	adds	r3, #12
 80012d2:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2201      	movs	r2, #1
 80012d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2200      	movs	r2, #0
 80012e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	371c      	adds	r7, #28
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr

080012f0 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b087      	sub	sp, #28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
 80012fe:	2300      	movs	r3, #0
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	2300      	movs	r3, #0
 8001304:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(heth);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800130c:	2b01      	cmp	r3, #1
 800130e:	d101      	bne.n	8001314 <HAL_ETH_TransmitFrame+0x24>
 8001310:	2302      	movs	r3, #2
 8001312:	e0cd      	b.n	80014b0 <HAL_ETH_TransmitFrame+0x1c0>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2201      	movs	r2, #1
 8001318:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2202      	movs	r2, #2
 8001320:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  if (FrameLength == 0U)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d109      	bne.n	800133e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2201      	movs	r2, #1
 800132e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return  HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e0b8      	b.n	80014b0 <HAL_ETH_TransmitFrame+0x1c0>
  }

  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if (((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	da09      	bge.n	800135c <HAL_ETH_TransmitFrame+0x6c>
  {
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2212      	movs	r2, #18
 800134c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e0a9      	b.n	80014b0 <HAL_ETH_TransmitFrame+0x1c0>
  }

  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001362:	4293      	cmp	r3, r2
 8001364:	d915      	bls.n	8001392 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength / ETH_TX_BUF_SIZE;
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	4a54      	ldr	r2, [pc, #336]	; (80014bc <HAL_ETH_TransmitFrame+0x1cc>)
 800136a:	fba2 2303 	umull	r2, r3, r2, r3
 800136e:	0a9b      	lsrs	r3, r3, #10
 8001370:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE)
 8001372:	683a      	ldr	r2, [r7, #0]
 8001374:	4b51      	ldr	r3, [pc, #324]	; (80014bc <HAL_ETH_TransmitFrame+0x1cc>)
 8001376:	fba3 1302 	umull	r1, r3, r3, r2
 800137a:	0a9b      	lsrs	r3, r3, #10
 800137c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001380:	fb01 f303 	mul.w	r3, r1, r3
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	d005      	beq.n	8001396 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	3301      	adds	r3, #1
 800138e:	617b      	str	r3, [r7, #20]
 8001390:	e001      	b.n	8001396 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else
  {
    bufcount = 1U;
 8001392:	2301      	movs	r3, #1
 8001394:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d11c      	bne.n	80013d6 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |= ETH_DMATXDESC_FS | ETH_DMATXDESC_LS;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a6:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80013aa:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013b0:	683a      	ldr	r2, [r7, #0]
 80013b2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80013b6:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013c2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80013c6:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	461a      	mov	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	62da      	str	r2, [r3, #44]	; 0x2c
 80013d4:	e04b      	b.n	800146e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i = 0U; i < bufcount; i++)
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	e044      	b.n	8001466 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013e6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013ea:	601a      	str	r2, [r3, #0]

      if (i == 0U)
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d107      	bne.n	8001402 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013fc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001400:	601a      	str	r2, [r3, #0]
      }

      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001406:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800140a:	605a      	str	r2, [r3, #4]

      if (i == (bufcount - 1U))
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	3b01      	subs	r3, #1
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	429a      	cmp	r2, r3
 8001414:	d116      	bne.n	8001444 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001420:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001424:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount - 1U) * ETH_TX_BUF_SIZE;
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	4a25      	ldr	r2, [pc, #148]	; (80014c0 <HAL_ETH_TransmitFrame+0x1d0>)
 800142a:	fb02 f203 	mul.w	r2, r2, r3
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	4413      	add	r3, r2
 8001432:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001436:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143c:	68fa      	ldr	r2, [r7, #12]
 800143e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001442:	605a      	str	r2, [r3, #4]
      }

      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800144e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001452:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	461a      	mov	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i = 0U; i < bufcount; i++)
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	3301      	adds	r3, #1
 8001464:	613b      	str	r3, [r7, #16]
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	429a      	cmp	r2, r3
 800146c:	d3b6      	bcc.n	80013dc <HAL_ETH_TransmitFrame+0xec>
    }
  }

  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001476:	3314      	adds	r3, #20
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0304 	and.w	r3, r3, #4
 800147e:	2b00      	cmp	r3, #0
 8001480:	d00d      	beq.n	800149e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800148a:	3314      	adds	r3, #20
 800148c:	2204      	movs	r2, #4
 800148e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001498:	3304      	adds	r3, #4
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2201      	movs	r2, #1
 80014a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80014ae:	2300      	movs	r3, #0
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	371c      	adds	r7, #28
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	ac02b00b 	.word	0xac02b00b
 80014c0:	fffffa0c 	.word	0xfffffa0c

080014c4 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 80014cc:	2300      	movs	r3, #0
 80014ce:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d101      	bne.n	80014de <HAL_ETH_GetReceivedFrame+0x1a>
 80014da:	2302      	movs	r3, #2
 80014dc:	e070      	b.n	80015c0 <HAL_ETH_GetReceivedFrame+0xfc>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2201      	movs	r2, #1
 80014e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2202      	movs	r2, #2
 80014ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	db5a      	blt.n	80015ae <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if (((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET))
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001502:	2b00      	cmp	r3, #0
 8001504:	d030      	beq.n	8001568 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800150a:	1c5a      	adds	r2, r3, #1
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001514:	2b01      	cmp	r3, #1
 8001516:	d103      	bne.n	8001520 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	631a      	str	r2, [r3, #48]	; 0x30
      }

      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	0c1b      	lsrs	r3, r3, #16
 8001530:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001534:	3b04      	subs	r3, #4
 8001536:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	68fa      	ldr	r2, [r7, #12]
 800153c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	689a      	ldr	r2, [r3, #8]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)((heth->RxDesc)->Buffer2NextDescAddr);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	461a      	mov	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2201      	movs	r2, #1
 8001558:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2200      	movs	r2, #0
 8001560:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      /* Return function status */
      return HAL_OK;
 8001564:	2300      	movs	r3, #0
 8001566:	e02b      	b.n	80015c0 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001572:	2b00      	cmp	r3, #0
 8001574:	d010      	beq.n	8001598 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2201      	movs	r2, #1
 8001588:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	461a      	mov	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	629a      	str	r2, [r3, #40]	; 0x28
 8001596:	e00a      	b.n	80015ae <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800159c:	1c5a      	adds	r2, r3, #1
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef *)(heth->RxDesc->Buffer2NextDescAddr);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	461a      	mov	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }

  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2201      	movs	r2, #1
 80015b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bc80      	pop	{r7}
 80015c8:	4770      	bx	lr

080015ca <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b082      	sub	sp, #8
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015da:	3314      	adds	r3, #20
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015e2:	2b40      	cmp	r3, #64	; 0x40
 80015e4:	d112      	bne.n	800160c <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 f85f 	bl	80016aa <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015f4:	3314      	adds	r3, #20
 80015f6:	2240      	movs	r2, #64	; 0x40
 80015f8:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2201      	movs	r2, #1
 80015fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800160a:	e01b      	b.n	8001644 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T))
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001614:	3314      	adds	r3, #20
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	2b01      	cmp	r3, #1
 800161e:	d111      	bne.n	8001644 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f000 f839 	bl	8001698 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800162e:	3314      	adds	r3, #20
 8001630:	2201      	movs	r2, #1
 8001632:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2201      	movs	r2, #1
 8001638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800164c:	3314      	adds	r3, #20
 800164e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001652:	601a      	str	r2, [r3, #0]

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800165c:	3314      	adds	r3, #20
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001664:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001668:	d112      	bne.n	8001690 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 f826 	bl	80016bc <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001678:	3314      	adds	r3, #20
 800167a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800167e:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001690:	bf00      	nop
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bc80      	pop	{r7}
 80016a8:	4770      	bx	lr

080016aa <HAL_ETH_RxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80016aa:	b480      	push	{r7}
 80016ac:	b083      	sub	sp, #12
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr

080016bc <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr

080016ce <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param  RegValue PHY register value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b086      	sub	sp, #24
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	60f8      	str	r0, [r7, #12]
 80016d6:	460b      	mov	r3, r1
 80016d8:	607a      	str	r2, [r7, #4]
 80016da:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80016dc:	2300      	movs	r3, #0
 80016de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80016e0:	2300      	movs	r3, #0
 80016e2:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_RD)
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	2b82      	cmp	r3, #130	; 0x82
 80016ee:	d101      	bne.n	80016f4 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80016f0:	2302      	movs	r3, #2
 80016f2:	e050      	b.n	8001796 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2282      	movs	r2, #130	; 0x82
 80016f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	f003 031c 	and.w	r3, r3, #28
 800170a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	8a1b      	ldrh	r3, [r3, #16]
 8001710:	02db      	lsls	r3, r3, #11
 8001712:	b29b      	uxth	r3, r3
 8001714:	697a      	ldr	r2, [r7, #20]
 8001716:	4313      	orrs	r3, r2
 8001718:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800171a:	897b      	ldrh	r3, [r7, #10]
 800171c:	019b      	lsls	r3, r3, #6
 800171e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	4313      	orrs	r3, r2
 8001726:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	f023 0302 	bic.w	r3, r3, #2
 800172e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	f043 0301 	orr.w	r3, r3, #1
 8001736:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	697a      	ldr	r2, [r7, #20]
 800173e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001740:	f7ff fa3a 	bl	8000bb8 <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001746:	e015      	b.n	8001774 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001748:	f7ff fa36 	bl	8000bb8 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001756:	d309      	bcc.n	800176c <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State = HAL_ETH_STATE_READY;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2201      	movs	r2, #1
 800175c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2200      	movs	r2, #0
 8001764:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e014      	b.n	8001796 <HAL_ETH_ReadPHYRegister+0xc8>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	2b00      	cmp	r3, #0
 800177c:	d1e4      	bne.n	8001748 <HAL_ETH_ReadPHYRegister+0x7a>
  }

  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	695b      	ldr	r3, [r3, #20]
 8001784:	b29b      	uxth	r3, r3
 8001786:	461a      	mov	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	601a      	str	r2, [r3, #0]

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2201      	movs	r2, #1
 8001790:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3718      	adds	r7, #24
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b086      	sub	sp, #24
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	60f8      	str	r0, [r7, #12]
 80017a6:	460b      	mov	r3, r1
 80017a8:	607a      	str	r2, [r7, #4]
 80017aa:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80017b0:	2300      	movs	r3, #0
 80017b2:	613b      	str	r3, [r7, #16]

  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));

  /* Check the ETH peripheral state */
  if (heth->State == HAL_ETH_STATE_BUSY_WR)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	2b42      	cmp	r3, #66	; 0x42
 80017be:	d101      	bne.n	80017c4 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80017c0:	2302      	movs	r3, #2
 80017c2:	e04e      	b.n	8001862 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2242      	movs	r2, #66	; 0x42
 80017c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	f003 031c 	and.w	r3, r3, #28
 80017da:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= (((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	8a1b      	ldrh	r3, [r3, #16]
 80017e0:	02db      	lsls	r3, r3, #11
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	697a      	ldr	r2, [r7, #20]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80017ea:	897b      	ldrh	r3, [r7, #10]
 80017ec:	019b      	lsls	r3, r3, #6
 80017ee:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80017f2:	697a      	ldr	r2, [r7, #20]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	f043 0302 	orr.w	r3, r3, #2
 80017fe:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	f043 0301 	orr.w	r3, r3, #1
 8001806:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	b29a      	uxth	r2, r3
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	697a      	ldr	r2, [r7, #20]
 8001818:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800181a:	f7ff f9cd 	bl	8000bb8 <HAL_GetTick>
 800181e:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001820:	e015      	b.n	800184e <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001822:	f7ff f9c9 	bl	8000bb8 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001830:	d309      	bcc.n	8001846 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State = HAL_ETH_STATE_READY;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	2201      	movs	r2, #1
 8001836:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	2200      	movs	r2, #0
 800183e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

      return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e00d      	b.n	8001862 <HAL_ETH_WritePHYRegister+0xc4>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	691b      	ldr	r3, [r3, #16]
 800184c:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1e4      	bne.n	8001822 <HAL_ETH_WritePHYRegister+0x84>
  }

  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2201      	movs	r2, #1
 800185c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Return function status */
  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_ETH_Start>:
 * @param  heth pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b082      	sub	sp, #8
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001878:	2b01      	cmp	r3, #1
 800187a:	d101      	bne.n	8001880 <HAL_ETH_Start+0x16>
 800187c:	2302      	movs	r3, #2
 800187e:	e01f      	b.n	80018c0 <HAL_ETH_Start+0x56>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2201      	movs	r2, #1
 8001884:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2202      	movs	r2, #2
 800188c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f000 fb43 	bl	8001f1c <ETH_MACTransmissionEnable>

  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 fb7a 	bl	8001f90 <ETH_MACReceptionEnable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f000 fc0d 	bl	80020bc <ETH_FlushTransmitFIFO>

  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 fbae 	bl	8002004 <ETH_DMATransmissionEnable>

  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f000 fbd9 	bl	8002060 <ETH_DMAReceptionEnable>

  /* Set the ETH state to READY*/
  heth->State = HAL_ETH_STATE_READY;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d101      	bne.n	80018de <HAL_ETH_Stop+0x16>
 80018da:	2302      	movs	r3, #2
 80018dc:	e01f      	b.n	800191e <HAL_ETH_Stop+0x56>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2201      	movs	r2, #1
 80018e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2202      	movs	r2, #2
 80018ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 fb9f 	bl	8002032 <ETH_DMATransmissionDisable>

  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f000 fbca 	bl	800208e <ETH_DMAReceptionDisable>

  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f000 fb65 	bl	8001fca <ETH_MACReceptionDisable>

  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f000 fbdb 	bl	80020bc <ETH_FlushTransmitFIFO>

  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f000 fb25 	bl	8001f56 <ETH_MACTransmissionDisable>

  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 800191c:	2300      	movs	r3, #0
}
 800191e:	4618      	mov	r0, r3
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
	...

08001928 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(heth);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800193c:	2b01      	cmp	r3, #1
 800193e:	d101      	bne.n	8001944 <HAL_ETH_ConfigMAC+0x1c>
 8001940:	2302      	movs	r3, #2
 8001942:	e0e4      	b.n	8001b0e <HAL_ETH_ConfigMAC+0x1e6>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2202      	movs	r2, #2
 8001950:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));

  if (macconf != NULL)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	f000 80b1 	beq.w	8001abe <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));

    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001964:	68fa      	ldr	r2, [r7, #12]
 8001966:	4b6c      	ldr	r3, [pc, #432]	; (8001b18 <HAL_ETH_ConfigMAC+0x1f0>)
 8001968:	4013      	ands	r3, r2
 800196a:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
                          macconf->Jabber |
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 8001974:	431a      	orrs	r2, r3
                          macconf->InterFrameGap |
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	689b      	ldr	r3, [r3, #8]
                          macconf->Jabber |
 800197a:	431a      	orrs	r2, r3
                          macconf->CarrierSense |
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	68db      	ldr	r3, [r3, #12]
                          macconf->InterFrameGap |
 8001980:	431a      	orrs	r2, r3
                          (heth->Init).Speed |
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689b      	ldr	r3, [r3, #8]
                          macconf->CarrierSense |
 8001986:	431a      	orrs	r2, r3
                          macconf->ReceiveOwn |
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	691b      	ldr	r3, [r3, #16]
                          (heth->Init).Speed |
 800198c:	431a      	orrs	r2, r3
                          macconf->LoopbackMode |
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	695b      	ldr	r3, [r3, #20]
                          macconf->ReceiveOwn |
 8001992:	431a      	orrs	r2, r3
                          (heth->Init).DuplexMode |
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	68db      	ldr	r3, [r3, #12]
                          macconf->LoopbackMode |
 8001998:	431a      	orrs	r2, r3
                          macconf->ChecksumOffload |
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	699b      	ldr	r3, [r3, #24]
                          (heth->Init).DuplexMode |
 800199e:	431a      	orrs	r2, r3
                          macconf->RetryTransmission |
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	69db      	ldr	r3, [r3, #28]
                          macconf->ChecksumOffload |
 80019a4:	431a      	orrs	r2, r3
                          macconf->AutomaticPadCRCStrip |
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	6a1b      	ldr	r3, [r3, #32]
                          macconf->RetryTransmission |
 80019aa:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          macconf->AutomaticPadCRCStrip |
 80019b0:	431a      	orrs	r2, r3
                          macconf->DeferralCheck);
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          macconf->BackOffLimit |
 80019b6:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog |
 80019b8:	68fa      	ldr	r2, [r7, #12]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80019ce:	2001      	movs	r0, #1
 80019d0:	f7ff f8fc 	bl	8000bcc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68fa      	ldr	r2, [r7, #12]
 80019da:	601a      	str	r2, [r3, #0]

    /*----------------------- ETHERNET MACFFR Configuration --------------------*/
    /* Write to ETHERNET MACFFR */
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 80019e4:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80019ea:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception |
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 80019f0:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception |
 80019f6:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80019fc:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001a02:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001a0e:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll |
 8001a10:	605a      	str	r2, [r3, #4]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFFR;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a1a:	2001      	movs	r0, #1
 8001a1c:	f7ff f8d6 	bl	8000bcc <HAL_Delay>
    (heth->Instance)->MACFFR = tmpreg1;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	68fa      	ldr	r2, [r7, #12]
 8001a26:	605a      	str	r2, [r3, #4]

    /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
    /* Write to ETHERNET MACHTHR */
    (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	683a      	ldr	r2, [r7, #0]
 8001a2e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001a30:	609a      	str	r2, [r3, #8]

    /* Write to ETHERNET MACHTLR */
    (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a3a:	60da      	str	r2, [r3, #12]
    /*----------------------- ETHERNET MACFCR Configuration --------------------*/

    /* Get the ETHERNET MACFCR value */
    tmpreg1 = (heth->Instance)->MACFCR;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	699b      	ldr	r3, [r3, #24]
 8001a42:	60fb      	str	r3, [r7, #12]
    /* Clear xx bits */
    tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001a44:	68fa      	ldr	r2, [r7, #12]
 8001a46:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a52:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001a58:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001a5e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect |
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001a64:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect |
 8001a6a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl);
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001a70:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACFCR */
    (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	68fa      	ldr	r2, [r7, #12]
 8001a7e:	619a      	str	r2, [r3, #24]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACFCR;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a88:	2001      	movs	r0, #1
 8001a8a:	f7ff f89f 	bl	8000bcc <HAL_Delay>
    (heth->Instance)->MACFCR = tmpreg1;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	619a      	str	r2, [r3, #24]

    /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                             macconf->VLANTagIdentifier);
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison |
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	61da      	str	r2, [r3, #28]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	69db      	ldr	r3, [r3, #28]
 8001aac:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001aae:	2001      	movs	r0, #1
 8001ab0:	f7ff f88c 	bl	8000bcc <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	68fa      	ldr	r2, [r7, #12]
 8001aba:	61da      	str	r2, [r3, #28]
 8001abc:	e01e      	b.n	8001afc <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	60fb      	str	r3, [r7, #12]

    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001acc:	60fb      	str	r3, [r7, #12]

    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689a      	ldr	r2, [r3, #8]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]

    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001aee:	2001      	movs	r0, #1
 8001af0:	f7ff f86c 	bl	8000bcc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	601a      	str	r2, [r3, #0]
  }

  /* Set the ETH state to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Return function status */
  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3710      	adds	r7, #16
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	ff20810f 	.word	0xff20810f

08001b1c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b0b0      	sub	sp, #192	; 0xc0
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001b26:	2300      	movs	r3, #0
 8001b28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d007      	beq.n	8001b42 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b38:	60da      	str	r2, [r3, #12]

    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b40:	609a      	str	r2, [r3, #8]
  }

  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001b42:	2300      	movs	r3, #0
 8001b44:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001b46:	2300      	movs	r3, #0
 8001b48:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001b52:	2300      	movs	r3, #0
 8001b54:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001b56:	2300      	movs	r3, #0
 8001b58:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d103      	bne.n	8001b6a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001b62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b66:	663b      	str	r3, [r7, #96]	; 0x60
 8001b68:	e001      	b.n	8001b6e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001b6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b72:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001b74:	2300      	movs	r3, #0
 8001b76:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001b80:	2300      	movs	r3, #0
 8001b82:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001b84:	2300      	movs	r3, #0
 8001b86:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001b88:	2340      	movs	r3, #64	; 0x40
 8001b8a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001bbc:	2380      	movs	r3, #128	; 0x80
 8001bbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001be0:	2300      	movs	r3, #0
 8001be2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001bf0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bf4:	4bac      	ldr	r3, [pc, #688]	; (8001ea8 <ETH_MACDMAConfig+0x38c>)
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8001bfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
                        macinit.Jabber |
 8001bfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8001c00:	431a      	orrs	r2, r3
                        macinit.InterFrameGap |
 8001c02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                        macinit.Jabber |
 8001c04:	431a      	orrs	r2, r3
                        macinit.CarrierSense |
 8001c06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                        macinit.InterFrameGap |
 8001c08:	431a      	orrs	r2, r3
                        (heth->Init).Speed |
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	689b      	ldr	r3, [r3, #8]
                        macinit.CarrierSense |
 8001c0e:	431a      	orrs	r2, r3
                        macinit.ReceiveOwn |
 8001c10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                        (heth->Init).Speed |
 8001c12:	431a      	orrs	r2, r3
                        macinit.LoopbackMode |
 8001c14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                        macinit.ReceiveOwn |
 8001c16:	431a      	orrs	r2, r3
                        (heth->Init).DuplexMode |
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	68db      	ldr	r3, [r3, #12]
                        macinit.LoopbackMode |
 8001c1c:	431a      	orrs	r2, r3
                        macinit.ChecksumOffload |
 8001c1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                        (heth->Init).DuplexMode |
 8001c20:	431a      	orrs	r2, r3
                        macinit.RetryTransmission |
 8001c22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                        macinit.ChecksumOffload |
 8001c24:	431a      	orrs	r2, r3
                        macinit.AutomaticPadCRCStrip |
 8001c26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                        macinit.RetryTransmission |
 8001c28:	431a      	orrs	r2, r3
                        macinit.BackOffLimit |
 8001c2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                        macinit.AutomaticPadCRCStrip |
 8001c2c:	431a      	orrs	r2, r3
                        macinit.DeferralCheck);
 8001c2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                        macinit.BackOffLimit |
 8001c30:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog |
 8001c32:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c36:	4313      	orrs	r3, r2
 8001c38:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c44:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c50:	2001      	movs	r0, #1
 8001c52:	f7fe ffbb 	bl	8000bcc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c5e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8001c60:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001c62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8001c64:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001c66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001c68:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception |
 8001c6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001c6e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001c70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception |
 8001c74:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001c76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001c7a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001c7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001c80:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001c84:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001c8c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll |
 8001c8e:	605a      	str	r2, [r3, #4]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFFR;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c9a:	2001      	movs	r0, #1
 8001c9c:	f7fe ff96 	bl	8000bcc <HAL_Delay>
  (heth->Instance)->MACFFR = tmpreg1;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ca8:	605a      	str	r2, [r3, #4]

  /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
  /* Write to ETHERNET MACHTHR */
  (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001cb2:	609a      	str	r2, [r3, #8]

  /* Write to ETHERNET MACHTLR */
  (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001cbc:	60da      	str	r2, [r3, #12]
  /*----------------------- ETHERNET MACFCR Configuration -------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001cc8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ccc:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
  /* Set the PLT bit according to ETH PauseLowThreshold value */
  /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
  /* Set the RFE bit according to ETH ReceiveFlowControl value */
  /* Set the TFE bit according to ETH TransmitFlowControl value */
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8001cd6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001cda:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001cdc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8001ce0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001ce2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001ce6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect |
 8001ce8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001cec:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001cee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect |
 8001cf2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl);
 8001cf4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001cf8:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) |
 8001cfa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d0c:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d18:	2001      	movs	r0, #1
 8001d1a:	f7fe ff57 	bl	8000bcc <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d26:	619a      	str	r2, [r3, #24]

  /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
  /* Set the ETV bit according to ETH VLANTagComparison value */
  /* Set the VL bit according to ETH VLANTagIdentifier value */
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8001d28:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                           macinit.VLANTagIdentifier);
 8001d2c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
  (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison |
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	430a      	orrs	r2, r1
 8001d36:	61da      	str	r2, [r3, #28]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACVLANTR;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d42:	2001      	movs	r0, #1
 8001d44:	f7fe ff42 	bl	8000bcc <HAL_Delay>
  (heth->Instance)->MACVLANTR = tmpreg1;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001d50:	61da      	str	r2, [r3, #28]

  /* Ethernet DMA default initialization ************************************/
  dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001d52:	2300      	movs	r3, #0
 8001d54:	60bb      	str	r3, [r7, #8]
  dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001d56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d5a:	60fb      	str	r3, [r7, #12]
  dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	613b      	str	r3, [r7, #16]
  dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;
 8001d60:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d64:	617b      	str	r3, [r7, #20]
  dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001d66:	2300      	movs	r3, #0
 8001d68:	61bb      	str	r3, [r7, #24]
  dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61fb      	str	r3, [r7, #28]
  dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	623b      	str	r3, [r7, #32]
  dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001d72:	2300      	movs	r3, #0
 8001d74:	627b      	str	r3, [r7, #36]	; 0x24
  dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001d76:	2304      	movs	r3, #4
 8001d78:	62bb      	str	r3, [r7, #40]	; 0x28
  dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001d7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001d80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d84:	633b      	str	r3, [r7, #48]	; 0x30
  dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001d86:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d8a:	637b      	str	r3, [r7, #52]	; 0x34
  dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001d8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d90:	63bb      	str	r3, [r7, #56]	; 0x38
  dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001d92:	2380      	movs	r3, #128	; 0x80
 8001d94:	63fb      	str	r3, [r7, #60]	; 0x3c
  dmainit.DescriptorSkipLength = 0x0U;
 8001d96:	2300      	movs	r3, #0
 8001d98:	643b      	str	r3, [r7, #64]	; 0x40
  dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	647b      	str	r3, [r7, #68]	; 0x44

  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001da6:	3318      	adds	r3, #24
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001dae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001db2:	4b3e      	ldr	r3, [pc, #248]	; (8001eac <ETH_MACDMAConfig+0x390>)
 8001db4:	4013      	ands	r3, r2
 8001db6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the TTC bit according to ETH TransmitThresholdControl value */
  /* Set the FEF bit according to ETH ForwardErrorFrames value */
  /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
  /* Set the RTC bit according to ETH ReceiveThresholdControl value */
  /* Set the OSF bit according to ETH SecondFrameOperate value */
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8001dba:	68ba      	ldr	r2, [r7, #8]
                        dmainit.ReceiveStoreForward |
 8001dbc:	68fb      	ldr	r3, [r7, #12]
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8001dbe:	431a      	orrs	r2, r3
                        dmainit.FlushReceivedFrame |
 8001dc0:	693b      	ldr	r3, [r7, #16]
                        dmainit.ReceiveStoreForward |
 8001dc2:	431a      	orrs	r2, r3
                        dmainit.TransmitStoreForward |
 8001dc4:	697b      	ldr	r3, [r7, #20]
                        dmainit.FlushReceivedFrame |
 8001dc6:	431a      	orrs	r2, r3
                        dmainit.TransmitThresholdControl |
 8001dc8:	69bb      	ldr	r3, [r7, #24]
                        dmainit.TransmitStoreForward |
 8001dca:	431a      	orrs	r2, r3
                        dmainit.ForwardErrorFrames |
 8001dcc:	69fb      	ldr	r3, [r7, #28]
                        dmainit.TransmitThresholdControl |
 8001dce:	431a      	orrs	r2, r3
                        dmainit.ForwardUndersizedGoodFrames |
 8001dd0:	6a3b      	ldr	r3, [r7, #32]
                        dmainit.ForwardErrorFrames |
 8001dd2:	431a      	orrs	r2, r3
                        dmainit.ReceiveThresholdControl |
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                        dmainit.ForwardUndersizedGoodFrames |
 8001dd6:	431a      	orrs	r2, r3
                        dmainit.SecondFrameOperate);
 8001dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
                        dmainit.ReceiveThresholdControl |
 8001dda:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame |
 8001ddc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001de0:	4313      	orrs	r3, r2
 8001de2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dee:	3318      	adds	r3, #24
 8001df0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001df4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dfe:	3318      	adds	r3, #24
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e06:	2001      	movs	r0, #1
 8001e08:	f7fe fee0 	bl	8000bcc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e14:	3318      	adds	r3, #24
 8001e16:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e1a:	601a      	str	r2, [r3, #0]
  /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
  /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
  /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
  /* Set the DSL bit according to ETH DesciptorSkipLength value */
  /* Set the PR and DA bits according to ETH DMAArbitration value */
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8001e1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                        dmainit.FixedBurst |
 8001e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8001e20:	431a      	orrs	r2, r3
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                        dmainit.FixedBurst |
 8001e24:	431a      	orrs	r2, r3
                                        dmainit.TxDMABurstLength |
 8001e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                        dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001e28:	431a      	orrs	r2, r3
                                        dmainit.EnhancedDescriptorFormat |
 8001e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                        dmainit.TxDMABurstLength |
 8001e2c:	431a      	orrs	r2, r3
                                        (dmainit.DescriptorSkipLength << 2U) |
 8001e2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e30:	009b      	lsls	r3, r3, #2
                                        dmainit.EnhancedDescriptorFormat |
 8001e32:	431a      	orrs	r2, r3
                                        dmainit.DMAArbitration |
 8001e34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                        (dmainit.DescriptorSkipLength << 2U) |
 8001e36:	431a      	orrs	r2, r3
  (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats |
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001e40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e44:	601a      	str	r2, [r3, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e54:	2001      	movs	r0, #1
 8001e56:	f7fe feb9 	bl	8000bcc <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e62:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e66:	601a      	str	r2, [r3, #0]

  if ((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d10f      	bne.n	8001e90 <ETH_MACDMAConfig+0x374>
  {
    /* Enable the Ethernet Rx Interrupt */
    __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e78:	331c      	adds	r3, #28
 8001e7a:	681a      	ldr	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001e84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e8c:	331c      	adds	r3, #28
 8001e8e:	601a      	str	r2, [r3, #0]
  }

  /* Initialize MAC address in ethernet MAC */
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	695b      	ldr	r3, [r3, #20]
 8001e94:	461a      	mov	r2, r3
 8001e96:	2100      	movs	r1, #0
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f000 f809 	bl	8001eb0 <ETH_MACAddressConfig>
}
 8001e9e:	bf00      	nop
 8001ea0:	37c0      	adds	r7, #192	; 0xc0
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	ff20810f 	.word	0xff20810f
 8001eac:	f8de3f23 	.word	0xf8de3f23

08001eb0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b087      	sub	sp, #28
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3305      	adds	r3, #5
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	021b      	lsls	r3, r3, #8
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	3204      	adds	r2, #4
 8001ec8:	7812      	ldrb	r2, [r2, #0]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001ece:	68ba      	ldr	r2, [r7, #8]
 8001ed0:	4b10      	ldr	r3, [pc, #64]	; (8001f14 <ETH_MACAddressConfig+0x64>)
 8001ed2:	4413      	add	r3, r2
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	3303      	adds	r3, #3
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	061a      	lsls	r2, r3, #24
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3302      	adds	r3, #2
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	041b      	lsls	r3, r3, #16
 8001eea:	431a      	orrs	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	021b      	lsls	r3, r3, #8
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	7812      	ldrb	r2, [r2, #0]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001efe:	68ba      	ldr	r2, [r7, #8]
 8001f00:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <ETH_MACAddressConfig+0x68>)
 8001f02:	4413      	add	r3, r2
 8001f04:	461a      	mov	r2, r3
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	6013      	str	r3, [r2, #0]
}
 8001f0a:	bf00      	nop
 8001f0c:	371c      	adds	r7, #28
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr
 8001f14:	40028040 	.word	0x40028040
 8001f18:	40028044 	.word	0x40028044

08001f1c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f042 0208 	orr.w	r2, r2, #8
 8001f36:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001f40:	2001      	movs	r0, #1
 8001f42:	f000 f8e5 	bl	8002110 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	601a      	str	r2, [r3, #0]
}
 8001f4e:	bf00      	nop
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b084      	sub	sp, #16
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 0208 	bic.w	r2, r2, #8
 8001f70:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001f7a:	2001      	movs	r0, #1
 8001f7c:	f000 f8c8 	bl	8002110 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	601a      	str	r2, [r3, #0]
}
 8001f88:	bf00      	nop
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	60fb      	str	r3, [r7, #12]

  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f042 0204 	orr.w	r2, r2, #4
 8001faa:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001fb4:	2001      	movs	r0, #1
 8001fb6:	f000 f8ab 	bl	8002110 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	601a      	str	r2, [r3, #0]
}
 8001fc2:	bf00      	nop
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b084      	sub	sp, #16
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60fb      	str	r3, [r7, #12]

  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 0204 	bic.w	r2, r2, #4
 8001fe4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001fee:	2001      	movs	r0, #1
 8001ff0:	f000 f88e 	bl	8002110 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	601a      	str	r2, [r3, #0]
}
 8001ffc:	bf00      	nop
 8001ffe:	3710      	adds	r7, #16
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002014:	3318      	adds	r3, #24
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002020:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002024:	3318      	adds	r3, #24
 8002026:	601a      	str	r2, [r3, #0]
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	bc80      	pop	{r7}
 8002030:	4770      	bx	lr

08002032 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002042:	3318      	adds	r3, #24
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800204e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002052:	3318      	adds	r3, #24
 8002054:	601a      	str	r2, [r3, #0]
}
 8002056:	bf00      	nop
 8002058:	370c      	adds	r7, #12
 800205a:	46bd      	mov	sp, r7
 800205c:	bc80      	pop	{r7}
 800205e:	4770      	bx	lr

08002060 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002070:	3318      	adds	r3, #24
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f042 0202 	orr.w	r2, r2, #2
 800207c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002080:	3318      	adds	r3, #24
 8002082:	601a      	str	r2, [r3, #0]
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr

0800208e <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{
 800208e:	b480      	push	{r7}
 8002090:	b083      	sub	sp, #12
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800209e:	3318      	adds	r3, #24
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 0202 	bic.w	r2, r2, #2
 80020aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020ae:	3318      	adds	r3, #24
 80020b0:	601a      	str	r2, [r3, #0]
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bc80      	pop	{r7}
 80020ba:	4770      	bx	lr

080020bc <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80020c4:	2300      	movs	r3, #0
 80020c6:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020d0:	3318      	adds	r3, #24
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80020dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020e0:	3318      	adds	r3, #24
 80020e2:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020ec:	3318      	adds	r3, #24
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80020f2:	2001      	movs	r0, #1
 80020f4:	f000 f80c 	bl	8002110 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002102:	3318      	adds	r3, #24
 8002104:	601a      	str	r2, [r3, #0]
}
 8002106:	bf00      	nop
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002118:	4b0a      	ldr	r3, [pc, #40]	; (8002144 <ETH_Delay+0x34>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a0a      	ldr	r2, [pc, #40]	; (8002148 <ETH_Delay+0x38>)
 800211e:	fba2 2303 	umull	r2, r3, r2, r3
 8002122:	0a5b      	lsrs	r3, r3, #9
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	fb02 f303 	mul.w	r3, r2, r3
 800212a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800212c:	bf00      	nop
  }
  while (Delay --);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	1e5a      	subs	r2, r3, #1
 8002132:	60fa      	str	r2, [r7, #12]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d1f9      	bne.n	800212c <ETH_Delay+0x1c>
}
 8002138:	bf00      	nop
 800213a:	3714      	adds	r7, #20
 800213c:	46bd      	mov	sp, r7
 800213e:	bc80      	pop	{r7}
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	20000000 	.word	0x20000000
 8002148:	10624dd3 	.word	0x10624dd3

0800214c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800214c:	b480      	push	{r7}
 800214e:	b087      	sub	sp, #28
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002156:	2300      	movs	r3, #0
 8002158:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800215a:	e16f      	b.n	800243c <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	2101      	movs	r1, #1
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	fa01 f303 	lsl.w	r3, r1, r3
 8002168:	4013      	ands	r3, r2
 800216a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2b00      	cmp	r3, #0
 8002170:	f000 8161 	beq.w	8002436 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d00b      	beq.n	8002194 <HAL_GPIO_Init+0x48>
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	2b02      	cmp	r3, #2
 8002182:	d007      	beq.n	8002194 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002188:	2b11      	cmp	r3, #17
 800218a:	d003      	beq.n	8002194 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	2b12      	cmp	r3, #18
 8002192:	d130      	bne.n	80021f6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	2203      	movs	r2, #3
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	43db      	mvns	r3, r3
 80021a6:	693a      	ldr	r2, [r7, #16]
 80021a8:	4013      	ands	r3, r2
 80021aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	68da      	ldr	r2, [r3, #12]
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021ca:	2201      	movs	r2, #1
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	43db      	mvns	r3, r3
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	4013      	ands	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	091b      	lsrs	r3, r3, #4
 80021e0:	f003 0201 	and.w	r2, r3, #1
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	2203      	movs	r2, #3
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43db      	mvns	r3, r3
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	4013      	ands	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	689a      	ldr	r2, [r3, #8]
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	4313      	orrs	r3, r2
 800221e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	693a      	ldr	r2, [r7, #16]
 8002224:	60da      	str	r2, [r3, #12]

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2b02      	cmp	r3, #2
 800222c:	d003      	beq.n	8002236 <HAL_GPIO_Init+0xea>
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b12      	cmp	r3, #18
 8002234:	d123      	bne.n	800227e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	08da      	lsrs	r2, r3, #3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	3208      	adds	r2, #8
 800223e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002242:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	220f      	movs	r2, #15
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	43db      	mvns	r3, r3
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	4013      	ands	r3, r2
 8002258:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	691a      	ldr	r2, [r3, #16]
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	f003 0307 	and.w	r3, r3, #7
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	4313      	orrs	r3, r2
 800226e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	08da      	lsrs	r2, r3, #3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	3208      	adds	r2, #8
 8002278:	6939      	ldr	r1, [r7, #16]
 800227a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	2203      	movs	r2, #3
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	43db      	mvns	r3, r3
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	4013      	ands	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f003 0203 	and.w	r2, r3, #3
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	fa02 f303 	lsl.w	r3, r2, r3
 80022a6:	693a      	ldr	r2, [r7, #16]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f000 80bb 	beq.w	8002436 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022c0:	2300      	movs	r3, #0
 80022c2:	60bb      	str	r3, [r7, #8]
 80022c4:	4b64      	ldr	r3, [pc, #400]	; (8002458 <HAL_GPIO_Init+0x30c>)
 80022c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c8:	4a63      	ldr	r2, [pc, #396]	; (8002458 <HAL_GPIO_Init+0x30c>)
 80022ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022ce:	6453      	str	r3, [r2, #68]	; 0x44
 80022d0:	4b61      	ldr	r3, [pc, #388]	; (8002458 <HAL_GPIO_Init+0x30c>)
 80022d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022d8:	60bb      	str	r3, [r7, #8]
 80022da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022dc:	4a5f      	ldr	r2, [pc, #380]	; (800245c <HAL_GPIO_Init+0x310>)
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	089b      	lsrs	r3, r3, #2
 80022e2:	3302      	adds	r3, #2
 80022e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	220f      	movs	r2, #15
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	43db      	mvns	r3, r3
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	4013      	ands	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a57      	ldr	r2, [pc, #348]	; (8002460 <HAL_GPIO_Init+0x314>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d031      	beq.n	800236c <HAL_GPIO_Init+0x220>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a56      	ldr	r2, [pc, #344]	; (8002464 <HAL_GPIO_Init+0x318>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d02b      	beq.n	8002368 <HAL_GPIO_Init+0x21c>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a55      	ldr	r2, [pc, #340]	; (8002468 <HAL_GPIO_Init+0x31c>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d025      	beq.n	8002364 <HAL_GPIO_Init+0x218>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	4a54      	ldr	r2, [pc, #336]	; (800246c <HAL_GPIO_Init+0x320>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d01f      	beq.n	8002360 <HAL_GPIO_Init+0x214>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a53      	ldr	r2, [pc, #332]	; (8002470 <HAL_GPIO_Init+0x324>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d019      	beq.n	800235c <HAL_GPIO_Init+0x210>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a52      	ldr	r2, [pc, #328]	; (8002474 <HAL_GPIO_Init+0x328>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d013      	beq.n	8002358 <HAL_GPIO_Init+0x20c>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a51      	ldr	r2, [pc, #324]	; (8002478 <HAL_GPIO_Init+0x32c>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d00d      	beq.n	8002354 <HAL_GPIO_Init+0x208>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a50      	ldr	r2, [pc, #320]	; (800247c <HAL_GPIO_Init+0x330>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d007      	beq.n	8002350 <HAL_GPIO_Init+0x204>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a4f      	ldr	r2, [pc, #316]	; (8002480 <HAL_GPIO_Init+0x334>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d101      	bne.n	800234c <HAL_GPIO_Init+0x200>
 8002348:	2308      	movs	r3, #8
 800234a:	e010      	b.n	800236e <HAL_GPIO_Init+0x222>
 800234c:	2309      	movs	r3, #9
 800234e:	e00e      	b.n	800236e <HAL_GPIO_Init+0x222>
 8002350:	2307      	movs	r3, #7
 8002352:	e00c      	b.n	800236e <HAL_GPIO_Init+0x222>
 8002354:	2306      	movs	r3, #6
 8002356:	e00a      	b.n	800236e <HAL_GPIO_Init+0x222>
 8002358:	2305      	movs	r3, #5
 800235a:	e008      	b.n	800236e <HAL_GPIO_Init+0x222>
 800235c:	2304      	movs	r3, #4
 800235e:	e006      	b.n	800236e <HAL_GPIO_Init+0x222>
 8002360:	2303      	movs	r3, #3
 8002362:	e004      	b.n	800236e <HAL_GPIO_Init+0x222>
 8002364:	2302      	movs	r3, #2
 8002366:	e002      	b.n	800236e <HAL_GPIO_Init+0x222>
 8002368:	2301      	movs	r3, #1
 800236a:	e000      	b.n	800236e <HAL_GPIO_Init+0x222>
 800236c:	2300      	movs	r3, #0
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	f002 0203 	and.w	r2, r2, #3
 8002374:	0092      	lsls	r2, r2, #2
 8002376:	4093      	lsls	r3, r2
 8002378:	461a      	mov	r2, r3
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	4313      	orrs	r3, r2
 800237e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002380:	4936      	ldr	r1, [pc, #216]	; (800245c <HAL_GPIO_Init+0x310>)
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	089b      	lsrs	r3, r3, #2
 8002386:	3302      	adds	r3, #2
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800238e:	4b3d      	ldr	r3, [pc, #244]	; (8002484 <HAL_GPIO_Init+0x338>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	43db      	mvns	r3, r3
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	4013      	ands	r3, r2
 800239c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80023b2:	4a34      	ldr	r2, [pc, #208]	; (8002484 <HAL_GPIO_Init+0x338>)
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80023b8:	4b32      	ldr	r3, [pc, #200]	; (8002484 <HAL_GPIO_Init+0x338>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	43db      	mvns	r3, r3
 80023c2:	693a      	ldr	r2, [r7, #16]
 80023c4:	4013      	ands	r3, r2
 80023c6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	4313      	orrs	r3, r2
 80023da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80023dc:	4a29      	ldr	r2, [pc, #164]	; (8002484 <HAL_GPIO_Init+0x338>)
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023e2:	4b28      	ldr	r3, [pc, #160]	; (8002484 <HAL_GPIO_Init+0x338>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	43db      	mvns	r3, r3
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	4013      	ands	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	4313      	orrs	r3, r2
 8002404:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002406:	4a1f      	ldr	r2, [pc, #124]	; (8002484 <HAL_GPIO_Init+0x338>)
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800240c:	4b1d      	ldr	r3, [pc, #116]	; (8002484 <HAL_GPIO_Init+0x338>)
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	43db      	mvns	r3, r3
 8002416:	693a      	ldr	r2, [r7, #16]
 8002418:	4013      	ands	r3, r2
 800241a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d003      	beq.n	8002430 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	4313      	orrs	r3, r2
 800242e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002430:	4a14      	ldr	r2, [pc, #80]	; (8002484 <HAL_GPIO_Init+0x338>)
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	3301      	adds	r3, #1
 800243a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	fa22 f303 	lsr.w	r3, r2, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	f47f ae88 	bne.w	800215c <HAL_GPIO_Init+0x10>
  }
}
 800244c:	bf00      	nop
 800244e:	371c      	adds	r7, #28
 8002450:	46bd      	mov	sp, r7
 8002452:	bc80      	pop	{r7}
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	40023800 	.word	0x40023800
 800245c:	40013800 	.word	0x40013800
 8002460:	40020000 	.word	0x40020000
 8002464:	40020400 	.word	0x40020400
 8002468:	40020800 	.word	0x40020800
 800246c:	40020c00 	.word	0x40020c00
 8002470:	40021000 	.word	0x40021000
 8002474:	40021400 	.word	0x40021400
 8002478:	40021800 	.word	0x40021800
 800247c:	40021c00 	.word	0x40021c00
 8002480:	40022000 	.word	0x40022000
 8002484:	40013c00 	.word	0x40013c00

08002488 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	460b      	mov	r3, r1
 8002492:	807b      	strh	r3, [r7, #2]
 8002494:	4613      	mov	r3, r2
 8002496:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002498:	787b      	ldrb	r3, [r7, #1]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800249e:	887a      	ldrh	r2, [r7, #2]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024a4:	e003      	b.n	80024ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024a6:	887b      	ldrh	r3, [r7, #2]
 80024a8:	041a      	lsls	r2, r3, #16
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	619a      	str	r2, [r3, #24]
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr

080024b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b090      	sub	sp, #64	; 0x40
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e253      	b.n	8002972 <HAL_RCC_OscConfig+0x4ba>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d050      	beq.n	8002578 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024d6:	4ba3      	ldr	r3, [pc, #652]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 030c 	and.w	r3, r3, #12
 80024de:	2b04      	cmp	r3, #4
 80024e0:	d00c      	beq.n	80024fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024e2:	4ba0      	ldr	r3, [pc, #640]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024ea:	2b08      	cmp	r3, #8
 80024ec:	d112      	bne.n	8002514 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ee:	4b9d      	ldr	r3, [pc, #628]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024fa:	d10b      	bne.n	8002514 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024fc:	4b99      	ldr	r3, [pc, #612]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d036      	beq.n	8002576 <HAL_RCC_OscConfig+0xbe>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d132      	bne.n	8002576 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e22e      	b.n	8002972 <HAL_RCC_OscConfig+0x4ba>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	4b93      	ldr	r3, [pc, #588]	; (8002768 <HAL_RCC_OscConfig+0x2b0>)
 800251a:	b2d2      	uxtb	r2, r2
 800251c:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d013      	beq.n	800254e <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002526:	f7fe fb47 	bl	8000bb8 <HAL_GetTick>
 800252a:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800252c:	e008      	b.n	8002540 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800252e:	f7fe fb43 	bl	8000bb8 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b64      	cmp	r3, #100	; 0x64
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e218      	b.n	8002972 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002540:	4b88      	ldr	r3, [pc, #544]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0f0      	beq.n	800252e <HAL_RCC_OscConfig+0x76>
 800254c:	e014      	b.n	8002578 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254e:	f7fe fb33 	bl	8000bb8 <HAL_GetTick>
 8002552:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002554:	e008      	b.n	8002568 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002556:	f7fe fb2f 	bl	8000bb8 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b64      	cmp	r3, #100	; 0x64
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e204      	b.n	8002972 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002568:	4b7e      	ldr	r3, [pc, #504]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1f0      	bne.n	8002556 <HAL_RCC_OscConfig+0x9e>
 8002574:	e000      	b.n	8002578 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002576:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d077      	beq.n	8002674 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002584:	4b77      	ldr	r3, [pc, #476]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f003 030c 	and.w	r3, r3, #12
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00b      	beq.n	80025a8 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002590:	4b74      	ldr	r3, [pc, #464]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002598:	2b08      	cmp	r3, #8
 800259a:	d126      	bne.n	80025ea <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800259c:	4b71      	ldr	r3, [pc, #452]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d120      	bne.n	80025ea <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025a8:	4b6e      	ldr	r3, [pc, #440]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d005      	beq.n	80025c0 <HAL_RCC_OscConfig+0x108>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d001      	beq.n	80025c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e1d8      	b.n	8002972 <HAL_RCC_OscConfig+0x4ba>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c0:	4b68      	ldr	r3, [pc, #416]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	21f8      	movs	r1, #248	; 0xf8
 80025ce:	6339      	str	r1, [r7, #48]	; 0x30
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80025d2:	fa91 f1a1 	rbit	r1, r1
 80025d6:	62f9      	str	r1, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80025da:	fab1 f181 	clz	r1, r1
 80025de:	b2c9      	uxtb	r1, r1
 80025e0:	408b      	lsls	r3, r1
 80025e2:	4960      	ldr	r1, [pc, #384]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025e8:	e044      	b.n	8002674 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d02a      	beq.n	8002648 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025f2:	4b5e      	ldr	r3, [pc, #376]	; (800276c <HAL_RCC_OscConfig+0x2b4>)
 80025f4:	2201      	movs	r2, #1
 80025f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f8:	f7fe fade 	bl	8000bb8 <HAL_GetTick>
 80025fc:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002600:	f7fe fada 	bl	8000bb8 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e1af      	b.n	8002972 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002612:	4b54      	ldr	r3, [pc, #336]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0f0      	beq.n	8002600 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800261e:	4b51      	ldr	r3, [pc, #324]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	21f8      	movs	r1, #248	; 0xf8
 800262c:	62b9      	str	r1, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002630:	fa91 f1a1 	rbit	r1, r1
 8002634:	6279      	str	r1, [r7, #36]	; 0x24
  return result;
 8002636:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002638:	fab1 f181 	clz	r1, r1
 800263c:	b2c9      	uxtb	r1, r1
 800263e:	408b      	lsls	r3, r1
 8002640:	4948      	ldr	r1, [pc, #288]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 8002642:	4313      	orrs	r3, r2
 8002644:	600b      	str	r3, [r1, #0]
 8002646:	e015      	b.n	8002674 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002648:	4b48      	ldr	r3, [pc, #288]	; (800276c <HAL_RCC_OscConfig+0x2b4>)
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800264e:	f7fe fab3 	bl	8000bb8 <HAL_GetTick>
 8002652:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002654:	e008      	b.n	8002668 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002656:	f7fe faaf 	bl	8000bb8 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e184      	b.n	8002972 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002668:	4b3e      	ldr	r3, [pc, #248]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0302 	and.w	r3, r3, #2
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1f0      	bne.n	8002656 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0308 	and.w	r3, r3, #8
 800267c:	2b00      	cmp	r3, #0
 800267e:	d030      	beq.n	80026e2 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	695b      	ldr	r3, [r3, #20]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d016      	beq.n	80026b6 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002688:	4b39      	ldr	r3, [pc, #228]	; (8002770 <HAL_RCC_OscConfig+0x2b8>)
 800268a:	2201      	movs	r2, #1
 800268c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800268e:	f7fe fa93 	bl	8000bb8 <HAL_GetTick>
 8002692:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002696:	f7fe fa8f 	bl	8000bb8 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e164      	b.n	8002972 <HAL_RCC_OscConfig+0x4ba>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026a8:	4b2e      	ldr	r3, [pc, #184]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 80026aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0f0      	beq.n	8002696 <HAL_RCC_OscConfig+0x1de>
 80026b4:	e015      	b.n	80026e2 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026b6:	4b2e      	ldr	r3, [pc, #184]	; (8002770 <HAL_RCC_OscConfig+0x2b8>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026bc:	f7fe fa7c 	bl	8000bb8 <HAL_GetTick>
 80026c0:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026c4:	f7fe fa78 	bl	8000bb8 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e14d      	b.n	8002972 <HAL_RCC_OscConfig+0x4ba>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d6:	4b23      	ldr	r3, [pc, #140]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 80026d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1f0      	bne.n	80026c4 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0304 	and.w	r3, r3, #4
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f000 8088 	beq.w	8002800 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026f0:	2300      	movs	r3, #0
 80026f2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026f6:	4b1b      	ldr	r3, [pc, #108]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d110      	bne.n	8002724 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	60bb      	str	r3, [r7, #8]
 8002706:	4b17      	ldr	r3, [pc, #92]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	4a16      	ldr	r2, [pc, #88]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 800270c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002710:	6413      	str	r3, [r2, #64]	; 0x40
 8002712:	4b14      	ldr	r3, [pc, #80]	; (8002764 <HAL_RCC_OscConfig+0x2ac>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271a:	60bb      	str	r3, [r7, #8]
 800271c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800271e:	2301      	movs	r3, #1
 8002720:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002724:	4b13      	ldr	r3, [pc, #76]	; (8002774 <HAL_RCC_OscConfig+0x2bc>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a12      	ldr	r2, [pc, #72]	; (8002774 <HAL_RCC_OscConfig+0x2bc>)
 800272a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800272e:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002730:	4b10      	ldr	r3, [pc, #64]	; (8002774 <HAL_RCC_OscConfig+0x2bc>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002738:	2b00      	cmp	r3, #0
 800273a:	d123      	bne.n	8002784 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800273c:	4b0d      	ldr	r3, [pc, #52]	; (8002774 <HAL_RCC_OscConfig+0x2bc>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a0c      	ldr	r2, [pc, #48]	; (8002774 <HAL_RCC_OscConfig+0x2bc>)
 8002742:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002746:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002748:	f7fe fa36 	bl	8000bb8 <HAL_GetTick>
 800274c:	63b8      	str	r0, [r7, #56]	; 0x38

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800274e:	e013      	b.n	8002778 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002750:	f7fe fa32 	bl	8000bb8 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d90c      	bls.n	8002778 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e107      	b.n	8002972 <HAL_RCC_OscConfig+0x4ba>
 8002762:	bf00      	nop
 8002764:	40023800 	.word	0x40023800
 8002768:	40023802 	.word	0x40023802
 800276c:	42470000 	.word	0x42470000
 8002770:	42470e80 	.word	0x42470e80
 8002774:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002778:	4b80      	ldr	r3, [pc, #512]	; (800297c <HAL_RCC_OscConfig+0x4c4>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0e5      	beq.n	8002750 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	4b7d      	ldr	r3, [pc, #500]	; (8002980 <HAL_RCC_OscConfig+0x4c8>)
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d015      	beq.n	80027c2 <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002796:	f7fe fa0f 	bl	8000bb8 <HAL_GetTick>
 800279a:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800279c:	e00a      	b.n	80027b4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800279e:	f7fe fa0b 	bl	8000bb8 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e0de      	b.n	8002972 <HAL_RCC_OscConfig+0x4ba>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027b4:	4b73      	ldr	r3, [pc, #460]	; (8002984 <HAL_RCC_OscConfig+0x4cc>)
 80027b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d0ee      	beq.n	800279e <HAL_RCC_OscConfig+0x2e6>
 80027c0:	e014      	b.n	80027ec <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027c2:	f7fe f9f9 	bl	8000bb8 <HAL_GetTick>
 80027c6:	63b8      	str	r0, [r7, #56]	; 0x38

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027c8:	e00a      	b.n	80027e0 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027ca:	f7fe f9f5 	bl	8000bb8 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d8:	4293      	cmp	r3, r2
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e0c8      	b.n	8002972 <HAL_RCC_OscConfig+0x4ba>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027e0:	4b68      	ldr	r3, [pc, #416]	; (8002984 <HAL_RCC_OscConfig+0x4cc>)
 80027e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d1ee      	bne.n	80027ca <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d105      	bne.n	8002800 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027f4:	4b63      	ldr	r3, [pc, #396]	; (8002984 <HAL_RCC_OscConfig+0x4cc>)
 80027f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f8:	4a62      	ldr	r2, [pc, #392]	; (8002984 <HAL_RCC_OscConfig+0x4cc>)
 80027fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	2b00      	cmp	r3, #0
 8002806:	f000 80b3 	beq.w	8002970 <HAL_RCC_OscConfig+0x4b8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800280a:	4b5e      	ldr	r3, [pc, #376]	; (8002984 <HAL_RCC_OscConfig+0x4cc>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 030c 	and.w	r3, r3, #12
 8002812:	2b08      	cmp	r3, #8
 8002814:	d07d      	beq.n	8002912 <HAL_RCC_OscConfig+0x45a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	2b02      	cmp	r3, #2
 800281c:	d162      	bne.n	80028e4 <HAL_RCC_OscConfig+0x42c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800281e:	4b5a      	ldr	r3, [pc, #360]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002824:	f7fe f9c8 	bl	8000bb8 <HAL_GetTick>
 8002828:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800282c:	f7fe f9c4 	bl	8000bb8 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b64      	cmp	r3, #100	; 0x64
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e099      	b.n	8002972 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800283e:	4b51      	ldr	r3, [pc, #324]	; (8002984 <HAL_RCC_OscConfig+0x4cc>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1f0      	bne.n	800282c <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                              | \
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	69da      	ldr	r2, [r3, #28]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	431a      	orrs	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002858:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 800285c:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285e:	6939      	ldr	r1, [r7, #16]
 8002860:	fa91 f1a1 	rbit	r1, r1
 8002864:	60f9      	str	r1, [r7, #12]
  return result;
 8002866:	68f9      	ldr	r1, [r7, #12]
 8002868:	fab1 f181 	clz	r1, r1
 800286c:	b2c9      	uxtb	r1, r1
 800286e:	408b      	lsls	r3, r1
 8002870:	431a      	orrs	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002876:	085b      	lsrs	r3, r3, #1
 8002878:	3b01      	subs	r3, #1
 800287a:	f44f 3140 	mov.w	r1, #196608	; 0x30000
 800287e:	61b9      	str	r1, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002880:	69b9      	ldr	r1, [r7, #24]
 8002882:	fa91 f1a1 	rbit	r1, r1
 8002886:	6179      	str	r1, [r7, #20]
  return result;
 8002888:	6979      	ldr	r1, [r7, #20]
 800288a:	fab1 f181 	clz	r1, r1
 800288e:	b2c9      	uxtb	r1, r1
 8002890:	408b      	lsls	r3, r1
 8002892:	431a      	orrs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002898:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 800289c:	6239      	str	r1, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289e:	6a39      	ldr	r1, [r7, #32]
 80028a0:	fa91 f1a1 	rbit	r1, r1
 80028a4:	61f9      	str	r1, [r7, #28]
  return result;
 80028a6:	69f9      	ldr	r1, [r7, #28]
 80028a8:	fab1 f181 	clz	r1, r1
 80028ac:	b2c9      	uxtb	r1, r1
 80028ae:	408b      	lsls	r3, r1
 80028b0:	4934      	ldr	r1, [pc, #208]	; (8002984 <HAL_RCC_OscConfig+0x4cc>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	604b      	str	r3, [r1, #4]
                                RCC_OscInitStruct->PLL.PLLM                                                    | \
                                (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))                | \
                                (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028b6:	4b34      	ldr	r3, [pc, #208]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 80028b8:	2201      	movs	r2, #1
 80028ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028bc:	f7fe f97c 	bl	8000bb8 <HAL_GetTick>
 80028c0:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x41e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c4:	f7fe f978 	bl	8000bb8 <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b64      	cmp	r3, #100	; 0x64
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x41e>
          {
            return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e04d      	b.n	8002972 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028d6:	4b2b      	ldr	r3, [pc, #172]	; (8002984 <HAL_RCC_OscConfig+0x4cc>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d0f0      	beq.n	80028c4 <HAL_RCC_OscConfig+0x40c>
 80028e2:	e045      	b.n	8002970 <HAL_RCC_OscConfig+0x4b8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e4:	4b28      	ldr	r3, [pc, #160]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ea:	f7fe f965 	bl	8000bb8 <HAL_GetTick>
 80028ee:	63b8      	str	r0, [r7, #56]	; 0x38

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028f0:	e008      	b.n	8002904 <HAL_RCC_OscConfig+0x44c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028f2:	f7fe f961 	bl	8000bb8 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b64      	cmp	r3, #100	; 0x64
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x44c>
          {
            return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e036      	b.n	8002972 <HAL_RCC_OscConfig+0x4ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002904:	4b1f      	ldr	r3, [pc, #124]	; (8002984 <HAL_RCC_OscConfig+0x4cc>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1f0      	bne.n	80028f2 <HAL_RCC_OscConfig+0x43a>
 8002910:	e02e      	b.n	8002970 <HAL_RCC_OscConfig+0x4b8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d101      	bne.n	800291e <HAL_RCC_OscConfig+0x466>
      {
        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e029      	b.n	8002972 <HAL_RCC_OscConfig+0x4ba>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 800291e:	4b19      	ldr	r3, [pc, #100]	; (8002984 <HAL_RCC_OscConfig+0x4cc>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	637b      	str	r3, [r7, #52]	; 0x34
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002926:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	429a      	cmp	r2, r3
 8002930:	d11c      	bne.n	800296c <HAL_RCC_OscConfig+0x4b4>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002934:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800293c:	429a      	cmp	r2, r3
 800293e:	d115      	bne.n	800296c <HAL_RCC_OscConfig+0x4b4>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002942:	099b      	lsrs	r3, r3, #6
 8002944:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800294c:	429a      	cmp	r2, r3
 800294e:	d10d      	bne.n	800296c <HAL_RCC_OscConfig+0x4b4>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002952:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800295a:	429a      	cmp	r2, r3
 800295c:	d106      	bne.n	800296c <HAL_RCC_OscConfig+0x4b4>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800295e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002960:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002968:	429a      	cmp	r2, r3
 800296a:	d001      	beq.n	8002970 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e000      	b.n	8002972 <HAL_RCC_OscConfig+0x4ba>
        }
      }
    }
  }
  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	4618      	mov	r0, r3
 8002974:	3740      	adds	r7, #64	; 0x40
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40007000 	.word	0x40007000
 8002980:	40023870 	.word	0x40023870
 8002984:	40023800 	.word	0x40023800
 8002988:	42470060 	.word	0x42470060

0800298c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d101      	bne.n	80029a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e0d2      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029a0:	4b6b      	ldr	r3, [pc, #428]	; (8002b50 <HAL_RCC_ClockConfig+0x1c4>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 030f 	and.w	r3, r3, #15
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d90c      	bls.n	80029c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ae:	4b68      	ldr	r3, [pc, #416]	; (8002b50 <HAL_RCC_ClockConfig+0x1c4>)
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	b2d2      	uxtb	r2, r2
 80029b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029b6:	4b66      	ldr	r3, [pc, #408]	; (8002b50 <HAL_RCC_ClockConfig+0x1c4>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 030f 	and.w	r3, r3, #15
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d001      	beq.n	80029c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e0be      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0302 	and.w	r3, r3, #2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d020      	beq.n	8002a16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d005      	beq.n	80029ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029e0:	4b5c      	ldr	r3, [pc, #368]	; (8002b54 <HAL_RCC_ClockConfig+0x1c8>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	4a5b      	ldr	r2, [pc, #364]	; (8002b54 <HAL_RCC_ClockConfig+0x1c8>)
 80029e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0308 	and.w	r3, r3, #8
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d005      	beq.n	8002a04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 80029f8:	4b56      	ldr	r3, [pc, #344]	; (8002b54 <HAL_RCC_ClockConfig+0x1c8>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	4a55      	ldr	r2, [pc, #340]	; (8002b54 <HAL_RCC_ClockConfig+0x1c8>)
 80029fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a02:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a04:	4b53      	ldr	r3, [pc, #332]	; (8002b54 <HAL_RCC_ClockConfig+0x1c8>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	4950      	ldr	r1, [pc, #320]	; (8002b54 <HAL_RCC_ClockConfig+0x1c8>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d040      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d107      	bne.n	8002a3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a2a:	4b4a      	ldr	r3, [pc, #296]	; (8002b54 <HAL_RCC_ClockConfig+0x1c8>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d115      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e085      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d107      	bne.n	8002a52 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a42:	4b44      	ldr	r3, [pc, #272]	; (8002b54 <HAL_RCC_ClockConfig+0x1c8>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d109      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e079      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a52:	4b40      	ldr	r3, [pc, #256]	; (8002b54 <HAL_RCC_ClockConfig+0x1c8>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e071      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a62:	4b3c      	ldr	r3, [pc, #240]	; (8002b54 <HAL_RCC_ClockConfig+0x1c8>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f023 0203 	bic.w	r2, r3, #3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	4939      	ldr	r1, [pc, #228]	; (8002b54 <HAL_RCC_ClockConfig+0x1c8>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a74:	f7fe f8a0 	bl	8000bb8 <HAL_GetTick>
 8002a78:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a7a:	e00a      	b.n	8002a92 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a7c:	f7fe f89c 	bl	8000bb8 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e059      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a92:	4b30      	ldr	r3, [pc, #192]	; (8002b54 <HAL_RCC_ClockConfig+0x1c8>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 020c 	and.w	r2, r3, #12
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d1eb      	bne.n	8002a7c <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002aa4:	4b2a      	ldr	r3, [pc, #168]	; (8002b50 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 030f 	and.w	r3, r3, #15
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d20c      	bcs.n	8002acc <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab2:	4b27      	ldr	r3, [pc, #156]	; (8002b50 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab4:	683a      	ldr	r2, [r7, #0]
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aba:	4b25      	ldr	r3, [pc, #148]	; (8002b50 <HAL_RCC_ClockConfig+0x1c4>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 030f 	and.w	r3, r3, #15
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d001      	beq.n	8002acc <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e03c      	b.n	8002b46 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d008      	beq.n	8002aea <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ad8:	4b1e      	ldr	r3, [pc, #120]	; (8002b54 <HAL_RCC_ClockConfig+0x1c8>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	491b      	ldr	r1, [pc, #108]	; (8002b54 <HAL_RCC_ClockConfig+0x1c8>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0308 	and.w	r3, r3, #8
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d009      	beq.n	8002b0a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002af6:	4b17      	ldr	r3, [pc, #92]	; (8002b54 <HAL_RCC_ClockConfig+0x1c8>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	4913      	ldr	r1, [pc, #76]	; (8002b54 <HAL_RCC_ClockConfig+0x1c8>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8002b0a:	f000 f82b 	bl	8002b64 <HAL_RCC_GetSysClockFreq>
 8002b0e:	4601      	mov	r1, r0
 8002b10:	4b10      	ldr	r3, [pc, #64]	; (8002b54 <HAL_RCC_ClockConfig+0x1c8>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b18:	22f0      	movs	r2, #240	; 0xf0
 8002b1a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	fa92 f2a2 	rbit	r2, r2
 8002b22:	60fa      	str	r2, [r7, #12]
  return result;
 8002b24:	68fa      	ldr	r2, [r7, #12]
 8002b26:	fab2 f282 	clz	r2, r2
 8002b2a:	b2d2      	uxtb	r2, r2
 8002b2c:	40d3      	lsrs	r3, r2
 8002b2e:	4a0a      	ldr	r2, [pc, #40]	; (8002b58 <HAL_RCC_ClockConfig+0x1cc>)
 8002b30:	5cd3      	ldrb	r3, [r2, r3]
 8002b32:	fa21 f303 	lsr.w	r3, r1, r3
 8002b36:	4a09      	ldr	r2, [pc, #36]	; (8002b5c <HAL_RCC_ClockConfig+0x1d0>)
 8002b38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b3a:	4b09      	ldr	r3, [pc, #36]	; (8002b60 <HAL_RCC_ClockConfig+0x1d4>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7fd fff8 	bl	8000b34 <HAL_InitTick>

  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3718      	adds	r7, #24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40023c00 	.word	0x40023c00
 8002b54:	40023800 	.word	0x40023800
 8002b58:	08011544 	.word	0x08011544
 8002b5c:	20000000 	.word	0x20000000
 8002b60:	20000004 	.word	0x20000004

08002b64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	607b      	str	r3, [r7, #4]
 8002b6e:	2300      	movs	r3, #0
 8002b70:	60fb      	str	r3, [r7, #12]
 8002b72:	2300      	movs	r3, #0
 8002b74:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002b76:	2300      	movs	r3, #0
 8002b78:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b7a:	4b63      	ldr	r3, [pc, #396]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 030c 	and.w	r3, r3, #12
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	d007      	beq.n	8002b96 <HAL_RCC_GetSysClockFreq+0x32>
 8002b86:	2b08      	cmp	r3, #8
 8002b88:	d008      	beq.n	8002b9c <HAL_RCC_GetSysClockFreq+0x38>
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f040 80b4 	bne.w	8002cf8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b90:	4b5e      	ldr	r3, [pc, #376]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002b92:	60bb      	str	r3, [r7, #8]
       break;
 8002b94:	e0b3      	b.n	8002cfe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b96:	4b5e      	ldr	r3, [pc, #376]	; (8002d10 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002b98:	60bb      	str	r3, [r7, #8]
      break;
 8002b9a:	e0b0      	b.n	8002cfe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b9c:	4b5a      	ldr	r3, [pc, #360]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ba4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ba6:	4b58      	ldr	r3, [pc, #352]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d04a      	beq.n	8002c48 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bb2:	4b55      	ldr	r3, [pc, #340]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	099b      	lsrs	r3, r3, #6
 8002bb8:	f04f 0400 	mov.w	r4, #0
 8002bbc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002bc0:	f04f 0200 	mov.w	r2, #0
 8002bc4:	ea03 0501 	and.w	r5, r3, r1
 8002bc8:	ea04 0602 	and.w	r6, r4, r2
 8002bcc:	4629      	mov	r1, r5
 8002bce:	4632      	mov	r2, r6
 8002bd0:	f04f 0300 	mov.w	r3, #0
 8002bd4:	f04f 0400 	mov.w	r4, #0
 8002bd8:	0154      	lsls	r4, r2, #5
 8002bda:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002bde:	014b      	lsls	r3, r1, #5
 8002be0:	4619      	mov	r1, r3
 8002be2:	4622      	mov	r2, r4
 8002be4:	1b49      	subs	r1, r1, r5
 8002be6:	eb62 0206 	sbc.w	r2, r2, r6
 8002bea:	f04f 0300 	mov.w	r3, #0
 8002bee:	f04f 0400 	mov.w	r4, #0
 8002bf2:	0194      	lsls	r4, r2, #6
 8002bf4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002bf8:	018b      	lsls	r3, r1, #6
 8002bfa:	1a5b      	subs	r3, r3, r1
 8002bfc:	eb64 0402 	sbc.w	r4, r4, r2
 8002c00:	f04f 0100 	mov.w	r1, #0
 8002c04:	f04f 0200 	mov.w	r2, #0
 8002c08:	00e2      	lsls	r2, r4, #3
 8002c0a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c0e:	00d9      	lsls	r1, r3, #3
 8002c10:	460b      	mov	r3, r1
 8002c12:	4614      	mov	r4, r2
 8002c14:	195b      	adds	r3, r3, r5
 8002c16:	eb44 0406 	adc.w	r4, r4, r6
 8002c1a:	f04f 0100 	mov.w	r1, #0
 8002c1e:	f04f 0200 	mov.w	r2, #0
 8002c22:	0262      	lsls	r2, r4, #9
 8002c24:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002c28:	0259      	lsls	r1, r3, #9
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	4614      	mov	r4, r2
 8002c2e:	4618      	mov	r0, r3
 8002c30:	4621      	mov	r1, r4
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f04f 0400 	mov.w	r4, #0
 8002c38:	461a      	mov	r2, r3
 8002c3a:	4623      	mov	r3, r4
 8002c3c:	f7fd fac2 	bl	80001c4 <__aeabi_uldivmod>
 8002c40:	4603      	mov	r3, r0
 8002c42:	460c      	mov	r4, r1
 8002c44:	60fb      	str	r3, [r7, #12]
 8002c46:	e049      	b.n	8002cdc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c48:	4b2f      	ldr	r3, [pc, #188]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	099b      	lsrs	r3, r3, #6
 8002c4e:	f04f 0400 	mov.w	r4, #0
 8002c52:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c56:	f04f 0200 	mov.w	r2, #0
 8002c5a:	ea03 0501 	and.w	r5, r3, r1
 8002c5e:	ea04 0602 	and.w	r6, r4, r2
 8002c62:	4629      	mov	r1, r5
 8002c64:	4632      	mov	r2, r6
 8002c66:	f04f 0300 	mov.w	r3, #0
 8002c6a:	f04f 0400 	mov.w	r4, #0
 8002c6e:	0154      	lsls	r4, r2, #5
 8002c70:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c74:	014b      	lsls	r3, r1, #5
 8002c76:	4619      	mov	r1, r3
 8002c78:	4622      	mov	r2, r4
 8002c7a:	1b49      	subs	r1, r1, r5
 8002c7c:	eb62 0206 	sbc.w	r2, r2, r6
 8002c80:	f04f 0300 	mov.w	r3, #0
 8002c84:	f04f 0400 	mov.w	r4, #0
 8002c88:	0194      	lsls	r4, r2, #6
 8002c8a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c8e:	018b      	lsls	r3, r1, #6
 8002c90:	1a5b      	subs	r3, r3, r1
 8002c92:	eb64 0402 	sbc.w	r4, r4, r2
 8002c96:	f04f 0100 	mov.w	r1, #0
 8002c9a:	f04f 0200 	mov.w	r2, #0
 8002c9e:	00e2      	lsls	r2, r4, #3
 8002ca0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002ca4:	00d9      	lsls	r1, r3, #3
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	4614      	mov	r4, r2
 8002caa:	195b      	adds	r3, r3, r5
 8002cac:	eb44 0406 	adc.w	r4, r4, r6
 8002cb0:	f04f 0100 	mov.w	r1, #0
 8002cb4:	f04f 0200 	mov.w	r2, #0
 8002cb8:	02a2      	lsls	r2, r4, #10
 8002cba:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002cbe:	0299      	lsls	r1, r3, #10
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	4614      	mov	r4, r2
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	4621      	mov	r1, r4
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f04f 0400 	mov.w	r4, #0
 8002cce:	461a      	mov	r2, r3
 8002cd0:	4623      	mov	r3, r4
 8002cd2:	f7fd fa77 	bl	80001c4 <__aeabi_uldivmod>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	460c      	mov	r4, r1
 8002cda:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cdc:	4b0a      	ldr	r3, [pc, #40]	; (8002d08 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	0c1b      	lsrs	r3, r3, #16
 8002ce2:	f003 0303 	and.w	r3, r3, #3
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf4:	60bb      	str	r3, [r7, #8]
      break;
 8002cf6:	e002      	b.n	8002cfe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cf8:	4b04      	ldr	r3, [pc, #16]	; (8002d0c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002cfa:	60bb      	str	r3, [r7, #8]
      break;
 8002cfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cfe:	68bb      	ldr	r3, [r7, #8]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3714      	adds	r7, #20
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d08:	40023800 	.word	0x40023800
 8002d0c:	00f42400 	.word	0x00f42400
 8002d10:	007a1200 	.word	0x007a1200

08002d14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d18:	4b02      	ldr	r3, [pc, #8]	; (8002d24 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr
 8002d24:	20000000 	.word	0x20000000

08002d28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8002d2e:	f7ff fff1 	bl	8002d14 <HAL_RCC_GetHCLKFreq>
 8002d32:	4601      	mov	r1, r0
 8002d34:	4b0b      	ldr	r3, [pc, #44]	; (8002d64 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002d3c:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8002d40:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	fa92 f2a2 	rbit	r2, r2
 8002d48:	603a      	str	r2, [r7, #0]
  return result;
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	fab2 f282 	clz	r2, r2
 8002d50:	b2d2      	uxtb	r2, r2
 8002d52:	40d3      	lsrs	r3, r2
 8002d54:	4a04      	ldr	r2, [pc, #16]	; (8002d68 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002d56:	5cd3      	ldrb	r3, [r2, r3]
 8002d58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3708      	adds	r7, #8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	40023800 	.word	0x40023800
 8002d68:	08011554 	.word	0x08011554

08002d6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8002d72:	f7ff ffcf 	bl	8002d14 <HAL_RCC_GetHCLKFreq>
 8002d76:	4601      	mov	r1, r0
 8002d78:	4b0b      	ldr	r3, [pc, #44]	; (8002da8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002d80:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8002d84:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	fa92 f2a2 	rbit	r2, r2
 8002d8c:	603a      	str	r2, [r7, #0]
  return result;
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	fab2 f282 	clz	r2, r2
 8002d94:	b2d2      	uxtb	r2, r2
 8002d96:	40d3      	lsrs	r3, r2
 8002d98:	4a04      	ldr	r2, [pc, #16]	; (8002dac <HAL_RCC_GetPCLK2Freq+0x40>)
 8002d9a:	5cd3      	ldrb	r3, [r2, r3]
 8002d9c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40023800 	.word	0x40023800
 8002dac:	08011554 	.word	0x08011554

08002db0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e03f      	b.n	8002e42 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d106      	bne.n	8002ddc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7fd fe18 	bl	8000a0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2224      	movs	r2, #36	; 0x24
 8002de0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68da      	ldr	r2, [r3, #12]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002df2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 f829 	bl	8002e4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	691a      	ldr	r2, [r3, #16]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	695a      	ldr	r2, [r3, #20]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68da      	ldr	r2, [r3, #12]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2220      	movs	r2, #32
 8002e34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
	...

08002e4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	68da      	ldr	r2, [r3, #12]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689a      	ldr	r2, [r3, #8]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	431a      	orrs	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	695b      	ldr	r3, [r3, #20]
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002e8c:	f023 030c 	bic.w	r3, r3, #12
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	6812      	ldr	r2, [r2, #0]
 8002e94:	68f9      	ldr	r1, [r7, #12]
 8002e96:	430b      	orrs	r3, r1
 8002e98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	699a      	ldr	r2, [r3, #24]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	615a      	str	r2, [r3, #20]

/* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	69db      	ldr	r3, [r3, #28]
 8002eb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eb8:	f040 80aa 	bne.w	8003010 <UART_SetConfig+0x1c4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4aa9      	ldr	r2, [pc, #676]	; (8003168 <UART_SetConfig+0x31c>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d004      	beq.n	8002ed0 <UART_SetConfig+0x84>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4aa8      	ldr	r2, [pc, #672]	; (800316c <UART_SetConfig+0x320>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d14f      	bne.n	8002f70 <UART_SetConfig+0x124>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ed0:	f7ff ff4c 	bl	8002d6c <HAL_RCC_GetPCLK2Freq>
 8002ed4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	009a      	lsls	r2, r3, #2
 8002ee0:	441a      	add	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eec:	4aa0      	ldr	r2, [pc, #640]	; (8003170 <UART_SetConfig+0x324>)
 8002eee:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef2:	095b      	lsrs	r3, r3, #5
 8002ef4:	0119      	lsls	r1, r3, #4
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4413      	add	r3, r2
 8002efe:	009a      	lsls	r2, r3, #2
 8002f00:	441a      	add	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f0c:	4b98      	ldr	r3, [pc, #608]	; (8003170 <UART_SetConfig+0x324>)
 8002f0e:	fba3 0302 	umull	r0, r3, r3, r2
 8002f12:	095b      	lsrs	r3, r3, #5
 8002f14:	2064      	movs	r0, #100	; 0x64
 8002f16:	fb00 f303 	mul.w	r3, r0, r3
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	00db      	lsls	r3, r3, #3
 8002f1e:	3332      	adds	r3, #50	; 0x32
 8002f20:	4a93      	ldr	r2, [pc, #588]	; (8003170 <UART_SetConfig+0x324>)
 8002f22:	fba2 2303 	umull	r2, r3, r2, r3
 8002f26:	095b      	lsrs	r3, r3, #5
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002f2e:	4419      	add	r1, r3
 8002f30:	68ba      	ldr	r2, [r7, #8]
 8002f32:	4613      	mov	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4413      	add	r3, r2
 8002f38:	009a      	lsls	r2, r3, #2
 8002f3a:	441a      	add	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f46:	4b8a      	ldr	r3, [pc, #552]	; (8003170 <UART_SetConfig+0x324>)
 8002f48:	fba3 0302 	umull	r0, r3, r3, r2
 8002f4c:	095b      	lsrs	r3, r3, #5
 8002f4e:	2064      	movs	r0, #100	; 0x64
 8002f50:	fb00 f303 	mul.w	r3, r0, r3
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	3332      	adds	r3, #50	; 0x32
 8002f5a:	4a85      	ldr	r2, [pc, #532]	; (8003170 <UART_SetConfig+0x324>)
 8002f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f60:	095b      	lsrs	r3, r3, #5
 8002f62:	f003 0207 	and.w	r2, r3, #7
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	440a      	add	r2, r1
 8002f6c:	609a      	str	r2, [r3, #8]
 8002f6e:	e0f7      	b.n	8003160 <UART_SetConfig+0x314>
    }
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f70:	f7ff feda 	bl	8002d28 <HAL_RCC_GetPCLK1Freq>
 8002f74:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f76:	68ba      	ldr	r2, [r7, #8]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	4413      	add	r3, r2
 8002f7e:	009a      	lsls	r2, r3, #2
 8002f80:	441a      	add	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f8c:	4a78      	ldr	r2, [pc, #480]	; (8003170 <UART_SetConfig+0x324>)
 8002f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f92:	095b      	lsrs	r3, r3, #5
 8002f94:	0119      	lsls	r1, r3, #4
 8002f96:	68ba      	ldr	r2, [r7, #8]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	4413      	add	r3, r2
 8002f9e:	009a      	lsls	r2, r3, #2
 8002fa0:	441a      	add	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fac:	4b70      	ldr	r3, [pc, #448]	; (8003170 <UART_SetConfig+0x324>)
 8002fae:	fba3 0302 	umull	r0, r3, r3, r2
 8002fb2:	095b      	lsrs	r3, r3, #5
 8002fb4:	2064      	movs	r0, #100	; 0x64
 8002fb6:	fb00 f303 	mul.w	r3, r0, r3
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	3332      	adds	r3, #50	; 0x32
 8002fc0:	4a6b      	ldr	r2, [pc, #428]	; (8003170 <UART_SetConfig+0x324>)
 8002fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc6:	095b      	lsrs	r3, r3, #5
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002fce:	4419      	add	r1, r3
 8002fd0:	68ba      	ldr	r2, [r7, #8]
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4413      	add	r3, r2
 8002fd8:	009a      	lsls	r2, r3, #2
 8002fda:	441a      	add	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fe6:	4b62      	ldr	r3, [pc, #392]	; (8003170 <UART_SetConfig+0x324>)
 8002fe8:	fba3 0302 	umull	r0, r3, r3, r2
 8002fec:	095b      	lsrs	r3, r3, #5
 8002fee:	2064      	movs	r0, #100	; 0x64
 8002ff0:	fb00 f303 	mul.w	r3, r0, r3
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	00db      	lsls	r3, r3, #3
 8002ff8:	3332      	adds	r3, #50	; 0x32
 8002ffa:	4a5d      	ldr	r2, [pc, #372]	; (8003170 <UART_SetConfig+0x324>)
 8002ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8003000:	095b      	lsrs	r3, r3, #5
 8003002:	f003 0207 	and.w	r2, r3, #7
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	440a      	add	r2, r1
 800300c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800300e:	e0a7      	b.n	8003160 <UART_SetConfig+0x314>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a54      	ldr	r2, [pc, #336]	; (8003168 <UART_SetConfig+0x31c>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d004      	beq.n	8003024 <UART_SetConfig+0x1d8>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a53      	ldr	r2, [pc, #332]	; (800316c <UART_SetConfig+0x320>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d14e      	bne.n	80030c2 <UART_SetConfig+0x276>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003024:	f7ff fea2 	bl	8002d6c <HAL_RCC_GetPCLK2Freq>
 8003028:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	4613      	mov	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	4413      	add	r3, r2
 8003032:	009a      	lsls	r2, r3, #2
 8003034:	441a      	add	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003040:	4a4b      	ldr	r2, [pc, #300]	; (8003170 <UART_SetConfig+0x324>)
 8003042:	fba2 2303 	umull	r2, r3, r2, r3
 8003046:	095b      	lsrs	r3, r3, #5
 8003048:	0119      	lsls	r1, r3, #4
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	4613      	mov	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4413      	add	r3, r2
 8003052:	009a      	lsls	r2, r3, #2
 8003054:	441a      	add	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003060:	4b43      	ldr	r3, [pc, #268]	; (8003170 <UART_SetConfig+0x324>)
 8003062:	fba3 0302 	umull	r0, r3, r3, r2
 8003066:	095b      	lsrs	r3, r3, #5
 8003068:	2064      	movs	r0, #100	; 0x64
 800306a:	fb00 f303 	mul.w	r3, r0, r3
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	011b      	lsls	r3, r3, #4
 8003072:	3332      	adds	r3, #50	; 0x32
 8003074:	4a3e      	ldr	r2, [pc, #248]	; (8003170 <UART_SetConfig+0x324>)
 8003076:	fba2 2303 	umull	r2, r3, r2, r3
 800307a:	095b      	lsrs	r3, r3, #5
 800307c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003080:	4419      	add	r1, r3
 8003082:	68ba      	ldr	r2, [r7, #8]
 8003084:	4613      	mov	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	009a      	lsls	r2, r3, #2
 800308c:	441a      	add	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	fbb2 f2f3 	udiv	r2, r2, r3
 8003098:	4b35      	ldr	r3, [pc, #212]	; (8003170 <UART_SetConfig+0x324>)
 800309a:	fba3 0302 	umull	r0, r3, r3, r2
 800309e:	095b      	lsrs	r3, r3, #5
 80030a0:	2064      	movs	r0, #100	; 0x64
 80030a2:	fb00 f303 	mul.w	r3, r0, r3
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	011b      	lsls	r3, r3, #4
 80030aa:	3332      	adds	r3, #50	; 0x32
 80030ac:	4a30      	ldr	r2, [pc, #192]	; (8003170 <UART_SetConfig+0x324>)
 80030ae:	fba2 2303 	umull	r2, r3, r2, r3
 80030b2:	095b      	lsrs	r3, r3, #5
 80030b4:	f003 020f 	and.w	r2, r3, #15
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	440a      	add	r2, r1
 80030be:	609a      	str	r2, [r3, #8]
 80030c0:	e04e      	b.n	8003160 <UART_SetConfig+0x314>
      pclk = HAL_RCC_GetPCLK1Freq();
 80030c2:	f7ff fe31 	bl	8002d28 <HAL_RCC_GetPCLK1Freq>
 80030c6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030c8:	68ba      	ldr	r2, [r7, #8]
 80030ca:	4613      	mov	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4413      	add	r3, r2
 80030d0:	009a      	lsls	r2, r3, #2
 80030d2:	441a      	add	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	fbb2 f3f3 	udiv	r3, r2, r3
 80030de:	4a24      	ldr	r2, [pc, #144]	; (8003170 <UART_SetConfig+0x324>)
 80030e0:	fba2 2303 	umull	r2, r3, r2, r3
 80030e4:	095b      	lsrs	r3, r3, #5
 80030e6:	0119      	lsls	r1, r3, #4
 80030e8:	68ba      	ldr	r2, [r7, #8]
 80030ea:	4613      	mov	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4413      	add	r3, r2
 80030f0:	009a      	lsls	r2, r3, #2
 80030f2:	441a      	add	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80030fe:	4b1c      	ldr	r3, [pc, #112]	; (8003170 <UART_SetConfig+0x324>)
 8003100:	fba3 0302 	umull	r0, r3, r3, r2
 8003104:	095b      	lsrs	r3, r3, #5
 8003106:	2064      	movs	r0, #100	; 0x64
 8003108:	fb00 f303 	mul.w	r3, r0, r3
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	011b      	lsls	r3, r3, #4
 8003110:	3332      	adds	r3, #50	; 0x32
 8003112:	4a17      	ldr	r2, [pc, #92]	; (8003170 <UART_SetConfig+0x324>)
 8003114:	fba2 2303 	umull	r2, r3, r2, r3
 8003118:	095b      	lsrs	r3, r3, #5
 800311a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800311e:	4419      	add	r1, r3
 8003120:	68ba      	ldr	r2, [r7, #8]
 8003122:	4613      	mov	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	4413      	add	r3, r2
 8003128:	009a      	lsls	r2, r3, #2
 800312a:	441a      	add	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	fbb2 f2f3 	udiv	r2, r2, r3
 8003136:	4b0e      	ldr	r3, [pc, #56]	; (8003170 <UART_SetConfig+0x324>)
 8003138:	fba3 0302 	umull	r0, r3, r3, r2
 800313c:	095b      	lsrs	r3, r3, #5
 800313e:	2064      	movs	r0, #100	; 0x64
 8003140:	fb00 f303 	mul.w	r3, r0, r3
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	011b      	lsls	r3, r3, #4
 8003148:	3332      	adds	r3, #50	; 0x32
 800314a:	4a09      	ldr	r2, [pc, #36]	; (8003170 <UART_SetConfig+0x324>)
 800314c:	fba2 2303 	umull	r2, r3, r2, r3
 8003150:	095b      	lsrs	r3, r3, #5
 8003152:	f003 020f 	and.w	r2, r3, #15
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	440a      	add	r2, r1
 800315c:	609a      	str	r2, [r3, #8]
}
 800315e:	e7ff      	b.n	8003160 <UART_SetConfig+0x314>
 8003160:	bf00      	nop
 8003162:	3710      	adds	r7, #16
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	40011000 	.word	0x40011000
 800316c:	40011400 	.word	0x40011400
 8003170:	51eb851f 	.word	0x51eb851f

08003174 <MX_LWIP_Init>:

/**
 * LwIP initialization function
 */
void MX_LWIP_Init(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af04      	add	r7, sp, #16
	/* Initilialize the LwIP stack without RTOS */
	lwip_init();
 800317a:	f000 fc6c 	bl	8003a56 <lwip_init>

	/* IP addresses initialization with DHCP (IPv4) */
	ipaddr.addr = 0;
 800317e:	4b19      	ldr	r3, [pc, #100]	; (80031e4 <MX_LWIP_Init+0x70>)
 8003180:	2200      	movs	r2, #0
 8003182:	601a      	str	r2, [r3, #0]
	netmask.addr = 0;
 8003184:	4b18      	ldr	r3, [pc, #96]	; (80031e8 <MX_LWIP_Init+0x74>)
 8003186:	2200      	movs	r2, #0
 8003188:	601a      	str	r2, [r3, #0]
	gw.addr = 0;
 800318a:	4b18      	ldr	r3, [pc, #96]	; (80031ec <MX_LWIP_Init+0x78>)
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]

	/* add the network interface (IPv4/IPv6) without RTOS */
	netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init,
 8003190:	4b17      	ldr	r3, [pc, #92]	; (80031f0 <MX_LWIP_Init+0x7c>)
 8003192:	9302      	str	r3, [sp, #8]
 8003194:	4b17      	ldr	r3, [pc, #92]	; (80031f4 <MX_LWIP_Init+0x80>)
 8003196:	9301      	str	r3, [sp, #4]
 8003198:	2300      	movs	r3, #0
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	4b13      	ldr	r3, [pc, #76]	; (80031ec <MX_LWIP_Init+0x78>)
 800319e:	4a12      	ldr	r2, [pc, #72]	; (80031e8 <MX_LWIP_Init+0x74>)
 80031a0:	4910      	ldr	r1, [pc, #64]	; (80031e4 <MX_LWIP_Init+0x70>)
 80031a2:	4815      	ldr	r0, [pc, #84]	; (80031f8 <MX_LWIP_Init+0x84>)
 80031a4:	f001 f856 	bl	8004254 <netif_add>
			&ethernet_input);

	/* Registers the default network interface */
	netif_set_default(&gnetif);
 80031a8:	4813      	ldr	r0, [pc, #76]	; (80031f8 <MX_LWIP_Init+0x84>)
 80031aa:	f001 f93b 	bl	8004424 <netif_set_default>

	if (netif_is_link_up(&gnetif))
 80031ae:	4b12      	ldr	r3, [pc, #72]	; (80031f8 <MX_LWIP_Init+0x84>)
 80031b0:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80031b4:	089b      	lsrs	r3, r3, #2
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d003      	beq.n	80031c8 <MX_LWIP_Init+0x54>
	{
		/* When the netif is fully configured this function must be called */
		netif_set_up(&gnetif);
 80031c0:	480d      	ldr	r0, [pc, #52]	; (80031f8 <MX_LWIP_Init+0x84>)
 80031c2:	f001 f93d 	bl	8004440 <netif_set_up>
 80031c6:	e002      	b.n	80031ce <MX_LWIP_Init+0x5a>
	}
	else
	{
		/* When the netif link is down this function must be called */
		netif_set_down(&gnetif);
 80031c8:	480b      	ldr	r0, [pc, #44]	; (80031f8 <MX_LWIP_Init+0x84>)
 80031ca:	f001 f97d 	bl	80044c8 <netif_set_down>
	}

	/* Set the link callback function, this function is called on change of link status*/
	netif_set_link_callback(&gnetif, ethernetif_update_config);
 80031ce:	490b      	ldr	r1, [pc, #44]	; (80031fc <MX_LWIP_Init+0x88>)
 80031d0:	4809      	ldr	r0, [pc, #36]	; (80031f8 <MX_LWIP_Init+0x84>)
 80031d2:	f001 f9e9 	bl	80045a8 <netif_set_link_callback>

	/* Create the Ethernet link handler thread */

	/* Start DHCP negotiation for a network interface (IPv4) */
	dhcp_start(&gnetif);
 80031d6:	4808      	ldr	r0, [pc, #32]	; (80031f8 <MX_LWIP_Init+0x84>)
 80031d8:	f007 fb64 	bl	800a8a4 <dhcp_start>

	/* USER CODE BEGIN 3 */

	/* USER CODE END 3 */
}
 80031dc:	bf00      	nop
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	200002a0 	.word	0x200002a0
 80031e8:	200002a4 	.word	0x200002a4
 80031ec:	200002a8 	.word	0x200002a8
 80031f0:	0800e2dd 	.word	0x0800e2dd
 80031f4:	08003821 	.word	0x08003821
 80031f8:	20000268 	.word	0x20000268
 80031fc:	08003915 	.word	0x08003915

08003200 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 4_1 */
	/* USER CODE END 4_1 */
	ethernetif_input(&gnetif);
 8003204:	480f      	ldr	r0, [pc, #60]	; (8003244 <MX_LWIP_Process+0x44>)
 8003206:	f000 faeb 	bl	80037e0 <ethernetif_input>

	/* USER CODE BEGIN 4_2 */
	/* USER CODE END 4_2 */
	/* Handle timeouts */
	sys_check_timeouts();
 800320a:	f006 fc4f 	bl	8009aac <sys_check_timeouts>

	/* USER CODE BEGIN 4_3 */
	ethernetif_set_link(&gnetif);
 800320e:	480d      	ldr	r0, [pc, #52]	; (8003244 <MX_LWIP_Process+0x44>)
 8003210:	f000 fb3c 	bl	800388c <ethernetif_set_link>
	if (netif_is_link_up(&gnetif) && !netif_is_up(&gnetif))
 8003214:	4b0b      	ldr	r3, [pc, #44]	; (8003244 <MX_LWIP_Process+0x44>)
 8003216:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800321a:	089b      	lsrs	r3, r3, #2
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00c      	beq.n	8003240 <MX_LWIP_Process+0x40>
 8003226:	4b07      	ldr	r3, [pc, #28]	; (8003244 <MX_LWIP_Process+0x44>)
 8003228:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	2b00      	cmp	r3, #0
 8003232:	d105      	bne.n	8003240 <MX_LWIP_Process+0x40>
	{
		netif_set_up(&gnetif);
 8003234:	4803      	ldr	r0, [pc, #12]	; (8003244 <MX_LWIP_Process+0x44>)
 8003236:	f001 f903 	bl	8004440 <netif_set_up>
		dhcp_start(&gnetif);
 800323a:	4802      	ldr	r0, [pc, #8]	; (8003244 <MX_LWIP_Process+0x44>)
 800323c:	f007 fb32 	bl	800a8a4 <dhcp_start>
	}

	/* USER CODE END 4_3 */
}
 8003240:	bf00      	nop
 8003242:	bd80      	pop	{r7, pc}
 8003244:	20000268 	.word	0x20000268

08003248 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b08e      	sub	sp, #56	; 0x38
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003250:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003254:	2200      	movs	r2, #0
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	605a      	str	r2, [r3, #4]
 800325a:	609a      	str	r2, [r3, #8]
 800325c:	60da      	str	r2, [r3, #12]
 800325e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a5d      	ldr	r2, [pc, #372]	; (80033dc <HAL_ETH_MspInit+0x194>)
 8003266:	4293      	cmp	r3, r2
 8003268:	f040 80b4 	bne.w	80033d4 <HAL_ETH_MspInit+0x18c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800326c:	2300      	movs	r3, #0
 800326e:	623b      	str	r3, [r7, #32]
 8003270:	4b5b      	ldr	r3, [pc, #364]	; (80033e0 <HAL_ETH_MspInit+0x198>)
 8003272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003274:	4a5a      	ldr	r2, [pc, #360]	; (80033e0 <HAL_ETH_MspInit+0x198>)
 8003276:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800327a:	6313      	str	r3, [r2, #48]	; 0x30
 800327c:	4b58      	ldr	r3, [pc, #352]	; (80033e0 <HAL_ETH_MspInit+0x198>)
 800327e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003284:	623b      	str	r3, [r7, #32]
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	2300      	movs	r3, #0
 800328a:	61fb      	str	r3, [r7, #28]
 800328c:	4b54      	ldr	r3, [pc, #336]	; (80033e0 <HAL_ETH_MspInit+0x198>)
 800328e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003290:	4a53      	ldr	r2, [pc, #332]	; (80033e0 <HAL_ETH_MspInit+0x198>)
 8003292:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003296:	6313      	str	r3, [r2, #48]	; 0x30
 8003298:	4b51      	ldr	r3, [pc, #324]	; (80033e0 <HAL_ETH_MspInit+0x198>)
 800329a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032a0:	61fb      	str	r3, [r7, #28]
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	2300      	movs	r3, #0
 80032a6:	61bb      	str	r3, [r7, #24]
 80032a8:	4b4d      	ldr	r3, [pc, #308]	; (80033e0 <HAL_ETH_MspInit+0x198>)
 80032aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ac:	4a4c      	ldr	r2, [pc, #304]	; (80033e0 <HAL_ETH_MspInit+0x198>)
 80032ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80032b2:	6313      	str	r3, [r2, #48]	; 0x30
 80032b4:	4b4a      	ldr	r3, [pc, #296]	; (80033e0 <HAL_ETH_MspInit+0x198>)
 80032b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032bc:	61bb      	str	r3, [r7, #24]
 80032be:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032c0:	2300      	movs	r3, #0
 80032c2:	617b      	str	r3, [r7, #20]
 80032c4:	4b46      	ldr	r3, [pc, #280]	; (80033e0 <HAL_ETH_MspInit+0x198>)
 80032c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c8:	4a45      	ldr	r2, [pc, #276]	; (80033e0 <HAL_ETH_MspInit+0x198>)
 80032ca:	f043 0304 	orr.w	r3, r3, #4
 80032ce:	6313      	str	r3, [r2, #48]	; 0x30
 80032d0:	4b43      	ldr	r3, [pc, #268]	; (80033e0 <HAL_ETH_MspInit+0x198>)
 80032d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	617b      	str	r3, [r7, #20]
 80032da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032dc:	2300      	movs	r3, #0
 80032de:	613b      	str	r3, [r7, #16]
 80032e0:	4b3f      	ldr	r3, [pc, #252]	; (80033e0 <HAL_ETH_MspInit+0x198>)
 80032e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e4:	4a3e      	ldr	r2, [pc, #248]	; (80033e0 <HAL_ETH_MspInit+0x198>)
 80032e6:	f043 0301 	orr.w	r3, r3, #1
 80032ea:	6313      	str	r3, [r2, #48]	; 0x30
 80032ec:	4b3c      	ldr	r3, [pc, #240]	; (80033e0 <HAL_ETH_MspInit+0x198>)
 80032ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	613b      	str	r3, [r7, #16]
 80032f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032f8:	2300      	movs	r3, #0
 80032fa:	60fb      	str	r3, [r7, #12]
 80032fc:	4b38      	ldr	r3, [pc, #224]	; (80033e0 <HAL_ETH_MspInit+0x198>)
 80032fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003300:	4a37      	ldr	r2, [pc, #220]	; (80033e0 <HAL_ETH_MspInit+0x198>)
 8003302:	f043 0302 	orr.w	r3, r3, #2
 8003306:	6313      	str	r3, [r2, #48]	; 0x30
 8003308:	4b35      	ldr	r3, [pc, #212]	; (80033e0 <HAL_ETH_MspInit+0x198>)
 800330a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	60fb      	str	r3, [r7, #12]
 8003312:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003314:	2300      	movs	r3, #0
 8003316:	60bb      	str	r3, [r7, #8]
 8003318:	4b31      	ldr	r3, [pc, #196]	; (80033e0 <HAL_ETH_MspInit+0x198>)
 800331a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331c:	4a30      	ldr	r2, [pc, #192]	; (80033e0 <HAL_ETH_MspInit+0x198>)
 800331e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003322:	6313      	str	r3, [r2, #48]	; 0x30
 8003324:	4b2e      	ldr	r3, [pc, #184]	; (80033e0 <HAL_ETH_MspInit+0x198>)
 8003326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800332c:	60bb      	str	r3, [r7, #8]
 800332e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003330:	2332      	movs	r3, #50	; 0x32
 8003332:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003334:	2302      	movs	r3, #2
 8003336:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003338:	2300      	movs	r3, #0
 800333a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800333c:	2303      	movs	r3, #3
 800333e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003340:	230b      	movs	r3, #11
 8003342:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003344:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003348:	4619      	mov	r1, r3
 800334a:	4826      	ldr	r0, [pc, #152]	; (80033e4 <HAL_ETH_MspInit+0x19c>)
 800334c:	f7fe fefe 	bl	800214c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003350:	2386      	movs	r3, #134	; 0x86
 8003352:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003354:	2302      	movs	r3, #2
 8003356:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003358:	2300      	movs	r3, #0
 800335a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800335c:	2303      	movs	r3, #3
 800335e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003360:	230b      	movs	r3, #11
 8003362:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003364:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003368:	4619      	mov	r1, r3
 800336a:	481f      	ldr	r0, [pc, #124]	; (80033e8 <HAL_ETH_MspInit+0x1a0>)
 800336c:	f7fe feee 	bl	800214c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003370:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003374:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003376:	2302      	movs	r3, #2
 8003378:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337a:	2300      	movs	r3, #0
 800337c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800337e:	2303      	movs	r3, #3
 8003380:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003382:	230b      	movs	r3, #11
 8003384:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003386:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800338a:	4619      	mov	r1, r3
 800338c:	4817      	ldr	r0, [pc, #92]	; (80033ec <HAL_ETH_MspInit+0x1a4>)
 800338e:	f7fe fedd 	bl	800214c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003392:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003396:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003398:	2302      	movs	r3, #2
 800339a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339c:	2300      	movs	r3, #0
 800339e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033a0:	2303      	movs	r3, #3
 80033a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80033a4:	230b      	movs	r3, #11
 80033a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80033a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033ac:	4619      	mov	r1, r3
 80033ae:	4810      	ldr	r0, [pc, #64]	; (80033f0 <HAL_ETH_MspInit+0x1a8>)
 80033b0:	f7fe fecc 	bl	800214c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 80033b4:	2200      	movs	r2, #0
 80033b6:	2100      	movs	r1, #0
 80033b8:	203d      	movs	r0, #61	; 0x3d
 80033ba:	f7fd fd00 	bl	8000dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80033be:	203d      	movs	r0, #61	; 0x3d
 80033c0:	f7fd fd19 	bl	8000df6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 0, 0);
 80033c4:	2200      	movs	r2, #0
 80033c6:	2100      	movs	r1, #0
 80033c8:	203e      	movs	r0, #62	; 0x3e
 80033ca:	f7fd fcf8 	bl	8000dbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 80033ce:	203e      	movs	r0, #62	; 0x3e
 80033d0:	f7fd fd11 	bl	8000df6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80033d4:	bf00      	nop
 80033d6:	3738      	adds	r7, #56	; 0x38
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40028000 	.word	0x40028000
 80033e0:	40023800 	.word	0x40023800
 80033e4:	40020800 	.word	0x40020800
 80033e8:	40020000 	.word	0x40020000
 80033ec:	40020400 	.word	0x40020400
 80033f0:	40021800 	.word	0x40021800

080033f4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80033fc:	2300      	movs	r3, #0
 80033fe:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003400:	4b49      	ldr	r3, [pc, #292]	; (8003528 <low_level_init+0x134>)
 8003402:	4a4a      	ldr	r2, [pc, #296]	; (800352c <low_level_init+0x138>)
 8003404:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8003406:	4b48      	ldr	r3, [pc, #288]	; (8003528 <low_level_init+0x134>)
 8003408:	2201      	movs	r2, #1
 800340a:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800340c:	4b46      	ldr	r3, [pc, #280]	; (8003528 <low_level_init+0x134>)
 800340e:	2200      	movs	r2, #0
 8003410:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8003412:	2300      	movs	r3, #0
 8003414:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8003416:	2380      	movs	r3, #128	; 0x80
 8003418:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800341a:	23e1      	movs	r3, #225	; 0xe1
 800341c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800341e:	2300      	movs	r3, #0
 8003420:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8003422:	2300      	movs	r3, #0
 8003424:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8003426:	2300      	movs	r3, #0
 8003428:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800342a:	4a3f      	ldr	r2, [pc, #252]	; (8003528 <low_level_init+0x134>)
 800342c:	f107 0308 	add.w	r3, r7, #8
 8003430:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8003432:	4b3d      	ldr	r3, [pc, #244]	; (8003528 <low_level_init+0x134>)
 8003434:	2200      	movs	r2, #0
 8003436:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8003438:	4b3b      	ldr	r3, [pc, #236]	; (8003528 <low_level_init+0x134>)
 800343a:	2200      	movs	r2, #0
 800343c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800343e:	4b3a      	ldr	r3, [pc, #232]	; (8003528 <low_level_init+0x134>)
 8003440:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003444:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003446:	4838      	ldr	r0, [pc, #224]	; (8003528 <low_level_init+0x134>)
 8003448:	f7fd fcf0 	bl	8000e2c <HAL_ETH_Init>
 800344c:	4603      	mov	r3, r0
 800344e:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8003450:	7dfb      	ldrb	r3, [r7, #23]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d108      	bne.n	8003468 <low_level_init+0x74>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800345c:	f043 0304 	orr.w	r3, r3, #4
 8003460:	b2da      	uxtb	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8003468:	2304      	movs	r3, #4
 800346a:	4a31      	ldr	r2, [pc, #196]	; (8003530 <low_level_init+0x13c>)
 800346c:	4931      	ldr	r1, [pc, #196]	; (8003534 <low_level_init+0x140>)
 800346e:	482e      	ldr	r0, [pc, #184]	; (8003528 <low_level_init+0x134>)
 8003470:	f7fd fe6a 	bl	8001148 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8003474:	2304      	movs	r3, #4
 8003476:	4a30      	ldr	r2, [pc, #192]	; (8003538 <low_level_init+0x144>)
 8003478:	4930      	ldr	r1, [pc, #192]	; (800353c <low_level_init+0x148>)
 800347a:	482b      	ldr	r0, [pc, #172]	; (8003528 <low_level_init+0x134>)
 800347c:	f7fd fecc 	bl	8001218 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2206      	movs	r2, #6
 8003484:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003488:	4b27      	ldr	r3, [pc, #156]	; (8003528 <low_level_init+0x134>)
 800348a:	695b      	ldr	r3, [r3, #20]
 800348c:	781a      	ldrb	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003494:	4b24      	ldr	r3, [pc, #144]	; (8003528 <low_level_init+0x134>)
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	785a      	ldrb	r2, [r3, #1]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80034a0:	4b21      	ldr	r3, [pc, #132]	; (8003528 <low_level_init+0x134>)
 80034a2:	695b      	ldr	r3, [r3, #20]
 80034a4:	789a      	ldrb	r2, [r3, #2]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80034ac:	4b1e      	ldr	r3, [pc, #120]	; (8003528 <low_level_init+0x134>)
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	78da      	ldrb	r2, [r3, #3]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80034b8:	4b1b      	ldr	r3, [pc, #108]	; (8003528 <low_level_init+0x134>)
 80034ba:	695b      	ldr	r3, [r3, #20]
 80034bc:	791a      	ldrb	r2, [r3, #4]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80034c4:	4b18      	ldr	r3, [pc, #96]	; (8003528 <low_level_init+0x134>)
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	795a      	ldrb	r2, [r3, #5]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  /* maximum transfer unit */
  netif->mtu = 1500;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80034d6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80034de:	f043 030a 	orr.w	r3, r3, #10
 80034e2:	b2da      	uxtb	r2, r3
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80034ea:	480f      	ldr	r0, [pc, #60]	; (8003528 <low_level_init+0x134>)
 80034ec:	f7fe f9bd 	bl	800186a <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80034f0:	f107 0310 	add.w	r3, r7, #16
 80034f4:	461a      	mov	r2, r3
 80034f6:	211d      	movs	r1, #29
 80034f8:	480b      	ldr	r0, [pc, #44]	; (8003528 <low_level_init+0x134>)
 80034fa:	f7fe f8e8 	bl	80016ce <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	f043 030b 	orr.w	r3, r3, #11
 8003504:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	461a      	mov	r2, r3
 800350a:	211d      	movs	r1, #29
 800350c:	4806      	ldr	r0, [pc, #24]	; (8003528 <low_level_init+0x134>)
 800350e:	f7fe f946 	bl	800179e <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8003512:	f107 0310 	add.w	r3, r7, #16
 8003516:	461a      	mov	r2, r3
 8003518:	211d      	movs	r1, #29
 800351a:	4803      	ldr	r0, [pc, #12]	; (8003528 <low_level_init+0x134>)
 800351c:	f7fe f8d7 	bl	80016ce <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003520:	bf00      	nop
 8003522:	3718      	adds	r7, #24
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	20001b7c 	.word	0x20001b7c
 800352c:	40028000 	.word	0x40028000
 8003530:	20001bc4 	.word	0x20001bc4
 8003534:	200002ac 	.word	0x200002ac
 8003538:	2000032c 	.word	0x2000032c
 800353c:	20001afc 	.word	0x20001afc

08003540 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b08a      	sub	sp, #40	; 0x28
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800354a:	4b4b      	ldr	r3, [pc, #300]	; (8003678 <low_level_output+0x138>)
 800354c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8003552:	2300      	movs	r3, #0
 8003554:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8003556:	2300      	movs	r3, #0
 8003558:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800355a:	2300      	movs	r3, #0
 800355c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800355e:	2300      	movs	r3, #0
 8003560:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8003562:	4b45      	ldr	r3, [pc, #276]	; (8003678 <low_level_output+0x138>)
 8003564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003566:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8003568:	2300      	movs	r3, #0
 800356a:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	623b      	str	r3, [r7, #32]
 8003570:	e05a      	b.n	8003628 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	da03      	bge.n	8003582 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800357a:	23f8      	movs	r3, #248	; 0xf8
 800357c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8003580:	e05c      	b.n	800363c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8003582:	6a3b      	ldr	r3, [r7, #32]
 8003584:	895b      	ldrh	r3, [r3, #10]
 8003586:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8003588:	2300      	movs	r3, #0
 800358a:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800358c:	e02f      	b.n	80035ee <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800358e:	69fa      	ldr	r2, [r7, #28]
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	18d0      	adds	r0, r2, r3
 8003594:	6a3b      	ldr	r3, [r7, #32]
 8003596:	685a      	ldr	r2, [r3, #4]
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	18d1      	adds	r1, r2, r3
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80035a2:	3304      	adds	r3, #4
 80035a4:	461a      	mov	r2, r3
 80035a6:	f00a ffa8 	bl	800e4fa <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	da03      	bge.n	80035c0 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80035b8:	23f8      	movs	r3, #248	; 0xf8
 80035ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80035be:	e03d      	b.n	800363c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	4413      	add	r3, r2
 80035cc:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80035d0:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80035d2:	68ba      	ldr	r2, [r7, #8]
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80035dc:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80035e8:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80035ea:	2300      	movs	r3, #0
 80035ec:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	4413      	add	r3, r2
 80035f4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d8c8      	bhi.n	800358e <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80035fc:	69fa      	ldr	r2, [r7, #28]
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	18d0      	adds	r0, r2, r3
 8003602:	6a3b      	ldr	r3, [r7, #32]
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	4413      	add	r3, r2
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	4619      	mov	r1, r3
 800360e:	f00a ff74 	bl	800e4fa <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003612:	693a      	ldr	r2, [r7, #16]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	4413      	add	r3, r2
 8003618:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800361a:	697a      	ldr	r2, [r7, #20]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	4413      	add	r3, r2
 8003620:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8003622:	6a3b      	ldr	r3, [r7, #32]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	623b      	str	r3, [r7, #32]
 8003628:	6a3b      	ldr	r3, [r7, #32]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1a1      	bne.n	8003572 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800362e:	6979      	ldr	r1, [r7, #20]
 8003630:	4811      	ldr	r0, [pc, #68]	; (8003678 <low_level_output+0x138>)
 8003632:	f7fd fe5d 	bl	80012f0 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8003636:	2300      	movs	r3, #0
 8003638:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800363c:	4b0e      	ldr	r3, [pc, #56]	; (8003678 <low_level_output+0x138>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003644:	3314      	adds	r3, #20
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0320 	and.w	r3, r3, #32
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00d      	beq.n	800366c <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8003650:	4b09      	ldr	r3, [pc, #36]	; (8003678 <low_level_output+0x138>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003658:	3314      	adds	r3, #20
 800365a:	2220      	movs	r2, #32
 800365c:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800365e:	4b06      	ldr	r3, [pc, #24]	; (8003678 <low_level_output+0x138>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003666:	3304      	adds	r3, #4
 8003668:	2200      	movs	r2, #0
 800366a:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800366c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003670:	4618      	mov	r0, r3
 8003672:	3728      	adds	r7, #40	; 0x28
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	20001b7c 	.word	0x20001b7c

0800367c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b08c      	sub	sp, #48	; 0x30
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003684:	2300      	movs	r3, #0
 8003686:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8003688:	2300      	movs	r3, #0
 800368a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800368c:	2300      	movs	r3, #0
 800368e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8003690:	2300      	movs	r3, #0
 8003692:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8003694:	2300      	movs	r3, #0
 8003696:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8003698:	2300      	movs	r3, #0
 800369a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800369c:	2300      	movs	r3, #0
 800369e:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80036a0:	484e      	ldr	r0, [pc, #312]	; (80037dc <low_level_input+0x160>)
 80036a2:	f7fd ff0f 	bl	80014c4 <HAL_ETH_GetReceivedFrame>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <low_level_input+0x34>

    return NULL;
 80036ac:	2300      	movs	r3, #0
 80036ae:	e091      	b.n	80037d4 <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80036b0:	4b4a      	ldr	r3, [pc, #296]	; (80037dc <low_level_input+0x160>)
 80036b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b4:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80036b6:	4b49      	ldr	r3, [pc, #292]	; (80037dc <low_level_input+0x160>)
 80036b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ba:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80036bc:	89fb      	ldrh	r3, [r7, #14]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d006      	beq.n	80036d0 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80036c2:	89fb      	ldrh	r3, [r7, #14]
 80036c4:	2203      	movs	r2, #3
 80036c6:	4619      	mov	r1, r3
 80036c8:	2004      	movs	r0, #4
 80036ca:	f000 ffad 	bl	8004628 <pbuf_alloc>
 80036ce:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80036d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d04b      	beq.n	800376e <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80036d6:	4b41      	ldr	r3, [pc, #260]	; (80037dc <low_level_input+0x160>)
 80036d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036da:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80036dc:	2300      	movs	r3, #0
 80036de:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80036e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80036e4:	e040      	b.n	8003768 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 80036e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e8:	895b      	ldrh	r3, [r3, #10]
 80036ea:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80036ec:	2300      	movs	r3, #0
 80036ee:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80036f0:	e021      	b.n	8003736 <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80036f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f4:	685a      	ldr	r2, [r3, #4]
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	18d0      	adds	r0, r2, r3
 80036fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	18d1      	adds	r1, r2, r3
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8003706:	3304      	adds	r3, #4
 8003708:	461a      	mov	r2, r3
 800370a:	f00a fef6 	bl	800e4fa <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800370e:	6a3b      	ldr	r3, [r7, #32]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8003714:	6a3b      	ldr	r3, [r7, #32]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800371a:	69fa      	ldr	r2, [r7, #28]
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	4413      	add	r3, r2
 8003720:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003724:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003730:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8003732:	2300      	movs	r3, #0
 8003734:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	4413      	add	r3, r2
 800373c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003740:	4293      	cmp	r3, r2
 8003742:	d8d6      	bhi.n	80036f2 <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8003744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003746:	685a      	ldr	r2, [r3, #4]
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	18d0      	adds	r0, r2, r3
 800374c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	4413      	add	r3, r2
 8003752:	697a      	ldr	r2, [r7, #20]
 8003754:	4619      	mov	r1, r3
 8003756:	f00a fed0 	bl	800e4fa <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800375a:	69fa      	ldr	r2, [r7, #28]
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	4413      	add	r3, r2
 8003760:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	62bb      	str	r3, [r7, #40]	; 0x28
 8003768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1bb      	bne.n	80036e6 <low_level_input+0x6a>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800376e:	4b1b      	ldr	r3, [pc, #108]	; (80037dc <low_level_input+0x160>)
 8003770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003772:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003774:	2300      	movs	r3, #0
 8003776:	613b      	str	r3, [r7, #16]
 8003778:	e00b      	b.n	8003792 <low_level_input+0x116>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800377a:	6a3b      	ldr	r3, [r7, #32]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003782:	6a3b      	ldr	r3, [r7, #32]
 8003784:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003786:	6a3b      	ldr	r3, [r7, #32]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	3301      	adds	r3, #1
 8003790:	613b      	str	r3, [r7, #16]
 8003792:	4b12      	ldr	r3, [pc, #72]	; (80037dc <low_level_input+0x160>)
 8003794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	429a      	cmp	r2, r3
 800379a:	d3ee      	bcc.n	800377a <low_level_input+0xfe>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800379c:	4b0f      	ldr	r3, [pc, #60]	; (80037dc <low_level_input+0x160>)
 800379e:	2200      	movs	r2, #0
 80037a0:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80037a2:	4b0e      	ldr	r3, [pc, #56]	; (80037dc <low_level_input+0x160>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037aa:	3314      	adds	r3, #20
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00d      	beq.n	80037d2 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80037b6:	4b09      	ldr	r3, [pc, #36]	; (80037dc <low_level_input+0x160>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037be:	3314      	adds	r3, #20
 80037c0:	2280      	movs	r2, #128	; 0x80
 80037c2:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80037c4:	4b05      	ldr	r3, [pc, #20]	; (80037dc <low_level_input+0x160>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037cc:	3308      	adds	r3, #8
 80037ce:	2200      	movs	r2, #0
 80037d0:	601a      	str	r2, [r3, #0]
  }
  return p;
 80037d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3730      	adds	r7, #48	; 0x30
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	20001b7c 	.word	0x20001b7c

080037e0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7ff ff47 	bl	800367c <low_level_input>
 80037ee:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d010      	beq.n	8003818 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	691b      	ldr	r3, [r3, #16]
 80037fa:	6879      	ldr	r1, [r7, #4]
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	4798      	blx	r3
 8003800:	4603      	mov	r3, r0
 8003802:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8003804:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d006      	beq.n	800381a <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f001 fa7d 	bl	8004d0c <pbuf_free>
    p = NULL;
 8003812:	2300      	movs	r3, #0
 8003814:	60fb      	str	r3, [r7, #12]
 8003816:	e000      	b.n	800381a <ethernetif_input+0x3a>
  if (p == NULL) return;
 8003818:	bf00      	nop
  }
}
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d106      	bne.n	800383c <ethernetif_init+0x1c>
 800382e:	4b0e      	ldr	r3, [pc, #56]	; (8003868 <ethernetif_init+0x48>)
 8003830:	f240 2219 	movw	r2, #537	; 0x219
 8003834:	490d      	ldr	r1, [pc, #52]	; (800386c <ethernetif_init+0x4c>)
 8003836:	480e      	ldr	r0, [pc, #56]	; (8003870 <ethernetif_init+0x50>)
 8003838:	f00a fe72 	bl	800e520 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2273      	movs	r2, #115	; 0x73
 8003840:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->name[1] = IFNAME1;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2274      	movs	r2, #116	; 0x74
 8003848:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a09      	ldr	r2, [pc, #36]	; (8003874 <ethernetif_init+0x54>)
 8003850:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a08      	ldr	r2, [pc, #32]	; (8003878 <ethernetif_init+0x58>)
 8003856:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f7ff fdcb 	bl	80033f4 <low_level_init>

  return ERR_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3708      	adds	r7, #8
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	0800f38c 	.word	0x0800f38c
 800386c:	0800f3a8 	.word	0x0800f3a8
 8003870:	0800f3b8 	.word	0x0800f3b8
 8003874:	0800c889 	.word	0x0800c889
 8003878:	08003541 	.word	0x08003541

0800387c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003880:	f7fd f99a 	bl	8000bb8 <HAL_GetTick>
 8003884:	4603      	mov	r3, r0
}
 8003886:	4618      	mov	r0, r3
 8003888:	bd80      	pop	{r7, pc}
	...

0800388c <ethernetif_set_link>:
  * @retval None
  */
uint32_t EthernetLinkTimer=0;

void ethernetif_set_link(struct netif *netif)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8003894:	2300      	movs	r3, #0
 8003896:	60fb      	str	r3, [r7, #12]
  /* Ethernet Link every 200ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 200)
 8003898:	f7fd f98e 	bl	8000bb8 <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	4b1b      	ldr	r3, [pc, #108]	; (800390c <ethernetif_set_link+0x80>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	2bc7      	cmp	r3, #199	; 0xc7
 80038a6:	d92c      	bls.n	8003902 <ethernetif_set_link+0x76>
  {
    EthernetLinkTimer = HAL_GetTick();
 80038a8:	f7fd f986 	bl	8000bb8 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	4b17      	ldr	r3, [pc, #92]	; (800390c <ethernetif_set_link+0x80>)
 80038b0:	601a      	str	r2, [r3, #0]

    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80038b2:	f107 030c 	add.w	r3, r7, #12
 80038b6:	461a      	mov	r2, r3
 80038b8:	2101      	movs	r1, #1
 80038ba:	4815      	ldr	r0, [pc, #84]	; (8003910 <ethernetif_set_link+0x84>)
 80038bc:	f7fd ff07 	bl	80016ce <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f003 0304 	and.w	r3, r3, #4
 80038c6:	60fb      	str	r3, [r7, #12]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(netif) && (regvalue))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80038ce:	f003 0304 	and.w	r3, r3, #4
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d106      	bne.n	80038e4 <ethernetif_set_link+0x58>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d003      	beq.n	80038e4 <ethernetif_set_link+0x58>
    {
      /* network cable is connected */
      netif_set_link_up(netif);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 fe15 	bl	800450c <netif_set_link_up>
    {
      /* network cable is disconnected */
      netif_set_link_down(netif);
    }
  }
}
 80038e2:	e00e      	b.n	8003902 <ethernetif_set_link+0x76>
    else if(netif_is_link_up(netif) && (!regvalue))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80038ea:	089b      	lsrs	r3, r3, #2
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d005      	beq.n	8003902 <ethernetif_set_link+0x76>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d102      	bne.n	8003902 <ethernetif_set_link+0x76>
      netif_set_link_down(netif);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f000 fe33 	bl	8004568 <netif_set_link_down>
}
 8003902:	bf00      	nop
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	2000009c 	.word	0x2000009c
 8003910:	20001b7c 	.word	0x20001b7c

08003914 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800391c:	2300      	movs	r3, #0
 800391e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8003920:	2300      	movs	r3, #0
 8003922:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800392a:	089b      	lsrs	r3, r3, #2
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d05d      	beq.n	80039f2 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003936:	4b34      	ldr	r3, [pc, #208]	; (8003a08 <ethernetif_update_config+0xf4>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d03f      	beq.n	80039be <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800393e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003942:	2100      	movs	r1, #0
 8003944:	4830      	ldr	r0, [pc, #192]	; (8003a08 <ethernetif_update_config+0xf4>)
 8003946:	f7fd ff2a 	bl	800179e <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800394a:	f7fd f935 	bl	8000bb8 <HAL_GetTick>
 800394e:	4603      	mov	r3, r0
 8003950:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003952:	f107 0308 	add.w	r3, r7, #8
 8003956:	461a      	mov	r2, r3
 8003958:	2101      	movs	r1, #1
 800395a:	482b      	ldr	r0, [pc, #172]	; (8003a08 <ethernetif_update_config+0xf4>)
 800395c:	f7fd feb7 	bl	80016ce <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8003960:	f7fd f92a 	bl	8000bb8 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800396e:	d828      	bhi.n	80039c2 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	f003 0320 	and.w	r3, r3, #32
 8003976:	2b00      	cmp	r3, #0
 8003978:	d0eb      	beq.n	8003952 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800397a:	f107 0308 	add.w	r3, r7, #8
 800397e:	461a      	mov	r2, r3
 8003980:	211f      	movs	r1, #31
 8003982:	4821      	ldr	r0, [pc, #132]	; (8003a08 <ethernetif_update_config+0xf4>)
 8003984:	f7fd fea3 	bl	80016ce <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	f003 0310 	and.w	r3, r3, #16
 800398e:	2b00      	cmp	r3, #0
 8003990:	d004      	beq.n	800399c <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8003992:	4b1d      	ldr	r3, [pc, #116]	; (8003a08 <ethernetif_update_config+0xf4>)
 8003994:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003998:	60da      	str	r2, [r3, #12]
 800399a:	e002      	b.n	80039a2 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800399c:	4b1a      	ldr	r3, [pc, #104]	; (8003a08 <ethernetif_update_config+0xf4>)
 800399e:	2200      	movs	r2, #0
 80039a0:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	f003 0304 	and.w	r3, r3, #4
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d003      	beq.n	80039b4 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 80039ac:	4b16      	ldr	r3, [pc, #88]	; (8003a08 <ethernetif_update_config+0xf4>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	609a      	str	r2, [r3, #8]
 80039b2:	e016      	b.n	80039e2 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 80039b4:	4b14      	ldr	r3, [pc, #80]	; (8003a08 <ethernetif_update_config+0xf4>)
 80039b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80039ba:	609a      	str	r2, [r3, #8]
 80039bc:	e011      	b.n	80039e2 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 80039be:	bf00      	nop
 80039c0:	e000      	b.n	80039c4 <ethernetif_update_config+0xb0>
          goto error;
 80039c2:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80039c4:	4b10      	ldr	r3, [pc, #64]	; (8003a08 <ethernetif_update_config+0xf4>)
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	08db      	lsrs	r3, r3, #3
 80039ca:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 80039cc:	4b0e      	ldr	r3, [pc, #56]	; (8003a08 <ethernetif_update_config+0xf4>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	085b      	lsrs	r3, r3, #1
 80039d2:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80039d4:	4313      	orrs	r3, r2
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	461a      	mov	r2, r3
 80039da:	2100      	movs	r1, #0
 80039dc:	480a      	ldr	r0, [pc, #40]	; (8003a08 <ethernetif_update_config+0xf4>)
 80039de:	f7fd fede 	bl	800179e <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 80039e2:	2100      	movs	r1, #0
 80039e4:	4808      	ldr	r0, [pc, #32]	; (8003a08 <ethernetif_update_config+0xf4>)
 80039e6:	f7fd ff9f 	bl	8001928 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 80039ea:	4807      	ldr	r0, [pc, #28]	; (8003a08 <ethernetif_update_config+0xf4>)
 80039ec:	f7fd ff3d 	bl	800186a <HAL_ETH_Start>
 80039f0:	e002      	b.n	80039f8 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 80039f2:	4805      	ldr	r0, [pc, #20]	; (8003a08 <ethernetif_update_config+0xf4>)
 80039f4:	f7fd ff68 	bl	80018c8 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	f7fc fe13 	bl	8000624 <ethernetif_notify_conn_changed>
}
 80039fe:	bf00      	nop
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	20001b7c 	.word	0x20001b7c

08003a0c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	4603      	mov	r3, r0
 8003a14:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 8003a16:	88fb      	ldrh	r3, [r7, #6]
 8003a18:	ba5b      	rev16	r3, r3
 8003a1a:	b29b      	uxth	r3, r3
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bc80      	pop	{r7}
 8003a24:	4770      	bx	lr

08003a26 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8003a26:	b480      	push	{r7}
 8003a28:	b083      	sub	sp, #12
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	061a      	lsls	r2, r3, #24
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	021b      	lsls	r3, r3, #8
 8003a36:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	0a1b      	lsrs	r3, r3, #8
 8003a40:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003a44:	431a      	orrs	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	0e1b      	lsrs	r3, r3, #24
 8003a4a:	4313      	orrs	r3, r2
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bc80      	pop	{r7}
 8003a54:	4770      	bx	lr

08003a56 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b082      	sub	sp, #8
 8003a5a:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8003a60:	f000 f8a6 	bl	8003bb0 <mem_init>
  memp_init();
 8003a64:	f000 fb36 	bl	80040d4 <memp_init>
  pbuf_init();
  netif_init();
 8003a68:	f000 fbee 	bl	8004248 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8003a6c:	f006 f870 	bl	8009b50 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8003a70:	f001 fbc4 	bl	80051fc <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 8003a74:	f005 ff4e 	bl	8009914 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8003a78:	bf00      	nop
 8003a7a:	3708      	adds	r7, #8
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8003a88:	4b40      	ldr	r3, [pc, #256]	; (8003b8c <plug_holes+0x10c>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d206      	bcs.n	8003aa0 <plug_holes+0x20>
 8003a92:	4b3f      	ldr	r3, [pc, #252]	; (8003b90 <plug_holes+0x110>)
 8003a94:	f240 125d 	movw	r2, #349	; 0x15d
 8003a98:	493e      	ldr	r1, [pc, #248]	; (8003b94 <plug_holes+0x114>)
 8003a9a:	483f      	ldr	r0, [pc, #252]	; (8003b98 <plug_holes+0x118>)
 8003a9c:	f00a fd40 	bl	800e520 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8003aa0:	4b3e      	ldr	r3, [pc, #248]	; (8003b9c <plug_holes+0x11c>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d306      	bcc.n	8003ab8 <plug_holes+0x38>
 8003aaa:	4b39      	ldr	r3, [pc, #228]	; (8003b90 <plug_holes+0x110>)
 8003aac:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8003ab0:	493b      	ldr	r1, [pc, #236]	; (8003ba0 <plug_holes+0x120>)
 8003ab2:	4839      	ldr	r0, [pc, #228]	; (8003b98 <plug_holes+0x118>)
 8003ab4:	f00a fd34 	bl	800e520 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	791b      	ldrb	r3, [r3, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d006      	beq.n	8003ace <plug_holes+0x4e>
 8003ac0:	4b33      	ldr	r3, [pc, #204]	; (8003b90 <plug_holes+0x110>)
 8003ac2:	f240 125f 	movw	r2, #351	; 0x15f
 8003ac6:	4937      	ldr	r1, [pc, #220]	; (8003ba4 <plug_holes+0x124>)
 8003ac8:	4833      	ldr	r0, [pc, #204]	; (8003b98 <plug_holes+0x118>)
 8003aca:	f00a fd29 	bl	800e520 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	881b      	ldrh	r3, [r3, #0]
 8003ad2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003ad6:	d906      	bls.n	8003ae6 <plug_holes+0x66>
 8003ad8:	4b2d      	ldr	r3, [pc, #180]	; (8003b90 <plug_holes+0x110>)
 8003ada:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8003ade:	4932      	ldr	r1, [pc, #200]	; (8003ba8 <plug_holes+0x128>)
 8003ae0:	482d      	ldr	r0, [pc, #180]	; (8003b98 <plug_holes+0x118>)
 8003ae2:	f00a fd1d 	bl	800e520 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 8003ae6:	4b29      	ldr	r3, [pc, #164]	; (8003b8c <plug_holes+0x10c>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	8812      	ldrh	r2, [r2, #0]
 8003aee:	4413      	add	r3, r2
 8003af0:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d01f      	beq.n	8003b3a <plug_holes+0xba>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	791b      	ldrb	r3, [r3, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d11b      	bne.n	8003b3a <plug_holes+0xba>
 8003b02:	4b26      	ldr	r3, [pc, #152]	; (8003b9c <plug_holes+0x11c>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d016      	beq.n	8003b3a <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8003b0c:	4b27      	ldr	r3, [pc, #156]	; (8003bac <plug_holes+0x12c>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d102      	bne.n	8003b1c <plug_holes+0x9c>
      lfree = mem;
 8003b16:	4a25      	ldr	r2, [pc, #148]	; (8003bac <plug_holes+0x12c>)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	881a      	ldrh	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a19      	ldr	r2, [pc, #100]	; (8003b8c <plug_holes+0x10c>)
 8003b28:	6812      	ldr	r2, [r2, #0]
 8003b2a:	1a99      	subs	r1, r3, r2
 8003b2c:	4b17      	ldr	r3, [pc, #92]	; (8003b8c <plug_holes+0x10c>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	8812      	ldrh	r2, [r2, #0]
 8003b34:	4413      	add	r3, r2
 8003b36:	b28a      	uxth	r2, r1
 8003b38:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8003b3a:	4b14      	ldr	r3, [pc, #80]	; (8003b8c <plug_holes+0x10c>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	8852      	ldrh	r2, [r2, #2]
 8003b42:	4413      	add	r3, r2
 8003b44:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8003b46:	68ba      	ldr	r2, [r7, #8]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d01a      	beq.n	8003b84 <plug_holes+0x104>
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	791b      	ldrb	r3, [r3, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d116      	bne.n	8003b84 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8003b56:	4b15      	ldr	r3, [pc, #84]	; (8003bac <plug_holes+0x12c>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d102      	bne.n	8003b66 <plug_holes+0xe6>
      lfree = pmem;
 8003b60:	4a12      	ldr	r2, [pc, #72]	; (8003bac <plug_holes+0x12c>)
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	881a      	ldrh	r2, [r3, #0]
 8003b6a:	68bb      	ldr	r3, [r7, #8]
 8003b6c:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	4a06      	ldr	r2, [pc, #24]	; (8003b8c <plug_holes+0x10c>)
 8003b72:	6812      	ldr	r2, [r2, #0]
 8003b74:	1a99      	subs	r1, r3, r2
 8003b76:	4b05      	ldr	r3, [pc, #20]	; (8003b8c <plug_holes+0x10c>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	8812      	ldrh	r2, [r2, #0]
 8003b7e:	4413      	add	r3, r2
 8003b80:	b28a      	uxth	r2, r1
 8003b82:	805a      	strh	r2, [r3, #2]
  }
}
 8003b84:	bf00      	nop
 8003b86:	3710      	adds	r7, #16
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	200000a0 	.word	0x200000a0
 8003b90:	0800f3e0 	.word	0x0800f3e0
 8003b94:	0800f410 	.word	0x0800f410
 8003b98:	0800f428 	.word	0x0800f428
 8003b9c:	200000a4 	.word	0x200000a4
 8003ba0:	0800f450 	.word	0x0800f450
 8003ba4:	0800f46c 	.word	0x0800f46c
 8003ba8:	0800f488 	.word	0x0800f488
 8003bac:	200000a8 	.word	0x200000a8

08003bb0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8003bb6:	4b18      	ldr	r3, [pc, #96]	; (8003c18 <mem_init+0x68>)
 8003bb8:	3303      	adds	r3, #3
 8003bba:	f023 0303 	bic.w	r3, r3, #3
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	4b16      	ldr	r3, [pc, #88]	; (8003c1c <mem_init+0x6c>)
 8003bc2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8003bc4:	4b15      	ldr	r3, [pc, #84]	; (8003c1c <mem_init+0x6c>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003bd0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8003bde:	4b0f      	ldr	r3, [pc, #60]	; (8003c1c <mem_init+0x6c>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8003be6:	4a0e      	ldr	r2, [pc, #56]	; (8003c20 <mem_init+0x70>)
 8003be8:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8003bea:	4b0d      	ldr	r3, [pc, #52]	; (8003c20 <mem_init+0x70>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8003bf2:	4b0b      	ldr	r3, [pc, #44]	; (8003c20 <mem_init+0x70>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003bfa:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8003bfc:	4b08      	ldr	r3, [pc, #32]	; (8003c20 <mem_init+0x70>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003c04:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8003c06:	4b05      	ldr	r3, [pc, #20]	; (8003c1c <mem_init+0x6c>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a06      	ldr	r2, [pc, #24]	; (8003c24 <mem_init+0x74>)
 8003c0c:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8003c0e:	bf00      	nop
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bc80      	pop	{r7}
 8003c16:	4770      	bx	lr
 8003c18:	200033ac 	.word	0x200033ac
 8003c1c:	200000a0 	.word	0x200000a0
 8003c20:	200000a4 	.word	0x200000a4
 8003c24:	200000a8 	.word	0x200000a8

08003c28 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d043      	beq.n	8003cbe <mem_free+0x96>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f003 0303 	and.w	r3, r3, #3
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d006      	beq.n	8003c4e <mem_free+0x26>
 8003c40:	4b22      	ldr	r3, [pc, #136]	; (8003ccc <mem_free+0xa4>)
 8003c42:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8003c46:	4922      	ldr	r1, [pc, #136]	; (8003cd0 <mem_free+0xa8>)
 8003c48:	4822      	ldr	r0, [pc, #136]	; (8003cd4 <mem_free+0xac>)
 8003c4a:	f00a fc69 	bl	800e520 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8003c4e:	4b22      	ldr	r3, [pc, #136]	; (8003cd8 <mem_free+0xb0>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d304      	bcc.n	8003c62 <mem_free+0x3a>
 8003c58:	4b20      	ldr	r3, [pc, #128]	; (8003cdc <mem_free+0xb4>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d306      	bcc.n	8003c70 <mem_free+0x48>
 8003c62:	4b1a      	ldr	r3, [pc, #104]	; (8003ccc <mem_free+0xa4>)
 8003c64:	f240 12af 	movw	r2, #431	; 0x1af
 8003c68:	491d      	ldr	r1, [pc, #116]	; (8003ce0 <mem_free+0xb8>)
 8003c6a:	481a      	ldr	r0, [pc, #104]	; (8003cd4 <mem_free+0xac>)
 8003c6c:	f00a fc58 	bl	800e520 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8003c70:	4b19      	ldr	r3, [pc, #100]	; (8003cd8 <mem_free+0xb0>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d323      	bcc.n	8003cc2 <mem_free+0x9a>
 8003c7a:	4b18      	ldr	r3, [pc, #96]	; (8003cdc <mem_free+0xb4>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d21e      	bcs.n	8003cc2 <mem_free+0x9a>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	3b08      	subs	r3, #8
 8003c88:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	791b      	ldrb	r3, [r3, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d106      	bne.n	8003ca0 <mem_free+0x78>
 8003c92:	4b0e      	ldr	r3, [pc, #56]	; (8003ccc <mem_free+0xa4>)
 8003c94:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8003c98:	4912      	ldr	r1, [pc, #72]	; (8003ce4 <mem_free+0xbc>)
 8003c9a:	480e      	ldr	r0, [pc, #56]	; (8003cd4 <mem_free+0xac>)
 8003c9c:	f00a fc40 	bl	800e520 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8003ca6:	4b10      	ldr	r3, [pc, #64]	; (8003ce8 <mem_free+0xc0>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d202      	bcs.n	8003cb6 <mem_free+0x8e>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8003cb0:	4a0d      	ldr	r2, [pc, #52]	; (8003ce8 <mem_free+0xc0>)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	f7ff fee2 	bl	8003a80 <plug_holes>
 8003cbc:	e002      	b.n	8003cc4 <mem_free+0x9c>
    return;
 8003cbe:	bf00      	nop
 8003cc0:	e000      	b.n	8003cc4 <mem_free+0x9c>
    return;
 8003cc2:	bf00      	nop
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	0800f3e0 	.word	0x0800f3e0
 8003cd0:	0800f4b4 	.word	0x0800f4b4
 8003cd4:	0800f428 	.word	0x0800f428
 8003cd8:	200000a0 	.word	0x200000a0
 8003cdc:	200000a4 	.word	0x200000a4
 8003ce0:	0800f4d8 	.word	0x0800f4d8
 8003ce4:	0800f4f0 	.word	0x0800f4f0
 8003ce8:	200000a8 	.word	0x200000a8

08003cec <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8003cf8:	887b      	ldrh	r3, [r7, #2]
 8003cfa:	3303      	adds	r3, #3
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	f023 0303 	bic.w	r3, r3, #3
 8003d02:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 8003d04:	887b      	ldrh	r3, [r7, #2]
 8003d06:	2b0b      	cmp	r3, #11
 8003d08:	d801      	bhi.n	8003d0e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8003d0a:	230c      	movs	r3, #12
 8003d0c:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8003d0e:	887b      	ldrh	r3, [r7, #2]
 8003d10:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003d14:	d901      	bls.n	8003d1a <mem_trim+0x2e>
    return NULL;
 8003d16:	2300      	movs	r3, #0
 8003d18:	e0b1      	b.n	8003e7e <mem_trim+0x192>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8003d1a:	4b5b      	ldr	r3, [pc, #364]	; (8003e88 <mem_trim+0x19c>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d304      	bcc.n	8003d2e <mem_trim+0x42>
 8003d24:	4b59      	ldr	r3, [pc, #356]	; (8003e8c <mem_trim+0x1a0>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d306      	bcc.n	8003d3c <mem_trim+0x50>
 8003d2e:	4b58      	ldr	r3, [pc, #352]	; (8003e90 <mem_trim+0x1a4>)
 8003d30:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003d34:	4957      	ldr	r1, [pc, #348]	; (8003e94 <mem_trim+0x1a8>)
 8003d36:	4858      	ldr	r0, [pc, #352]	; (8003e98 <mem_trim+0x1ac>)
 8003d38:	f00a fbf2 	bl	800e520 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8003d3c:	4b52      	ldr	r3, [pc, #328]	; (8003e88 <mem_trim+0x19c>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d304      	bcc.n	8003d50 <mem_trim+0x64>
 8003d46:	4b51      	ldr	r3, [pc, #324]	; (8003e8c <mem_trim+0x1a0>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d301      	bcc.n	8003d54 <mem_trim+0x68>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
    return rmem;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	e094      	b.n	8003e7e <mem_trim+0x192>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	3b08      	subs	r3, #8
 8003d58:	617b      	str	r3, [r7, #20]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	4a4a      	ldr	r2, [pc, #296]	; (8003e88 <mem_trim+0x19c>)
 8003d5e:	6812      	ldr	r2, [r2, #0]
 8003d60:	1a9b      	subs	r3, r3, r2
 8003d62:	827b      	strh	r3, [r7, #18]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	881a      	ldrh	r2, [r3, #0]
 8003d68:	8a7b      	ldrh	r3, [r7, #18]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	3b08      	subs	r3, #8
 8003d70:	823b      	strh	r3, [r7, #16]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8003d72:	887a      	ldrh	r2, [r7, #2]
 8003d74:	8a3b      	ldrh	r3, [r7, #16]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d906      	bls.n	8003d88 <mem_trim+0x9c>
 8003d7a:	4b45      	ldr	r3, [pc, #276]	; (8003e90 <mem_trim+0x1a4>)
 8003d7c:	f240 2206 	movw	r2, #518	; 0x206
 8003d80:	4946      	ldr	r1, [pc, #280]	; (8003e9c <mem_trim+0x1b0>)
 8003d82:	4845      	ldr	r0, [pc, #276]	; (8003e98 <mem_trim+0x1ac>)
 8003d84:	f00a fbcc 	bl	800e520 <iprintf>
  if (newsize > size) {
 8003d88:	887a      	ldrh	r2, [r7, #2]
 8003d8a:	8a3b      	ldrh	r3, [r7, #16]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d901      	bls.n	8003d94 <mem_trim+0xa8>
    /* not supported */
    return NULL;
 8003d90:	2300      	movs	r3, #0
 8003d92:	e074      	b.n	8003e7e <mem_trim+0x192>
  }
  if (newsize == size) {
 8003d94:	887a      	ldrh	r2, [r7, #2]
 8003d96:	8a3b      	ldrh	r3, [r7, #16]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d101      	bne.n	8003da0 <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	e06e      	b.n	8003e7e <mem_trim+0x192>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = (struct mem *)(void *)&ram[mem->next];
 8003da0:	4b39      	ldr	r3, [pc, #228]	; (8003e88 <mem_trim+0x19c>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	697a      	ldr	r2, [r7, #20]
 8003da6:	8812      	ldrh	r2, [r2, #0]
 8003da8:	4413      	add	r3, r2
 8003daa:	60fb      	str	r3, [r7, #12]
  if (mem2->used == 0) {
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	791b      	ldrb	r3, [r3, #4]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d131      	bne.n	8003e18 <mem_trim+0x12c>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	881b      	ldrh	r3, [r3, #0]
 8003db8:	813b      	strh	r3, [r7, #8]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8003dba:	8a7a      	ldrh	r2, [r7, #18]
 8003dbc:	887b      	ldrh	r3, [r7, #2]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	3308      	adds	r3, #8
 8003dc4:	817b      	strh	r3, [r7, #10]
    if (lfree == mem2) {
 8003dc6:	4b36      	ldr	r3, [pc, #216]	; (8003ea0 <mem_trim+0x1b4>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d105      	bne.n	8003ddc <mem_trim+0xf0>
      lfree = (struct mem *)(void *)&ram[ptr2];
 8003dd0:	4b2d      	ldr	r3, [pc, #180]	; (8003e88 <mem_trim+0x19c>)
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	897b      	ldrh	r3, [r7, #10]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	4a31      	ldr	r2, [pc, #196]	; (8003ea0 <mem_trim+0x1b4>)
 8003dda:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8003ddc:	4b2a      	ldr	r3, [pc, #168]	; (8003e88 <mem_trim+0x19c>)
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	897b      	ldrh	r3, [r7, #10]
 8003de2:	4413      	add	r3, r2
 8003de4:	60fb      	str	r3, [r7, #12]
    mem2->used = 0;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	893a      	ldrh	r2, [r7, #8]
 8003df0:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	8a7a      	ldrh	r2, [r7, #18]
 8003df6:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	897a      	ldrh	r2, [r7, #10]
 8003dfc:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	881b      	ldrh	r3, [r3, #0]
 8003e02:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003e06:	d039      	beq.n	8003e7c <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8003e08:	4b1f      	ldr	r3, [pc, #124]	; (8003e88 <mem_trim+0x19c>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	8812      	ldrh	r2, [r2, #0]
 8003e10:	4413      	add	r3, r2
 8003e12:	897a      	ldrh	r2, [r7, #10]
 8003e14:	805a      	strh	r2, [r3, #2]
 8003e16:	e031      	b.n	8003e7c <mem_trim+0x190>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8003e18:	887b      	ldrh	r3, [r7, #2]
 8003e1a:	f103 0214 	add.w	r2, r3, #20
 8003e1e:	8a3b      	ldrh	r3, [r7, #16]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d82b      	bhi.n	8003e7c <mem_trim+0x190>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8003e24:	8a7a      	ldrh	r2, [r7, #18]
 8003e26:	887b      	ldrh	r3, [r7, #2]
 8003e28:	4413      	add	r3, r2
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	3308      	adds	r3, #8
 8003e2e:	817b      	strh	r3, [r7, #10]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8003e30:	4b15      	ldr	r3, [pc, #84]	; (8003e88 <mem_trim+0x19c>)
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	897b      	ldrh	r3, [r7, #10]
 8003e36:	4413      	add	r3, r2
 8003e38:	60fb      	str	r3, [r7, #12]
    if (mem2 < lfree) {
 8003e3a:	4b19      	ldr	r3, [pc, #100]	; (8003ea0 <mem_trim+0x1b4>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d202      	bcs.n	8003e4a <mem_trim+0x15e>
      lfree = mem2;
 8003e44:	4a16      	ldr	r2, [pc, #88]	; (8003ea0 <mem_trim+0x1b4>)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	881a      	ldrh	r2, [r3, #0]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8a7a      	ldrh	r2, [r7, #18]
 8003e5c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	897a      	ldrh	r2, [r7, #10]
 8003e62:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	881b      	ldrh	r3, [r3, #0]
 8003e68:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003e6c:	d006      	beq.n	8003e7c <mem_trim+0x190>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8003e6e:	4b06      	ldr	r3, [pc, #24]	; (8003e88 <mem_trim+0x19c>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	8812      	ldrh	r2, [r2, #0]
 8003e76:	4413      	add	r3, r2
 8003e78:	897a      	ldrh	r2, [r7, #10]
 8003e7a:	805a      	strh	r2, [r3, #2]
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8003e7c:	687b      	ldr	r3, [r7, #4]
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3718      	adds	r7, #24
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	200000a0 	.word	0x200000a0
 8003e8c:	200000a4 	.word	0x200000a4
 8003e90:	0800f3e0 	.word	0x0800f3e0
 8003e94:	0800f504 	.word	0x0800f504
 8003e98:	0800f428 	.word	0x0800f428
 8003e9c:	0800f51c 	.word	0x0800f51c
 8003ea0:	200000a8 	.word	0x200000a8

08003ea4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b088      	sub	sp, #32
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	4603      	mov	r3, r0
 8003eac:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8003eae:	88fb      	ldrh	r3, [r7, #6]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d101      	bne.n	8003eb8 <mem_malloc+0x14>
    return NULL;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	e0c8      	b.n	800404a <mem_malloc+0x1a6>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8003eb8:	88fb      	ldrh	r3, [r7, #6]
 8003eba:	3303      	adds	r3, #3
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	f023 0303 	bic.w	r3, r3, #3
 8003ec2:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 8003ec4:	88fb      	ldrh	r3, [r7, #6]
 8003ec6:	2b0b      	cmp	r3, #11
 8003ec8:	d801      	bhi.n	8003ece <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8003eca:	230c      	movs	r3, #12
 8003ecc:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 8003ece:	88fb      	ldrh	r3, [r7, #6]
 8003ed0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003ed4:	d901      	bls.n	8003eda <mem_malloc+0x36>
    return NULL;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	e0b7      	b.n	800404a <mem_malloc+0x1a6>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8003eda:	4b5e      	ldr	r3, [pc, #376]	; (8004054 <mem_malloc+0x1b0>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	461a      	mov	r2, r3
 8003ee0:	4b5d      	ldr	r3, [pc, #372]	; (8004058 <mem_malloc+0x1b4>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	83fb      	strh	r3, [r7, #30]
 8003ee8:	e0a7      	b.n	800403a <mem_malloc+0x196>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 8003eea:	4b5b      	ldr	r3, [pc, #364]	; (8004058 <mem_malloc+0x1b4>)
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	8bfb      	ldrh	r3, [r7, #30]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	791b      	ldrb	r3, [r3, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f040 8098 	bne.w	800402e <mem_malloc+0x18a>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	881b      	ldrh	r3, [r3, #0]
 8003f02:	461a      	mov	r2, r3
 8003f04:	8bfb      	ldrh	r3, [r7, #30]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	f1a3 0208 	sub.w	r2, r3, #8
 8003f0c:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	f0c0 808d 	bcc.w	800402e <mem_malloc+0x18a>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	881b      	ldrh	r3, [r3, #0]
 8003f18:	461a      	mov	r2, r3
 8003f1a:	8bfb      	ldrh	r3, [r7, #30]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	f1a3 0208 	sub.w	r2, r3, #8
 8003f22:	88fb      	ldrh	r3, [r7, #6]
 8003f24:	3314      	adds	r3, #20
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d327      	bcc.n	8003f7a <mem_malloc+0xd6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8003f2a:	8bfa      	ldrh	r2, [r7, #30]
 8003f2c:	88fb      	ldrh	r3, [r7, #6]
 8003f2e:	4413      	add	r3, r2
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	3308      	adds	r3, #8
 8003f34:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8003f36:	4b48      	ldr	r3, [pc, #288]	; (8004058 <mem_malloc+0x1b4>)
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	8a7b      	ldrh	r3, [r7, #18]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	881a      	ldrh	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	8bfa      	ldrh	r2, [r7, #30]
 8003f52:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	8a7a      	ldrh	r2, [r7, #18]
 8003f58:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	881b      	ldrh	r3, [r3, #0]
 8003f64:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003f68:	d00a      	beq.n	8003f80 <mem_malloc+0xdc>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8003f6a:	4b3b      	ldr	r3, [pc, #236]	; (8004058 <mem_malloc+0x1b4>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	8812      	ldrh	r2, [r2, #0]
 8003f72:	4413      	add	r3, r2
 8003f74:	8a7a      	ldrh	r2, [r7, #18]
 8003f76:	805a      	strh	r2, [r3, #2]
 8003f78:	e002      	b.n	8003f80 <mem_malloc+0xdc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8003f80:	4b34      	ldr	r3, [pc, #208]	; (8004054 <mem_malloc+0x1b0>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d127      	bne.n	8003fda <mem_malloc+0x136>
          struct mem *cur = lfree;
 8003f8a:	4b32      	ldr	r3, [pc, #200]	; (8004054 <mem_malloc+0x1b0>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8003f90:	e005      	b.n	8003f9e <mem_malloc+0xfa>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 8003f92:	4b31      	ldr	r3, [pc, #196]	; (8004058 <mem_malloc+0x1b4>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	69ba      	ldr	r2, [r7, #24]
 8003f98:	8812      	ldrh	r2, [r2, #0]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	791b      	ldrb	r3, [r3, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d004      	beq.n	8003fb0 <mem_malloc+0x10c>
 8003fa6:	4b2d      	ldr	r3, [pc, #180]	; (800405c <mem_malloc+0x1b8>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	69ba      	ldr	r2, [r7, #24]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d1f0      	bne.n	8003f92 <mem_malloc+0xee>
          }
          lfree = cur;
 8003fb0:	4a28      	ldr	r2, [pc, #160]	; (8004054 <mem_malloc+0x1b0>)
 8003fb2:	69bb      	ldr	r3, [r7, #24]
 8003fb4:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8003fb6:	4b27      	ldr	r3, [pc, #156]	; (8004054 <mem_malloc+0x1b0>)
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	4b28      	ldr	r3, [pc, #160]	; (800405c <mem_malloc+0x1b8>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d00b      	beq.n	8003fda <mem_malloc+0x136>
 8003fc2:	4b24      	ldr	r3, [pc, #144]	; (8004054 <mem_malloc+0x1b0>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	791b      	ldrb	r3, [r3, #4]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d006      	beq.n	8003fda <mem_malloc+0x136>
 8003fcc:	4b24      	ldr	r3, [pc, #144]	; (8004060 <mem_malloc+0x1bc>)
 8003fce:	f240 22cf 	movw	r2, #719	; 0x2cf
 8003fd2:	4924      	ldr	r1, [pc, #144]	; (8004064 <mem_malloc+0x1c0>)
 8003fd4:	4824      	ldr	r0, [pc, #144]	; (8004068 <mem_malloc+0x1c4>)
 8003fd6:	f00a faa3 	bl	800e520 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8003fda:	88fa      	ldrh	r2, [r7, #6]
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	4413      	add	r3, r2
 8003fe0:	3308      	adds	r3, #8
 8003fe2:	4a1e      	ldr	r2, [pc, #120]	; (800405c <mem_malloc+0x1b8>)
 8003fe4:	6812      	ldr	r2, [r2, #0]
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d906      	bls.n	8003ff8 <mem_malloc+0x154>
 8003fea:	4b1d      	ldr	r3, [pc, #116]	; (8004060 <mem_malloc+0x1bc>)
 8003fec:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8003ff0:	491e      	ldr	r1, [pc, #120]	; (800406c <mem_malloc+0x1c8>)
 8003ff2:	481d      	ldr	r0, [pc, #116]	; (8004068 <mem_malloc+0x1c4>)
 8003ff4:	f00a fa94 	bl	800e520 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	f003 0303 	and.w	r3, r3, #3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d006      	beq.n	8004010 <mem_malloc+0x16c>
 8004002:	4b17      	ldr	r3, [pc, #92]	; (8004060 <mem_malloc+0x1bc>)
 8004004:	f240 22d6 	movw	r2, #726	; 0x2d6
 8004008:	4919      	ldr	r1, [pc, #100]	; (8004070 <mem_malloc+0x1cc>)
 800400a:	4817      	ldr	r0, [pc, #92]	; (8004068 <mem_malloc+0x1c4>)
 800400c:	f00a fa88 	bl	800e520 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	f003 0303 	and.w	r3, r3, #3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d006      	beq.n	8004028 <mem_malloc+0x184>
 800401a:	4b11      	ldr	r3, [pc, #68]	; (8004060 <mem_malloc+0x1bc>)
 800401c:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 8004020:	4914      	ldr	r1, [pc, #80]	; (8004074 <mem_malloc+0x1d0>)
 8004022:	4811      	ldr	r0, [pc, #68]	; (8004068 <mem_malloc+0x1c4>)
 8004024:	f00a fa7c 	bl	800e520 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	3308      	adds	r3, #8
 800402c:	e00d      	b.n	800404a <mem_malloc+0x1a6>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800402e:	4b0a      	ldr	r3, [pc, #40]	; (8004058 <mem_malloc+0x1b4>)
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	8bfb      	ldrh	r3, [r7, #30]
 8004034:	4413      	add	r3, r2
 8004036:	881b      	ldrh	r3, [r3, #0]
 8004038:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800403a:	8bfa      	ldrh	r2, [r7, #30]
 800403c:	88fb      	ldrh	r3, [r7, #6]
 800403e:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8004042:	429a      	cmp	r2, r3
 8004044:	f4ff af51 	bcc.w	8003eea <mem_malloc+0x46>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3720      	adds	r7, #32
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	200000a8 	.word	0x200000a8
 8004058:	200000a0 	.word	0x200000a0
 800405c:	200000a4 	.word	0x200000a4
 8004060:	0800f3e0 	.word	0x0800f3e0
 8004064:	0800f53c 	.word	0x0800f53c
 8004068:	0800f428 	.word	0x0800f428
 800406c:	0800f558 	.word	0x0800f558
 8004070:	0800f588 	.word	0x0800f588
 8004074:	0800f5b8 	.word	0x0800f5b8

08004078 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8004078:	b480      	push	{r7}
 800407a:	b085      	sub	sp, #20
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	2200      	movs	r2, #0
 8004086:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	3303      	adds	r3, #3
 800408e:	f023 0303 	bic.w	r3, r3, #3
 8004092:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8004094:	2300      	movs	r3, #0
 8004096:	60fb      	str	r3, [r7, #12]
 8004098:	e011      	b.n	80040be <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	881b      	ldrh	r3, [r3, #0]
 80040b0:	461a      	mov	r2, r3
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	4413      	add	r3, r2
 80040b6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	3301      	adds	r3, #1
 80040bc:	60fb      	str	r3, [r7, #12]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	885b      	ldrh	r3, [r3, #2]
 80040c2:	461a      	mov	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	4293      	cmp	r3, r2
 80040c8:	dbe7      	blt.n	800409a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80040ca:	bf00      	nop
 80040cc:	3714      	adds	r7, #20
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bc80      	pop	{r7}
 80040d2:	4770      	bx	lr

080040d4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80040da:	2300      	movs	r3, #0
 80040dc:	80fb      	strh	r3, [r7, #6]
 80040de:	e009      	b.n	80040f4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80040e0:	88fb      	ldrh	r3, [r7, #6]
 80040e2:	4a08      	ldr	r2, [pc, #32]	; (8004104 <memp_init+0x30>)
 80040e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7ff ffc5 	bl	8004078 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80040ee:	88fb      	ldrh	r3, [r7, #6]
 80040f0:	3301      	adds	r3, #1
 80040f2:	80fb      	strh	r3, [r7, #6]
 80040f4:	88fb      	ldrh	r3, [r7, #6]
 80040f6:	2b08      	cmp	r3, #8
 80040f8:	d9f2      	bls.n	80040e0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80040fa:	bf00      	nop
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	080115c8 	.word	0x080115c8

08004108 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d012      	beq.n	8004144 <do_memp_malloc_pool+0x3c>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	6812      	ldr	r2, [r2, #0]
 8004126:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f003 0303 	and.w	r3, r3, #3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d006      	beq.n	8004140 <do_memp_malloc_pool+0x38>
 8004132:	4b07      	ldr	r3, [pc, #28]	; (8004150 <do_memp_malloc_pool+0x48>)
 8004134:	f240 1249 	movw	r2, #329	; 0x149
 8004138:	4906      	ldr	r1, [pc, #24]	; (8004154 <do_memp_malloc_pool+0x4c>)
 800413a:	4807      	ldr	r0, [pc, #28]	; (8004158 <do_memp_malloc_pool+0x50>)
 800413c:	f00a f9f0 	bl	800e520 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	e000      	b.n	8004146 <do_memp_malloc_pool+0x3e>
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
  return NULL;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	0800f5dc 	.word	0x0800f5dc
 8004154:	0800f60c 	.word	0x0800f60c
 8004158:	0800f630 	.word	0x0800f630

0800415c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	4603      	mov	r3, r0
 8004164:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8004166:	79fb      	ldrb	r3, [r7, #7]
 8004168:	2b08      	cmp	r3, #8
 800416a:	d908      	bls.n	800417e <memp_malloc+0x22>
 800416c:	4b0a      	ldr	r3, [pc, #40]	; (8004198 <memp_malloc+0x3c>)
 800416e:	f240 1287 	movw	r2, #391	; 0x187
 8004172:	490a      	ldr	r1, [pc, #40]	; (800419c <memp_malloc+0x40>)
 8004174:	480a      	ldr	r0, [pc, #40]	; (80041a0 <memp_malloc+0x44>)
 8004176:	f00a f9d3 	bl	800e520 <iprintf>
 800417a:	2300      	movs	r3, #0
 800417c:	e008      	b.n	8004190 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800417e:	79fb      	ldrb	r3, [r7, #7]
 8004180:	4a08      	ldr	r2, [pc, #32]	; (80041a4 <memp_malloc+0x48>)
 8004182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004186:	4618      	mov	r0, r3
 8004188:	f7ff ffbe 	bl	8004108 <do_memp_malloc_pool>
 800418c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800418e:	68fb      	ldr	r3, [r7, #12]
}
 8004190:	4618      	mov	r0, r3
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	0800f5dc 	.word	0x0800f5dc
 800419c:	0800f66c 	.word	0x0800f66c
 80041a0:	0800f630 	.word	0x0800f630
 80041a4:	080115c8 	.word	0x080115c8

080041a8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	f003 0303 	and.w	r3, r3, #3
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d006      	beq.n	80041ca <do_memp_free_pool+0x22>
 80041bc:	4b0a      	ldr	r3, [pc, #40]	; (80041e8 <do_memp_free_pool+0x40>)
 80041be:	f240 129d 	movw	r2, #413	; 0x19d
 80041c2:	490a      	ldr	r1, [pc, #40]	; (80041ec <do_memp_free_pool+0x44>)
 80041c4:	480a      	ldr	r0, [pc, #40]	; (80041f0 <do_memp_free_pool+0x48>)
 80041c6:	f00a f9ab 	bl	800e520 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80041e0:	bf00      	nop
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	0800f5dc 	.word	0x0800f5dc
 80041ec:	0800f68c 	.word	0x0800f68c
 80041f0:	0800f630 	.word	0x0800f630

080041f4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	4603      	mov	r3, r0
 80041fc:	6039      	str	r1, [r7, #0]
 80041fe:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8004200:	79fb      	ldrb	r3, [r7, #7]
 8004202:	2b08      	cmp	r3, #8
 8004204:	d907      	bls.n	8004216 <memp_free+0x22>
 8004206:	4b0c      	ldr	r3, [pc, #48]	; (8004238 <memp_free+0x44>)
 8004208:	f240 12db 	movw	r2, #475	; 0x1db
 800420c:	490b      	ldr	r1, [pc, #44]	; (800423c <memp_free+0x48>)
 800420e:	480c      	ldr	r0, [pc, #48]	; (8004240 <memp_free+0x4c>)
 8004210:	f00a f986 	bl	800e520 <iprintf>
 8004214:	e00c      	b.n	8004230 <memp_free+0x3c>

  if (mem == NULL) {
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d008      	beq.n	800422e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800421c:	79fb      	ldrb	r3, [r7, #7]
 800421e:	4a09      	ldr	r2, [pc, #36]	; (8004244 <memp_free+0x50>)
 8004220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004224:	6839      	ldr	r1, [r7, #0]
 8004226:	4618      	mov	r0, r3
 8004228:	f7ff ffbe 	bl	80041a8 <do_memp_free_pool>
 800422c:	e000      	b.n	8004230 <memp_free+0x3c>
    return;
 800422e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8004230:	3708      	adds	r7, #8
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	0800f5dc 	.word	0x0800f5dc
 800423c:	0800f6ac 	.word	0x0800f6ac
 8004240:	0800f630 	.word	0x0800f630
 8004244:	080115c8 	.word	0x080115c8

08004248 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8004248:	b480      	push	{r7}
 800424a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800424c:	bf00      	nop
 800424e:	46bd      	mov	sp, r7
 8004250:	bc80      	pop	{r7}
 8004252:	4770      	bx	lr

08004254 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	60b9      	str	r1, [r7, #8]
 800425e:	607a      	str	r2, [r7, #4]
 8004260:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d105      	bne.n	8004274 <netif_add+0x20>
 8004268:	4b24      	ldr	r3, [pc, #144]	; (80042fc <netif_add+0xa8>)
 800426a:	22fb      	movs	r2, #251	; 0xfb
 800426c:	4924      	ldr	r1, [pc, #144]	; (8004300 <netif_add+0xac>)
 800426e:	4825      	ldr	r0, [pc, #148]	; (8004304 <netif_add+0xb0>)
 8004270:	f00a f956 	bl	800e520 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	3324      	adds	r3, #36	; 0x24
 8004292:	2204      	movs	r2, #4
 8004294:	2100      	movs	r1, #0
 8004296:	4618      	mov	r0, r3
 8004298:	f00a f93a 	bl	800e510 <memset>
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2203      	movs	r2, #3
 80042a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	621a      	str	r2, [r3, #32]
  netif->num = netif_num++;
 80042b0:	4b15      	ldr	r3, [pc, #84]	; (8004308 <netif_add+0xb4>)
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	1c5a      	adds	r2, r3, #1
 80042b6:	b2d1      	uxtb	r1, r2
 80042b8:	4a13      	ldr	r2, [pc, #76]	; (8004308 <netif_add+0xb4>)
 80042ba:	7011      	strb	r1, [r2, #0]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	f882 3036 	strb.w	r3, [r2, #54]	; 0x36
  netif->input = input;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6a3a      	ldr	r2, [r7, #32]
 80042c6:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	68b9      	ldr	r1, [r7, #8]
 80042ce:	68f8      	ldr	r0, [r7, #12]
 80042d0:	f000 f81e 	bl	8004310 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	4798      	blx	r3
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d001      	beq.n	80042e4 <netif_add+0x90>
    return NULL;
 80042e0:	2300      	movs	r3, #0
 80042e2:	e007      	b.n	80042f4 <netif_add+0xa0>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80042e4:	4b09      	ldr	r3, [pc, #36]	; (800430c <netif_add+0xb8>)
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80042ec:	4a07      	ldr	r2, [pc, #28]	; (800430c <netif_add+0xb8>)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 80042f2:	68fb      	ldr	r3, [r7, #12]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	0800f6c8 	.word	0x0800f6c8
 8004300:	0800f6fc 	.word	0x0800f6fc
 8004304:	0800f714 	.word	0x0800f714
 8004308:	200000d0 	.word	0x200000d0
 800430c:	200068d4 	.word	0x200068d4

08004310 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
 800431c:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d003      	beq.n	800432c <netif_set_addr+0x1c>
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d10c      	bne.n	8004346 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 800432c:	68b9      	ldr	r1, [r7, #8]
 800432e:	68f8      	ldr	r0, [r7, #12]
 8004330:	f000 f81a 	bl	8004368 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8004334:	6879      	ldr	r1, [r7, #4]
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f000 f861 	bl	80043fe <netif_set_netmask>
    netif_set_gw(netif, gw);
 800433c:	6839      	ldr	r1, [r7, #0]
 800433e:	68f8      	ldr	r0, [r7, #12]
 8004340:	f000 f84a 	bl	80043d8 <netif_set_gw>
 8004344:	e00b      	b.n	800435e <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 8004346:	6879      	ldr	r1, [r7, #4]
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f000 f858 	bl	80043fe <netif_set_netmask>
    netif_set_gw(netif, gw);
 800434e:	6839      	ldr	r1, [r7, #0]
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f000 f841 	bl	80043d8 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 8004356:	68b9      	ldr	r1, [r7, #8]
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f000 f805 	bl	8004368 <netif_set_ipaddr>
  }
}
 800435e:	bf00      	nop
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
	...

08004368 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
 8004370:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d003      	beq.n	8004380 <netif_set_ipaddr+0x18>
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	60fb      	str	r3, [r7, #12]
 800437e:	e002      	b.n	8004386 <netif_set_ipaddr+0x1e>
 8004380:	4b14      	ldr	r3, [pc, #80]	; (80043d4 <netif_set_ipaddr+0x6c>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	3304      	adds	r3, #4
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	429a      	cmp	r2, r3
 8004390:	d01c      	beq.n	80043cc <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	3304      	adds	r3, #4
 8004396:	f107 020c 	add.w	r2, r7, #12
 800439a:	4611      	mov	r1, r2
 800439c:	4618      	mov	r0, r3
 800439e:	f002 f8b7 	bl	8006510 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	3304      	adds	r3, #4
 80043a6:	f107 020c 	add.w	r2, r7, #12
 80043aa:	4611      	mov	r1, r2
 80043ac:	4618      	mov	r0, r3
 80043ae:	f005 ff27 	bl	800a200 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d002      	beq.n	80043be <netif_set_ipaddr+0x56>
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	e000      	b.n	80043c0 <netif_set_ipaddr+0x58>
 80043be:	2300      	movs	r3, #0
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80043c4:	2101      	movs	r1, #1
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f85d 	bl	8004486 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 80043cc:	bf00      	nop
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	0801163c 	.word	0x0801163c

080043d8 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d002      	beq.n	80043ee <netif_set_gw+0x16>
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	e000      	b.n	80043f0 <netif_set_gw+0x18>
 80043ee:	2300      	movs	r3, #0
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bc80      	pop	{r7}
 80043fc:	4770      	bx	lr

080043fe <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 80043fe:	b480      	push	{r7}
 8004400:	b083      	sub	sp, #12
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
 8004406:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d002      	beq.n	8004414 <netif_set_netmask+0x16>
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	e000      	b.n	8004416 <netif_set_netmask+0x18>
 8004414:	2300      	movs	r3, #0
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 800441a:	bf00      	nop
 800441c:	370c      	adds	r7, #12
 800441e:	46bd      	mov	sp, r7
 8004420:	bc80      	pop	{r7}
 8004422:	4770      	bx	lr

08004424 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800442c:	4a03      	ldr	r2, [pc, #12]	; (800443c <netif_set_default+0x18>)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8004432:	bf00      	nop
 8004434:	370c      	adds	r7, #12
 8004436:	46bd      	mov	sp, r7
 8004438:	bc80      	pop	{r7}
 800443a:	4770      	bx	lr
 800443c:	200068d8 	.word	0x200068d8

08004440 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800444e:	f003 0301 	and.w	r3, r3, #1
 8004452:	2b00      	cmp	r3, #0
 8004454:	d113      	bne.n	800447e <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800445c:	f043 0301 	orr.w	r3, r3, #1
 8004460:	b2da      	uxtb	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800446e:	f003 0304 	and.w	r3, r3, #4
 8004472:	2b00      	cmp	r3, #0
 8004474:	d003      	beq.n	800447e <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8004476:	2103      	movs	r1, #3
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 f804 	bl	8004486 <netif_issue_reports>
    }
  }
}
 800447e:	bf00      	nop
 8004480:	3708      	adds	r7, #8
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b082      	sub	sp, #8
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
 800448e:	460b      	mov	r3, r1
 8004490:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004492:	78fb      	ldrb	r3, [r7, #3]
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	2b00      	cmp	r3, #0
 800449a:	d011      	beq.n	80044c0 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	3304      	adds	r3, #4
 80044a0:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d00c      	beq.n	80044c0 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80044ac:	f003 0308 	and.w	r3, r3, #8
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d005      	beq.n	80044c0 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	3304      	adds	r3, #4
 80044b8:	4619      	mov	r1, r3
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f008 fcca 	bl	800ce54 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 80044c0:	bf00      	nop
 80044c2:	3708      	adds	r7, #8
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d012      	beq.n	8004504 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80044e4:	f023 0301 	bic.w	r3, r3, #1
 80044e8:	b2da      	uxtb	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80044f6:	f003 0308 	and.w	r3, r3, #8
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d002      	beq.n	8004504 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f008 f86a 	bl	800c5d8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8004504:	bf00      	nop
 8004506:	3708      	adds	r7, #8
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800451a:	f003 0304 	and.w	r3, r3, #4
 800451e:	2b00      	cmp	r3, #0
 8004520:	d11e      	bne.n	8004560 <netif_set_link_up+0x54>
    netif->flags |= NETIF_FLAG_LINK_UP;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8004528:	f043 0304 	orr.w	r3, r3, #4
 800452c:	b2da      	uxtb	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

#if LWIP_DHCP
    dhcp_network_changed(netif);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f006 fa41 	bl	800a9bc <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    if (netif->flags & NETIF_FLAG_UP) {
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8004540:	f003 0301 	and.w	r3, r3, #1
 8004544:	2b00      	cmp	r3, #0
 8004546:	d003      	beq.n	8004550 <netif_set_link_up+0x44>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 8004548:	2103      	movs	r1, #3
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f7ff ff9b 	bl	8004486 <netif_issue_reports>
    }
    NETIF_LINK_CALLBACK(netif);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	69db      	ldr	r3, [r3, #28]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d003      	beq.n	8004560 <netif_set_link_up+0x54>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	69db      	ldr	r3, [r3, #28]
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	4798      	blx	r3
  }
}
 8004560:	bf00      	nop
 8004562:	3708      	adds	r7, #8
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif )
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8004576:	f003 0304 	and.w	r3, r3, #4
 800457a:	2b00      	cmp	r3, #0
 800457c:	d010      	beq.n	80045a0 <netif_set_link_down+0x38>
    netif->flags &= ~NETIF_FLAG_LINK_UP;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8004584:	f023 0304 	bic.w	r3, r3, #4
 8004588:	b2da      	uxtb	r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
    NETIF_LINK_CALLBACK(netif);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	69db      	ldr	r3, [r3, #28]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d003      	beq.n	80045a0 <netif_set_link_down+0x38>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	69db      	ldr	r3, [r3, #28]
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	4798      	blx	r3
  }
}
 80045a0:	bf00      	nop
 80045a2:	3708      	adds	r7, #8
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  if (netif) {
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d002      	beq.n	80045be <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	683a      	ldr	r2, [r7, #0]
 80045bc:	61da      	str	r2, [r3, #28]
  }
}
 80045be:	bf00      	nop
 80045c0:	370c      	adds	r7, #12
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bc80      	pop	{r7}
 80045c6:	4770      	bx	lr

080045c8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80045ce:	4b0e      	ldr	r3, [pc, #56]	; (8004608 <pbuf_free_ooseq+0x40>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80045d4:	4b0d      	ldr	r3, [pc, #52]	; (800460c <pbuf_free_ooseq+0x44>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	607b      	str	r3, [r7, #4]
 80045da:	e00f      	b.n	80045fc <pbuf_free_ooseq+0x34>
    if (NULL != pcb->ooseq) {
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d008      	beq.n	80045f6 <pbuf_free_ooseq+0x2e>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e8:	4618      	mov	r0, r3
 80045ea:	f001 fcce 	bl	8005f8a <tcp_segs_free>
      pcb->ooseq = NULL;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 80045f4:	e005      	b.n	8004602 <pbuf_free_ooseq+0x3a>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	607b      	str	r3, [r7, #4]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d1ec      	bne.n	80045dc <pbuf_free_ooseq+0x14>
    }
  }
}
 8004602:	3708      	adds	r7, #8
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	200068dc 	.word	0x200068dc
 800460c:	200068e4 	.word	0x200068e4

08004610 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8004610:	b480      	push	{r7}
 8004612:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8004614:	4b03      	ldr	r3, [pc, #12]	; (8004624 <pbuf_pool_is_empty+0x14>)
 8004616:	2201      	movs	r2, #1
 8004618:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800461a:	bf00      	nop
 800461c:	46bd      	mov	sp, r7
 800461e:	bc80      	pop	{r7}
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	200068dc 	.word	0x200068dc

08004628 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b088      	sub	sp, #32
 800462c:	af00      	add	r7, sp, #0
 800462e:	4603      	mov	r3, r0
 8004630:	71fb      	strb	r3, [r7, #7]
 8004632:	460b      	mov	r3, r1
 8004634:	80bb      	strh	r3, [r7, #4]
 8004636:	4613      	mov	r3, r2
 8004638:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 800463a:	79fb      	ldrb	r3, [r7, #7]
 800463c:	2b04      	cmp	r3, #4
 800463e:	d81c      	bhi.n	800467a <pbuf_alloc+0x52>
 8004640:	a201      	add	r2, pc, #4	; (adr r2, 8004648 <pbuf_alloc+0x20>)
 8004642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004646:	bf00      	nop
 8004648:	0800465d 	.word	0x0800465d
 800464c:	08004663 	.word	0x08004663
 8004650:	08004669 	.word	0x08004669
 8004654:	0800466f 	.word	0x0800466f
 8004658:	08004675 	.word	0x08004675
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800465c:	2336      	movs	r3, #54	; 0x36
 800465e:	82fb      	strh	r3, [r7, #22]
    break;
 8004660:	e014      	b.n	800468c <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8004662:	2322      	movs	r3, #34	; 0x22
 8004664:	82fb      	strh	r3, [r7, #22]
    break;
 8004666:	e011      	b.n	800468c <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8004668:	230e      	movs	r3, #14
 800466a:	82fb      	strh	r3, [r7, #22]
    break;
 800466c:	e00e      	b.n	800468c <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800466e:	2300      	movs	r3, #0
 8004670:	82fb      	strh	r3, [r7, #22]
    break;
 8004672:	e00b      	b.n	800468c <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 8004674:	2300      	movs	r3, #0
 8004676:	82fb      	strh	r3, [r7, #22]
    break;
 8004678:	e008      	b.n	800468c <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800467a:	4ba5      	ldr	r3, [pc, #660]	; (8004910 <pbuf_alloc+0x2e8>)
 800467c:	f44f 728b 	mov.w	r2, #278	; 0x116
 8004680:	49a4      	ldr	r1, [pc, #656]	; (8004914 <pbuf_alloc+0x2ec>)
 8004682:	48a5      	ldr	r0, [pc, #660]	; (8004918 <pbuf_alloc+0x2f0>)
 8004684:	f009 ff4c 	bl	800e520 <iprintf>
    return NULL;
 8004688:	2300      	movs	r3, #0
 800468a:	e15d      	b.n	8004948 <pbuf_alloc+0x320>
  }

  switch (type) {
 800468c:	79bb      	ldrb	r3, [r7, #6]
 800468e:	2b03      	cmp	r3, #3
 8004690:	f200 8134 	bhi.w	80048fc <pbuf_alloc+0x2d4>
 8004694:	a201      	add	r2, pc, #4	; (adr r2, 800469c <pbuf_alloc+0x74>)
 8004696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800469a:	bf00      	nop
 800469c:	0800483d 	.word	0x0800483d
 80046a0:	080048c9 	.word	0x080048c9
 80046a4:	080048c9 	.word	0x080048c9
 80046a8:	080046ad 	.word	0x080046ad
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80046ac:	2008      	movs	r0, #8
 80046ae:	f7ff fd55 	bl	800415c <memp_malloc>
 80046b2:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d103      	bne.n	80046c2 <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 80046ba:	f7ff ffa9 	bl	8004610 <pbuf_pool_is_empty>
      return NULL;
 80046be:	2300      	movs	r3, #0
 80046c0:	e142      	b.n	8004948 <pbuf_alloc+0x320>
    }
    p->type = type;
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	79ba      	ldrb	r2, [r7, #6]
 80046c6:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	2200      	movs	r2, #0
 80046cc:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 80046ce:	8afb      	ldrh	r3, [r7, #22]
 80046d0:	3310      	adds	r3, #16
 80046d2:	69fa      	ldr	r2, [r7, #28]
 80046d4:	4413      	add	r3, r2
 80046d6:	3303      	adds	r3, #3
 80046d8:	f023 0303 	bic.w	r3, r3, #3
 80046dc:	461a      	mov	r2, r3
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f003 0303 	and.w	r3, r3, #3
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d006      	beq.n	80046fc <pbuf_alloc+0xd4>
 80046ee:	4b88      	ldr	r3, [pc, #544]	; (8004910 <pbuf_alloc+0x2e8>)
 80046f0:	f240 1229 	movw	r2, #297	; 0x129
 80046f4:	4989      	ldr	r1, [pc, #548]	; (800491c <pbuf_alloc+0x2f4>)
 80046f6:	4888      	ldr	r0, [pc, #544]	; (8004918 <pbuf_alloc+0x2f0>)
 80046f8:	f009 ff12 	bl	800e520 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	88ba      	ldrh	r2, [r7, #4]
 8004700:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8004702:	8afb      	ldrh	r3, [r7, #22]
 8004704:	3303      	adds	r3, #3
 8004706:	f023 0303 	bic.w	r3, r3, #3
 800470a:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 800470e:	88bb      	ldrh	r3, [r7, #4]
 8004710:	4293      	cmp	r3, r2
 8004712:	bf28      	it	cs
 8004714:	4613      	movcs	r3, r2
 8004716:	b29a      	uxth	r2, r3
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	69fa      	ldr	r2, [r7, #28]
 8004722:	8952      	ldrh	r2, [r2, #10]
 8004724:	441a      	add	r2, r3
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800472c:	429a      	cmp	r2, r3
 800472e:	d906      	bls.n	800473e <pbuf_alloc+0x116>
 8004730:	4b77      	ldr	r3, [pc, #476]	; (8004910 <pbuf_alloc+0x2e8>)
 8004732:	f44f 7298 	mov.w	r2, #304	; 0x130
 8004736:	497a      	ldr	r1, [pc, #488]	; (8004920 <pbuf_alloc+0x2f8>)
 8004738:	4877      	ldr	r0, [pc, #476]	; (8004918 <pbuf_alloc+0x2f0>)
 800473a:	f009 fef1 	bl	800e520 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800473e:	8afb      	ldrh	r3, [r7, #22]
 8004740:	3303      	adds	r3, #3
 8004742:	f023 0303 	bic.w	r3, r3, #3
 8004746:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800474a:	d106      	bne.n	800475a <pbuf_alloc+0x132>
 800474c:	4b70      	ldr	r3, [pc, #448]	; (8004910 <pbuf_alloc+0x2e8>)
 800474e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8004752:	4974      	ldr	r1, [pc, #464]	; (8004924 <pbuf_alloc+0x2fc>)
 8004754:	4870      	ldr	r0, [pc, #448]	; (8004918 <pbuf_alloc+0x2f0>)
 8004756:	f009 fee3 	bl	800e520 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	2201      	movs	r2, #1
 800475e:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 8004764:	88bb      	ldrh	r3, [r7, #4]
 8004766:	69fa      	ldr	r2, [r7, #28]
 8004768:	8952      	ldrh	r2, [r2, #10]
 800476a:	1a9b      	subs	r3, r3, r2
 800476c:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800476e:	e061      	b.n	8004834 <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8004770:	2008      	movs	r0, #8
 8004772:	f7ff fcf3 	bl	800415c <memp_malloc>
 8004776:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d106      	bne.n	800478c <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 800477e:	f7ff ff47 	bl	8004610 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 8004782:	69f8      	ldr	r0, [r7, #28]
 8004784:	f000 fac2 	bl	8004d0c <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 8004788:	2300      	movs	r3, #0
 800478a:	e0dd      	b.n	8004948 <pbuf_alloc+0x320>
      }
      q->type = type;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	79ba      	ldrb	r2, [r7, #6]
 8004790:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	68fa      	ldr	r2, [r7, #12]
 80047a2:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80047aa:	4293      	cmp	r3, r2
 80047ac:	dd06      	ble.n	80047bc <pbuf_alloc+0x194>
 80047ae:	4b58      	ldr	r3, [pc, #352]	; (8004910 <pbuf_alloc+0x2e8>)
 80047b0:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 80047b4:	495c      	ldr	r1, [pc, #368]	; (8004928 <pbuf_alloc+0x300>)
 80047b6:	4858      	ldr	r0, [pc, #352]	; (8004918 <pbuf_alloc+0x2f0>)
 80047b8:	f009 feb2 	bl	800e520 <iprintf>
      q->tot_len = (u16_t)rem_len;
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	b29a      	uxth	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80047cc:	bf28      	it	cs
 80047ce:	f44f 7314 	movcs.w	r3, #592	; 0x250
 80047d2:	b29a      	uxth	r2, r3
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f103 0210 	add.w	r2, r3, #16
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f003 0303 	and.w	r3, r3, #3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d006      	beq.n	80047fc <pbuf_alloc+0x1d4>
 80047ee:	4b48      	ldr	r3, [pc, #288]	; (8004910 <pbuf_alloc+0x2e8>)
 80047f0:	f44f 72a9 	mov.w	r2, #338	; 0x152
 80047f4:	494d      	ldr	r1, [pc, #308]	; (800492c <pbuf_alloc+0x304>)
 80047f6:	4848      	ldr	r0, [pc, #288]	; (8004918 <pbuf_alloc+0x2f0>)
 80047f8:	f009 fe92 	bl	800e520 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	69fa      	ldr	r2, [r7, #28]
 8004802:	8952      	ldrh	r2, [r2, #10]
 8004804:	441a      	add	r2, r3
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800480c:	429a      	cmp	r2, r3
 800480e:	d906      	bls.n	800481e <pbuf_alloc+0x1f6>
 8004810:	4b3f      	ldr	r3, [pc, #252]	; (8004910 <pbuf_alloc+0x2e8>)
 8004812:	f240 1255 	movw	r2, #341	; 0x155
 8004816:	4942      	ldr	r1, [pc, #264]	; (8004920 <pbuf_alloc+0x2f8>)
 8004818:	483f      	ldr	r0, [pc, #252]	; (8004918 <pbuf_alloc+0x2f0>)
 800481a:	f009 fe81 	bl	800e520 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2201      	movs	r2, #1
 8004822:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	895b      	ldrh	r3, [r3, #10]
 8004828:	461a      	mov	r2, r3
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	1a9b      	subs	r3, r3, r2
 800482e:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	2b00      	cmp	r3, #0
 8004838:	dc9a      	bgt.n	8004770 <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 800483a:	e07e      	b.n	800493a <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 800483c:	8afb      	ldrh	r3, [r7, #22]
 800483e:	3313      	adds	r3, #19
 8004840:	b29b      	uxth	r3, r3
 8004842:	f023 0303 	bic.w	r3, r3, #3
 8004846:	b29a      	uxth	r2, r3
 8004848:	88bb      	ldrh	r3, [r7, #4]
 800484a:	3303      	adds	r3, #3
 800484c:	b29b      	uxth	r3, r3
 800484e:	f023 0303 	bic.w	r3, r3, #3
 8004852:	b29b      	uxth	r3, r3
 8004854:	4413      	add	r3, r2
 8004856:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8004858:	897a      	ldrh	r2, [r7, #10]
 800485a:	88bb      	ldrh	r3, [r7, #4]
 800485c:	3303      	adds	r3, #3
 800485e:	f023 0303 	bic.w	r3, r3, #3
 8004862:	429a      	cmp	r2, r3
 8004864:	d201      	bcs.n	800486a <pbuf_alloc+0x242>
        return NULL;
 8004866:	2300      	movs	r3, #0
 8004868:	e06e      	b.n	8004948 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 800486a:	897b      	ldrh	r3, [r7, #10]
 800486c:	4618      	mov	r0, r3
 800486e:	f7ff fb19 	bl	8003ea4 <mem_malloc>
 8004872:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <pbuf_alloc+0x256>
      return NULL;
 800487a:	2300      	movs	r3, #0
 800487c:	e064      	b.n	8004948 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800487e:	8afb      	ldrh	r3, [r7, #22]
 8004880:	3310      	adds	r3, #16
 8004882:	69fa      	ldr	r2, [r7, #28]
 8004884:	4413      	add	r3, r2
 8004886:	3303      	adds	r3, #3
 8004888:	f023 0303 	bic.w	r3, r3, #3
 800488c:	461a      	mov	r2, r3
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	88ba      	ldrh	r2, [r7, #4]
 8004896:	811a      	strh	r2, [r3, #8]
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	891a      	ldrh	r2, [r3, #8]
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 80048a0:	69fb      	ldr	r3, [r7, #28]
 80048a2:	2200      	movs	r2, #0
 80048a4:	601a      	str	r2, [r3, #0]
    p->type = type;
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	79ba      	ldrb	r2, [r7, #6]
 80048aa:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f003 0303 	and.w	r3, r3, #3
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d03f      	beq.n	8004938 <pbuf_alloc+0x310>
 80048b8:	4b15      	ldr	r3, [pc, #84]	; (8004910 <pbuf_alloc+0x2e8>)
 80048ba:	f240 1277 	movw	r2, #375	; 0x177
 80048be:	491c      	ldr	r1, [pc, #112]	; (8004930 <pbuf_alloc+0x308>)
 80048c0:	4815      	ldr	r0, [pc, #84]	; (8004918 <pbuf_alloc+0x2f0>)
 80048c2:	f009 fe2d 	bl	800e520 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 80048c6:	e037      	b.n	8004938 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80048c8:	2007      	movs	r0, #7
 80048ca:	f7ff fc47 	bl	800415c <memp_malloc>
 80048ce:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 80048d6:	2300      	movs	r3, #0
 80048d8:	e036      	b.n	8004948 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	2200      	movs	r2, #0
 80048de:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	88ba      	ldrh	r2, [r7, #4]
 80048e4:	811a      	strh	r2, [r3, #8]
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	891a      	ldrh	r2, [r3, #8]
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	2200      	movs	r2, #0
 80048f2:	601a      	str	r2, [r3, #0]
    p->type = type;
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	79ba      	ldrb	r2, [r7, #6]
 80048f8:	731a      	strb	r2, [r3, #12]
    break;
 80048fa:	e01e      	b.n	800493a <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80048fc:	4b04      	ldr	r3, [pc, #16]	; (8004910 <pbuf_alloc+0x2e8>)
 80048fe:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8004902:	490c      	ldr	r1, [pc, #48]	; (8004934 <pbuf_alloc+0x30c>)
 8004904:	4804      	ldr	r0, [pc, #16]	; (8004918 <pbuf_alloc+0x2f0>)
 8004906:	f009 fe0b 	bl	800e520 <iprintf>
    return NULL;
 800490a:	2300      	movs	r3, #0
 800490c:	e01c      	b.n	8004948 <pbuf_alloc+0x320>
 800490e:	bf00      	nop
 8004910:	0800f73c 	.word	0x0800f73c
 8004914:	0800f76c 	.word	0x0800f76c
 8004918:	0800f788 	.word	0x0800f788
 800491c:	0800f7b0 	.word	0x0800f7b0
 8004920:	0800f7e0 	.word	0x0800f7e0
 8004924:	0800f814 	.word	0x0800f814
 8004928:	0800f848 	.word	0x0800f848
 800492c:	0800f85c 	.word	0x0800f85c
 8004930:	0800f88c 	.word	0x0800f88c
 8004934:	0800f8b8 	.word	0x0800f8b8
    break;
 8004938:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	2201      	movs	r2, #1
 800493e:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	2200      	movs	r2, #0
 8004944:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8004946:	69fb      	ldr	r3, [r7, #28]
}
 8004948:	4618      	mov	r0, r3
 800494a:	3720      	adds	r7, #32
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	603b      	str	r3, [r7, #0]
 8004958:	4603      	mov	r3, r0
 800495a:	71fb      	strb	r3, [r7, #7]
 800495c:	460b      	mov	r3, r1
 800495e:	80bb      	strh	r3, [r7, #4]
 8004960:	4613      	mov	r3, r2
 8004962:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 8004964:	79fb      	ldrb	r3, [r7, #7]
 8004966:	2b04      	cmp	r3, #4
 8004968:	d81b      	bhi.n	80049a2 <pbuf_alloced_custom+0x52>
 800496a:	a201      	add	r2, pc, #4	; (adr r2, 8004970 <pbuf_alloced_custom+0x20>)
 800496c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004970:	08004985 	.word	0x08004985
 8004974:	0800498b 	.word	0x0800498b
 8004978:	08004991 	.word	0x08004991
 800497c:	08004997 	.word	0x08004997
 8004980:	0800499d 	.word	0x0800499d
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8004984:	2336      	movs	r3, #54	; 0x36
 8004986:	81fb      	strh	r3, [r7, #14]
    break;
 8004988:	e014      	b.n	80049b4 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800498a:	2322      	movs	r3, #34	; 0x22
 800498c:	81fb      	strh	r3, [r7, #14]
    break;
 800498e:	e011      	b.n	80049b4 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8004990:	230e      	movs	r3, #14
 8004992:	81fb      	strh	r3, [r7, #14]
    break;
 8004994:	e00e      	b.n	80049b4 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 8004996:	2300      	movs	r3, #0
 8004998:	81fb      	strh	r3, [r7, #14]
    break;
 800499a:	e00b      	b.n	80049b4 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 800499c:	2300      	movs	r3, #0
 800499e:	81fb      	strh	r3, [r7, #14]
    break;
 80049a0:	e008      	b.n	80049b4 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 80049a2:	4b1d      	ldr	r3, [pc, #116]	; (8004a18 <pbuf_alloced_custom+0xc8>)
 80049a4:	f240 12c5 	movw	r2, #453	; 0x1c5
 80049a8:	491c      	ldr	r1, [pc, #112]	; (8004a1c <pbuf_alloced_custom+0xcc>)
 80049aa:	481d      	ldr	r0, [pc, #116]	; (8004a20 <pbuf_alloced_custom+0xd0>)
 80049ac:	f009 fdb8 	bl	800e520 <iprintf>
    return NULL;
 80049b0:	2300      	movs	r3, #0
 80049b2:	e02d      	b.n	8004a10 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80049b4:	89fb      	ldrh	r3, [r7, #14]
 80049b6:	3303      	adds	r3, #3
 80049b8:	f023 0203 	bic.w	r2, r3, #3
 80049bc:	88bb      	ldrh	r3, [r7, #4]
 80049be:	441a      	add	r2, r3
 80049c0:	8bbb      	ldrh	r3, [r7, #28]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d901      	bls.n	80049ca <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80049c6:	2300      	movs	r3, #0
 80049c8:	e022      	b.n	8004a10 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	2200      	movs	r2, #0
 80049ce:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d008      	beq.n	80049e8 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80049d6:	89fb      	ldrh	r3, [r7, #14]
 80049d8:	3303      	adds	r3, #3
 80049da:	f023 0303 	bic.w	r3, r3, #3
 80049de:	69ba      	ldr	r2, [r7, #24]
 80049e0:	441a      	add	r2, r3
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	605a      	str	r2, [r3, #4]
 80049e6:	e002      	b.n	80049ee <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	2200      	movs	r2, #0
 80049ec:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	2202      	movs	r2, #2
 80049f2:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	88ba      	ldrh	r2, [r7, #4]
 80049f8:	811a      	strh	r2, [r3, #8]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	891a      	ldrh	r2, [r3, #8]
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	79ba      	ldrb	r2, [r7, #6]
 8004a06:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 8004a0e:	683b      	ldr	r3, [r7, #0]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	0800f73c 	.word	0x0800f73c
 8004a1c:	0800f8d4 	.word	0x0800f8d4
 8004a20:	0800f788 	.word	0x0800f788

08004a24 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b086      	sub	sp, #24
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d106      	bne.n	8004a44 <pbuf_realloc+0x20>
 8004a36:	4b4b      	ldr	r3, [pc, #300]	; (8004b64 <pbuf_realloc+0x140>)
 8004a38:	f240 12f3 	movw	r2, #499	; 0x1f3
 8004a3c:	494a      	ldr	r1, [pc, #296]	; (8004b68 <pbuf_realloc+0x144>)
 8004a3e:	484b      	ldr	r0, [pc, #300]	; (8004b6c <pbuf_realloc+0x148>)
 8004a40:	f009 fd6e 	bl	800e520 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	7b1b      	ldrb	r3, [r3, #12]
 8004a48:	2b03      	cmp	r3, #3
 8004a4a:	d012      	beq.n	8004a72 <pbuf_realloc+0x4e>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	7b1b      	ldrb	r3, [r3, #12]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d00e      	beq.n	8004a72 <pbuf_realloc+0x4e>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	7b1b      	ldrb	r3, [r3, #12]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00a      	beq.n	8004a72 <pbuf_realloc+0x4e>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	7b1b      	ldrb	r3, [r3, #12]
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d006      	beq.n	8004a72 <pbuf_realloc+0x4e>
 8004a64:	4b3f      	ldr	r3, [pc, #252]	; (8004b64 <pbuf_realloc+0x140>)
 8004a66:	f240 12f7 	movw	r2, #503	; 0x1f7
 8004a6a:	4941      	ldr	r1, [pc, #260]	; (8004b70 <pbuf_realloc+0x14c>)
 8004a6c:	483f      	ldr	r0, [pc, #252]	; (8004b6c <pbuf_realloc+0x148>)
 8004a6e:	f009 fd57 	bl	800e520 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	891b      	ldrh	r3, [r3, #8]
 8004a76:	887a      	ldrh	r2, [r7, #2]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d26f      	bcs.n	8004b5c <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 8004a7c:	887b      	ldrh	r3, [r7, #2]
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	8912      	ldrh	r2, [r2, #8]
 8004a82:	1a9b      	subs	r3, r3, r2
 8004a84:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8004a86:	887b      	ldrh	r3, [r7, #2]
 8004a88:	827b      	strh	r3, [r7, #18]
  q = p;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8004a8e:	e025      	b.n	8004adc <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	895b      	ldrh	r3, [r3, #10]
 8004a94:	8a7a      	ldrh	r2, [r7, #18]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	dd06      	ble.n	8004ab2 <pbuf_realloc+0x8e>
 8004aa4:	4b2f      	ldr	r3, [pc, #188]	; (8004b64 <pbuf_realloc+0x140>)
 8004aa6:	f240 220b 	movw	r2, #523	; 0x20b
 8004aaa:	4932      	ldr	r1, [pc, #200]	; (8004b74 <pbuf_realloc+0x150>)
 8004aac:	482f      	ldr	r0, [pc, #188]	; (8004b6c <pbuf_realloc+0x148>)
 8004aae:	f009 fd37 	bl	800e520 <iprintf>
    q->tot_len += (u16_t)grow;
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	891a      	ldrh	r2, [r3, #8]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	4413      	add	r3, r2
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d106      	bne.n	8004adc <pbuf_realloc+0xb8>
 8004ace:	4b25      	ldr	r3, [pc, #148]	; (8004b64 <pbuf_realloc+0x140>)
 8004ad0:	f240 220f 	movw	r2, #527	; 0x20f
 8004ad4:	4928      	ldr	r1, [pc, #160]	; (8004b78 <pbuf_realloc+0x154>)
 8004ad6:	4825      	ldr	r0, [pc, #148]	; (8004b6c <pbuf_realloc+0x148>)
 8004ad8:	f009 fd22 	bl	800e520 <iprintf>
  while (rem_len > q->len) {
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	895b      	ldrh	r3, [r3, #10]
 8004ae0:	8a7a      	ldrh	r2, [r7, #18]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d8d4      	bhi.n	8004a90 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	7b1b      	ldrb	r3, [r3, #12]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d122      	bne.n	8004b34 <pbuf_realloc+0x110>
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	895b      	ldrh	r3, [r3, #10]
 8004af2:	8a7a      	ldrh	r2, [r7, #18]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d01d      	beq.n	8004b34 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	7b5b      	ldrb	r3, [r3, #13]
 8004afc:	f003 0302 	and.w	r3, r3, #2
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d117      	bne.n	8004b34 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	461a      	mov	r2, r3
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	b29a      	uxth	r2, r3
 8004b10:	8a7b      	ldrh	r3, [r7, #18]
 8004b12:	4413      	add	r3, r2
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	4619      	mov	r1, r3
 8004b18:	6978      	ldr	r0, [r7, #20]
 8004b1a:	f7ff f8e7 	bl	8003cec <mem_trim>
 8004b1e:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d106      	bne.n	8004b34 <pbuf_realloc+0x110>
 8004b26:	4b0f      	ldr	r3, [pc, #60]	; (8004b64 <pbuf_realloc+0x140>)
 8004b28:	f240 221d 	movw	r2, #541	; 0x21d
 8004b2c:	4913      	ldr	r1, [pc, #76]	; (8004b7c <pbuf_realloc+0x158>)
 8004b2e:	480f      	ldr	r0, [pc, #60]	; (8004b6c <pbuf_realloc+0x148>)
 8004b30:	f009 fcf6 	bl	800e520 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	8a7a      	ldrh	r2, [r7, #18]
 8004b38:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	895a      	ldrh	r2, [r3, #10]
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d004      	beq.n	8004b54 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 f8dc 	bl	8004d0c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	2200      	movs	r2, #0
 8004b58:	601a      	str	r2, [r3, #0]
 8004b5a:	e000      	b.n	8004b5e <pbuf_realloc+0x13a>
    return;
 8004b5c:	bf00      	nop

}
 8004b5e:	3718      	adds	r7, #24
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	0800f73c 	.word	0x0800f73c
 8004b68:	0800f8f8 	.word	0x0800f8f8
 8004b6c:	0800f788 	.word	0x0800f788
 8004b70:	0800f910 	.word	0x0800f910
 8004b74:	0800f92c 	.word	0x0800f92c
 8004b78:	0800f940 	.word	0x0800f940
 8004b7c:	0800f958 	.word	0x0800f958

08004b80 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	460b      	mov	r3, r1
 8004b8a:	807b      	strh	r3, [r7, #2]
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d106      	bne.n	8004ba4 <pbuf_header_impl+0x24>
 8004b96:	4b46      	ldr	r3, [pc, #280]	; (8004cb0 <pbuf_header_impl+0x130>)
 8004b98:	f240 223f 	movw	r2, #575	; 0x23f
 8004b9c:	4945      	ldr	r1, [pc, #276]	; (8004cb4 <pbuf_header_impl+0x134>)
 8004b9e:	4846      	ldr	r0, [pc, #280]	; (8004cb8 <pbuf_header_impl+0x138>)
 8004ba0:	f009 fcbe 	bl	800e520 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 8004ba4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d002      	beq.n	8004bb2 <pbuf_header_impl+0x32>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d101      	bne.n	8004bb6 <pbuf_header_impl+0x36>
    return 0;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	e078      	b.n	8004ca8 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 8004bb6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	da10      	bge.n	8004be0 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 8004bbe:	887b      	ldrh	r3, [r7, #2]
 8004bc0:	425b      	negs	r3, r3
 8004bc2:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	895b      	ldrh	r3, [r3, #10]
 8004bc8:	89fa      	ldrh	r2, [r7, #14]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d90a      	bls.n	8004be4 <pbuf_header_impl+0x64>
 8004bce:	4b38      	ldr	r3, [pc, #224]	; (8004cb0 <pbuf_header_impl+0x130>)
 8004bd0:	f240 2247 	movw	r2, #583	; 0x247
 8004bd4:	4939      	ldr	r1, [pc, #228]	; (8004cbc <pbuf_header_impl+0x13c>)
 8004bd6:	4838      	ldr	r0, [pc, #224]	; (8004cb8 <pbuf_header_impl+0x138>)
 8004bd8:	f009 fca2 	bl	800e520 <iprintf>
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e063      	b.n	8004ca8 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 8004be0:	887b      	ldrh	r3, [r7, #2]
 8004be2:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	7b1b      	ldrb	r3, [r3, #12]
 8004be8:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8004bf0:	89bb      	ldrh	r3, [r7, #12]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d002      	beq.n	8004bfc <pbuf_header_impl+0x7c>
 8004bf6:	89bb      	ldrh	r3, [r7, #12]
 8004bf8:	2b03      	cmp	r3, #3
 8004bfa:	d112      	bne.n	8004c22 <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004c04:	425b      	negs	r3, r3
 8004c06:	441a      	add	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685a      	ldr	r2, [r3, #4]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	3310      	adds	r3, #16
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d238      	bcs.n	8004c8a <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	68ba      	ldr	r2, [r7, #8]
 8004c1c:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e042      	b.n	8004ca8 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8004c22:	89bb      	ldrh	r3, [r7, #12]
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d002      	beq.n	8004c2e <pbuf_header_impl+0xae>
 8004c28:	89bb      	ldrh	r3, [r7, #12]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d124      	bne.n	8004c78 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8004c2e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	da0d      	bge.n	8004c52 <pbuf_header_impl+0xd2>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	895b      	ldrh	r3, [r3, #10]
 8004c3a:	89fa      	ldrh	r2, [r7, #14]
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d808      	bhi.n	8004c52 <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685a      	ldr	r2, [r3, #4]
 8004c44:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004c48:	425b      	negs	r3, r3
 8004c4a:	441a      	add	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	605a      	str	r2, [r3, #4]
 8004c50:	e011      	b.n	8004c76 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 8004c52:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	dd0b      	ble.n	8004c72 <pbuf_header_impl+0xf2>
 8004c5a:	787b      	ldrb	r3, [r7, #1]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d008      	beq.n	8004c72 <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	685a      	ldr	r2, [r3, #4]
 8004c64:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004c68:	425b      	negs	r3, r3
 8004c6a:	441a      	add	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	605a      	str	r2, [r3, #4]
 8004c70:	e001      	b.n	8004c76 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e018      	b.n	8004ca8 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8004c76:	e008      	b.n	8004c8a <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 8004c78:	4b0d      	ldr	r3, [pc, #52]	; (8004cb0 <pbuf_header_impl+0x130>)
 8004c7a:	f240 2277 	movw	r2, #631	; 0x277
 8004c7e:	4910      	ldr	r1, [pc, #64]	; (8004cc0 <pbuf_header_impl+0x140>)
 8004c80:	480d      	ldr	r0, [pc, #52]	; (8004cb8 <pbuf_header_impl+0x138>)
 8004c82:	f009 fc4d 	bl	800e520 <iprintf>
    return 1;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e00e      	b.n	8004ca8 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	895a      	ldrh	r2, [r3, #10]
 8004c8e:	887b      	ldrh	r3, [r7, #2]
 8004c90:	4413      	add	r3, r2
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	891a      	ldrh	r2, [r3, #8]
 8004c9c:	887b      	ldrh	r3, [r7, #2]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	0800f73c 	.word	0x0800f73c
 8004cb4:	0800f974 	.word	0x0800f974
 8004cb8:	0800f788 	.word	0x0800f788
 8004cbc:	0800f980 	.word	0x0800f980
 8004cc0:	0800f9a0 	.word	0x0800f9a0

08004cc4 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	460b      	mov	r3, r1
 8004cce:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 8004cd0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f7ff ff51 	bl	8004b80 <pbuf_header_impl>
 8004cde:	4603      	mov	r3, r0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3708      	adds	r7, #8
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 8004cf4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f7ff ff3f 	bl	8004b80 <pbuf_header_impl>
 8004d02:	4603      	mov	r3, r0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3708      	adds	r7, #8
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10b      	bne.n	8004d32 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d106      	bne.n	8004d2e <pbuf_free+0x22>
 8004d20:	4b3e      	ldr	r3, [pc, #248]	; (8004e1c <pbuf_free+0x110>)
 8004d22:	f240 22d2 	movw	r2, #722	; 0x2d2
 8004d26:	493e      	ldr	r1, [pc, #248]	; (8004e20 <pbuf_free+0x114>)
 8004d28:	483e      	ldr	r0, [pc, #248]	; (8004e24 <pbuf_free+0x118>)
 8004d2a:	f009 fbf9 	bl	800e520 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	e070      	b.n	8004e14 <pbuf_free+0x108>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	7b1b      	ldrb	r3, [r3, #12]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d012      	beq.n	8004d60 <pbuf_free+0x54>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	7b1b      	ldrb	r3, [r3, #12]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d00e      	beq.n	8004d60 <pbuf_free+0x54>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	7b1b      	ldrb	r3, [r3, #12]
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d00a      	beq.n	8004d60 <pbuf_free+0x54>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	7b1b      	ldrb	r3, [r3, #12]
 8004d4e:	2b03      	cmp	r3, #3
 8004d50:	d006      	beq.n	8004d60 <pbuf_free+0x54>
 8004d52:	4b32      	ldr	r3, [pc, #200]	; (8004e1c <pbuf_free+0x110>)
 8004d54:	f240 22de 	movw	r2, #734	; 0x2de
 8004d58:	4933      	ldr	r1, [pc, #204]	; (8004e28 <pbuf_free+0x11c>)
 8004d5a:	4832      	ldr	r0, [pc, #200]	; (8004e24 <pbuf_free+0x118>)
 8004d5c:	f009 fbe0 	bl	800e520 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 8004d60:	2300      	movs	r3, #0
 8004d62:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8004d64:	e052      	b.n	8004e0c <pbuf_free+0x100>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	89db      	ldrh	r3, [r3, #14]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d106      	bne.n	8004d7c <pbuf_free+0x70>
 8004d6e:	4b2b      	ldr	r3, [pc, #172]	; (8004e1c <pbuf_free+0x110>)
 8004d70:	f240 22eb 	movw	r2, #747	; 0x2eb
 8004d74:	492d      	ldr	r1, [pc, #180]	; (8004e2c <pbuf_free+0x120>)
 8004d76:	482b      	ldr	r0, [pc, #172]	; (8004e24 <pbuf_free+0x118>)
 8004d78:	f009 fbd2 	bl	800e520 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	89db      	ldrh	r3, [r3, #14]
 8004d80:	3b01      	subs	r3, #1
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	81da      	strh	r2, [r3, #14]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	89db      	ldrh	r3, [r3, #14]
 8004d8c:	82bb      	strh	r3, [r7, #20]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8004d8e:	8abb      	ldrh	r3, [r7, #20]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d139      	bne.n	8004e08 <pbuf_free+0xfc>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	7b1b      	ldrb	r3, [r3, #12]
 8004d9e:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	7b5b      	ldrb	r3, [r3, #13]
 8004da4:	f003 0302 	and.w	r3, r3, #2
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d011      	beq.n	8004dd0 <pbuf_free+0xc4>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d106      	bne.n	8004dc6 <pbuf_free+0xba>
 8004db8:	4b18      	ldr	r3, [pc, #96]	; (8004e1c <pbuf_free+0x110>)
 8004dba:	f240 22f9 	movw	r2, #761	; 0x2f9
 8004dbe:	491c      	ldr	r1, [pc, #112]	; (8004e30 <pbuf_free+0x124>)
 8004dc0:	4818      	ldr	r0, [pc, #96]	; (8004e24 <pbuf_free+0x118>)
 8004dc2:	f009 fbad 	bl	800e520 <iprintf>
        pc->custom_free_function(p);
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	4798      	blx	r3
 8004dce:	e015      	b.n	8004dfc <pbuf_free+0xf0>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 8004dd0:	89fb      	ldrh	r3, [r7, #14]
 8004dd2:	2b03      	cmp	r3, #3
 8004dd4:	d104      	bne.n	8004de0 <pbuf_free+0xd4>
          memp_free(MEMP_PBUF_POOL, p);
 8004dd6:	6879      	ldr	r1, [r7, #4]
 8004dd8:	2008      	movs	r0, #8
 8004dda:	f7ff fa0b 	bl	80041f4 <memp_free>
 8004dde:	e00d      	b.n	8004dfc <pbuf_free+0xf0>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8004de0:	89fb      	ldrh	r3, [r7, #14]
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d002      	beq.n	8004dec <pbuf_free+0xe0>
 8004de6:	89fb      	ldrh	r3, [r7, #14]
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d104      	bne.n	8004df6 <pbuf_free+0xea>
          memp_free(MEMP_PBUF, p);
 8004dec:	6879      	ldr	r1, [r7, #4]
 8004dee:	2007      	movs	r0, #7
 8004df0:	f7ff fa00 	bl	80041f4 <memp_free>
 8004df4:	e002      	b.n	8004dfc <pbuf_free+0xf0>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f7fe ff16 	bl	8003c28 <mem_free>
        }
      }
      count++;
 8004dfc:	7dfb      	ldrb	r3, [r7, #23]
 8004dfe:	3301      	adds	r3, #1
 8004e00:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	607b      	str	r3, [r7, #4]
 8004e06:	e001      	b.n	8004e0c <pbuf_free+0x100>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1a9      	bne.n	8004d66 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8004e12:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3718      	adds	r7, #24
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	0800f73c 	.word	0x0800f73c
 8004e20:	0800f974 	.word	0x0800f974
 8004e24:	0800f788 	.word	0x0800f788
 8004e28:	0800f9b0 	.word	0x0800f9b0
 8004e2c:	0800f9c8 	.word	0x0800f9c8
 8004e30:	0800f9e0 	.word	0x0800f9e0

08004e34 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8004e40:	e005      	b.n	8004e4e <pbuf_clen+0x1a>
    ++len;
 8004e42:	89fb      	ldrh	r3, [r7, #14]
 8004e44:	3301      	adds	r3, #1
 8004e46:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d1f6      	bne.n	8004e42 <pbuf_clen+0xe>
  }
  return len;
 8004e54:	89fb      	ldrh	r3, [r7, #14]
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3714      	adds	r7, #20
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bc80      	pop	{r7}
 8004e5e:	4770      	bx	lr

08004e60 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d010      	beq.n	8004e90 <pbuf_ref+0x30>
    SYS_ARCH_INC(p->ref, 1);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	89db      	ldrh	r3, [r3, #14]
 8004e72:	3301      	adds	r3, #1
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	81da      	strh	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	89db      	ldrh	r3, [r3, #14]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d106      	bne.n	8004e90 <pbuf_ref+0x30>
 8004e82:	4b05      	ldr	r3, [pc, #20]	; (8004e98 <pbuf_ref+0x38>)
 8004e84:	f240 3239 	movw	r2, #825	; 0x339
 8004e88:	4904      	ldr	r1, [pc, #16]	; (8004e9c <pbuf_ref+0x3c>)
 8004e8a:	4805      	ldr	r0, [pc, #20]	; (8004ea0 <pbuf_ref+0x40>)
 8004e8c:	f009 fb48 	bl	800e520 <iprintf>
  }
}
 8004e90:	bf00      	nop
 8004e92:	3708      	adds	r7, #8
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}
 8004e98:	0800f73c 	.word	0x0800f73c
 8004e9c:	0800fa04 	.word	0x0800fa04
 8004ea0:	0800f788 	.word	0x0800f788

08004ea4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b084      	sub	sp, #16
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d002      	beq.n	8004eba <pbuf_cat+0x16>
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d107      	bne.n	8004eca <pbuf_cat+0x26>
 8004eba:	4b20      	ldr	r3, [pc, #128]	; (8004f3c <pbuf_cat+0x98>)
 8004ebc:	f240 324d 	movw	r2, #845	; 0x34d
 8004ec0:	491f      	ldr	r1, [pc, #124]	; (8004f40 <pbuf_cat+0x9c>)
 8004ec2:	4820      	ldr	r0, [pc, #128]	; (8004f44 <pbuf_cat+0xa0>)
 8004ec4:	f009 fb2c 	bl	800e520 <iprintf>
 8004ec8:	e034      	b.n	8004f34 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	60fb      	str	r3, [r7, #12]
 8004ece:	e00a      	b.n	8004ee6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	891a      	ldrh	r2, [r3, #8]
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	891b      	ldrh	r3, [r3, #8]
 8004ed8:	4413      	add	r3, r2
 8004eda:	b29a      	uxth	r2, r3
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	60fb      	str	r3, [r7, #12]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1f0      	bne.n	8004ed0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	891a      	ldrh	r2, [r3, #8]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	895b      	ldrh	r3, [r3, #10]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d006      	beq.n	8004f08 <pbuf_cat+0x64>
 8004efa:	4b10      	ldr	r3, [pc, #64]	; (8004f3c <pbuf_cat+0x98>)
 8004efc:	f240 3255 	movw	r2, #853	; 0x355
 8004f00:	4911      	ldr	r1, [pc, #68]	; (8004f48 <pbuf_cat+0xa4>)
 8004f02:	4810      	ldr	r0, [pc, #64]	; (8004f44 <pbuf_cat+0xa0>)
 8004f04:	f009 fb0c 	bl	800e520 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d006      	beq.n	8004f1e <pbuf_cat+0x7a>
 8004f10:	4b0a      	ldr	r3, [pc, #40]	; (8004f3c <pbuf_cat+0x98>)
 8004f12:	f240 3256 	movw	r2, #854	; 0x356
 8004f16:	490d      	ldr	r1, [pc, #52]	; (8004f4c <pbuf_cat+0xa8>)
 8004f18:	480a      	ldr	r0, [pc, #40]	; (8004f44 <pbuf_cat+0xa0>)
 8004f1a:	f009 fb01 	bl	800e520 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	891a      	ldrh	r2, [r3, #8]
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	891b      	ldrh	r3, [r3, #8]
 8004f26:	4413      	add	r3, r2
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	683a      	ldr	r2, [r7, #0]
 8004f32:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	0800f73c 	.word	0x0800f73c
 8004f40:	0800fa18 	.word	0x0800fa18
 8004f44:	0800f788 	.word	0x0800f788
 8004f48:	0800fa50 	.word	0x0800fa50
 8004f4c:	0800fa80 	.word	0x0800fa80

08004f50 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8004f5a:	6839      	ldr	r1, [r7, #0]
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f7ff ffa1 	bl	8004ea4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8004f62:	6838      	ldr	r0, [r7, #0]
 8004f64:	f7ff ff7c 	bl	8004e60 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8004f68:	bf00      	nop
 8004f6a:	3708      	adds	r7, #8
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
 8004f78:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	81fb      	strh	r3, [r7, #14]
 8004f7e:	2300      	movs	r3, #0
 8004f80:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d008      	beq.n	8004f9a <pbuf_copy+0x2a>
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d005      	beq.n	8004f9a <pbuf_copy+0x2a>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	891a      	ldrh	r2, [r3, #8]
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	891b      	ldrh	r3, [r3, #8]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d209      	bcs.n	8004fae <pbuf_copy+0x3e>
 8004f9a:	4b54      	ldr	r3, [pc, #336]	; (80050ec <pbuf_copy+0x17c>)
 8004f9c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8004fa0:	4953      	ldr	r1, [pc, #332]	; (80050f0 <pbuf_copy+0x180>)
 8004fa2:	4854      	ldr	r0, [pc, #336]	; (80050f4 <pbuf_copy+0x184>)
 8004fa4:	f009 fabc 	bl	800e520 <iprintf>
 8004fa8:	f06f 030f 	mvn.w	r3, #15
 8004fac:	e099      	b.n	80050e2 <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	895b      	ldrh	r3, [r3, #10]
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	89fb      	ldrh	r3, [r7, #14]
 8004fb6:	1ad2      	subs	r2, r2, r3
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	895b      	ldrh	r3, [r3, #10]
 8004fbc:	4619      	mov	r1, r3
 8004fbe:	89bb      	ldrh	r3, [r7, #12]
 8004fc0:	1acb      	subs	r3, r1, r3
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	db05      	blt.n	8004fd2 <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	895a      	ldrh	r2, [r3, #10]
 8004fca:	89bb      	ldrh	r3, [r7, #12]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	817b      	strh	r3, [r7, #10]
 8004fd0:	e004      	b.n	8004fdc <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	895a      	ldrh	r2, [r3, #10]
 8004fd6:	89fb      	ldrh	r3, [r7, #14]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685a      	ldr	r2, [r3, #4]
 8004fe0:	89fb      	ldrh	r3, [r7, #14]
 8004fe2:	18d0      	adds	r0, r2, r3
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	685a      	ldr	r2, [r3, #4]
 8004fe8:	89bb      	ldrh	r3, [r7, #12]
 8004fea:	4413      	add	r3, r2
 8004fec:	897a      	ldrh	r2, [r7, #10]
 8004fee:	4619      	mov	r1, r3
 8004ff0:	f009 fa83 	bl	800e4fa <memcpy>
    offset_to += len;
 8004ff4:	89fa      	ldrh	r2, [r7, #14]
 8004ff6:	897b      	ldrh	r3, [r7, #10]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 8004ffc:	89ba      	ldrh	r2, [r7, #12]
 8004ffe:	897b      	ldrh	r3, [r7, #10]
 8005000:	4413      	add	r3, r2
 8005002:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	895b      	ldrh	r3, [r3, #10]
 8005008:	89fa      	ldrh	r2, [r7, #14]
 800500a:	429a      	cmp	r2, r3
 800500c:	d906      	bls.n	800501c <pbuf_copy+0xac>
 800500e:	4b37      	ldr	r3, [pc, #220]	; (80050ec <pbuf_copy+0x17c>)
 8005010:	f240 32cd 	movw	r2, #973	; 0x3cd
 8005014:	4938      	ldr	r1, [pc, #224]	; (80050f8 <pbuf_copy+0x188>)
 8005016:	4837      	ldr	r0, [pc, #220]	; (80050f4 <pbuf_copy+0x184>)
 8005018:	f009 fa82 	bl	800e520 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	895b      	ldrh	r3, [r3, #10]
 8005020:	89ba      	ldrh	r2, [r7, #12]
 8005022:	429a      	cmp	r2, r3
 8005024:	d906      	bls.n	8005034 <pbuf_copy+0xc4>
 8005026:	4b31      	ldr	r3, [pc, #196]	; (80050ec <pbuf_copy+0x17c>)
 8005028:	f240 32ce 	movw	r2, #974	; 0x3ce
 800502c:	4933      	ldr	r1, [pc, #204]	; (80050fc <pbuf_copy+0x18c>)
 800502e:	4831      	ldr	r0, [pc, #196]	; (80050f4 <pbuf_copy+0x184>)
 8005030:	f009 fa76 	bl	800e520 <iprintf>
    if (offset_from >= p_from->len) {
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	895b      	ldrh	r3, [r3, #10]
 8005038:	89ba      	ldrh	r2, [r7, #12]
 800503a:	429a      	cmp	r2, r3
 800503c:	d304      	bcc.n	8005048 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 800503e:	2300      	movs	r3, #0
 8005040:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	895b      	ldrh	r3, [r3, #10]
 800504c:	89fa      	ldrh	r2, [r7, #14]
 800504e:	429a      	cmp	r2, r3
 8005050:	d114      	bne.n	800507c <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 8005052:	2300      	movs	r3, #0
 8005054:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10c      	bne.n	800507c <pbuf_copy+0x10c>
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d009      	beq.n	800507c <pbuf_copy+0x10c>
 8005068:	4b20      	ldr	r3, [pc, #128]	; (80050ec <pbuf_copy+0x17c>)
 800506a:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800506e:	4924      	ldr	r1, [pc, #144]	; (8005100 <pbuf_copy+0x190>)
 8005070:	4820      	ldr	r0, [pc, #128]	; (80050f4 <pbuf_copy+0x184>)
 8005072:	f009 fa55 	bl	800e520 <iprintf>
 8005076:	f06f 030f 	mvn.w	r3, #15
 800507a:	e032      	b.n	80050e2 <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d013      	beq.n	80050aa <pbuf_copy+0x13a>
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	895a      	ldrh	r2, [r3, #10]
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	891b      	ldrh	r3, [r3, #8]
 800508a:	429a      	cmp	r2, r3
 800508c:	d10d      	bne.n	80050aa <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d009      	beq.n	80050aa <pbuf_copy+0x13a>
 8005096:	4b15      	ldr	r3, [pc, #84]	; (80050ec <pbuf_copy+0x17c>)
 8005098:	f240 32de 	movw	r2, #990	; 0x3de
 800509c:	4919      	ldr	r1, [pc, #100]	; (8005104 <pbuf_copy+0x194>)
 800509e:	4815      	ldr	r0, [pc, #84]	; (80050f4 <pbuf_copy+0x184>)
 80050a0:	f009 fa3e 	bl	800e520 <iprintf>
 80050a4:	f06f 0305 	mvn.w	r3, #5
 80050a8:	e01b      	b.n	80050e2 <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d013      	beq.n	80050d8 <pbuf_copy+0x168>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	895a      	ldrh	r2, [r3, #10]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	891b      	ldrh	r3, [r3, #8]
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d10d      	bne.n	80050d8 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d009      	beq.n	80050d8 <pbuf_copy+0x168>
 80050c4:	4b09      	ldr	r3, [pc, #36]	; (80050ec <pbuf_copy+0x17c>)
 80050c6:	f240 32e3 	movw	r2, #995	; 0x3e3
 80050ca:	490e      	ldr	r1, [pc, #56]	; (8005104 <pbuf_copy+0x194>)
 80050cc:	4809      	ldr	r0, [pc, #36]	; (80050f4 <pbuf_copy+0x184>)
 80050ce:	f009 fa27 	bl	800e520 <iprintf>
 80050d2:	f06f 0305 	mvn.w	r3, #5
 80050d6:	e004      	b.n	80050e2 <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	f47f af67 	bne.w	8004fae <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	0800f73c 	.word	0x0800f73c
 80050f0:	0800facc 	.word	0x0800facc
 80050f4:	0800f788 	.word	0x0800f788
 80050f8:	0800fafc 	.word	0x0800fafc
 80050fc:	0800fb14 	.word	0x0800fb14
 8005100:	0800fb30 	.word	0x0800fb30
 8005104:	0800fb40 	.word	0x0800fb40

08005108 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b088      	sub	sp, #32
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	4611      	mov	r1, r2
 8005114:	461a      	mov	r2, r3
 8005116:	460b      	mov	r3, r1
 8005118:	80fb      	strh	r3, [r7, #6]
 800511a:	4613      	mov	r3, r2
 800511c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800511e:	2300      	movs	r3, #0
 8005120:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d108      	bne.n	800513a <pbuf_copy_partial+0x32>
 8005128:	4b30      	ldr	r3, [pc, #192]	; (80051ec <pbuf_copy_partial+0xe4>)
 800512a:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800512e:	4930      	ldr	r1, [pc, #192]	; (80051f0 <pbuf_copy_partial+0xe8>)
 8005130:	4830      	ldr	r0, [pc, #192]	; (80051f4 <pbuf_copy_partial+0xec>)
 8005132:	f009 f9f5 	bl	800e520 <iprintf>
 8005136:	2300      	movs	r3, #0
 8005138:	e054      	b.n	80051e4 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d108      	bne.n	8005152 <pbuf_copy_partial+0x4a>
 8005140:	4b2a      	ldr	r3, [pc, #168]	; (80051ec <pbuf_copy_partial+0xe4>)
 8005142:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8005146:	492c      	ldr	r1, [pc, #176]	; (80051f8 <pbuf_copy_partial+0xf0>)
 8005148:	482a      	ldr	r0, [pc, #168]	; (80051f4 <pbuf_copy_partial+0xec>)
 800514a:	f009 f9e9 	bl	800e520 <iprintf>
 800514e:	2300      	movs	r3, #0
 8005150:	e048      	b.n	80051e4 <pbuf_copy_partial+0xdc>

  left = 0;
 8005152:	2300      	movs	r3, #0
 8005154:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d002      	beq.n	8005162 <pbuf_copy_partial+0x5a>
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d101      	bne.n	8005166 <pbuf_copy_partial+0x5e>
    return 0;
 8005162:	2300      	movs	r3, #0
 8005164:	e03e      	b.n	80051e4 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	61fb      	str	r3, [r7, #28]
 800516a:	e034      	b.n	80051d6 <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 800516c:	88bb      	ldrh	r3, [r7, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00a      	beq.n	8005188 <pbuf_copy_partial+0x80>
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	895b      	ldrh	r3, [r3, #10]
 8005176:	88ba      	ldrh	r2, [r7, #4]
 8005178:	429a      	cmp	r2, r3
 800517a:	d305      	bcc.n	8005188 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	895b      	ldrh	r3, [r3, #10]
 8005180:	88ba      	ldrh	r2, [r7, #4]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	80bb      	strh	r3, [r7, #4]
 8005186:	e023      	b.n	80051d0 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	895a      	ldrh	r2, [r3, #10]
 800518c:	88bb      	ldrh	r3, [r7, #4]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8005192:	8b3a      	ldrh	r2, [r7, #24]
 8005194:	88fb      	ldrh	r3, [r7, #6]
 8005196:	429a      	cmp	r2, r3
 8005198:	d901      	bls.n	800519e <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 800519a:	88fb      	ldrh	r3, [r7, #6]
 800519c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800519e:	8b7b      	ldrh	r3, [r7, #26]
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	18d0      	adds	r0, r2, r3
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	685a      	ldr	r2, [r3, #4]
 80051a8:	88bb      	ldrh	r3, [r7, #4]
 80051aa:	4413      	add	r3, r2
 80051ac:	8b3a      	ldrh	r2, [r7, #24]
 80051ae:	4619      	mov	r1, r3
 80051b0:	f009 f9a3 	bl	800e4fa <memcpy>
      copied_total += buf_copy_len;
 80051b4:	8afa      	ldrh	r2, [r7, #22]
 80051b6:	8b3b      	ldrh	r3, [r7, #24]
 80051b8:	4413      	add	r3, r2
 80051ba:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 80051bc:	8b7a      	ldrh	r2, [r7, #26]
 80051be:	8b3b      	ldrh	r3, [r7, #24]
 80051c0:	4413      	add	r3, r2
 80051c2:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 80051c4:	88fa      	ldrh	r2, [r7, #6]
 80051c6:	8b3b      	ldrh	r3, [r7, #24]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80051cc:	2300      	movs	r3, #0
 80051ce:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80051d0:	69fb      	ldr	r3, [r7, #28]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	61fb      	str	r3, [r7, #28]
 80051d6:	88fb      	ldrh	r3, [r7, #6]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d002      	beq.n	80051e2 <pbuf_copy_partial+0xda>
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1c4      	bne.n	800516c <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 80051e2:	8afb      	ldrh	r3, [r7, #22]
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3720      	adds	r7, #32
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	0800f73c 	.word	0x0800f73c
 80051f0:	0800fb6c 	.word	0x0800fb6c
 80051f4:	0800f788 	.word	0x0800f788
 80051f8:	0800fb8c 	.word	0x0800fb8c

080051fc <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80051fc:	b480      	push	{r7}
 80051fe:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8005200:	bf00      	nop
 8005202:	46bd      	mov	sp, r7
 8005204:	bc80      	pop	{r7}
 8005206:	4770      	bx	lr

08005208 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800520c:	f000 fdf0 	bl	8005df0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8005210:	4b07      	ldr	r3, [pc, #28]	; (8005230 <tcp_tmr+0x28>)
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	3301      	adds	r3, #1
 8005216:	b2da      	uxtb	r2, r3
 8005218:	4b05      	ldr	r3, [pc, #20]	; (8005230 <tcp_tmr+0x28>)
 800521a:	701a      	strb	r2, [r3, #0]
 800521c:	4b04      	ldr	r3, [pc, #16]	; (8005230 <tcp_tmr+0x28>)
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	f003 0301 	and.w	r3, r3, #1
 8005224:	2b00      	cmp	r3, #0
 8005226:	d001      	beq.n	800522c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8005228:	f000 fb22 	bl	8005870 <tcp_slowtmr>
  }
}
 800522c:	bf00      	nop
 800522e:	bd80      	pop	{r7, pc}
 8005230:	200000d1 	.word	0x200000d1

08005234 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	60fb      	str	r3, [r7, #12]
 8005242:	e00a      	b.n	800525a <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005248:	683a      	ldr	r2, [r7, #0]
 800524a:	429a      	cmp	r2, r3
 800524c:	d102      	bne.n	8005254 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2200      	movs	r2, #0
 8005252:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	60fb      	str	r3, [r7, #12]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1f1      	bne.n	8005244 <tcp_remove_listener+0x10>
      }
   }
}
 8005260:	bf00      	nop
 8005262:	3714      	adds	r7, #20
 8005264:	46bd      	mov	sp, r7
 8005266:	bc80      	pop	{r7}
 8005268:	4770      	bx	lr
	...

0800526c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d105      	bne.n	8005286 <tcp_listen_closed+0x1a>
 800527a:	4b13      	ldr	r3, [pc, #76]	; (80052c8 <tcp_listen_closed+0x5c>)
 800527c:	22c0      	movs	r2, #192	; 0xc0
 800527e:	4913      	ldr	r1, [pc, #76]	; (80052cc <tcp_listen_closed+0x60>)
 8005280:	4813      	ldr	r0, [pc, #76]	; (80052d0 <tcp_listen_closed+0x64>)
 8005282:	f009 f94d 	bl	800e520 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	7d1b      	ldrb	r3, [r3, #20]
 800528a:	2b01      	cmp	r3, #1
 800528c:	d005      	beq.n	800529a <tcp_listen_closed+0x2e>
 800528e:	4b0e      	ldr	r3, [pc, #56]	; (80052c8 <tcp_listen_closed+0x5c>)
 8005290:	22c1      	movs	r2, #193	; 0xc1
 8005292:	4910      	ldr	r1, [pc, #64]	; (80052d4 <tcp_listen_closed+0x68>)
 8005294:	480e      	ldr	r0, [pc, #56]	; (80052d0 <tcp_listen_closed+0x64>)
 8005296:	f009 f943 	bl	800e520 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800529a:	2301      	movs	r3, #1
 800529c:	60fb      	str	r3, [r7, #12]
 800529e:	e00b      	b.n	80052b8 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 80052a0:	4a0d      	ldr	r2, [pc, #52]	; (80052d8 <tcp_listen_closed+0x6c>)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	6879      	ldr	r1, [r7, #4]
 80052ac:	4618      	mov	r0, r3
 80052ae:	f7ff ffc1 	bl	8005234 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	3301      	adds	r3, #1
 80052b6:	60fb      	str	r3, [r7, #12]
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2b03      	cmp	r3, #3
 80052bc:	d9f0      	bls.n	80052a0 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80052be:	bf00      	nop
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	0800fcc0 	.word	0x0800fcc0
 80052cc:	0800fcf0 	.word	0x0800fcf0
 80052d0:	0800fcfc 	.word	0x0800fcfc
 80052d4:	0800fd24 	.word	0x0800fd24
 80052d8:	08011604 	.word	0x08011604

080052dc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80052dc:	b5b0      	push	{r4, r5, r7, lr}
 80052de:	b086      	sub	sp, #24
 80052e0:	af02      	add	r7, sp, #8
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	460b      	mov	r3, r1
 80052e6:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80052e8:	78fb      	ldrb	r3, [r7, #3]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d075      	beq.n	80053da <tcp_close_shutdown+0xfe>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	7d1b      	ldrb	r3, [r3, #20]
 80052f2:	2b04      	cmp	r3, #4
 80052f4:	d003      	beq.n	80052fe <tcp_close_shutdown+0x22>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	7d1b      	ldrb	r3, [r3, #20]
 80052fa:	2b07      	cmp	r3, #7
 80052fc:	d16d      	bne.n	80053da <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005302:	2b00      	cmp	r3, #0
 8005304:	d104      	bne.n	8005310 <tcp_close_shutdown+0x34>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800530a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800530e:	d064      	beq.n	80053da <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	7e9b      	ldrb	r3, [r3, #26]
 8005314:	f003 0310 	and.w	r3, r3, #16
 8005318:	2b00      	cmp	r3, #0
 800531a:	d106      	bne.n	800532a <tcp_close_shutdown+0x4e>
 800531c:	4b59      	ldr	r3, [pc, #356]	; (8005484 <tcp_close_shutdown+0x1a8>)
 800531e:	f240 120f 	movw	r2, #271	; 0x10f
 8005322:	4959      	ldr	r1, [pc, #356]	; (8005488 <tcp_close_shutdown+0x1ac>)
 8005324:	4859      	ldr	r0, [pc, #356]	; (800548c <tcp_close_shutdown+0x1b0>)
 8005326:	f009 f8fb 	bl	800e520 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005332:	687c      	ldr	r4, [r7, #4]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	1d1d      	adds	r5, r3, #4
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	8adb      	ldrh	r3, [r3, #22]
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	8b12      	ldrh	r2, [r2, #24]
 8005340:	9201      	str	r2, [sp, #4]
 8005342:	9300      	str	r3, [sp, #0]
 8005344:	462b      	mov	r3, r5
 8005346:	4622      	mov	r2, r4
 8005348:	f004 f85e 	bl	8009408 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 ffc5 	bl	80062dc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8005352:	4b4f      	ldr	r3, [pc, #316]	; (8005490 <tcp_close_shutdown+0x1b4>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	429a      	cmp	r2, r3
 800535a:	d105      	bne.n	8005368 <tcp_close_shutdown+0x8c>
 800535c:	4b4c      	ldr	r3, [pc, #304]	; (8005490 <tcp_close_shutdown+0x1b4>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	4a4b      	ldr	r2, [pc, #300]	; (8005490 <tcp_close_shutdown+0x1b4>)
 8005364:	6013      	str	r3, [r2, #0]
 8005366:	e013      	b.n	8005390 <tcp_close_shutdown+0xb4>
 8005368:	4b49      	ldr	r3, [pc, #292]	; (8005490 <tcp_close_shutdown+0x1b4>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	60fb      	str	r3, [r7, #12]
 800536e:	e00c      	b.n	800538a <tcp_close_shutdown+0xae>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	429a      	cmp	r2, r3
 8005378:	d104      	bne.n	8005384 <tcp_close_shutdown+0xa8>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	68da      	ldr	r2, [r3, #12]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	60da      	str	r2, [r3, #12]
 8005382:	e005      	b.n	8005390 <tcp_close_shutdown+0xb4>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	60fb      	str	r3, [r7, #12]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1ef      	bne.n	8005370 <tcp_close_shutdown+0x94>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	60da      	str	r2, [r3, #12]
 8005396:	4b3f      	ldr	r3, [pc, #252]	; (8005494 <tcp_close_shutdown+0x1b8>)
 8005398:	2201      	movs	r2, #1
 800539a:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	7d1b      	ldrb	r3, [r3, #20]
 80053a0:	2b04      	cmp	r3, #4
 80053a2:	d10c      	bne.n	80053be <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	220a      	movs	r2, #10
 80053a8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80053aa:	4b3b      	ldr	r3, [pc, #236]	; (8005498 <tcp_close_shutdown+0x1bc>)
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	60da      	str	r2, [r3, #12]
 80053b2:	4a39      	ldr	r2, [pc, #228]	; (8005498 <tcp_close_shutdown+0x1bc>)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6013      	str	r3, [r2, #0]
 80053b8:	f004 fa76 	bl	80098a8 <tcp_timer_needed>
 80053bc:	e00b      	b.n	80053d6 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 80053be:	4b37      	ldr	r3, [pc, #220]	; (800549c <tcp_close_shutdown+0x1c0>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d102      	bne.n	80053ce <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 80053c8:	f003 fae8 	bl	800899c <tcp_trigger_input_pcb_close>
 80053cc:	e003      	b.n	80053d6 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 80053ce:	6879      	ldr	r1, [r7, #4]
 80053d0:	2001      	movs	r0, #1
 80053d2:	f7fe ff0f 	bl	80041f4 <memp_free>
        }
      }
      return ERR_OK;
 80053d6:	2300      	movs	r3, #0
 80053d8:	e050      	b.n	800547c <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	7d1b      	ldrb	r3, [r3, #20]
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d02e      	beq.n	8005440 <tcp_close_shutdown+0x164>
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d038      	beq.n	8005458 <tcp_close_shutdown+0x17c>
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d142      	bne.n	8005470 <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	8adb      	ldrh	r3, [r3, #22]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d021      	beq.n	8005436 <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 80053f2:	4b2b      	ldr	r3, [pc, #172]	; (80054a0 <tcp_close_shutdown+0x1c4>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d105      	bne.n	8005408 <tcp_close_shutdown+0x12c>
 80053fc:	4b28      	ldr	r3, [pc, #160]	; (80054a0 <tcp_close_shutdown+0x1c4>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	4a27      	ldr	r2, [pc, #156]	; (80054a0 <tcp_close_shutdown+0x1c4>)
 8005404:	6013      	str	r3, [r2, #0]
 8005406:	e013      	b.n	8005430 <tcp_close_shutdown+0x154>
 8005408:	4b25      	ldr	r3, [pc, #148]	; (80054a0 <tcp_close_shutdown+0x1c4>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	60bb      	str	r3, [r7, #8]
 800540e:	e00c      	b.n	800542a <tcp_close_shutdown+0x14e>
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	429a      	cmp	r2, r3
 8005418:	d104      	bne.n	8005424 <tcp_close_shutdown+0x148>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	68da      	ldr	r2, [r3, #12]
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	60da      	str	r2, [r3, #12]
 8005422:	e005      	b.n	8005430 <tcp_close_shutdown+0x154>
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	60bb      	str	r3, [r7, #8]
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1ef      	bne.n	8005410 <tcp_close_shutdown+0x134>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2200      	movs	r2, #0
 8005434:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 8005436:	6879      	ldr	r1, [r7, #4]
 8005438:	2001      	movs	r0, #1
 800543a:	f7fe fedb 	bl	80041f4 <memp_free>
    break;
 800543e:	e01c      	b.n	800547a <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f7ff ff13 	bl	800526c <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8005446:	6879      	ldr	r1, [r7, #4]
 8005448:	4816      	ldr	r0, [pc, #88]	; (80054a4 <tcp_close_shutdown+0x1c8>)
 800544a:	f000 ff89 	bl	8006360 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800544e:	6879      	ldr	r1, [r7, #4]
 8005450:	2002      	movs	r0, #2
 8005452:	f7fe fecf 	bl	80041f4 <memp_free>
    break;
 8005456:	e010      	b.n	800547a <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8005458:	6879      	ldr	r1, [r7, #4]
 800545a:	480d      	ldr	r0, [pc, #52]	; (8005490 <tcp_close_shutdown+0x1b4>)
 800545c:	f000 ff80 	bl	8006360 <tcp_pcb_remove>
 8005460:	4b0c      	ldr	r3, [pc, #48]	; (8005494 <tcp_close_shutdown+0x1b8>)
 8005462:	2201      	movs	r2, #1
 8005464:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8005466:	6879      	ldr	r1, [r7, #4]
 8005468:	2001      	movs	r0, #1
 800546a:	f7fe fec3 	bl	80041f4 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 800546e:	e004      	b.n	800547a <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 f819 	bl	80054a8 <tcp_close_shutdown_fin>
 8005476:	4603      	mov	r3, r0
 8005478:	e000      	b.n	800547c <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3710      	adds	r7, #16
 8005480:	46bd      	mov	sp, r7
 8005482:	bdb0      	pop	{r4, r5, r7, pc}
 8005484:	0800fcc0 	.word	0x0800fcc0
 8005488:	0800fd3c 	.word	0x0800fd3c
 800548c:	0800fcfc 	.word	0x0800fcfc
 8005490:	200068e4 	.word	0x200068e4
 8005494:	200068e0 	.word	0x200068e0
 8005498:	200068f4 	.word	0x200068f4
 800549c:	200068f8 	.word	0x200068f8
 80054a0:	200068f0 	.word	0x200068f0
 80054a4:	200068ec 	.word	0x200068ec

080054a8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d106      	bne.n	80054c4 <tcp_close_shutdown_fin+0x1c>
 80054b6:	4b2c      	ldr	r3, [pc, #176]	; (8005568 <tcp_close_shutdown_fin+0xc0>)
 80054b8:	f240 124d 	movw	r2, #333	; 0x14d
 80054bc:	492b      	ldr	r1, [pc, #172]	; (800556c <tcp_close_shutdown_fin+0xc4>)
 80054be:	482c      	ldr	r0, [pc, #176]	; (8005570 <tcp_close_shutdown_fin+0xc8>)
 80054c0:	f009 f82e 	bl	800e520 <iprintf>

  switch (pcb->state) {
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	7d1b      	ldrb	r3, [r3, #20]
 80054c8:	2b04      	cmp	r3, #4
 80054ca:	d010      	beq.n	80054ee <tcp_close_shutdown_fin+0x46>
 80054cc:	2b07      	cmp	r3, #7
 80054ce:	d01b      	beq.n	8005508 <tcp_close_shutdown_fin+0x60>
 80054d0:	2b03      	cmp	r3, #3
 80054d2:	d126      	bne.n	8005522 <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f003 faed 	bl	8008ab4 <tcp_send_fin>
 80054da:	4603      	mov	r3, r0
 80054dc:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80054de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d11f      	bne.n	8005526 <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2205      	movs	r2, #5
 80054ea:	751a      	strb	r2, [r3, #20]
    }
    break;
 80054ec:	e01b      	b.n	8005526 <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f003 fae0 	bl	8008ab4 <tcp_send_fin>
 80054f4:	4603      	mov	r3, r0
 80054f6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80054f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d114      	bne.n	800552a <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2205      	movs	r2, #5
 8005504:	751a      	strb	r2, [r3, #20]
    }
    break;
 8005506:	e010      	b.n	800552a <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f003 fad3 	bl	8008ab4 <tcp_send_fin>
 800550e:	4603      	mov	r3, r0
 8005510:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8005512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d109      	bne.n	800552e <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2209      	movs	r2, #9
 800551e:	751a      	strb	r2, [r3, #20]
    }
    break;
 8005520:	e005      	b.n	800552e <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 8005522:	2300      	movs	r3, #0
 8005524:	e01c      	b.n	8005560 <tcp_close_shutdown_fin+0xb8>
    break;
 8005526:	bf00      	nop
 8005528:	e002      	b.n	8005530 <tcp_close_shutdown_fin+0x88>
    break;
 800552a:	bf00      	nop
 800552c:	e000      	b.n	8005530 <tcp_close_shutdown_fin+0x88>
    break;
 800552e:	bf00      	nop
  }

  if (err == ERR_OK) {
 8005530:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d103      	bne.n	8005540 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f003 fcdb 	bl	8008ef4 <tcp_output>
 800553e:	e00d      	b.n	800555c <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8005540:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005548:	d108      	bne.n	800555c <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	7e9b      	ldrb	r3, [r3, #26]
 800554e:	f043 0308 	orr.w	r3, r3, #8
 8005552:	b2da      	uxtb	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8005558:	2300      	movs	r3, #0
 800555a:	e001      	b.n	8005560 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800555c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005560:	4618      	mov	r0, r3
 8005562:	3710      	adds	r7, #16
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	0800fcc0 	.word	0x0800fcc0
 800556c:	0800fcf0 	.word	0x0800fcf0
 8005570:	0800fcfc 	.word	0x0800fcfc

08005574 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	7d1b      	ldrb	r3, [r3, #20]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d006      	beq.n	8005592 <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	7e9b      	ldrb	r3, [r3, #26]
 8005588:	f043 0310 	orr.w	r3, r3, #16
 800558c:	b2da      	uxtb	r2, r3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8005592:	2101      	movs	r1, #1
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f7ff fea1 	bl	80052dc <tcp_close_shutdown>
 800559a:	4603      	mov	r3, r0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3708      	adds	r7, #8
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b08c      	sub	sp, #48	; 0x30
 80055a8:	af02      	add	r7, sp, #8
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	7d1b      	ldrb	r3, [r3, #20]
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d106      	bne.n	80055c4 <tcp_abandon+0x20>
 80055b6:	4b4d      	ldr	r3, [pc, #308]	; (80056ec <tcp_abandon+0x148>)
 80055b8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80055bc:	494c      	ldr	r1, [pc, #304]	; (80056f0 <tcp_abandon+0x14c>)
 80055be:	484d      	ldr	r0, [pc, #308]	; (80056f4 <tcp_abandon+0x150>)
 80055c0:	f008 ffae 	bl	800e520 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	7d1b      	ldrb	r3, [r3, #20]
 80055c8:	2b0a      	cmp	r3, #10
 80055ca:	d108      	bne.n	80055de <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80055cc:	6879      	ldr	r1, [r7, #4]
 80055ce:	484a      	ldr	r0, [pc, #296]	; (80056f8 <tcp_abandon+0x154>)
 80055d0:	f000 fec6 	bl	8006360 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 80055d4:	6879      	ldr	r1, [r7, #4]
 80055d6:	2001      	movs	r0, #1
 80055d8:	f7fe fe0c 	bl	80041f4 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 80055dc:	e081      	b.n	80056e2 <tcp_abandon+0x13e>
    int send_rst = 0;
 80055de:	2300      	movs	r3, #0
 80055e0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80055e2:	2300      	movs	r3, #0
 80055e4:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055ea:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f0:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055f8:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	7d1b      	ldrb	r3, [r3, #20]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d126      	bne.n	8005656 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	8adb      	ldrh	r3, [r3, #22]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d02e      	beq.n	800566e <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005610:	4b3a      	ldr	r3, [pc, #232]	; (80056fc <tcp_abandon+0x158>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	429a      	cmp	r2, r3
 8005618:	d105      	bne.n	8005626 <tcp_abandon+0x82>
 800561a:	4b38      	ldr	r3, [pc, #224]	; (80056fc <tcp_abandon+0x158>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	4a36      	ldr	r2, [pc, #216]	; (80056fc <tcp_abandon+0x158>)
 8005622:	6013      	str	r3, [r2, #0]
 8005624:	e013      	b.n	800564e <tcp_abandon+0xaa>
 8005626:	4b35      	ldr	r3, [pc, #212]	; (80056fc <tcp_abandon+0x158>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	61fb      	str	r3, [r7, #28]
 800562c:	e00c      	b.n	8005648 <tcp_abandon+0xa4>
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	429a      	cmp	r2, r3
 8005636:	d104      	bne.n	8005642 <tcp_abandon+0x9e>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68da      	ldr	r2, [r3, #12]
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	60da      	str	r2, [r3, #12]
 8005640:	e005      	b.n	800564e <tcp_abandon+0xaa>
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	61fb      	str	r3, [r7, #28]
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1ef      	bne.n	800562e <tcp_abandon+0x8a>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	60da      	str	r2, [r3, #12]
 8005654:	e00b      	b.n	800566e <tcp_abandon+0xca>
      send_rst = reset;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	8adb      	ldrh	r3, [r3, #22]
 800565e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005660:	6879      	ldr	r1, [r7, #4]
 8005662:	4827      	ldr	r0, [pc, #156]	; (8005700 <tcp_abandon+0x15c>)
 8005664:	f000 fe7c 	bl	8006360 <tcp_pcb_remove>
 8005668:	4b26      	ldr	r3, [pc, #152]	; (8005704 <tcp_abandon+0x160>)
 800566a:	2201      	movs	r2, #1
 800566c:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005672:	2b00      	cmp	r3, #0
 8005674:	d004      	beq.n	8005680 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800567a:	4618      	mov	r0, r3
 800567c:	f000 fc85 	bl	8005f8a <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005684:	2b00      	cmp	r3, #0
 8005686:	d004      	beq.n	8005692 <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800568c:	4618      	mov	r0, r3
 800568e:	f000 fc7c 	bl	8005f8a <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005696:	2b00      	cmp	r3, #0
 8005698:	d004      	beq.n	80056a4 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569e:	4618      	mov	r0, r3
 80056a0:	f000 fc73 	bl	8005f8a <tcp_segs_free>
    if (send_rst) {
 80056a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d00c      	beq.n	80056c4 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	1d19      	adds	r1, r3, #4
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	8b1b      	ldrh	r3, [r3, #24]
 80056b4:	9301      	str	r3, [sp, #4]
 80056b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80056b8:	9300      	str	r3, [sp, #0]
 80056ba:	460b      	mov	r3, r1
 80056bc:	6979      	ldr	r1, [r7, #20]
 80056be:	69b8      	ldr	r0, [r7, #24]
 80056c0:	f003 fea2 	bl	8009408 <tcp_rst>
    last_state = pcb->state;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	7d1b      	ldrb	r3, [r3, #20]
 80056c8:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 80056ca:	6879      	ldr	r1, [r7, #4]
 80056cc:	2001      	movs	r0, #1
 80056ce:	f7fe fd91 	bl	80041f4 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d004      	beq.n	80056e2 <tcp_abandon+0x13e>
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	f06f 010c 	mvn.w	r1, #12
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	4798      	blx	r3
}
 80056e2:	bf00      	nop
 80056e4:	3728      	adds	r7, #40	; 0x28
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	0800fcc0 	.word	0x0800fcc0
 80056f0:	0800fd58 	.word	0x0800fd58
 80056f4:	0800fcfc 	.word	0x0800fcfc
 80056f8:	200068f4 	.word	0x200068f4
 80056fc:	200068f0 	.word	0x200068f0
 8005700:	200068e4 	.word	0x200068e4
 8005704:	200068e0 	.word	0x200068e0

08005708 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8005710:	2101      	movs	r1, #1
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f7ff ff46 	bl	80055a4 <tcp_abandon>
}
 8005718:	bf00      	nop
 800571a:	3708      	adds	r7, #8
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8005730:	4413      	add	r3, r2
 8005732:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800573c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8005740:	bf28      	it	cs
 8005742:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8005746:	b292      	uxth	r2, r2
 8005748:	4413      	add	r3, r2
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	2b00      	cmp	r3, #0
 8005750:	db08      	blt.n	8005764 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	e020      	b.n	80057a6 <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	2b00      	cmp	r3, #0
 8005770:	dd03      	ble.n	800577a <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005778:	e014      	b.n	80057a4 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800578c:	d306      	bcc.n	800579c <tcp_update_rcv_ann_wnd+0x7c>
 800578e:	4b08      	ldr	r3, [pc, #32]	; (80057b0 <tcp_update_rcv_ann_wnd+0x90>)
 8005790:	f44f 7242 	mov.w	r2, #776	; 0x308
 8005794:	4907      	ldr	r1, [pc, #28]	; (80057b4 <tcp_update_rcv_ann_wnd+0x94>)
 8005796:	4808      	ldr	r0, [pc, #32]	; (80057b8 <tcp_update_rcv_ann_wnd+0x98>)
 8005798:	f008 fec2 	bl	800e520 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	b29a      	uxth	r2, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80057a4:	2300      	movs	r3, #0
  }
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3710      	adds	r7, #16
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	0800fcc0 	.word	0x0800fcc0
 80057b4:	0800fdd8 	.word	0x0800fdd8
 80057b8:	0800fcfc 	.word	0x0800fcfc

080057bc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	460b      	mov	r3, r1
 80057c6:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	7d1b      	ldrb	r3, [r3, #20]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d106      	bne.n	80057de <tcp_recved+0x22>
 80057d0:	4b23      	ldr	r3, [pc, #140]	; (8005860 <tcp_recved+0xa4>)
 80057d2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80057d6:	4923      	ldr	r1, [pc, #140]	; (8005864 <tcp_recved+0xa8>)
 80057d8:	4823      	ldr	r0, [pc, #140]	; (8005868 <tcp_recved+0xac>)
 80057da:	f008 fea1 	bl	800e520 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80057e2:	887b      	ldrh	r3, [r7, #2]
 80057e4:	4413      	add	r3, r2
 80057e6:	b29a      	uxth	r2, r3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057f0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80057f4:	d904      	bls.n	8005800 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80057fc:	851a      	strh	r2, [r3, #40]	; 0x28
 80057fe:	e017      	b.n	8005830 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005804:	2b00      	cmp	r3, #0
 8005806:	d113      	bne.n	8005830 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	7d1b      	ldrb	r3, [r3, #20]
 800580c:	2b07      	cmp	r3, #7
 800580e:	d003      	beq.n	8005818 <tcp_recved+0x5c>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	7d1b      	ldrb	r3, [r3, #20]
 8005814:	2b09      	cmp	r3, #9
 8005816:	d104      	bne.n	8005822 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800581e:	851a      	strh	r2, [r3, #40]	; 0x28
 8005820:	e006      	b.n	8005830 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8005822:	4b0f      	ldr	r3, [pc, #60]	; (8005860 <tcp_recved+0xa4>)
 8005824:	f240 322d 	movw	r2, #813	; 0x32d
 8005828:	4910      	ldr	r1, [pc, #64]	; (800586c <tcp_recved+0xb0>)
 800582a:	480f      	ldr	r0, [pc, #60]	; (8005868 <tcp_recved+0xac>)
 800582c:	f008 fe78 	bl	800e520 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8005830:	6878      	ldr	r0, [r7, #4]
 8005832:	f7ff ff75 	bl	8005720 <tcp_update_rcv_ann_wnd>
 8005836:	4603      	mov	r3, r0
 8005838:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8005840:	db09      	blt.n	8005856 <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	7e9b      	ldrb	r3, [r3, #26]
 8005846:	f043 0302 	orr.w	r3, r3, #2
 800584a:	b2da      	uxtb	r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f003 fb4f 	bl	8008ef4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8005856:	bf00      	nop
 8005858:	3710      	adds	r7, #16
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	0800fcc0 	.word	0x0800fcc0
 8005864:	0800fdf4 	.word	0x0800fdf4
 8005868:	0800fcfc 	.word	0x0800fcfc
 800586c:	0800fe1c 	.word	0x0800fe1c

08005870 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8005870:	b5b0      	push	{r4, r5, r7, lr}
 8005872:	b08c      	sub	sp, #48	; 0x30
 8005874:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8005876:	2300      	movs	r3, #0
 8005878:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 800587a:	4b97      	ldr	r3, [pc, #604]	; (8005ad8 <tcp_slowtmr+0x268>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	3301      	adds	r3, #1
 8005880:	4a95      	ldr	r2, [pc, #596]	; (8005ad8 <tcp_slowtmr+0x268>)
 8005882:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8005884:	4b95      	ldr	r3, [pc, #596]	; (8005adc <tcp_slowtmr+0x26c>)
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	3301      	adds	r3, #1
 800588a:	b2da      	uxtb	r2, r3
 800588c:	4b93      	ldr	r3, [pc, #588]	; (8005adc <tcp_slowtmr+0x26c>)
 800588e:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8005890:	2300      	movs	r3, #0
 8005892:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 8005894:	4b92      	ldr	r3, [pc, #584]	; (8005ae0 <tcp_slowtmr+0x270>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800589a:	e227      	b.n	8005cec <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800589c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589e:	7d1b      	ldrb	r3, [r3, #20]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d106      	bne.n	80058b2 <tcp_slowtmr+0x42>
 80058a4:	4b8f      	ldr	r3, [pc, #572]	; (8005ae4 <tcp_slowtmr+0x274>)
 80058a6:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 80058aa:	498f      	ldr	r1, [pc, #572]	; (8005ae8 <tcp_slowtmr+0x278>)
 80058ac:	488f      	ldr	r0, [pc, #572]	; (8005aec <tcp_slowtmr+0x27c>)
 80058ae:	f008 fe37 	bl	800e520 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80058b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b4:	7d1b      	ldrb	r3, [r3, #20]
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d106      	bne.n	80058c8 <tcp_slowtmr+0x58>
 80058ba:	4b8a      	ldr	r3, [pc, #552]	; (8005ae4 <tcp_slowtmr+0x274>)
 80058bc:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80058c0:	498b      	ldr	r1, [pc, #556]	; (8005af0 <tcp_slowtmr+0x280>)
 80058c2:	488a      	ldr	r0, [pc, #552]	; (8005aec <tcp_slowtmr+0x27c>)
 80058c4:	f008 fe2c 	bl	800e520 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80058c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ca:	7d1b      	ldrb	r3, [r3, #20]
 80058cc:	2b0a      	cmp	r3, #10
 80058ce:	d106      	bne.n	80058de <tcp_slowtmr+0x6e>
 80058d0:	4b84      	ldr	r3, [pc, #528]	; (8005ae4 <tcp_slowtmr+0x274>)
 80058d2:	f240 32f2 	movw	r2, #1010	; 0x3f2
 80058d6:	4987      	ldr	r1, [pc, #540]	; (8005af4 <tcp_slowtmr+0x284>)
 80058d8:	4884      	ldr	r0, [pc, #528]	; (8005aec <tcp_slowtmr+0x27c>)
 80058da:	f008 fe21 	bl	800e520 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80058de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e0:	7f5a      	ldrb	r2, [r3, #29]
 80058e2:	4b7e      	ldr	r3, [pc, #504]	; (8005adc <tcp_slowtmr+0x26c>)
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d103      	bne.n	80058f2 <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 80058ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 80058f0:	e1fc      	b.n	8005cec <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 80058f2:	4b7a      	ldr	r3, [pc, #488]	; (8005adc <tcp_slowtmr+0x26c>)
 80058f4:	781a      	ldrb	r2, [r3, #0]
 80058f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f8:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 80058fa:	2300      	movs	r3, #0
 80058fc:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 80058fe:	2300      	movs	r3, #0
 8005900:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8005902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005904:	7d1b      	ldrb	r3, [r3, #20]
 8005906:	2b02      	cmp	r3, #2
 8005908:	d108      	bne.n	800591c <tcp_slowtmr+0xac>
 800590a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005910:	2b05      	cmp	r3, #5
 8005912:	d903      	bls.n	800591c <tcp_slowtmr+0xac>
      ++pcb_remove;
 8005914:	7ffb      	ldrb	r3, [r7, #31]
 8005916:	3301      	adds	r3, #1
 8005918:	77fb      	strb	r3, [r7, #31]
 800591a:	e0a2      	b.n	8005a62 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800591c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005922:	2b0b      	cmp	r3, #11
 8005924:	d903      	bls.n	800592e <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8005926:	7ffb      	ldrb	r3, [r7, #31]
 8005928:	3301      	adds	r3, #1
 800592a:	77fb      	strb	r3, [r7, #31]
 800592c:	e099      	b.n	8005a62 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800592e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005930:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8005934:	2b00      	cmp	r3, #0
 8005936:	d032      	beq.n	800599e <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8005938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593a:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800593e:	3b01      	subs	r3, #1
 8005940:	4a6d      	ldr	r2, [pc, #436]	; (8005af8 <tcp_slowtmr+0x288>)
 8005942:	5cd3      	ldrb	r3, [r2, r3]
 8005944:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 8005946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005948:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800594c:	7cfa      	ldrb	r2, [r7, #19]
 800594e:	429a      	cmp	r2, r3
 8005950:	d907      	bls.n	8005962 <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 8005952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005954:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8005958:	3301      	adds	r3, #1
 800595a:	b2da      	uxtb	r2, r3
 800595c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595e:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 8005962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005964:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8005968:	7cfa      	ldrb	r2, [r7, #19]
 800596a:	429a      	cmp	r2, r3
 800596c:	d879      	bhi.n	8005a62 <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800596e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005970:	f003 feda 	bl	8009728 <tcp_zero_window_probe>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d173      	bne.n	8005a62 <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 800597a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597c:	2200      	movs	r2, #0
 800597e:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8005982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005984:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8005988:	2b06      	cmp	r3, #6
 800598a:	d86a      	bhi.n	8005a62 <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 800598c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598e:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8005992:	3301      	adds	r3, #1
 8005994:	b2da      	uxtb	r2, r3
 8005996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005998:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800599c:	e061      	b.n	8005a62 <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 800599e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	db08      	blt.n	80059ba <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 80059a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059aa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80059ae:	b29b      	uxth	r3, r3
 80059b0:	3301      	adds	r3, #1
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	b21a      	sxth	r2, r3
 80059b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b8:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 80059ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d04f      	beq.n	8005a62 <tcp_slowtmr+0x1f2>
 80059c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c4:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80059c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ca:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80059ce:	429a      	cmp	r2, r3
 80059d0:	db47      	blt.n	8005a62 <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 80059d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d4:	7d1b      	ldrb	r3, [r3, #20]
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d018      	beq.n	8005a0c <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 80059da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80059e0:	2b0c      	cmp	r3, #12
 80059e2:	bf28      	it	cs
 80059e4:	230c      	movcs	r3, #12
 80059e6:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80059e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ea:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80059ee:	10db      	asrs	r3, r3, #3
 80059f0:	b21b      	sxth	r3, r3
 80059f2:	461a      	mov	r2, r3
 80059f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80059fa:	4413      	add	r3, r2
 80059fc:	7dfa      	ldrb	r2, [r7, #23]
 80059fe:	493f      	ldr	r1, [pc, #252]	; (8005afc <tcp_slowtmr+0x28c>)
 8005a00:	5c8a      	ldrb	r2, [r1, r2]
 8005a02:	4093      	lsls	r3, r2
 8005a04:	b21a      	sxth	r2, r3
 8005a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a08:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0e:	2200      	movs	r2, #0
 8005a10:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8005a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a14:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	bf28      	it	cs
 8005a22:	4613      	movcs	r3, r2
 8005a24:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 8005a26:	8abb      	ldrh	r3, [r7, #20]
 8005a28:	085b      	lsrs	r3, r3, #1
 8005a2a:	b29a      	uxth	r2, r3
 8005a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8005a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a34:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8005a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005a3c:	005b      	lsls	r3, r3, #1
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d206      	bcs.n	8005a52 <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 8005a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005a48:	005b      	lsls	r3, r3, #1
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 8005a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a54:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8005a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a58:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 8005a5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a5e:	f003 fd49 	bl	80094f4 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8005a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a64:	7d1b      	ldrb	r3, [r3, #20]
 8005a66:	2b06      	cmp	r3, #6
 8005a68:	d10f      	bne.n	8005a8a <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8005a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6c:	7e9b      	ldrb	r3, [r3, #26]
 8005a6e:	f003 0310 	and.w	r3, r3, #16
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d009      	beq.n	8005a8a <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005a76:	4b18      	ldr	r3, [pc, #96]	; (8005ad8 <tcp_slowtmr+0x268>)
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	2b28      	cmp	r3, #40	; 0x28
 8005a82:	d902      	bls.n	8005a8a <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8005a84:	7ffb      	ldrb	r3, [r7, #31]
 8005a86:	3301      	adds	r3, #1
 8005a88:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8c:	7a1b      	ldrb	r3, [r3, #8]
 8005a8e:	f003 0308 	and.w	r3, r3, #8
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d05d      	beq.n	8005b52 <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 8005a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a98:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8005a9a:	2b04      	cmp	r3, #4
 8005a9c:	d003      	beq.n	8005aa6 <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 8005a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa0:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 8005aa2:	2b07      	cmp	r3, #7
 8005aa4:	d155      	bne.n	8005b52 <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005aa6:	4b0c      	ldr	r3, [pc, #48]	; (8005ad8 <tcp_slowtmr+0x268>)
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ab6:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8005aba:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8005abe:	4910      	ldr	r1, [pc, #64]	; (8005b00 <tcp_slowtmr+0x290>)
 8005ac0:	fba1 1303 	umull	r1, r3, r1, r3
 8005ac4:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d91c      	bls.n	8005b04 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8005aca:	7ffb      	ldrb	r3, [r7, #31]
 8005acc:	3301      	adds	r3, #1
 8005ace:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 8005ad0:	7fbb      	ldrb	r3, [r7, #30]
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	77bb      	strb	r3, [r7, #30]
 8005ad6:	e03c      	b.n	8005b52 <tcp_slowtmr+0x2e2>
 8005ad8:	200068e8 	.word	0x200068e8
 8005adc:	200000d2 	.word	0x200000d2
 8005ae0:	200068e4 	.word	0x200068e4
 8005ae4:	0800fcc0 	.word	0x0800fcc0
 8005ae8:	0800fe70 	.word	0x0800fe70
 8005aec:	0800fcfc 	.word	0x0800fcfc
 8005af0:	0800fe9c 	.word	0x0800fe9c
 8005af4:	0800fec8 	.word	0x0800fec8
 8005af8:	080115fc 	.word	0x080115fc
 8005afc:	080115ec 	.word	0x080115ec
 8005b00:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005b04:	4b97      	ldr	r3, [pc, #604]	; (8005d64 <tcp_slowtmr+0x4f4>)
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0a:	6a1b      	ldr	r3, [r3, #32]
 8005b0c:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b10:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8005b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b16:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	4b92      	ldr	r3, [pc, #584]	; (8005d68 <tcp_slowtmr+0x4f8>)
 8005b1e:	fb03 f300 	mul.w	r3, r3, r0
 8005b22:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 8005b24:	4991      	ldr	r1, [pc, #580]	; (8005d6c <tcp_slowtmr+0x4fc>)
 8005b26:	fba1 1303 	umull	r1, r3, r1, r3
 8005b2a:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d910      	bls.n	8005b52 <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 8005b30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b32:	f003 fdbc 	bl	80096ae <tcp_keepalive>
 8005b36:	4603      	mov	r3, r0
 8005b38:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 8005b3a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d107      	bne.n	8005b52 <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 8005b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b44:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8005b48:	3301      	adds	r3, #1
 8005b4a:	b2da      	uxtb	r2, r3
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4e:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8005b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d016      	beq.n	8005b88 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8005b5a:	4b82      	ldr	r3, [pc, #520]	; (8005d64 <tcp_slowtmr+0x4f4>)
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	1ad2      	subs	r2, r2, r3
 8005b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b66:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	460b      	mov	r3, r1
 8005b6e:	005b      	lsls	r3, r3, #1
 8005b70:	440b      	add	r3, r1
 8005b72:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d307      	bcc.n	8005b88 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 8005b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f000 fa04 	bl	8005f8a <tcp_segs_free>
      pcb->ooseq = NULL;
 8005b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b84:	2200      	movs	r2, #0
 8005b86:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8005b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8a:	7d1b      	ldrb	r3, [r3, #20]
 8005b8c:	2b03      	cmp	r3, #3
 8005b8e:	d109      	bne.n	8005ba4 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8005b90:	4b74      	ldr	r3, [pc, #464]	; (8005d64 <tcp_slowtmr+0x4f4>)
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b96:	6a1b      	ldr	r3, [r3, #32]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	2b28      	cmp	r3, #40	; 0x28
 8005b9c:	d902      	bls.n	8005ba4 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8005b9e:	7ffb      	ldrb	r3, [r7, #31]
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8005ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba6:	7d1b      	ldrb	r3, [r3, #20]
 8005ba8:	2b09      	cmp	r3, #9
 8005baa:	d109      	bne.n	8005bc0 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8005bac:	4b6d      	ldr	r3, [pc, #436]	; (8005d64 <tcp_slowtmr+0x4f4>)
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb2:	6a1b      	ldr	r3, [r3, #32]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	2bf0      	cmp	r3, #240	; 0xf0
 8005bb8:	d902      	bls.n	8005bc0 <tcp_slowtmr+0x350>
        ++pcb_remove;
 8005bba:	7ffb      	ldrb	r3, [r7, #31]
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8005bc0:	7ffb      	ldrb	r3, [r7, #31]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d05d      	beq.n	8005c82 <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bcc:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8005bce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005bd0:	f000 fb84 	bl	80062dc <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8005bd4:	6a3b      	ldr	r3, [r7, #32]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d010      	beq.n	8005bfc <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8005bda:	4b65      	ldr	r3, [pc, #404]	; (8005d70 <tcp_slowtmr+0x500>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d106      	bne.n	8005bf2 <tcp_slowtmr+0x382>
 8005be4:	4b63      	ldr	r3, [pc, #396]	; (8005d74 <tcp_slowtmr+0x504>)
 8005be6:	f240 4289 	movw	r2, #1161	; 0x489
 8005bea:	4963      	ldr	r1, [pc, #396]	; (8005d78 <tcp_slowtmr+0x508>)
 8005bec:	4863      	ldr	r0, [pc, #396]	; (8005d7c <tcp_slowtmr+0x50c>)
 8005bee:	f008 fc97 	bl	800e520 <iprintf>
        prev->next = pcb->next;
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf4:	68da      	ldr	r2, [r3, #12]
 8005bf6:	6a3b      	ldr	r3, [r7, #32]
 8005bf8:	60da      	str	r2, [r3, #12]
 8005bfa:	e00f      	b.n	8005c1c <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8005bfc:	4b5c      	ldr	r3, [pc, #368]	; (8005d70 <tcp_slowtmr+0x500>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d006      	beq.n	8005c14 <tcp_slowtmr+0x3a4>
 8005c06:	4b5b      	ldr	r3, [pc, #364]	; (8005d74 <tcp_slowtmr+0x504>)
 8005c08:	f240 428d 	movw	r2, #1165	; 0x48d
 8005c0c:	495c      	ldr	r1, [pc, #368]	; (8005d80 <tcp_slowtmr+0x510>)
 8005c0e:	485b      	ldr	r0, [pc, #364]	; (8005d7c <tcp_slowtmr+0x50c>)
 8005c10:	f008 fc86 	bl	800e520 <iprintf>
        tcp_active_pcbs = pcb->next;
 8005c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	4a55      	ldr	r2, [pc, #340]	; (8005d70 <tcp_slowtmr+0x500>)
 8005c1a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8005c1c:	7fbb      	ldrb	r3, [r7, #30]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d010      	beq.n	8005c44 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c24:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c28:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005c2a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2e:	1d1d      	adds	r5, r3, #4
 8005c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c32:	8adb      	ldrh	r3, [r3, #22]
 8005c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c36:	8b12      	ldrh	r2, [r2, #24]
 8005c38:	9201      	str	r2, [sp, #4]
 8005c3a:	9300      	str	r3, [sp, #0]
 8005c3c:	462b      	mov	r3, r5
 8005c3e:	4622      	mov	r2, r4
 8005c40:	f003 fbe2 	bl	8009408 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8005c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4c:	7d1b      	ldrb	r3, [r3, #20]
 8005c4e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8005c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c52:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8005c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8005c5a:	6839      	ldr	r1, [r7, #0]
 8005c5c:	2001      	movs	r0, #1
 8005c5e:	f7fe fac9 	bl	80041f4 <memp_free>

      tcp_active_pcbs_changed = 0;
 8005c62:	4b48      	ldr	r3, [pc, #288]	; (8005d84 <tcp_slowtmr+0x514>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d004      	beq.n	8005c78 <tcp_slowtmr+0x408>
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f06f 010c 	mvn.w	r1, #12
 8005c74:	68b8      	ldr	r0, [r7, #8]
 8005c76:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8005c78:	4b42      	ldr	r3, [pc, #264]	; (8005d84 <tcp_slowtmr+0x514>)
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d035      	beq.n	8005cec <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 8005c80:	e606      	b.n	8005890 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8005c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c84:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8005c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8005c8c:	6a3b      	ldr	r3, [r7, #32]
 8005c8e:	7edb      	ldrb	r3, [r3, #27]
 8005c90:	3301      	adds	r3, #1
 8005c92:	b2da      	uxtb	r2, r3
 8005c94:	6a3b      	ldr	r3, [r7, #32]
 8005c96:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8005c98:	6a3b      	ldr	r3, [r7, #32]
 8005c9a:	7eda      	ldrb	r2, [r3, #27]
 8005c9c:	6a3b      	ldr	r3, [r7, #32]
 8005c9e:	7f1b      	ldrb	r3, [r3, #28]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d323      	bcc.n	8005cec <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 8005ca4:	6a3b      	ldr	r3, [r7, #32]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8005caa:	4b36      	ldr	r3, [pc, #216]	; (8005d84 <tcp_slowtmr+0x514>)
 8005cac:	2200      	movs	r2, #0
 8005cae:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8005cb0:	6a3b      	ldr	r3, [r7, #32]
 8005cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00a      	beq.n	8005cd0 <tcp_slowtmr+0x460>
 8005cba:	6a3b      	ldr	r3, [r7, #32]
 8005cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cc0:	6a3a      	ldr	r2, [r7, #32]
 8005cc2:	6912      	ldr	r2, [r2, #16]
 8005cc4:	6a39      	ldr	r1, [r7, #32]
 8005cc6:	4610      	mov	r0, r2
 8005cc8:	4798      	blx	r3
 8005cca:	4603      	mov	r3, r0
 8005ccc:	777b      	strb	r3, [r7, #29]
 8005cce:	e001      	b.n	8005cd4 <tcp_slowtmr+0x464>
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 8005cd4:	4b2b      	ldr	r3, [pc, #172]	; (8005d84 <tcp_slowtmr+0x514>)
 8005cd6:	781b      	ldrb	r3, [r3, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d000      	beq.n	8005cde <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 8005cdc:	e5d8      	b.n	8005890 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8005cde:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d102      	bne.n	8005cec <tcp_slowtmr+0x47c>
          tcp_output(prev);
 8005ce6:	6a38      	ldr	r0, [r7, #32]
 8005ce8:	f003 f904 	bl	8008ef4 <tcp_output>
  while (pcb != NULL) {
 8005cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	f47f add4 	bne.w	800589c <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 8005cf8:	4b23      	ldr	r3, [pc, #140]	; (8005d88 <tcp_slowtmr+0x518>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8005cfe:	e068      	b.n	8005dd2 <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8005d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d02:	7d1b      	ldrb	r3, [r3, #20]
 8005d04:	2b0a      	cmp	r3, #10
 8005d06:	d006      	beq.n	8005d16 <tcp_slowtmr+0x4a6>
 8005d08:	4b1a      	ldr	r3, [pc, #104]	; (8005d74 <tcp_slowtmr+0x504>)
 8005d0a:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8005d0e:	491f      	ldr	r1, [pc, #124]	; (8005d8c <tcp_slowtmr+0x51c>)
 8005d10:	481a      	ldr	r0, [pc, #104]	; (8005d7c <tcp_slowtmr+0x50c>)
 8005d12:	f008 fc05 	bl	800e520 <iprintf>
    pcb_remove = 0;
 8005d16:	2300      	movs	r3, #0
 8005d18:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8005d1a:	4b12      	ldr	r3, [pc, #72]	; (8005d64 <tcp_slowtmr+0x4f4>)
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	2bf0      	cmp	r3, #240	; 0xf0
 8005d26:	d902      	bls.n	8005d2e <tcp_slowtmr+0x4be>
      ++pcb_remove;
 8005d28:	7ffb      	ldrb	r3, [r7, #31]
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8005d2e:	7ffb      	ldrb	r3, [r7, #31]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d049      	beq.n	8005dc8 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8005d34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d36:	f000 fad1 	bl	80062dc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8005d3a:	6a3b      	ldr	r3, [r7, #32]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d029      	beq.n	8005d94 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8005d40:	4b11      	ldr	r3, [pc, #68]	; (8005d88 <tcp_slowtmr+0x518>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d106      	bne.n	8005d58 <tcp_slowtmr+0x4e8>
 8005d4a:	4b0a      	ldr	r3, [pc, #40]	; (8005d74 <tcp_slowtmr+0x504>)
 8005d4c:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8005d50:	490f      	ldr	r1, [pc, #60]	; (8005d90 <tcp_slowtmr+0x520>)
 8005d52:	480a      	ldr	r0, [pc, #40]	; (8005d7c <tcp_slowtmr+0x50c>)
 8005d54:	f008 fbe4 	bl	800e520 <iprintf>
        prev->next = pcb->next;
 8005d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5a:	68da      	ldr	r2, [r3, #12]
 8005d5c:	6a3b      	ldr	r3, [r7, #32]
 8005d5e:	60da      	str	r2, [r3, #12]
 8005d60:	e028      	b.n	8005db4 <tcp_slowtmr+0x544>
 8005d62:	bf00      	nop
 8005d64:	200068e8 	.word	0x200068e8
 8005d68:	000124f8 	.word	0x000124f8
 8005d6c:	10624dd3 	.word	0x10624dd3
 8005d70:	200068e4 	.word	0x200068e4
 8005d74:	0800fcc0 	.word	0x0800fcc0
 8005d78:	0800fef8 	.word	0x0800fef8
 8005d7c:	0800fcfc 	.word	0x0800fcfc
 8005d80:	0800ff24 	.word	0x0800ff24
 8005d84:	200068e0 	.word	0x200068e0
 8005d88:	200068f4 	.word	0x200068f4
 8005d8c:	0800ff50 	.word	0x0800ff50
 8005d90:	0800ff80 	.word	0x0800ff80
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8005d94:	4b12      	ldr	r3, [pc, #72]	; (8005de0 <tcp_slowtmr+0x570>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d006      	beq.n	8005dac <tcp_slowtmr+0x53c>
 8005d9e:	4b11      	ldr	r3, [pc, #68]	; (8005de4 <tcp_slowtmr+0x574>)
 8005da0:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8005da4:	4910      	ldr	r1, [pc, #64]	; (8005de8 <tcp_slowtmr+0x578>)
 8005da6:	4811      	ldr	r0, [pc, #68]	; (8005dec <tcp_slowtmr+0x57c>)
 8005da8:	f008 fbba 	bl	800e520 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8005dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	4a0b      	ldr	r2, [pc, #44]	; (8005de0 <tcp_slowtmr+0x570>)
 8005db2:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8005db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db6:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 8005db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8005dbe:	69b9      	ldr	r1, [r7, #24]
 8005dc0:	2001      	movs	r0, #1
 8005dc2:	f7fe fa17 	bl	80041f4 <memp_free>
 8005dc6:	e004      	b.n	8005dd2 <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 8005dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dca:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8005dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d193      	bne.n	8005d00 <tcp_slowtmr+0x490>
    }
  }
}
 8005dd8:	bf00      	nop
 8005dda:	3728      	adds	r7, #40	; 0x28
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bdb0      	pop	{r4, r5, r7, pc}
 8005de0:	200068f4 	.word	0x200068f4
 8005de4:	0800fcc0 	.word	0x0800fcc0
 8005de8:	0800ffa8 	.word	0x0800ffa8
 8005dec:	0800fcfc 	.word	0x0800fcfc

08005df0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8005df6:	4b2d      	ldr	r3, [pc, #180]	; (8005eac <tcp_fasttmr+0xbc>)
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	b2da      	uxtb	r2, r3
 8005dfe:	4b2b      	ldr	r3, [pc, #172]	; (8005eac <tcp_fasttmr+0xbc>)
 8005e00:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8005e02:	4b2b      	ldr	r3, [pc, #172]	; (8005eb0 <tcp_fasttmr+0xc0>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8005e08:	e048      	b.n	8005e9c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	7f5a      	ldrb	r2, [r3, #29]
 8005e0e:	4b27      	ldr	r3, [pc, #156]	; (8005eac <tcp_fasttmr+0xbc>)
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d03f      	beq.n	8005e96 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8005e16:	4b25      	ldr	r3, [pc, #148]	; (8005eac <tcp_fasttmr+0xbc>)
 8005e18:	781a      	ldrb	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	7e9b      	ldrb	r3, [r3, #26]
 8005e22:	f003 0301 	and.w	r3, r3, #1
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d010      	beq.n	8005e4c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	7e9b      	ldrb	r3, [r3, #26]
 8005e2e:	f043 0302 	orr.w	r3, r3, #2
 8005e32:	b2da      	uxtb	r2, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f003 f85b 	bl	8008ef4 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	7e9b      	ldrb	r3, [r3, #26]
 8005e42:	f023 0303 	bic.w	r3, r3, #3
 8005e46:	b2da      	uxtb	r2, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	7e9b      	ldrb	r3, [r3, #26]
 8005e50:	f003 0308 	and.w	r3, r3, #8
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d009      	beq.n	8005e6c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	7e9b      	ldrb	r3, [r3, #26]
 8005e5c:	f023 0308 	bic.w	r3, r3, #8
 8005e60:	b2da      	uxtb	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f7ff fb1e 	bl	80054a8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00a      	beq.n	8005e90 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8005e7a:	4b0e      	ldr	r3, [pc, #56]	; (8005eb4 <tcp_fasttmr+0xc4>)
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 f819 	bl	8005eb8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8005e86:	4b0b      	ldr	r3, [pc, #44]	; (8005eb4 <tcp_fasttmr+0xc4>)
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d000      	beq.n	8005e90 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8005e8e:	e7b8      	b.n	8005e02 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	607b      	str	r3, [r7, #4]
 8005e94:	e002      	b.n	8005e9c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d1b3      	bne.n	8005e0a <tcp_fasttmr+0x1a>
    }
  }
}
 8005ea2:	bf00      	nop
 8005ea4:	3708      	adds	r7, #8
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	200000d2 	.word	0x200000d2
 8005eb0:	200068e4 	.word	0x200068e4
 8005eb4:	200068e0 	.word	0x200068e0

08005eb8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8005eb8:	b590      	push	{r4, r7, lr}
 8005eba:	b085      	sub	sp, #20
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ec4:	7b5b      	ldrb	r3, [r3, #13]
 8005ec6:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ecc:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00b      	beq.n	8005ef6 <tcp_process_refused_data+0x3e>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6918      	ldr	r0, [r3, #16]
 8005ee8:	2300      	movs	r3, #0
 8005eea:	68ba      	ldr	r2, [r7, #8]
 8005eec:	6879      	ldr	r1, [r7, #4]
 8005eee:	47a0      	blx	r4
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	73fb      	strb	r3, [r7, #15]
 8005ef4:	e007      	b.n	8005f06 <tcp_process_refused_data+0x4e>
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	68ba      	ldr	r2, [r7, #8]
 8005efa:	6879      	ldr	r1, [r7, #4]
 8005efc:	2000      	movs	r0, #0
 8005efe:	f000 f88c 	bl	800601a <tcp_recv_null>
 8005f02:	4603      	mov	r3, r0
 8005f04:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8005f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d12a      	bne.n	8005f64 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8005f0e:	7bbb      	ldrb	r3, [r7, #14]
 8005f10:	f003 0320 	and.w	r3, r3, #32
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d033      	beq.n	8005f80 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f1c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8005f20:	d005      	beq.n	8005f2e <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f26:	3301      	adds	r3, #1
 8005f28:	b29a      	uxth	r2, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00b      	beq.n	8005f50 <tcp_process_refused_data+0x98>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6918      	ldr	r0, [r3, #16]
 8005f42:	2300      	movs	r3, #0
 8005f44:	2200      	movs	r2, #0
 8005f46:	6879      	ldr	r1, [r7, #4]
 8005f48:	47a0      	blx	r4
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	73fb      	strb	r3, [r7, #15]
 8005f4e:	e001      	b.n	8005f54 <tcp_process_refused_data+0x9c>
 8005f50:	2300      	movs	r3, #0
 8005f52:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8005f54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f58:	f113 0f0d 	cmn.w	r3, #13
 8005f5c:	d110      	bne.n	8005f80 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 8005f5e:	f06f 030c 	mvn.w	r3, #12
 8005f62:	e00e      	b.n	8005f82 <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 8005f64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f68:	f113 0f0d 	cmn.w	r3, #13
 8005f6c:	d102      	bne.n	8005f74 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8005f6e:	f06f 030c 	mvn.w	r3, #12
 8005f72:	e006      	b.n	8005f82 <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	68ba      	ldr	r2, [r7, #8]
 8005f78:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 8005f7a:	f06f 0304 	mvn.w	r3, #4
 8005f7e:	e000      	b.n	8005f82 <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 8005f80:	2300      	movs	r3, #0
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3714      	adds	r7, #20
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd90      	pop	{r4, r7, pc}

08005f8a <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8005f8a:	b580      	push	{r7, lr}
 8005f8c:	b084      	sub	sp, #16
 8005f8e:	af00      	add	r7, sp, #0
 8005f90:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8005f92:	e007      	b.n	8005fa4 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 f809 	bl	8005fb2 <tcp_seg_free>
    seg = next;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1f4      	bne.n	8005f94 <tcp_segs_free+0xa>
  }
}
 8005faa:	bf00      	nop
 8005fac:	3710      	adds	r7, #16
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b082      	sub	sp, #8
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d00c      	beq.n	8005fda <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	685b      	ldr	r3, [r3, #4]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d004      	beq.n	8005fd2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f7fe fe9d 	bl	8004d0c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8005fd2:	6879      	ldr	r1, [r7, #4]
 8005fd4:	2003      	movs	r0, #3
 8005fd6:	f7fe f90d 	bl	80041f4 <memp_free>
  }
}
 8005fda:	bf00      	nop
 8005fdc:	3708      	adds	r7, #8
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b084      	sub	sp, #16
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8005fea:	2003      	movs	r0, #3
 8005fec:	f7fe f8b6 	bl	800415c <memp_malloc>
 8005ff0:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d101      	bne.n	8005ffc <tcp_seg_copy+0x1a>
    return NULL;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	e00a      	b.n	8006012 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8005ffc:	2210      	movs	r2, #16
 8005ffe:	6879      	ldr	r1, [r7, #4]
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f008 fa7a 	bl	800e4fa <memcpy>
  pbuf_ref(cseg->p);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	4618      	mov	r0, r3
 800600c:	f7fe ff28 	bl	8004e60 <pbuf_ref>
  return cseg;
 8006010:	68fb      	ldr	r3, [r7, #12]
}
 8006012:	4618      	mov	r0, r3
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b084      	sub	sp, #16
 800601e:	af00      	add	r7, sp, #0
 8006020:	60f8      	str	r0, [r7, #12]
 8006022:	60b9      	str	r1, [r7, #8]
 8006024:	607a      	str	r2, [r7, #4]
 8006026:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d009      	beq.n	8006042 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	891b      	ldrh	r3, [r3, #8]
 8006032:	4619      	mov	r1, r3
 8006034:	68b8      	ldr	r0, [r7, #8]
 8006036:	f7ff fbc1 	bl	80057bc <tcp_recved>
    pbuf_free(p);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f7fe fe66 	bl	8004d0c <pbuf_free>
 8006040:	e008      	b.n	8006054 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 8006042:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d104      	bne.n	8006054 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 800604a:	68b8      	ldr	r0, [r7, #8]
 800604c:	f7ff fa92 	bl	8005574 <tcp_close>
 8006050:	4603      	mov	r3, r0
 8006052:	e000      	b.n	8006056 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 8006054:	2300      	movs	r3, #0
}
 8006056:	4618      	mov	r0, r3
 8006058:	3710      	adds	r7, #16
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
	...

08006060 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b086      	sub	sp, #24
 8006064:	af00      	add	r7, sp, #0
 8006066:	4603      	mov	r3, r0
 8006068:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800606a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800606e:	2b00      	cmp	r3, #0
 8006070:	db01      	blt.n	8006076 <tcp_kill_prio+0x16>
 8006072:	79fb      	ldrb	r3, [r7, #7]
 8006074:	e000      	b.n	8006078 <tcp_kill_prio+0x18>
 8006076:	237f      	movs	r3, #127	; 0x7f
 8006078:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 800607a:	2300      	movs	r3, #0
 800607c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800607e:	2300      	movs	r3, #0
 8006080:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006082:	4b16      	ldr	r3, [pc, #88]	; (80060dc <tcp_kill_prio+0x7c>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	617b      	str	r3, [r7, #20]
 8006088:	e01a      	b.n	80060c0 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	7d5b      	ldrb	r3, [r3, #21]
 800608e:	7afa      	ldrb	r2, [r7, #11]
 8006090:	429a      	cmp	r2, r3
 8006092:	d312      	bcc.n	80060ba <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006094:	4b12      	ldr	r3, [pc, #72]	; (80060e0 <tcp_kill_prio+0x80>)
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	6a1b      	ldr	r3, [r3, #32]
 800609c:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d80a      	bhi.n	80060ba <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 80060a4:	4b0e      	ldr	r3, [pc, #56]	; (80060e0 <tcp_kill_prio+0x80>)
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	6a1b      	ldr	r3, [r3, #32]
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	7d5b      	ldrb	r3, [r3, #21]
 80060b8:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	617b      	str	r3, [r7, #20]
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1e1      	bne.n	800608a <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d002      	beq.n	80060d2 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 80060cc:	6938      	ldr	r0, [r7, #16]
 80060ce:	f7ff fb1b 	bl	8005708 <tcp_abort>
  }
}
 80060d2:	bf00      	nop
 80060d4:	3718      	adds	r7, #24
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	200068e4 	.word	0x200068e4
 80060e0:	200068e8 	.word	0x200068e8

080060e4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b086      	sub	sp, #24
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	4603      	mov	r3, r0
 80060ec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80060ee:	79fb      	ldrb	r3, [r7, #7]
 80060f0:	2b08      	cmp	r3, #8
 80060f2:	d009      	beq.n	8006108 <tcp_kill_state+0x24>
 80060f4:	79fb      	ldrb	r3, [r7, #7]
 80060f6:	2b09      	cmp	r3, #9
 80060f8:	d006      	beq.n	8006108 <tcp_kill_state+0x24>
 80060fa:	4b1a      	ldr	r3, [pc, #104]	; (8006164 <tcp_kill_state+0x80>)
 80060fc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006100:	4919      	ldr	r1, [pc, #100]	; (8006168 <tcp_kill_state+0x84>)
 8006102:	481a      	ldr	r0, [pc, #104]	; (800616c <tcp_kill_state+0x88>)
 8006104:	f008 fa0c 	bl	800e520 <iprintf>

  inactivity = 0;
 8006108:	2300      	movs	r3, #0
 800610a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800610c:	2300      	movs	r3, #0
 800610e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006110:	4b17      	ldr	r3, [pc, #92]	; (8006170 <tcp_kill_state+0x8c>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	617b      	str	r3, [r7, #20]
 8006116:	e017      	b.n	8006148 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	7d1b      	ldrb	r3, [r3, #20]
 800611c:	79fa      	ldrb	r2, [r7, #7]
 800611e:	429a      	cmp	r2, r3
 8006120:	d10f      	bne.n	8006142 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8006122:	4b14      	ldr	r3, [pc, #80]	; (8006174 <tcp_kill_state+0x90>)
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	429a      	cmp	r2, r3
 8006130:	d807      	bhi.n	8006142 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8006132:	4b10      	ldr	r3, [pc, #64]	; (8006174 <tcp_kill_state+0x90>)
 8006134:	681a      	ldr	r2, [r3, #0]
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	617b      	str	r3, [r7, #20]
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d1e4      	bne.n	8006118 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d003      	beq.n	800615c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8006154:	2100      	movs	r1, #0
 8006156:	6938      	ldr	r0, [r7, #16]
 8006158:	f7ff fa24 	bl	80055a4 <tcp_abandon>
  }
}
 800615c:	bf00      	nop
 800615e:	3718      	adds	r7, #24
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}
 8006164:	0800fcc0 	.word	0x0800fcc0
 8006168:	0800ffd0 	.word	0x0800ffd0
 800616c:	0800fcfc 	.word	0x0800fcfc
 8006170:	200068e4 	.word	0x200068e4
 8006174:	200068e8 	.word	0x200068e8

08006178 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800617e:	2300      	movs	r3, #0
 8006180:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8006182:	2300      	movs	r3, #0
 8006184:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006186:	4b12      	ldr	r3, [pc, #72]	; (80061d0 <tcp_kill_timewait+0x58>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	60fb      	str	r3, [r7, #12]
 800618c:	e012      	b.n	80061b4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800618e:	4b11      	ldr	r3, [pc, #68]	; (80061d4 <tcp_kill_timewait+0x5c>)
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6a1b      	ldr	r3, [r3, #32]
 8006196:	1ad3      	subs	r3, r2, r3
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	429a      	cmp	r2, r3
 800619c:	d807      	bhi.n	80061ae <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800619e:	4b0d      	ldr	r3, [pc, #52]	; (80061d4 <tcp_kill_timewait+0x5c>)
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6a1b      	ldr	r3, [r3, #32]
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	60fb      	str	r3, [r7, #12]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d1e9      	bne.n	800618e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d002      	beq.n	80061c6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 80061c0:	68b8      	ldr	r0, [r7, #8]
 80061c2:	f7ff faa1 	bl	8005708 <tcp_abort>
  }
}
 80061c6:	bf00      	nop
 80061c8:	3710      	adds	r7, #16
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	200068f4 	.word	0x200068f4
 80061d4:	200068e8 	.word	0x200068e8

080061d8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	4603      	mov	r3, r0
 80061e0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80061e2:	2001      	movs	r0, #1
 80061e4:	f7fd ffba 	bl	800415c <memp_malloc>
 80061e8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d124      	bne.n	800623a <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80061f0:	f7ff ffc2 	bl	8006178 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80061f4:	2001      	movs	r0, #1
 80061f6:	f7fd ffb1 	bl	800415c <memp_malloc>
 80061fa:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d11b      	bne.n	800623a <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8006202:	2009      	movs	r0, #9
 8006204:	f7ff ff6e 	bl	80060e4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006208:	2001      	movs	r0, #1
 800620a:	f7fd ffa7 	bl	800415c <memp_malloc>
 800620e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d111      	bne.n	800623a <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8006216:	2008      	movs	r0, #8
 8006218:	f7ff ff64 	bl	80060e4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800621c:	2001      	movs	r0, #1
 800621e:	f7fd ff9d 	bl	800415c <memp_malloc>
 8006222:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d107      	bne.n	800623a <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800622a:	79fb      	ldrb	r3, [r7, #7]
 800622c:	4618      	mov	r0, r3
 800622e:	f7ff ff17 	bl	8006060 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006232:	2001      	movs	r0, #1
 8006234:	f7fd ff92 	bl	800415c <memp_malloc>
 8006238:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d03f      	beq.n	80062c0 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8006240:	2298      	movs	r2, #152	; 0x98
 8006242:	2100      	movs	r1, #0
 8006244:	68f8      	ldr	r0, [r7, #12]
 8006246:	f008 f963 	bl	800e510 <memset>
    pcb->prio = prio;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	79fa      	ldrb	r2, [r7, #7]
 800624e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8006256:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006260:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	22ff      	movs	r2, #255	; 0xff
 800626e:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f44f 7206 	mov.w	r2, #536	; 0x218
 8006276:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2206      	movs	r2, #6
 800627c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2206      	movs	r2, #6
 8006284:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800628c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2201      	movs	r2, #1
 8006292:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8006296:	4b0d      	ldr	r3, [pc, #52]	; (80062cc <tcp_alloc+0xf4>)
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800629e:	4b0c      	ldr	r3, [pc, #48]	; (80062d0 <tcp_alloc+0xf8>)
 80062a0:	781a      	ldrb	r2, [r3, #0]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80062ac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	4a08      	ldr	r2, [pc, #32]	; (80062d4 <tcp_alloc+0xfc>)
 80062b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	4a07      	ldr	r2, [pc, #28]	; (80062d8 <tcp_alloc+0x100>)
 80062bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80062c0:	68fb      	ldr	r3, [r7, #12]
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	200068e8 	.word	0x200068e8
 80062d0:	200000d2 	.word	0x200000d2
 80062d4:	0800601b 	.word	0x0800601b
 80062d8:	006ddd00 	.word	0x006ddd00

080062dc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	7d1b      	ldrb	r3, [r3, #20]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d034      	beq.n	8006356 <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80062f0:	2b0a      	cmp	r3, #10
 80062f2:	d030      	beq.n	8006356 <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d02c      	beq.n	8006356 <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006300:	2b00      	cmp	r3, #0
 8006302:	d007      	beq.n	8006314 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006308:	4618      	mov	r0, r3
 800630a:	f7fe fcff 	bl	8004d0c <pbuf_free>
      pcb->refused_data = NULL;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006318:	4618      	mov	r0, r3
 800631a:	f7ff fe36 	bl	8005f8a <tcp_segs_free>
    pcb->ooseq = NULL;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800632a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006330:	4618      	mov	r0, r3
 8006332:	f7ff fe2a 	bl	8005f8a <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800633a:	4618      	mov	r0, r3
 800633c:	f7ff fe25 	bl	8005f8a <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	669a      	str	r2, [r3, #104]	; 0x68
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 8006356:	bf00      	nop
 8006358:	3708      	adds	r7, #8
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
	...

08006360 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	683a      	ldr	r2, [r7, #0]
 8006370:	429a      	cmp	r2, r3
 8006372:	d105      	bne.n	8006380 <tcp_pcb_remove+0x20>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68da      	ldr	r2, [r3, #12]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	601a      	str	r2, [r3, #0]
 800637e:	e013      	b.n	80063a8 <tcp_pcb_remove+0x48>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	60fb      	str	r3, [r7, #12]
 8006386:	e00c      	b.n	80063a2 <tcp_pcb_remove+0x42>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	683a      	ldr	r2, [r7, #0]
 800638e:	429a      	cmp	r2, r3
 8006390:	d104      	bne.n	800639c <tcp_pcb_remove+0x3c>
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	68da      	ldr	r2, [r3, #12]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	60da      	str	r2, [r3, #12]
 800639a:	e005      	b.n	80063a8 <tcp_pcb_remove+0x48>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	68db      	ldr	r3, [r3, #12]
 80063a0:	60fb      	str	r3, [r7, #12]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1ef      	bne.n	8006388 <tcp_pcb_remove+0x28>
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	2200      	movs	r2, #0
 80063ac:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80063ae:	6838      	ldr	r0, [r7, #0]
 80063b0:	f7ff ff94 	bl	80062dc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	7d1b      	ldrb	r3, [r3, #20]
 80063b8:	2b0a      	cmp	r3, #10
 80063ba:	d013      	beq.n	80063e4 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d00f      	beq.n	80063e4 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	7e9b      	ldrb	r3, [r3, #26]
 80063c8:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d009      	beq.n	80063e4 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	7e9b      	ldrb	r3, [r3, #26]
 80063d4:	f043 0302 	orr.w	r3, r3, #2
 80063d8:	b2da      	uxtb	r2, r3
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 80063de:	6838      	ldr	r0, [r7, #0]
 80063e0:	f002 fd88 	bl	8008ef4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	7d1b      	ldrb	r3, [r3, #20]
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d020      	beq.n	800642e <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d006      	beq.n	8006402 <tcp_pcb_remove+0xa2>
 80063f4:	4b13      	ldr	r3, [pc, #76]	; (8006444 <tcp_pcb_remove+0xe4>)
 80063f6:	f240 7253 	movw	r2, #1875	; 0x753
 80063fa:	4913      	ldr	r1, [pc, #76]	; (8006448 <tcp_pcb_remove+0xe8>)
 80063fc:	4813      	ldr	r0, [pc, #76]	; (800644c <tcp_pcb_remove+0xec>)
 80063fe:	f008 f88f 	bl	800e520 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006406:	2b00      	cmp	r3, #0
 8006408:	d006      	beq.n	8006418 <tcp_pcb_remove+0xb8>
 800640a:	4b0e      	ldr	r3, [pc, #56]	; (8006444 <tcp_pcb_remove+0xe4>)
 800640c:	f240 7254 	movw	r2, #1876	; 0x754
 8006410:	490f      	ldr	r1, [pc, #60]	; (8006450 <tcp_pcb_remove+0xf0>)
 8006412:	480e      	ldr	r0, [pc, #56]	; (800644c <tcp_pcb_remove+0xec>)
 8006414:	f008 f884 	bl	800e520 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800641c:	2b00      	cmp	r3, #0
 800641e:	d006      	beq.n	800642e <tcp_pcb_remove+0xce>
 8006420:	4b08      	ldr	r3, [pc, #32]	; (8006444 <tcp_pcb_remove+0xe4>)
 8006422:	f240 7256 	movw	r2, #1878	; 0x756
 8006426:	490b      	ldr	r1, [pc, #44]	; (8006454 <tcp_pcb_remove+0xf4>)
 8006428:	4808      	ldr	r0, [pc, #32]	; (800644c <tcp_pcb_remove+0xec>)
 800642a:	f008 f879 	bl	800e520 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	2200      	movs	r2, #0
 8006432:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	2200      	movs	r2, #0
 8006438:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800643a:	bf00      	nop
 800643c:	3710      	adds	r7, #16
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	0800fcc0 	.word	0x0800fcc0
 8006448:	08010078 	.word	0x08010078
 800644c:	0800fcfc 	.word	0x0800fcfc
 8006450:	08010090 	.word	0x08010090
 8006454:	080100ac 	.word	0x080100ac

08006458 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8006460:	4b06      	ldr	r3, [pc, #24]	; (800647c <tcp_next_iss+0x24>)
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	4b06      	ldr	r3, [pc, #24]	; (8006480 <tcp_next_iss+0x28>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4413      	add	r3, r2
 800646a:	4a04      	ldr	r2, [pc, #16]	; (800647c <tcp_next_iss+0x24>)
 800646c:	6013      	str	r3, [r2, #0]
  return iss;
 800646e:	4b03      	ldr	r3, [pc, #12]	; (800647c <tcp_next_iss+0x24>)
 8006470:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8006472:	4618      	mov	r0, r3
 8006474:	370c      	adds	r7, #12
 8006476:	46bd      	mov	sp, r7
 8006478:	bc80      	pop	{r7}
 800647a:	4770      	bx	lr
 800647c:	2000000c 	.word	0x2000000c
 8006480:	200068e8 	.word	0x200068e8

08006484 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	4603      	mov	r3, r0
 800648c:	6039      	str	r1, [r7, #0]
 800648e:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 8006490:	6838      	ldr	r0, [r7, #0]
 8006492:	f006 fe7f 	bl	800d194 <ip4_route>
 8006496:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d101      	bne.n	80064a2 <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 800649e:	88fb      	ldrh	r3, [r7, #6]
 80064a0:	e010      	b.n	80064c4 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064a6:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80064a8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d008      	beq.n	80064c2 <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 80064b0:	897b      	ldrh	r3, [r7, #10]
 80064b2:	3b28      	subs	r3, #40	; 0x28
 80064b4:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80064b6:	893a      	ldrh	r2, [r7, #8]
 80064b8:	88fb      	ldrh	r3, [r7, #6]
 80064ba:	4293      	cmp	r3, r2
 80064bc:	bf28      	it	cs
 80064be:	4613      	movcs	r3, r2
 80064c0:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 80064c2:	88fb      	ldrh	r3, [r7, #6]
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3710      	adds	r7, #16
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}

080064cc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b084      	sub	sp, #16
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80064da:	e011      	b.n	8006500 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d108      	bne.n	80064fa <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80064ee:	68f8      	ldr	r0, [r7, #12]
 80064f0:	f7ff f90a 	bl	8005708 <tcp_abort>
      pcb = next;
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	60fb      	str	r3, [r7, #12]
 80064f8:	e002      	b.n	8006500 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d1ea      	bne.n	80064dc <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 8006506:	bf00      	nop
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
	...

08006510 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d02c      	beq.n	800657a <tcp_netif_ip_addr_changed+0x6a>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d028      	beq.n	800657a <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8006528:	4b16      	ldr	r3, [pc, #88]	; (8006584 <tcp_netif_ip_addr_changed+0x74>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4619      	mov	r1, r3
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f7ff ffcc 	bl	80064cc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8006534:	4b14      	ldr	r3, [pc, #80]	; (8006588 <tcp_netif_ip_addr_changed+0x78>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4619      	mov	r1, r3
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f7ff ffc6 	bl	80064cc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d019      	beq.n	800657a <tcp_netif_ip_addr_changed+0x6a>
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d015      	beq.n	800657a <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800654e:	4b0f      	ldr	r3, [pc, #60]	; (800658c <tcp_netif_ip_addr_changed+0x7c>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	60fb      	str	r3, [r7, #12]
 8006554:	e00e      	b.n	8006574 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	429a      	cmp	r2, r3
 8006566:	d103      	bne.n	8006570 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	681a      	ldr	r2, [r3, #0]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	60fb      	str	r3, [r7, #12]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d1ed      	bne.n	8006556 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800657a:	bf00      	nop
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	200068e4 	.word	0x200068e4
 8006588:	200068f0 	.word	0x200068f0
 800658c:	200068ec 	.word	0x200068ec

08006590 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8006590:	b590      	push	{r4, r7, lr}
 8006592:	b08b      	sub	sp, #44	; 0x2c
 8006594:	af02      	add	r7, sp, #8
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	4a82      	ldr	r2, [pc, #520]	; (80067a8 <tcp_input+0x218>)
 80065a0:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	895b      	ldrh	r3, [r3, #10]
 80065a6:	2b13      	cmp	r3, #19
 80065a8:	f240 838a 	bls.w	8006cc0 <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80065ac:	4b7f      	ldr	r3, [pc, #508]	; (80067ac <tcp_input+0x21c>)
 80065ae:	695a      	ldr	r2, [r3, #20]
 80065b0:	4b7e      	ldr	r3, [pc, #504]	; (80067ac <tcp_input+0x21c>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4619      	mov	r1, r3
 80065b6:	4610      	mov	r0, r2
 80065b8:	f007 f884 	bl	800d6c4 <ip4_addr_isbroadcast_u32>
 80065bc:	4603      	mov	r3, r0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	f040 8380 	bne.w	8006cc4 <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80065c4:	4b79      	ldr	r3, [pc, #484]	; (80067ac <tcp_input+0x21c>)
 80065c6:	695b      	ldr	r3, [r3, #20]
 80065c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80065cc:	2be0      	cmp	r3, #224	; 0xe0
 80065ce:	f000 8379 	beq.w	8006cc4 <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 80065d2:	4b75      	ldr	r3, [pc, #468]	; (80067a8 <tcp_input+0x218>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	899b      	ldrh	r3, [r3, #12]
 80065d8:	b29b      	uxth	r3, r3
 80065da:	4618      	mov	r0, r3
 80065dc:	f7fd fa16 	bl	8003a0c <lwip_htons>
 80065e0:	4603      	mov	r3, r0
 80065e2:	0b1b      	lsrs	r3, r3, #12
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80065ec:	7cbb      	ldrb	r3, [r7, #18]
 80065ee:	2b13      	cmp	r3, #19
 80065f0:	f240 8368 	bls.w	8006cc4 <tcp_input+0x734>
 80065f4:	7cbb      	ldrb	r3, [r7, #18]
 80065f6:	b29a      	uxth	r2, r3
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	891b      	ldrh	r3, [r3, #8]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	f200 8361 	bhi.w	8006cc4 <tcp_input+0x734>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8006602:	7cbb      	ldrb	r3, [r7, #18]
 8006604:	b29b      	uxth	r3, r3
 8006606:	3b14      	subs	r3, #20
 8006608:	b29a      	uxth	r2, r3
 800660a:	4b69      	ldr	r3, [pc, #420]	; (80067b0 <tcp_input+0x220>)
 800660c:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800660e:	4b69      	ldr	r3, [pc, #420]	; (80067b4 <tcp_input+0x224>)
 8006610:	2200      	movs	r2, #0
 8006612:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	895a      	ldrh	r2, [r3, #10]
 8006618:	7cbb      	ldrb	r3, [r7, #18]
 800661a:	b29b      	uxth	r3, r3
 800661c:	429a      	cmp	r2, r3
 800661e:	d30d      	bcc.n	800663c <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8006620:	4b63      	ldr	r3, [pc, #396]	; (80067b0 <tcp_input+0x220>)
 8006622:	881a      	ldrh	r2, [r3, #0]
 8006624:	4b64      	ldr	r3, [pc, #400]	; (80067b8 <tcp_input+0x228>)
 8006626:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8006628:	7cbb      	ldrb	r3, [r7, #18]
 800662a:	b29b      	uxth	r3, r3
 800662c:	425b      	negs	r3, r3
 800662e:	b29b      	uxth	r3, r3
 8006630:	b21b      	sxth	r3, r3
 8006632:	4619      	mov	r1, r3
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f7fe fb45 	bl	8004cc4 <pbuf_header>
 800663a:	e055      	b.n	80066e8 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d105      	bne.n	8006650 <tcp_input+0xc0>
 8006644:	4b5d      	ldr	r3, [pc, #372]	; (80067bc <tcp_input+0x22c>)
 8006646:	22b2      	movs	r2, #178	; 0xb2
 8006648:	495d      	ldr	r1, [pc, #372]	; (80067c0 <tcp_input+0x230>)
 800664a:	485e      	ldr	r0, [pc, #376]	; (80067c4 <tcp_input+0x234>)
 800664c:	f007 ff68 	bl	800e520 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 8006650:	f06f 0113 	mvn.w	r1, #19
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f7fe fb35 	bl	8004cc4 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	895a      	ldrh	r2, [r3, #10]
 800665e:	4b56      	ldr	r3, [pc, #344]	; (80067b8 <tcp_input+0x228>)
 8006660:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8006662:	4b53      	ldr	r3, [pc, #332]	; (80067b0 <tcp_input+0x220>)
 8006664:	881a      	ldrh	r2, [r3, #0]
 8006666:	4b54      	ldr	r3, [pc, #336]	; (80067b8 <tcp_input+0x228>)
 8006668:	881b      	ldrh	r3, [r3, #0]
 800666a:	1ad3      	subs	r3, r2, r3
 800666c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800666e:	4b52      	ldr	r3, [pc, #328]	; (80067b8 <tcp_input+0x228>)
 8006670:	881b      	ldrh	r3, [r3, #0]
 8006672:	425b      	negs	r3, r3
 8006674:	b29b      	uxth	r3, r3
 8006676:	b21b      	sxth	r3, r3
 8006678:	4619      	mov	r1, r3
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f7fe fb22 	bl	8004cc4 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	895b      	ldrh	r3, [r3, #10]
 8006686:	8a3a      	ldrh	r2, [r7, #16]
 8006688:	429a      	cmp	r2, r3
 800668a:	f200 831d 	bhi.w	8006cc8 <tcp_input+0x738>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	4a47      	ldr	r2, [pc, #284]	; (80067b4 <tcp_input+0x224>)
 8006696:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	8a3b      	ldrh	r3, [r7, #16]
 800669e:	425b      	negs	r3, r3
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	b21b      	sxth	r3, r3
 80066a4:	4619      	mov	r1, r3
 80066a6:	4610      	mov	r0, r2
 80066a8:	f7fe fb0c 	bl	8004cc4 <pbuf_header>
    p->tot_len -= opt2len;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	891a      	ldrh	r2, [r3, #8]
 80066b0:	8a3b      	ldrh	r3, [r7, #16]
 80066b2:	1ad3      	subs	r3, r2, r3
 80066b4:	b29a      	uxth	r2, r3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	895b      	ldrh	r3, [r3, #10]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d005      	beq.n	80066ce <tcp_input+0x13e>
 80066c2:	4b3e      	ldr	r3, [pc, #248]	; (80067bc <tcp_input+0x22c>)
 80066c4:	22cf      	movs	r2, #207	; 0xcf
 80066c6:	4940      	ldr	r1, [pc, #256]	; (80067c8 <tcp_input+0x238>)
 80066c8:	483e      	ldr	r0, [pc, #248]	; (80067c4 <tcp_input+0x234>)
 80066ca:	f007 ff29 	bl	800e520 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	891a      	ldrh	r2, [r3, #8]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	891b      	ldrh	r3, [r3, #8]
 80066d8:	429a      	cmp	r2, r3
 80066da:	d005      	beq.n	80066e8 <tcp_input+0x158>
 80066dc:	4b37      	ldr	r3, [pc, #220]	; (80067bc <tcp_input+0x22c>)
 80066de:	22d0      	movs	r2, #208	; 0xd0
 80066e0:	493a      	ldr	r1, [pc, #232]	; (80067cc <tcp_input+0x23c>)
 80066e2:	4838      	ldr	r0, [pc, #224]	; (80067c4 <tcp_input+0x234>)
 80066e4:	f007 ff1c 	bl	800e520 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80066e8:	4b2f      	ldr	r3, [pc, #188]	; (80067a8 <tcp_input+0x218>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	881b      	ldrh	r3, [r3, #0]
 80066ee:	b29a      	uxth	r2, r3
 80066f0:	4b2d      	ldr	r3, [pc, #180]	; (80067a8 <tcp_input+0x218>)
 80066f2:	681c      	ldr	r4, [r3, #0]
 80066f4:	4610      	mov	r0, r2
 80066f6:	f7fd f989 	bl	8003a0c <lwip_htons>
 80066fa:	4603      	mov	r3, r0
 80066fc:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80066fe:	4b2a      	ldr	r3, [pc, #168]	; (80067a8 <tcp_input+0x218>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	885b      	ldrh	r3, [r3, #2]
 8006704:	b29a      	uxth	r2, r3
 8006706:	4b28      	ldr	r3, [pc, #160]	; (80067a8 <tcp_input+0x218>)
 8006708:	681c      	ldr	r4, [r3, #0]
 800670a:	4610      	mov	r0, r2
 800670c:	f7fd f97e 	bl	8003a0c <lwip_htons>
 8006710:	4603      	mov	r3, r0
 8006712:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8006714:	4b24      	ldr	r3, [pc, #144]	; (80067a8 <tcp_input+0x218>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	685a      	ldr	r2, [r3, #4]
 800671a:	4b23      	ldr	r3, [pc, #140]	; (80067a8 <tcp_input+0x218>)
 800671c:	681c      	ldr	r4, [r3, #0]
 800671e:	4610      	mov	r0, r2
 8006720:	f7fd f981 	bl	8003a26 <lwip_htonl>
 8006724:	4603      	mov	r3, r0
 8006726:	6063      	str	r3, [r4, #4]
 8006728:	6863      	ldr	r3, [r4, #4]
 800672a:	4a29      	ldr	r2, [pc, #164]	; (80067d0 <tcp_input+0x240>)
 800672c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800672e:	4b1e      	ldr	r3, [pc, #120]	; (80067a8 <tcp_input+0x218>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	689a      	ldr	r2, [r3, #8]
 8006734:	4b1c      	ldr	r3, [pc, #112]	; (80067a8 <tcp_input+0x218>)
 8006736:	681c      	ldr	r4, [r3, #0]
 8006738:	4610      	mov	r0, r2
 800673a:	f7fd f974 	bl	8003a26 <lwip_htonl>
 800673e:	4603      	mov	r3, r0
 8006740:	60a3      	str	r3, [r4, #8]
 8006742:	68a3      	ldr	r3, [r4, #8]
 8006744:	4a23      	ldr	r2, [pc, #140]	; (80067d4 <tcp_input+0x244>)
 8006746:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8006748:	4b17      	ldr	r3, [pc, #92]	; (80067a8 <tcp_input+0x218>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	89db      	ldrh	r3, [r3, #14]
 800674e:	b29a      	uxth	r2, r3
 8006750:	4b15      	ldr	r3, [pc, #84]	; (80067a8 <tcp_input+0x218>)
 8006752:	681c      	ldr	r4, [r3, #0]
 8006754:	4610      	mov	r0, r2
 8006756:	f7fd f959 	bl	8003a0c <lwip_htons>
 800675a:	4603      	mov	r3, r0
 800675c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800675e:	4b12      	ldr	r3, [pc, #72]	; (80067a8 <tcp_input+0x218>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	899b      	ldrh	r3, [r3, #12]
 8006764:	b29b      	uxth	r3, r3
 8006766:	4618      	mov	r0, r3
 8006768:	f7fd f950 	bl	8003a0c <lwip_htons>
 800676c:	4603      	mov	r3, r0
 800676e:	b2db      	uxtb	r3, r3
 8006770:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006774:	b2da      	uxtb	r2, r3
 8006776:	4b18      	ldr	r3, [pc, #96]	; (80067d8 <tcp_input+0x248>)
 8006778:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	891a      	ldrh	r2, [r3, #8]
 800677e:	4b16      	ldr	r3, [pc, #88]	; (80067d8 <tcp_input+0x248>)
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	f003 0303 	and.w	r3, r3, #3
 8006786:	2b00      	cmp	r3, #0
 8006788:	bf14      	ite	ne
 800678a:	2301      	movne	r3, #1
 800678c:	2300      	moveq	r3, #0
 800678e:	b2db      	uxtb	r3, r3
 8006790:	b29b      	uxth	r3, r3
 8006792:	4413      	add	r3, r2
 8006794:	b29a      	uxth	r2, r3
 8006796:	4b11      	ldr	r3, [pc, #68]	; (80067dc <tcp_input+0x24c>)
 8006798:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800679a:	2300      	movs	r3, #0
 800679c:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800679e:	4b10      	ldr	r3, [pc, #64]	; (80067e0 <tcp_input+0x250>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	61fb      	str	r3, [r7, #28]
 80067a4:	e082      	b.n	80068ac <tcp_input+0x31c>
 80067a6:	bf00      	nop
 80067a8:	200000e4 	.word	0x200000e4
 80067ac:	20003394 	.word	0x20003394
 80067b0:	200000e8 	.word	0x200000e8
 80067b4:	200000ec 	.word	0x200000ec
 80067b8:	200000ea 	.word	0x200000ea
 80067bc:	080100c4 	.word	0x080100c4
 80067c0:	080100f8 	.word	0x080100f8
 80067c4:	08010108 	.word	0x08010108
 80067c8:	08010130 	.word	0x08010130
 80067cc:	0801013c 	.word	0x0801013c
 80067d0:	200000f4 	.word	0x200000f4
 80067d4:	200000f8 	.word	0x200000f8
 80067d8:	20000100 	.word	0x20000100
 80067dc:	200000fe 	.word	0x200000fe
 80067e0:	200068e4 	.word	0x200068e4
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80067e4:	69fb      	ldr	r3, [r7, #28]
 80067e6:	7d1b      	ldrb	r3, [r3, #20]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d105      	bne.n	80067f8 <tcp_input+0x268>
 80067ec:	4b8f      	ldr	r3, [pc, #572]	; (8006a2c <tcp_input+0x49c>)
 80067ee:	22e2      	movs	r2, #226	; 0xe2
 80067f0:	498f      	ldr	r1, [pc, #572]	; (8006a30 <tcp_input+0x4a0>)
 80067f2:	4890      	ldr	r0, [pc, #576]	; (8006a34 <tcp_input+0x4a4>)
 80067f4:	f007 fe94 	bl	800e520 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	7d1b      	ldrb	r3, [r3, #20]
 80067fc:	2b0a      	cmp	r3, #10
 80067fe:	d105      	bne.n	800680c <tcp_input+0x27c>
 8006800:	4b8a      	ldr	r3, [pc, #552]	; (8006a2c <tcp_input+0x49c>)
 8006802:	22e3      	movs	r2, #227	; 0xe3
 8006804:	498c      	ldr	r1, [pc, #560]	; (8006a38 <tcp_input+0x4a8>)
 8006806:	488b      	ldr	r0, [pc, #556]	; (8006a34 <tcp_input+0x4a4>)
 8006808:	f007 fe8a 	bl	800e520 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	7d1b      	ldrb	r3, [r3, #20]
 8006810:	2b01      	cmp	r3, #1
 8006812:	d105      	bne.n	8006820 <tcp_input+0x290>
 8006814:	4b85      	ldr	r3, [pc, #532]	; (8006a2c <tcp_input+0x49c>)
 8006816:	22e4      	movs	r2, #228	; 0xe4
 8006818:	4988      	ldr	r1, [pc, #544]	; (8006a3c <tcp_input+0x4ac>)
 800681a:	4886      	ldr	r0, [pc, #536]	; (8006a34 <tcp_input+0x4a4>)
 800681c:	f007 fe80 	bl	800e520 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	8b1a      	ldrh	r2, [r3, #24]
 8006824:	4b86      	ldr	r3, [pc, #536]	; (8006a40 <tcp_input+0x4b0>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	881b      	ldrh	r3, [r3, #0]
 800682a:	b29b      	uxth	r3, r3
 800682c:	429a      	cmp	r2, r3
 800682e:	d138      	bne.n	80068a2 <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	8ada      	ldrh	r2, [r3, #22]
 8006834:	4b82      	ldr	r3, [pc, #520]	; (8006a40 <tcp_input+0x4b0>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	885b      	ldrh	r3, [r3, #2]
 800683a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800683c:	429a      	cmp	r2, r3
 800683e:	d130      	bne.n	80068a2 <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	685a      	ldr	r2, [r3, #4]
 8006844:	4b7f      	ldr	r3, [pc, #508]	; (8006a44 <tcp_input+0x4b4>)
 8006846:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8006848:	429a      	cmp	r2, r3
 800684a:	d12a      	bne.n	80068a2 <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	4b7c      	ldr	r3, [pc, #496]	; (8006a44 <tcp_input+0x4b4>)
 8006852:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8006854:	429a      	cmp	r2, r3
 8006856:	d124      	bne.n	80068a2 <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	69fa      	ldr	r2, [r7, #28]
 800685e:	429a      	cmp	r2, r3
 8006860:	d105      	bne.n	800686e <tcp_input+0x2de>
 8006862:	4b72      	ldr	r3, [pc, #456]	; (8006a2c <tcp_input+0x49c>)
 8006864:	22ec      	movs	r2, #236	; 0xec
 8006866:	4978      	ldr	r1, [pc, #480]	; (8006a48 <tcp_input+0x4b8>)
 8006868:	4872      	ldr	r0, [pc, #456]	; (8006a34 <tcp_input+0x4a4>)
 800686a:	f007 fe59 	bl	800e520 <iprintf>
      if (prev != NULL) {
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00a      	beq.n	800688a <tcp_input+0x2fa>
        prev->next = pcb->next;
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	68da      	ldr	r2, [r3, #12]
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800687c:	4b73      	ldr	r3, [pc, #460]	; (8006a4c <tcp_input+0x4bc>)
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8006884:	4a71      	ldr	r2, [pc, #452]	; (8006a4c <tcp_input+0x4bc>)
 8006886:	69fb      	ldr	r3, [r7, #28]
 8006888:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	68db      	ldr	r3, [r3, #12]
 800688e:	69fa      	ldr	r2, [r7, #28]
 8006890:	429a      	cmp	r2, r3
 8006892:	d10f      	bne.n	80068b4 <tcp_input+0x324>
 8006894:	4b65      	ldr	r3, [pc, #404]	; (8006a2c <tcp_input+0x49c>)
 8006896:	22f4      	movs	r2, #244	; 0xf4
 8006898:	496d      	ldr	r1, [pc, #436]	; (8006a50 <tcp_input+0x4c0>)
 800689a:	4866      	ldr	r0, [pc, #408]	; (8006a34 <tcp_input+0x4a4>)
 800689c:	f007 fe40 	bl	800e520 <iprintf>
      break;
 80068a0:	e008      	b.n	80068b4 <tcp_input+0x324>
    }
    prev = pcb;
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	61fb      	str	r3, [r7, #28]
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d198      	bne.n	80067e4 <tcp_input+0x254>
 80068b2:	e000      	b.n	80068b6 <tcp_input+0x326>
      break;
 80068b4:	bf00      	nop
  }

  if (pcb == NULL) {
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d173      	bne.n	80069a4 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80068bc:	4b65      	ldr	r3, [pc, #404]	; (8006a54 <tcp_input+0x4c4>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	61fb      	str	r3, [r7, #28]
 80068c2:	e02f      	b.n	8006924 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80068c4:	69fb      	ldr	r3, [r7, #28]
 80068c6:	7d1b      	ldrb	r3, [r3, #20]
 80068c8:	2b0a      	cmp	r3, #10
 80068ca:	d005      	beq.n	80068d8 <tcp_input+0x348>
 80068cc:	4b57      	ldr	r3, [pc, #348]	; (8006a2c <tcp_input+0x49c>)
 80068ce:	22fe      	movs	r2, #254	; 0xfe
 80068d0:	4961      	ldr	r1, [pc, #388]	; (8006a58 <tcp_input+0x4c8>)
 80068d2:	4858      	ldr	r0, [pc, #352]	; (8006a34 <tcp_input+0x4a4>)
 80068d4:	f007 fe24 	bl	800e520 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	8b1a      	ldrh	r2, [r3, #24]
 80068dc:	4b58      	ldr	r3, [pc, #352]	; (8006a40 <tcp_input+0x4b0>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	881b      	ldrh	r3, [r3, #0]
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d11a      	bne.n	800691e <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	8ada      	ldrh	r2, [r3, #22]
 80068ec:	4b54      	ldr	r3, [pc, #336]	; (8006a40 <tcp_input+0x4b0>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	885b      	ldrh	r3, [r3, #2]
 80068f2:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d112      	bne.n	800691e <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	685a      	ldr	r2, [r3, #4]
 80068fc:	4b51      	ldr	r3, [pc, #324]	; (8006a44 <tcp_input+0x4b4>)
 80068fe:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8006900:	429a      	cmp	r2, r3
 8006902:	d10c      	bne.n	800691e <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	4b4e      	ldr	r3, [pc, #312]	; (8006a44 <tcp_input+0x4b4>)
 800690a:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800690c:	429a      	cmp	r2, r3
 800690e:	d106      	bne.n	800691e <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 8006910:	69f8      	ldr	r0, [r7, #28]
 8006912:	f000 fb15 	bl	8006f40 <tcp_timewait_input>
        pbuf_free(p);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f7fe f9f8 	bl	8004d0c <pbuf_free>
        return;
 800691c:	e1da      	b.n	8006cd4 <tcp_input+0x744>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800691e:	69fb      	ldr	r3, [r7, #28]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	61fb      	str	r3, [r7, #28]
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1cc      	bne.n	80068c4 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800692a:	2300      	movs	r3, #0
 800692c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800692e:	4b4b      	ldr	r3, [pc, #300]	; (8006a5c <tcp_input+0x4cc>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	617b      	str	r3, [r7, #20]
 8006934:	e019      	b.n	800696a <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	8ada      	ldrh	r2, [r3, #22]
 800693a:	4b41      	ldr	r3, [pc, #260]	; (8006a40 <tcp_input+0x4b0>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	885b      	ldrh	r3, [r3, #2]
 8006940:	b29b      	uxth	r3, r3
 8006942:	429a      	cmp	r2, r3
 8006944:	d10c      	bne.n	8006960 <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	4b3e      	ldr	r3, [pc, #248]	; (8006a44 <tcp_input+0x4b4>)
 800694c:	695b      	ldr	r3, [r3, #20]
 800694e:	429a      	cmp	r2, r3
 8006950:	d00f      	beq.n	8006972 <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d00d      	beq.n	8006974 <tcp_input+0x3e4>
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d009      	beq.n	8006974 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	617b      	str	r3, [r7, #20]
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d1e2      	bne.n	8006936 <tcp_input+0x3a6>
 8006970:	e000      	b.n	8006974 <tcp_input+0x3e4>
            break;
 8006972:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d014      	beq.n	80069a4 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d00a      	beq.n	8006996 <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	68da      	ldr	r2, [r3, #12]
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8006988:	4b34      	ldr	r3, [pc, #208]	; (8006a5c <tcp_input+0x4cc>)
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8006990:	4a32      	ldr	r2, [pc, #200]	; (8006a5c <tcp_input+0x4cc>)
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 8006996:	6978      	ldr	r0, [r7, #20]
 8006998:	f000 f9f0 	bl	8006d7c <tcp_listen_input>
      pbuf_free(p);
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f7fe f9b5 	bl	8004d0c <pbuf_free>
      return;
 80069a2:	e197      	b.n	8006cd4 <tcp_input+0x744>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	f000 8164 	beq.w	8006c74 <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80069ac:	4b2c      	ldr	r3, [pc, #176]	; (8006a60 <tcp_input+0x4d0>)
 80069ae:	2200      	movs	r2, #0
 80069b0:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	891a      	ldrh	r2, [r3, #8]
 80069b6:	4b2a      	ldr	r3, [pc, #168]	; (8006a60 <tcp_input+0x4d0>)
 80069b8:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80069ba:	4a29      	ldr	r2, [pc, #164]	; (8006a60 <tcp_input+0x4d0>)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80069c0:	4b1f      	ldr	r3, [pc, #124]	; (8006a40 <tcp_input+0x4b0>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a26      	ldr	r2, [pc, #152]	; (8006a60 <tcp_input+0x4d0>)
 80069c6:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80069c8:	4b26      	ldr	r3, [pc, #152]	; (8006a64 <tcp_input+0x4d4>)
 80069ca:	2200      	movs	r2, #0
 80069cc:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80069ce:	4b26      	ldr	r3, [pc, #152]	; (8006a68 <tcp_input+0x4d8>)
 80069d0:	2200      	movs	r2, #0
 80069d2:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80069d4:	4b25      	ldr	r3, [pc, #148]	; (8006a6c <tcp_input+0x4dc>)
 80069d6:	2200      	movs	r2, #0
 80069d8:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80069da:	4b25      	ldr	r3, [pc, #148]	; (8006a70 <tcp_input+0x4e0>)
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	f003 0308 	and.w	r3, r3, #8
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d006      	beq.n	80069f4 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	7b5b      	ldrb	r3, [r3, #13]
 80069ea:	f043 0301 	orr.w	r3, r3, #1
 80069ee:	b2da      	uxtb	r2, r3
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d03d      	beq.n	8006a78 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80069fc:	69f8      	ldr	r0, [r7, #28]
 80069fe:	f7ff fa5b 	bl	8005eb8 <tcp_process_refused_data>
 8006a02:	4603      	mov	r3, r0
 8006a04:	f113 0f0d 	cmn.w	r3, #13
 8006a08:	d007      	beq.n	8006a1a <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d032      	beq.n	8006a78 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8006a12:	4b18      	ldr	r3, [pc, #96]	; (8006a74 <tcp_input+0x4e4>)
 8006a14:	881b      	ldrh	r3, [r3, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d02e      	beq.n	8006a78 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	f040 8108 	bne.w	8006c34 <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8006a24:	69f8      	ldr	r0, [r7, #28]
 8006a26:	f002 fa09 	bl	8008e3c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8006a2a:	e103      	b.n	8006c34 <tcp_input+0x6a4>
 8006a2c:	080100c4 	.word	0x080100c4
 8006a30:	0801015c 	.word	0x0801015c
 8006a34:	08010108 	.word	0x08010108
 8006a38:	08010184 	.word	0x08010184
 8006a3c:	080101b0 	.word	0x080101b0
 8006a40:	200000e4 	.word	0x200000e4
 8006a44:	20003394 	.word	0x20003394
 8006a48:	080101d8 	.word	0x080101d8
 8006a4c:	200068e4 	.word	0x200068e4
 8006a50:	08010204 	.word	0x08010204
 8006a54:	200068f4 	.word	0x200068f4
 8006a58:	08010230 	.word	0x08010230
 8006a5c:	200068ec 	.word	0x200068ec
 8006a60:	200000d4 	.word	0x200000d4
 8006a64:	20000104 	.word	0x20000104
 8006a68:	20000101 	.word	0x20000101
 8006a6c:	200000fc 	.word	0x200000fc
 8006a70:	20000100 	.word	0x20000100
 8006a74:	200000fe 	.word	0x200000fe
      }
    }
    tcp_input_pcb = pcb;
 8006a78:	4a98      	ldr	r2, [pc, #608]	; (8006cdc <tcp_input+0x74c>)
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8006a7e:	69f8      	ldr	r0, [r7, #28]
 8006a80:	f000 fac6 	bl	8007010 <tcp_process>
 8006a84:	4603      	mov	r3, r0
 8006a86:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8006a88:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006a8c:	f113 0f0d 	cmn.w	r3, #13
 8006a90:	f000 80d2 	beq.w	8006c38 <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 8006a94:	4b92      	ldr	r3, [pc, #584]	; (8006ce0 <tcp_input+0x750>)
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	f003 0308 	and.w	r3, r3, #8
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d016      	beq.n	8006ace <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d008      	beq.n	8006abc <tcp_input+0x52c>
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ab0:	69fa      	ldr	r2, [r7, #28]
 8006ab2:	6912      	ldr	r2, [r2, #16]
 8006ab4:	f06f 010d 	mvn.w	r1, #13
 8006ab8:	4610      	mov	r0, r2
 8006aba:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8006abc:	69f9      	ldr	r1, [r7, #28]
 8006abe:	4889      	ldr	r0, [pc, #548]	; (8006ce4 <tcp_input+0x754>)
 8006ac0:	f7ff fc4e 	bl	8006360 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8006ac4:	69f9      	ldr	r1, [r7, #28]
 8006ac6:	2001      	movs	r0, #1
 8006ac8:	f7fd fb94 	bl	80041f4 <memp_free>
 8006acc:	e0bf      	b.n	8006c4e <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8006ad2:	4b85      	ldr	r3, [pc, #532]	; (8006ce8 <tcp_input+0x758>)
 8006ad4:	881b      	ldrh	r3, [r3, #0]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d01b      	beq.n	8006b12 <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8006ada:	4b83      	ldr	r3, [pc, #524]	; (8006ce8 <tcp_input+0x758>)
 8006adc:	881b      	ldrh	r3, [r3, #0]
 8006ade:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d009      	beq.n	8006afc <tcp_input+0x56c>
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006aec:	69fa      	ldr	r2, [r7, #28]
 8006aee:	6910      	ldr	r0, [r2, #16]
 8006af0:	89fa      	ldrh	r2, [r7, #14]
 8006af2:	69f9      	ldr	r1, [r7, #28]
 8006af4:	4798      	blx	r3
 8006af6:	4603      	mov	r3, r0
 8006af8:	74fb      	strb	r3, [r7, #19]
 8006afa:	e001      	b.n	8006b00 <tcp_input+0x570>
 8006afc:	2300      	movs	r3, #0
 8006afe:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8006b00:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006b04:	f113 0f0d 	cmn.w	r3, #13
 8006b08:	f000 8098 	beq.w	8006c3c <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 8006b0c:	4b76      	ldr	r3, [pc, #472]	; (8006ce8 <tcp_input+0x758>)
 8006b0e:	2200      	movs	r2, #0
 8006b10:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8006b12:	69f8      	ldr	r0, [r7, #28]
 8006b14:	f000 f900 	bl	8006d18 <tcp_input_delayed_close>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	f040 8090 	bne.w	8006c40 <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8006b20:	4b72      	ldr	r3, [pc, #456]	; (8006cec <tcp_input+0x75c>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d041      	beq.n	8006bac <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d006      	beq.n	8006b3e <tcp_input+0x5ae>
 8006b30:	4b6f      	ldr	r3, [pc, #444]	; (8006cf0 <tcp_input+0x760>)
 8006b32:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8006b36:	496f      	ldr	r1, [pc, #444]	; (8006cf4 <tcp_input+0x764>)
 8006b38:	486f      	ldr	r0, [pc, #444]	; (8006cf8 <tcp_input+0x768>)
 8006b3a:	f007 fcf1 	bl	800e520 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	7e9b      	ldrb	r3, [r3, #26]
 8006b42:	f003 0310 	and.w	r3, r3, #16
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d008      	beq.n	8006b5c <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8006b4a:	4b68      	ldr	r3, [pc, #416]	; (8006cec <tcp_input+0x75c>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7fe f8dc 	bl	8004d0c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8006b54:	69f8      	ldr	r0, [r7, #28]
 8006b56:	f7fe fdd7 	bl	8005708 <tcp_abort>
            goto aborted;
 8006b5a:	e078      	b.n	8006c4e <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d00c      	beq.n	8006b80 <tcp_input+0x5f0>
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	6918      	ldr	r0, [r3, #16]
 8006b70:	4b5e      	ldr	r3, [pc, #376]	; (8006cec <tcp_input+0x75c>)
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	2300      	movs	r3, #0
 8006b76:	69f9      	ldr	r1, [r7, #28]
 8006b78:	47a0      	blx	r4
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	74fb      	strb	r3, [r7, #19]
 8006b7e:	e008      	b.n	8006b92 <tcp_input+0x602>
 8006b80:	4b5a      	ldr	r3, [pc, #360]	; (8006cec <tcp_input+0x75c>)
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	2300      	movs	r3, #0
 8006b86:	69f9      	ldr	r1, [r7, #28]
 8006b88:	2000      	movs	r0, #0
 8006b8a:	f7ff fa46 	bl	800601a <tcp_recv_null>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8006b92:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006b96:	f113 0f0d 	cmn.w	r3, #13
 8006b9a:	d053      	beq.n	8006c44 <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8006b9c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d003      	beq.n	8006bac <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8006ba4:	4b51      	ldr	r3, [pc, #324]	; (8006cec <tcp_input+0x75c>)
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8006bac:	4b4c      	ldr	r3, [pc, #304]	; (8006ce0 <tcp_input+0x750>)
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	f003 0320 	and.w	r3, r3, #32
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d030      	beq.n	8006c1a <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d009      	beq.n	8006bd4 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8006bc0:	69fb      	ldr	r3, [r7, #28]
 8006bc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bc4:	7b5a      	ldrb	r2, [r3, #13]
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bca:	f042 0220 	orr.w	r2, r2, #32
 8006bce:	b2d2      	uxtb	r2, r2
 8006bd0:	735a      	strb	r2, [r3, #13]
 8006bd2:	e022      	b.n	8006c1a <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bd8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006bdc:	d005      	beq.n	8006bea <tcp_input+0x65a>
              pcb->rcv_wnd++;
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006be2:	3301      	adds	r3, #1
 8006be4:	b29a      	uxth	r2, r3
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d00b      	beq.n	8006c0c <tcp_input+0x67c>
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	6918      	ldr	r0, [r3, #16]
 8006bfe:	2300      	movs	r3, #0
 8006c00:	2200      	movs	r2, #0
 8006c02:	69f9      	ldr	r1, [r7, #28]
 8006c04:	47a0      	blx	r4
 8006c06:	4603      	mov	r3, r0
 8006c08:	74fb      	strb	r3, [r7, #19]
 8006c0a:	e001      	b.n	8006c10 <tcp_input+0x680>
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8006c10:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006c14:	f113 0f0d 	cmn.w	r3, #13
 8006c18:	d016      	beq.n	8006c48 <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8006c1a:	4b30      	ldr	r3, [pc, #192]	; (8006cdc <tcp_input+0x74c>)
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8006c20:	69f8      	ldr	r0, [r7, #28]
 8006c22:	f000 f879 	bl	8006d18 <tcp_input_delayed_close>
 8006c26:	4603      	mov	r3, r0
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d10f      	bne.n	8006c4c <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8006c2c:	69f8      	ldr	r0, [r7, #28]
 8006c2e:	f002 f961 	bl	8008ef4 <tcp_output>
 8006c32:	e00c      	b.n	8006c4e <tcp_input+0x6be>
        goto aborted;
 8006c34:	bf00      	nop
 8006c36:	e00a      	b.n	8006c4e <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8006c38:	bf00      	nop
 8006c3a:	e008      	b.n	8006c4e <tcp_input+0x6be>
              goto aborted;
 8006c3c:	bf00      	nop
 8006c3e:	e006      	b.n	8006c4e <tcp_input+0x6be>
          goto aborted;
 8006c40:	bf00      	nop
 8006c42:	e004      	b.n	8006c4e <tcp_input+0x6be>
            goto aborted;
 8006c44:	bf00      	nop
 8006c46:	e002      	b.n	8006c4e <tcp_input+0x6be>
              goto aborted;
 8006c48:	bf00      	nop
 8006c4a:	e000      	b.n	8006c4e <tcp_input+0x6be>
          goto aborted;
 8006c4c:	bf00      	nop
    tcp_input_pcb = NULL;
 8006c4e:	4b23      	ldr	r3, [pc, #140]	; (8006cdc <tcp_input+0x74c>)
 8006c50:	2200      	movs	r2, #0
 8006c52:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8006c54:	4b25      	ldr	r3, [pc, #148]	; (8006cec <tcp_input+0x75c>)
 8006c56:	2200      	movs	r2, #0
 8006c58:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 8006c5a:	4b28      	ldr	r3, [pc, #160]	; (8006cfc <tcp_input+0x76c>)
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d037      	beq.n	8006cd2 <tcp_input+0x742>
    {
      pbuf_free(inseg.p);
 8006c62:	4b26      	ldr	r3, [pc, #152]	; (8006cfc <tcp_input+0x76c>)
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	4618      	mov	r0, r3
 8006c68:	f7fe f850 	bl	8004d0c <pbuf_free>
      inseg.p = NULL;
 8006c6c:	4b23      	ldr	r3, [pc, #140]	; (8006cfc <tcp_input+0x76c>)
 8006c6e:	2200      	movs	r2, #0
 8006c70:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8006c72:	e02e      	b.n	8006cd2 <tcp_input+0x742>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8006c74:	4b22      	ldr	r3, [pc, #136]	; (8006d00 <tcp_input+0x770>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	899b      	ldrh	r3, [r3, #12]
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f7fc fec5 	bl	8003a0c <lwip_htons>
 8006c82:	4603      	mov	r3, r0
 8006c84:	f003 0304 	and.w	r3, r3, #4
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d115      	bne.n	8006cb8 <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006c8c:	4b1d      	ldr	r3, [pc, #116]	; (8006d04 <tcp_input+0x774>)
 8006c8e:	6818      	ldr	r0, [r3, #0]
 8006c90:	4b1d      	ldr	r3, [pc, #116]	; (8006d08 <tcp_input+0x778>)
 8006c92:	881b      	ldrh	r3, [r3, #0]
 8006c94:	461a      	mov	r2, r3
 8006c96:	4b1d      	ldr	r3, [pc, #116]	; (8006d0c <tcp_input+0x77c>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006c9c:	4b18      	ldr	r3, [pc, #96]	; (8006d00 <tcp_input+0x770>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006ca0:	885b      	ldrh	r3, [r3, #2]
 8006ca2:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006ca4:	4a16      	ldr	r2, [pc, #88]	; (8006d00 <tcp_input+0x770>)
 8006ca6:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006ca8:	8812      	ldrh	r2, [r2, #0]
 8006caa:	b292      	uxth	r2, r2
 8006cac:	9201      	str	r2, [sp, #4]
 8006cae:	9300      	str	r3, [sp, #0]
 8006cb0:	4b17      	ldr	r3, [pc, #92]	; (8006d10 <tcp_input+0x780>)
 8006cb2:	4a18      	ldr	r2, [pc, #96]	; (8006d14 <tcp_input+0x784>)
 8006cb4:	f002 fba8 	bl	8009408 <tcp_rst>
    pbuf_free(p);
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f7fe f827 	bl	8004d0c <pbuf_free>
  return;
 8006cbe:	e008      	b.n	8006cd2 <tcp_input+0x742>
    goto dropped;
 8006cc0:	bf00      	nop
 8006cc2:	e002      	b.n	8006cca <tcp_input+0x73a>
dropped:
 8006cc4:	bf00      	nop
 8006cc6:	e000      	b.n	8006cca <tcp_input+0x73a>
      goto dropped;
 8006cc8:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f7fe f81e 	bl	8004d0c <pbuf_free>
 8006cd0:	e000      	b.n	8006cd4 <tcp_input+0x744>
  return;
 8006cd2:	bf00      	nop
}
 8006cd4:	3724      	adds	r7, #36	; 0x24
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd90      	pop	{r4, r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	200068f8 	.word	0x200068f8
 8006ce0:	20000101 	.word	0x20000101
 8006ce4:	200068e4 	.word	0x200068e4
 8006ce8:	200000fc 	.word	0x200000fc
 8006cec:	20000104 	.word	0x20000104
 8006cf0:	080100c4 	.word	0x080100c4
 8006cf4:	08010260 	.word	0x08010260
 8006cf8:	08010108 	.word	0x08010108
 8006cfc:	200000d4 	.word	0x200000d4
 8006d00:	200000e4 	.word	0x200000e4
 8006d04:	200000f8 	.word	0x200000f8
 8006d08:	200000fe 	.word	0x200000fe
 8006d0c:	200000f4 	.word	0x200000f4
 8006d10:	200033a4 	.word	0x200033a4
 8006d14:	200033a8 	.word	0x200033a8

08006d18 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b082      	sub	sp, #8
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 8006d20:	4b14      	ldr	r3, [pc, #80]	; (8006d74 <tcp_input_delayed_close+0x5c>)
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	f003 0310 	and.w	r3, r3, #16
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d01d      	beq.n	8006d68 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	7e9b      	ldrb	r3, [r3, #26]
 8006d30:	f003 0310 	and.w	r3, r3, #16
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d10d      	bne.n	8006d54 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d008      	beq.n	8006d54 <tcp_input_delayed_close+0x3c>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	6912      	ldr	r2, [r2, #16]
 8006d4c:	f06f 010e 	mvn.w	r1, #14
 8006d50:	4610      	mov	r0, r2
 8006d52:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8006d54:	6879      	ldr	r1, [r7, #4]
 8006d56:	4808      	ldr	r0, [pc, #32]	; (8006d78 <tcp_input_delayed_close+0x60>)
 8006d58:	f7ff fb02 	bl	8006360 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8006d5c:	6879      	ldr	r1, [r7, #4]
 8006d5e:	2001      	movs	r0, #1
 8006d60:	f7fd fa48 	bl	80041f4 <memp_free>
    return 1;
 8006d64:	2301      	movs	r3, #1
 8006d66:	e000      	b.n	8006d6a <tcp_input_delayed_close+0x52>
  }
  return 0;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3708      	adds	r7, #8
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	20000101 	.word	0x20000101
 8006d78:	200068e4 	.word	0x200068e4

08006d7c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b088      	sub	sp, #32
 8006d80:	af02      	add	r7, sp, #8
 8006d82:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8006d84:	4b64      	ldr	r3, [pc, #400]	; (8006f18 <tcp_listen_input+0x19c>)
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	f003 0304 	and.w	r3, r3, #4
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	f040 80bc 	bne.w	8006f0a <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8006d92:	4b61      	ldr	r3, [pc, #388]	; (8006f18 <tcp_listen_input+0x19c>)
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	f003 0310 	and.w	r3, r3, #16
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d016      	beq.n	8006dcc <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006d9e:	4b5f      	ldr	r3, [pc, #380]	; (8006f1c <tcp_listen_input+0x1a0>)
 8006da0:	6818      	ldr	r0, [r3, #0]
 8006da2:	4b5f      	ldr	r3, [pc, #380]	; (8006f20 <tcp_listen_input+0x1a4>)
 8006da4:	881b      	ldrh	r3, [r3, #0]
 8006da6:	461a      	mov	r2, r3
 8006da8:	4b5e      	ldr	r3, [pc, #376]	; (8006f24 <tcp_listen_input+0x1a8>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006dae:	4b5e      	ldr	r3, [pc, #376]	; (8006f28 <tcp_listen_input+0x1ac>)
 8006db0:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006db2:	885b      	ldrh	r3, [r3, #2]
 8006db4:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006db6:	4a5c      	ldr	r2, [pc, #368]	; (8006f28 <tcp_listen_input+0x1ac>)
 8006db8:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006dba:	8812      	ldrh	r2, [r2, #0]
 8006dbc:	b292      	uxth	r2, r2
 8006dbe:	9201      	str	r2, [sp, #4]
 8006dc0:	9300      	str	r3, [sp, #0]
 8006dc2:	4b5a      	ldr	r3, [pc, #360]	; (8006f2c <tcp_listen_input+0x1b0>)
 8006dc4:	4a5a      	ldr	r2, [pc, #360]	; (8006f30 <tcp_listen_input+0x1b4>)
 8006dc6:	f002 fb1f 	bl	8009408 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8006dca:	e0a0      	b.n	8006f0e <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 8006dcc:	4b52      	ldr	r3, [pc, #328]	; (8006f18 <tcp_listen_input+0x19c>)
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	f003 0302 	and.w	r3, r3, #2
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	f000 809a 	beq.w	8006f0e <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	7d5b      	ldrb	r3, [r3, #21]
 8006dde:	4618      	mov	r0, r3
 8006de0:	f7ff f9fa 	bl	80061d8 <tcp_alloc>
 8006de4:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d111      	bne.n	8006e10 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	699b      	ldr	r3, [r3, #24]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d00a      	beq.n	8006e0a <tcp_listen_input+0x8e>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	699b      	ldr	r3, [r3, #24]
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	6910      	ldr	r0, [r2, #16]
 8006dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8006e00:	2100      	movs	r1, #0
 8006e02:	4798      	blx	r3
 8006e04:	4603      	mov	r3, r0
 8006e06:	73bb      	strb	r3, [r7, #14]
      return;
 8006e08:	e082      	b.n	8006f10 <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8006e0a:	23f0      	movs	r3, #240	; 0xf0
 8006e0c:	73bb      	strb	r3, [r7, #14]
      return;
 8006e0e:	e07f      	b.n	8006f10 <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8006e10:	4b48      	ldr	r3, [pc, #288]	; (8006f34 <tcp_listen_input+0x1b8>)
 8006e12:	695a      	ldr	r2, [r3, #20]
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8006e18:	4b46      	ldr	r3, [pc, #280]	; (8006f34 <tcp_listen_input+0x1b8>)
 8006e1a:	691a      	ldr	r2, [r3, #16]
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	8ada      	ldrh	r2, [r3, #22]
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8006e28:	4b3f      	ldr	r3, [pc, #252]	; (8006f28 <tcp_listen_input+0x1ac>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	881b      	ldrh	r3, [r3, #0]
 8006e2e:	b29a      	uxth	r2, r3
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	2203      	movs	r2, #3
 8006e38:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8006e3a:	4b3a      	ldr	r3, [pc, #232]	; (8006f24 <tcp_listen_input+0x1a8>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	1c5a      	adds	r2, r3, #1
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8006e4c:	6978      	ldr	r0, [r7, #20]
 8006e4e:	f7ff fb03 	bl	8006458 <tcp_next_iss>
 8006e52:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	693a      	ldr	r2, [r7, #16]
 8006e58:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	693a      	ldr	r2, [r7, #16]
 8006e5e:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	693a      	ldr	r2, [r7, #16]
 8006e64:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	693a      	ldr	r2, [r7, #16]
 8006e6a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8006e6c:	4b2d      	ldr	r3, [pc, #180]	; (8006f24 <tcp_listen_input+0x1a8>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	1e5a      	subs	r2, r3, #1
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	691a      	ldr	r2, [r3, #16]
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	7a1b      	ldrb	r3, [r3, #8]
 8006e88:	f003 030c 	and.w	r3, r3, #12
 8006e8c:	b2da      	uxtb	r2, r3
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8006e92:	4b29      	ldr	r3, [pc, #164]	; (8006f38 <tcp_listen_input+0x1bc>)
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	60da      	str	r2, [r3, #12]
 8006e9a:	4a27      	ldr	r2, [pc, #156]	; (8006f38 <tcp_listen_input+0x1bc>)
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	6013      	str	r3, [r2, #0]
 8006ea0:	f002 fd02 	bl	80098a8 <tcp_timer_needed>
 8006ea4:	4b25      	ldr	r3, [pc, #148]	; (8006f3c <tcp_listen_input+0x1c0>)
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8006eaa:	6978      	ldr	r0, [r7, #20]
 8006eac:	f001 fd12 	bl	80088d4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8006eb0:	4b1d      	ldr	r3, [pc, #116]	; (8006f28 <tcp_listen_input+0x1ac>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	89db      	ldrh	r3, [r3, #14]
 8006eb6:	b29a      	uxth	r2, r3
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	3304      	adds	r3, #4
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	4610      	mov	r0, r2
 8006ed6:	f7ff fad5 	bl	8006484 <tcp_eff_send_mss_impl>
 8006eda:	4603      	mov	r3, r0
 8006edc:	461a      	mov	r2, r3
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8006ee2:	2112      	movs	r1, #18
 8006ee4:	6978      	ldr	r0, [r7, #20]
 8006ee6:	f001 fead 	bl	8008c44 <tcp_enqueue_flags>
 8006eea:	4603      	mov	r3, r0
 8006eec:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8006eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d004      	beq.n	8006f00 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 8006ef6:	2100      	movs	r1, #0
 8006ef8:	6978      	ldr	r0, [r7, #20]
 8006efa:	f7fe fb53 	bl	80055a4 <tcp_abandon>
      return;
 8006efe:	e007      	b.n	8006f10 <tcp_listen_input+0x194>
    tcp_output(npcb);
 8006f00:	6978      	ldr	r0, [r7, #20]
 8006f02:	f001 fff7 	bl	8008ef4 <tcp_output>
  return;
 8006f06:	bf00      	nop
 8006f08:	e001      	b.n	8006f0e <tcp_listen_input+0x192>
    return;
 8006f0a:	bf00      	nop
 8006f0c:	e000      	b.n	8006f10 <tcp_listen_input+0x194>
  return;
 8006f0e:	bf00      	nop
}
 8006f10:	3718      	adds	r7, #24
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop
 8006f18:	20000100 	.word	0x20000100
 8006f1c:	200000f8 	.word	0x200000f8
 8006f20:	200000fe 	.word	0x200000fe
 8006f24:	200000f4 	.word	0x200000f4
 8006f28:	200000e4 	.word	0x200000e4
 8006f2c:	200033a4 	.word	0x200033a4
 8006f30:	200033a8 	.word	0x200033a8
 8006f34:	20003394 	.word	0x20003394
 8006f38:	200068e4 	.word	0x200068e4
 8006f3c:	200068e0 	.word	0x200068e0

08006f40 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af02      	add	r7, sp, #8
 8006f46:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8006f48:	4b29      	ldr	r3, [pc, #164]	; (8006ff0 <tcp_timewait_input+0xb0>)
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	f003 0304 	and.w	r3, r3, #4
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d147      	bne.n	8006fe4 <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8006f54:	4b26      	ldr	r3, [pc, #152]	; (8006ff0 <tcp_timewait_input+0xb0>)
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	f003 0302 	and.w	r3, r3, #2
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d027      	beq.n	8006fb0 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8006f60:	4b24      	ldr	r3, [pc, #144]	; (8006ff4 <tcp_timewait_input+0xb4>)
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f68:	1ad3      	subs	r3, r2, r3
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	db2a      	blt.n	8006fc4 <tcp_timewait_input+0x84>
 8006f6e:	4b21      	ldr	r3, [pc, #132]	; (8006ff4 <tcp_timewait_input+0xb4>)
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f76:	6879      	ldr	r1, [r7, #4]
 8006f78:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8006f7a:	440b      	add	r3, r1
 8006f7c:	1ad3      	subs	r3, r2, r3
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	dc20      	bgt.n	8006fc4 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006f82:	4b1d      	ldr	r3, [pc, #116]	; (8006ff8 <tcp_timewait_input+0xb8>)
 8006f84:	6818      	ldr	r0, [r3, #0]
 8006f86:	4b1d      	ldr	r3, [pc, #116]	; (8006ffc <tcp_timewait_input+0xbc>)
 8006f88:	881b      	ldrh	r3, [r3, #0]
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	4b19      	ldr	r3, [pc, #100]	; (8006ff4 <tcp_timewait_input+0xb4>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006f92:	4b1b      	ldr	r3, [pc, #108]	; (8007000 <tcp_timewait_input+0xc0>)
 8006f94:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006f96:	885b      	ldrh	r3, [r3, #2]
 8006f98:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8006f9a:	4a19      	ldr	r2, [pc, #100]	; (8007000 <tcp_timewait_input+0xc0>)
 8006f9c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8006f9e:	8812      	ldrh	r2, [r2, #0]
 8006fa0:	b292      	uxth	r2, r2
 8006fa2:	9201      	str	r2, [sp, #4]
 8006fa4:	9300      	str	r3, [sp, #0]
 8006fa6:	4b17      	ldr	r3, [pc, #92]	; (8007004 <tcp_timewait_input+0xc4>)
 8006fa8:	4a17      	ldr	r2, [pc, #92]	; (8007008 <tcp_timewait_input+0xc8>)
 8006faa:	f002 fa2d 	bl	8009408 <tcp_rst>
      return;
 8006fae:	e01c      	b.n	8006fea <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 8006fb0:	4b0f      	ldr	r3, [pc, #60]	; (8006ff0 <tcp_timewait_input+0xb0>)
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	f003 0301 	and.w	r3, r3, #1
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d003      	beq.n	8006fc4 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8006fbc:	4b13      	ldr	r3, [pc, #76]	; (800700c <tcp_timewait_input+0xcc>)
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8006fc4:	4b0d      	ldr	r3, [pc, #52]	; (8006ffc <tcp_timewait_input+0xbc>)
 8006fc6:	881b      	ldrh	r3, [r3, #0]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d00d      	beq.n	8006fe8 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	7e9b      	ldrb	r3, [r3, #26]
 8006fd0:	f043 0302 	orr.w	r3, r3, #2
 8006fd4:	b2da      	uxtb	r2, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f001 ff8a 	bl	8008ef4 <tcp_output>
  }
  return;
 8006fe0:	bf00      	nop
 8006fe2:	e001      	b.n	8006fe8 <tcp_timewait_input+0xa8>
    return;
 8006fe4:	bf00      	nop
 8006fe6:	e000      	b.n	8006fea <tcp_timewait_input+0xaa>
  return;
 8006fe8:	bf00      	nop
}
 8006fea:	3708      	adds	r7, #8
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	20000100 	.word	0x20000100
 8006ff4:	200000f4 	.word	0x200000f4
 8006ff8:	200000f8 	.word	0x200000f8
 8006ffc:	200000fe 	.word	0x200000fe
 8007000:	200000e4 	.word	0x200000e4
 8007004:	200033a4 	.word	0x200033a4
 8007008:	200033a8 	.word	0x200033a8
 800700c:	200068e8 	.word	0x200068e8

08007010 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b08a      	sub	sp, #40	; 0x28
 8007014:	af02      	add	r7, sp, #8
 8007016:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8007018:	2300      	movs	r3, #0
 800701a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800701c:	2300      	movs	r3, #0
 800701e:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8007020:	4ba4      	ldr	r3, [pc, #656]	; (80072b4 <tcp_process+0x2a4>)
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	f003 0304 	and.w	r3, r3, #4
 8007028:	2b00      	cmp	r3, #0
 800702a:	d04e      	beq.n	80070ca <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	7d1b      	ldrb	r3, [r3, #20]
 8007030:	2b02      	cmp	r3, #2
 8007032:	d108      	bne.n	8007046 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007038:	4b9f      	ldr	r3, [pc, #636]	; (80072b8 <tcp_process+0x2a8>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	429a      	cmp	r2, r3
 800703e:	d123      	bne.n	8007088 <tcp_process+0x78>
        acceptable = 1;
 8007040:	2301      	movs	r3, #1
 8007042:	76fb      	strb	r3, [r7, #27]
 8007044:	e020      	b.n	8007088 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800704a:	4b9c      	ldr	r3, [pc, #624]	; (80072bc <tcp_process+0x2ac>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	429a      	cmp	r2, r3
 8007050:	d102      	bne.n	8007058 <tcp_process+0x48>
        acceptable = 1;
 8007052:	2301      	movs	r3, #1
 8007054:	76fb      	strb	r3, [r7, #27]
 8007056:	e017      	b.n	8007088 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8007058:	4b98      	ldr	r3, [pc, #608]	; (80072bc <tcp_process+0x2ac>)
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007060:	1ad3      	subs	r3, r2, r3
 8007062:	2b00      	cmp	r3, #0
 8007064:	db10      	blt.n	8007088 <tcp_process+0x78>
 8007066:	4b95      	ldr	r3, [pc, #596]	; (80072bc <tcp_process+0x2ac>)
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706e:	6879      	ldr	r1, [r7, #4]
 8007070:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007072:	440b      	add	r3, r1
 8007074:	1ad3      	subs	r3, r2, r3
 8007076:	2b00      	cmp	r3, #0
 8007078:	dc06      	bgt.n	8007088 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	7e9b      	ldrb	r3, [r3, #26]
 800707e:	f043 0302 	orr.w	r3, r3, #2
 8007082:	b2da      	uxtb	r2, r3
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8007088:	7efb      	ldrb	r3, [r7, #27]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d01b      	beq.n	80070c6 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	7d1b      	ldrb	r3, [r3, #20]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d106      	bne.n	80070a4 <tcp_process+0x94>
 8007096:	4b8a      	ldr	r3, [pc, #552]	; (80072c0 <tcp_process+0x2b0>)
 8007098:	f240 22e7 	movw	r2, #743	; 0x2e7
 800709c:	4989      	ldr	r1, [pc, #548]	; (80072c4 <tcp_process+0x2b4>)
 800709e:	488a      	ldr	r0, [pc, #552]	; (80072c8 <tcp_process+0x2b8>)
 80070a0:	f007 fa3e 	bl	800e520 <iprintf>
      recv_flags |= TF_RESET;
 80070a4:	4b89      	ldr	r3, [pc, #548]	; (80072cc <tcp_process+0x2bc>)
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	f043 0308 	orr.w	r3, r3, #8
 80070ac:	b2da      	uxtb	r2, r3
 80070ae:	4b87      	ldr	r3, [pc, #540]	; (80072cc <tcp_process+0x2bc>)
 80070b0:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	7e9b      	ldrb	r3, [r3, #26]
 80070b6:	f023 0301 	bic.w	r3, r3, #1
 80070ba:	b2da      	uxtb	r2, r3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 80070c0:	f06f 030d 	mvn.w	r3, #13
 80070c4:	e34d      	b.n	8007762 <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 80070c6:	2300      	movs	r3, #0
 80070c8:	e34b      	b.n	8007762 <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80070ca:	4b7a      	ldr	r3, [pc, #488]	; (80072b4 <tcp_process+0x2a4>)
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	f003 0302 	and.w	r3, r3, #2
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d010      	beq.n	80070f8 <tcp_process+0xe8>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	7d1b      	ldrb	r3, [r3, #20]
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d00c      	beq.n	80070f8 <tcp_process+0xe8>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	7d1b      	ldrb	r3, [r3, #20]
 80070e2:	2b03      	cmp	r3, #3
 80070e4:	d008      	beq.n	80070f8 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	7e9b      	ldrb	r3, [r3, #26]
 80070ea:	f043 0302 	orr.w	r3, r3, #2
 80070ee:	b2da      	uxtb	r2, r3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 80070f4:	2300      	movs	r3, #0
 80070f6:	e334      	b.n	8007762 <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	7e9b      	ldrb	r3, [r3, #26]
 80070fc:	f003 0310 	and.w	r3, r3, #16
 8007100:	2b00      	cmp	r3, #0
 8007102:	d103      	bne.n	800710c <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8007104:	4b72      	ldr	r3, [pc, #456]	; (80072d0 <tcp_process+0x2c0>)
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f001 fbdd 	bl	80088d4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	7d1b      	ldrb	r3, [r3, #20]
 800711e:	3b02      	subs	r3, #2
 8007120:	2b07      	cmp	r3, #7
 8007122:	f200 830e 	bhi.w	8007742 <tcp_process+0x732>
 8007126:	a201      	add	r2, pc, #4	; (adr r2, 800712c <tcp_process+0x11c>)
 8007128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800712c:	0800714d 	.word	0x0800714d
 8007130:	08007345 	.word	0x08007345
 8007134:	0800749d 	.word	0x0800749d
 8007138:	080074c7 	.word	0x080074c7
 800713c:	080075f1 	.word	0x080075f1
 8007140:	0800749d 	.word	0x0800749d
 8007144:	0800767d 	.word	0x0800767d
 8007148:	0800770d 	.word	0x0800770d
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800714c:	4b59      	ldr	r3, [pc, #356]	; (80072b4 <tcp_process+0x2a4>)
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	f003 0310 	and.w	r3, r3, #16
 8007154:	2b00      	cmp	r3, #0
 8007156:	f000 80cb 	beq.w	80072f0 <tcp_process+0x2e0>
 800715a:	4b56      	ldr	r3, [pc, #344]	; (80072b4 <tcp_process+0x2a4>)
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	f003 0302 	and.w	r3, r3, #2
 8007162:	2b00      	cmp	r3, #0
 8007164:	f000 80c4 	beq.w	80072f0 <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800716c:	1c5a      	adds	r2, r3, #1
 800716e:	4b52      	ldr	r3, [pc, #328]	; (80072b8 <tcp_process+0x2a8>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	429a      	cmp	r2, r3
 8007174:	f040 80bc 	bne.w	80072f0 <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 8007178:	4b50      	ldr	r3, [pc, #320]	; (80072bc <tcp_process+0x2ac>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	1c5a      	adds	r2, r3, #1
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 800718a:	4b4b      	ldr	r3, [pc, #300]	; (80072b8 <tcp_process+0x2a8>)
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 8007192:	4b50      	ldr	r3, [pc, #320]	; (80072d4 <tcp_process+0x2c4>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	89db      	ldrh	r3, [r3, #14]
 8007198:	b29a      	uxth	r2, r3
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80071ac:	4b43      	ldr	r3, [pc, #268]	; (80072bc <tcp_process+0x2ac>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	1e5a      	subs	r2, r3, #1
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2204      	movs	r2, #4
 80071ba:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	3304      	adds	r3, #4
 80071c4:	4619      	mov	r1, r3
 80071c6:	4610      	mov	r0, r2
 80071c8:	f7ff f95c 	bl	8006484 <tcp_eff_send_mss_impl>
 80071cc:	4603      	mov	r3, r0
 80071ce:	461a      	mov	r2, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80071d8:	005b      	lsls	r3, r3, #1
 80071da:	f241 121c 	movw	r2, #4380	; 0x111c
 80071de:	429a      	cmp	r2, r3
 80071e0:	bf38      	it	cc
 80071e2:	461a      	movcc	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	4293      	cmp	r3, r2
 80071ec:	bf28      	it	cs
 80071ee:	4613      	movcs	r3, r2
 80071f0:	b29a      	uxth	r2, r3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d106      	bne.n	8007210 <tcp_process+0x200>
 8007202:	4b2f      	ldr	r3, [pc, #188]	; (80072c0 <tcp_process+0x2b0>)
 8007204:	f240 321a 	movw	r2, #794	; 0x31a
 8007208:	4933      	ldr	r1, [pc, #204]	; (80072d8 <tcp_process+0x2c8>)
 800720a:	482f      	ldr	r0, [pc, #188]	; (80072c8 <tcp_process+0x2b8>)
 800720c:	f007 f988 	bl	800e520 <iprintf>
      --pcb->snd_queuelen;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007216:	3b01      	subs	r3, #1
 8007218:	b29a      	uxth	r2, r3
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007224:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 8007226:	69fb      	ldr	r3, [r7, #28]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d111      	bne.n	8007250 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007230:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d106      	bne.n	8007246 <tcp_process+0x236>
 8007238:	4b21      	ldr	r3, [pc, #132]	; (80072c0 <tcp_process+0x2b0>)
 800723a:	f240 3222 	movw	r2, #802	; 0x322
 800723e:	4927      	ldr	r1, [pc, #156]	; (80072dc <tcp_process+0x2cc>)
 8007240:	4821      	ldr	r0, [pc, #132]	; (80072c8 <tcp_process+0x2b8>)
 8007242:	f007 f96d 	bl	800e520 <iprintf>
        pcb->unsent = rseg->next;
 8007246:	69fb      	ldr	r3, [r7, #28]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	669a      	str	r2, [r3, #104]	; 0x68
 800724e:	e003      	b.n	8007258 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 8007258:	69f8      	ldr	r0, [r7, #28]
 800725a:	f7fe feaa 	bl	8005fb2 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007262:	2b00      	cmp	r3, #0
 8007264:	d104      	bne.n	8007270 <tcp_process+0x260>
        pcb->rtime = -1;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800726c:	861a      	strh	r2, [r3, #48]	; 0x30
 800726e:	e006      	b.n	800727e <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007284:	2b00      	cmp	r3, #0
 8007286:	d00a      	beq.n	800729e <tcp_process+0x28e>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	6910      	ldr	r0, [r2, #16]
 8007292:	2200      	movs	r2, #0
 8007294:	6879      	ldr	r1, [r7, #4]
 8007296:	4798      	blx	r3
 8007298:	4603      	mov	r3, r0
 800729a:	76bb      	strb	r3, [r7, #26]
 800729c:	e001      	b.n	80072a2 <tcp_process+0x292>
 800729e:	2300      	movs	r3, #0
 80072a0:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 80072a2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80072a6:	f113 0f0d 	cmn.w	r3, #13
 80072aa:	d119      	bne.n	80072e0 <tcp_process+0x2d0>
        return ERR_ABRT;
 80072ac:	f06f 030c 	mvn.w	r3, #12
 80072b0:	e257      	b.n	8007762 <tcp_process+0x752>
 80072b2:	bf00      	nop
 80072b4:	20000100 	.word	0x20000100
 80072b8:	200000f8 	.word	0x200000f8
 80072bc:	200000f4 	.word	0x200000f4
 80072c0:	080100c4 	.word	0x080100c4
 80072c4:	0801027c 	.word	0x0801027c
 80072c8:	08010108 	.word	0x08010108
 80072cc:	20000101 	.word	0x20000101
 80072d0:	200068e8 	.word	0x200068e8
 80072d4:	200000e4 	.word	0x200000e4
 80072d8:	0801029c 	.word	0x0801029c
 80072dc:	080102b4 	.word	0x080102b4
      }
      tcp_ack_now(pcb);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	7e9b      	ldrb	r3, [r3, #26]
 80072e4:	f043 0302 	orr.w	r3, r3, #2
 80072e8:	b2da      	uxtb	r2, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 80072ee:	e22a      	b.n	8007746 <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 80072f0:	4b9f      	ldr	r3, [pc, #636]	; (8007570 <tcp_process+0x560>)
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	f003 0310 	and.w	r3, r3, #16
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	f000 8224 	beq.w	8007746 <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80072fe:	4b9d      	ldr	r3, [pc, #628]	; (8007574 <tcp_process+0x564>)
 8007300:	6818      	ldr	r0, [r3, #0]
 8007302:	4b9d      	ldr	r3, [pc, #628]	; (8007578 <tcp_process+0x568>)
 8007304:	881b      	ldrh	r3, [r3, #0]
 8007306:	461a      	mov	r2, r3
 8007308:	4b9c      	ldr	r3, [pc, #624]	; (800757c <tcp_process+0x56c>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800730e:	4b9c      	ldr	r3, [pc, #624]	; (8007580 <tcp_process+0x570>)
 8007310:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007312:	885b      	ldrh	r3, [r3, #2]
 8007314:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007316:	4a9a      	ldr	r2, [pc, #616]	; (8007580 <tcp_process+0x570>)
 8007318:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800731a:	8812      	ldrh	r2, [r2, #0]
 800731c:	b292      	uxth	r2, r2
 800731e:	9201      	str	r2, [sp, #4]
 8007320:	9300      	str	r3, [sp, #0]
 8007322:	4b98      	ldr	r3, [pc, #608]	; (8007584 <tcp_process+0x574>)
 8007324:	4a98      	ldr	r2, [pc, #608]	; (8007588 <tcp_process+0x578>)
 8007326:	f002 f86f 	bl	8009408 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007330:	2b05      	cmp	r3, #5
 8007332:	f200 8208 	bhi.w	8007746 <tcp_process+0x736>
        pcb->rtime = 0;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f002 f8d9 	bl	80094f4 <tcp_rexmit_rto>
    break;
 8007342:	e200      	b.n	8007746 <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 8007344:	4b8a      	ldr	r3, [pc, #552]	; (8007570 <tcp_process+0x560>)
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	f003 0310 	and.w	r3, r3, #16
 800734c:	2b00      	cmp	r3, #0
 800734e:	f000 8091 	beq.w	8007474 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8007352:	4b88      	ldr	r3, [pc, #544]	; (8007574 <tcp_process+0x564>)
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800735a:	1ad3      	subs	r3, r2, r3
 800735c:	3b01      	subs	r3, #1
 800735e:	2b00      	cmp	r3, #0
 8007360:	db71      	blt.n	8007446 <tcp_process+0x436>
 8007362:	4b84      	ldr	r3, [pc, #528]	; (8007574 <tcp_process+0x564>)
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800736a:	1ad3      	subs	r3, r2, r3
 800736c:	2b00      	cmp	r3, #0
 800736e:	dc6a      	bgt.n	8007446 <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2204      	movs	r2, #4
 8007374:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800737a:	2b00      	cmp	r3, #0
 800737c:	d00b      	beq.n	8007396 <tcp_process+0x386>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007382:	699b      	ldr	r3, [r3, #24]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d106      	bne.n	8007396 <tcp_process+0x386>
 8007388:	4b80      	ldr	r3, [pc, #512]	; (800758c <tcp_process+0x57c>)
 800738a:	f240 3251 	movw	r2, #849	; 0x351
 800738e:	4980      	ldr	r1, [pc, #512]	; (8007590 <tcp_process+0x580>)
 8007390:	4880      	ldr	r0, [pc, #512]	; (8007594 <tcp_process+0x584>)
 8007392:	f007 f8c5 	bl	800e520 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800739a:	2b00      	cmp	r3, #0
 800739c:	d102      	bne.n	80073a4 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 800739e:	23fa      	movs	r3, #250	; 0xfa
 80073a0:	76bb      	strb	r3, [r7, #26]
 80073a2:	e011      	b.n	80073c8 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073a8:	699b      	ldr	r3, [r3, #24]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00a      	beq.n	80073c4 <tcp_process+0x3b4>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073b2:	699b      	ldr	r3, [r3, #24]
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	6910      	ldr	r0, [r2, #16]
 80073b8:	2200      	movs	r2, #0
 80073ba:	6879      	ldr	r1, [r7, #4]
 80073bc:	4798      	blx	r3
 80073be:	4603      	mov	r3, r0
 80073c0:	76bb      	strb	r3, [r7, #26]
 80073c2:	e001      	b.n	80073c8 <tcp_process+0x3b8>
 80073c4:	23f0      	movs	r3, #240	; 0xf0
 80073c6:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 80073c8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00a      	beq.n	80073e6 <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 80073d0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80073d4:	f113 0f0d 	cmn.w	r3, #13
 80073d8:	d002      	beq.n	80073e0 <tcp_process+0x3d0>
            tcp_abort(pcb);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f7fe f994 	bl	8005708 <tcp_abort>
          }
          return ERR_ABRT;
 80073e0:	f06f 030c 	mvn.w	r3, #12
 80073e4:	e1bd      	b.n	8007762 <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 fa42 	bl	8007870 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 80073ec:	4b6a      	ldr	r3, [pc, #424]	; (8007598 <tcp_process+0x588>)
 80073ee:	881b      	ldrh	r3, [r3, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d005      	beq.n	8007400 <tcp_process+0x3f0>
          recv_acked--;
 80073f4:	4b68      	ldr	r3, [pc, #416]	; (8007598 <tcp_process+0x588>)
 80073f6:	881b      	ldrh	r3, [r3, #0]
 80073f8:	3b01      	subs	r3, #1
 80073fa:	b29a      	uxth	r2, r3
 80073fc:	4b66      	ldr	r3, [pc, #408]	; (8007598 <tcp_process+0x588>)
 80073fe:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007404:	005b      	lsls	r3, r3, #1
 8007406:	f241 121c 	movw	r2, #4380	; 0x111c
 800740a:	429a      	cmp	r2, r3
 800740c:	bf38      	it	cc
 800740e:	461a      	movcc	r2, r3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007414:	009b      	lsls	r3, r3, #2
 8007416:	4293      	cmp	r3, r2
 8007418:	bf28      	it	cs
 800741a:	4613      	movcs	r3, r2
 800741c:	b29a      	uxth	r2, r3
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 8007424:	4b5d      	ldr	r3, [pc, #372]	; (800759c <tcp_process+0x58c>)
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	f003 0320 	and.w	r3, r3, #32
 800742c:	2b00      	cmp	r3, #0
 800742e:	d034      	beq.n	800749a <tcp_process+0x48a>
          tcp_ack_now(pcb);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	7e9b      	ldrb	r3, [r3, #26]
 8007434:	f043 0302 	orr.w	r3, r3, #2
 8007438:	b2da      	uxtb	r2, r3
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2207      	movs	r2, #7
 8007442:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 8007444:	e029      	b.n	800749a <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007446:	4b4b      	ldr	r3, [pc, #300]	; (8007574 <tcp_process+0x564>)
 8007448:	6818      	ldr	r0, [r3, #0]
 800744a:	4b4b      	ldr	r3, [pc, #300]	; (8007578 <tcp_process+0x568>)
 800744c:	881b      	ldrh	r3, [r3, #0]
 800744e:	461a      	mov	r2, r3
 8007450:	4b4a      	ldr	r3, [pc, #296]	; (800757c <tcp_process+0x56c>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007456:	4b4a      	ldr	r3, [pc, #296]	; (8007580 <tcp_process+0x570>)
 8007458:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800745a:	885b      	ldrh	r3, [r3, #2]
 800745c:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800745e:	4a48      	ldr	r2, [pc, #288]	; (8007580 <tcp_process+0x570>)
 8007460:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8007462:	8812      	ldrh	r2, [r2, #0]
 8007464:	b292      	uxth	r2, r2
 8007466:	9201      	str	r2, [sp, #4]
 8007468:	9300      	str	r3, [sp, #0]
 800746a:	4b46      	ldr	r3, [pc, #280]	; (8007584 <tcp_process+0x574>)
 800746c:	4a46      	ldr	r2, [pc, #280]	; (8007588 <tcp_process+0x578>)
 800746e:	f001 ffcb 	bl	8009408 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 8007472:	e16a      	b.n	800774a <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8007474:	4b3e      	ldr	r3, [pc, #248]	; (8007570 <tcp_process+0x560>)
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	f003 0302 	and.w	r3, r3, #2
 800747c:	2b00      	cmp	r3, #0
 800747e:	f000 8164 	beq.w	800774a <tcp_process+0x73a>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007486:	1e5a      	subs	r2, r3, #1
 8007488:	4b3c      	ldr	r3, [pc, #240]	; (800757c <tcp_process+0x56c>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	429a      	cmp	r2, r3
 800748e:	f040 815c 	bne.w	800774a <tcp_process+0x73a>
      tcp_rexmit(pcb);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f002 f864 	bl	8009560 <tcp_rexmit>
    break;
 8007498:	e157      	b.n	800774a <tcp_process+0x73a>
 800749a:	e156      	b.n	800774a <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 f9e7 	bl	8007870 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 80074a2:	4b3e      	ldr	r3, [pc, #248]	; (800759c <tcp_process+0x58c>)
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	f003 0320 	and.w	r3, r3, #32
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	f000 814f 	beq.w	800774e <tcp_process+0x73e>
      tcp_ack_now(pcb);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	7e9b      	ldrb	r3, [r3, #26]
 80074b4:	f043 0302 	orr.w	r3, r3, #2
 80074b8:	b2da      	uxtb	r2, r3
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2207      	movs	r2, #7
 80074c2:	751a      	strb	r2, [r3, #20]
    }
    break;
 80074c4:	e143      	b.n	800774e <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 f9d2 	bl	8007870 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 80074cc:	4b33      	ldr	r3, [pc, #204]	; (800759c <tcp_process+0x58c>)
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	f003 0320 	and.w	r3, r3, #32
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d074      	beq.n	80075c2 <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80074d8:	4b25      	ldr	r3, [pc, #148]	; (8007570 <tcp_process+0x560>)
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	f003 0310 	and.w	r3, r3, #16
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d063      	beq.n	80075ac <tcp_process+0x59c>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80074e8:	4b22      	ldr	r3, [pc, #136]	; (8007574 <tcp_process+0x564>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	429a      	cmp	r2, r3
 80074ee:	d15d      	bne.n	80075ac <tcp_process+0x59c>
          pcb->unsent == NULL) {
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d159      	bne.n	80075ac <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	7e9b      	ldrb	r3, [r3, #26]
 80074fc:	f043 0302 	orr.w	r3, r3, #2
 8007500:	b2da      	uxtb	r2, r3
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f7fe fee8 	bl	80062dc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800750c:	4b24      	ldr	r3, [pc, #144]	; (80075a0 <tcp_process+0x590>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	687a      	ldr	r2, [r7, #4]
 8007512:	429a      	cmp	r2, r3
 8007514:	d105      	bne.n	8007522 <tcp_process+0x512>
 8007516:	4b22      	ldr	r3, [pc, #136]	; (80075a0 <tcp_process+0x590>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	4a20      	ldr	r2, [pc, #128]	; (80075a0 <tcp_process+0x590>)
 800751e:	6013      	str	r3, [r2, #0]
 8007520:	e013      	b.n	800754a <tcp_process+0x53a>
 8007522:	4b1f      	ldr	r3, [pc, #124]	; (80075a0 <tcp_process+0x590>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	617b      	str	r3, [r7, #20]
 8007528:	e00c      	b.n	8007544 <tcp_process+0x534>
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	68db      	ldr	r3, [r3, #12]
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	429a      	cmp	r2, r3
 8007532:	d104      	bne.n	800753e <tcp_process+0x52e>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	68da      	ldr	r2, [r3, #12]
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	60da      	str	r2, [r3, #12]
 800753c:	e005      	b.n	800754a <tcp_process+0x53a>
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	617b      	str	r3, [r7, #20]
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d1ef      	bne.n	800752a <tcp_process+0x51a>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	60da      	str	r2, [r3, #12]
 8007550:	4b14      	ldr	r3, [pc, #80]	; (80075a4 <tcp_process+0x594>)
 8007552:	2201      	movs	r2, #1
 8007554:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	220a      	movs	r2, #10
 800755a:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800755c:	4b12      	ldr	r3, [pc, #72]	; (80075a8 <tcp_process+0x598>)
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	60da      	str	r2, [r3, #12]
 8007564:	4a10      	ldr	r2, [pc, #64]	; (80075a8 <tcp_process+0x598>)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6013      	str	r3, [r2, #0]
 800756a:	f002 f99d 	bl	80098a8 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 800756e:	e0f0      	b.n	8007752 <tcp_process+0x742>
 8007570:	20000100 	.word	0x20000100
 8007574:	200000f8 	.word	0x200000f8
 8007578:	200000fe 	.word	0x200000fe
 800757c:	200000f4 	.word	0x200000f4
 8007580:	200000e4 	.word	0x200000e4
 8007584:	200033a4 	.word	0x200033a4
 8007588:	200033a8 	.word	0x200033a8
 800758c:	080100c4 	.word	0x080100c4
 8007590:	080102c8 	.word	0x080102c8
 8007594:	08010108 	.word	0x08010108
 8007598:	200000fc 	.word	0x200000fc
 800759c:	20000101 	.word	0x20000101
 80075a0:	200068e4 	.word	0x200068e4
 80075a4:	200068e0 	.word	0x200068e0
 80075a8:	200068f4 	.word	0x200068f4
        tcp_ack_now(pcb);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	7e9b      	ldrb	r3, [r3, #26]
 80075b0:	f043 0302 	orr.w	r3, r3, #2
 80075b4:	b2da      	uxtb	r2, r3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2208      	movs	r2, #8
 80075be:	751a      	strb	r2, [r3, #20]
    break;
 80075c0:	e0c7      	b.n	8007752 <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80075c2:	4b6a      	ldr	r3, [pc, #424]	; (800776c <tcp_process+0x75c>)
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	f003 0310 	and.w	r3, r3, #16
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	f000 80c1 	beq.w	8007752 <tcp_process+0x742>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80075d4:	4b66      	ldr	r3, [pc, #408]	; (8007770 <tcp_process+0x760>)
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	429a      	cmp	r2, r3
 80075da:	f040 80ba 	bne.w	8007752 <tcp_process+0x742>
               pcb->unsent == NULL) {
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	f040 80b5 	bne.w	8007752 <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2206      	movs	r2, #6
 80075ec:	751a      	strb	r2, [r3, #20]
    break;
 80075ee:	e0b0      	b.n	8007752 <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 f93d 	bl	8007870 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 80075f6:	4b5f      	ldr	r3, [pc, #380]	; (8007774 <tcp_process+0x764>)
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	f003 0320 	and.w	r3, r3, #32
 80075fe:	2b00      	cmp	r3, #0
 8007600:	f000 80a9 	beq.w	8007756 <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	7e9b      	ldrb	r3, [r3, #26]
 8007608:	f043 0302 	orr.w	r3, r3, #2
 800760c:	b2da      	uxtb	r2, r3
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f7fe fe62 	bl	80062dc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007618:	4b57      	ldr	r3, [pc, #348]	; (8007778 <tcp_process+0x768>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	429a      	cmp	r2, r3
 8007620:	d105      	bne.n	800762e <tcp_process+0x61e>
 8007622:	4b55      	ldr	r3, [pc, #340]	; (8007778 <tcp_process+0x768>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	4a53      	ldr	r2, [pc, #332]	; (8007778 <tcp_process+0x768>)
 800762a:	6013      	str	r3, [r2, #0]
 800762c:	e013      	b.n	8007656 <tcp_process+0x646>
 800762e:	4b52      	ldr	r3, [pc, #328]	; (8007778 <tcp_process+0x768>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	613b      	str	r3, [r7, #16]
 8007634:	e00c      	b.n	8007650 <tcp_process+0x640>
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	687a      	ldr	r2, [r7, #4]
 800763c:	429a      	cmp	r2, r3
 800763e:	d104      	bne.n	800764a <tcp_process+0x63a>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	68da      	ldr	r2, [r3, #12]
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	60da      	str	r2, [r3, #12]
 8007648:	e005      	b.n	8007656 <tcp_process+0x646>
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	613b      	str	r3, [r7, #16]
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d1ef      	bne.n	8007636 <tcp_process+0x626>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	60da      	str	r2, [r3, #12]
 800765c:	4b47      	ldr	r3, [pc, #284]	; (800777c <tcp_process+0x76c>)
 800765e:	2201      	movs	r2, #1
 8007660:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	220a      	movs	r2, #10
 8007666:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8007668:	4b45      	ldr	r3, [pc, #276]	; (8007780 <tcp_process+0x770>)
 800766a:	681a      	ldr	r2, [r3, #0]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	60da      	str	r2, [r3, #12]
 8007670:	4a43      	ldr	r2, [pc, #268]	; (8007780 <tcp_process+0x770>)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6013      	str	r3, [r2, #0]
 8007676:	f002 f917 	bl	80098a8 <tcp_timer_needed>
    }
    break;
 800767a:	e06c      	b.n	8007756 <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 f8f7 	bl	8007870 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8007682:	4b3a      	ldr	r3, [pc, #232]	; (800776c <tcp_process+0x75c>)
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	f003 0310 	and.w	r3, r3, #16
 800768a:	2b00      	cmp	r3, #0
 800768c:	d065      	beq.n	800775a <tcp_process+0x74a>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007692:	4b37      	ldr	r3, [pc, #220]	; (8007770 <tcp_process+0x760>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	429a      	cmp	r2, r3
 8007698:	d15f      	bne.n	800775a <tcp_process+0x74a>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d15b      	bne.n	800775a <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f7fe fe1a 	bl	80062dc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80076a8:	4b33      	ldr	r3, [pc, #204]	; (8007778 <tcp_process+0x768>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d105      	bne.n	80076be <tcp_process+0x6ae>
 80076b2:	4b31      	ldr	r3, [pc, #196]	; (8007778 <tcp_process+0x768>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	4a2f      	ldr	r2, [pc, #188]	; (8007778 <tcp_process+0x768>)
 80076ba:	6013      	str	r3, [r2, #0]
 80076bc:	e013      	b.n	80076e6 <tcp_process+0x6d6>
 80076be:	4b2e      	ldr	r3, [pc, #184]	; (8007778 <tcp_process+0x768>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	60fb      	str	r3, [r7, #12]
 80076c4:	e00c      	b.n	80076e0 <tcp_process+0x6d0>
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	68db      	ldr	r3, [r3, #12]
 80076ca:	687a      	ldr	r2, [r7, #4]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d104      	bne.n	80076da <tcp_process+0x6ca>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	68da      	ldr	r2, [r3, #12]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	60da      	str	r2, [r3, #12]
 80076d8:	e005      	b.n	80076e6 <tcp_process+0x6d6>
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	60fb      	str	r3, [r7, #12]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d1ef      	bne.n	80076c6 <tcp_process+0x6b6>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	60da      	str	r2, [r3, #12]
 80076ec:	4b23      	ldr	r3, [pc, #140]	; (800777c <tcp_process+0x76c>)
 80076ee:	2201      	movs	r2, #1
 80076f0:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	220a      	movs	r2, #10
 80076f6:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 80076f8:	4b21      	ldr	r3, [pc, #132]	; (8007780 <tcp_process+0x770>)
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	60da      	str	r2, [r3, #12]
 8007700:	4a1f      	ldr	r2, [pc, #124]	; (8007780 <tcp_process+0x770>)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6013      	str	r3, [r2, #0]
 8007706:	f002 f8cf 	bl	80098a8 <tcp_timer_needed>
    }
    break;
 800770a:	e026      	b.n	800775a <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 f8af 	bl	8007870 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8007712:	4b16      	ldr	r3, [pc, #88]	; (800776c <tcp_process+0x75c>)
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	f003 0310 	and.w	r3, r3, #16
 800771a:	2b00      	cmp	r3, #0
 800771c:	d01f      	beq.n	800775e <tcp_process+0x74e>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007722:	4b13      	ldr	r3, [pc, #76]	; (8007770 <tcp_process+0x760>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	429a      	cmp	r2, r3
 8007728:	d119      	bne.n	800775e <tcp_process+0x74e>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800772e:	2b00      	cmp	r3, #0
 8007730:	d115      	bne.n	800775e <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 8007732:	4b10      	ldr	r3, [pc, #64]	; (8007774 <tcp_process+0x764>)
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	f043 0310 	orr.w	r3, r3, #16
 800773a:	b2da      	uxtb	r2, r3
 800773c:	4b0d      	ldr	r3, [pc, #52]	; (8007774 <tcp_process+0x764>)
 800773e:	701a      	strb	r2, [r3, #0]
    }
    break;
 8007740:	e00d      	b.n	800775e <tcp_process+0x74e>
  default:
    break;
 8007742:	bf00      	nop
 8007744:	e00c      	b.n	8007760 <tcp_process+0x750>
    break;
 8007746:	bf00      	nop
 8007748:	e00a      	b.n	8007760 <tcp_process+0x750>
    break;
 800774a:	bf00      	nop
 800774c:	e008      	b.n	8007760 <tcp_process+0x750>
    break;
 800774e:	bf00      	nop
 8007750:	e006      	b.n	8007760 <tcp_process+0x750>
    break;
 8007752:	bf00      	nop
 8007754:	e004      	b.n	8007760 <tcp_process+0x750>
    break;
 8007756:	bf00      	nop
 8007758:	e002      	b.n	8007760 <tcp_process+0x750>
    break;
 800775a:	bf00      	nop
 800775c:	e000      	b.n	8007760 <tcp_process+0x750>
    break;
 800775e:	bf00      	nop
  }
  return ERR_OK;
 8007760:	2300      	movs	r3, #0
}
 8007762:	4618      	mov	r0, r3
 8007764:	3720      	adds	r7, #32
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	20000100 	.word	0x20000100
 8007770:	200000f8 	.word	0x200000f8
 8007774:	20000101 	.word	0x20000101
 8007778:	200068e4 	.word	0x200068e4
 800777c:	200068e0 	.word	0x200068e0
 8007780:	200068f4 	.word	0x200068f4

08007784 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8007784:	b590      	push	{r4, r7, lr}
 8007786:	b085      	sub	sp, #20
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	899b      	ldrh	r3, [r3, #12]
 8007794:	b29b      	uxth	r3, r3
 8007796:	4618      	mov	r0, r3
 8007798:	f7fc f938 	bl	8003a0c <lwip_htons>
 800779c:	4603      	mov	r3, r0
 800779e:	f003 0301 	and.w	r3, r3, #1
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d027      	beq.n	80077f6 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80077a6:	6838      	ldr	r0, [r7, #0]
 80077a8:	f7fe fbef 	bl	8005f8a <tcp_segs_free>
    next = NULL;
 80077ac:	2300      	movs	r3, #0
 80077ae:	603b      	str	r3, [r7, #0]
 80077b0:	e055      	b.n	800785e <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	68db      	ldr	r3, [r3, #12]
 80077b6:	899b      	ldrh	r3, [r3, #12]
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7fc f926 	bl	8003a0c <lwip_htons>
 80077c0:	4603      	mov	r3, r0
 80077c2:	f003 0301 	and.w	r3, r3, #1
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d00d      	beq.n	80077e6 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	68db      	ldr	r3, [r3, #12]
 80077ce:	899b      	ldrh	r3, [r3, #12]
 80077d0:	b29c      	uxth	r4, r3
 80077d2:	2001      	movs	r0, #1
 80077d4:	f7fc f91a 	bl	8003a0c <lwip_htons>
 80077d8:	4603      	mov	r3, r0
 80077da:	461a      	mov	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	4322      	orrs	r2, r4
 80077e2:	b292      	uxth	r2, r2
 80077e4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80077f0:	68f8      	ldr	r0, [r7, #12]
 80077f2:	f7fe fbde 	bl	8005fb2 <tcp_seg_free>
    while (next &&
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d00e      	beq.n	800781a <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	891b      	ldrh	r3, [r3, #8]
 8007800:	461a      	mov	r2, r3
 8007802:	4b1a      	ldr	r3, [pc, #104]	; (800786c <tcp_oos_insert_segment+0xe8>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	441a      	add	r2, r3
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	68db      	ldr	r3, [r3, #12]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	6839      	ldr	r1, [r7, #0]
 8007810:	8909      	ldrh	r1, [r1, #8]
 8007812:	440b      	add	r3, r1
 8007814:	1ad3      	subs	r3, r2, r3
    while (next &&
 8007816:	2b00      	cmp	r3, #0
 8007818:	dacb      	bge.n	80077b2 <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d01e      	beq.n	800785e <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	891b      	ldrh	r3, [r3, #8]
 8007824:	461a      	mov	r2, r3
 8007826:	4b11      	ldr	r3, [pc, #68]	; (800786c <tcp_oos_insert_segment+0xe8>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	441a      	add	r2, r3
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	1ad3      	subs	r3, r2, r3
    if (next &&
 8007834:	2b00      	cmp	r3, #0
 8007836:	dd12      	ble.n	800785e <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	b29a      	uxth	r2, r3
 8007840:	4b0a      	ldr	r3, [pc, #40]	; (800786c <tcp_oos_insert_segment+0xe8>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	b29b      	uxth	r3, r3
 8007846:	1ad3      	subs	r3, r2, r3
 8007848:	b29a      	uxth	r2, r3
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	685a      	ldr	r2, [r3, #4]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	891b      	ldrh	r3, [r3, #8]
 8007856:	4619      	mov	r1, r3
 8007858:	4610      	mov	r0, r2
 800785a:	f7fd f8e3 	bl	8004a24 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	683a      	ldr	r2, [r7, #0]
 8007862:	601a      	str	r2, [r3, #0]
}
 8007864:	bf00      	nop
 8007866:	3714      	adds	r7, #20
 8007868:	46bd      	mov	sp, r7
 800786a:	bd90      	pop	{r4, r7, pc}
 800786c:	200000f4 	.word	0x200000f4

08007870 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8007870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007872:	b08d      	sub	sp, #52	; 0x34
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 8007878:	2300      	movs	r3, #0
 800787a:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	7d1b      	ldrb	r3, [r3, #20]
 8007880:	2b03      	cmp	r3, #3
 8007882:	d806      	bhi.n	8007892 <tcp_receive+0x22>
 8007884:	4ba6      	ldr	r3, [pc, #664]	; (8007b20 <tcp_receive+0x2b0>)
 8007886:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800788a:	49a6      	ldr	r1, [pc, #664]	; (8007b24 <tcp_receive+0x2b4>)
 800788c:	48a6      	ldr	r0, [pc, #664]	; (8007b28 <tcp_receive+0x2b8>)
 800788e:	f006 fe47 	bl	800e520 <iprintf>

  if (flags & TCP_ACK) {
 8007892:	4ba6      	ldr	r3, [pc, #664]	; (8007b2c <tcp_receive+0x2bc>)
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	f003 0310 	and.w	r3, r3, #16
 800789a:	2b00      	cmp	r3, #0
 800789c:	f000 82bf 	beq.w	8007e1e <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80078a6:	461a      	mov	r2, r3
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ac:	4413      	add	r3, r2
 80078ae:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80078b4:	4b9e      	ldr	r3, [pc, #632]	; (8007b30 <tcp_receive+0x2c0>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	1ad3      	subs	r3, r2, r3
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	db1b      	blt.n	80078f6 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80078c2:	4b9b      	ldr	r3, [pc, #620]	; (8007b30 <tcp_receive+0x2c0>)
 80078c4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d106      	bne.n	80078d8 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80078ce:	4b99      	ldr	r3, [pc, #612]	; (8007b34 <tcp_receive+0x2c4>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	1ad3      	subs	r3, r2, r3
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	db0e      	blt.n	80078f6 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80078dc:	4b95      	ldr	r3, [pc, #596]	; (8007b34 <tcp_receive+0x2c4>)
 80078de:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d141      	bne.n	8007968 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80078e4:	4b94      	ldr	r3, [pc, #592]	; (8007b38 <tcp_receive+0x2c8>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	89db      	ldrh	r3, [r3, #14]
 80078ea:	b29a      	uxth	r2, r3
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80078f2:	429a      	cmp	r2, r3
 80078f4:	d938      	bls.n	8007968 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80078f6:	4b90      	ldr	r3, [pc, #576]	; (8007b38 <tcp_receive+0x2c8>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	89db      	ldrh	r3, [r3, #14]
 80078fc:	b29a      	uxth	r2, r3
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007910:	429a      	cmp	r2, r3
 8007912:	d205      	bcs.n	8007920 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 8007920:	4b83      	ldr	r3, [pc, #524]	; (8007b30 <tcp_receive+0x2c0>)
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 8007928:	4b82      	ldr	r3, [pc, #520]	; (8007b34 <tcp_receive+0x2c4>)
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007936:	2b00      	cmp	r3, #0
 8007938:	d10d      	bne.n	8007956 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8007940:	2b00      	cmp	r3, #0
 8007942:	d111      	bne.n	8007968 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8007954:	e008      	b.n	8007968 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800795c:	2b00      	cmp	r3, #0
 800795e:	d003      	beq.n	8007968 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2200      	movs	r2, #0
 8007964:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8007968:	4b72      	ldr	r3, [pc, #456]	; (8007b34 <tcp_receive+0x2c4>)
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007970:	1ad3      	subs	r3, r2, r3
 8007972:	2b00      	cmp	r3, #0
 8007974:	dc53      	bgt.n	8007a1e <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 8007976:	4b71      	ldr	r3, [pc, #452]	; (8007b3c <tcp_receive+0x2cc>)
 8007978:	881b      	ldrh	r3, [r3, #0]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d146      	bne.n	8007a0c <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 8007988:	4413      	add	r3, r2
 800798a:	697a      	ldr	r2, [r7, #20]
 800798c:	429a      	cmp	r2, r3
 800798e:	d13d      	bne.n	8007a0c <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8007996:	2b00      	cmp	r3, #0
 8007998:	db38      	blt.n	8007a0c <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800799e:	4b65      	ldr	r3, [pc, #404]	; (8007b34 <tcp_receive+0x2c4>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d132      	bne.n	8007a0c <tcp_receive+0x19c>
              found_dupack = 1;
 80079a6:	2301      	movs	r3, #1
 80079a8:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80079b0:	2bff      	cmp	r3, #255	; 0xff
 80079b2:	d007      	beq.n	80079c4 <tcp_receive+0x154>
                ++pcb->dupacks;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80079ba:	3301      	adds	r3, #1
 80079bc:	b2da      	uxtb	r2, r3
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80079ca:	2b03      	cmp	r3, #3
 80079cc:	d916      	bls.n	80079fc <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80079d8:	4413      	add	r3, r2
 80079da:	b29a      	uxth	r2, r3
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d912      	bls.n	8007a0c <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80079f0:	4413      	add	r3, r2
 80079f2:	b29a      	uxth	r2, r3
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80079fa:	e007      	b.n	8007a0c <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007a02:	2b03      	cmp	r3, #3
 8007a04:	d102      	bne.n	8007a0c <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f001 fdfa 	bl	8009600 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	f040 8169 	bne.w	8007ce6 <tcp_receive+0x476>
        pcb->dupacks = 0;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2200      	movs	r2, #0
 8007a18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a1c:	e163      	b.n	8007ce6 <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8007a1e:	4b45      	ldr	r3, [pc, #276]	; (8007b34 <tcp_receive+0x2c4>)
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a26:	1ad3      	subs	r3, r2, r3
 8007a28:	3b01      	subs	r3, #1
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	f2c0 8107 	blt.w	8007c3e <tcp_receive+0x3ce>
 8007a30:	4b40      	ldr	r3, [pc, #256]	; (8007b34 <tcp_receive+0x2c4>)
 8007a32:	681a      	ldr	r2, [r3, #0]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a38:	1ad3      	subs	r3, r2, r3
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	f300 80ff 	bgt.w	8007c3e <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	7e9b      	ldrb	r3, [r3, #26]
 8007a44:	f003 0304 	and.w	r3, r3, #4
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d00c      	beq.n	8007a66 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	7e9b      	ldrb	r3, [r3, #26]
 8007a50:	f023 0304 	bic.w	r3, r3, #4
 8007a54:	b2da      	uxtb	r2, r3
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007a74:	10db      	asrs	r3, r3, #3
 8007a76:	b21b      	sxth	r3, r3
 8007a78:	b29a      	uxth	r2, r3
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	4413      	add	r3, r2
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	b21a      	sxth	r2, r3
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2200      	movs	r2, #0
 8007a92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8007a96:	4b27      	ldr	r3, [pc, #156]	; (8007b34 <tcp_receive+0x2c4>)
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	7d1b      	ldrb	r3, [r3, #20]
 8007aa2:	2b03      	cmp	r3, #3
 8007aa4:	f240 8094 	bls.w	8007bd0 <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d216      	bcs.n	8007ae6 <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007ac2:	4413      	add	r3, r2
 8007ac4:	b29a      	uxth	r2, r3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d97f      	bls.n	8007bd0 <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007ada:	4413      	add	r3, r2
 8007adc:	b29a      	uxth	r2, r3
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8007ae4:	e074      	b.n	8007bd0 <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007af0:	4619      	mov	r1, r3
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007af6:	fb03 f301 	mul.w	r3, r3, r1
 8007afa:	6879      	ldr	r1, [r7, #4]
 8007afc:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 8007b00:	fb93 f3f1 	sdiv	r3, r3, r1
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	4413      	add	r3, r2
 8007b08:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8007b10:	8a7a      	ldrh	r2, [r7, #18]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d95c      	bls.n	8007bd0 <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	8a7a      	ldrh	r2, [r7, #18]
 8007b1a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 8007b1e:	e057      	b.n	8007bd0 <tcp_receive+0x360>
 8007b20:	080100c4 	.word	0x080100c4
 8007b24:	080102e8 	.word	0x080102e8
 8007b28:	08010108 	.word	0x08010108
 8007b2c:	20000100 	.word	0x20000100
 8007b30:	200000f4 	.word	0x200000f4
 8007b34:	200000f8 	.word	0x200000f8
 8007b38:	200000e4 	.word	0x200000e4
 8007b3c:	200000fe 	.word	0x200000fe
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b44:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8007b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f7fd f96a 	bl	8004e34 <pbuf_clen>
 8007b60:	4603      	mov	r3, r0
 8007b62:	429c      	cmp	r4, r3
 8007b64:	d206      	bcs.n	8007b74 <tcp_receive+0x304>
 8007b66:	4b70      	ldr	r3, [pc, #448]	; (8007d28 <tcp_receive+0x4b8>)
 8007b68:	f240 429e 	movw	r2, #1182	; 0x49e
 8007b6c:	496f      	ldr	r1, [pc, #444]	; (8007d2c <tcp_receive+0x4bc>)
 8007b6e:	4870      	ldr	r0, [pc, #448]	; (8007d30 <tcp_receive+0x4c0>)
 8007b70:	f006 fcd6 	bl	800e520 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 8007b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f7fd f95b 	bl	8004e34 <pbuf_clen>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	461a      	mov	r2, r3
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007b88:	1a9b      	subs	r3, r3, r2
 8007b8a:	b29a      	uxth	r2, r3
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 8007b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b94:	891a      	ldrh	r2, [r3, #8]
 8007b96:	4b67      	ldr	r3, [pc, #412]	; (8007d34 <tcp_receive+0x4c4>)
 8007b98:	881b      	ldrh	r3, [r3, #0]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	b29a      	uxth	r2, r3
 8007b9e:	4b65      	ldr	r3, [pc, #404]	; (8007d34 <tcp_receive+0x4c4>)
 8007ba0:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 8007ba2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ba4:	f7fe fa05 	bl	8005fb2 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d00e      	beq.n	8007bd0 <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d10a      	bne.n	8007bd0 <tcp_receive+0x360>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d106      	bne.n	8007bd0 <tcp_receive+0x360>
 8007bc2:	4b59      	ldr	r3, [pc, #356]	; (8007d28 <tcp_receive+0x4b8>)
 8007bc4:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8007bc8:	495b      	ldr	r1, [pc, #364]	; (8007d38 <tcp_receive+0x4c8>)
 8007bca:	4859      	ldr	r0, [pc, #356]	; (8007d30 <tcp_receive+0x4c0>)
 8007bcc:	f006 fca8 	bl	800e520 <iprintf>
      while (pcb->unacked != NULL &&
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d022      	beq.n	8007c1e <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bdc:	68db      	ldr	r3, [r3, #12]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	4618      	mov	r0, r3
 8007be2:	f7fb ff20 	bl	8003a26 <lwip_htonl>
 8007be6:	4604      	mov	r4, r0
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bec:	891b      	ldrh	r3, [r3, #8]
 8007bee:	461d      	mov	r5, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bf4:	68db      	ldr	r3, [r3, #12]
 8007bf6:	899b      	ldrh	r3, [r3, #12]
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7fb ff06 	bl	8003a0c <lwip_htons>
 8007c00:	4603      	mov	r3, r0
 8007c02:	f003 0303 	and.w	r3, r3, #3
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d001      	beq.n	8007c0e <tcp_receive+0x39e>
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e000      	b.n	8007c10 <tcp_receive+0x3a0>
 8007c0e:	2300      	movs	r3, #0
 8007c10:	442b      	add	r3, r5
 8007c12:	18e2      	adds	r2, r4, r3
 8007c14:	4b49      	ldr	r3, [pc, #292]	; (8007d3c <tcp_receive+0x4cc>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	dd90      	ble.n	8007b40 <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d104      	bne.n	8007c30 <tcp_receive+0x3c0>
        pcb->rtime = -1;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007c2c:	861a      	strh	r2, [r3, #48]	; 0x30
 8007c2e:	e002      	b.n	8007c36 <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	76da      	strb	r2, [r3, #27]
 8007c3c:	e002      	b.n	8007c44 <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f001 f8fc 	bl	8008e3c <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 8007c44:	e04f      	b.n	8007ce6 <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c50:	681a      	ldr	r2, [r3, #0]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d103      	bne.n	8007c66 <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8007c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	4618      	mov	r0, r3
 8007c72:	f7fd f8df 	bl	8004e34 <pbuf_clen>
 8007c76:	4603      	mov	r3, r0
 8007c78:	429c      	cmp	r4, r3
 8007c7a:	d206      	bcs.n	8007c8a <tcp_receive+0x41a>
 8007c7c:	4b2a      	ldr	r3, [pc, #168]	; (8007d28 <tcp_receive+0x4b8>)
 8007c7e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8007c82:	492a      	ldr	r1, [pc, #168]	; (8007d2c <tcp_receive+0x4bc>)
 8007c84:	482a      	ldr	r0, [pc, #168]	; (8007d30 <tcp_receive+0x4c0>)
 8007c86:	f006 fc4b 	bl	800e520 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8007c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f7fd f8d0 	bl	8004e34 <pbuf_clen>
 8007c94:	4603      	mov	r3, r0
 8007c96:	461a      	mov	r2, r3
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007c9e:	1a9b      	subs	r3, r3, r2
 8007ca0:	b29a      	uxth	r2, r3
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 8007ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007caa:	891a      	ldrh	r2, [r3, #8]
 8007cac:	4b21      	ldr	r3, [pc, #132]	; (8007d34 <tcp_receive+0x4c4>)
 8007cae:	881b      	ldrh	r3, [r3, #0]
 8007cb0:	4413      	add	r3, r2
 8007cb2:	b29a      	uxth	r2, r3
 8007cb4:	4b1f      	ldr	r3, [pc, #124]	; (8007d34 <tcp_receive+0x4c4>)
 8007cb6:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 8007cb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007cba:	f7fe f97a 	bl	8005fb2 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d00e      	beq.n	8007ce6 <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d10a      	bne.n	8007ce6 <tcp_receive+0x476>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d106      	bne.n	8007ce6 <tcp_receive+0x476>
 8007cd8:	4b13      	ldr	r3, [pc, #76]	; (8007d28 <tcp_receive+0x4b8>)
 8007cda:	f240 42dd 	movw	r2, #1245	; 0x4dd
 8007cde:	4916      	ldr	r1, [pc, #88]	; (8007d38 <tcp_receive+0x4c8>)
 8007ce0:	4813      	ldr	r0, [pc, #76]	; (8007d30 <tcp_receive+0x4c0>)
 8007ce2:	f006 fc1d 	bl	800e520 <iprintf>
    while (pcb->unsent != NULL &&
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d036      	beq.n	8007d5c <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8007cee:	4b13      	ldr	r3, [pc, #76]	; (8007d3c <tcp_receive+0x4cc>)
 8007cf0:	681c      	ldr	r4, [r3, #0]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7fb fe93 	bl	8003a26 <lwip_htonl>
 8007d00:	4605      	mov	r5, r0
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d06:	891b      	ldrh	r3, [r3, #8]
 8007d08:	461e      	mov	r6, r3
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d0e:	68db      	ldr	r3, [r3, #12]
 8007d10:	899b      	ldrh	r3, [r3, #12]
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	4618      	mov	r0, r3
 8007d16:	f7fb fe79 	bl	8003a0c <lwip_htons>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	f003 0303 	and.w	r3, r3, #3
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d00d      	beq.n	8007d40 <tcp_receive+0x4d0>
 8007d24:	2301      	movs	r3, #1
 8007d26:	e00c      	b.n	8007d42 <tcp_receive+0x4d2>
 8007d28:	080100c4 	.word	0x080100c4
 8007d2c:	08010304 	.word	0x08010304
 8007d30:	08010108 	.word	0x08010108
 8007d34:	200000fc 	.word	0x200000fc
 8007d38:	0801032c 	.word	0x0801032c
 8007d3c:	200000f8 	.word	0x200000f8
 8007d40:	2300      	movs	r3, #0
 8007d42:	4433      	add	r3, r6
 8007d44:	442b      	add	r3, r5
 8007d46:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	db07      	blt.n	8007d5c <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8007d4c:	4b8d      	ldr	r3, [pc, #564]	; (8007f84 <tcp_receive+0x714>)
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d54:	1ad3      	subs	r3, r2, r3
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	f77f af75 	ble.w	8007c46 <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007d62:	4b89      	ldr	r3, [pc, #548]	; (8007f88 <tcp_receive+0x718>)
 8007d64:	881b      	ldrh	r3, [r3, #0]
 8007d66:	4413      	add	r3, r2
 8007d68:	b29a      	uxth	r2, r3
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d052      	beq.n	8007e1e <tcp_receive+0x5ae>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d7c:	4b81      	ldr	r3, [pc, #516]	; (8007f84 <tcp_receive+0x714>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	1ad3      	subs	r3, r2, r3
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	da4b      	bge.n	8007e1e <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8007d86:	4b81      	ldr	r3, [pc, #516]	; (8007f8c <tcp_receive+0x71c>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	b29a      	uxth	r2, r3
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	1ad3      	subs	r3, r2, r3
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 8007d98:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007da0:	10db      	asrs	r3, r3, #3
 8007da2:	b21b      	sxth	r3, r3
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	1ad3      	subs	r3, r2, r3
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007db2:	b29a      	uxth	r2, r3
 8007db4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007db6:	4413      	add	r3, r2
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	b21a      	sxth	r2, r3
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8007dc0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	da03      	bge.n	8007dd0 <tcp_receive+0x560>
        m = -m;
 8007dc8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007dca:	425b      	negs	r3, r3
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 8007dd0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007dd8:	109b      	asrs	r3, r3, #2
 8007dda:	b21b      	sxth	r3, r3
 8007ddc:	b29b      	uxth	r3, r3
 8007dde:	1ad3      	subs	r3, r2, r3
 8007de0:	b29b      	uxth	r3, r3
 8007de2:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007dea:	b29a      	uxth	r2, r3
 8007dec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007dee:	4413      	add	r3, r2
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	b21a      	sxth	r2, r3
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8007dfe:	10db      	asrs	r3, r3, #3
 8007e00:	b21b      	sxth	r3, r3
 8007e02:	b29a      	uxth	r2, r3
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	4413      	add	r3, r2
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	b21a      	sxth	r2, r3
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8007e1e:	4b5c      	ldr	r3, [pc, #368]	; (8007f90 <tcp_receive+0x720>)
 8007e20:	881b      	ldrh	r3, [r3, #0]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	f000 84f1 	beq.w	800880a <tcp_receive+0xf9a>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	7d1b      	ldrb	r3, [r3, #20]
 8007e2c:	2b06      	cmp	r3, #6
 8007e2e:	f200 84ec 	bhi.w	800880a <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e36:	4b57      	ldr	r3, [pc, #348]	; (8007f94 <tcp_receive+0x724>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	1ad3      	subs	r3, r2, r3
 8007e3c:	3b01      	subs	r3, #1
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	f2c0 80b8 	blt.w	8007fb4 <tcp_receive+0x744>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e48:	4b51      	ldr	r3, [pc, #324]	; (8007f90 <tcp_receive+0x720>)
 8007e4a:	881b      	ldrh	r3, [r3, #0]
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	4b51      	ldr	r3, [pc, #324]	; (8007f94 <tcp_receive+0x724>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	440b      	add	r3, r1
 8007e54:	1ad3      	subs	r3, r2, r3
 8007e56:	3301      	adds	r3, #1
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	f300 80ab 	bgt.w	8007fb4 <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8007e5e:	4b4e      	ldr	r3, [pc, #312]	; (8007f98 <tcp_receive+0x728>)
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e68:	4b4a      	ldr	r3, [pc, #296]	; (8007f94 <tcp_receive+0x724>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	1ad3      	subs	r3, r2, r3
 8007e6e:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8007e70:	4b49      	ldr	r3, [pc, #292]	; (8007f98 <tcp_receive+0x728>)
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d106      	bne.n	8007e86 <tcp_receive+0x616>
 8007e78:	4b48      	ldr	r3, [pc, #288]	; (8007f9c <tcp_receive+0x72c>)
 8007e7a:	f240 523c 	movw	r2, #1340	; 0x53c
 8007e7e:	4948      	ldr	r1, [pc, #288]	; (8007fa0 <tcp_receive+0x730>)
 8007e80:	4848      	ldr	r0, [pc, #288]	; (8007fa4 <tcp_receive+0x734>)
 8007e82:	f006 fb4d 	bl	800e520 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8007e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e88:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	dd06      	ble.n	8007e9e <tcp_receive+0x62e>
 8007e90:	4b42      	ldr	r3, [pc, #264]	; (8007f9c <tcp_receive+0x72c>)
 8007e92:	f240 523d 	movw	r2, #1341	; 0x53d
 8007e96:	4944      	ldr	r1, [pc, #272]	; (8007fa8 <tcp_receive+0x738>)
 8007e98:	4842      	ldr	r0, [pc, #264]	; (8007fa4 <tcp_receive+0x734>)
 8007e9a:	f006 fb41 	bl	800e520 <iprintf>
      if (inseg.p->len < off) {
 8007e9e:	4b3e      	ldr	r3, [pc, #248]	; (8007f98 <tcp_receive+0x728>)
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	895b      	ldrh	r3, [r3, #10]
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	dd3e      	ble.n	8007f2a <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8007eac:	4b3a      	ldr	r3, [pc, #232]	; (8007f98 <tcp_receive+0x728>)
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	891b      	ldrh	r3, [r3, #8]
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	dd06      	ble.n	8007ec8 <tcp_receive+0x658>
 8007eba:	4b38      	ldr	r3, [pc, #224]	; (8007f9c <tcp_receive+0x72c>)
 8007ebc:	f240 523f 	movw	r2, #1343	; 0x53f
 8007ec0:	493a      	ldr	r1, [pc, #232]	; (8007fac <tcp_receive+0x73c>)
 8007ec2:	4838      	ldr	r0, [pc, #224]	; (8007fa4 <tcp_receive+0x734>)
 8007ec4:	f006 fb2c 	bl	800e520 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8007ec8:	4b33      	ldr	r3, [pc, #204]	; (8007f98 <tcp_receive+0x728>)
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	891a      	ldrh	r2, [r3, #8]
 8007ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	1ad3      	subs	r3, r2, r3
 8007ed4:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 8007ed6:	e00e      	b.n	8007ef6 <tcp_receive+0x686>
          off -= p->len;
 8007ed8:	69bb      	ldr	r3, [r7, #24]
 8007eda:	895b      	ldrh	r3, [r3, #10]
 8007edc:	461a      	mov	r2, r3
 8007ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee0:	1a9b      	subs	r3, r3, r2
 8007ee2:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	8a3a      	ldrh	r2, [r7, #16]
 8007ee8:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 8007eea:	69bb      	ldr	r3, [r7, #24]
 8007eec:	2200      	movs	r2, #0
 8007eee:	815a      	strh	r2, [r3, #10]
          p = p->next;
 8007ef0:	69bb      	ldr	r3, [r7, #24]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	895b      	ldrh	r3, [r3, #10]
 8007efa:	461a      	mov	r2, r3
 8007efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efe:	4293      	cmp	r3, r2
 8007f00:	dcea      	bgt.n	8007ed8 <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 8007f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	425b      	negs	r3, r3
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	b21b      	sxth	r3, r3
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	69b8      	ldr	r0, [r7, #24]
 8007f10:	f7fc fed8 	bl	8004cc4 <pbuf_header>
 8007f14:	4603      	mov	r3, r0
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d01c      	beq.n	8007f54 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8007f1a:	4b20      	ldr	r3, [pc, #128]	; (8007f9c <tcp_receive+0x72c>)
 8007f1c:	f240 524c 	movw	r2, #1356	; 0x54c
 8007f20:	4923      	ldr	r1, [pc, #140]	; (8007fb0 <tcp_receive+0x740>)
 8007f22:	4820      	ldr	r0, [pc, #128]	; (8007fa4 <tcp_receive+0x734>)
 8007f24:	f006 fafc 	bl	800e520 <iprintf>
 8007f28:	e014      	b.n	8007f54 <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8007f2a:	4b1b      	ldr	r3, [pc, #108]	; (8007f98 <tcp_receive+0x728>)
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f30:	b292      	uxth	r2, r2
 8007f32:	4252      	negs	r2, r2
 8007f34:	b292      	uxth	r2, r2
 8007f36:	b212      	sxth	r2, r2
 8007f38:	4611      	mov	r1, r2
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f7fc fec2 	bl	8004cc4 <pbuf_header>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d006      	beq.n	8007f54 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8007f46:	4b15      	ldr	r3, [pc, #84]	; (8007f9c <tcp_receive+0x72c>)
 8007f48:	f240 5251 	movw	r2, #1361	; 0x551
 8007f4c:	4918      	ldr	r1, [pc, #96]	; (8007fb0 <tcp_receive+0x740>)
 8007f4e:	4815      	ldr	r0, [pc, #84]	; (8007fa4 <tcp_receive+0x734>)
 8007f50:	f006 fae6 	bl	800e520 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8007f54:	4b10      	ldr	r3, [pc, #64]	; (8007f98 <tcp_receive+0x728>)
 8007f56:	891a      	ldrh	r2, [r3, #8]
 8007f58:	4b0e      	ldr	r3, [pc, #56]	; (8007f94 <tcp_receive+0x724>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	b299      	uxth	r1, r3
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	1acb      	subs	r3, r1, r3
 8007f66:	b29b      	uxth	r3, r3
 8007f68:	4413      	add	r3, r2
 8007f6a:	b29a      	uxth	r2, r3
 8007f6c:	4b0a      	ldr	r3, [pc, #40]	; (8007f98 <tcp_receive+0x728>)
 8007f6e:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f74:	4a07      	ldr	r2, [pc, #28]	; (8007f94 <tcp_receive+0x724>)
 8007f76:	6013      	str	r3, [r2, #0]
 8007f78:	4b07      	ldr	r3, [pc, #28]	; (8007f98 <tcp_receive+0x728>)
 8007f7a:	68db      	ldr	r3, [r3, #12]
 8007f7c:	4a05      	ldr	r2, [pc, #20]	; (8007f94 <tcp_receive+0x724>)
 8007f7e:	6812      	ldr	r2, [r2, #0]
 8007f80:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8007f82:	e025      	b.n	8007fd0 <tcp_receive+0x760>
 8007f84:	200000f8 	.word	0x200000f8
 8007f88:	200000fc 	.word	0x200000fc
 8007f8c:	200068e8 	.word	0x200068e8
 8007f90:	200000fe 	.word	0x200000fe
 8007f94:	200000f4 	.word	0x200000f4
 8007f98:	200000d4 	.word	0x200000d4
 8007f9c:	080100c4 	.word	0x080100c4
 8007fa0:	0801034c 	.word	0x0801034c
 8007fa4:	08010108 	.word	0x08010108
 8007fa8:	0801035c 	.word	0x0801035c
 8007fac:	0801036c 	.word	0x0801036c
 8007fb0:	0801037c 	.word	0x0801037c
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8007fb4:	4b87      	ldr	r3, [pc, #540]	; (80081d4 <tcp_receive+0x964>)
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fbc:	1ad3      	subs	r3, r2, r3
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	da06      	bge.n	8007fd0 <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	7e9b      	ldrb	r3, [r3, #26]
 8007fc6:	f043 0302 	orr.w	r3, r3, #2
 8007fca:	b2da      	uxtb	r2, r3
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8007fd0:	4b80      	ldr	r3, [pc, #512]	; (80081d4 <tcp_receive+0x964>)
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd8:	1ad3      	subs	r3, r2, r3
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	f2c0 8410 	blt.w	8008800 <tcp_receive+0xf90>
 8007fe0:	4b7c      	ldr	r3, [pc, #496]	; (80081d4 <tcp_receive+0x964>)
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe8:	6879      	ldr	r1, [r7, #4]
 8007fea:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007fec:	440b      	add	r3, r1
 8007fee:	1ad3      	subs	r3, r2, r3
 8007ff0:	3301      	adds	r3, #1
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	f300 8404 	bgt.w	8008800 <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ffc:	4b75      	ldr	r3, [pc, #468]	; (80081d4 <tcp_receive+0x964>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	429a      	cmp	r2, r3
 8008002:	f040 8287 	bne.w	8008514 <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8008006:	4b74      	ldr	r3, [pc, #464]	; (80081d8 <tcp_receive+0x968>)
 8008008:	891c      	ldrh	r4, [r3, #8]
 800800a:	4b73      	ldr	r3, [pc, #460]	; (80081d8 <tcp_receive+0x968>)
 800800c:	68db      	ldr	r3, [r3, #12]
 800800e:	899b      	ldrh	r3, [r3, #12]
 8008010:	b29b      	uxth	r3, r3
 8008012:	4618      	mov	r0, r3
 8008014:	f7fb fcfa 	bl	8003a0c <lwip_htons>
 8008018:	4603      	mov	r3, r0
 800801a:	f003 0303 	and.w	r3, r3, #3
 800801e:	2b00      	cmp	r3, #0
 8008020:	d001      	beq.n	8008026 <tcp_receive+0x7b6>
 8008022:	2301      	movs	r3, #1
 8008024:	e000      	b.n	8008028 <tcp_receive+0x7b8>
 8008026:	2300      	movs	r3, #0
 8008028:	4423      	add	r3, r4
 800802a:	b29a      	uxth	r2, r3
 800802c:	4b6b      	ldr	r3, [pc, #428]	; (80081dc <tcp_receive+0x96c>)
 800802e:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008034:	4b69      	ldr	r3, [pc, #420]	; (80081dc <tcp_receive+0x96c>)
 8008036:	881b      	ldrh	r3, [r3, #0]
 8008038:	429a      	cmp	r2, r3
 800803a:	d26e      	bcs.n	800811a <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800803c:	4b66      	ldr	r3, [pc, #408]	; (80081d8 <tcp_receive+0x968>)
 800803e:	68db      	ldr	r3, [r3, #12]
 8008040:	899b      	ldrh	r3, [r3, #12]
 8008042:	b29b      	uxth	r3, r3
 8008044:	4618      	mov	r0, r3
 8008046:	f7fb fce1 	bl	8003a0c <lwip_htons>
 800804a:	4603      	mov	r3, r0
 800804c:	f003 0301 	and.w	r3, r3, #1
 8008050:	2b00      	cmp	r3, #0
 8008052:	d01b      	beq.n	800808c <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8008054:	4b60      	ldr	r3, [pc, #384]	; (80081d8 <tcp_receive+0x968>)
 8008056:	68db      	ldr	r3, [r3, #12]
 8008058:	899b      	ldrh	r3, [r3, #12]
 800805a:	b29b      	uxth	r3, r3
 800805c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008060:	b29c      	uxth	r4, r3
 8008062:	4b5d      	ldr	r3, [pc, #372]	; (80081d8 <tcp_receive+0x968>)
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	899b      	ldrh	r3, [r3, #12]
 8008068:	b29b      	uxth	r3, r3
 800806a:	4618      	mov	r0, r3
 800806c:	f7fb fcce 	bl	8003a0c <lwip_htons>
 8008070:	4603      	mov	r3, r0
 8008072:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8008076:	b29b      	uxth	r3, r3
 8008078:	4618      	mov	r0, r3
 800807a:	f7fb fcc7 	bl	8003a0c <lwip_htons>
 800807e:	4603      	mov	r3, r0
 8008080:	461a      	mov	r2, r3
 8008082:	4b55      	ldr	r3, [pc, #340]	; (80081d8 <tcp_receive+0x968>)
 8008084:	68db      	ldr	r3, [r3, #12]
 8008086:	4322      	orrs	r2, r4
 8008088:	b292      	uxth	r2, r2
 800808a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008090:	4b51      	ldr	r3, [pc, #324]	; (80081d8 <tcp_receive+0x968>)
 8008092:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008094:	4b50      	ldr	r3, [pc, #320]	; (80081d8 <tcp_receive+0x968>)
 8008096:	68db      	ldr	r3, [r3, #12]
 8008098:	899b      	ldrh	r3, [r3, #12]
 800809a:	b29b      	uxth	r3, r3
 800809c:	4618      	mov	r0, r3
 800809e:	f7fb fcb5 	bl	8003a0c <lwip_htons>
 80080a2:	4603      	mov	r3, r0
 80080a4:	f003 0302 	and.w	r3, r3, #2
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d005      	beq.n	80080b8 <tcp_receive+0x848>
            inseg.len -= 1;
 80080ac:	4b4a      	ldr	r3, [pc, #296]	; (80081d8 <tcp_receive+0x968>)
 80080ae:	891b      	ldrh	r3, [r3, #8]
 80080b0:	3b01      	subs	r3, #1
 80080b2:	b29a      	uxth	r2, r3
 80080b4:	4b48      	ldr	r3, [pc, #288]	; (80081d8 <tcp_receive+0x968>)
 80080b6:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80080b8:	4b47      	ldr	r3, [pc, #284]	; (80081d8 <tcp_receive+0x968>)
 80080ba:	685a      	ldr	r2, [r3, #4]
 80080bc:	4b46      	ldr	r3, [pc, #280]	; (80081d8 <tcp_receive+0x968>)
 80080be:	891b      	ldrh	r3, [r3, #8]
 80080c0:	4619      	mov	r1, r3
 80080c2:	4610      	mov	r0, r2
 80080c4:	f7fc fcae 	bl	8004a24 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80080c8:	4b43      	ldr	r3, [pc, #268]	; (80081d8 <tcp_receive+0x968>)
 80080ca:	891c      	ldrh	r4, [r3, #8]
 80080cc:	4b42      	ldr	r3, [pc, #264]	; (80081d8 <tcp_receive+0x968>)
 80080ce:	68db      	ldr	r3, [r3, #12]
 80080d0:	899b      	ldrh	r3, [r3, #12]
 80080d2:	b29b      	uxth	r3, r3
 80080d4:	4618      	mov	r0, r3
 80080d6:	f7fb fc99 	bl	8003a0c <lwip_htons>
 80080da:	4603      	mov	r3, r0
 80080dc:	f003 0303 	and.w	r3, r3, #3
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d001      	beq.n	80080e8 <tcp_receive+0x878>
 80080e4:	2301      	movs	r3, #1
 80080e6:	e000      	b.n	80080ea <tcp_receive+0x87a>
 80080e8:	2300      	movs	r3, #0
 80080ea:	4423      	add	r3, r4
 80080ec:	b29a      	uxth	r2, r3
 80080ee:	4b3b      	ldr	r3, [pc, #236]	; (80081dc <tcp_receive+0x96c>)
 80080f0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80080f2:	4b3a      	ldr	r3, [pc, #232]	; (80081dc <tcp_receive+0x96c>)
 80080f4:	881b      	ldrh	r3, [r3, #0]
 80080f6:	461a      	mov	r2, r3
 80080f8:	4b36      	ldr	r3, [pc, #216]	; (80081d4 <tcp_receive+0x964>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	441a      	add	r2, r3
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008102:	6879      	ldr	r1, [r7, #4]
 8008104:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008106:	440b      	add	r3, r1
 8008108:	429a      	cmp	r2, r3
 800810a:	d006      	beq.n	800811a <tcp_receive+0x8aa>
 800810c:	4b34      	ldr	r3, [pc, #208]	; (80081e0 <tcp_receive+0x970>)
 800810e:	f240 527f 	movw	r2, #1407	; 0x57f
 8008112:	4934      	ldr	r1, [pc, #208]	; (80081e4 <tcp_receive+0x974>)
 8008114:	4834      	ldr	r0, [pc, #208]	; (80081e8 <tcp_receive+0x978>)
 8008116:	f006 fa03 	bl	800e520 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800811e:	2b00      	cmp	r3, #0
 8008120:	f000 80e1 	beq.w	80082e6 <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008124:	4b2c      	ldr	r3, [pc, #176]	; (80081d8 <tcp_receive+0x968>)
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	899b      	ldrh	r3, [r3, #12]
 800812a:	b29b      	uxth	r3, r3
 800812c:	4618      	mov	r0, r3
 800812e:	f7fb fc6d 	bl	8003a0c <lwip_htons>
 8008132:	4603      	mov	r3, r0
 8008134:	f003 0301 	and.w	r3, r3, #1
 8008138:	2b00      	cmp	r3, #0
 800813a:	d010      	beq.n	800815e <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800813c:	e00a      	b.n	8008154 <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008142:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008148:	681a      	ldr	r2, [r3, #0]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800814e:	68b8      	ldr	r0, [r7, #8]
 8008150:	f7fd ff2f 	bl	8005fb2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008158:	2b00      	cmp	r3, #0
 800815a:	d1f0      	bne.n	800813e <tcp_receive+0x8ce>
 800815c:	e0c3      	b.n	80082e6 <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008162:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8008164:	e04f      	b.n	8008206 <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008168:	68db      	ldr	r3, [r3, #12]
 800816a:	899b      	ldrh	r3, [r3, #12]
 800816c:	b29b      	uxth	r3, r3
 800816e:	4618      	mov	r0, r3
 8008170:	f7fb fc4c 	bl	8003a0c <lwip_htons>
 8008174:	4603      	mov	r3, r0
 8008176:	f003 0301 	and.w	r3, r3, #1
 800817a:	2b00      	cmp	r3, #0
 800817c:	d03b      	beq.n	80081f6 <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800817e:	4b16      	ldr	r3, [pc, #88]	; (80081d8 <tcp_receive+0x968>)
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	899b      	ldrh	r3, [r3, #12]
 8008184:	b29b      	uxth	r3, r3
 8008186:	4618      	mov	r0, r3
 8008188:	f7fb fc40 	bl	8003a0c <lwip_htons>
 800818c:	4603      	mov	r3, r0
 800818e:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008192:	2b00      	cmp	r3, #0
 8008194:	d12f      	bne.n	80081f6 <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8008196:	4b10      	ldr	r3, [pc, #64]	; (80081d8 <tcp_receive+0x968>)
 8008198:	68db      	ldr	r3, [r3, #12]
 800819a:	899b      	ldrh	r3, [r3, #12]
 800819c:	b29c      	uxth	r4, r3
 800819e:	2001      	movs	r0, #1
 80081a0:	f7fb fc34 	bl	8003a0c <lwip_htons>
 80081a4:	4603      	mov	r3, r0
 80081a6:	461a      	mov	r2, r3
 80081a8:	4b0b      	ldr	r3, [pc, #44]	; (80081d8 <tcp_receive+0x968>)
 80081aa:	68db      	ldr	r3, [r3, #12]
 80081ac:	4322      	orrs	r2, r4
 80081ae:	b292      	uxth	r2, r2
 80081b0:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80081b2:	4b09      	ldr	r3, [pc, #36]	; (80081d8 <tcp_receive+0x968>)
 80081b4:	891c      	ldrh	r4, [r3, #8]
 80081b6:	4b08      	ldr	r3, [pc, #32]	; (80081d8 <tcp_receive+0x968>)
 80081b8:	68db      	ldr	r3, [r3, #12]
 80081ba:	899b      	ldrh	r3, [r3, #12]
 80081bc:	b29b      	uxth	r3, r3
 80081be:	4618      	mov	r0, r3
 80081c0:	f7fb fc24 	bl	8003a0c <lwip_htons>
 80081c4:	4603      	mov	r3, r0
 80081c6:	f003 0303 	and.w	r3, r3, #3
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d00e      	beq.n	80081ec <tcp_receive+0x97c>
 80081ce:	2301      	movs	r3, #1
 80081d0:	e00d      	b.n	80081ee <tcp_receive+0x97e>
 80081d2:	bf00      	nop
 80081d4:	200000f4 	.word	0x200000f4
 80081d8:	200000d4 	.word	0x200000d4
 80081dc:	200000fe 	.word	0x200000fe
 80081e0:	080100c4 	.word	0x080100c4
 80081e4:	08010390 	.word	0x08010390
 80081e8:	08010108 	.word	0x08010108
 80081ec:	2300      	movs	r3, #0
 80081ee:	4423      	add	r3, r4
 80081f0:	b29a      	uxth	r2, r3
 80081f2:	4b95      	ldr	r3, [pc, #596]	; (8008448 <tcp_receive+0xbd8>)
 80081f4:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 80081f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f8:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 80081fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 8008200:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008202:	f7fd fed6 	bl	8005fb2 <tcp_seg_free>
            while (next &&
 8008206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008208:	2b00      	cmp	r3, #0
 800820a:	d00e      	beq.n	800822a <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800820c:	4b8e      	ldr	r3, [pc, #568]	; (8008448 <tcp_receive+0xbd8>)
 800820e:	881b      	ldrh	r3, [r3, #0]
 8008210:	461a      	mov	r2, r3
 8008212:	4b8e      	ldr	r3, [pc, #568]	; (800844c <tcp_receive+0xbdc>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	441a      	add	r2, r3
 8008218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008220:	8909      	ldrh	r1, [r1, #8]
 8008222:	440b      	add	r3, r1
 8008224:	1ad3      	subs	r3, r2, r3
            while (next &&
 8008226:	2b00      	cmp	r3, #0
 8008228:	da9d      	bge.n	8008166 <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800822a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800822c:	2b00      	cmp	r3, #0
 800822e:	d057      	beq.n	80082e0 <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 8008230:	4b85      	ldr	r3, [pc, #532]	; (8008448 <tcp_receive+0xbd8>)
 8008232:	881b      	ldrh	r3, [r3, #0]
 8008234:	461a      	mov	r2, r3
 8008236:	4b85      	ldr	r3, [pc, #532]	; (800844c <tcp_receive+0xbdc>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	441a      	add	r2, r3
 800823c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800823e:	68db      	ldr	r3, [r3, #12]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	1ad3      	subs	r3, r2, r3
            if (next &&
 8008244:	2b00      	cmp	r3, #0
 8008246:	dd4b      	ble.n	80082e0 <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8008248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800824a:	68db      	ldr	r3, [r3, #12]
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	b29a      	uxth	r2, r3
 8008250:	4b7e      	ldr	r3, [pc, #504]	; (800844c <tcp_receive+0xbdc>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	b29b      	uxth	r3, r3
 8008256:	1ad3      	subs	r3, r2, r3
 8008258:	b29a      	uxth	r2, r3
 800825a:	4b7d      	ldr	r3, [pc, #500]	; (8008450 <tcp_receive+0xbe0>)
 800825c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800825e:	4b7c      	ldr	r3, [pc, #496]	; (8008450 <tcp_receive+0xbe0>)
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	899b      	ldrh	r3, [r3, #12]
 8008264:	b29b      	uxth	r3, r3
 8008266:	4618      	mov	r0, r3
 8008268:	f7fb fbd0 	bl	8003a0c <lwip_htons>
 800826c:	4603      	mov	r3, r0
 800826e:	f003 0302 	and.w	r3, r3, #2
 8008272:	2b00      	cmp	r3, #0
 8008274:	d005      	beq.n	8008282 <tcp_receive+0xa12>
                inseg.len -= 1;
 8008276:	4b76      	ldr	r3, [pc, #472]	; (8008450 <tcp_receive+0xbe0>)
 8008278:	891b      	ldrh	r3, [r3, #8]
 800827a:	3b01      	subs	r3, #1
 800827c:	b29a      	uxth	r2, r3
 800827e:	4b74      	ldr	r3, [pc, #464]	; (8008450 <tcp_receive+0xbe0>)
 8008280:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8008282:	4b73      	ldr	r3, [pc, #460]	; (8008450 <tcp_receive+0xbe0>)
 8008284:	685a      	ldr	r2, [r3, #4]
 8008286:	4b72      	ldr	r3, [pc, #456]	; (8008450 <tcp_receive+0xbe0>)
 8008288:	891b      	ldrh	r3, [r3, #8]
 800828a:	4619      	mov	r1, r3
 800828c:	4610      	mov	r0, r2
 800828e:	f7fc fbc9 	bl	8004a24 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8008292:	4b6f      	ldr	r3, [pc, #444]	; (8008450 <tcp_receive+0xbe0>)
 8008294:	891c      	ldrh	r4, [r3, #8]
 8008296:	4b6e      	ldr	r3, [pc, #440]	; (8008450 <tcp_receive+0xbe0>)
 8008298:	68db      	ldr	r3, [r3, #12]
 800829a:	899b      	ldrh	r3, [r3, #12]
 800829c:	b29b      	uxth	r3, r3
 800829e:	4618      	mov	r0, r3
 80082a0:	f7fb fbb4 	bl	8003a0c <lwip_htons>
 80082a4:	4603      	mov	r3, r0
 80082a6:	f003 0303 	and.w	r3, r3, #3
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d001      	beq.n	80082b2 <tcp_receive+0xa42>
 80082ae:	2301      	movs	r3, #1
 80082b0:	e000      	b.n	80082b4 <tcp_receive+0xa44>
 80082b2:	2300      	movs	r3, #0
 80082b4:	4423      	add	r3, r4
 80082b6:	b29a      	uxth	r2, r3
 80082b8:	4b63      	ldr	r3, [pc, #396]	; (8008448 <tcp_receive+0xbd8>)
 80082ba:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80082bc:	4b62      	ldr	r3, [pc, #392]	; (8008448 <tcp_receive+0xbd8>)
 80082be:	881b      	ldrh	r3, [r3, #0]
 80082c0:	461a      	mov	r2, r3
 80082c2:	4b62      	ldr	r3, [pc, #392]	; (800844c <tcp_receive+0xbdc>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	441a      	add	r2, r3
 80082c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ca:	68db      	ldr	r3, [r3, #12]
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d006      	beq.n	80082e0 <tcp_receive+0xa70>
 80082d2:	4b60      	ldr	r3, [pc, #384]	; (8008454 <tcp_receive+0xbe4>)
 80082d4:	f240 52af 	movw	r2, #1455	; 0x5af
 80082d8:	495f      	ldr	r1, [pc, #380]	; (8008458 <tcp_receive+0xbe8>)
 80082da:	4860      	ldr	r0, [pc, #384]	; (800845c <tcp_receive+0xbec>)
 80082dc:	f006 f920 	bl	800e520 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082e4:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80082e6:	4b58      	ldr	r3, [pc, #352]	; (8008448 <tcp_receive+0xbd8>)
 80082e8:	881b      	ldrh	r3, [r3, #0]
 80082ea:	461a      	mov	r2, r3
 80082ec:	4b57      	ldr	r3, [pc, #348]	; (800844c <tcp_receive+0xbdc>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	441a      	add	r2, r3
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80082fa:	4b53      	ldr	r3, [pc, #332]	; (8008448 <tcp_receive+0xbd8>)
 80082fc:	881b      	ldrh	r3, [r3, #0]
 80082fe:	429a      	cmp	r2, r3
 8008300:	d206      	bcs.n	8008310 <tcp_receive+0xaa0>
 8008302:	4b54      	ldr	r3, [pc, #336]	; (8008454 <tcp_receive+0xbe4>)
 8008304:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8008308:	4955      	ldr	r1, [pc, #340]	; (8008460 <tcp_receive+0xbf0>)
 800830a:	4854      	ldr	r0, [pc, #336]	; (800845c <tcp_receive+0xbec>)
 800830c:	f006 f908 	bl	800e520 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008314:	4b4c      	ldr	r3, [pc, #304]	; (8008448 <tcp_receive+0xbd8>)
 8008316:	881b      	ldrh	r3, [r3, #0]
 8008318:	1ad3      	subs	r3, r2, r3
 800831a:	b29a      	uxth	r2, r3
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f7fd f9fd 	bl	8005720 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8008326:	4b4a      	ldr	r3, [pc, #296]	; (8008450 <tcp_receive+0xbe0>)
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	891b      	ldrh	r3, [r3, #8]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d006      	beq.n	800833e <tcp_receive+0xace>
          recv_data = inseg.p;
 8008330:	4b47      	ldr	r3, [pc, #284]	; (8008450 <tcp_receive+0xbe0>)
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	4a4b      	ldr	r2, [pc, #300]	; (8008464 <tcp_receive+0xbf4>)
 8008336:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8008338:	4b45      	ldr	r3, [pc, #276]	; (8008450 <tcp_receive+0xbe0>)
 800833a:	2200      	movs	r2, #0
 800833c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800833e:	4b44      	ldr	r3, [pc, #272]	; (8008450 <tcp_receive+0xbe0>)
 8008340:	68db      	ldr	r3, [r3, #12]
 8008342:	899b      	ldrh	r3, [r3, #12]
 8008344:	b29b      	uxth	r3, r3
 8008346:	4618      	mov	r0, r3
 8008348:	f7fb fb60 	bl	8003a0c <lwip_htons>
 800834c:	4603      	mov	r3, r0
 800834e:	f003 0301 	and.w	r3, r3, #1
 8008352:	2b00      	cmp	r3, #0
 8008354:	f000 80b4 	beq.w	80084c0 <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8008358:	4b43      	ldr	r3, [pc, #268]	; (8008468 <tcp_receive+0xbf8>)
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	f043 0320 	orr.w	r3, r3, #32
 8008360:	b2da      	uxtb	r2, r3
 8008362:	4b41      	ldr	r3, [pc, #260]	; (8008468 <tcp_receive+0xbf8>)
 8008364:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8008366:	e0ab      	b.n	80084c0 <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800836c:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008372:	68db      	ldr	r3, [r3, #12]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	4a35      	ldr	r2, [pc, #212]	; (800844c <tcp_receive+0xbdc>)
 8008378:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	891b      	ldrh	r3, [r3, #8]
 800837e:	461c      	mov	r4, r3
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	899b      	ldrh	r3, [r3, #12]
 8008386:	b29b      	uxth	r3, r3
 8008388:	4618      	mov	r0, r3
 800838a:	f7fb fb3f 	bl	8003a0c <lwip_htons>
 800838e:	4603      	mov	r3, r0
 8008390:	f003 0303 	and.w	r3, r3, #3
 8008394:	2b00      	cmp	r3, #0
 8008396:	d001      	beq.n	800839c <tcp_receive+0xb2c>
 8008398:	2301      	movs	r3, #1
 800839a:	e000      	b.n	800839e <tcp_receive+0xb2e>
 800839c:	2300      	movs	r3, #0
 800839e:	191a      	adds	r2, r3, r4
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a4:	441a      	add	r2, r3
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083ae:	461c      	mov	r4, r3
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	891b      	ldrh	r3, [r3, #8]
 80083b4:	461d      	mov	r5, r3
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	68db      	ldr	r3, [r3, #12]
 80083ba:	899b      	ldrh	r3, [r3, #12]
 80083bc:	b29b      	uxth	r3, r3
 80083be:	4618      	mov	r0, r3
 80083c0:	f7fb fb24 	bl	8003a0c <lwip_htons>
 80083c4:	4603      	mov	r3, r0
 80083c6:	f003 0303 	and.w	r3, r3, #3
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d001      	beq.n	80083d2 <tcp_receive+0xb62>
 80083ce:	2301      	movs	r3, #1
 80083d0:	e000      	b.n	80083d4 <tcp_receive+0xb64>
 80083d2:	2300      	movs	r3, #0
 80083d4:	442b      	add	r3, r5
 80083d6:	429c      	cmp	r4, r3
 80083d8:	d206      	bcs.n	80083e8 <tcp_receive+0xb78>
 80083da:	4b1e      	ldr	r3, [pc, #120]	; (8008454 <tcp_receive+0xbe4>)
 80083dc:	f240 52de 	movw	r2, #1502	; 0x5de
 80083e0:	4922      	ldr	r1, [pc, #136]	; (800846c <tcp_receive+0xbfc>)
 80083e2:	481e      	ldr	r0, [pc, #120]	; (800845c <tcp_receive+0xbec>)
 80083e4:	f006 f89c 	bl	800e520 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	891b      	ldrh	r3, [r3, #8]
 80083ec:	461c      	mov	r4, r3
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	68db      	ldr	r3, [r3, #12]
 80083f2:	899b      	ldrh	r3, [r3, #12]
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	4618      	mov	r0, r3
 80083f8:	f7fb fb08 	bl	8003a0c <lwip_htons>
 80083fc:	4603      	mov	r3, r0
 80083fe:	f003 0303 	and.w	r3, r3, #3
 8008402:	2b00      	cmp	r3, #0
 8008404:	d001      	beq.n	800840a <tcp_receive+0xb9a>
 8008406:	2301      	movs	r3, #1
 8008408:	e000      	b.n	800840c <tcp_receive+0xb9c>
 800840a:	2300      	movs	r3, #0
 800840c:	1919      	adds	r1, r3, r4
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008412:	b28b      	uxth	r3, r1
 8008414:	1ad3      	subs	r3, r2, r3
 8008416:	b29a      	uxth	r2, r3
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f7fd f97f 	bl	8005720 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	891b      	ldrh	r3, [r3, #8]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d028      	beq.n	800847e <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800842c:	4b0d      	ldr	r3, [pc, #52]	; (8008464 <tcp_receive+0xbf4>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d01d      	beq.n	8008470 <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 8008434:	4b0b      	ldr	r3, [pc, #44]	; (8008464 <tcp_receive+0xbf4>)
 8008436:	681a      	ldr	r2, [r3, #0]
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	4619      	mov	r1, r3
 800843e:	4610      	mov	r0, r2
 8008440:	f7fc fd30 	bl	8004ea4 <pbuf_cat>
 8008444:	e018      	b.n	8008478 <tcp_receive+0xc08>
 8008446:	bf00      	nop
 8008448:	200000fe 	.word	0x200000fe
 800844c:	200000f4 	.word	0x200000f4
 8008450:	200000d4 	.word	0x200000d4
 8008454:	080100c4 	.word	0x080100c4
 8008458:	080103c8 	.word	0x080103c8
 800845c:	08010108 	.word	0x08010108
 8008460:	08010404 	.word	0x08010404
 8008464:	20000104 	.word	0x20000104
 8008468:	20000101 	.word	0x20000101
 800846c:	08010424 	.word	0x08010424
            } else {
              recv_data = cseg->p;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	4a71      	ldr	r2, [pc, #452]	; (800863c <tcp_receive+0xdcc>)
 8008476:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2200      	movs	r2, #0
 800847c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	68db      	ldr	r3, [r3, #12]
 8008482:	899b      	ldrh	r3, [r3, #12]
 8008484:	b29b      	uxth	r3, r3
 8008486:	4618      	mov	r0, r3
 8008488:	f7fb fac0 	bl	8003a0c <lwip_htons>
 800848c:	4603      	mov	r3, r0
 800848e:	f003 0301 	and.w	r3, r3, #1
 8008492:	2b00      	cmp	r3, #0
 8008494:	d00d      	beq.n	80084b2 <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8008496:	4b6a      	ldr	r3, [pc, #424]	; (8008640 <tcp_receive+0xdd0>)
 8008498:	781b      	ldrb	r3, [r3, #0]
 800849a:	f043 0320 	orr.w	r3, r3, #32
 800849e:	b2da      	uxtb	r2, r3
 80084a0:	4b67      	ldr	r3, [pc, #412]	; (8008640 <tcp_receive+0xdd0>)
 80084a2:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	7d1b      	ldrb	r3, [r3, #20]
 80084a8:	2b04      	cmp	r3, #4
 80084aa:	d102      	bne.n	80084b2 <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2207      	movs	r2, #7
 80084b0:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681a      	ldr	r2, [r3, #0]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 80084ba:	68f8      	ldr	r0, [r7, #12]
 80084bc:	f7fd fd79 	bl	8005fb2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d008      	beq.n	80084da <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084cc:	68db      	ldr	r3, [r3, #12]
 80084ce:	685a      	ldr	r2, [r3, #4]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80084d4:	429a      	cmp	r2, r3
 80084d6:	f43f af47 	beq.w	8008368 <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	7e9b      	ldrb	r3, [r3, #26]
 80084de:	f003 0301 	and.w	r3, r3, #1
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d00e      	beq.n	8008504 <tcp_receive+0xc94>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	7e9b      	ldrb	r3, [r3, #26]
 80084ea:	f023 0301 	bic.w	r3, r3, #1
 80084ee:	b2da      	uxtb	r2, r3
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	769a      	strb	r2, [r3, #26]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	7e9b      	ldrb	r3, [r3, #26]
 80084f8:	f043 0302 	orr.w	r3, r3, #2
 80084fc:	b2da      	uxtb	r2, r3
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8008502:	e181      	b.n	8008808 <tcp_receive+0xf98>
        tcp_ack(pcb);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	7e9b      	ldrb	r3, [r3, #26]
 8008508:	f043 0301 	orr.w	r3, r3, #1
 800850c:	b2da      	uxtb	r2, r3
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8008512:	e179      	b.n	8008808 <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 fc91 	bl	8008e3c <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800851e:	2b00      	cmp	r3, #0
 8008520:	d106      	bne.n	8008530 <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8008522:	4848      	ldr	r0, [pc, #288]	; (8008644 <tcp_receive+0xdd4>)
 8008524:	f7fd fd5d 	bl	8005fe2 <tcp_seg_copy>
 8008528:	4602      	mov	r2, r0
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 800852e:	e16b      	b.n	8008808 <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 8008530:	2300      	movs	r3, #0
 8008532:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008538:	62fb      	str	r3, [r7, #44]	; 0x2c
 800853a:	e150      	b.n	80087de <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 800853c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800853e:	68db      	ldr	r3, [r3, #12]
 8008540:	685a      	ldr	r2, [r3, #4]
 8008542:	4b41      	ldr	r3, [pc, #260]	; (8008648 <tcp_receive+0xdd8>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	429a      	cmp	r2, r3
 8008548:	d11d      	bne.n	8008586 <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800854a:	4b3e      	ldr	r3, [pc, #248]	; (8008644 <tcp_receive+0xdd4>)
 800854c:	891a      	ldrh	r2, [r3, #8]
 800854e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008550:	891b      	ldrh	r3, [r3, #8]
 8008552:	429a      	cmp	r2, r3
 8008554:	f240 8148 	bls.w	80087e8 <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 8008558:	483a      	ldr	r0, [pc, #232]	; (8008644 <tcp_receive+0xdd4>)
 800855a:	f7fd fd42 	bl	8005fe2 <tcp_seg_copy>
 800855e:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2b00      	cmp	r3, #0
 8008564:	f000 8142 	beq.w	80087ec <tcp_receive+0xf7c>
                  if (prev != NULL) {
 8008568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800856a:	2b00      	cmp	r3, #0
 800856c:	d003      	beq.n	8008576 <tcp_receive+0xd06>
                    prev->next = cseg;
 800856e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008570:	68fa      	ldr	r2, [r7, #12]
 8008572:	601a      	str	r2, [r3, #0]
 8008574:	e002      	b.n	800857c <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	68fa      	ldr	r2, [r7, #12]
 800857a:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 800857c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800857e:	68f8      	ldr	r0, [r7, #12]
 8008580:	f7ff f900 	bl	8007784 <tcp_oos_insert_segment>
                }
                break;
 8008584:	e132      	b.n	80087ec <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8008586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008588:	2b00      	cmp	r3, #0
 800858a:	d117      	bne.n	80085bc <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800858c:	4b2e      	ldr	r3, [pc, #184]	; (8008648 <tcp_receive+0xdd8>)
 800858e:	681a      	ldr	r2, [r3, #0]
 8008590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008592:	68db      	ldr	r3, [r3, #12]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	1ad3      	subs	r3, r2, r3
 8008598:	2b00      	cmp	r3, #0
 800859a:	da57      	bge.n	800864c <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 800859c:	4829      	ldr	r0, [pc, #164]	; (8008644 <tcp_receive+0xdd4>)
 800859e:	f7fd fd20 	bl	8005fe2 <tcp_seg_copy>
 80085a2:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	f000 8122 	beq.w	80087f0 <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	68fa      	ldr	r2, [r7, #12]
 80085b0:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 80085b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085b4:	68f8      	ldr	r0, [r7, #12]
 80085b6:	f7ff f8e5 	bl	8007784 <tcp_oos_insert_segment>
                  }
                  break;
 80085ba:	e119      	b.n	80087f0 <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 80085bc:	4b22      	ldr	r3, [pc, #136]	; (8008648 <tcp_receive+0xdd8>)
 80085be:	681a      	ldr	r2, [r3, #0]
 80085c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c2:	68db      	ldr	r3, [r3, #12]
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	1ad3      	subs	r3, r2, r3
 80085c8:	3b01      	subs	r3, #1
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	db3e      	blt.n	800864c <tcp_receive+0xddc>
 80085ce:	4b1e      	ldr	r3, [pc, #120]	; (8008648 <tcp_receive+0xdd8>)
 80085d0:	681a      	ldr	r2, [r3, #0]
 80085d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d4:	68db      	ldr	r3, [r3, #12]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	1ad3      	subs	r3, r2, r3
 80085da:	3301      	adds	r3, #1
 80085dc:	2b00      	cmp	r3, #0
 80085de:	dc35      	bgt.n	800864c <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 80085e0:	4818      	ldr	r0, [pc, #96]	; (8008644 <tcp_receive+0xdd4>)
 80085e2:	f7fd fcfe 	bl	8005fe2 <tcp_seg_copy>
 80085e6:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	f000 8102 	beq.w	80087f4 <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80085f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085f2:	68db      	ldr	r3, [r3, #12]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085f8:	8912      	ldrh	r2, [r2, #8]
 80085fa:	441a      	add	r2, r3
 80085fc:	4b12      	ldr	r3, [pc, #72]	; (8008648 <tcp_receive+0xdd8>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	1ad3      	subs	r3, r2, r3
 8008602:	2b00      	cmp	r3, #0
 8008604:	dd12      	ble.n	800862c <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8008606:	4b10      	ldr	r3, [pc, #64]	; (8008648 <tcp_receive+0xdd8>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	b29a      	uxth	r2, r3
 800860c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800860e:	68db      	ldr	r3, [r3, #12]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	b29b      	uxth	r3, r3
 8008614:	1ad3      	subs	r3, r2, r3
 8008616:	b29a      	uxth	r2, r3
 8008618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800861a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800861c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800861e:	685a      	ldr	r2, [r3, #4]
 8008620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008622:	891b      	ldrh	r3, [r3, #8]
 8008624:	4619      	mov	r1, r3
 8008626:	4610      	mov	r0, r2
 8008628:	f7fc f9fc 	bl	8004a24 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800862c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800862e:	68fa      	ldr	r2, [r7, #12]
 8008630:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8008632:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008634:	68f8      	ldr	r0, [r7, #12]
 8008636:	f7ff f8a5 	bl	8007784 <tcp_oos_insert_segment>
                  }
                  break;
 800863a:	e0db      	b.n	80087f4 <tcp_receive+0xf84>
 800863c:	20000104 	.word	0x20000104
 8008640:	20000101 	.word	0x20000101
 8008644:	200000d4 	.word	0x200000d4
 8008648:	200000f4 	.word	0x200000f4
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800864c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2b00      	cmp	r3, #0
 8008652:	f040 80bf 	bne.w	80087d4 <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8008656:	4b7c      	ldr	r3, [pc, #496]	; (8008848 <tcp_receive+0xfd8>)
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800865c:	68db      	ldr	r3, [r3, #12]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8008662:	2b00      	cmp	r3, #0
 8008664:	f340 80b6 	ble.w	80087d4 <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800866a:	68db      	ldr	r3, [r3, #12]
 800866c:	899b      	ldrh	r3, [r3, #12]
 800866e:	b29b      	uxth	r3, r3
 8008670:	4618      	mov	r0, r3
 8008672:	f7fb f9cb 	bl	8003a0c <lwip_htons>
 8008676:	4603      	mov	r3, r0
 8008678:	f003 0301 	and.w	r3, r3, #1
 800867c:	2b00      	cmp	r3, #0
 800867e:	f040 80bb 	bne.w	80087f8 <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8008682:	4872      	ldr	r0, [pc, #456]	; (800884c <tcp_receive+0xfdc>)
 8008684:	f7fd fcad 	bl	8005fe2 <tcp_seg_copy>
 8008688:	4602      	mov	r2, r0
 800868a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800868c:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800868e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	2b00      	cmp	r3, #0
 8008694:	f000 80b2 	beq.w	80087fc <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8008698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800869a:	68db      	ldr	r3, [r3, #12]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086a0:	8912      	ldrh	r2, [r2, #8]
 80086a2:	441a      	add	r2, r3
 80086a4:	4b68      	ldr	r3, [pc, #416]	; (8008848 <tcp_receive+0xfd8>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	1ad3      	subs	r3, r2, r3
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	dd12      	ble.n	80086d4 <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80086ae:	4b66      	ldr	r3, [pc, #408]	; (8008848 <tcp_receive+0xfd8>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	b29a      	uxth	r2, r3
 80086b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	b29b      	uxth	r3, r3
 80086bc:	1ad3      	subs	r3, r2, r3
 80086be:	b29a      	uxth	r2, r3
 80086c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086c2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80086c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086c6:	685a      	ldr	r2, [r3, #4]
 80086c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ca:	891b      	ldrh	r3, [r3, #8]
 80086cc:	4619      	mov	r1, r3
 80086ce:	4610      	mov	r0, r2
 80086d0:	f7fc f9a8 	bl	8004a24 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80086d4:	4b5e      	ldr	r3, [pc, #376]	; (8008850 <tcp_receive+0xfe0>)
 80086d6:	881b      	ldrh	r3, [r3, #0]
 80086d8:	461a      	mov	r2, r3
 80086da:	4b5b      	ldr	r3, [pc, #364]	; (8008848 <tcp_receive+0xfd8>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	441a      	add	r2, r3
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e4:	6879      	ldr	r1, [r7, #4]
 80086e6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80086e8:	440b      	add	r3, r1
 80086ea:	1ad3      	subs	r3, r2, r3
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	f340 8085 	ble.w	80087fc <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80086f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	68db      	ldr	r3, [r3, #12]
 80086f8:	899b      	ldrh	r3, [r3, #12]
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	4618      	mov	r0, r3
 80086fe:	f7fb f985 	bl	8003a0c <lwip_htons>
 8008702:	4603      	mov	r3, r0
 8008704:	f003 0301 	and.w	r3, r3, #1
 8008708:	2b00      	cmp	r3, #0
 800870a:	d01e      	beq.n	800874a <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800870c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	68db      	ldr	r3, [r3, #12]
 8008712:	899b      	ldrh	r3, [r3, #12]
 8008714:	b29b      	uxth	r3, r3
 8008716:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800871a:	b29c      	uxth	r4, r3
 800871c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	899b      	ldrh	r3, [r3, #12]
 8008724:	b29b      	uxth	r3, r3
 8008726:	4618      	mov	r0, r3
 8008728:	f7fb f970 	bl	8003a0c <lwip_htons>
 800872c:	4603      	mov	r3, r0
 800872e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8008732:	b29b      	uxth	r3, r3
 8008734:	4618      	mov	r0, r3
 8008736:	f7fb f969 	bl	8003a0c <lwip_htons>
 800873a:	4603      	mov	r3, r0
 800873c:	461a      	mov	r2, r3
 800873e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	68db      	ldr	r3, [r3, #12]
 8008744:	4322      	orrs	r2, r4
 8008746:	b292      	uxth	r2, r2
 8008748:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800874e:	b29a      	uxth	r2, r3
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008754:	4413      	add	r3, r2
 8008756:	b299      	uxth	r1, r3
 8008758:	4b3b      	ldr	r3, [pc, #236]	; (8008848 <tcp_receive+0xfd8>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	b29a      	uxth	r2, r3
 800875e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	1a8a      	subs	r2, r1, r2
 8008764:	b292      	uxth	r2, r2
 8008766:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8008768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	685a      	ldr	r2, [r3, #4]
 800876e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	891b      	ldrh	r3, [r3, #8]
 8008774:	4619      	mov	r1, r3
 8008776:	4610      	mov	r0, r2
 8008778:	f7fc f954 	bl	8004a24 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800877c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	891c      	ldrh	r4, [r3, #8]
 8008782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	899b      	ldrh	r3, [r3, #12]
 800878a:	b29b      	uxth	r3, r3
 800878c:	4618      	mov	r0, r3
 800878e:	f7fb f93d 	bl	8003a0c <lwip_htons>
 8008792:	4603      	mov	r3, r0
 8008794:	f003 0303 	and.w	r3, r3, #3
 8008798:	2b00      	cmp	r3, #0
 800879a:	d001      	beq.n	80087a0 <tcp_receive+0xf30>
 800879c:	2301      	movs	r3, #1
 800879e:	e000      	b.n	80087a2 <tcp_receive+0xf32>
 80087a0:	2300      	movs	r3, #0
 80087a2:	4423      	add	r3, r4
 80087a4:	b29a      	uxth	r2, r3
 80087a6:	4b2a      	ldr	r3, [pc, #168]	; (8008850 <tcp_receive+0xfe0>)
 80087a8:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80087aa:	4b29      	ldr	r3, [pc, #164]	; (8008850 <tcp_receive+0xfe0>)
 80087ac:	881b      	ldrh	r3, [r3, #0]
 80087ae:	461a      	mov	r2, r3
 80087b0:	4b25      	ldr	r3, [pc, #148]	; (8008848 <tcp_receive+0xfd8>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	441a      	add	r2, r3
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ba:	6879      	ldr	r1, [r7, #4]
 80087bc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80087be:	440b      	add	r3, r1
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d01b      	beq.n	80087fc <tcp_receive+0xf8c>
 80087c4:	4b23      	ldr	r3, [pc, #140]	; (8008854 <tcp_receive+0xfe4>)
 80087c6:	f240 627b 	movw	r2, #1659	; 0x67b
 80087ca:	4923      	ldr	r1, [pc, #140]	; (8008858 <tcp_receive+0xfe8>)
 80087cc:	4823      	ldr	r0, [pc, #140]	; (800885c <tcp_receive+0xfec>)
 80087ce:	f005 fea7 	bl	800e520 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80087d2:	e013      	b.n	80087fc <tcp_receive+0xf8c>
              }
            }
            prev = next;
 80087d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087d6:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80087d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	f47f aeab 	bne.w	800853c <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 80087e6:	e00f      	b.n	8008808 <tcp_receive+0xf98>
                break;
 80087e8:	bf00      	nop
 80087ea:	e00d      	b.n	8008808 <tcp_receive+0xf98>
                break;
 80087ec:	bf00      	nop
 80087ee:	e00b      	b.n	8008808 <tcp_receive+0xf98>
                  break;
 80087f0:	bf00      	nop
 80087f2:	e009      	b.n	8008808 <tcp_receive+0xf98>
                  break;
 80087f4:	bf00      	nop
 80087f6:	e007      	b.n	8008808 <tcp_receive+0xf98>
                  break;
 80087f8:	bf00      	nop
 80087fa:	e005      	b.n	8008808 <tcp_receive+0xf98>
                break;
 80087fc:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 80087fe:	e003      	b.n	8008808 <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 fb1b 	bl	8008e3c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008806:	e01a      	b.n	800883e <tcp_receive+0xfce>
 8008808:	e019      	b.n	800883e <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800880a:	4b0f      	ldr	r3, [pc, #60]	; (8008848 <tcp_receive+0xfd8>)
 800880c:	681a      	ldr	r2, [r3, #0]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008812:	1ad3      	subs	r3, r2, r3
 8008814:	2b00      	cmp	r3, #0
 8008816:	db0a      	blt.n	800882e <tcp_receive+0xfbe>
 8008818:	4b0b      	ldr	r3, [pc, #44]	; (8008848 <tcp_receive+0xfd8>)
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008820:	6879      	ldr	r1, [r7, #4]
 8008822:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008824:	440b      	add	r3, r1
 8008826:	1ad3      	subs	r3, r2, r3
 8008828:	3301      	adds	r3, #1
 800882a:	2b00      	cmp	r3, #0
 800882c:	dd07      	ble.n	800883e <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	7e9b      	ldrb	r3, [r3, #26]
 8008832:	f043 0302 	orr.w	r3, r3, #2
 8008836:	b2da      	uxtb	r2, r3
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	769a      	strb	r2, [r3, #26]
    }
  }
}
 800883c:	e7ff      	b.n	800883e <tcp_receive+0xfce>
 800883e:	bf00      	nop
 8008840:	3734      	adds	r7, #52	; 0x34
 8008842:	46bd      	mov	sp, r7
 8008844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008846:	bf00      	nop
 8008848:	200000f4 	.word	0x200000f4
 800884c:	200000d4 	.word	0x200000d4
 8008850:	200000fe 	.word	0x200000fe
 8008854:	080100c4 	.word	0x080100c4
 8008858:	08010390 	.word	0x08010390
 800885c:	08010108 	.word	0x08010108

08008860 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 8008860:	b480      	push	{r7}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8008866:	4b17      	ldr	r3, [pc, #92]	; (80088c4 <tcp_getoptbyte+0x64>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d005      	beq.n	800887a <tcp_getoptbyte+0x1a>
 800886e:	4b16      	ldr	r3, [pc, #88]	; (80088c8 <tcp_getoptbyte+0x68>)
 8008870:	881a      	ldrh	r2, [r3, #0]
 8008872:	4b16      	ldr	r3, [pc, #88]	; (80088cc <tcp_getoptbyte+0x6c>)
 8008874:	881b      	ldrh	r3, [r3, #0]
 8008876:	429a      	cmp	r2, r3
 8008878:	d20e      	bcs.n	8008898 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800887a:	4b15      	ldr	r3, [pc, #84]	; (80088d0 <tcp_getoptbyte+0x70>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	3314      	adds	r3, #20
 8008880:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 8008882:	4b11      	ldr	r3, [pc, #68]	; (80088c8 <tcp_getoptbyte+0x68>)
 8008884:	881b      	ldrh	r3, [r3, #0]
 8008886:	1c5a      	adds	r2, r3, #1
 8008888:	b291      	uxth	r1, r2
 800888a:	4a0f      	ldr	r2, [pc, #60]	; (80088c8 <tcp_getoptbyte+0x68>)
 800888c:	8011      	strh	r1, [r2, #0]
 800888e:	461a      	mov	r2, r3
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	4413      	add	r3, r2
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	e010      	b.n	80088ba <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8008898:	4b0b      	ldr	r3, [pc, #44]	; (80088c8 <tcp_getoptbyte+0x68>)
 800889a:	881b      	ldrh	r3, [r3, #0]
 800889c:	1c5a      	adds	r2, r3, #1
 800889e:	b291      	uxth	r1, r2
 80088a0:	4a09      	ldr	r2, [pc, #36]	; (80088c8 <tcp_getoptbyte+0x68>)
 80088a2:	8011      	strh	r1, [r2, #0]
 80088a4:	b2da      	uxtb	r2, r3
 80088a6:	4b09      	ldr	r3, [pc, #36]	; (80088cc <tcp_getoptbyte+0x6c>)
 80088a8:	881b      	ldrh	r3, [r3, #0]
 80088aa:	b2db      	uxtb	r3, r3
 80088ac:	1ad3      	subs	r3, r2, r3
 80088ae:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 80088b0:	4b04      	ldr	r3, [pc, #16]	; (80088c4 <tcp_getoptbyte+0x64>)
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	79fb      	ldrb	r3, [r7, #7]
 80088b6:	4413      	add	r3, r2
 80088b8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	370c      	adds	r7, #12
 80088be:	46bd      	mov	sp, r7
 80088c0:	bc80      	pop	{r7}
 80088c2:	4770      	bx	lr
 80088c4:	200000ec 	.word	0x200000ec
 80088c8:	200000f0 	.word	0x200000f0
 80088cc:	200000ea 	.word	0x200000ea
 80088d0:	200000e4 	.word	0x200000e4

080088d4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80088dc:	4b2d      	ldr	r3, [pc, #180]	; (8008994 <tcp_parseopt+0xc0>)
 80088de:	881b      	ldrh	r3, [r3, #0]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d053      	beq.n	800898c <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80088e4:	4b2c      	ldr	r3, [pc, #176]	; (8008998 <tcp_parseopt+0xc4>)
 80088e6:	2200      	movs	r2, #0
 80088e8:	801a      	strh	r2, [r3, #0]
 80088ea:	e043      	b.n	8008974 <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 80088ec:	f7ff ffb8 	bl	8008860 <tcp_getoptbyte>
 80088f0:	4603      	mov	r3, r0
 80088f2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80088f4:	7bfb      	ldrb	r3, [r7, #15]
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d03c      	beq.n	8008974 <tcp_parseopt+0xa0>
 80088fa:	2b02      	cmp	r3, #2
 80088fc:	d002      	beq.n	8008904 <tcp_parseopt+0x30>
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d03f      	beq.n	8008982 <tcp_parseopt+0xae>
 8008902:	e026      	b.n	8008952 <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8008904:	f7ff ffac 	bl	8008860 <tcp_getoptbyte>
 8008908:	4603      	mov	r3, r0
 800890a:	2b04      	cmp	r3, #4
 800890c:	d13b      	bne.n	8008986 <tcp_parseopt+0xb2>
 800890e:	4b22      	ldr	r3, [pc, #136]	; (8008998 <tcp_parseopt+0xc4>)
 8008910:	881b      	ldrh	r3, [r3, #0]
 8008912:	3302      	adds	r3, #2
 8008914:	4a1f      	ldr	r2, [pc, #124]	; (8008994 <tcp_parseopt+0xc0>)
 8008916:	8812      	ldrh	r2, [r2, #0]
 8008918:	4293      	cmp	r3, r2
 800891a:	dc34      	bgt.n	8008986 <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 800891c:	f7ff ffa0 	bl	8008860 <tcp_getoptbyte>
 8008920:	4603      	mov	r3, r0
 8008922:	b29b      	uxth	r3, r3
 8008924:	021b      	lsls	r3, r3, #8
 8008926:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 8008928:	f7ff ff9a 	bl	8008860 <tcp_getoptbyte>
 800892c:	4603      	mov	r3, r0
 800892e:	b29a      	uxth	r2, r3
 8008930:	89bb      	ldrh	r3, [r7, #12]
 8008932:	4313      	orrs	r3, r2
 8008934:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8008936:	89bb      	ldrh	r3, [r7, #12]
 8008938:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800893c:	d804      	bhi.n	8008948 <tcp_parseopt+0x74>
 800893e:	89bb      	ldrh	r3, [r7, #12]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d001      	beq.n	8008948 <tcp_parseopt+0x74>
 8008944:	89ba      	ldrh	r2, [r7, #12]
 8008946:	e001      	b.n	800894c <tcp_parseopt+0x78>
 8008948:	f44f 7206 	mov.w	r2, #536	; 0x218
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 8008950:	e010      	b.n	8008974 <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8008952:	f7ff ff85 	bl	8008860 <tcp_getoptbyte>
 8008956:	4603      	mov	r3, r0
 8008958:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 800895a:	7afb      	ldrb	r3, [r7, #11]
 800895c:	2b01      	cmp	r3, #1
 800895e:	d914      	bls.n	800898a <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8008960:	7afb      	ldrb	r3, [r7, #11]
 8008962:	b29a      	uxth	r2, r3
 8008964:	4b0c      	ldr	r3, [pc, #48]	; (8008998 <tcp_parseopt+0xc4>)
 8008966:	881b      	ldrh	r3, [r3, #0]
 8008968:	4413      	add	r3, r2
 800896a:	b29b      	uxth	r3, r3
 800896c:	3b02      	subs	r3, #2
 800896e:	b29a      	uxth	r2, r3
 8008970:	4b09      	ldr	r3, [pc, #36]	; (8008998 <tcp_parseopt+0xc4>)
 8008972:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8008974:	4b08      	ldr	r3, [pc, #32]	; (8008998 <tcp_parseopt+0xc4>)
 8008976:	881a      	ldrh	r2, [r3, #0]
 8008978:	4b06      	ldr	r3, [pc, #24]	; (8008994 <tcp_parseopt+0xc0>)
 800897a:	881b      	ldrh	r3, [r3, #0]
 800897c:	429a      	cmp	r2, r3
 800897e:	d3b5      	bcc.n	80088ec <tcp_parseopt+0x18>
 8008980:	e004      	b.n	800898c <tcp_parseopt+0xb8>
        return;
 8008982:	bf00      	nop
 8008984:	e002      	b.n	800898c <tcp_parseopt+0xb8>
          return;
 8008986:	bf00      	nop
 8008988:	e000      	b.n	800898c <tcp_parseopt+0xb8>
          return;
 800898a:	bf00      	nop
      }
    }
  }
}
 800898c:	3710      	adds	r7, #16
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
 8008992:	bf00      	nop
 8008994:	200000e8 	.word	0x200000e8
 8008998:	200000f0 	.word	0x200000f0

0800899c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800899c:	b480      	push	{r7}
 800899e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80089a0:	4b05      	ldr	r3, [pc, #20]	; (80089b8 <tcp_trigger_input_pcb_close+0x1c>)
 80089a2:	781b      	ldrb	r3, [r3, #0]
 80089a4:	f043 0310 	orr.w	r3, r3, #16
 80089a8:	b2da      	uxtb	r2, r3
 80089aa:	4b03      	ldr	r3, [pc, #12]	; (80089b8 <tcp_trigger_input_pcb_close+0x1c>)
 80089ac:	701a      	strb	r2, [r3, #0]
}
 80089ae:	bf00      	nop
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bc80      	pop	{r7}
 80089b4:	4770      	bx	lr
 80089b6:	bf00      	nop
 80089b8:	20000101 	.word	0x20000101

080089bc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b086      	sub	sp, #24
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	60f8      	str	r0, [r7, #12]
 80089c4:	607b      	str	r3, [r7, #4]
 80089c6:	460b      	mov	r3, r1
 80089c8:	817b      	strh	r3, [r7, #10]
 80089ca:	4613      	mov	r3, r2
 80089cc:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80089ce:	897a      	ldrh	r2, [r7, #10]
 80089d0:	893b      	ldrh	r3, [r7, #8]
 80089d2:	4413      	add	r3, r2
 80089d4:	b29b      	uxth	r3, r3
 80089d6:	3314      	adds	r3, #20
 80089d8:	b29b      	uxth	r3, r3
 80089da:	2200      	movs	r2, #0
 80089dc:	4619      	mov	r1, r3
 80089de:	2001      	movs	r0, #1
 80089e0:	f7fb fe22 	bl	8004628 <pbuf_alloc>
 80089e4:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d057      	beq.n	8008a9c <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	895b      	ldrh	r3, [r3, #10]
 80089f0:	461a      	mov	r2, r3
 80089f2:	897b      	ldrh	r3, [r7, #10]
 80089f4:	3314      	adds	r3, #20
 80089f6:	429a      	cmp	r2, r3
 80089f8:	da05      	bge.n	8008a06 <tcp_output_alloc_header+0x4a>
 80089fa:	4b2b      	ldr	r3, [pc, #172]	; (8008aa8 <tcp_output_alloc_header+0xec>)
 80089fc:	2273      	movs	r2, #115	; 0x73
 80089fe:	492b      	ldr	r1, [pc, #172]	; (8008aac <tcp_output_alloc_header+0xf0>)
 8008a00:	482b      	ldr	r0, [pc, #172]	; (8008ab0 <tcp_output_alloc_header+0xf4>)
 8008a02:	f005 fd8d 	bl	800e520 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	8adb      	ldrh	r3, [r3, #22]
 8008a10:	4618      	mov	r0, r3
 8008a12:	f7fa fffb 	bl	8003a0c <lwip_htons>
 8008a16:	4603      	mov	r3, r0
 8008a18:	461a      	mov	r2, r3
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	8b1b      	ldrh	r3, [r3, #24]
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7fa fff2 	bl	8003a0c <lwip_htons>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f7fa fff3 	bl	8003a26 <lwip_htonl>
 8008a40:	4602      	mov	r2, r0
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8008a46:	897b      	ldrh	r3, [r7, #10]
 8008a48:	089b      	lsrs	r3, r3, #2
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	3305      	adds	r3, #5
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	031b      	lsls	r3, r3, #12
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	f043 0310 	orr.w	r3, r3, #16
 8008a58:	b29b      	uxth	r3, r3
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f7fa ffd6 	bl	8003a0c <lwip_htons>
 8008a60:	4603      	mov	r3, r0
 8008a62:	461a      	mov	r2, r3
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f7fa ffcd 	bl	8003a0c <lwip_htons>
 8008a72:	4603      	mov	r3, r0
 8008a74:	461a      	mov	r2, r3
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	741a      	strb	r2, [r3, #16]
 8008a80:	2200      	movs	r2, #0
 8008a82:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	2200      	movs	r2, #0
 8008a88:	749a      	strb	r2, [r3, #18]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a92:	68fa      	ldr	r2, [r7, #12]
 8008a94:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8008a96:	441a      	add	r2, r3
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8008a9c:	697b      	ldr	r3, [r7, #20]
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3718      	adds	r7, #24
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
 8008aa6:	bf00      	nop
 8008aa8:	0801044c 	.word	0x0801044c
 8008aac:	08010480 	.word	0x08010480
 8008ab0:	080104b0 	.word	0x080104b0

08008ab4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8008ab4:	b590      	push	{r4, r7, lr}
 8008ab6:	b085      	sub	sp, #20
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d02d      	beq.n	8008b20 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ac8:	60fb      	str	r3, [r7, #12]
 8008aca:	e002      	b.n	8008ad2 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d1f8      	bne.n	8008acc <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	68db      	ldr	r3, [r3, #12]
 8008ade:	899b      	ldrh	r3, [r3, #12]
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f7fa ff92 	bl	8003a0c <lwip_htons>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	f003 0307 	and.w	r3, r3, #7
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d116      	bne.n	8008b20 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	68db      	ldr	r3, [r3, #12]
 8008af6:	899b      	ldrh	r3, [r3, #12]
 8008af8:	b29c      	uxth	r4, r3
 8008afa:	2001      	movs	r0, #1
 8008afc:	f7fa ff86 	bl	8003a0c <lwip_htons>
 8008b00:	4603      	mov	r3, r0
 8008b02:	461a      	mov	r2, r3
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	68db      	ldr	r3, [r3, #12]
 8008b08:	4322      	orrs	r2, r4
 8008b0a:	b292      	uxth	r2, r2
 8008b0c:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	7e9b      	ldrb	r3, [r3, #26]
 8008b12:	f043 0320 	orr.w	r3, r3, #32
 8008b16:	b2da      	uxtb	r2, r3
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	e004      	b.n	8008b2a <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8008b20:	2101      	movs	r1, #1
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 f88e 	bl	8008c44 <tcp_enqueue_flags>
 8008b28:	4603      	mov	r3, r0
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3714      	adds	r7, #20
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd90      	pop	{r4, r7, pc}
	...

08008b34 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8008b34:	b590      	push	{r4, r7, lr}
 8008b36:	b087      	sub	sp, #28
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	60f8      	str	r0, [r7, #12]
 8008b3c:	60b9      	str	r1, [r7, #8]
 8008b3e:	603b      	str	r3, [r7, #0]
 8008b40:	4613      	mov	r3, r2
 8008b42:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8008b44:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008b48:	009b      	lsls	r3, r3, #2
 8008b4a:	b2db      	uxtb	r3, r3
 8008b4c:	f003 0304 	and.w	r3, r3, #4
 8008b50:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8008b52:	2003      	movs	r0, #3
 8008b54:	f7fb fb02 	bl	800415c <memp_malloc>
 8008b58:	6138      	str	r0, [r7, #16]
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d104      	bne.n	8008b6a <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8008b60:	68b8      	ldr	r0, [r7, #8]
 8008b62:	f7fc f8d3 	bl	8004d0c <pbuf_free>
    return NULL;
 8008b66:	2300      	movs	r3, #0
 8008b68:	e061      	b.n	8008c2e <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8008b70:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	2200      	movs	r2, #0
 8008b76:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	68ba      	ldr	r2, [r7, #8]
 8008b7c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	891a      	ldrh	r2, [r3, #8]
 8008b82:	7dfb      	ldrb	r3, [r7, #23]
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d205      	bcs.n	8008b96 <tcp_create_segment+0x62>
 8008b8a:	4b2b      	ldr	r3, [pc, #172]	; (8008c38 <tcp_create_segment+0x104>)
 8008b8c:	22ba      	movs	r2, #186	; 0xba
 8008b8e:	492b      	ldr	r1, [pc, #172]	; (8008c3c <tcp_create_segment+0x108>)
 8008b90:	482b      	ldr	r0, [pc, #172]	; (8008c40 <tcp_create_segment+0x10c>)
 8008b92:	f005 fcc5 	bl	800e520 <iprintf>
  seg->len = p->tot_len - optlen;
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	891a      	ldrh	r2, [r3, #8]
 8008b9a:	7dfb      	ldrb	r3, [r7, #23]
 8008b9c:	b29b      	uxth	r3, r3
 8008b9e:	1ad3      	subs	r3, r2, r3
 8008ba0:	b29a      	uxth	r2, r3
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 8008ba6:	2114      	movs	r1, #20
 8008ba8:	68b8      	ldr	r0, [r7, #8]
 8008baa:	f7fc f88b 	bl	8004cc4 <pbuf_header>
 8008bae:	4603      	mov	r3, r0
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d004      	beq.n	8008bbe <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8008bb4:	6938      	ldr	r0, [r7, #16]
 8008bb6:	f7fd f9fc 	bl	8005fb2 <tcp_seg_free>
    return NULL;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	e037      	b.n	8008c2e <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	685a      	ldr	r2, [r3, #4]
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	8ada      	ldrh	r2, [r3, #22]
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	68dc      	ldr	r4, [r3, #12]
 8008bd0:	4610      	mov	r0, r2
 8008bd2:	f7fa ff1b 	bl	8003a0c <lwip_htons>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	8b1a      	ldrh	r2, [r3, #24]
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	68dc      	ldr	r4, [r3, #12]
 8008be2:	4610      	mov	r0, r2
 8008be4:	f7fa ff12 	bl	8003a0c <lwip_htons>
 8008be8:	4603      	mov	r3, r0
 8008bea:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	68dc      	ldr	r4, [r3, #12]
 8008bf0:	6838      	ldr	r0, [r7, #0]
 8008bf2:	f7fa ff18 	bl	8003a26 <lwip_htonl>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8008bfa:	7dfb      	ldrb	r3, [r7, #23]
 8008bfc:	089b      	lsrs	r3, r3, #2
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	b29b      	uxth	r3, r3
 8008c02:	3305      	adds	r3, #5
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	031b      	lsls	r3, r3, #12
 8008c08:	b29a      	uxth	r2, r3
 8008c0a:	79fb      	ldrb	r3, [r7, #7]
 8008c0c:	b29b      	uxth	r3, r3
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	b29a      	uxth	r2, r3
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	68dc      	ldr	r4, [r3, #12]
 8008c16:	4610      	mov	r0, r2
 8008c18:	f7fa fef8 	bl	8003a0c <lwip_htons>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	68db      	ldr	r3, [r3, #12]
 8008c24:	2200      	movs	r2, #0
 8008c26:	749a      	strb	r2, [r3, #18]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	74da      	strb	r2, [r3, #19]
  return seg;
 8008c2c:	693b      	ldr	r3, [r7, #16]
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	371c      	adds	r7, #28
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd90      	pop	{r4, r7, pc}
 8008c36:	bf00      	nop
 8008c38:	0801044c 	.word	0x0801044c
 8008c3c:	080104d8 	.word	0x080104d8
 8008c40:	080104b0 	.word	0x080104b0

08008c44 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b08a      	sub	sp, #40	; 0x28
 8008c48:	af02      	add	r7, sp, #8
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	460b      	mov	r3, r1
 8008c4e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8008c50:	2300      	movs	r3, #0
 8008c52:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8008c54:	2300      	movs	r3, #0
 8008c56:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8008c58:	78fb      	ldrb	r3, [r7, #3]
 8008c5a:	f003 0303 	and.w	r3, r3, #3
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d106      	bne.n	8008c70 <tcp_enqueue_flags+0x2c>
 8008c62:	4b6f      	ldr	r3, [pc, #444]	; (8008e20 <tcp_enqueue_flags+0x1dc>)
 8008c64:	f240 321b 	movw	r2, #795	; 0x31b
 8008c68:	496e      	ldr	r1, [pc, #440]	; (8008e24 <tcp_enqueue_flags+0x1e0>)
 8008c6a:	486f      	ldr	r0, [pc, #444]	; (8008e28 <tcp_enqueue_flags+0x1e4>)
 8008c6c:	f005 fc58 	bl	800e520 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008c76:	2b08      	cmp	r3, #8
 8008c78:	d806      	bhi.n	8008c88 <tcp_enqueue_flags+0x44>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008c80:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d90e      	bls.n	8008ca6 <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 8008c88:	78fb      	ldrb	r3, [r7, #3]
 8008c8a:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d109      	bne.n	8008ca6 <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	7e9b      	ldrb	r3, [r3, #26]
 8008c96:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008c9a:	b2da      	uxtb	r2, r3
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8008ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ca4:	e0b7      	b.n	8008e16 <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 8008ca6:	78fb      	ldrb	r3, [r7, #3]
 8008ca8:	f003 0302 	and.w	r3, r3, #2
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d001      	beq.n	8008cb4 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8008cb4:	7ffb      	ldrb	r3, [r7, #31]
 8008cb6:	009b      	lsls	r3, r3, #2
 8008cb8:	b2db      	uxtb	r3, r3
 8008cba:	f003 0304 	and.w	r3, r3, #4
 8008cbe:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8008cc0:	7dfb      	ldrb	r3, [r7, #23]
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	2000      	movs	r0, #0
 8008cca:	f7fb fcad 	bl	8004628 <pbuf_alloc>
 8008cce:	6138      	str	r0, [r7, #16]
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d109      	bne.n	8008cea <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	7e9b      	ldrb	r3, [r3, #26]
 8008cda:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008cde:	b2da      	uxtb	r2, r3
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8008ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ce8:	e095      	b.n	8008e16 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	895a      	ldrh	r2, [r3, #10]
 8008cee:	7dfb      	ldrb	r3, [r7, #23]
 8008cf0:	b29b      	uxth	r3, r3
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d206      	bcs.n	8008d04 <tcp_enqueue_flags+0xc0>
 8008cf6:	4b4a      	ldr	r3, [pc, #296]	; (8008e20 <tcp_enqueue_flags+0x1dc>)
 8008cf8:	f240 3241 	movw	r2, #833	; 0x341
 8008cfc:	494b      	ldr	r1, [pc, #300]	; (8008e2c <tcp_enqueue_flags+0x1e8>)
 8008cfe:	484a      	ldr	r0, [pc, #296]	; (8008e28 <tcp_enqueue_flags+0x1e4>)
 8008d00:	f005 fc0e 	bl	800e520 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8008d08:	78fa      	ldrb	r2, [r7, #3]
 8008d0a:	7ffb      	ldrb	r3, [r7, #31]
 8008d0c:	9300      	str	r3, [sp, #0]
 8008d0e:	460b      	mov	r3, r1
 8008d10:	6939      	ldr	r1, [r7, #16]
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f7ff ff0e 	bl	8008b34 <tcp_create_segment>
 8008d18:	60f8      	str	r0, [r7, #12]
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d109      	bne.n	8008d34 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	7e9b      	ldrb	r3, [r3, #26]
 8008d24:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008d28:	b2da      	uxtb	r2, r3
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8008d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8008d32:	e070      	b.n	8008e16 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	68db      	ldr	r3, [r3, #12]
 8008d38:	f003 0303 	and.w	r3, r3, #3
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d006      	beq.n	8008d4e <tcp_enqueue_flags+0x10a>
 8008d40:	4b37      	ldr	r3, [pc, #220]	; (8008e20 <tcp_enqueue_flags+0x1dc>)
 8008d42:	f240 3249 	movw	r2, #841	; 0x349
 8008d46:	493a      	ldr	r1, [pc, #232]	; (8008e30 <tcp_enqueue_flags+0x1ec>)
 8008d48:	4837      	ldr	r0, [pc, #220]	; (8008e28 <tcp_enqueue_flags+0x1e4>)
 8008d4a:	f005 fbe9 	bl	800e520 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	891b      	ldrh	r3, [r3, #8]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d006      	beq.n	8008d64 <tcp_enqueue_flags+0x120>
 8008d56:	4b32      	ldr	r3, [pc, #200]	; (8008e20 <tcp_enqueue_flags+0x1dc>)
 8008d58:	f240 324a 	movw	r2, #842	; 0x34a
 8008d5c:	4935      	ldr	r1, [pc, #212]	; (8008e34 <tcp_enqueue_flags+0x1f0>)
 8008d5e:	4832      	ldr	r0, [pc, #200]	; (8008e28 <tcp_enqueue_flags+0x1e4>)
 8008d60:	f005 fbde 	bl	800e520 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d103      	bne.n	8008d74 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	68fa      	ldr	r2, [r7, #12]
 8008d70:	669a      	str	r2, [r3, #104]	; 0x68
 8008d72:	e00d      	b.n	8008d90 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d78:	61bb      	str	r3, [r7, #24]
 8008d7a:	e002      	b.n	8008d82 <tcp_enqueue_flags+0x13e>
 8008d7c:	69bb      	ldr	r3, [r7, #24]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	61bb      	str	r3, [r7, #24]
 8008d82:	69bb      	ldr	r3, [r7, #24]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d1f8      	bne.n	8008d7c <tcp_enqueue_flags+0x138>
    useg->next = seg;
 8008d8a:	69bb      	ldr	r3, [r7, #24]
 8008d8c:	68fa      	ldr	r2, [r7, #12]
 8008d8e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2200      	movs	r2, #0
 8008d94:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8008d98:	78fb      	ldrb	r3, [r7, #3]
 8008d9a:	f003 0302 	and.w	r3, r3, #2
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d104      	bne.n	8008dac <tcp_enqueue_flags+0x168>
 8008da2:	78fb      	ldrb	r3, [r7, #3]
 8008da4:	f003 0301 	and.w	r3, r3, #1
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d004      	beq.n	8008db6 <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008db0:	1c5a      	adds	r2, r3, #1
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8008db6:	78fb      	ldrb	r3, [r7, #3]
 8008db8:	f003 0301 	and.w	r3, r3, #1
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d006      	beq.n	8008dce <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	7e9b      	ldrb	r3, [r3, #26]
 8008dc4:	f043 0320 	orr.w	r3, r3, #32
 8008dc8:	b2da      	uxtb	r2, r3
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	685b      	ldr	r3, [r3, #4]
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f7fc f82e 	bl	8004e34 <pbuf_clen>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	461a      	mov	r2, r3
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008de2:	4413      	add	r3, r2
 8008de4:	b29a      	uxth	r2, r3
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d00e      	beq.n	8008e14 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d10a      	bne.n	8008e14 <tcp_enqueue_flags+0x1d0>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d106      	bne.n	8008e14 <tcp_enqueue_flags+0x1d0>
 8008e06:	4b06      	ldr	r3, [pc, #24]	; (8008e20 <tcp_enqueue_flags+0x1dc>)
 8008e08:	f240 326d 	movw	r2, #877	; 0x36d
 8008e0c:	490a      	ldr	r1, [pc, #40]	; (8008e38 <tcp_enqueue_flags+0x1f4>)
 8008e0e:	4806      	ldr	r0, [pc, #24]	; (8008e28 <tcp_enqueue_flags+0x1e4>)
 8008e10:	f005 fb86 	bl	800e520 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8008e14:	2300      	movs	r3, #0
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3720      	adds	r7, #32
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
 8008e1e:	bf00      	nop
 8008e20:	0801044c 	.word	0x0801044c
 8008e24:	08010750 	.word	0x08010750
 8008e28:	080104b0 	.word	0x080104b0
 8008e2c:	080107a8 	.word	0x080107a8
 8008e30:	080107e4 	.word	0x080107e4
 8008e34:	080107fc 	.word	0x080107fc
 8008e38:	08010828 	.word	0x08010828

08008e3c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8008e3c:	b590      	push	{r4, r7, lr}
 8008e3e:	b08b      	sub	sp, #44	; 0x2c
 8008e40:	af04      	add	r7, sp, #16
 8008e42:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 8008e44:	2300      	movs	r3, #0
 8008e46:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8008e48:	7dbb      	ldrb	r3, [r7, #22]
 8008e4a:	b29c      	uxth	r4, r3
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e50:	4618      	mov	r0, r3
 8008e52:	f7fa fde8 	bl	8003a26 <lwip_htonl>
 8008e56:	4603      	mov	r3, r0
 8008e58:	2200      	movs	r2, #0
 8008e5a:	4621      	mov	r1, r4
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f7ff fdad 	bl	80089bc <tcp_output_alloc_header>
 8008e62:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d109      	bne.n	8008e7e <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	7e9b      	ldrb	r3, [r3, #26]
 8008e6e:	f043 0303 	orr.w	r3, r3, #3
 8008e72:	b2da      	uxtb	r2, r3
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8008e78:	f06f 0301 	mvn.w	r3, #1
 8008e7c:	e036      	b.n	8008eec <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	3304      	adds	r3, #4
 8008e82:	4618      	mov	r0, r3
 8008e84:	f004 f986 	bl	800d194 <ip4_route>
 8008e88:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d102      	bne.n	8008e96 <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 8008e90:	23fc      	movs	r3, #252	; 0xfc
 8008e92:	75fb      	strb	r3, [r7, #23]
 8008e94:	e012      	b.n	8008ebc <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 8008e96:	6879      	ldr	r1, [r7, #4]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	1d18      	adds	r0, r3, #4
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	7a9c      	ldrb	r4, [r3, #10]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	7a5b      	ldrb	r3, [r3, #9]
 8008ea4:	68fa      	ldr	r2, [r7, #12]
 8008ea6:	9202      	str	r2, [sp, #8]
 8008ea8:	2206      	movs	r2, #6
 8008eaa:	9201      	str	r2, [sp, #4]
 8008eac:	9300      	str	r3, [sp, #0]
 8008eae:	4623      	mov	r3, r4
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	6938      	ldr	r0, [r7, #16]
 8008eb4:	f004 fb34 	bl	800d520 <ip4_output_if>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8008ebc:	6938      	ldr	r0, [r7, #16]
 8008ebe:	f7fb ff25 	bl	8004d0c <pbuf_free>

  if (err != ERR_OK) {
 8008ec2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d007      	beq.n	8008eda <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	7e9b      	ldrb	r3, [r3, #26]
 8008ece:	f043 0303 	orr.w	r3, r3, #3
 8008ed2:	b2da      	uxtb	r2, r3
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	769a      	strb	r2, [r3, #26]
 8008ed8:	e006      	b.n	8008ee8 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	7e9b      	ldrb	r3, [r3, #26]
 8008ede:	f023 0303 	bic.w	r3, r3, #3
 8008ee2:	b2da      	uxtb	r2, r3
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	769a      	strb	r2, [r3, #26]
  }

  return err;
 8008ee8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	371c      	adds	r7, #28
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bd90      	pop	{r4, r7, pc}

08008ef4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8008ef4:	b5b0      	push	{r4, r5, r7, lr}
 8008ef6:	b08a      	sub	sp, #40	; 0x28
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	7d1b      	ldrb	r3, [r3, #20]
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	d106      	bne.n	8008f12 <tcp_output+0x1e>
 8008f04:	4b9b      	ldr	r3, [pc, #620]	; (8009174 <tcp_output+0x280>)
 8008f06:	f240 32ed 	movw	r2, #1005	; 0x3ed
 8008f0a:	499b      	ldr	r1, [pc, #620]	; (8009178 <tcp_output+0x284>)
 8008f0c:	489b      	ldr	r0, [pc, #620]	; (800917c <tcp_output+0x288>)
 8008f0e:	f005 fb07 	bl	800e520 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8008f12:	4b9b      	ldr	r3, [pc, #620]	; (8009180 <tcp_output+0x28c>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	687a      	ldr	r2, [r7, #4]
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d101      	bne.n	8008f20 <tcp_output+0x2c>
    return ERR_OK;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	e1cf      	b.n	80092c0 <tcp_output+0x3cc>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d203      	bcs.n	8008f38 <tcp_output+0x44>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008f36:	e002      	b.n	8008f3e <tcp_output+0x4a>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008f3e:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008f44:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	7e9b      	ldrb	r3, [r3, #26]
 8008f4a:	f003 0302 	and.w	r3, r3, #2
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d017      	beq.n	8008f82 <tcp_output+0x8e>
 8008f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d00f      	beq.n	8008f78 <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8008f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5a:	68db      	ldr	r3, [r3, #12]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f7fa fd61 	bl	8003a26 <lwip_htonl>
 8008f64:	4602      	mov	r2, r0
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f6a:	1ad3      	subs	r3, r2, r3
 8008f6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f6e:	8912      	ldrh	r2, [r2, #8]
 8008f70:	4413      	add	r3, r2
     (seg == NULL ||
 8008f72:	69ba      	ldr	r2, [r7, #24]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d204      	bcs.n	8008f82 <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f7ff ff5f 	bl	8008e3c <tcp_send_empty_ack>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	e19e      	b.n	80092c0 <tcp_output+0x3cc>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f86:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8008f88:	6a3b      	ldr	r3, [r7, #32]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d007      	beq.n	8008f9e <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 8008f8e:	e002      	b.n	8008f96 <tcp_output+0xa2>
 8008f90:	6a3b      	ldr	r3, [r7, #32]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	623b      	str	r3, [r7, #32]
 8008f96:	6a3b      	ldr	r3, [r7, #32]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d1f8      	bne.n	8008f90 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	3304      	adds	r3, #4
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	f004 f8f6 	bl	800d194 <ip4_route>
 8008fa8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d102      	bne.n	8008fb6 <tcp_output+0xc2>
    return ERR_RTE;
 8008fb0:	f06f 0303 	mvn.w	r3, #3
 8008fb4:	e184      	b.n	80092c0 <tcp_output+0x3cc>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d003      	beq.n	8008fc4 <tcp_output+0xd0>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d111      	bne.n	8008fe8 <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d002      	beq.n	8008fd0 <tcp_output+0xdc>
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	3304      	adds	r3, #4
 8008fce:	e000      	b.n	8008fd2 <tcp_output+0xde>
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d102      	bne.n	8008fe0 <tcp_output+0xec>
      return ERR_RTE;
 8008fda:	f06f 0303 	mvn.w	r3, #3
 8008fde:	e16f      	b.n	80092c0 <tcp_output+0x3cc>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	681a      	ldr	r2, [r3, #0]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 8008fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	f000 813e 	beq.w	800926c <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8008ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff2:	68db      	ldr	r3, [r3, #12]
 8008ff4:	685b      	ldr	r3, [r3, #4]
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f7fa fd15 	bl	8003a26 <lwip_htonl>
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009002:	1ad3      	subs	r3, r2, r3
 8009004:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009006:	8912      	ldrh	r2, [r2, #8]
 8009008:	4413      	add	r3, r2
  if (seg != NULL &&
 800900a:	69ba      	ldr	r2, [r7, #24]
 800900c:	429a      	cmp	r2, r3
 800900e:	f080 812d 	bcs.w	800926c <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8009012:	69bb      	ldr	r3, [r7, #24]
 8009014:	2b00      	cmp	r3, #0
 8009016:	f000 8129 	beq.w	800926c <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009020:	461a      	mov	r2, r3
 8009022:	69bb      	ldr	r3, [r7, #24]
 8009024:	4293      	cmp	r3, r2
 8009026:	f040 8121 	bne.w	800926c <tcp_output+0x378>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800902e:	2b00      	cmp	r3, #0
 8009030:	f040 811c 	bne.w	800926c <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800903a:	2b00      	cmp	r3, #0
 800903c:	f040 812b 	bne.w	8009296 <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2200      	movs	r2, #0
 8009044:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2201      	movs	r2, #1
 800904c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 8009050:	e121      	b.n	8009296 <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8009052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	899b      	ldrh	r3, [r3, #12]
 8009058:	b29b      	uxth	r3, r3
 800905a:	4618      	mov	r0, r3
 800905c:	f7fa fcd6 	bl	8003a0c <lwip_htons>
 8009060:	4603      	mov	r3, r0
 8009062:	f003 0304 	and.w	r3, r3, #4
 8009066:	2b00      	cmp	r3, #0
 8009068:	d006      	beq.n	8009078 <tcp_output+0x184>
 800906a:	4b42      	ldr	r3, [pc, #264]	; (8009174 <tcp_output+0x280>)
 800906c:	f240 4246 	movw	r2, #1094	; 0x446
 8009070:	4944      	ldr	r1, [pc, #272]	; (8009184 <tcp_output+0x290>)
 8009072:	4842      	ldr	r0, [pc, #264]	; (800917c <tcp_output+0x288>)
 8009074:	f005 fa54 	bl	800e520 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800907c:	2b00      	cmp	r3, #0
 800907e:	d01f      	beq.n	80090c0 <tcp_output+0x1cc>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	7e9b      	ldrb	r3, [r3, #26]
 8009084:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8009088:	2b00      	cmp	r3, #0
 800908a:	d119      	bne.n	80090c0 <tcp_output+0x1cc>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009090:	2b00      	cmp	r3, #0
 8009092:	d00b      	beq.n	80090ac <tcp_output+0x1b8>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d110      	bne.n	80090c0 <tcp_output+0x1cc>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090a2:	891a      	ldrh	r2, [r3, #8]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d209      	bcs.n	80090c0 <tcp_output+0x1cc>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d004      	beq.n	80090c0 <tcp_output+0x1cc>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80090bc:	2b08      	cmp	r3, #8
 80090be:	d901      	bls.n	80090c4 <tcp_output+0x1d0>
 80090c0:	2301      	movs	r3, #1
 80090c2:	e000      	b.n	80090c6 <tcp_output+0x1d2>
 80090c4:	2300      	movs	r3, #0
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d106      	bne.n	80090d8 <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	7e9b      	ldrb	r3, [r3, #26]
 80090ce:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	f000 80e1 	beq.w	800929a <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	7d1b      	ldrb	r3, [r3, #20]
 80090dc:	2b02      	cmp	r3, #2
 80090de:	d00d      	beq.n	80090fc <tcp_output+0x208>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80090e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e2:	68db      	ldr	r3, [r3, #12]
 80090e4:	899b      	ldrh	r3, [r3, #12]
 80090e6:	b29c      	uxth	r4, r3
 80090e8:	2010      	movs	r0, #16
 80090ea:	f7fa fc8f 	bl	8003a0c <lwip_htons>
 80090ee:	4603      	mov	r3, r0
 80090f0:	461a      	mov	r2, r3
 80090f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f4:	68db      	ldr	r3, [r3, #12]
 80090f6:	4322      	orrs	r2, r4
 80090f8:	b292      	uxth	r2, r2
 80090fa:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 80090fc:	697a      	ldr	r2, [r7, #20]
 80090fe:	6879      	ldr	r1, [r7, #4]
 8009100:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009102:	f000 f8e1 	bl	80092c8 <tcp_output_segment>
 8009106:	4603      	mov	r3, r0
 8009108:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800910a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d009      	beq.n	8009126 <tcp_output+0x232>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	7e9b      	ldrb	r3, [r3, #26]
 8009116:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800911a:	b2da      	uxtb	r2, r3
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	769a      	strb	r2, [r3, #26]
      return err;
 8009120:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009124:	e0cc      	b.n	80092c0 <tcp_output+0x3cc>
    }
    pcb->unsent = seg->next;
 8009126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	7d1b      	ldrb	r3, [r3, #20]
 8009132:	2b02      	cmp	r3, #2
 8009134:	d006      	beq.n	8009144 <tcp_output+0x250>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	7e9b      	ldrb	r3, [r3, #26]
 800913a:	f023 0303 	bic.w	r3, r3, #3
 800913e:	b2da      	uxtb	r2, r3
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8009144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009146:	68db      	ldr	r3, [r3, #12]
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	4618      	mov	r0, r3
 800914c:	f7fa fc6b 	bl	8003a26 <lwip_htonl>
 8009150:	4604      	mov	r4, r0
 8009152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009154:	891b      	ldrh	r3, [r3, #8]
 8009156:	461d      	mov	r5, r3
 8009158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800915a:	68db      	ldr	r3, [r3, #12]
 800915c:	899b      	ldrh	r3, [r3, #12]
 800915e:	b29b      	uxth	r3, r3
 8009160:	4618      	mov	r0, r3
 8009162:	f7fa fc53 	bl	8003a0c <lwip_htons>
 8009166:	4603      	mov	r3, r0
 8009168:	f003 0303 	and.w	r3, r3, #3
 800916c:	2b00      	cmp	r3, #0
 800916e:	d00b      	beq.n	8009188 <tcp_output+0x294>
 8009170:	2301      	movs	r3, #1
 8009172:	e00a      	b.n	800918a <tcp_output+0x296>
 8009174:	0801044c 	.word	0x0801044c
 8009178:	08010850 	.word	0x08010850
 800917c:	080104b0 	.word	0x080104b0
 8009180:	200068f8 	.word	0x200068f8
 8009184:	08010878 	.word	0x08010878
 8009188:	2300      	movs	r3, #0
 800918a:	442b      	add	r3, r5
 800918c:	4423      	add	r3, r4
 800918e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	1ad3      	subs	r3, r2, r3
 8009198:	2b00      	cmp	r3, #0
 800919a:	da02      	bge.n	80091a2 <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	68ba      	ldr	r2, [r7, #8]
 80091a0:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80091a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a4:	891b      	ldrh	r3, [r3, #8]
 80091a6:	461c      	mov	r4, r3
 80091a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091aa:	68db      	ldr	r3, [r3, #12]
 80091ac:	899b      	ldrh	r3, [r3, #12]
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	4618      	mov	r0, r3
 80091b2:	f7fa fc2b 	bl	8003a0c <lwip_htons>
 80091b6:	4603      	mov	r3, r0
 80091b8:	f003 0303 	and.w	r3, r3, #3
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d001      	beq.n	80091c4 <tcp_output+0x2d0>
 80091c0:	2301      	movs	r3, #1
 80091c2:	e000      	b.n	80091c6 <tcp_output+0x2d2>
 80091c4:	2300      	movs	r3, #0
 80091c6:	4423      	add	r3, r4
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d049      	beq.n	8009260 <tcp_output+0x36c>
      seg->next = NULL;
 80091cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ce:	2200      	movs	r2, #0
 80091d0:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d105      	bne.n	80091e6 <tcp_output+0x2f2>
        pcb->unacked = seg;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091de:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 80091e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e2:	623b      	str	r3, [r7, #32]
 80091e4:	e03f      	b.n	8009266 <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80091e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091e8:	68db      	ldr	r3, [r3, #12]
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	4618      	mov	r0, r3
 80091ee:	f7fa fc1a 	bl	8003a26 <lwip_htonl>
 80091f2:	4604      	mov	r4, r0
 80091f4:	6a3b      	ldr	r3, [r7, #32]
 80091f6:	68db      	ldr	r3, [r3, #12]
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	4618      	mov	r0, r3
 80091fc:	f7fa fc13 	bl	8003a26 <lwip_htonl>
 8009200:	4603      	mov	r3, r0
 8009202:	1ae3      	subs	r3, r4, r3
 8009204:	2b00      	cmp	r3, #0
 8009206:	da24      	bge.n	8009252 <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	336c      	adds	r3, #108	; 0x6c
 800920c:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800920e:	e002      	b.n	8009216 <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 8009210:	69fb      	ldr	r3, [r7, #28]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8009216:	69fb      	ldr	r3, [r7, #28]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d011      	beq.n	8009242 <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800921e:	69fb      	ldr	r3, [r7, #28]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	68db      	ldr	r3, [r3, #12]
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	4618      	mov	r0, r3
 8009228:	f7fa fbfd 	bl	8003a26 <lwip_htonl>
 800922c:	4604      	mov	r4, r0
 800922e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009230:	68db      	ldr	r3, [r3, #12]
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	4618      	mov	r0, r3
 8009236:	f7fa fbf6 	bl	8003a26 <lwip_htonl>
 800923a:	4603      	mov	r3, r0
 800923c:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800923e:	2b00      	cmp	r3, #0
 8009240:	dbe6      	blt.n	8009210 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 8009242:	69fb      	ldr	r3, [r7, #28]
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009248:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800924a:	69fb      	ldr	r3, [r7, #28]
 800924c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800924e:	601a      	str	r2, [r3, #0]
 8009250:	e009      	b.n	8009266 <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8009252:	6a3b      	ldr	r3, [r7, #32]
 8009254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009256:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8009258:	6a3b      	ldr	r3, [r7, #32]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	623b      	str	r3, [r7, #32]
 800925e:	e002      	b.n	8009266 <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8009260:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009262:	f7fc fea6 	bl	8005fb2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800926a:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800926c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926e:	2b00      	cmp	r3, #0
 8009270:	d015      	beq.n	800929e <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8009272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009274:	68db      	ldr	r3, [r3, #12]
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	4618      	mov	r0, r3
 800927a:	f7fa fbd4 	bl	8003a26 <lwip_htonl>
 800927e:	4602      	mov	r2, r0
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009284:	1ad3      	subs	r3, r2, r3
 8009286:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009288:	8912      	ldrh	r2, [r2, #8]
 800928a:	4413      	add	r3, r2
  while (seg != NULL &&
 800928c:	69ba      	ldr	r2, [r7, #24]
 800928e:	429a      	cmp	r2, r3
 8009290:	f4bf aedf 	bcs.w	8009052 <tcp_output+0x15e>
  }
output_done:
 8009294:	e003      	b.n	800929e <tcp_output+0x3aa>
    goto output_done;
 8009296:	bf00      	nop
 8009298:	e002      	b.n	80092a0 <tcp_output+0x3ac>
      break;
 800929a:	bf00      	nop
 800929c:	e000      	b.n	80092a0 <tcp_output+0x3ac>
output_done:
 800929e:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d103      	bne.n	80092b0 <tcp_output+0x3bc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2200      	movs	r2, #0
 80092ac:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	7e9b      	ldrb	r3, [r3, #26]
 80092b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092b8:	b2da      	uxtb	r2, r3
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 80092be:	2300      	movs	r3, #0
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3728      	adds	r7, #40	; 0x28
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bdb0      	pop	{r4, r5, r7, pc}

080092c8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80092c8:	b5b0      	push	{r4, r5, r7, lr}
 80092ca:	b08c      	sub	sp, #48	; 0x30
 80092cc:	af04      	add	r7, sp, #16
 80092ce:	60f8      	str	r0, [r7, #12]
 80092d0:	60b9      	str	r1, [r7, #8]
 80092d2:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	685b      	ldr	r3, [r3, #4]
 80092d8:	89db      	ldrh	r3, [r3, #14]
 80092da:	2b01      	cmp	r3, #1
 80092dc:	d001      	beq.n	80092e2 <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 80092de:	2300      	movs	r3, #0
 80092e0:	e08b      	b.n	80093fa <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	68dc      	ldr	r4, [r3, #12]
 80092ea:	4610      	mov	r0, r2
 80092ec:	f7fa fb9b 	bl	8003a26 <lwip_htonl>
 80092f0:	4603      	mov	r3, r0
 80092f2:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	68dc      	ldr	r4, [r3, #12]
 80092fc:	4610      	mov	r0, r2
 80092fe:	f7fa fb85 	bl	8003a0c <lwip_htons>
 8009302:	4603      	mov	r3, r0
 8009304:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800930a:	68ba      	ldr	r2, [r7, #8]
 800930c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800930e:	441a      	add	r2, r3
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	68db      	ldr	r3, [r3, #12]
 8009318:	3314      	adds	r3, #20
 800931a:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	7a9b      	ldrb	r3, [r3, #10]
 8009320:	f003 0301 	and.w	r3, r3, #1
 8009324:	2b00      	cmp	r3, #0
 8009326:	d014      	beq.n	8009352 <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	3304      	adds	r3, #4
 800932c:	4619      	mov	r1, r3
 800932e:	f44f 7006 	mov.w	r0, #536	; 0x218
 8009332:	f7fd f8a7 	bl	8006484 <tcp_eff_send_mss_impl>
 8009336:	4603      	mov	r3, r0
 8009338:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800933a:	8b7b      	ldrh	r3, [r7, #26]
 800933c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8009340:	4618      	mov	r0, r3
 8009342:	f7fa fb70 	bl	8003a26 <lwip_htonl>
 8009346:	4602      	mov	r2, r0
 8009348:	69fb      	ldr	r3, [r7, #28]
 800934a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800934c:	69fb      	ldr	r3, [r7, #28]
 800934e:	3304      	adds	r3, #4
 8009350:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8009358:	2b00      	cmp	r3, #0
 800935a:	da02      	bge.n	8009362 <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	2200      	movs	r2, #0
 8009360:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009366:	2b00      	cmp	r3, #0
 8009368:	d10c      	bne.n	8009384 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 800936a:	4b26      	ldr	r3, [pc, #152]	; (8009404 <tcp_output_segment+0x13c>)
 800936c:	681a      	ldr	r2, [r3, #0]
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	68db      	ldr	r3, [r3, #12]
 8009376:	685b      	ldr	r3, [r3, #4]
 8009378:	4618      	mov	r0, r3
 800937a:	f7fa fb54 	bl	8003a26 <lwip_htonl>
 800937e:	4602      	mov	r2, r0
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	68db      	ldr	r3, [r3, #12]
 8009388:	461a      	mov	r2, r3
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	1ad3      	subs	r3, r2, r3
 8009392:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	8959      	ldrh	r1, [r3, #10]
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	8b3a      	ldrh	r2, [r7, #24]
 80093a0:	1a8a      	subs	r2, r1, r2
 80093a2:	b292      	uxth	r2, r2
 80093a4:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	8919      	ldrh	r1, [r3, #8]
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	8b3a      	ldrh	r2, [r7, #24]
 80093b2:	1a8a      	subs	r2, r1, r2
 80093b4:	b292      	uxth	r2, r2
 80093b6:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	68fa      	ldr	r2, [r7, #12]
 80093be:	68d2      	ldr	r2, [r2, #12]
 80093c0:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	68db      	ldr	r3, [r3, #12]
 80093c6:	2200      	movs	r2, #0
 80093c8:	741a      	strb	r2, [r3, #16]
 80093ca:	2200      	movs	r2, #0
 80093cc:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	6858      	ldr	r0, [r3, #4]
 80093d2:	68b9      	ldr	r1, [r7, #8]
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	1d1c      	adds	r4, r3, #4
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	7a9d      	ldrb	r5, [r3, #10]
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	7a5b      	ldrb	r3, [r3, #9]
 80093e0:	687a      	ldr	r2, [r7, #4]
 80093e2:	9202      	str	r2, [sp, #8]
 80093e4:	2206      	movs	r2, #6
 80093e6:	9201      	str	r2, [sp, #4]
 80093e8:	9300      	str	r3, [sp, #0]
 80093ea:	462b      	mov	r3, r5
 80093ec:	4622      	mov	r2, r4
 80093ee:	f004 f897 	bl	800d520 <ip4_output_if>
 80093f2:	4603      	mov	r3, r0
 80093f4:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 80093f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3720      	adds	r7, #32
 80093fe:	46bd      	mov	sp, r7
 8009400:	bdb0      	pop	{r4, r5, r7, pc}
 8009402:	bf00      	nop
 8009404:	200068e8 	.word	0x200068e8

08009408 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b08c      	sub	sp, #48	; 0x30
 800940c:	af04      	add	r7, sp, #16
 800940e:	60f8      	str	r0, [r7, #12]
 8009410:	60b9      	str	r1, [r7, #8]
 8009412:	607a      	str	r2, [r7, #4]
 8009414:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8009416:	2200      	movs	r2, #0
 8009418:	2114      	movs	r1, #20
 800941a:	2001      	movs	r0, #1
 800941c:	f7fb f904 	bl	8004628 <pbuf_alloc>
 8009420:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 8009422:	69fb      	ldr	r3, [r7, #28]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d05b      	beq.n	80094e0 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8009428:	69fb      	ldr	r3, [r7, #28]
 800942a:	895b      	ldrh	r3, [r3, #10]
 800942c:	2b13      	cmp	r3, #19
 800942e:	d806      	bhi.n	800943e <tcp_rst+0x36>
 8009430:	4b2d      	ldr	r3, [pc, #180]	; (80094e8 <tcp_rst+0xe0>)
 8009432:	f240 524d 	movw	r2, #1357	; 0x54d
 8009436:	492d      	ldr	r1, [pc, #180]	; (80094ec <tcp_rst+0xe4>)
 8009438:	482d      	ldr	r0, [pc, #180]	; (80094f0 <tcp_rst+0xe8>)
 800943a:	f005 f871 	bl	800e520 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 800943e:	69fb      	ldr	r3, [r7, #28]
 8009440:	685b      	ldr	r3, [r3, #4]
 8009442:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 8009444:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009446:	4618      	mov	r0, r3
 8009448:	f7fa fae0 	bl	8003a0c <lwip_htons>
 800944c:	4603      	mov	r3, r0
 800944e:	461a      	mov	r2, r3
 8009450:	69bb      	ldr	r3, [r7, #24]
 8009452:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8009454:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009456:	4618      	mov	r0, r3
 8009458:	f7fa fad8 	bl	8003a0c <lwip_htons>
 800945c:	4603      	mov	r3, r0
 800945e:	461a      	mov	r2, r3
 8009460:	69bb      	ldr	r3, [r7, #24]
 8009462:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8009464:	68f8      	ldr	r0, [r7, #12]
 8009466:	f7fa fade 	bl	8003a26 <lwip_htonl>
 800946a:	4602      	mov	r2, r0
 800946c:	69bb      	ldr	r3, [r7, #24]
 800946e:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8009470:	68b8      	ldr	r0, [r7, #8]
 8009472:	f7fa fad8 	bl	8003a26 <lwip_htonl>
 8009476:	4602      	mov	r2, r0
 8009478:	69bb      	ldr	r3, [r7, #24]
 800947a:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 800947c:	f245 0014 	movw	r0, #20500	; 0x5014
 8009480:	f7fa fac4 	bl	8003a0c <lwip_htons>
 8009484:	4603      	mov	r3, r0
 8009486:	461a      	mov	r2, r3
 8009488:	69bb      	ldr	r3, [r7, #24]
 800948a:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 800948c:	69bb      	ldr	r3, [r7, #24]
 800948e:	2200      	movs	r2, #0
 8009490:	f042 0208 	orr.w	r2, r2, #8
 8009494:	739a      	strb	r2, [r3, #14]
 8009496:	2200      	movs	r2, #0
 8009498:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800949c:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 800949e:	69bb      	ldr	r3, [r7, #24]
 80094a0:	2200      	movs	r2, #0
 80094a2:	741a      	strb	r2, [r3, #16]
 80094a4:	2200      	movs	r2, #0
 80094a6:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 80094a8:	69bb      	ldr	r3, [r7, #24]
 80094aa:	2200      	movs	r2, #0
 80094ac:	749a      	strb	r2, [r3, #18]
 80094ae:	2200      	movs	r2, #0
 80094b0:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 80094b2:	6838      	ldr	r0, [r7, #0]
 80094b4:	f003 fe6e 	bl	800d194 <ip4_route>
 80094b8:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d00b      	beq.n	80094d8 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	9302      	str	r3, [sp, #8]
 80094c4:	2306      	movs	r3, #6
 80094c6:	9301      	str	r3, [sp, #4]
 80094c8:	2300      	movs	r3, #0
 80094ca:	9300      	str	r3, [sp, #0]
 80094cc:	23ff      	movs	r3, #255	; 0xff
 80094ce:	683a      	ldr	r2, [r7, #0]
 80094d0:	6879      	ldr	r1, [r7, #4]
 80094d2:	69f8      	ldr	r0, [r7, #28]
 80094d4:	f004 f824 	bl	800d520 <ip4_output_if>
  }
  pbuf_free(p);
 80094d8:	69f8      	ldr	r0, [r7, #28]
 80094da:	f7fb fc17 	bl	8004d0c <pbuf_free>
 80094de:	e000      	b.n	80094e2 <tcp_rst+0xda>
    return;
 80094e0:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80094e2:	3720      	adds	r7, #32
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}
 80094e8:	0801044c 	.word	0x0801044c
 80094ec:	08010480 	.word	0x08010480
 80094f0:	080104b0 	.word	0x080104b0

080094f4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b084      	sub	sp, #16
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009500:	2b00      	cmp	r3, #0
 8009502:	d029      	beq.n	8009558 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009508:	60fb      	str	r3, [r7, #12]
 800950a:	e002      	b.n	8009512 <tcp_rexmit_rto+0x1e>
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	60fb      	str	r3, [r7, #12]
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d1f8      	bne.n	800950c <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2200      	movs	r2, #0
 800952e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009536:	2bff      	cmp	r3, #255	; 0xff
 8009538:	d007      	beq.n	800954a <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009540:	3301      	adds	r3, #1
 8009542:	b2da      	uxtb	r2, r3
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2200      	movs	r2, #0
 800954e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f7ff fccf 	bl	8008ef4 <tcp_output>
 8009556:	e000      	b.n	800955a <tcp_rexmit_rto+0x66>
    return;
 8009558:	bf00      	nop
}
 800955a:	3710      	adds	r7, #16
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8009560:	b590      	push	{r4, r7, lr}
 8009562:	b085      	sub	sp, #20
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800956c:	2b00      	cmp	r3, #0
 800956e:	d043      	beq.n	80095f8 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009574:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	681a      	ldr	r2, [r3, #0]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	3368      	adds	r3, #104	; 0x68
 8009582:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8009584:	e002      	b.n	800958c <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d011      	beq.n	80095b8 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	68db      	ldr	r3, [r3, #12]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	4618      	mov	r0, r3
 800959e:	f7fa fa42 	bl	8003a26 <lwip_htonl>
 80095a2:	4604      	mov	r4, r0
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	68db      	ldr	r3, [r3, #12]
 80095a8:	685b      	ldr	r3, [r3, #4]
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7fa fa3b 	bl	8003a26 <lwip_htonl>
 80095b0:	4603      	mov	r3, r0
 80095b2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	dbe6      	blt.n	8009586 <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681a      	ldr	r2, [r3, #0]
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	68ba      	ldr	r2, [r7, #8]
 80095c4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d103      	bne.n	80095d6 <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2200      	movs	r2, #0
 80095d2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80095dc:	2bff      	cmp	r3, #255	; 0xff
 80095de:	d007      	beq.n	80095f0 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80095e6:	3301      	adds	r3, #1
 80095e8:	b2da      	uxtb	r2, r3
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2200      	movs	r2, #0
 80095f4:	635a      	str	r2, [r3, #52]	; 0x34
 80095f6:	e000      	b.n	80095fa <tcp_rexmit+0x9a>
    return;
 80095f8:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 80095fa:	3714      	adds	r7, #20
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd90      	pop	{r4, r7, pc}

08009600 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b082      	sub	sp, #8
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800960c:	2b00      	cmp	r3, #0
 800960e:	d04a      	beq.n	80096a6 <tcp_rexmit_fast+0xa6>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	7e9b      	ldrb	r3, [r3, #26]
 8009614:	f003 0304 	and.w	r3, r3, #4
 8009618:	2b00      	cmp	r3, #0
 800961a:	d144      	bne.n	80096a6 <tcp_rexmit_fast+0xa6>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f7ff ff9f 	bl	8009560 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800962e:	429a      	cmp	r2, r3
 8009630:	d207      	bcs.n	8009642 <tcp_rexmit_fast+0x42>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009638:	0fda      	lsrs	r2, r3, #31
 800963a:	4413      	add	r3, r2
 800963c:	105b      	asrs	r3, r3, #1
 800963e:	b29b      	uxth	r3, r3
 8009640:	e006      	b.n	8009650 <tcp_rexmit_fast+0x50>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009648:	0fda      	lsrs	r2, r3, #31
 800964a:	4413      	add	r3, r2
 800964c:	105b      	asrs	r3, r3, #1
 800964e:	b29b      	uxth	r3, r3
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800965c:	461a      	mov	r2, r3
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009662:	005b      	lsls	r3, r3, #1
 8009664:	429a      	cmp	r2, r3
 8009666:	d206      	bcs.n	8009676 <tcp_rexmit_fast+0x76>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800966c:	005b      	lsls	r3, r3, #1
 800966e:	b29a      	uxth	r2, r3
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009680:	4619      	mov	r1, r3
 8009682:	0049      	lsls	r1, r1, #1
 8009684:	440b      	add	r3, r1
 8009686:	b29b      	uxth	r3, r3
 8009688:	4413      	add	r3, r2
 800968a:	b29a      	uxth	r2, r3
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	7e9b      	ldrb	r3, [r3, #26]
 8009696:	f043 0304 	orr.w	r3, r3, #4
 800969a:	b2da      	uxtb	r2, r3
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2200      	movs	r2, #0
 80096a4:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 80096a6:	bf00      	nop
 80096a8:	3708      	adds	r7, #8
 80096aa:	46bd      	mov	sp, r7
 80096ac:	bd80      	pop	{r7, pc}

080096ae <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80096ae:	b580      	push	{r7, lr}
 80096b0:	b08a      	sub	sp, #40	; 0x28
 80096b2:	af04      	add	r7, sp, #16
 80096b4:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80096ba:	3b01      	subs	r3, #1
 80096bc:	4618      	mov	r0, r3
 80096be:	f7fa f9b2 	bl	8003a26 <lwip_htonl>
 80096c2:	4603      	mov	r3, r0
 80096c4:	2200      	movs	r2, #0
 80096c6:	2100      	movs	r1, #0
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f7ff f977 	bl	80089bc <tcp_output_alloc_header>
 80096ce:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d102      	bne.n	80096dc <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80096d6:	f04f 33ff 	mov.w	r3, #4294967295
 80096da:	e021      	b.n	8009720 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	3304      	adds	r3, #4
 80096e0:	4618      	mov	r0, r3
 80096e2:	f003 fd57 	bl	800d194 <ip4_route>
 80096e6:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d102      	bne.n	80096f4 <tcp_keepalive+0x46>
    err = ERR_RTE;
 80096ee:	23fc      	movs	r3, #252	; 0xfc
 80096f0:	75fb      	strb	r3, [r7, #23]
 80096f2:	e010      	b.n	8009716 <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 80096f4:	6879      	ldr	r1, [r7, #4]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	1d1a      	adds	r2, r3, #4
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	7a98      	ldrb	r0, [r3, #10]
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	9302      	str	r3, [sp, #8]
 8009702:	2306      	movs	r3, #6
 8009704:	9301      	str	r3, [sp, #4]
 8009706:	2300      	movs	r3, #0
 8009708:	9300      	str	r3, [sp, #0]
 800970a:	4603      	mov	r3, r0
 800970c:	6938      	ldr	r0, [r7, #16]
 800970e:	f003 ff07 	bl	800d520 <ip4_output_if>
 8009712:	4603      	mov	r3, r0
 8009714:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8009716:	6938      	ldr	r0, [r7, #16]
 8009718:	f7fb faf8 	bl	8004d0c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800971c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009720:	4618      	mov	r0, r3
 8009722:	3718      	adds	r7, #24
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}

08009728 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8009728:	b590      	push	{r4, r7, lr}
 800972a:	b08f      	sub	sp, #60	; 0x3c
 800972c:	af04      	add	r7, sp, #16
 800972e:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009734:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 8009736:	6a3b      	ldr	r3, [r7, #32]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d102      	bne.n	8009742 <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009740:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 8009742:	6a3b      	ldr	r3, [r7, #32]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d101      	bne.n	800974c <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 8009748:	2300      	movs	r3, #0
 800974a:	e085      	b.n	8009858 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800974c:	6a3b      	ldr	r3, [r7, #32]
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	899b      	ldrh	r3, [r3, #12]
 8009752:	b29b      	uxth	r3, r3
 8009754:	4618      	mov	r0, r3
 8009756:	f7fa f959 	bl	8003a0c <lwip_htons>
 800975a:	4603      	mov	r3, r0
 800975c:	f003 0301 	and.w	r3, r3, #1
 8009760:	2b00      	cmp	r3, #0
 8009762:	d005      	beq.n	8009770 <tcp_zero_window_probe+0x48>
 8009764:	6a3b      	ldr	r3, [r7, #32]
 8009766:	891b      	ldrh	r3, [r3, #8]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d101      	bne.n	8009770 <tcp_zero_window_probe+0x48>
 800976c:	2301      	movs	r3, #1
 800976e:	e000      	b.n	8009772 <tcp_zero_window_probe+0x4a>
 8009770:	2300      	movs	r3, #0
 8009772:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8009774:	7ffb      	ldrb	r3, [r7, #31]
 8009776:	2b00      	cmp	r3, #0
 8009778:	bf0c      	ite	eq
 800977a:	2301      	moveq	r3, #1
 800977c:	2300      	movne	r3, #0
 800977e:	b2db      	uxtb	r3, r3
 8009780:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8009782:	6a3b      	ldr	r3, [r7, #32]
 8009784:	68db      	ldr	r3, [r3, #12]
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	8bba      	ldrh	r2, [r7, #28]
 800978a:	2100      	movs	r1, #0
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f7ff f915 	bl	80089bc <tcp_output_alloc_header>
 8009792:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8009794:	69bb      	ldr	r3, [r7, #24]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d102      	bne.n	80097a0 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800979a:	f04f 33ff 	mov.w	r3, #4294967295
 800979e:	e05b      	b.n	8009858 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80097a0:	69bb      	ldr	r3, [r7, #24]
 80097a2:	685b      	ldr	r3, [r3, #4]
 80097a4:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80097a6:	7ffb      	ldrb	r3, [r7, #31]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d00e      	beq.n	80097ca <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	899b      	ldrh	r3, [r3, #12]
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80097b6:	b29c      	uxth	r4, r3
 80097b8:	2011      	movs	r0, #17
 80097ba:	f7fa f927 	bl	8003a0c <lwip_htons>
 80097be:	4603      	mov	r3, r0
 80097c0:	4323      	orrs	r3, r4
 80097c2:	b29a      	uxth	r2, r3
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	819a      	strh	r2, [r3, #12]
 80097c8:	e010      	b.n	80097ec <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80097ca:	69bb      	ldr	r3, [r7, #24]
 80097cc:	685b      	ldr	r3, [r3, #4]
 80097ce:	3314      	adds	r3, #20
 80097d0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80097d2:	6a3b      	ldr	r3, [r7, #32]
 80097d4:	6858      	ldr	r0, [r3, #4]
 80097d6:	6a3b      	ldr	r3, [r7, #32]
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	891a      	ldrh	r2, [r3, #8]
 80097dc:	6a3b      	ldr	r3, [r7, #32]
 80097de:	891b      	ldrh	r3, [r3, #8]
 80097e0:	1ad3      	subs	r3, r2, r3
 80097e2:	b29b      	uxth	r3, r3
 80097e4:	2201      	movs	r2, #1
 80097e6:	6939      	ldr	r1, [r7, #16]
 80097e8:	f7fb fc8e 	bl	8005108 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80097ec:	6a3b      	ldr	r3, [r7, #32]
 80097ee:	68db      	ldr	r3, [r3, #12]
 80097f0:	685b      	ldr	r3, [r3, #4]
 80097f2:	4618      	mov	r0, r3
 80097f4:	f7fa f917 	bl	8003a26 <lwip_htonl>
 80097f8:	4603      	mov	r3, r0
 80097fa:	3301      	adds	r3, #1
 80097fc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	1ad3      	subs	r3, r2, r3
 8009806:	2b00      	cmp	r3, #0
 8009808:	da02      	bge.n	8009810 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	68fa      	ldr	r2, [r7, #12]
 800980e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	3304      	adds	r3, #4
 8009814:	4618      	mov	r0, r3
 8009816:	f003 fcbd 	bl	800d194 <ip4_route>
 800981a:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d103      	bne.n	800982a <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 8009822:	23fc      	movs	r3, #252	; 0xfc
 8009824:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009828:	e011      	b.n	800984e <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800982a:	6879      	ldr	r1, [r7, #4]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	1d1a      	adds	r2, r3, #4
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	7a98      	ldrb	r0, [r3, #10]
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	9302      	str	r3, [sp, #8]
 8009838:	2306      	movs	r3, #6
 800983a:	9301      	str	r3, [sp, #4]
 800983c:	2300      	movs	r3, #0
 800983e:	9300      	str	r3, [sp, #0]
 8009840:	4603      	mov	r3, r0
 8009842:	69b8      	ldr	r0, [r7, #24]
 8009844:	f003 fe6c 	bl	800d520 <ip4_output_if>
 8009848:	4603      	mov	r3, r0
 800984a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800984e:	69b8      	ldr	r0, [r7, #24]
 8009850:	f7fb fa5c 	bl	8004d0c <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8009854:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009858:	4618      	mov	r0, r3
 800985a:	372c      	adds	r7, #44	; 0x2c
 800985c:	46bd      	mov	sp, r7
 800985e:	bd90      	pop	{r4, r7, pc}

08009860 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b082      	sub	sp, #8
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8009868:	f7fb fcce 	bl	8005208 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800986c:	4b0a      	ldr	r3, [pc, #40]	; (8009898 <tcpip_tcp_timer+0x38>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d103      	bne.n	800987c <tcpip_tcp_timer+0x1c>
 8009874:	4b09      	ldr	r3, [pc, #36]	; (800989c <tcpip_tcp_timer+0x3c>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d005      	beq.n	8009888 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800987c:	2200      	movs	r2, #0
 800987e:	4908      	ldr	r1, [pc, #32]	; (80098a0 <tcpip_tcp_timer+0x40>)
 8009880:	20fa      	movs	r0, #250	; 0xfa
 8009882:	f000 f86f 	bl	8009964 <sys_timeout>
 8009886:	e002      	b.n	800988e <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8009888:	4b06      	ldr	r3, [pc, #24]	; (80098a4 <tcpip_tcp_timer+0x44>)
 800988a:	2200      	movs	r2, #0
 800988c:	601a      	str	r2, [r3, #0]
  }
}
 800988e:	bf00      	nop
 8009890:	3708      	adds	r7, #8
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
 8009896:	bf00      	nop
 8009898:	200068e4 	.word	0x200068e4
 800989c:	200068f4 	.word	0x200068f4
 80098a0:	08009861 	.word	0x08009861
 80098a4:	20000110 	.word	0x20000110

080098a8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80098ac:	4b0a      	ldr	r3, [pc, #40]	; (80098d8 <tcp_timer_needed+0x30>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d10f      	bne.n	80098d4 <tcp_timer_needed+0x2c>
 80098b4:	4b09      	ldr	r3, [pc, #36]	; (80098dc <tcp_timer_needed+0x34>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d103      	bne.n	80098c4 <tcp_timer_needed+0x1c>
 80098bc:	4b08      	ldr	r3, [pc, #32]	; (80098e0 <tcp_timer_needed+0x38>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d007      	beq.n	80098d4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 80098c4:	4b04      	ldr	r3, [pc, #16]	; (80098d8 <tcp_timer_needed+0x30>)
 80098c6:	2201      	movs	r2, #1
 80098c8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80098ca:	2200      	movs	r2, #0
 80098cc:	4905      	ldr	r1, [pc, #20]	; (80098e4 <tcp_timer_needed+0x3c>)
 80098ce:	20fa      	movs	r0, #250	; 0xfa
 80098d0:	f000 f848 	bl	8009964 <sys_timeout>
  }
}
 80098d4:	bf00      	nop
 80098d6:	bd80      	pop	{r7, pc}
 80098d8:	20000110 	.word	0x20000110
 80098dc:	200068e4 	.word	0x200068e4
 80098e0:	200068f4 	.word	0x200068f4
 80098e4:	08009861 	.word	0x08009861

080098e8 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b084      	sub	sp, #16
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	687a      	ldr	r2, [r7, #4]
 8009900:	4903      	ldr	r1, [pc, #12]	; (8009910 <cyclic_timer+0x28>)
 8009902:	4618      	mov	r0, r3
 8009904:	f000 f82e 	bl	8009964 <sys_timeout>
}
 8009908:	bf00      	nop
 800990a:	3710      	adds	r7, #16
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}
 8009910:	080098e9 	.word	0x080098e9

08009914 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b082      	sub	sp, #8
 8009918:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800991a:	2301      	movs	r3, #1
 800991c:	607b      	str	r3, [r7, #4]
 800991e:	e00e      	b.n	800993e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 8009920:	4a0d      	ldr	r2, [pc, #52]	; (8009958 <sys_timeouts_init+0x44>)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	00db      	lsls	r3, r3, #3
 800992c:	4a0a      	ldr	r2, [pc, #40]	; (8009958 <sys_timeouts_init+0x44>)
 800992e:	4413      	add	r3, r2
 8009930:	461a      	mov	r2, r3
 8009932:	490a      	ldr	r1, [pc, #40]	; (800995c <sys_timeouts_init+0x48>)
 8009934:	f000 f816 	bl	8009964 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	3301      	adds	r3, #1
 800993c:	607b      	str	r3, [r7, #4]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2b04      	cmp	r3, #4
 8009942:	d9ed      	bls.n	8009920 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 8009944:	f7f9 ff9a 	bl	800387c <sys_now>
 8009948:	4602      	mov	r2, r0
 800994a:	4b05      	ldr	r3, [pc, #20]	; (8009960 <sys_timeouts_init+0x4c>)
 800994c:	601a      	str	r2, [r3, #0]
}
 800994e:	bf00      	nop
 8009950:	3708      	adds	r7, #8
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}
 8009956:	bf00      	nop
 8009958:	08011614 	.word	0x08011614
 800995c:	080098e9 	.word	0x080098e9
 8009960:	2000010c 	.word	0x2000010c

08009964 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b088      	sub	sp, #32
 8009968:	af00      	add	r7, sp, #0
 800996a:	60f8      	str	r0, [r7, #12]
 800996c:	60b9      	str	r1, [r7, #8]
 800996e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8009970:	2006      	movs	r0, #6
 8009972:	f7fa fbf3 	bl	800415c <memp_malloc>
 8009976:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 8009978:	697b      	ldr	r3, [r7, #20]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d10a      	bne.n	8009994 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	2b00      	cmp	r3, #0
 8009982:	f040 8084 	bne.w	8009a8e <sys_timeout+0x12a>
 8009986:	4b44      	ldr	r3, [pc, #272]	; (8009a98 <sys_timeout+0x134>)
 8009988:	22d4      	movs	r2, #212	; 0xd4
 800998a:	4944      	ldr	r1, [pc, #272]	; (8009a9c <sys_timeout+0x138>)
 800998c:	4844      	ldr	r0, [pc, #272]	; (8009aa0 <sys_timeout+0x13c>)
 800998e:	f004 fdc7 	bl	800e520 <iprintf>
    return;
 8009992:	e07c      	b.n	8009a8e <sys_timeout+0x12a>
  }

  now = sys_now();
 8009994:	f7f9 ff72 	bl	800387c <sys_now>
 8009998:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 800999a:	4b42      	ldr	r3, [pc, #264]	; (8009aa4 <sys_timeout+0x140>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d105      	bne.n	80099ae <sys_timeout+0x4a>
    diff = 0;
 80099a2:	2300      	movs	r3, #0
 80099a4:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 80099a6:	4a40      	ldr	r2, [pc, #256]	; (8009aa8 <sys_timeout+0x144>)
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	6013      	str	r3, [r2, #0]
 80099ac:	e004      	b.n	80099b8 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 80099ae:	4b3e      	ldr	r3, [pc, #248]	; (8009aa8 <sys_timeout+0x144>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	693a      	ldr	r2, [r7, #16]
 80099b4:	1ad3      	subs	r3, r2, r3
 80099b6:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	2200      	movs	r2, #0
 80099bc:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	68ba      	ldr	r2, [r7, #8]
 80099c2:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	687a      	ldr	r2, [r7, #4]
 80099c8:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 80099ca:	68fa      	ldr	r2, [r7, #12]
 80099cc:	69bb      	ldr	r3, [r7, #24]
 80099ce:	441a      	add	r2, r3
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80099d4:	4b33      	ldr	r3, [pc, #204]	; (8009aa4 <sys_timeout+0x140>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d103      	bne.n	80099e4 <sys_timeout+0x80>
    next_timeout = timeout;
 80099dc:	4a31      	ldr	r2, [pc, #196]	; (8009aa4 <sys_timeout+0x140>)
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	6013      	str	r3, [r2, #0]
    return;
 80099e2:	e055      	b.n	8009a90 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 80099e4:	4b2f      	ldr	r3, [pc, #188]	; (8009aa4 <sys_timeout+0x140>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	685b      	ldr	r3, [r3, #4]
 80099ea:	68fa      	ldr	r2, [r7, #12]
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d20f      	bcs.n	8009a10 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 80099f0:	4b2c      	ldr	r3, [pc, #176]	; (8009aa4 <sys_timeout+0x140>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	6859      	ldr	r1, [r3, #4]
 80099f6:	4b2b      	ldr	r3, [pc, #172]	; (8009aa4 <sys_timeout+0x140>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	68fa      	ldr	r2, [r7, #12]
 80099fc:	1a8a      	subs	r2, r1, r2
 80099fe:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 8009a00:	4b28      	ldr	r3, [pc, #160]	; (8009aa4 <sys_timeout+0x140>)
 8009a02:	681a      	ldr	r2, [r3, #0]
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8009a08:	4a26      	ldr	r2, [pc, #152]	; (8009aa4 <sys_timeout+0x140>)
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	6013      	str	r3, [r2, #0]
 8009a0e:	e03f      	b.n	8009a90 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8009a10:	4b24      	ldr	r3, [pc, #144]	; (8009aa4 <sys_timeout+0x140>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	61fb      	str	r3, [r7, #28]
 8009a16:	e036      	b.n	8009a86 <sys_timeout+0x122>
      timeout->time -= t->time;
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	685a      	ldr	r2, [r3, #4]
 8009a1c:	69fb      	ldr	r3, [r7, #28]
 8009a1e:	685b      	ldr	r3, [r3, #4]
 8009a20:	1ad2      	subs	r2, r2, r3
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 8009a26:	69fb      	ldr	r3, [r7, #28]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d006      	beq.n	8009a3c <sys_timeout+0xd8>
 8009a2e:	69fb      	ldr	r3, [r7, #28]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	685a      	ldr	r2, [r3, #4]
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d921      	bls.n	8009a80 <sys_timeout+0x11c>
        if (t->next != NULL) {
 8009a3c:	69fb      	ldr	r3, [r7, #28]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d009      	beq.n	8009a58 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 8009a44:	69fb      	ldr	r3, [r7, #28]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	6859      	ldr	r1, [r3, #4]
 8009a4a:	697b      	ldr	r3, [r7, #20]
 8009a4c:	685a      	ldr	r2, [r3, #4]
 8009a4e:	69fb      	ldr	r3, [r7, #28]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	1a8a      	subs	r2, r1, r2
 8009a54:	605a      	str	r2, [r3, #4]
 8009a56:	e00b      	b.n	8009a70 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	68fa      	ldr	r2, [r7, #12]
 8009a5e:	429a      	cmp	r2, r3
 8009a60:	d206      	bcs.n	8009a70 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 8009a62:	4b10      	ldr	r3, [pc, #64]	; (8009aa4 <sys_timeout+0x140>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	685a      	ldr	r2, [r3, #4]
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	441a      	add	r2, r3
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 8009a70:	69fb      	ldr	r3, [r7, #28]
 8009a72:	681a      	ldr	r2, [r3, #0]
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8009a78:	69fb      	ldr	r3, [r7, #28]
 8009a7a:	697a      	ldr	r2, [r7, #20]
 8009a7c:	601a      	str	r2, [r3, #0]
        break;
 8009a7e:	e007      	b.n	8009a90 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 8009a80:	69fb      	ldr	r3, [r7, #28]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	61fb      	str	r3, [r7, #28]
 8009a86:	69fb      	ldr	r3, [r7, #28]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d1c5      	bne.n	8009a18 <sys_timeout+0xb4>
 8009a8c:	e000      	b.n	8009a90 <sys_timeout+0x12c>
    return;
 8009a8e:	bf00      	nop
      }
    }
  }
}
 8009a90:	3720      	adds	r7, #32
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}
 8009a96:	bf00      	nop
 8009a98:	08010890 	.word	0x08010890
 8009a9c:	080108c4 	.word	0x080108c4
 8009aa0:	08010904 	.word	0x08010904
 8009aa4:	20000108 	.word	0x20000108
 8009aa8:	2000010c 	.word	0x2000010c

08009aac <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b086      	sub	sp, #24
 8009ab0:	af00      	add	r7, sp, #0
  if (next_timeout) {
 8009ab2:	4b24      	ldr	r3, [pc, #144]	; (8009b44 <sys_check_timeouts+0x98>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d040      	beq.n	8009b3c <sys_check_timeouts+0x90>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 8009aba:	f7f9 fedf 	bl	800387c <sys_now>
 8009abe:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 8009ac0:	4b21      	ldr	r3, [pc, #132]	; (8009b48 <sys_check_timeouts+0x9c>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	68fa      	ldr	r2, [r7, #12]
 8009ac6:	1ad3      	subs	r3, r2, r3
 8009ac8:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
 8009aca:	4b20      	ldr	r3, [pc, #128]	; (8009b4c <sys_check_timeouts+0xa0>)
 8009acc:	781b      	ldrb	r3, [r3, #0]
 8009ace:	b2db      	uxtb	r3, r3
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d001      	beq.n	8009ad8 <sys_check_timeouts+0x2c>
 8009ad4:	f7fa fd78 	bl	80045c8 <pbuf_free_ooseq>
      had_one = 0;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 8009adc:	4b19      	ldr	r3, [pc, #100]	; (8009b44 <sys_check_timeouts+0x98>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d026      	beq.n	8009b36 <sys_check_timeouts+0x8a>
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	685b      	ldr	r3, [r3, #4]
 8009aec:	697a      	ldr	r2, [r7, #20]
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d321      	bcc.n	8009b36 <sys_check_timeouts+0x8a>
        /* timeout has expired */
        had_one = 1;
 8009af2:	2301      	movs	r3, #1
 8009af4:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	685a      	ldr	r2, [r3, #4]
 8009afa:	4b13      	ldr	r3, [pc, #76]	; (8009b48 <sys_check_timeouts+0x9c>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	4413      	add	r3, r2
 8009b00:	4a11      	ldr	r2, [pc, #68]	; (8009b48 <sys_check_timeouts+0x9c>)
 8009b02:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	685b      	ldr	r3, [r3, #4]
 8009b08:	697a      	ldr	r2, [r7, #20]
 8009b0a:	1ad3      	subs	r3, r2, r3
 8009b0c:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4a0c      	ldr	r2, [pc, #48]	; (8009b44 <sys_check_timeouts+0x98>)
 8009b14:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	689b      	ldr	r3, [r3, #8]
 8009b1a:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	68db      	ldr	r3, [r3, #12]
 8009b20:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8009b22:	68b9      	ldr	r1, [r7, #8]
 8009b24:	2006      	movs	r0, #6
 8009b26:	f7fa fb65 	bl	80041f4 <memp_free>
        if (handler != NULL) {
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d002      	beq.n	8009b36 <sys_check_timeouts+0x8a>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
#endif /* !NO_SYS */
          handler(arg);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6838      	ldr	r0, [r7, #0]
 8009b34:	4798      	blx	r3
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 8009b36:	7cfb      	ldrb	r3, [r7, #19]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d1c6      	bne.n	8009aca <sys_check_timeouts+0x1e>
  }
}
 8009b3c:	bf00      	nop
 8009b3e:	3718      	adds	r7, #24
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}
 8009b44:	20000108 	.word	0x20000108
 8009b48:	2000010c 	.word	0x2000010c
 8009b4c:	200068dc 	.word	0x200068dc

08009b50 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8009b50:	b480      	push	{r7}
 8009b52:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8009b54:	bf00      	nop
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bc80      	pop	{r7}
 8009b5a:	4770      	bx	lr

08009b5c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b083      	sub	sp, #12
 8009b60:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8009b62:	2300      	movs	r3, #0
 8009b64:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8009b66:	4b17      	ldr	r3, [pc, #92]	; (8009bc4 <udp_new_port+0x68>)
 8009b68:	881b      	ldrh	r3, [r3, #0]
 8009b6a:	1c5a      	adds	r2, r3, #1
 8009b6c:	b291      	uxth	r1, r2
 8009b6e:	4a15      	ldr	r2, [pc, #84]	; (8009bc4 <udp_new_port+0x68>)
 8009b70:	8011      	strh	r1, [r2, #0]
 8009b72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d103      	bne.n	8009b82 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8009b7a:	4b12      	ldr	r3, [pc, #72]	; (8009bc4 <udp_new_port+0x68>)
 8009b7c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8009b80:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8009b82:	4b11      	ldr	r3, [pc, #68]	; (8009bc8 <udp_new_port+0x6c>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	603b      	str	r3, [r7, #0]
 8009b88:	e011      	b.n	8009bae <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	8a5a      	ldrh	r2, [r3, #18]
 8009b8e:	4b0d      	ldr	r3, [pc, #52]	; (8009bc4 <udp_new_port+0x68>)
 8009b90:	881b      	ldrh	r3, [r3, #0]
 8009b92:	429a      	cmp	r2, r3
 8009b94:	d108      	bne.n	8009ba8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8009b96:	88fb      	ldrh	r3, [r7, #6]
 8009b98:	3301      	adds	r3, #1
 8009b9a:	80fb      	strh	r3, [r7, #6]
 8009b9c:	88fb      	ldrh	r3, [r7, #6]
 8009b9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ba2:	d3e0      	bcc.n	8009b66 <udp_new_port+0xa>
        return 0;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	e007      	b.n	8009bb8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	68db      	ldr	r3, [r3, #12]
 8009bac:	603b      	str	r3, [r7, #0]
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d1ea      	bne.n	8009b8a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8009bb4:	4b03      	ldr	r3, [pc, #12]	; (8009bc4 <udp_new_port+0x68>)
 8009bb6:	881b      	ldrh	r3, [r3, #0]
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	370c      	adds	r7, #12
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bc80      	pop	{r7}
 8009bc0:	4770      	bx	lr
 8009bc2:	bf00      	nop
 8009bc4:	20000010 	.word	0x20000010
 8009bc8:	200068fc 	.word	0x200068fc

08009bcc <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b085      	sub	sp, #20
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	60f8      	str	r0, [r7, #12]
 8009bd4:	60b9      	str	r1, [r7, #8]
 8009bd6:	4613      	mov	r3, r2
 8009bd8:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8009bda:	79fb      	ldrb	r3, [r7, #7]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d018      	beq.n	8009c12 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d013      	beq.n	8009c0e <udp_input_local_match+0x42>
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d00f      	beq.n	8009c0e <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8009bee:	4b13      	ldr	r3, [pc, #76]	; (8009c3c <udp_input_local_match+0x70>)
 8009bf0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8009bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bf6:	d00a      	beq.n	8009c0e <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681a      	ldr	r2, [r3, #0]
 8009bfc:	4b0f      	ldr	r3, [pc, #60]	; (8009c3c <udp_input_local_match+0x70>)
 8009bfe:	695b      	ldr	r3, [r3, #20]
 8009c00:	405a      	eors	r2, r3
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	3308      	adds	r3, #8
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d110      	bne.n	8009c30 <udp_input_local_match+0x64>
          return 1;
 8009c0e:	2301      	movs	r3, #1
 8009c10:	e00f      	b.n	8009c32 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d009      	beq.n	8009c2c <udp_input_local_match+0x60>
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d005      	beq.n	8009c2c <udp_input_local_match+0x60>
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681a      	ldr	r2, [r3, #0]
 8009c24:	4b05      	ldr	r3, [pc, #20]	; (8009c3c <udp_input_local_match+0x70>)
 8009c26:	695b      	ldr	r3, [r3, #20]
 8009c28:	429a      	cmp	r2, r3
 8009c2a:	d101      	bne.n	8009c30 <udp_input_local_match+0x64>
      return 1;
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	e000      	b.n	8009c32 <udp_input_local_match+0x66>
    }
  }

  return 0;
 8009c30:	2300      	movs	r3, #0
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3714      	adds	r7, #20
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bc80      	pop	{r7}
 8009c3a:	4770      	bx	lr
 8009c3c:	20003394 	.word	0x20003394

08009c40 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8009c40:	b590      	push	{r4, r7, lr}
 8009c42:	b08d      	sub	sp, #52	; 0x34
 8009c44:	af02      	add	r7, sp, #8
 8009c46:	6078      	str	r0, [r7, #4]
 8009c48:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	895b      	ldrh	r3, [r3, #10]
 8009c52:	2b07      	cmp	r3, #7
 8009c54:	d803      	bhi.n	8009c5e <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f7fb f858 	bl	8004d0c <pbuf_free>
    goto end;
 8009c5c:	e0c6      	b.n	8009dec <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	685b      	ldr	r3, [r3, #4]
 8009c62:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8009c64:	4b63      	ldr	r3, [pc, #396]	; (8009df4 <udp_input+0x1b4>)
 8009c66:	695a      	ldr	r2, [r3, #20]
 8009c68:	4b62      	ldr	r3, [pc, #392]	; (8009df4 <udp_input+0x1b4>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	4619      	mov	r1, r3
 8009c6e:	4610      	mov	r0, r2
 8009c70:	f003 fd28 	bl	800d6c4 <ip4_addr_isbroadcast_u32>
 8009c74:	4603      	mov	r3, r0
 8009c76:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	881b      	ldrh	r3, [r3, #0]
 8009c7c:	b29b      	uxth	r3, r3
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f7f9 fec4 	bl	8003a0c <lwip_htons>
 8009c84:	4603      	mov	r3, r0
 8009c86:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	885b      	ldrh	r3, [r3, #2]
 8009c8c:	b29b      	uxth	r3, r3
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f7f9 febc 	bl	8003a0c <lwip_htons>
 8009c94:	4603      	mov	r3, r0
 8009c96:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8009ca4:	4b54      	ldr	r3, [pc, #336]	; (8009df8 <udp_input+0x1b8>)
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	627b      	str	r3, [r7, #36]	; 0x24
 8009caa:	e03b      	b.n	8009d24 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8009cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cae:	8a5b      	ldrh	r3, [r3, #18]
 8009cb0:	89fa      	ldrh	r2, [r7, #14]
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	d131      	bne.n	8009d1a <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8009cb6:	7cfb      	ldrb	r3, [r7, #19]
 8009cb8:	461a      	mov	r2, r3
 8009cba:	6839      	ldr	r1, [r7, #0]
 8009cbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009cbe:	f7ff ff85 	bl	8009bcc <udp_input_local_match>
 8009cc2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d028      	beq.n	8009d1a <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 8009cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cca:	7c1b      	ldrb	r3, [r3, #16]
 8009ccc:	f003 0304 	and.w	r3, r3, #4
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d104      	bne.n	8009cde <udp_input+0x9e>
 8009cd4:	69fb      	ldr	r3, [r7, #28]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d101      	bne.n	8009cde <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 8009cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cdc:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8009cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce0:	8a9b      	ldrh	r3, [r3, #20]
 8009ce2:	8a3a      	ldrh	r2, [r7, #16]
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d118      	bne.n	8009d1a <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8009ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cea:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d005      	beq.n	8009cfc <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8009cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf2:	685a      	ldr	r2, [r3, #4]
 8009cf4:	4b3f      	ldr	r3, [pc, #252]	; (8009df4 <udp_input+0x1b4>)
 8009cf6:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d10e      	bne.n	8009d1a <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8009cfc:	6a3b      	ldr	r3, [r7, #32]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d014      	beq.n	8009d2c <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8009d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d04:	68da      	ldr	r2, [r3, #12]
 8009d06:	6a3b      	ldr	r3, [r7, #32]
 8009d08:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8009d0a:	4b3b      	ldr	r3, [pc, #236]	; (8009df8 <udp_input+0x1b8>)
 8009d0c:	681a      	ldr	r2, [r3, #0]
 8009d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d10:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8009d12:	4a39      	ldr	r2, [pc, #228]	; (8009df8 <udp_input+0x1b8>)
 8009d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d16:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8009d18:	e008      	b.n	8009d2c <udp_input+0xec>
      }
    }

    prev = pcb;
 8009d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d1c:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8009d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d20:	68db      	ldr	r3, [r3, #12]
 8009d22:	627b      	str	r3, [r7, #36]	; 0x24
 8009d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d1c0      	bne.n	8009cac <udp_input+0x6c>
 8009d2a:	e000      	b.n	8009d2e <udp_input+0xee>
        break;
 8009d2c:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8009d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d101      	bne.n	8009d38 <udp_input+0xf8>
    pcb = uncon_pcb;
 8009d34:	69fb      	ldr	r3, [r7, #28]
 8009d36:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8009d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d002      	beq.n	8009d44 <udp_input+0x104>
    for_us = 1;
 8009d3e:	2301      	movs	r3, #1
 8009d40:	76fb      	strb	r3, [r7, #27]
 8009d42:	e00a      	b.n	8009d5a <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	3304      	adds	r3, #4
 8009d48:	681a      	ldr	r2, [r3, #0]
 8009d4a:	4b2a      	ldr	r3, [pc, #168]	; (8009df4 <udp_input+0x1b4>)
 8009d4c:	695b      	ldr	r3, [r3, #20]
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	bf0c      	ite	eq
 8009d52:	2301      	moveq	r3, #1
 8009d54:	2300      	movne	r3, #0
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8009d5a:	7efb      	ldrb	r3, [r7, #27]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d042      	beq.n	8009de6 <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 8009d60:	f06f 0107 	mvn.w	r1, #7
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f7fa ffad 	bl	8004cc4 <pbuf_header>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d00a      	beq.n	8009d86 <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 8009d70:	4b22      	ldr	r3, [pc, #136]	; (8009dfc <udp_input+0x1bc>)
 8009d72:	f240 1255 	movw	r2, #341	; 0x155
 8009d76:	4922      	ldr	r1, [pc, #136]	; (8009e00 <udp_input+0x1c0>)
 8009d78:	4822      	ldr	r0, [pc, #136]	; (8009e04 <udp_input+0x1c4>)
 8009d7a:	f004 fbd1 	bl	800e520 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f7fa ffc4 	bl	8004d0c <pbuf_free>
      goto end;
 8009d84:	e032      	b.n	8009dec <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 8009d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d012      	beq.n	8009db2 <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8009d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d8e:	699b      	ldr	r3, [r3, #24]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d00a      	beq.n	8009daa <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8009d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d96:	699c      	ldr	r4, [r3, #24]
 8009d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d9a:	69d8      	ldr	r0, [r3, #28]
 8009d9c:	8a3b      	ldrh	r3, [r7, #16]
 8009d9e:	9300      	str	r3, [sp, #0]
 8009da0:	4b19      	ldr	r3, [pc, #100]	; (8009e08 <udp_input+0x1c8>)
 8009da2:	687a      	ldr	r2, [r7, #4]
 8009da4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009da6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8009da8:	e021      	b.n	8009dee <udp_input+0x1ae>
        pbuf_free(p);
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f7fa ffae 	bl	8004d0c <pbuf_free>
        goto end;
 8009db0:	e01c      	b.n	8009dec <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8009db2:	7cfb      	ldrb	r3, [r7, #19]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d112      	bne.n	8009dde <udp_input+0x19e>
 8009db8:	4b0e      	ldr	r3, [pc, #56]	; (8009df4 <udp_input+0x1b4>)
 8009dba:	695b      	ldr	r3, [r3, #20]
 8009dbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009dc0:	2be0      	cmp	r3, #224	; 0xe0
 8009dc2:	d00c      	beq.n	8009dde <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8009dc4:	4b0b      	ldr	r3, [pc, #44]	; (8009df4 <udp_input+0x1b4>)
 8009dc6:	899b      	ldrh	r3, [r3, #12]
 8009dc8:	3308      	adds	r3, #8
 8009dca:	b29b      	uxth	r3, r3
 8009dcc:	b21b      	sxth	r3, r3
 8009dce:	4619      	mov	r1, r3
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f7fa ff89 	bl	8004ce8 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8009dd6:	2103      	movs	r1, #3
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f003 f953 	bl	800d084 <icmp_dest_unreach>
      pbuf_free(p);
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f7fa ff94 	bl	8004d0c <pbuf_free>
  return;
 8009de4:	e003      	b.n	8009dee <udp_input+0x1ae>
    pbuf_free(p);
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f7fa ff90 	bl	8004d0c <pbuf_free>
  return;
 8009dec:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8009dee:	372c      	adds	r7, #44	; 0x2c
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd90      	pop	{r4, r7, pc}
 8009df4:	20003394 	.word	0x20003394
 8009df8:	200068fc 	.word	0x200068fc
 8009dfc:	0801092c 	.word	0x0801092c
 8009e00:	0801095c 	.word	0x0801095c
 8009e04:	08010970 	.word	0x08010970
 8009e08:	200033a4 	.word	0x200033a4

08009e0c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b088      	sub	sp, #32
 8009e10:	af02      	add	r7, sp, #8
 8009e12:	60f8      	str	r0, [r7, #12]
 8009e14:	60b9      	str	r1, [r7, #8]
 8009e16:	607a      	str	r2, [r7, #4]
 8009e18:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d002      	beq.n	8009e26 <udp_sendto_if+0x1a>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d102      	bne.n	8009e2c <udp_sendto_if+0x20>
    return ERR_VAL;
 8009e26:	f06f 0305 	mvn.w	r3, #5
 8009e2a:	e028      	b.n	8009e7e <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d009      	beq.n	8009e46 <udp_sendto_if+0x3a>
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d005      	beq.n	8009e46 <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8009e42:	2be0      	cmp	r3, #224	; 0xe0
 8009e44:	d103      	bne.n	8009e4e <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 8009e46:	6a3b      	ldr	r3, [r7, #32]
 8009e48:	3304      	adds	r3, #4
 8009e4a:	617b      	str	r3, [r7, #20]
 8009e4c:	e00b      	b.n	8009e66 <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681a      	ldr	r2, [r3, #0]
 8009e52:	6a3b      	ldr	r3, [r7, #32]
 8009e54:	3304      	adds	r3, #4
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d002      	beq.n	8009e62 <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 8009e5c:	f06f 0303 	mvn.w	r3, #3
 8009e60:	e00d      	b.n	8009e7e <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8009e66:	887a      	ldrh	r2, [r7, #2]
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	9301      	str	r3, [sp, #4]
 8009e6c:	6a3b      	ldr	r3, [r7, #32]
 8009e6e:	9300      	str	r3, [sp, #0]
 8009e70:	4613      	mov	r3, r2
 8009e72:	687a      	ldr	r2, [r7, #4]
 8009e74:	68b9      	ldr	r1, [r7, #8]
 8009e76:	68f8      	ldr	r0, [r7, #12]
 8009e78:	f000 f806 	bl	8009e88 <udp_sendto_if_src>
 8009e7c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3718      	adds	r7, #24
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}
	...

08009e88 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b08c      	sub	sp, #48	; 0x30
 8009e8c:	af04      	add	r7, sp, #16
 8009e8e:	60f8      	str	r0, [r7, #12]
 8009e90:	60b9      	str	r1, [r7, #8]
 8009e92:	607a      	str	r2, [r7, #4]
 8009e94:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d002      	beq.n	8009ea2 <udp_sendto_if_src+0x1a>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d102      	bne.n	8009ea8 <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 8009ea2:	f06f 0305 	mvn.w	r3, #5
 8009ea6:	e07e      	b.n	8009fa6 <udp_sendto_if_src+0x11e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	8a5b      	ldrh	r3, [r3, #18]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d10f      	bne.n	8009ed0 <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8009eb0:	68f9      	ldr	r1, [r7, #12]
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	8a5b      	ldrh	r3, [r3, #18]
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	68f8      	ldr	r0, [r7, #12]
 8009eba:	f000 f87f 	bl	8009fbc <udp_bind>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8009ec2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d002      	beq.n	8009ed0 <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8009eca:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009ece:	e06a      	b.n	8009fa6 <udp_sendto_if_src+0x11e>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 8009ed0:	2108      	movs	r1, #8
 8009ed2:	68b8      	ldr	r0, [r7, #8]
 8009ed4:	f7fa fef6 	bl	8004cc4 <pbuf_header>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d014      	beq.n	8009f08 <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8009ede:	2200      	movs	r2, #0
 8009ee0:	2108      	movs	r1, #8
 8009ee2:	2001      	movs	r0, #1
 8009ee4:	f7fa fba0 	bl	8004628 <pbuf_alloc>
 8009ee8:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8009eea:	69fb      	ldr	r3, [r7, #28]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d102      	bne.n	8009ef6 <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8009ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ef4:	e057      	b.n	8009fa6 <udp_sendto_if_src+0x11e>
    }
    if (p->tot_len != 0) {
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	891b      	ldrh	r3, [r3, #8]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d006      	beq.n	8009f0c <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8009efe:	68b9      	ldr	r1, [r7, #8]
 8009f00:	69f8      	ldr	r0, [r7, #28]
 8009f02:	f7fb f825 	bl	8004f50 <pbuf_chain>
 8009f06:	e001      	b.n	8009f0c <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8009f0c:	69fb      	ldr	r3, [r7, #28]
 8009f0e:	895b      	ldrh	r3, [r3, #10]
 8009f10:	2b07      	cmp	r3, #7
 8009f12:	d806      	bhi.n	8009f22 <udp_sendto_if_src+0x9a>
 8009f14:	4b26      	ldr	r3, [pc, #152]	; (8009fb0 <udp_sendto_if_src+0x128>)
 8009f16:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8009f1a:	4926      	ldr	r1, [pc, #152]	; (8009fb4 <udp_sendto_if_src+0x12c>)
 8009f1c:	4826      	ldr	r0, [pc, #152]	; (8009fb8 <udp_sendto_if_src+0x130>)
 8009f1e:	f004 faff 	bl	800e520 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8009f22:	69fb      	ldr	r3, [r7, #28]
 8009f24:	685b      	ldr	r3, [r3, #4]
 8009f26:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	8a5b      	ldrh	r3, [r3, #18]
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f7f9 fd6d 	bl	8003a0c <lwip_htons>
 8009f32:	4603      	mov	r3, r0
 8009f34:	461a      	mov	r2, r3
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8009f3a:	887b      	ldrh	r3, [r7, #2]
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f7f9 fd65 	bl	8003a0c <lwip_htons>
 8009f42:	4603      	mov	r3, r0
 8009f44:	461a      	mov	r2, r3
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8009f4a:	697b      	ldr	r3, [r7, #20]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	719a      	strb	r2, [r3, #6]
 8009f50:	2200      	movs	r2, #0
 8009f52:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8009f54:	69fb      	ldr	r3, [r7, #28]
 8009f56:	891b      	ldrh	r3, [r3, #8]
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f7f9 fd57 	bl	8003a0c <lwip_htons>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	461a      	mov	r2, r3
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8009f66:	2311      	movs	r3, #17
 8009f68:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	7a9b      	ldrb	r3, [r3, #10]
 8009f6e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	7a5b      	ldrb	r3, [r3, #9]
 8009f74:	7cb9      	ldrb	r1, [r7, #18]
 8009f76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f78:	9202      	str	r2, [sp, #8]
 8009f7a:	7cfa      	ldrb	r2, [r7, #19]
 8009f7c:	9201      	str	r2, [sp, #4]
 8009f7e:	9300      	str	r3, [sp, #0]
 8009f80:	460b      	mov	r3, r1
 8009f82:	687a      	ldr	r2, [r7, #4]
 8009f84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009f86:	69f8      	ldr	r0, [r7, #28]
 8009f88:	f003 faf4 	bl	800d574 <ip4_output_if_src>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8009f90:	69fa      	ldr	r2, [r7, #28]
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d004      	beq.n	8009fa2 <udp_sendto_if_src+0x11a>
    /* free the header pbuf */
    pbuf_free(q);
 8009f98:	69f8      	ldr	r0, [r7, #28]
 8009f9a:	f7fa feb7 	bl	8004d0c <pbuf_free>
    q = NULL;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8009fa2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3720      	adds	r7, #32
 8009faa:	46bd      	mov	sp, r7
 8009fac:	bd80      	pop	{r7, pc}
 8009fae:	bf00      	nop
 8009fb0:	0801092c 	.word	0x0801092c
 8009fb4:	08010998 	.word	0x08010998
 8009fb8:	08010970 	.word	0x08010970

08009fbc <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b086      	sub	sp, #24
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	60f8      	str	r0, [r7, #12]
 8009fc4:	60b9      	str	r1, [r7, #8]
 8009fc6:	4613      	mov	r3, r2
 8009fc8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d101      	bne.n	8009fd4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8009fd0:	4b30      	ldr	r3, [pc, #192]	; (800a094 <udp_bind+0xd8>)
 8009fd2:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d002      	beq.n	8009fe0 <udp_bind+0x24>
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d102      	bne.n	8009fe6 <udp_bind+0x2a>
    return ERR_VAL;
 8009fe0:	f06f 0305 	mvn.w	r3, #5
 8009fe4:	e052      	b.n	800a08c <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8009fea:	4b2b      	ldr	r3, [pc, #172]	; (800a098 <udp_bind+0xdc>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	617b      	str	r3, [r7, #20]
 8009ff0:	e009      	b.n	800a006 <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8009ff2:	68fa      	ldr	r2, [r7, #12]
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	429a      	cmp	r2, r3
 8009ff8:	d102      	bne.n	800a000 <udp_bind+0x44>
      rebind = 1;
 8009ffa:	2301      	movs	r3, #1
 8009ffc:	74fb      	strb	r3, [r7, #19]
      break;
 8009ffe:	e005      	b.n	800a00c <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	68db      	ldr	r3, [r3, #12]
 800a004:	617b      	str	r3, [r7, #20]
 800a006:	697b      	ldr	r3, [r7, #20]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d1f2      	bne.n	8009ff2 <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 800a00c:	88fb      	ldrh	r3, [r7, #6]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d109      	bne.n	800a026 <udp_bind+0x6a>
    port = udp_new_port();
 800a012:	f7ff fda3 	bl	8009b5c <udp_new_port>
 800a016:	4603      	mov	r3, r0
 800a018:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800a01a:	88fb      	ldrh	r3, [r7, #6]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d11e      	bne.n	800a05e <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800a020:	f06f 0307 	mvn.w	r3, #7
 800a024:	e032      	b.n	800a08c <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800a026:	4b1c      	ldr	r3, [pc, #112]	; (800a098 <udp_bind+0xdc>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	617b      	str	r3, [r7, #20]
 800a02c:	e014      	b.n	800a058 <udp_bind+0x9c>
      if (pcb != ipcb) {
 800a02e:	68fa      	ldr	r2, [r7, #12]
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	429a      	cmp	r2, r3
 800a034:	d00d      	beq.n	800a052 <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	8a5b      	ldrh	r3, [r3, #18]
 800a03a:	88fa      	ldrh	r2, [r7, #6]
 800a03c:	429a      	cmp	r2, r3
 800a03e:	d108      	bne.n	800a052 <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	681a      	ldr	r2, [r3, #0]
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800a048:	429a      	cmp	r2, r3
 800a04a:	d102      	bne.n	800a052 <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800a04c:	f06f 0307 	mvn.w	r3, #7
 800a050:	e01c      	b.n	800a08c <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	68db      	ldr	r3, [r3, #12]
 800a056:	617b      	str	r3, [r7, #20]
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d1e7      	bne.n	800a02e <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d002      	beq.n	800a06a <udp_bind+0xae>
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	e000      	b.n	800a06c <udp_bind+0xb0>
 800a06a:	2300      	movs	r3, #0
 800a06c:	68fa      	ldr	r2, [r7, #12]
 800a06e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	88fa      	ldrh	r2, [r7, #6]
 800a074:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800a076:	7cfb      	ldrb	r3, [r7, #19]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d106      	bne.n	800a08a <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800a07c:	4b06      	ldr	r3, [pc, #24]	; (800a098 <udp_bind+0xdc>)
 800a07e:	681a      	ldr	r2, [r3, #0]
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800a084:	4a04      	ldr	r2, [pc, #16]	; (800a098 <udp_bind+0xdc>)
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800a08a:	2300      	movs	r3, #0
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	3718      	adds	r7, #24
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}
 800a094:	0801163c 	.word	0x0801163c
 800a098:	200068fc 	.word	0x200068fc

0800a09c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b086      	sub	sp, #24
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	60f8      	str	r0, [r7, #12]
 800a0a4:	60b9      	str	r1, [r7, #8]
 800a0a6:	4613      	mov	r3, r2
 800a0a8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d002      	beq.n	800a0b6 <udp_connect+0x1a>
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d102      	bne.n	800a0bc <udp_connect+0x20>
    return ERR_VAL;
 800a0b6:	f06f 0305 	mvn.w	r3, #5
 800a0ba:	e03e      	b.n	800a13a <udp_connect+0x9e>
  }

  if (pcb->local_port == 0) {
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	8a5b      	ldrh	r3, [r3, #18]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d10f      	bne.n	800a0e4 <udp_connect+0x48>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800a0c4:	68f9      	ldr	r1, [r7, #12]
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	8a5b      	ldrh	r3, [r3, #18]
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	68f8      	ldr	r0, [r7, #12]
 800a0ce:	f7ff ff75 	bl	8009fbc <udp_bind>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800a0d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d002      	beq.n	800a0e4 <udp_connect+0x48>
      return err;
 800a0de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a0e2:	e02a      	b.n	800a13a <udp_connect+0x9e>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d002      	beq.n	800a0f0 <udp_connect+0x54>
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	e000      	b.n	800a0f2 <udp_connect+0x56>
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	68fa      	ldr	r2, [r7, #12]
 800a0f4:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	88fa      	ldrh	r2, [r7, #6]
 800a0fa:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	7c1b      	ldrb	r3, [r3, #16]
 800a100:	f043 0304 	orr.w	r3, r3, #4
 800a104:	b2da      	uxtb	r2, r3
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800a10a:	4b0e      	ldr	r3, [pc, #56]	; (800a144 <udp_connect+0xa8>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	617b      	str	r3, [r7, #20]
 800a110:	e008      	b.n	800a124 <udp_connect+0x88>
    if (pcb == ipcb) {
 800a112:	68fa      	ldr	r2, [r7, #12]
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	429a      	cmp	r2, r3
 800a118:	d101      	bne.n	800a11e <udp_connect+0x82>
      /* already on the list, just return */
      return ERR_OK;
 800a11a:	2300      	movs	r3, #0
 800a11c:	e00d      	b.n	800a13a <udp_connect+0x9e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	68db      	ldr	r3, [r3, #12]
 800a122:	617b      	str	r3, [r7, #20]
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d1f3      	bne.n	800a112 <udp_connect+0x76>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800a12a:	4b06      	ldr	r3, [pc, #24]	; (800a144 <udp_connect+0xa8>)
 800a12c:	681a      	ldr	r2, [r3, #0]
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800a132:	4a04      	ldr	r2, [pc, #16]	; (800a144 <udp_connect+0xa8>)
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800a138:	2300      	movs	r3, #0
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3718      	adds	r7, #24
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
 800a142:	bf00      	nop
 800a144:	200068fc 	.word	0x200068fc

0800a148 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800a148:	b480      	push	{r7}
 800a14a:	b085      	sub	sp, #20
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	60f8      	str	r0, [r7, #12]
 800a150:	60b9      	str	r1, [r7, #8]
 800a152:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	68ba      	ldr	r2, [r7, #8]
 800a158:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	687a      	ldr	r2, [r7, #4]
 800a15e:	61da      	str	r2, [r3, #28]
}
 800a160:	bf00      	nop
 800a162:	3714      	adds	r7, #20
 800a164:	46bd      	mov	sp, r7
 800a166:	bc80      	pop	{r7}
 800a168:	4770      	bx	lr
	...

0800a16c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b084      	sub	sp, #16
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800a174:	4b15      	ldr	r3, [pc, #84]	; (800a1cc <udp_remove+0x60>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	687a      	ldr	r2, [r7, #4]
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d105      	bne.n	800a18a <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800a17e:	4b13      	ldr	r3, [pc, #76]	; (800a1cc <udp_remove+0x60>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	68db      	ldr	r3, [r3, #12]
 800a184:	4a11      	ldr	r2, [pc, #68]	; (800a1cc <udp_remove+0x60>)
 800a186:	6013      	str	r3, [r2, #0]
 800a188:	e017      	b.n	800a1ba <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800a18a:	4b10      	ldr	r3, [pc, #64]	; (800a1cc <udp_remove+0x60>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	60fb      	str	r3, [r7, #12]
 800a190:	e010      	b.n	800a1b4 <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	68db      	ldr	r3, [r3, #12]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d009      	beq.n	800a1ae <udp_remove+0x42>
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	68db      	ldr	r3, [r3, #12]
 800a19e:	687a      	ldr	r2, [r7, #4]
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	d104      	bne.n	800a1ae <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	68da      	ldr	r2, [r3, #12]
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	60da      	str	r2, [r3, #12]
        break;
 800a1ac:	e005      	b.n	800a1ba <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	68db      	ldr	r3, [r3, #12]
 800a1b2:	60fb      	str	r3, [r7, #12]
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d1eb      	bne.n	800a192 <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800a1ba:	6879      	ldr	r1, [r7, #4]
 800a1bc:	2000      	movs	r0, #0
 800a1be:	f7fa f819 	bl	80041f4 <memp_free>
}
 800a1c2:	bf00      	nop
 800a1c4:	3710      	adds	r7, #16
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
 800a1ca:	bf00      	nop
 800a1cc:	200068fc 	.word	0x200068fc

0800a1d0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b082      	sub	sp, #8
 800a1d4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800a1d6:	2000      	movs	r0, #0
 800a1d8:	f7f9 ffc0 	bl	800415c <memp_malloc>
 800a1dc:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d007      	beq.n	800a1f4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800a1e4:	2220      	movs	r2, #32
 800a1e6:	2100      	movs	r1, #0
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f004 f991 	bl	800e510 <memset>
    pcb->ttl = UDP_TTL;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	22ff      	movs	r2, #255	; 0xff
 800a1f2:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800a1f4:	687b      	ldr	r3, [r7, #4]
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3708      	adds	r7, #8
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}
	...

0800a200 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800a200:	b480      	push	{r7}
 800a202:	b085      	sub	sp, #20
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d01e      	beq.n	800a24e <udp_netif_ip_addr_changed+0x4e>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d01a      	beq.n	800a24e <udp_netif_ip_addr_changed+0x4e>
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d017      	beq.n	800a24e <udp_netif_ip_addr_changed+0x4e>
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d013      	beq.n	800a24e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800a226:	4b0c      	ldr	r3, [pc, #48]	; (800a258 <udp_netif_ip_addr_changed+0x58>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	60fb      	str	r3, [r7, #12]
 800a22c:	e00c      	b.n	800a248 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681a      	ldr	r2, [r3, #0]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	429a      	cmp	r2, r3
 800a238:	d103      	bne.n	800a242 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	681a      	ldr	r2, [r3, #0]
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	68db      	ldr	r3, [r3, #12]
 800a246:	60fb      	str	r3, [r7, #12]
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d1ef      	bne.n	800a22e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800a24e:	bf00      	nop
 800a250:	3714      	adds	r7, #20
 800a252:	46bd      	mov	sp, r7
 800a254:	bc80      	pop	{r7}
 800a256:	4770      	bx	lr
 800a258:	200068fc 	.word	0x200068fc

0800a25c <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(struct dhcp *dhcp);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800a260:	4b20      	ldr	r3, [pc, #128]	; (800a2e4 <dhcp_inc_pcb_refcount+0x88>)
 800a262:	781b      	ldrb	r3, [r3, #0]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d133      	bne.n	800a2d0 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800a268:	4b1f      	ldr	r3, [pc, #124]	; (800a2e8 <dhcp_inc_pcb_refcount+0x8c>)
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d005      	beq.n	800a27c <dhcp_inc_pcb_refcount+0x20>
 800a270:	4b1e      	ldr	r3, [pc, #120]	; (800a2ec <dhcp_inc_pcb_refcount+0x90>)
 800a272:	22d9      	movs	r2, #217	; 0xd9
 800a274:	491e      	ldr	r1, [pc, #120]	; (800a2f0 <dhcp_inc_pcb_refcount+0x94>)
 800a276:	481f      	ldr	r0, [pc, #124]	; (800a2f4 <dhcp_inc_pcb_refcount+0x98>)
 800a278:	f004 f952 	bl	800e520 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800a27c:	f7ff ffa8 	bl	800a1d0 <udp_new>
 800a280:	4602      	mov	r2, r0
 800a282:	4b19      	ldr	r3, [pc, #100]	; (800a2e8 <dhcp_inc_pcb_refcount+0x8c>)
 800a284:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 800a286:	4b18      	ldr	r3, [pc, #96]	; (800a2e8 <dhcp_inc_pcb_refcount+0x8c>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d102      	bne.n	800a294 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800a28e:	f04f 33ff 	mov.w	r3, #4294967295
 800a292:	e024      	b.n	800a2de <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800a294:	4b14      	ldr	r3, [pc, #80]	; (800a2e8 <dhcp_inc_pcb_refcount+0x8c>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	7a1a      	ldrb	r2, [r3, #8]
 800a29a:	4b13      	ldr	r3, [pc, #76]	; (800a2e8 <dhcp_inc_pcb_refcount+0x8c>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f042 0220 	orr.w	r2, r2, #32
 800a2a2:	b2d2      	uxtb	r2, r2
 800a2a4:	721a      	strb	r2, [r3, #8]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
 800a2a6:	4b10      	ldr	r3, [pc, #64]	; (800a2e8 <dhcp_inc_pcb_refcount+0x8c>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	2244      	movs	r2, #68	; 0x44
 800a2ac:	4912      	ldr	r1, [pc, #72]	; (800a2f8 <dhcp_inc_pcb_refcount+0x9c>)
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f7ff fe84 	bl	8009fbc <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, DHCP_SERVER_PORT);
 800a2b4:	4b0c      	ldr	r3, [pc, #48]	; (800a2e8 <dhcp_inc_pcb_refcount+0x8c>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	2243      	movs	r2, #67	; 0x43
 800a2ba:	490f      	ldr	r1, [pc, #60]	; (800a2f8 <dhcp_inc_pcb_refcount+0x9c>)
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f7ff feed 	bl	800a09c <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800a2c2:	4b09      	ldr	r3, [pc, #36]	; (800a2e8 <dhcp_inc_pcb_refcount+0x8c>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	490c      	ldr	r1, [pc, #48]	; (800a2fc <dhcp_inc_pcb_refcount+0xa0>)
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f7ff ff3c 	bl	800a148 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800a2d0:	4b04      	ldr	r3, [pc, #16]	; (800a2e4 <dhcp_inc_pcb_refcount+0x88>)
 800a2d2:	781b      	ldrb	r3, [r3, #0]
 800a2d4:	3301      	adds	r3, #1
 800a2d6:	b2da      	uxtb	r2, r3
 800a2d8:	4b02      	ldr	r3, [pc, #8]	; (800a2e4 <dhcp_inc_pcb_refcount+0x88>)
 800a2da:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800a2dc:	2300      	movs	r3, #0
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	bd80      	pop	{r7, pc}
 800a2e2:	bf00      	nop
 800a2e4:	20000118 	.word	0x20000118
 800a2e8:	20000114 	.word	0x20000114
 800a2ec:	080109c8 	.word	0x080109c8
 800a2f0:	08010a00 	.word	0x08010a00
 800a2f4:	08010a28 	.word	0x08010a28
 800a2f8:	0801163c 	.word	0x0801163c
 800a2fc:	0800ba35 	.word	0x0800ba35

0800a300 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800a300:	b580      	push	{r7, lr}
 800a302:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800a304:	4b0e      	ldr	r3, [pc, #56]	; (800a340 <dhcp_dec_pcb_refcount+0x40>)
 800a306:	781b      	ldrb	r3, [r3, #0]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d105      	bne.n	800a318 <dhcp_dec_pcb_refcount+0x18>
 800a30c:	4b0d      	ldr	r3, [pc, #52]	; (800a344 <dhcp_dec_pcb_refcount+0x44>)
 800a30e:	22f3      	movs	r2, #243	; 0xf3
 800a310:	490d      	ldr	r1, [pc, #52]	; (800a348 <dhcp_dec_pcb_refcount+0x48>)
 800a312:	480e      	ldr	r0, [pc, #56]	; (800a34c <dhcp_dec_pcb_refcount+0x4c>)
 800a314:	f004 f904 	bl	800e520 <iprintf>
  dhcp_pcb_refcount--;
 800a318:	4b09      	ldr	r3, [pc, #36]	; (800a340 <dhcp_dec_pcb_refcount+0x40>)
 800a31a:	781b      	ldrb	r3, [r3, #0]
 800a31c:	3b01      	subs	r3, #1
 800a31e:	b2da      	uxtb	r2, r3
 800a320:	4b07      	ldr	r3, [pc, #28]	; (800a340 <dhcp_dec_pcb_refcount+0x40>)
 800a322:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800a324:	4b06      	ldr	r3, [pc, #24]	; (800a340 <dhcp_dec_pcb_refcount+0x40>)
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d107      	bne.n	800a33c <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800a32c:	4b08      	ldr	r3, [pc, #32]	; (800a350 <dhcp_dec_pcb_refcount+0x50>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	4618      	mov	r0, r3
 800a332:	f7ff ff1b 	bl	800a16c <udp_remove>
    dhcp_pcb = NULL;
 800a336:	4b06      	ldr	r3, [pc, #24]	; (800a350 <dhcp_dec_pcb_refcount+0x50>)
 800a338:	2200      	movs	r2, #0
 800a33a:	601a      	str	r2, [r3, #0]
  }
}
 800a33c:	bf00      	nop
 800a33e:	bd80      	pop	{r7, pc}
 800a340:	20000118 	.word	0x20000118
 800a344:	080109c8 	.word	0x080109c8
 800a348:	08010a50 	.word	0x08010a50
 800a34c:	08010a28 	.word	0x08010a28
 800a350:	20000114 	.word	0x20000114

0800a354 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b084      	sub	sp, #16
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a360:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800a362:	210c      	movs	r1, #12
 800a364:	68f8      	ldr	r0, [r7, #12]
 800a366:	f000 ffc3 	bl	800b2f0 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800a36a:	4b06      	ldr	r3, [pc, #24]	; (800a384 <dhcp_handle_nak+0x30>)
 800a36c:	4a05      	ldr	r2, [pc, #20]	; (800a384 <dhcp_handle_nak+0x30>)
 800a36e:	4905      	ldr	r1, [pc, #20]	; (800a384 <dhcp_handle_nak+0x30>)
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f7f9 ffcd 	bl	8004310 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f000 fbf4 	bl	800ab64 <dhcp_discover>
}
 800a37c:	bf00      	nop
 800a37e:	3710      	adds	r7, #16
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}
 800a384:	0801163c 	.word	0x0801163c

0800a388 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800a388:	b580      	push	{r7, lr}
 800a38a:	b084      	sub	sp, #16
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a394:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800a396:	2108      	movs	r1, #8
 800a398:	68f8      	ldr	r0, [r7, #12]
 800a39a:	f000 ffa9 	bl	800b2f0 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	3328      	adds	r3, #40	; 0x28
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	4619      	mov	r1, r3
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f002 fb5c 	bl	800ca64 <etharp_query>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	7a9b      	ldrb	r3, [r3, #10]
 800a3b4:	2bff      	cmp	r3, #255	; 0xff
 800a3b6:	d005      	beq.n	800a3c4 <dhcp_check+0x3c>
    dhcp->tries++;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	7a9b      	ldrb	r3, [r3, #10]
 800a3bc:	3301      	adds	r3, #1
 800a3be:	b2da      	uxtb	r2, r3
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	729a      	strb	r2, [r3, #10]
  }
  msecs = 500;
 800a3c4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800a3c8:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800a3ca:	893b      	ldrh	r3, [r7, #8]
 800a3cc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800a3d0:	4a06      	ldr	r2, [pc, #24]	; (800a3ec <dhcp_check+0x64>)
 800a3d2:	fb82 1203 	smull	r1, r2, r2, r3
 800a3d6:	1152      	asrs	r2, r2, #5
 800a3d8:	17db      	asrs	r3, r3, #31
 800a3da:	1ad3      	subs	r3, r2, r3
 800a3dc:	b29a      	uxth	r2, r3
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800a3e2:	bf00      	nop
 800a3e4:	3710      	adds	r7, #16
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}
 800a3ea:	bf00      	nop
 800a3ec:	10624dd3 	.word	0x10624dd3

0800a3f0 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b084      	sub	sp, #16
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3fc:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800a3fe:	4b0c      	ldr	r3, [pc, #48]	; (800a430 <dhcp_handle_offer+0x40>)
 800a400:	789b      	ldrb	r3, [r3, #2]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d00f      	beq.n	800a426 <dhcp_handle_offer+0x36>
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800a406:	4b0b      	ldr	r3, [pc, #44]	; (800a434 <dhcp_handle_offer+0x44>)
 800a408:	689b      	ldr	r3, [r3, #8]
 800a40a:	4618      	mov	r0, r3
 800a40c:	f7f9 fb0b 	bl	8003a26 <lwip_htonl>
 800a410:	4602      	mov	r2, r0
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	625a      	str	r2, [r3, #36]	; 0x24
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
      ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	685b      	ldr	r3, [r3, #4]
 800a41a:	691a      	ldr	r2, [r3, #16]
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	629a      	str	r2, [r3, #40]	; 0x28
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f000 f809 	bl	800a438 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void*)netif));
  }
}
 800a426:	bf00      	nop
 800a428:	3710      	adds	r7, #16
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
 800a42e:	bf00      	nop
 800a430:	20006900 	.word	0x20006900
 800a434:	20006908 	.word	0x20006908

0800a438 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b088      	sub	sp, #32
 800a43c:	af02      	add	r7, sp, #8
 800a43e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a444:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800a446:	2101      	movs	r1, #1
 800a448:	6938      	ldr	r0, [r7, #16]
 800a44a:	f000 ff51 	bl	800b2f0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800a44e:	2203      	movs	r2, #3
 800a450:	6939      	ldr	r1, [r7, #16]
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f001 fbd2 	bl	800bbfc <dhcp_create_msg>
 800a458:	4603      	mov	r3, r0
 800a45a:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800a45c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d159      	bne.n	800a518 <dhcp_select+0xe0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800a464:	2202      	movs	r2, #2
 800a466:	2139      	movs	r1, #57	; 0x39
 800a468:	6938      	ldr	r0, [r7, #16]
 800a46a:	f000 ff5b 	bl	800b324 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a472:	4619      	mov	r1, r3
 800a474:	6938      	ldr	r0, [r7, #16]
 800a476:	f000 ffb7 	bl	800b3e8 <dhcp_option_short>

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 800a47a:	2204      	movs	r2, #4
 800a47c:	2132      	movs	r1, #50	; 0x32
 800a47e:	6938      	ldr	r0, [r7, #16]
 800a480:	f000 ff50 	bl	800b324 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a488:	4618      	mov	r0, r3
 800a48a:	f7f9 facc 	bl	8003a26 <lwip_htonl>
 800a48e:	4603      	mov	r3, r0
 800a490:	4619      	mov	r1, r3
 800a492:	6938      	ldr	r0, [r7, #16]
 800a494:	f000 ffe2 	bl	800b45c <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 800a498:	2204      	movs	r2, #4
 800a49a:	2136      	movs	r1, #54	; 0x36
 800a49c:	6938      	ldr	r0, [r7, #16]
 800a49e:	f000 ff41 	bl	800b324 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	f7f9 fabd 	bl	8003a26 <lwip_htonl>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	4619      	mov	r1, r3
 800a4b0:	6938      	ldr	r0, [r7, #16]
 800a4b2:	f000 ffd3 	bl	800b45c <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800a4b6:	2203      	movs	r2, #3
 800a4b8:	2137      	movs	r1, #55	; 0x37
 800a4ba:	6938      	ldr	r0, [r7, #16]
 800a4bc:	f000 ff32 	bl	800b324 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	75fb      	strb	r3, [r7, #23]
 800a4c4:	e009      	b.n	800a4da <dhcp_select+0xa2>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800a4c6:	7dfb      	ldrb	r3, [r7, #23]
 800a4c8:	4a29      	ldr	r2, [pc, #164]	; (800a570 <dhcp_select+0x138>)
 800a4ca:	5cd3      	ldrb	r3, [r2, r3]
 800a4cc:	4619      	mov	r1, r3
 800a4ce:	6938      	ldr	r0, [r7, #16]
 800a4d0:	f000 ff62 	bl	800b398 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800a4d4:	7dfb      	ldrb	r3, [r7, #23]
 800a4d6:	3301      	adds	r3, #1
 800a4d8:	75fb      	strb	r3, [r7, #23]
 800a4da:	7dfb      	ldrb	r3, [r7, #23]
 800a4dc:	2b02      	cmp	r3, #2
 800a4de:	d9f2      	bls.n	800a4c6 <dhcp_select+0x8e>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 800a4e0:	6938      	ldr	r0, [r7, #16]
 800a4e2:	f001 fd2f 	bl	800bf44 <dhcp_option_trailer>
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800a4e6:	693b      	ldr	r3, [r7, #16]
 800a4e8:	68da      	ldr	r2, [r3, #12]
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	8a9b      	ldrh	r3, [r3, #20]
 800a4ee:	33f0      	adds	r3, #240	; 0xf0
 800a4f0:	b29b      	uxth	r3, r3
 800a4f2:	4619      	mov	r1, r3
 800a4f4:	4610      	mov	r0, r2
 800a4f6:	f7fa fa95 	bl	8004a24 <pbuf_realloc>

    /* send broadcast to any DHCP server */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 800a4fa:	4b1e      	ldr	r3, [pc, #120]	; (800a574 <dhcp_select+0x13c>)
 800a4fc:	6818      	ldr	r0, [r3, #0]
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	68d9      	ldr	r1, [r3, #12]
 800a502:	4b1d      	ldr	r3, [pc, #116]	; (800a578 <dhcp_select+0x140>)
 800a504:	9301      	str	r3, [sp, #4]
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	9300      	str	r3, [sp, #0]
 800a50a:	2343      	movs	r3, #67	; 0x43
 800a50c:	4a1b      	ldr	r2, [pc, #108]	; (800a57c <dhcp_select+0x144>)
 800a50e:	f7ff fcbb 	bl	8009e88 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 800a512:	6938      	ldr	r0, [r7, #16]
 800a514:	f001 fcd4 	bl	800bec0 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	7a9b      	ldrb	r3, [r3, #10]
 800a51c:	2bff      	cmp	r3, #255	; 0xff
 800a51e:	d005      	beq.n	800a52c <dhcp_select+0xf4>
    dhcp->tries++;
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	7a9b      	ldrb	r3, [r3, #10]
 800a524:	3301      	adds	r3, #1
 800a526:	b2da      	uxtb	r2, r3
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	729a      	strb	r2, [r3, #10]
  }
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	7a9b      	ldrb	r3, [r3, #10]
 800a530:	2b05      	cmp	r3, #5
 800a532:	d807      	bhi.n	800a544 <dhcp_select+0x10c>
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	7a9b      	ldrb	r3, [r3, #10]
 800a538:	461a      	mov	r2, r3
 800a53a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a53e:	4093      	lsls	r3, r2
 800a540:	b29b      	uxth	r3, r3
 800a542:	e001      	b.n	800a548 <dhcp_select+0x110>
 800a544:	f64e 2360 	movw	r3, #60000	; 0xea60
 800a548:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800a54a:	89bb      	ldrh	r3, [r7, #12]
 800a54c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800a550:	4a0b      	ldr	r2, [pc, #44]	; (800a580 <dhcp_select+0x148>)
 800a552:	fb82 1203 	smull	r1, r2, r2, r3
 800a556:	1152      	asrs	r2, r2, #5
 800a558:	17db      	asrs	r3, r3, #31
 800a55a:	1ad3      	subs	r3, r2, r3
 800a55c:	b29a      	uxth	r2, r3
 800a55e:	693b      	ldr	r3, [r7, #16]
 800a560:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800a562:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a566:	4618      	mov	r0, r3
 800a568:	3718      	adds	r7, #24
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
 800a56e:	bf00      	nop
 800a570:	20000014 	.word	0x20000014
 800a574:	20000114 	.word	0x20000114
 800a578:	0801163c 	.word	0x0801163c
 800a57c:	08011640 	.word	0x08011640
 800a580:	10624dd3 	.word	0x10624dd3

0800a584 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b082      	sub	sp, #8
 800a588:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 800a58a:	4b27      	ldr	r3, [pc, #156]	; (800a628 <dhcp_coarse_tmr+0xa4>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
 800a590:	e042      	b.n	800a618 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a596:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d039      	beq.n	800a612 <dhcp_coarse_tmr+0x8e>
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	7a5b      	ldrb	r3, [r3, #9]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d035      	beq.n	800a612 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d012      	beq.n	800a5d4 <dhcp_coarse_tmr+0x50>
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	8c1b      	ldrh	r3, [r3, #32]
 800a5b2:	3301      	adds	r3, #1
 800a5b4:	b29a      	uxth	r2, r3
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	841a      	strh	r2, [r3, #32]
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	8c1a      	ldrh	r2, [r3, #32]
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d106      	bne.n	800a5d4 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release(netif);
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f000 fdd2 	bl	800b170 <dhcp_release>
        dhcp_discover(netif);
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f000 fac9 	bl	800ab64 <dhcp_discover>
 800a5d2:	e01e      	b.n	800a612 <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	8bdb      	ldrh	r3, [r3, #30]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d00b      	beq.n	800a5f4 <dhcp_coarse_tmr+0x70>
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	8bdb      	ldrh	r3, [r3, #30]
 800a5e0:	1e5a      	subs	r2, r3, #1
 800a5e2:	b291      	uxth	r1, r2
 800a5e4:	683a      	ldr	r2, [r7, #0]
 800a5e6:	83d1      	strh	r1, [r2, #30]
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d103      	bne.n	800a5f4 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f000 f8c6 	bl	800a77e <dhcp_t2_timeout>
 800a5f2:	e00e      	b.n	800a612 <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	8b9b      	ldrh	r3, [r3, #28]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d00a      	beq.n	800a612 <dhcp_coarse_tmr+0x8e>
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	8b9b      	ldrh	r3, [r3, #28]
 800a600:	1e5a      	subs	r2, r3, #1
 800a602:	b291      	uxth	r1, r2
 800a604:	683a      	ldr	r2, [r7, #0]
 800a606:	8391      	strh	r1, [r2, #28]
 800a608:	2b01      	cmp	r3, #1
 800a60a:	d102      	bne.n	800a612 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 f888 	bl	800a722 <dhcp_t1_timeout>
      }
    }
    /* proceed to next netif */
    netif = netif->next;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d1b9      	bne.n	800a592 <dhcp_coarse_tmr+0xe>
  }
}
 800a61e:	bf00      	nop
 800a620:	3708      	adds	r7, #8
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}
 800a626:	bf00      	nop
 800a628:	200068d4 	.word	0x200068d4

0800a62c <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b082      	sub	sp, #8
 800a630:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 800a632:	4b16      	ldr	r3, [pc, #88]	; (800a68c <dhcp_fine_tmr+0x60>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	607b      	str	r3, [r7, #4]
  /* loop through netif's */
  while (netif != NULL) {
 800a638:	e020      	b.n	800a67c <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a63e:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d017      	beq.n	800a676 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	8adb      	ldrh	r3, [r3, #22]
 800a64a:	2b01      	cmp	r3, #1
 800a64c:	d906      	bls.n	800a65c <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	8adb      	ldrh	r3, [r3, #22]
 800a652:	3b01      	subs	r3, #1
 800a654:	b29a      	uxth	r2, r3
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	82da      	strh	r2, [r3, #22]
 800a65a:	e00c      	b.n	800a676 <dhcp_fine_tmr+0x4a>
      }
      else if (dhcp->request_timeout == 1) {
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	8adb      	ldrh	r3, [r3, #22]
 800a660:	2b01      	cmp	r3, #1
 800a662:	d108      	bne.n	800a676 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	8adb      	ldrh	r3, [r3, #22]
 800a668:	3b01      	subs	r3, #1
 800a66a:	b29a      	uxth	r2, r3
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	82da      	strh	r2, [r3, #22]
        /* { netif->dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f000 f80d 	bl	800a690 <dhcp_timeout>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d1db      	bne.n	800a63a <dhcp_fine_tmr+0xe>
  }
}
 800a682:	bf00      	nop
 800a684:	3708      	adds	r7, #8
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}
 800a68a:	bf00      	nop
 800a68c:	200068d4 	.word	0x200068d4

0800a690 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b084      	sub	sp, #16
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a69c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	7a5b      	ldrb	r3, [r3, #9]
 800a6a2:	2b0c      	cmp	r3, #12
 800a6a4:	d003      	beq.n	800a6ae <dhcp_timeout+0x1e>
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	7a5b      	ldrb	r3, [r3, #9]
 800a6aa:	2b06      	cmp	r3, #6
 800a6ac:	d103      	bne.n	800a6b6 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f000 fa58 	bl	800ab64 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800a6b4:	e031      	b.n	800a71a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	7a5b      	ldrb	r3, [r3, #9]
 800a6ba:	2b01      	cmp	r3, #1
 800a6bc:	d10e      	bne.n	800a6dc <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	7a9b      	ldrb	r3, [r3, #10]
 800a6c2:	2b05      	cmp	r3, #5
 800a6c4:	d803      	bhi.n	800a6ce <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f7ff feb6 	bl	800a438 <dhcp_select>
}
 800a6cc:	e025      	b.n	800a71a <dhcp_timeout+0x8a>
      dhcp_release(netif);
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f000 fd4e 	bl	800b170 <dhcp_release>
      dhcp_discover(netif);
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f000 fa45 	bl	800ab64 <dhcp_discover>
}
 800a6da:	e01e      	b.n	800a71a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	7a5b      	ldrb	r3, [r3, #9]
 800a6e0:	2b08      	cmp	r3, #8
 800a6e2:	d10b      	bne.n	800a6fc <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	7a9b      	ldrb	r3, [r3, #10]
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	d803      	bhi.n	800a6f4 <dhcp_timeout+0x64>
      dhcp_check(netif);
 800a6ec:	6878      	ldr	r0, [r7, #4]
 800a6ee:	f7ff fe4b 	bl	800a388 <dhcp_check>
}
 800a6f2:	e012      	b.n	800a71a <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f000 fac1 	bl	800ac7c <dhcp_bind>
}
 800a6fa:	e00e      	b.n	800a71a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	7a5b      	ldrb	r3, [r3, #9]
 800a700:	2b03      	cmp	r3, #3
 800a702:	d10a      	bne.n	800a71a <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	7a9b      	ldrb	r3, [r3, #10]
 800a708:	2b01      	cmp	r3, #1
 800a70a:	d803      	bhi.n	800a714 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f000 fc9b 	bl	800b048 <dhcp_reboot>
}
 800a712:	e002      	b.n	800a71a <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f000 fa25 	bl	800ab64 <dhcp_discover>
}
 800a71a:	bf00      	nop
 800a71c:	3710      	adds	r7, #16
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}

0800a722 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800a722:	b580      	push	{r7, lr}
 800a724:	b084      	sub	sp, #16
 800a726:	af00      	add	r7, sp, #0
 800a728:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a72e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	7a5b      	ldrb	r3, [r3, #9]
 800a734:	2b01      	cmp	r3, #1
 800a736:	d007      	beq.n	800a748 <dhcp_t1_timeout+0x26>
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	7a5b      	ldrb	r3, [r3, #9]
 800a73c:	2b0a      	cmp	r3, #10
 800a73e:	d003      	beq.n	800a748 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800a744:	2b05      	cmp	r3, #5
 800a746:	d116      	bne.n	800a776 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f000 fb71 	bl	800ae30 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	8b5b      	ldrh	r3, [r3, #26]
 800a752:	461a      	mov	r2, r3
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	8c1b      	ldrh	r3, [r3, #32]
 800a758:	1ad3      	subs	r3, r2, r3
 800a75a:	2b01      	cmp	r3, #1
 800a75c:	dd0b      	ble.n	800a776 <dhcp_t1_timeout+0x54>
    {
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	8b5b      	ldrh	r3, [r3, #26]
 800a762:	461a      	mov	r2, r3
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	8c1b      	ldrh	r3, [r3, #32]
 800a768:	1ad3      	subs	r3, r2, r3
 800a76a:	0fda      	lsrs	r2, r3, #31
 800a76c:	4413      	add	r3, r2
 800a76e:	105b      	asrs	r3, r3, #1
 800a770:	b29a      	uxth	r2, r3
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	839a      	strh	r2, [r3, #28]
    }
  }
}
 800a776:	bf00      	nop
 800a778:	3710      	adds	r7, #16
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}

0800a77e <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800a77e:	b580      	push	{r7, lr}
 800a780:	b084      	sub	sp, #16
 800a782:	af00      	add	r7, sp, #0
 800a784:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a78a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	7a5b      	ldrb	r3, [r3, #9]
 800a790:	2b01      	cmp	r3, #1
 800a792:	d00b      	beq.n	800a7ac <dhcp_t2_timeout+0x2e>
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	7a5b      	ldrb	r3, [r3, #9]
 800a798:	2b0a      	cmp	r3, #10
 800a79a:	d007      	beq.n	800a7ac <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800a7a0:	2b05      	cmp	r3, #5
 800a7a2:	d003      	beq.n	800a7ac <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	7a5b      	ldrb	r3, [r3, #9]
 800a7a8:	2b04      	cmp	r3, #4
 800a7aa:	d116      	bne.n	800a7da <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f000 fbc5 	bl	800af3c <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	8c1b      	ldrh	r3, [r3, #32]
 800a7bc:	1ad3      	subs	r3, r2, r3
 800a7be:	2b01      	cmp	r3, #1
 800a7c0:	dd0b      	ble.n	800a7da <dhcp_t2_timeout+0x5c>
    {
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800a7c6:	461a      	mov	r2, r3
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	8c1b      	ldrh	r3, [r3, #32]
 800a7cc:	1ad3      	subs	r3, r2, r3
 800a7ce:	0fda      	lsrs	r2, r3, #31
 800a7d0:	4413      	add	r3, r2
 800a7d2:	105b      	asrs	r3, r3, #1
 800a7d4:	b29a      	uxth	r2, r3
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	83da      	strh	r2, [r3, #30]
    }
  }
}
 800a7da:	bf00      	nop
 800a7dc:	3710      	adds	r7, #16
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	bd80      	pop	{r7, pc}
	...

0800a7e4 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b084      	sub	sp, #16
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f0:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	62da      	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800a7fe:	4b27      	ldr	r3, [pc, #156]	; (800a89c <dhcp_handle_ack+0xb8>)
 800a800:	78db      	ldrb	r3, [r3, #3]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d003      	beq.n	800a80e <dhcp_handle_ack+0x2a>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800a806:	4b26      	ldr	r3, [pc, #152]	; (800a8a0 <dhcp_handle_ack+0xbc>)
 800a808:	68da      	ldr	r2, [r3, #12]
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	635a      	str	r2, [r3, #52]	; 0x34
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800a80e:	4b23      	ldr	r3, [pc, #140]	; (800a89c <dhcp_handle_ack+0xb8>)
 800a810:	791b      	ldrb	r3, [r3, #4]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d004      	beq.n	800a820 <dhcp_handle_ack+0x3c>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800a816:	4b22      	ldr	r3, [pc, #136]	; (800a8a0 <dhcp_handle_ack+0xbc>)
 800a818:	691a      	ldr	r2, [r3, #16]
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	639a      	str	r2, [r3, #56]	; 0x38
 800a81e:	e004      	b.n	800a82a <dhcp_handle_ack+0x46>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a824:	085a      	lsrs	r2, r3, #1
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800a82a:	4b1c      	ldr	r3, [pc, #112]	; (800a89c <dhcp_handle_ack+0xb8>)
 800a82c:	795b      	ldrb	r3, [r3, #5]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d004      	beq.n	800a83c <dhcp_handle_ack+0x58>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800a832:	4b1b      	ldr	r3, [pc, #108]	; (800a8a0 <dhcp_handle_ack+0xbc>)
 800a834:	695a      	ldr	r2, [r3, #20]
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	63da      	str	r2, [r3, #60]	; 0x3c
 800a83a:	e007      	b.n	800a84c <dhcp_handle_ack+0x68>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a840:	4613      	mov	r3, r2
 800a842:	00db      	lsls	r3, r3, #3
 800a844:	1a9b      	subs	r3, r3, r2
 800a846:	08da      	lsrs	r2, r3, #3
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	685b      	ldr	r3, [r3, #4]
 800a850:	691a      	ldr	r2, [r3, #16]
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	629a      	str	r2, [r3, #40]	; 0x28
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800a856:	4b11      	ldr	r3, [pc, #68]	; (800a89c <dhcp_handle_ack+0xb8>)
 800a858:	799b      	ldrb	r3, [r3, #6]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d00b      	beq.n	800a876 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800a85e:	4b10      	ldr	r3, [pc, #64]	; (800a8a0 <dhcp_handle_ack+0xbc>)
 800a860:	699b      	ldr	r3, [r3, #24]
 800a862:	4618      	mov	r0, r3
 800a864:	f7f9 f8df 	bl	8003a26 <lwip_htonl>
 800a868:	4602      	mov	r2, r0
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	62da      	str	r2, [r3, #44]	; 0x2c
    dhcp->subnet_mask_given = 1;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	2201      	movs	r2, #1
 800a872:	72da      	strb	r2, [r3, #11]
 800a874:	e002      	b.n	800a87c <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	2200      	movs	r2, #0
 800a87a:	72da      	strb	r2, [r3, #11]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800a87c:	4b07      	ldr	r3, [pc, #28]	; (800a89c <dhcp_handle_ack+0xb8>)
 800a87e:	79db      	ldrb	r3, [r3, #7]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d007      	beq.n	800a894 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800a884:	4b06      	ldr	r3, [pc, #24]	; (800a8a0 <dhcp_handle_ack+0xbc>)
 800a886:	69db      	ldr	r3, [r3, #28]
 800a888:	4618      	mov	r0, r3
 800a88a:	f7f9 f8cc 	bl	8003a26 <lwip_htonl>
 800a88e:	4602      	mov	r2, r0
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	631a      	str	r2, [r3, #48]	; 0x30
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32(&dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800a894:	bf00      	nop
 800a896:	3710      	adds	r7, #16
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}
 800a89c:	20006900 	.word	0x20006900
 800a8a0:	20006908 	.word	0x20006908

0800a8a4 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b084      	sub	sp, #16
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d109      	bne.n	800a8c6 <dhcp_start+0x22>
 800a8b2:	4b3c      	ldr	r3, [pc, #240]	; (800a9a4 <dhcp_start+0x100>)
 800a8b4:	f240 22d6 	movw	r2, #726	; 0x2d6
 800a8b8:	493b      	ldr	r1, [pc, #236]	; (800a9a8 <dhcp_start+0x104>)
 800a8ba:	483c      	ldr	r0, [pc, #240]	; (800a9ac <dhcp_start+0x108>)
 800a8bc:	f003 fe30 	bl	800e520 <iprintf>
 800a8c0:	f06f 030f 	mvn.w	r3, #15
 800a8c4:	e069      	b.n	800a99a <dhcp_start+0xf6>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800a8cc:	f003 0301 	and.w	r3, r3, #1
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d109      	bne.n	800a8e8 <dhcp_start+0x44>
 800a8d4:	4b33      	ldr	r3, [pc, #204]	; (800a9a4 <dhcp_start+0x100>)
 800a8d6:	f240 22d7 	movw	r2, #727	; 0x2d7
 800a8da:	4935      	ldr	r1, [pc, #212]	; (800a9b0 <dhcp_start+0x10c>)
 800a8dc:	4833      	ldr	r0, [pc, #204]	; (800a9ac <dhcp_start+0x108>)
 800a8de:	f003 fe1f 	bl	800e520 <iprintf>
 800a8e2:	f06f 030f 	mvn.w	r3, #15
 800a8e6:	e058      	b.n	800a99a <dhcp_start+0xf6>
  dhcp = netif_dhcp_data(netif);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ec:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a8f2:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800a8f6:	d202      	bcs.n	800a8fe <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 800a8f8:	f04f 33ff 	mov.w	r3, #4294967295
 800a8fc:	e04d      	b.n	800a99a <dhcp_start+0xf6>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d10d      	bne.n	800a920 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800a904:	2040      	movs	r0, #64	; 0x40
 800a906:	f7f9 facd 	bl	8003ea4 <mem_malloc>
 800a90a:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d102      	bne.n	800a918 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 800a912:	f04f 33ff 	mov.w	r3, #4294967295
 800a916:	e040      	b.n	800a99a <dhcp_start+0xf6>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	68fa      	ldr	r2, [r7, #12]
 800a91c:	625a      	str	r2, [r3, #36]	; 0x24
 800a91e:	e01b      	b.n	800a958 <dhcp_start+0xb4>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
  /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	68db      	ldr	r3, [r3, #12]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d006      	beq.n	800a936 <dhcp_start+0x92>
 800a928:	4b1e      	ldr	r3, [pc, #120]	; (800a9a4 <dhcp_start+0x100>)
 800a92a:	f44f 723c 	mov.w	r2, #752	; 0x2f0
 800a92e:	4921      	ldr	r1, [pc, #132]	; (800a9b4 <dhcp_start+0x110>)
 800a930:	481e      	ldr	r0, [pc, #120]	; (800a9ac <dhcp_start+0x108>)
 800a932:	f003 fdf5 	bl	800e520 <iprintf>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d006      	beq.n	800a94c <dhcp_start+0xa8>
 800a93e:	4b19      	ldr	r3, [pc, #100]	; (800a9a4 <dhcp_start+0x100>)
 800a940:	f240 22f1 	movw	r2, #753	; 0x2f1
 800a944:	491c      	ldr	r1, [pc, #112]	; (800a9b8 <dhcp_start+0x114>)
 800a946:	4819      	ldr	r0, [pc, #100]	; (800a9ac <dhcp_start+0x108>)
 800a948:	f003 fdea 	bl	800e520 <iprintf>

    if (dhcp->pcb_allocated != 0) {
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	7a1b      	ldrb	r3, [r3, #8]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d001      	beq.n	800a958 <dhcp_start+0xb4>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800a954:	f7ff fcd4 	bl	800a300 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800a958:	2240      	movs	r2, #64	; 0x40
 800a95a:	2100      	movs	r1, #0
 800a95c:	68f8      	ldr	r0, [r7, #12]
 800a95e:	f003 fdd7 	bl	800e510 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800a962:	f7ff fc7b 	bl	800a25c <dhcp_inc_pcb_refcount>
 800a966:	4603      	mov	r3, r0
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d002      	beq.n	800a972 <dhcp_start+0xce>
    return ERR_MEM;
 800a96c:	f04f 33ff 	mov.w	r3, #4294967295
 800a970:	e013      	b.n	800a99a <dhcp_start+0xf6>
  }
  dhcp->pcb_allocated = 1;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	2201      	movs	r2, #1
 800a976:	721a      	strb	r2, [r3, #8]
  }
#endif /* LWIP_DHCP_CHECK_LINK_UP */


  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f000 f8f3 	bl	800ab64 <dhcp_discover>
 800a97e:	4603      	mov	r3, r0
 800a980:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800a982:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d005      	beq.n	800a996 <dhcp_start+0xf2>
    /* free resources allocated above */
    dhcp_stop(netif);
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f000 fc78 	bl	800b280 <dhcp_stop>
    return ERR_MEM;
 800a990:	f04f 33ff 	mov.w	r3, #4294967295
 800a994:	e001      	b.n	800a99a <dhcp_start+0xf6>
  }
  return result;
 800a996:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	3710      	adds	r7, #16
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}
 800a9a2:	bf00      	nop
 800a9a4:	080109c8 	.word	0x080109c8
 800a9a8:	08010a74 	.word	0x08010a74
 800a9ac:	08010a28 	.word	0x08010a28
 800a9b0:	08010ab8 	.word	0x08010ab8
 800a9b4:	08010adc 	.word	0x08010adc
 800a9b8:	08010af4 	.word	0x08010af4

0800a9bc <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b084      	sub	sp, #16
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c8:	60fb      	str	r3, [r7, #12]

  if (!dhcp)
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d02c      	beq.n	800aa2a <dhcp_network_changed+0x6e>
    return;
  switch (dhcp->state) {
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	7a5b      	ldrb	r3, [r3, #9]
 800a9d4:	2b0a      	cmp	r3, #10
 800a9d6:	d820      	bhi.n	800aa1a <dhcp_network_changed+0x5e>
 800a9d8:	a201      	add	r2, pc, #4	; (adr r2, 800a9e0 <dhcp_network_changed+0x24>)
 800a9da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9de:	bf00      	nop
 800a9e0:	0800aa2f 	.word	0x0800aa2f
 800a9e4:	0800aa1b 	.word	0x0800aa1b
 800a9e8:	0800aa1b 	.word	0x0800aa1b
 800a9ec:	0800aa0d 	.word	0x0800aa0d
 800a9f0:	0800aa0d 	.word	0x0800aa0d
 800a9f4:	0800aa0d 	.word	0x0800aa0d
 800a9f8:	0800aa1b 	.word	0x0800aa1b
 800a9fc:	0800aa1b 	.word	0x0800aa1b
 800aa00:	0800aa1b 	.word	0x0800aa1b
 800aa04:	0800aa1b 	.word	0x0800aa1b
 800aa08:	0800aa0d 	.word	0x0800aa0d
  case DHCP_STATE_REBINDING:
  case DHCP_STATE_RENEWING:
  case DHCP_STATE_BOUND:
  case DHCP_STATE_REBOOTING:
    dhcp->tries = 0;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	2200      	movs	r2, #0
 800aa10:	729a      	strb	r2, [r3, #10]
    dhcp_reboot(netif);
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f000 fb18 	bl	800b048 <dhcp_reboot>
    break;
 800aa18:	e00a      	b.n	800aa30 <dhcp_network_changed+0x74>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */
    /* ensure we start with short timeouts, even if already discovering */
    dhcp->tries = 0;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	729a      	strb	r2, [r3, #10]
    dhcp_discover(netif);
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f000 f89f 	bl	800ab64 <dhcp_discover>
    break;
 800aa26:	bf00      	nop
 800aa28:	e002      	b.n	800aa30 <dhcp_network_changed+0x74>
    return;
 800aa2a:	bf00      	nop
 800aa2c:	e000      	b.n	800aa30 <dhcp_network_changed+0x74>
    break;
 800aa2e:	bf00      	nop
  }
}
 800aa30:	3710      	adds	r7, #16
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}
 800aa36:	bf00      	nop

0800aa38 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b084      	sub	sp, #16
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d107      	bne.n	800aa58 <dhcp_arp_reply+0x20>
 800aa48:	4b0e      	ldr	r3, [pc, #56]	; (800aa84 <dhcp_arp_reply+0x4c>)
 800aa4a:	f240 327b 	movw	r2, #891	; 0x37b
 800aa4e:	490e      	ldr	r1, [pc, #56]	; (800aa88 <dhcp_arp_reply+0x50>)
 800aa50:	480e      	ldr	r0, [pc, #56]	; (800aa8c <dhcp_arp_reply+0x54>)
 800aa52:	f003 fd65 	bl	800e520 <iprintf>
 800aa56:	e012      	b.n	800aa7e <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa5c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d00c      	beq.n	800aa7e <dhcp_arp_reply+0x46>
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	7a5b      	ldrb	r3, [r3, #9]
 800aa68:	2b08      	cmp	r3, #8
 800aa6a:	d108      	bne.n	800aa7e <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	681a      	ldr	r2, [r3, #0]
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa74:	429a      	cmp	r2, r3
 800aa76:	d102      	bne.n	800aa7e <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f000 f809 	bl	800aa90 <dhcp_decline>
    }
  }
}
 800aa7e:	3710      	adds	r7, #16
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}
 800aa84:	080109c8 	.word	0x080109c8
 800aa88:	08010a74 	.word	0x08010a74
 800aa8c:	08010a28 	.word	0x08010a28

0800aa90 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b086      	sub	sp, #24
 800aa94:	af02      	add	r7, sp, #8
 800aa96:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa9c:	60fb      	str	r3, [r7, #12]
  err_t result = ERR_OK;
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	72fb      	strb	r3, [r7, #11]
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800aaa2:	210c      	movs	r1, #12
 800aaa4:	68f8      	ldr	r0, [r7, #12]
 800aaa6:	f000 fc23 	bl	800b2f0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 800aaaa:	2204      	movs	r2, #4
 800aaac:	68f9      	ldr	r1, [r7, #12]
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f001 f8a4 	bl	800bbfc <dhcp_create_msg>
 800aab4:	4603      	mov	r3, r0
 800aab6:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
 800aab8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d12a      	bne.n	800ab16 <dhcp_decline+0x86>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 800aac0:	2204      	movs	r2, #4
 800aac2:	2132      	movs	r1, #50	; 0x32
 800aac4:	68f8      	ldr	r0, [r7, #12]
 800aac6:	f000 fc2d 	bl	800b324 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aace:	4618      	mov	r0, r3
 800aad0:	f7f8 ffa9 	bl	8003a26 <lwip_htonl>
 800aad4:	4603      	mov	r3, r0
 800aad6:	4619      	mov	r1, r3
 800aad8:	68f8      	ldr	r0, [r7, #12]
 800aada:	f000 fcbf 	bl	800b45c <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 800aade:	68f8      	ldr	r0, [r7, #12]
 800aae0:	f001 fa30 	bl	800bf44 <dhcp_option_trailer>
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	68da      	ldr	r2, [r3, #12]
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	8a9b      	ldrh	r3, [r3, #20]
 800aaec:	33f0      	adds	r3, #240	; 0xf0
 800aaee:	b29b      	uxth	r3, r3
 800aaf0:	4619      	mov	r1, r3
 800aaf2:	4610      	mov	r0, r2
 800aaf4:	f7f9 ff96 	bl	8004a24 <pbuf_realloc>

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 800aaf8:	4b16      	ldr	r3, [pc, #88]	; (800ab54 <dhcp_decline+0xc4>)
 800aafa:	6818      	ldr	r0, [r3, #0]
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	68d9      	ldr	r1, [r3, #12]
 800ab00:	4b15      	ldr	r3, [pc, #84]	; (800ab58 <dhcp_decline+0xc8>)
 800ab02:	9301      	str	r3, [sp, #4]
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	9300      	str	r3, [sp, #0]
 800ab08:	2343      	movs	r3, #67	; 0x43
 800ab0a:	4a14      	ldr	r2, [pc, #80]	; (800ab5c <dhcp_decline+0xcc>)
 800ab0c:	f7ff f9bc 	bl	8009e88 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 800ab10:	68f8      	ldr	r0, [r7, #12]
 800ab12:	f001 f9d5 	bl	800bec0 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	7a9b      	ldrb	r3, [r3, #10]
 800ab1a:	2bff      	cmp	r3, #255	; 0xff
 800ab1c:	d005      	beq.n	800ab2a <dhcp_decline+0x9a>
    dhcp->tries++;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	7a9b      	ldrb	r3, [r3, #10]
 800ab22:	3301      	adds	r3, #1
 800ab24:	b2da      	uxtb	r2, r3
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	729a      	strb	r2, [r3, #10]
  }
  msecs = 10*1000;
 800ab2a:	f242 7310 	movw	r3, #10000	; 0x2710
 800ab2e:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800ab30:	893b      	ldrh	r3, [r7, #8]
 800ab32:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800ab36:	4a0a      	ldr	r2, [pc, #40]	; (800ab60 <dhcp_decline+0xd0>)
 800ab38:	fb82 1203 	smull	r1, r2, r2, r3
 800ab3c:	1152      	asrs	r2, r2, #5
 800ab3e:	17db      	asrs	r3, r3, #31
 800ab40:	1ad3      	subs	r3, r2, r3
 800ab42:	b29a      	uxth	r2, r3
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800ab48:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3710      	adds	r7, #16
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bd80      	pop	{r7, pc}
 800ab54:	20000114 	.word	0x20000114
 800ab58:	0801163c 	.word	0x0801163c
 800ab5c:	08011640 	.word	0x08011640
 800ab60:	10624dd3 	.word	0x10624dd3

0800ab64 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b088      	sub	sp, #32
 800ab68:	af02      	add	r7, sp, #8
 800ab6a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab70:	613b      	str	r3, [r7, #16]
  err_t result = ERR_OK;
 800ab72:	2300      	movs	r3, #0
 800ab74:	73fb      	strb	r3, [r7, #15]
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800ab7c:	2106      	movs	r1, #6
 800ab7e:	6938      	ldr	r0, [r7, #16]
 800ab80:	f000 fbb6 	bl	800b2f0 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 800ab84:	2201      	movs	r2, #1
 800ab86:	6939      	ldr	r1, [r7, #16]
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f001 f837 	bl	800bbfc <dhcp_create_msg>
 800ab8e:	4603      	mov	r3, r0
 800ab90:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800ab92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d13b      	bne.n	800ac12 <dhcp_discover+0xae>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800ab9a:	2202      	movs	r2, #2
 800ab9c:	2139      	movs	r1, #57	; 0x39
 800ab9e:	6938      	ldr	r0, [r7, #16]
 800aba0:	f000 fbc0 	bl	800b324 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aba8:	4619      	mov	r1, r3
 800abaa:	6938      	ldr	r0, [r7, #16]
 800abac:	f000 fc1c 	bl	800b3e8 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800abb0:	2203      	movs	r2, #3
 800abb2:	2137      	movs	r1, #55	; 0x37
 800abb4:	6938      	ldr	r0, [r7, #16]
 800abb6:	f000 fbb5 	bl	800b324 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800abba:	2300      	movs	r3, #0
 800abbc:	75fb      	strb	r3, [r7, #23]
 800abbe:	e009      	b.n	800abd4 <dhcp_discover+0x70>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800abc0:	7dfb      	ldrb	r3, [r7, #23]
 800abc2:	4a29      	ldr	r2, [pc, #164]	; (800ac68 <dhcp_discover+0x104>)
 800abc4:	5cd3      	ldrb	r3, [r2, r3]
 800abc6:	4619      	mov	r1, r3
 800abc8:	6938      	ldr	r0, [r7, #16]
 800abca:	f000 fbe5 	bl	800b398 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800abce:	7dfb      	ldrb	r3, [r7, #23]
 800abd0:	3301      	adds	r3, #1
 800abd2:	75fb      	strb	r3, [r7, #23]
 800abd4:	7dfb      	ldrb	r3, [r7, #23]
 800abd6:	2b02      	cmp	r3, #2
 800abd8:	d9f2      	bls.n	800abc0 <dhcp_discover+0x5c>
    }
    dhcp_option_trailer(dhcp);
 800abda:	6938      	ldr	r0, [r7, #16]
 800abdc:	f001 f9b2 	bl	800bf44 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	68da      	ldr	r2, [r3, #12]
 800abe4:	693b      	ldr	r3, [r7, #16]
 800abe6:	8a9b      	ldrh	r3, [r3, #20]
 800abe8:	33f0      	adds	r3, #240	; 0xf0
 800abea:	b29b      	uxth	r3, r3
 800abec:	4619      	mov	r1, r3
 800abee:	4610      	mov	r0, r2
 800abf0:	f7f9 ff18 	bl	8004a24 <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 800abf4:	4b1d      	ldr	r3, [pc, #116]	; (800ac6c <dhcp_discover+0x108>)
 800abf6:	6818      	ldr	r0, [r3, #0]
 800abf8:	693b      	ldr	r3, [r7, #16]
 800abfa:	68d9      	ldr	r1, [r3, #12]
 800abfc:	4b1c      	ldr	r3, [pc, #112]	; (800ac70 <dhcp_discover+0x10c>)
 800abfe:	9301      	str	r3, [sp, #4]
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	9300      	str	r3, [sp, #0]
 800ac04:	2343      	movs	r3, #67	; 0x43
 800ac06:	4a1b      	ldr	r2, [pc, #108]	; (800ac74 <dhcp_discover+0x110>)
 800ac08:	f7ff f93e 	bl	8009e88 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
 800ac0c:	6938      	ldr	r0, [r7, #16]
 800ac0e:	f001 f957 	bl	800bec0 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800ac12:	693b      	ldr	r3, [r7, #16]
 800ac14:	7a9b      	ldrb	r3, [r3, #10]
 800ac16:	2bff      	cmp	r3, #255	; 0xff
 800ac18:	d005      	beq.n	800ac26 <dhcp_discover+0xc2>
    dhcp->tries++;
 800ac1a:	693b      	ldr	r3, [r7, #16]
 800ac1c:	7a9b      	ldrb	r3, [r3, #10]
 800ac1e:	3301      	adds	r3, #1
 800ac20:	b2da      	uxtb	r2, r3
 800ac22:	693b      	ldr	r3, [r7, #16]
 800ac24:	729a      	strb	r2, [r3, #10]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 800ac26:	693b      	ldr	r3, [r7, #16]
 800ac28:	7a9b      	ldrb	r3, [r3, #10]
 800ac2a:	2b05      	cmp	r3, #5
 800ac2c:	d807      	bhi.n	800ac3e <dhcp_discover+0xda>
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	7a9b      	ldrb	r3, [r3, #10]
 800ac32:	461a      	mov	r2, r3
 800ac34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ac38:	4093      	lsls	r3, r2
 800ac3a:	b29b      	uxth	r3, r3
 800ac3c:	e001      	b.n	800ac42 <dhcp_discover+0xde>
 800ac3e:	f64e 2360 	movw	r3, #60000	; 0xea60
 800ac42:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800ac44:	89bb      	ldrh	r3, [r7, #12]
 800ac46:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800ac4a:	4a0b      	ldr	r2, [pc, #44]	; (800ac78 <dhcp_discover+0x114>)
 800ac4c:	fb82 1203 	smull	r1, r2, r2, r3
 800ac50:	1152      	asrs	r2, r2, #5
 800ac52:	17db      	asrs	r3, r3, #31
 800ac54:	1ad3      	subs	r3, r2, r3
 800ac56:	b29a      	uxth	r2, r3
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800ac5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3718      	adds	r7, #24
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}
 800ac68:	20000014 	.word	0x20000014
 800ac6c:	20000114 	.word	0x20000114
 800ac70:	0801163c 	.word	0x0801163c
 800ac74:	08011640 	.word	0x08011640
 800ac78:	10624dd3 	.word	0x10624dd3

0800ac7c <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b088      	sub	sp, #32
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d107      	bne.n	800ac9a <dhcp_bind+0x1e>
 800ac8a:	4b64      	ldr	r3, [pc, #400]	; (800ae1c <dhcp_bind+0x1a0>)
 800ac8c:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800ac90:	4963      	ldr	r1, [pc, #396]	; (800ae20 <dhcp_bind+0x1a4>)
 800ac92:	4864      	ldr	r0, [pc, #400]	; (800ae24 <dhcp_bind+0x1a8>)
 800ac94:	f003 fc44 	bl	800e520 <iprintf>
 800ac98:	e0bc      	b.n	800ae14 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac9e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800aca0:	69bb      	ldr	r3, [r7, #24]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d107      	bne.n	800acb6 <dhcp_bind+0x3a>
 800aca6:	4b5d      	ldr	r3, [pc, #372]	; (800ae1c <dhcp_bind+0x1a0>)
 800aca8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800acac:	495e      	ldr	r1, [pc, #376]	; (800ae28 <dhcp_bind+0x1ac>)
 800acae:	485d      	ldr	r0, [pc, #372]	; (800ae24 <dhcp_bind+0x1a8>)
 800acb0:	f003 fc36 	bl	800e520 <iprintf>
 800acb4:	e0ae      	b.n	800ae14 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800acb6:	69bb      	ldr	r3, [r7, #24]
 800acb8:	2200      	movs	r2, #0
 800acba:	841a      	strh	r2, [r3, #32]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800acbc:	69bb      	ldr	r3, [r7, #24]
 800acbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acc4:	d019      	beq.n	800acfa <dhcp_bind+0x7e>
     /* set renewal period timer */
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800acc6:	69bb      	ldr	r3, [r7, #24]
 800acc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acca:	331e      	adds	r3, #30
 800accc:	4a57      	ldr	r2, [pc, #348]	; (800ae2c <dhcp_bind+0x1b0>)
 800acce:	fba2 2303 	umull	r2, r3, r2, r3
 800acd2:	095b      	lsrs	r3, r3, #5
 800acd4:	61fb      	str	r3, [r7, #28]
     if (timeout > 0xffff) {
 800acd6:	69fb      	ldr	r3, [r7, #28]
 800acd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acdc:	d302      	bcc.n	800ace4 <dhcp_bind+0x68>
       timeout = 0xffff;
 800acde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ace2:	61fb      	str	r3, [r7, #28]
     }
     dhcp->t0_timeout = (u16_t)timeout;
 800ace4:	69fb      	ldr	r3, [r7, #28]
 800ace6:	b29a      	uxth	r2, r3
 800ace8:	69bb      	ldr	r3, [r7, #24]
 800acea:	845a      	strh	r2, [r3, #34]	; 0x22
     if (dhcp->t0_timeout == 0) {
 800acec:	69bb      	ldr	r3, [r7, #24]
 800acee:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d102      	bne.n	800acfa <dhcp_bind+0x7e>
       dhcp->t0_timeout = 1;
 800acf4:	69bb      	ldr	r3, [r7, #24]
 800acf6:	2201      	movs	r2, #1
 800acf8:	845a      	strh	r2, [r3, #34]	; 0x22
     }
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease*1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800acfa:	69bb      	ldr	r3, [r7, #24]
 800acfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad02:	d01d      	beq.n	800ad40 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800ad04:	69bb      	ldr	r3, [r7, #24]
 800ad06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad08:	331e      	adds	r3, #30
 800ad0a:	4a48      	ldr	r2, [pc, #288]	; (800ae2c <dhcp_bind+0x1b0>)
 800ad0c:	fba2 2303 	umull	r2, r3, r2, r3
 800ad10:	095b      	lsrs	r3, r3, #5
 800ad12:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800ad14:	69fb      	ldr	r3, [r7, #28]
 800ad16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad1a:	d302      	bcc.n	800ad22 <dhcp_bind+0xa6>
      timeout = 0xffff;
 800ad1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ad20:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800ad22:	69fb      	ldr	r3, [r7, #28]
 800ad24:	b29a      	uxth	r2, r3
 800ad26:	69bb      	ldr	r3, [r7, #24]
 800ad28:	831a      	strh	r2, [r3, #24]
    if (dhcp->t1_timeout == 0) {
 800ad2a:	69bb      	ldr	r3, [r7, #24]
 800ad2c:	8b1b      	ldrh	r3, [r3, #24]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d102      	bne.n	800ad38 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800ad32:	69bb      	ldr	r3, [r7, #24]
 800ad34:	2201      	movs	r2, #1
 800ad36:	831a      	strh	r2, [r3, #24]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800ad38:	69bb      	ldr	r3, [r7, #24]
 800ad3a:	8b1a      	ldrh	r2, [r3, #24]
 800ad3c:	69bb      	ldr	r3, [r7, #24]
 800ad3e:	839a      	strh	r2, [r3, #28]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800ad40:	69bb      	ldr	r3, [r7, #24]
 800ad42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad48:	d01d      	beq.n	800ad86 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800ad4a:	69bb      	ldr	r3, [r7, #24]
 800ad4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad4e:	331e      	adds	r3, #30
 800ad50:	4a36      	ldr	r2, [pc, #216]	; (800ae2c <dhcp_bind+0x1b0>)
 800ad52:	fba2 2303 	umull	r2, r3, r2, r3
 800ad56:	095b      	lsrs	r3, r3, #5
 800ad58:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800ad5a:	69fb      	ldr	r3, [r7, #28]
 800ad5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad60:	d302      	bcc.n	800ad68 <dhcp_bind+0xec>
      timeout = 0xffff;
 800ad62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ad66:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800ad68:	69fb      	ldr	r3, [r7, #28]
 800ad6a:	b29a      	uxth	r2, r3
 800ad6c:	69bb      	ldr	r3, [r7, #24]
 800ad6e:	835a      	strh	r2, [r3, #26]
    if (dhcp->t2_timeout == 0) {
 800ad70:	69bb      	ldr	r3, [r7, #24]
 800ad72:	8b5b      	ldrh	r3, [r3, #26]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d102      	bne.n	800ad7e <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 800ad78:	69bb      	ldr	r3, [r7, #24]
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	835a      	strh	r2, [r3, #26]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800ad7e:	69bb      	ldr	r3, [r7, #24]
 800ad80:	8b5a      	ldrh	r2, [r3, #26]
 800ad82:	69bb      	ldr	r3, [r7, #24]
 800ad84:	83da      	strh	r2, [r3, #30]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800ad86:	69bb      	ldr	r3, [r7, #24]
 800ad88:	8b1a      	ldrh	r2, [r3, #24]
 800ad8a:	69bb      	ldr	r3, [r7, #24]
 800ad8c:	8b5b      	ldrh	r3, [r3, #26]
 800ad8e:	429a      	cmp	r2, r3
 800ad90:	d306      	bcc.n	800ada0 <dhcp_bind+0x124>
 800ad92:	69bb      	ldr	r3, [r7, #24]
 800ad94:	8b5b      	ldrh	r3, [r3, #26]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d002      	beq.n	800ada0 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 800ad9a:	69bb      	ldr	r3, [r7, #24]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	831a      	strh	r2, [r3, #24]
  }

  if (dhcp->subnet_mask_given) {
 800ada0:	69bb      	ldr	r3, [r7, #24]
 800ada2:	7adb      	ldrb	r3, [r3, #11]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d003      	beq.n	800adb0 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800ada8:	69bb      	ldr	r3, [r7, #24]
 800adaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adac:	613b      	str	r3, [r7, #16]
 800adae:	e014      	b.n	800adda <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800adb0:	69bb      	ldr	r3, [r7, #24]
 800adb2:	3328      	adds	r3, #40	; 0x28
 800adb4:	781b      	ldrb	r3, [r3, #0]
 800adb6:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800adb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	db02      	blt.n	800adc6 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800adc0:	23ff      	movs	r3, #255	; 0xff
 800adc2:	613b      	str	r3, [r7, #16]
 800adc4:	e009      	b.n	800adda <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 800adc6:	7dfb      	ldrb	r3, [r7, #23]
 800adc8:	2bbf      	cmp	r3, #191	; 0xbf
 800adca:	d903      	bls.n	800add4 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800adcc:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800add0:	613b      	str	r3, [r7, #16]
 800add2:	e002      	b.n	800adda <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800add4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800add8:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800adda:	69bb      	ldr	r3, [r7, #24]
 800addc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adde:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d108      	bne.n	800adf8 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800ade6:	69bb      	ldr	r3, [r7, #24]
 800ade8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800adea:	693b      	ldr	r3, [r7, #16]
 800adec:	4013      	ands	r3, r2
 800adee:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800adf6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800adf8:	210a      	movs	r1, #10
 800adfa:	69b8      	ldr	r0, [r7, #24]
 800adfc:	f000 fa78 	bl	800b2f0 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800ae00:	69bb      	ldr	r3, [r7, #24]
 800ae02:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800ae06:	f107 030c 	add.w	r3, r7, #12
 800ae0a:	f107 0210 	add.w	r2, r7, #16
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f7f9 fa7e 	bl	8004310 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800ae14:	3720      	adds	r7, #32
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}
 800ae1a:	bf00      	nop
 800ae1c:	080109c8 	.word	0x080109c8
 800ae20:	08010b08 	.word	0x08010b08
 800ae24:	08010a28 	.word	0x08010a28
 800ae28:	08010b24 	.word	0x08010b24
 800ae2c:	88888889 	.word	0x88888889

0800ae30 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b088      	sub	sp, #32
 800ae34:	af02      	add	r7, sp, #8
 800ae36:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae3c:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800ae3e:	2105      	movs	r1, #5
 800ae40:	6938      	ldr	r0, [r7, #16]
 800ae42:	f000 fa55 	bl	800b2f0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800ae46:	2203      	movs	r2, #3
 800ae48:	6939      	ldr	r1, [r7, #16]
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f000 fed6 	bl	800bbfc <dhcp_create_msg>
 800ae50:	4603      	mov	r3, r0
 800ae52:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800ae54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d13b      	bne.n	800aed4 <dhcp_renew+0xa4>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800ae5c:	2202      	movs	r2, #2
 800ae5e:	2139      	movs	r1, #57	; 0x39
 800ae60:	6938      	ldr	r0, [r7, #16]
 800ae62:	f000 fa5f 	bl	800b324 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae6a:	4619      	mov	r1, r3
 800ae6c:	6938      	ldr	r0, [r7, #16]
 800ae6e:	f000 fabb 	bl	800b3e8 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800ae72:	2203      	movs	r2, #3
 800ae74:	2137      	movs	r1, #55	; 0x37
 800ae76:	6938      	ldr	r0, [r7, #16]
 800ae78:	f000 fa54 	bl	800b324 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	75fb      	strb	r3, [r7, #23]
 800ae80:	e009      	b.n	800ae96 <dhcp_renew+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800ae82:	7dfb      	ldrb	r3, [r7, #23]
 800ae84:	4a2a      	ldr	r2, [pc, #168]	; (800af30 <dhcp_renew+0x100>)
 800ae86:	5cd3      	ldrb	r3, [r2, r3]
 800ae88:	4619      	mov	r1, r3
 800ae8a:	6938      	ldr	r0, [r7, #16]
 800ae8c:	f000 fa84 	bl	800b398 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ae90:	7dfb      	ldrb	r3, [r7, #23]
 800ae92:	3301      	adds	r3, #1
 800ae94:	75fb      	strb	r3, [r7, #23]
 800ae96:	7dfb      	ldrb	r3, [r7, #23]
 800ae98:	2b02      	cmp	r3, #2
 800ae9a:	d9f2      	bls.n	800ae82 <dhcp_renew+0x52>
#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
 800ae9c:	6938      	ldr	r0, [r7, #16]
 800ae9e:	f001 f851 	bl	800bf44 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800aea2:	693b      	ldr	r3, [r7, #16]
 800aea4:	68da      	ldr	r2, [r3, #12]
 800aea6:	693b      	ldr	r3, [r7, #16]
 800aea8:	8a9b      	ldrh	r3, [r3, #20]
 800aeaa:	33f0      	adds	r3, #240	; 0xf0
 800aeac:	b29b      	uxth	r3, r3
 800aeae:	4619      	mov	r1, r3
 800aeb0:	4610      	mov	r0, r2
 800aeb2:	f7f9 fdb7 	bl	8004a24 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 800aeb6:	4b1f      	ldr	r3, [pc, #124]	; (800af34 <dhcp_renew+0x104>)
 800aeb8:	6818      	ldr	r0, [r3, #0]
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	68d9      	ldr	r1, [r3, #12]
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	9300      	str	r3, [sp, #0]
 800aec8:	2343      	movs	r3, #67	; 0x43
 800aeca:	f7fe ff9f 	bl	8009e0c <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800aece:	6938      	ldr	r0, [r7, #16]
 800aed0:	f000 fff6 	bl	800bec0 <dhcp_delete_msg>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800aed4:	693b      	ldr	r3, [r7, #16]
 800aed6:	7a9b      	ldrb	r3, [r3, #10]
 800aed8:	2bff      	cmp	r3, #255	; 0xff
 800aeda:	d005      	beq.n	800aee8 <dhcp_renew+0xb8>
    dhcp->tries++;
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	7a9b      	ldrb	r3, [r3, #10]
 800aee0:	3301      	adds	r3, #1
 800aee2:	b2da      	uxtb	r2, r3
 800aee4:	693b      	ldr	r3, [r7, #16]
 800aee6:	729a      	strb	r2, [r3, #10]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 800aee8:	693b      	ldr	r3, [r7, #16]
 800aeea:	7a9b      	ldrb	r3, [r3, #10]
 800aeec:	2b09      	cmp	r3, #9
 800aeee:	d80a      	bhi.n	800af06 <dhcp_renew+0xd6>
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	7a9b      	ldrb	r3, [r3, #10]
 800aef4:	b29b      	uxth	r3, r3
 800aef6:	461a      	mov	r2, r3
 800aef8:	0152      	lsls	r2, r2, #5
 800aefa:	1ad2      	subs	r2, r2, r3
 800aefc:	0092      	lsls	r2, r2, #2
 800aefe:	4413      	add	r3, r2
 800af00:	011b      	lsls	r3, r3, #4
 800af02:	b29b      	uxth	r3, r3
 800af04:	e001      	b.n	800af0a <dhcp_renew+0xda>
 800af06:	f644 6320 	movw	r3, #20000	; 0x4e20
 800af0a:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800af0c:	89bb      	ldrh	r3, [r7, #12]
 800af0e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800af12:	4a09      	ldr	r2, [pc, #36]	; (800af38 <dhcp_renew+0x108>)
 800af14:	fb82 1203 	smull	r1, r2, r2, r3
 800af18:	1152      	asrs	r2, r2, #5
 800af1a:	17db      	asrs	r3, r3, #31
 800af1c:	1ad3      	subs	r3, r2, r3
 800af1e:	b29a      	uxth	r2, r3
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800af24:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800af28:	4618      	mov	r0, r3
 800af2a:	3718      	adds	r7, #24
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}
 800af30:	20000014 	.word	0x20000014
 800af34:	20000114 	.word	0x20000114
 800af38:	10624dd3 	.word	0x10624dd3

0800af3c <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b088      	sub	sp, #32
 800af40:	af02      	add	r7, sp, #8
 800af42:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af48:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800af4a:	2104      	movs	r1, #4
 800af4c:	6938      	ldr	r0, [r7, #16]
 800af4e:	f000 f9cf 	bl	800b2f0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800af52:	2203      	movs	r2, #3
 800af54:	6939      	ldr	r1, [r7, #16]
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f000 fe50 	bl	800bbfc <dhcp_create_msg>
 800af5c:	4603      	mov	r3, r0
 800af5e:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800af60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d139      	bne.n	800afdc <dhcp_rebind+0xa0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800af68:	2202      	movs	r2, #2
 800af6a:	2139      	movs	r1, #57	; 0x39
 800af6c:	6938      	ldr	r0, [r7, #16]
 800af6e:	f000 f9d9 	bl	800b324 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af76:	4619      	mov	r1, r3
 800af78:	6938      	ldr	r0, [r7, #16]
 800af7a:	f000 fa35 	bl	800b3e8 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800af7e:	2203      	movs	r2, #3
 800af80:	2137      	movs	r1, #55	; 0x37
 800af82:	6938      	ldr	r0, [r7, #16]
 800af84:	f000 f9ce 	bl	800b324 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800af88:	2300      	movs	r3, #0
 800af8a:	75fb      	strb	r3, [r7, #23]
 800af8c:	e009      	b.n	800afa2 <dhcp_rebind+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800af8e:	7dfb      	ldrb	r3, [r7, #23]
 800af90:	4a29      	ldr	r2, [pc, #164]	; (800b038 <dhcp_rebind+0xfc>)
 800af92:	5cd3      	ldrb	r3, [r2, r3]
 800af94:	4619      	mov	r1, r3
 800af96:	6938      	ldr	r0, [r7, #16]
 800af98:	f000 f9fe 	bl	800b398 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800af9c:	7dfb      	ldrb	r3, [r7, #23]
 800af9e:	3301      	adds	r3, #1
 800afa0:	75fb      	strb	r3, [r7, #23]
 800afa2:	7dfb      	ldrb	r3, [r7, #23]
 800afa4:	2b02      	cmp	r3, #2
 800afa6:	d9f2      	bls.n	800af8e <dhcp_rebind+0x52>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 800afa8:	6938      	ldr	r0, [r7, #16]
 800afaa:	f000 ffcb 	bl	800bf44 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	68da      	ldr	r2, [r3, #12]
 800afb2:	693b      	ldr	r3, [r7, #16]
 800afb4:	8a9b      	ldrh	r3, [r3, #20]
 800afb6:	33f0      	adds	r3, #240	; 0xf0
 800afb8:	b29b      	uxth	r3, r3
 800afba:	4619      	mov	r1, r3
 800afbc:	4610      	mov	r0, r2
 800afbe:	f7f9 fd31 	bl	8004a24 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 800afc2:	4b1e      	ldr	r3, [pc, #120]	; (800b03c <dhcp_rebind+0x100>)
 800afc4:	6818      	ldr	r0, [r3, #0]
 800afc6:	693b      	ldr	r3, [r7, #16]
 800afc8:	68d9      	ldr	r1, [r3, #12]
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	9300      	str	r3, [sp, #0]
 800afce:	2343      	movs	r3, #67	; 0x43
 800afd0:	4a1b      	ldr	r2, [pc, #108]	; (800b040 <dhcp_rebind+0x104>)
 800afd2:	f7fe ff1b 	bl	8009e0c <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800afd6:	6938      	ldr	r0, [r7, #16]
 800afd8:	f000 ff72 	bl	800bec0 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800afdc:	693b      	ldr	r3, [r7, #16]
 800afde:	7a9b      	ldrb	r3, [r3, #10]
 800afe0:	2bff      	cmp	r3, #255	; 0xff
 800afe2:	d005      	beq.n	800aff0 <dhcp_rebind+0xb4>
    dhcp->tries++;
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	7a9b      	ldrb	r3, [r3, #10]
 800afe8:	3301      	adds	r3, #1
 800afea:	b2da      	uxtb	r2, r3
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	7a9b      	ldrb	r3, [r3, #10]
 800aff4:	2b09      	cmp	r3, #9
 800aff6:	d80a      	bhi.n	800b00e <dhcp_rebind+0xd2>
 800aff8:	693b      	ldr	r3, [r7, #16]
 800affa:	7a9b      	ldrb	r3, [r3, #10]
 800affc:	b29b      	uxth	r3, r3
 800affe:	461a      	mov	r2, r3
 800b000:	0152      	lsls	r2, r2, #5
 800b002:	1ad2      	subs	r2, r2, r3
 800b004:	0092      	lsls	r2, r2, #2
 800b006:	4413      	add	r3, r2
 800b008:	00db      	lsls	r3, r3, #3
 800b00a:	b29b      	uxth	r3, r3
 800b00c:	e001      	b.n	800b012 <dhcp_rebind+0xd6>
 800b00e:	f242 7310 	movw	r3, #10000	; 0x2710
 800b012:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800b014:	89bb      	ldrh	r3, [r7, #12]
 800b016:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800b01a:	4a0a      	ldr	r2, [pc, #40]	; (800b044 <dhcp_rebind+0x108>)
 800b01c:	fb82 1203 	smull	r1, r2, r2, r3
 800b020:	1152      	asrs	r2, r2, #5
 800b022:	17db      	asrs	r3, r3, #31
 800b024:	1ad3      	subs	r3, r2, r3
 800b026:	b29a      	uxth	r2, r3
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800b02c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b030:	4618      	mov	r0, r3
 800b032:	3718      	adds	r7, #24
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}
 800b038:	20000014 	.word	0x20000014
 800b03c:	20000114 	.word	0x20000114
 800b040:	08011640 	.word	0x08011640
 800b044:	10624dd3 	.word	0x10624dd3

0800b048 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b088      	sub	sp, #32
 800b04c:	af02      	add	r7, sp, #8
 800b04e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b054:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800b056:	2103      	movs	r1, #3
 800b058:	6938      	ldr	r0, [r7, #16]
 800b05a:	f000 f949 	bl	800b2f0 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 800b05e:	2203      	movs	r2, #3
 800b060:	6939      	ldr	r1, [r7, #16]
 800b062:	6878      	ldr	r0, [r7, #4]
 800b064:	f000 fdca 	bl	800bbfc <dhcp_create_msg>
 800b068:	4603      	mov	r3, r0
 800b06a:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 800b06c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d147      	bne.n	800b104 <dhcp_reboot+0xbc>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800b074:	2202      	movs	r2, #2
 800b076:	2139      	movs	r1, #57	; 0x39
 800b078:	6938      	ldr	r0, [r7, #16]
 800b07a:	f000 f953 	bl	800b324 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800b07e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b082:	6938      	ldr	r0, [r7, #16]
 800b084:	f000 f9b0 	bl	800b3e8 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 800b088:	2204      	movs	r2, #4
 800b08a:	2132      	movs	r1, #50	; 0x32
 800b08c:	6938      	ldr	r0, [r7, #16]
 800b08e:	f000 f949 	bl	800b324 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b096:	4618      	mov	r0, r3
 800b098:	f7f8 fcc5 	bl	8003a26 <lwip_htonl>
 800b09c:	4603      	mov	r3, r0
 800b09e:	4619      	mov	r1, r3
 800b0a0:	6938      	ldr	r0, [r7, #16]
 800b0a2:	f000 f9db 	bl	800b45c <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800b0a6:	2203      	movs	r2, #3
 800b0a8:	2137      	movs	r1, #55	; 0x37
 800b0aa:	6938      	ldr	r0, [r7, #16]
 800b0ac:	f000 f93a 	bl	800b324 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	75fb      	strb	r3, [r7, #23]
 800b0b4:	e009      	b.n	800b0ca <dhcp_reboot+0x82>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800b0b6:	7dfb      	ldrb	r3, [r7, #23]
 800b0b8:	4a29      	ldr	r2, [pc, #164]	; (800b160 <dhcp_reboot+0x118>)
 800b0ba:	5cd3      	ldrb	r3, [r2, r3]
 800b0bc:	4619      	mov	r1, r3
 800b0be:	6938      	ldr	r0, [r7, #16]
 800b0c0:	f000 f96a 	bl	800b398 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800b0c4:	7dfb      	ldrb	r3, [r7, #23]
 800b0c6:	3301      	adds	r3, #1
 800b0c8:	75fb      	strb	r3, [r7, #23]
 800b0ca:	7dfb      	ldrb	r3, [r7, #23]
 800b0cc:	2b02      	cmp	r3, #2
 800b0ce:	d9f2      	bls.n	800b0b6 <dhcp_reboot+0x6e>
    }

    dhcp_option_trailer(dhcp);
 800b0d0:	6938      	ldr	r0, [r7, #16]
 800b0d2:	f000 ff37 	bl	800bf44 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	68da      	ldr	r2, [r3, #12]
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	8a9b      	ldrh	r3, [r3, #20]
 800b0de:	33f0      	adds	r3, #240	; 0xf0
 800b0e0:	b29b      	uxth	r3, r3
 800b0e2:	4619      	mov	r1, r3
 800b0e4:	4610      	mov	r0, r2
 800b0e6:	f7f9 fc9d 	bl	8004a24 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 800b0ea:	4b1e      	ldr	r3, [pc, #120]	; (800b164 <dhcp_reboot+0x11c>)
 800b0ec:	6818      	ldr	r0, [r3, #0]
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	68d9      	ldr	r1, [r3, #12]
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	9300      	str	r3, [sp, #0]
 800b0f6:	2343      	movs	r3, #67	; 0x43
 800b0f8:	4a1b      	ldr	r2, [pc, #108]	; (800b168 <dhcp_reboot+0x120>)
 800b0fa:	f7fe fe87 	bl	8009e0c <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800b0fe:	6938      	ldr	r0, [r7, #16]
 800b100:	f000 fede 	bl	800bec0 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800b104:	693b      	ldr	r3, [r7, #16]
 800b106:	7a9b      	ldrb	r3, [r3, #10]
 800b108:	2bff      	cmp	r3, #255	; 0xff
 800b10a:	d005      	beq.n	800b118 <dhcp_reboot+0xd0>
    dhcp->tries++;
 800b10c:	693b      	ldr	r3, [r7, #16]
 800b10e:	7a9b      	ldrb	r3, [r3, #10]
 800b110:	3301      	adds	r3, #1
 800b112:	b2da      	uxtb	r2, r3
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	7a9b      	ldrb	r3, [r3, #10]
 800b11c:	2b09      	cmp	r3, #9
 800b11e:	d80a      	bhi.n	800b136 <dhcp_reboot+0xee>
 800b120:	693b      	ldr	r3, [r7, #16]
 800b122:	7a9b      	ldrb	r3, [r3, #10]
 800b124:	b29b      	uxth	r3, r3
 800b126:	461a      	mov	r2, r3
 800b128:	0152      	lsls	r2, r2, #5
 800b12a:	1ad2      	subs	r2, r2, r3
 800b12c:	0092      	lsls	r2, r2, #2
 800b12e:	4413      	add	r3, r2
 800b130:	00db      	lsls	r3, r3, #3
 800b132:	b29b      	uxth	r3, r3
 800b134:	e001      	b.n	800b13a <dhcp_reboot+0xf2>
 800b136:	f242 7310 	movw	r3, #10000	; 0x2710
 800b13a:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800b13c:	89bb      	ldrh	r3, [r7, #12]
 800b13e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800b142:	4a0a      	ldr	r2, [pc, #40]	; (800b16c <dhcp_reboot+0x124>)
 800b144:	fb82 1203 	smull	r1, r2, r2, r3
 800b148:	1152      	asrs	r2, r2, #5
 800b14a:	17db      	asrs	r3, r3, #31
 800b14c:	1ad3      	subs	r3, r2, r3
 800b14e:	b29a      	uxth	r2, r3
 800b150:	693b      	ldr	r3, [r7, #16]
 800b152:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800b154:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b158:	4618      	mov	r0, r3
 800b15a:	3718      	adds	r7, #24
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}
 800b160:	20000014 	.word	0x20000014
 800b164:	20000114 	.word	0x20000114
 800b168:	08011640 	.word	0x08011640
 800b16c:	10624dd3 	.word	0x10624dd3

0800b170 <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
 800b170:	b580      	push	{r7, lr}
 800b172:	b088      	sub	sp, #32
 800b174:	af02      	add	r7, sp, #8
 800b176:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b17c:	617b      	str	r3, [r7, #20]
  err_t result;
  ip_addr_t server_ip_addr;
  u8_t is_dhcp_supplied_address;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
  if (dhcp == NULL) {
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d102      	bne.n	800b18a <dhcp_release+0x1a>
    return ERR_ARG;
 800b184:	f06f 030f 	mvn.w	r3, #15
 800b188:	e072      	b.n	800b270 <dhcp_release+0x100>
  }
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b18e:	60fb      	str	r3, [r7, #12]

  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f000 ff31 	bl	800bff8 <dhcp_supplied_address>
 800b196:	4603      	mov	r3, r0
 800b198:	74fb      	strb	r3, [r7, #19]

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800b19a:	2100      	movs	r1, #0
 800b19c:	6978      	ldr	r0, [r7, #20]
 800b19e:	f000 f8a7 	bl	800b2f0 <dhcp_set_state>
  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800b1a2:	697b      	ldr	r3, [r7, #20]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	625a      	str	r2, [r3, #36]	; 0x24
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800b1a8:	697b      	ldr	r3, [r7, #20]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	629a      	str	r2, [r3, #40]	; 0x28
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	62da      	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800b1b4:	697b      	ldr	r3, [r7, #20]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	2200      	movs	r2, #0
 800b1be:	63da      	str	r2, [r3, #60]	; 0x3c
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b1c4:	697b      	ldr	r3, [r7, #20]
 800b1c6:	639a      	str	r2, [r3, #56]	; 0x38
 800b1c8:	697b      	ldr	r3, [r7, #20]
 800b1ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1cc:	697b      	ldr	r3, [r7, #20]
 800b1ce:	635a      	str	r2, [r3, #52]	; 0x34
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800b1d0:	697b      	ldr	r3, [r7, #20]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	845a      	strh	r2, [r3, #34]	; 0x22
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	841a      	strh	r2, [r3, #32]
 800b1de:	697b      	ldr	r3, [r7, #20]
 800b1e0:	8c1a      	ldrh	r2, [r3, #32]
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	83da      	strh	r2, [r3, #30]
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	8bda      	ldrh	r2, [r3, #30]
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	839a      	strh	r2, [r3, #28]

  if (!is_dhcp_supplied_address) {
 800b1ee:	7cfb      	ldrb	r3, [r7, #19]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d101      	bne.n	800b1f8 <dhcp_release+0x88>
    /* don't issue release message when address is not dhcp-assigned */
    return ERR_OK;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	e03b      	b.n	800b270 <dhcp_release+0x100>
  }

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 800b1f8:	2207      	movs	r2, #7
 800b1fa:	6979      	ldr	r1, [r7, #20]
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f000 fcfd 	bl	800bbfc <dhcp_create_msg>
 800b202:	4603      	mov	r3, r0
 800b204:	74bb      	strb	r3, [r7, #18]
  if (result == ERR_OK) {
 800b206:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d128      	bne.n	800b260 <dhcp_release+0xf0>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 800b20e:	2204      	movs	r2, #4
 800b210:	2136      	movs	r1, #54	; 0x36
 800b212:	6978      	ldr	r0, [r7, #20]
 800b214:	f000 f886 	bl	800b324 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	4618      	mov	r0, r3
 800b21c:	f7f8 fc03 	bl	8003a26 <lwip_htonl>
 800b220:	4603      	mov	r3, r0
 800b222:	4619      	mov	r1, r3
 800b224:	6978      	ldr	r0, [r7, #20]
 800b226:	f000 f919 	bl	800b45c <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 800b22a:	6978      	ldr	r0, [r7, #20]
 800b22c:	f000 fe8a 	bl	800bf44 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	68da      	ldr	r2, [r3, #12]
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	8a9b      	ldrh	r3, [r3, #20]
 800b238:	33f0      	adds	r3, #240	; 0xf0
 800b23a:	b29b      	uxth	r3, r3
 800b23c:	4619      	mov	r1, r3
 800b23e:	4610      	mov	r0, r2
 800b240:	f7f9 fbf0 	bl	8004a24 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
 800b244:	4b0c      	ldr	r3, [pc, #48]	; (800b278 <dhcp_release+0x108>)
 800b246:	6818      	ldr	r0, [r3, #0]
 800b248:	697b      	ldr	r3, [r7, #20]
 800b24a:	68d9      	ldr	r1, [r3, #12]
 800b24c:	f107 020c 	add.w	r2, r7, #12
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	9300      	str	r3, [sp, #0]
 800b254:	2343      	movs	r3, #67	; 0x43
 800b256:	f7fe fdd9 	bl	8009e0c <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800b25a:	6978      	ldr	r0, [r7, #20]
 800b25c:	f000 fe30 	bl	800bec0 <dhcp_delete_msg>
  } else {
    /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800b260:	4b06      	ldr	r3, [pc, #24]	; (800b27c <dhcp_release+0x10c>)
 800b262:	4a06      	ldr	r2, [pc, #24]	; (800b27c <dhcp_release+0x10c>)
 800b264:	4905      	ldr	r1, [pc, #20]	; (800b27c <dhcp_release+0x10c>)
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f7f9 f852 	bl	8004310 <netif_set_addr>

  return result;
 800b26c:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 800b270:	4618      	mov	r0, r3
 800b272:	3718      	adds	r7, #24
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}
 800b278:	20000114 	.word	0x20000114
 800b27c:	0801163c 	.word	0x0801163c

0800b280 <dhcp_stop>:
 *
 * @param netif The network interface to stop DHCP on
 */
void
dhcp_stop(struct netif *netif)
{
 800b280:	b580      	push	{r7, lr}
 800b282:	b084      	sub	sp, #16
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d107      	bne.n	800b29e <dhcp_stop+0x1e>
 800b28e:	4b14      	ldr	r3, [pc, #80]	; (800b2e0 <dhcp_stop+0x60>)
 800b290:	f240 5242 	movw	r2, #1346	; 0x542
 800b294:	4913      	ldr	r1, [pc, #76]	; (800b2e4 <dhcp_stop+0x64>)
 800b296:	4814      	ldr	r0, [pc, #80]	; (800b2e8 <dhcp_stop+0x68>)
 800b298:	f003 f942 	bl	800e520 <iprintf>
 800b29c:	e01d      	b.n	800b2da <dhcp_stop+0x5a>
  dhcp = netif_dhcp_data(netif);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2a2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
  /* netif is DHCP configured? */
  if (dhcp != NULL) {
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d017      	beq.n	800b2da <dhcp_stop+0x5a>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */

    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	685b      	ldr	r3, [r3, #4]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d006      	beq.n	800b2c0 <dhcp_stop+0x40>
 800b2b2:	4b0b      	ldr	r3, [pc, #44]	; (800b2e0 <dhcp_stop+0x60>)
 800b2b4:	f240 524f 	movw	r2, #1359	; 0x54f
 800b2b8:	490c      	ldr	r1, [pc, #48]	; (800b2ec <dhcp_stop+0x6c>)
 800b2ba:	480b      	ldr	r0, [pc, #44]	; (800b2e8 <dhcp_stop+0x68>)
 800b2bc:	f003 f930 	bl	800e520 <iprintf>
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800b2c0:	2100      	movs	r1, #0
 800b2c2:	68f8      	ldr	r0, [r7, #12]
 800b2c4:	f000 f814 	bl	800b2f0 <dhcp_set_state>

    if (dhcp->pcb_allocated != 0) {
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	7a1b      	ldrb	r3, [r3, #8]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d004      	beq.n	800b2da <dhcp_stop+0x5a>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800b2d0:	f7ff f816 	bl	800a300 <dhcp_dec_pcb_refcount>
      dhcp->pcb_allocated = 0;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	721a      	strb	r2, [r3, #8]
    }
  }
}
 800b2da:	3710      	adds	r7, #16
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}
 800b2e0:	080109c8 	.word	0x080109c8
 800b2e4:	08010b3c 	.word	0x08010b3c
 800b2e8:	08010a28 	.word	0x08010a28
 800b2ec:	08010af4 	.word	0x08010af4

0800b2f0 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b083      	sub	sp, #12
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
 800b2f8:	460b      	mov	r3, r1
 800b2fa:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	7a5b      	ldrb	r3, [r3, #9]
 800b300:	78fa      	ldrb	r2, [r7, #3]
 800b302:	429a      	cmp	r2, r3
 800b304:	d008      	beq.n	800b318 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	78fa      	ldrb	r2, [r7, #3]
 800b30a:	725a      	strb	r2, [r3, #9]
    dhcp->tries = 0;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2200      	movs	r2, #0
 800b310:	729a      	strb	r2, [r3, #10]
    dhcp->request_timeout = 0;
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2200      	movs	r2, #0
 800b316:	82da      	strh	r2, [r3, #22]
  }
}
 800b318:	bf00      	nop
 800b31a:	370c      	adds	r7, #12
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bc80      	pop	{r7}
 800b320:	4770      	bx	lr
	...

0800b324 <dhcp_option>:
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b082      	sub	sp, #8
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
 800b32c:	460b      	mov	r3, r1
 800b32e:	70fb      	strb	r3, [r7, #3]
 800b330:	4613      	mov	r3, r2
 800b332:	70bb      	strb	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	8a9b      	ldrh	r3, [r3, #20]
 800b338:	461a      	mov	r2, r3
 800b33a:	78bb      	ldrb	r3, [r7, #2]
 800b33c:	4413      	add	r3, r2
 800b33e:	3302      	adds	r3, #2
 800b340:	2b44      	cmp	r3, #68	; 0x44
 800b342:	d906      	bls.n	800b352 <dhcp_option+0x2e>
 800b344:	4b11      	ldr	r3, [pc, #68]	; (800b38c <dhcp_option+0x68>)
 800b346:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800b34a:	4911      	ldr	r1, [pc, #68]	; (800b390 <dhcp_option+0x6c>)
 800b34c:	4811      	ldr	r0, [pc, #68]	; (800b394 <dhcp_option+0x70>)
 800b34e:	f003 f8e7 	bl	800e520 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	691a      	ldr	r2, [r3, #16]
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	8a9b      	ldrh	r3, [r3, #20]
 800b35a:	1c59      	adds	r1, r3, #1
 800b35c:	b288      	uxth	r0, r1
 800b35e:	6879      	ldr	r1, [r7, #4]
 800b360:	8288      	strh	r0, [r1, #20]
 800b362:	4413      	add	r3, r2
 800b364:	78fa      	ldrb	r2, [r7, #3]
 800b366:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	691a      	ldr	r2, [r3, #16]
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	8a9b      	ldrh	r3, [r3, #20]
 800b372:	1c59      	adds	r1, r3, #1
 800b374:	b288      	uxth	r0, r1
 800b376:	6879      	ldr	r1, [r7, #4]
 800b378:	8288      	strh	r0, [r1, #20]
 800b37a:	4413      	add	r3, r2
 800b37c:	78ba      	ldrb	r2, [r7, #2]
 800b37e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 800b382:	bf00      	nop
 800b384:	3708      	adds	r7, #8
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}
 800b38a:	bf00      	nop
 800b38c:	080109c8 	.word	0x080109c8
 800b390:	08010b58 	.word	0x08010b58
 800b394:	08010a28 	.word	0x08010a28

0800b398 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b082      	sub	sp, #8
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
 800b3a0:	460b      	mov	r3, r1
 800b3a2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	8a9b      	ldrh	r3, [r3, #20]
 800b3a8:	2b43      	cmp	r3, #67	; 0x43
 800b3aa:	d906      	bls.n	800b3ba <dhcp_option_byte+0x22>
 800b3ac:	4b0b      	ldr	r3, [pc, #44]	; (800b3dc <dhcp_option_byte+0x44>)
 800b3ae:	f240 527b 	movw	r2, #1403	; 0x57b
 800b3b2:	490b      	ldr	r1, [pc, #44]	; (800b3e0 <dhcp_option_byte+0x48>)
 800b3b4:	480b      	ldr	r0, [pc, #44]	; (800b3e4 <dhcp_option_byte+0x4c>)
 800b3b6:	f003 f8b3 	bl	800e520 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	691a      	ldr	r2, [r3, #16]
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	8a9b      	ldrh	r3, [r3, #20]
 800b3c2:	1c59      	adds	r1, r3, #1
 800b3c4:	b288      	uxth	r0, r1
 800b3c6:	6879      	ldr	r1, [r7, #4]
 800b3c8:	8288      	strh	r0, [r1, #20]
 800b3ca:	4413      	add	r3, r2
 800b3cc:	78fa      	ldrb	r2, [r7, #3]
 800b3ce:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 800b3d2:	bf00      	nop
 800b3d4:	3708      	adds	r7, #8
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}
 800b3da:	bf00      	nop
 800b3dc:	080109c8 	.word	0x080109c8
 800b3e0:	08010ba0 	.word	0x08010ba0
 800b3e4:	08010a28 	.word	0x08010a28

0800b3e8 <dhcp_option_short>:

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
 800b3e8:	b590      	push	{r4, r7, lr}
 800b3ea:	b083      	sub	sp, #12
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
 800b3f0:	460b      	mov	r3, r1
 800b3f2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	8a9b      	ldrh	r3, [r3, #20]
 800b3f8:	3302      	adds	r3, #2
 800b3fa:	2b44      	cmp	r3, #68	; 0x44
 800b3fc:	d906      	bls.n	800b40c <dhcp_option_short+0x24>
 800b3fe:	4b14      	ldr	r3, [pc, #80]	; (800b450 <dhcp_option_short+0x68>)
 800b400:	f240 5282 	movw	r2, #1410	; 0x582
 800b404:	4913      	ldr	r1, [pc, #76]	; (800b454 <dhcp_option_short+0x6c>)
 800b406:	4814      	ldr	r0, [pc, #80]	; (800b458 <dhcp_option_short+0x70>)
 800b408:	f003 f88a 	bl	800e520 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800b40c:	887b      	ldrh	r3, [r7, #2]
 800b40e:	0a1b      	lsrs	r3, r3, #8
 800b410:	b298      	uxth	r0, r3
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	691a      	ldr	r2, [r3, #16]
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	8a9b      	ldrh	r3, [r3, #20]
 800b41a:	1c59      	adds	r1, r3, #1
 800b41c:	b28c      	uxth	r4, r1
 800b41e:	6879      	ldr	r1, [r7, #4]
 800b420:	828c      	strh	r4, [r1, #20]
 800b422:	b2c1      	uxtb	r1, r0
 800b424:	4413      	add	r3, r2
 800b426:	460a      	mov	r2, r1
 800b428:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	691a      	ldr	r2, [r3, #16]
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	8a9b      	ldrh	r3, [r3, #20]
 800b434:	1c59      	adds	r1, r3, #1
 800b436:	b288      	uxth	r0, r1
 800b438:	6879      	ldr	r1, [r7, #4]
 800b43a:	8288      	strh	r0, [r1, #20]
 800b43c:	8879      	ldrh	r1, [r7, #2]
 800b43e:	b2c9      	uxtb	r1, r1
 800b440:	4413      	add	r3, r2
 800b442:	460a      	mov	r2, r1
 800b444:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 800b448:	bf00      	nop
 800b44a:	370c      	adds	r7, #12
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd90      	pop	{r4, r7, pc}
 800b450:	080109c8 	.word	0x080109c8
 800b454:	08010bdc 	.word	0x08010bdc
 800b458:	08010a28 	.word	0x08010a28

0800b45c <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
 800b45c:	b590      	push	{r4, r7, lr}
 800b45e:	b083      	sub	sp, #12
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
 800b464:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	8a9b      	ldrh	r3, [r3, #20]
 800b46a:	3304      	adds	r3, #4
 800b46c:	2b44      	cmp	r3, #68	; 0x44
 800b46e:	d906      	bls.n	800b47e <dhcp_option_long+0x22>
 800b470:	4b22      	ldr	r3, [pc, #136]	; (800b4fc <dhcp_option_long+0xa0>)
 800b472:	f240 528a 	movw	r2, #1418	; 0x58a
 800b476:	4922      	ldr	r1, [pc, #136]	; (800b500 <dhcp_option_long+0xa4>)
 800b478:	4822      	ldr	r0, [pc, #136]	; (800b504 <dhcp_option_long+0xa8>)
 800b47a:	f003 f851 	bl	800e520 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	0e18      	lsrs	r0, r3, #24
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	691a      	ldr	r2, [r3, #16]
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	8a9b      	ldrh	r3, [r3, #20]
 800b48a:	1c59      	adds	r1, r3, #1
 800b48c:	b28c      	uxth	r4, r1
 800b48e:	6879      	ldr	r1, [r7, #4]
 800b490:	828c      	strh	r4, [r1, #20]
 800b492:	b2c1      	uxtb	r1, r0
 800b494:	4413      	add	r3, r2
 800b496:	460a      	mov	r2, r1
 800b498:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	0c18      	lsrs	r0, r3, #16
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	691a      	ldr	r2, [r3, #16]
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	8a9b      	ldrh	r3, [r3, #20]
 800b4a8:	1c59      	adds	r1, r3, #1
 800b4aa:	b28c      	uxth	r4, r1
 800b4ac:	6879      	ldr	r1, [r7, #4]
 800b4ae:	828c      	strh	r4, [r1, #20]
 800b4b0:	b2c1      	uxtb	r1, r0
 800b4b2:	4413      	add	r3, r2
 800b4b4:	460a      	mov	r2, r1
 800b4b6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800b4ba:	683b      	ldr	r3, [r7, #0]
 800b4bc:	0a18      	lsrs	r0, r3, #8
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	691a      	ldr	r2, [r3, #16]
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	8a9b      	ldrh	r3, [r3, #20]
 800b4c6:	1c59      	adds	r1, r3, #1
 800b4c8:	b28c      	uxth	r4, r1
 800b4ca:	6879      	ldr	r1, [r7, #4]
 800b4cc:	828c      	strh	r4, [r1, #20]
 800b4ce:	b2c1      	uxtb	r1, r0
 800b4d0:	4413      	add	r3, r2
 800b4d2:	460a      	mov	r2, r1
 800b4d4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	691a      	ldr	r2, [r3, #16]
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	8a9b      	ldrh	r3, [r3, #20]
 800b4e0:	1c59      	adds	r1, r3, #1
 800b4e2:	b288      	uxth	r0, r1
 800b4e4:	6879      	ldr	r1, [r7, #4]
 800b4e6:	8288      	strh	r0, [r1, #20]
 800b4e8:	6839      	ldr	r1, [r7, #0]
 800b4ea:	b2c9      	uxtb	r1, r1
 800b4ec:	4413      	add	r3, r2
 800b4ee:	460a      	mov	r2, r1
 800b4f0:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 800b4f4:	bf00      	nop
 800b4f6:	370c      	adds	r7, #12
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bd90      	pop	{r4, r7, pc}
 800b4fc:	080109c8 	.word	0x080109c8
 800b500:	08010c20 	.word	0x08010c20
 800b504:	08010a28 	.word	0x08010a28

0800b508 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct dhcp *dhcp, struct pbuf *p)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b08e      	sub	sp, #56	; 0x38
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
 800b510:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 800b512:	2300      	movs	r3, #0
 800b514:	627b      	str	r3, [r7, #36]	; 0x24
  int parse_sname_as_options = 0;
 800b516:	2300      	movs	r3, #0
 800b518:	623b      	str	r3, [r7, #32]

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 800b51a:	2208      	movs	r2, #8
 800b51c:	2100      	movs	r1, #0
 800b51e:	48b3      	ldr	r0, [pc, #716]	; (800b7ec <dhcp_parse_reply+0x2e4>)
 800b520:	f002 fff6 	bl	800e510 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	895b      	ldrh	r3, [r3, #10]
 800b528:	2b2b      	cmp	r3, #43	; 0x2b
 800b52a:	d802      	bhi.n	800b532 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 800b52c:	f06f 0301 	mvn.w	r3, #1
 800b530:	e26a      	b.n	800ba08 <dhcp_parse_reply+0x500>
  }
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	685a      	ldr	r2, [r3, #4]
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	605a      	str	r2, [r3, #4]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 800b53a:	23f0      	movs	r3, #240	; 0xf0
 800b53c:	85fb      	strh	r3, [r7, #46]	; 0x2e
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	891b      	ldrh	r3, [r3, #8]
 800b542:	85bb      	strh	r3, [r7, #44]	; 0x2c
again:
  q = p;
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	62bb      	str	r3, [r7, #40]	; 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 800b548:	e00c      	b.n	800b564 <dhcp_parse_reply+0x5c>
    options_idx -= q->len;
 800b54a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b54c:	895b      	ldrh	r3, [r3, #10]
 800b54e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b550:	1ad3      	subs	r3, r2, r3
 800b552:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max -= q->len;
 800b554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b556:	895b      	ldrh	r3, [r3, #10]
 800b558:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800b55a:	1ad3      	subs	r3, r2, r3
 800b55c:	85bb      	strh	r3, [r7, #44]	; 0x2c
    q = q->next;
 800b55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	62bb      	str	r3, [r7, #40]	; 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 800b564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b566:	2b00      	cmp	r3, #0
 800b568:	d004      	beq.n	800b574 <dhcp_parse_reply+0x6c>
 800b56a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b56c:	895b      	ldrh	r3, [r3, #10]
 800b56e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b570:	429a      	cmp	r2, r3
 800b572:	d2ea      	bcs.n	800b54a <dhcp_parse_reply+0x42>
  }
  if (q == NULL) {
 800b574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b576:	2b00      	cmp	r3, #0
 800b578:	d102      	bne.n	800b580 <dhcp_parse_reply+0x78>
    return ERR_BUF;
 800b57a:	f06f 0301 	mvn.w	r3, #1
 800b57e:	e243      	b.n	800ba08 <dhcp_parse_reply+0x500>
  }
  offset = options_idx;
 800b580:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b582:	867b      	strh	r3, [r7, #50]	; 0x32
  offset_max = options_idx_max;
 800b584:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b586:	863b      	strh	r3, [r7, #48]	; 0x30
  options = (u8_t*)q->payload;
 800b588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b58a:	685b      	ldr	r3, [r3, #4]
 800b58c:	637b      	str	r3, [r7, #52]	; 0x34
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800b58e:	e1fb      	b.n	800b988 <dhcp_parse_reply+0x480>
    u8_t op = options[offset];
 800b590:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b592:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b594:	4413      	add	r3, r2
 800b596:	781b      	ldrb	r3, [r3, #0]
 800b598:	757b      	strb	r3, [r7, #21]
    u8_t len;
    u8_t decode_len = 0;
 800b59a:	2300      	movs	r3, #0
 800b59c:	77bb      	strb	r3, [r7, #30]
    int decode_idx = -1;
 800b59e:	f04f 33ff 	mov.w	r3, #4294967295
 800b5a2:	61bb      	str	r3, [r7, #24]
    u16_t val_offset = offset + 2;
 800b5a4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b5a6:	3302      	adds	r3, #2
 800b5a8:	82fb      	strh	r3, [r7, #22]
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 800b5aa:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b5ac:	3301      	adds	r3, #1
 800b5ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5b0:	8952      	ldrh	r2, [r2, #10]
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	da06      	bge.n	800b5c4 <dhcp_parse_reply+0xbc>
      len = options[offset + 1];
 800b5b6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b5b8:	3301      	adds	r3, #1
 800b5ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b5bc:	4413      	add	r3, r2
 800b5be:	781b      	ldrb	r3, [r3, #0]
 800b5c0:	77fb      	strb	r3, [r7, #31]
 800b5c2:	e00a      	b.n	800b5da <dhcp_parse_reply+0xd2>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 800b5c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d004      	beq.n	800b5d6 <dhcp_parse_reply+0xce>
 800b5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	685b      	ldr	r3, [r3, #4]
 800b5d2:	781b      	ldrb	r3, [r3, #0]
 800b5d4:	e000      	b.n	800b5d8 <dhcp_parse_reply+0xd0>
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	77fb      	strb	r3, [r7, #31]
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 800b5da:	7ffb      	ldrb	r3, [r7, #31]
 800b5dc:	77bb      	strb	r3, [r7, #30]
    switch(op) {
 800b5de:	7d7b      	ldrb	r3, [r7, #21]
 800b5e0:	2b3b      	cmp	r3, #59	; 0x3b
 800b5e2:	f200 8121 	bhi.w	800b828 <dhcp_parse_reply+0x320>
 800b5e6:	a201      	add	r2, pc, #4	; (adr r2, 800b5ec <dhcp_parse_reply+0xe4>)
 800b5e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5ec:	0800b6dd 	.word	0x0800b6dd
 800b5f0:	0800b6ed 	.word	0x0800b6ed
 800b5f4:	0800b829 	.word	0x0800b829
 800b5f8:	0800b70d 	.word	0x0800b70d
 800b5fc:	0800b829 	.word	0x0800b829
 800b600:	0800b829 	.word	0x0800b829
 800b604:	0800b829 	.word	0x0800b829
 800b608:	0800b829 	.word	0x0800b829
 800b60c:	0800b829 	.word	0x0800b829
 800b610:	0800b829 	.word	0x0800b829
 800b614:	0800b829 	.word	0x0800b829
 800b618:	0800b829 	.word	0x0800b829
 800b61c:	0800b829 	.word	0x0800b829
 800b620:	0800b829 	.word	0x0800b829
 800b624:	0800b829 	.word	0x0800b829
 800b628:	0800b829 	.word	0x0800b829
 800b62c:	0800b829 	.word	0x0800b829
 800b630:	0800b829 	.word	0x0800b829
 800b634:	0800b829 	.word	0x0800b829
 800b638:	0800b829 	.word	0x0800b829
 800b63c:	0800b829 	.word	0x0800b829
 800b640:	0800b829 	.word	0x0800b829
 800b644:	0800b829 	.word	0x0800b829
 800b648:	0800b829 	.word	0x0800b829
 800b64c:	0800b829 	.word	0x0800b829
 800b650:	0800b829 	.word	0x0800b829
 800b654:	0800b829 	.word	0x0800b829
 800b658:	0800b829 	.word	0x0800b829
 800b65c:	0800b829 	.word	0x0800b829
 800b660:	0800b829 	.word	0x0800b829
 800b664:	0800b829 	.word	0x0800b829
 800b668:	0800b829 	.word	0x0800b829
 800b66c:	0800b829 	.word	0x0800b829
 800b670:	0800b829 	.word	0x0800b829
 800b674:	0800b829 	.word	0x0800b829
 800b678:	0800b829 	.word	0x0800b829
 800b67c:	0800b829 	.word	0x0800b829
 800b680:	0800b829 	.word	0x0800b829
 800b684:	0800b829 	.word	0x0800b829
 800b688:	0800b829 	.word	0x0800b829
 800b68c:	0800b829 	.word	0x0800b829
 800b690:	0800b829 	.word	0x0800b829
 800b694:	0800b829 	.word	0x0800b829
 800b698:	0800b829 	.word	0x0800b829
 800b69c:	0800b829 	.word	0x0800b829
 800b6a0:	0800b829 	.word	0x0800b829
 800b6a4:	0800b829 	.word	0x0800b829
 800b6a8:	0800b829 	.word	0x0800b829
 800b6ac:	0800b829 	.word	0x0800b829
 800b6b0:	0800b829 	.word	0x0800b829
 800b6b4:	0800b829 	.word	0x0800b829
 800b6b8:	0800b733 	.word	0x0800b733
 800b6bc:	0800b753 	.word	0x0800b753
 800b6c0:	0800b78d 	.word	0x0800b78d
 800b6c4:	0800b7ad 	.word	0x0800b7ad
 800b6c8:	0800b829 	.word	0x0800b829
 800b6cc:	0800b829 	.word	0x0800b829
 800b6d0:	0800b829 	.word	0x0800b829
 800b6d4:	0800b7cd 	.word	0x0800b7cd
 800b6d8:	0800b809 	.word	0x0800b809
      /* case(DHCP_OPTION_END): handled above */
      case(DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 800b6dc:	2300      	movs	r3, #0
 800b6de:	77fb      	strb	r3, [r7, #31]
 800b6e0:	7ffb      	ldrb	r3, [r7, #31]
 800b6e2:	77bb      	strb	r3, [r7, #30]
        /* will be increased below */
        offset--;
 800b6e4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b6e6:	3b01      	subs	r3, #1
 800b6e8:	867b      	strh	r3, [r7, #50]	; 0x32
        break;
 800b6ea:	e0a0      	b.n	800b82e <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800b6ec:	7ffb      	ldrb	r3, [r7, #31]
 800b6ee:	2b04      	cmp	r3, #4
 800b6f0:	d009      	beq.n	800b706 <dhcp_parse_reply+0x1fe>
 800b6f2:	4b3f      	ldr	r3, [pc, #252]	; (800b7f0 <dhcp_parse_reply+0x2e8>)
 800b6f4:	f240 52f6 	movw	r2, #1526	; 0x5f6
 800b6f8:	493e      	ldr	r1, [pc, #248]	; (800b7f4 <dhcp_parse_reply+0x2ec>)
 800b6fa:	483f      	ldr	r0, [pc, #252]	; (800b7f8 <dhcp_parse_reply+0x2f0>)
 800b6fc:	f002 ff10 	bl	800e520 <iprintf>
 800b700:	f06f 0305 	mvn.w	r3, #5
 800b704:	e180      	b.n	800ba08 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800b706:	2306      	movs	r3, #6
 800b708:	61bb      	str	r3, [r7, #24]
        break;
 800b70a:	e090      	b.n	800b82e <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 800b70c:	2304      	movs	r3, #4
 800b70e:	77bb      	strb	r3, [r7, #30]
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800b710:	7ffa      	ldrb	r2, [r7, #31]
 800b712:	7fbb      	ldrb	r3, [r7, #30]
 800b714:	429a      	cmp	r2, r3
 800b716:	d209      	bcs.n	800b72c <dhcp_parse_reply+0x224>
 800b718:	4b35      	ldr	r3, [pc, #212]	; (800b7f0 <dhcp_parse_reply+0x2e8>)
 800b71a:	f240 52fb 	movw	r2, #1531	; 0x5fb
 800b71e:	4937      	ldr	r1, [pc, #220]	; (800b7fc <dhcp_parse_reply+0x2f4>)
 800b720:	4835      	ldr	r0, [pc, #212]	; (800b7f8 <dhcp_parse_reply+0x2f0>)
 800b722:	f002 fefd 	bl	800e520 <iprintf>
 800b726:	f06f 0305 	mvn.w	r3, #5
 800b72a:	e16d      	b.n	800ba08 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800b72c:	2307      	movs	r3, #7
 800b72e:	61bb      	str	r3, [r7, #24]
        break;
 800b730:	e07d      	b.n	800b82e <dhcp_parse_reply+0x326>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case(DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800b732:	7ffb      	ldrb	r3, [r7, #31]
 800b734:	2b04      	cmp	r3, #4
 800b736:	d009      	beq.n	800b74c <dhcp_parse_reply+0x244>
 800b738:	4b2d      	ldr	r3, [pc, #180]	; (800b7f0 <dhcp_parse_reply+0x2e8>)
 800b73a:	f240 6209 	movw	r2, #1545	; 0x609
 800b73e:	492d      	ldr	r1, [pc, #180]	; (800b7f4 <dhcp_parse_reply+0x2ec>)
 800b740:	482d      	ldr	r0, [pc, #180]	; (800b7f8 <dhcp_parse_reply+0x2f0>)
 800b742:	f002 feed 	bl	800e520 <iprintf>
 800b746:	f06f 0305 	mvn.w	r3, #5
 800b74a:	e15d      	b.n	800ba08 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800b74c:	2303      	movs	r3, #3
 800b74e:	61bb      	str	r3, [r7, #24]
        break;
 800b750:	e06d      	b.n	800b82e <dhcp_parse_reply+0x326>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case(DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800b752:	7ffb      	ldrb	r3, [r7, #31]
 800b754:	2b01      	cmp	r3, #1
 800b756:	d009      	beq.n	800b76c <dhcp_parse_reply+0x264>
 800b758:	4b25      	ldr	r3, [pc, #148]	; (800b7f0 <dhcp_parse_reply+0x2e8>)
 800b75a:	f240 6217 	movw	r2, #1559	; 0x617
 800b75e:	4928      	ldr	r1, [pc, #160]	; (800b800 <dhcp_parse_reply+0x2f8>)
 800b760:	4825      	ldr	r0, [pc, #148]	; (800b7f8 <dhcp_parse_reply+0x2f0>)
 800b762:	f002 fedd 	bl	800e520 <iprintf>
 800b766:	f06f 0305 	mvn.w	r3, #5
 800b76a:	e14d      	b.n	800ba08 <dhcp_parse_reply+0x500>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800b76c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b76e:	2bf0      	cmp	r3, #240	; 0xf0
 800b770:	d009      	beq.n	800b786 <dhcp_parse_reply+0x27e>
 800b772:	4b1f      	ldr	r3, [pc, #124]	; (800b7f0 <dhcp_parse_reply+0x2e8>)
 800b774:	f240 6219 	movw	r2, #1561	; 0x619
 800b778:	4922      	ldr	r1, [pc, #136]	; (800b804 <dhcp_parse_reply+0x2fc>)
 800b77a:	481f      	ldr	r0, [pc, #124]	; (800b7f8 <dhcp_parse_reply+0x2f0>)
 800b77c:	f002 fed0 	bl	800e520 <iprintf>
 800b780:	f06f 0305 	mvn.w	r3, #5
 800b784:	e140      	b.n	800ba08 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800b786:	2300      	movs	r3, #0
 800b788:	61bb      	str	r3, [r7, #24]
        break;
 800b78a:	e050      	b.n	800b82e <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800b78c:	7ffb      	ldrb	r3, [r7, #31]
 800b78e:	2b01      	cmp	r3, #1
 800b790:	d009      	beq.n	800b7a6 <dhcp_parse_reply+0x29e>
 800b792:	4b17      	ldr	r3, [pc, #92]	; (800b7f0 <dhcp_parse_reply+0x2e8>)
 800b794:	f240 621d 	movw	r2, #1565	; 0x61d
 800b798:	4919      	ldr	r1, [pc, #100]	; (800b800 <dhcp_parse_reply+0x2f8>)
 800b79a:	4817      	ldr	r0, [pc, #92]	; (800b7f8 <dhcp_parse_reply+0x2f0>)
 800b79c:	f002 fec0 	bl	800e520 <iprintf>
 800b7a0:	f06f 0305 	mvn.w	r3, #5
 800b7a4:	e130      	b.n	800ba08 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	61bb      	str	r3, [r7, #24]
        break;
 800b7aa:	e040      	b.n	800b82e <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800b7ac:	7ffb      	ldrb	r3, [r7, #31]
 800b7ae:	2b04      	cmp	r3, #4
 800b7b0:	d009      	beq.n	800b7c6 <dhcp_parse_reply+0x2be>
 800b7b2:	4b0f      	ldr	r3, [pc, #60]	; (800b7f0 <dhcp_parse_reply+0x2e8>)
 800b7b4:	f240 6221 	movw	r2, #1569	; 0x621
 800b7b8:	490e      	ldr	r1, [pc, #56]	; (800b7f4 <dhcp_parse_reply+0x2ec>)
 800b7ba:	480f      	ldr	r0, [pc, #60]	; (800b7f8 <dhcp_parse_reply+0x2f0>)
 800b7bc:	f002 feb0 	bl	800e520 <iprintf>
 800b7c0:	f06f 0305 	mvn.w	r3, #5
 800b7c4:	e120      	b.n	800ba08 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800b7c6:	2302      	movs	r3, #2
 800b7c8:	61bb      	str	r3, [r7, #24]
        break;
 800b7ca:	e030      	b.n	800b82e <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800b7cc:	7ffb      	ldrb	r3, [r7, #31]
 800b7ce:	2b04      	cmp	r3, #4
 800b7d0:	d009      	beq.n	800b7e6 <dhcp_parse_reply+0x2de>
 800b7d2:	4b07      	ldr	r3, [pc, #28]	; (800b7f0 <dhcp_parse_reply+0x2e8>)
 800b7d4:	f240 6225 	movw	r2, #1573	; 0x625
 800b7d8:	4906      	ldr	r1, [pc, #24]	; (800b7f4 <dhcp_parse_reply+0x2ec>)
 800b7da:	4807      	ldr	r0, [pc, #28]	; (800b7f8 <dhcp_parse_reply+0x2f0>)
 800b7dc:	f002 fea0 	bl	800e520 <iprintf>
 800b7e0:	f06f 0305 	mvn.w	r3, #5
 800b7e4:	e110      	b.n	800ba08 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_T1;
 800b7e6:	2304      	movs	r3, #4
 800b7e8:	61bb      	str	r3, [r7, #24]
        break;
 800b7ea:	e020      	b.n	800b82e <dhcp_parse_reply+0x326>
 800b7ec:	20006900 	.word	0x20006900
 800b7f0:	080109c8 	.word	0x080109c8
 800b7f4:	08010c60 	.word	0x08010c60
 800b7f8:	08010a28 	.word	0x08010a28
 800b7fc:	08010c6c 	.word	0x08010c6c
 800b800:	08010c80 	.word	0x08010c80
 800b804:	08010c8c 	.word	0x08010c8c
      case(DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800b808:	7ffb      	ldrb	r3, [r7, #31]
 800b80a:	2b04      	cmp	r3, #4
 800b80c:	d009      	beq.n	800b822 <dhcp_parse_reply+0x31a>
 800b80e:	4b80      	ldr	r3, [pc, #512]	; (800ba10 <dhcp_parse_reply+0x508>)
 800b810:	f240 6229 	movw	r2, #1577	; 0x629
 800b814:	497f      	ldr	r1, [pc, #508]	; (800ba14 <dhcp_parse_reply+0x50c>)
 800b816:	4880      	ldr	r0, [pc, #512]	; (800ba18 <dhcp_parse_reply+0x510>)
 800b818:	f002 fe82 	bl	800e520 <iprintf>
 800b81c:	f06f 0305 	mvn.w	r3, #5
 800b820:	e0f2      	b.n	800ba08 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_T2;
 800b822:	2305      	movs	r3, #5
 800b824:	61bb      	str	r3, [r7, #24]
        break;
 800b826:	e002      	b.n	800b82e <dhcp_parse_reply+0x326>
      default:
        decode_len = 0;
 800b828:	2300      	movs	r3, #0
 800b82a:	77bb      	strb	r3, [r7, #30]
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        break;
 800b82c:	bf00      	nop
    }
    offset += len + 2;
 800b82e:	7ffb      	ldrb	r3, [r7, #31]
 800b830:	b29a      	uxth	r2, r3
 800b832:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b834:	4413      	add	r3, r2
 800b836:	b29b      	uxth	r3, r3
 800b838:	3302      	adds	r3, #2
 800b83a:	867b      	strh	r3, [r7, #50]	; 0x32
    if (decode_len > 0) {
 800b83c:	7fbb      	ldrb	r3, [r7, #30]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d079      	beq.n	800b936 <dhcp_parse_reply+0x42e>
      u32_t value = 0;
 800b842:	2300      	movs	r3, #0
 800b844:	60bb      	str	r3, [r7, #8]
      u16_t copy_len;
decode_next:
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800b846:	69bb      	ldr	r3, [r7, #24]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	db02      	blt.n	800b852 <dhcp_parse_reply+0x34a>
 800b84c:	69bb      	ldr	r3, [r7, #24]
 800b84e:	2b07      	cmp	r3, #7
 800b850:	dd06      	ble.n	800b860 <dhcp_parse_reply+0x358>
 800b852:	4b6f      	ldr	r3, [pc, #444]	; (800ba10 <dhcp_parse_reply+0x508>)
 800b854:	f240 6236 	movw	r2, #1590	; 0x636
 800b858:	4970      	ldr	r1, [pc, #448]	; (800ba1c <dhcp_parse_reply+0x514>)
 800b85a:	486f      	ldr	r0, [pc, #444]	; (800ba18 <dhcp_parse_reply+0x510>)
 800b85c:	f002 fe60 	bl	800e520 <iprintf>
      if (!dhcp_option_given(dhcp, decode_idx)) {
 800b860:	4a6f      	ldr	r2, [pc, #444]	; (800ba20 <dhcp_parse_reply+0x518>)
 800b862:	69bb      	ldr	r3, [r7, #24]
 800b864:	4413      	add	r3, r2
 800b866:	781b      	ldrb	r3, [r3, #0]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d164      	bne.n	800b936 <dhcp_parse_reply+0x42e>
        copy_len = LWIP_MIN(decode_len, 4);
 800b86c:	7fbb      	ldrb	r3, [r7, #30]
 800b86e:	2b04      	cmp	r3, #4
 800b870:	bf28      	it	cs
 800b872:	2304      	movcs	r3, #4
 800b874:	b2db      	uxtb	r3, r3
 800b876:	827b      	strh	r3, [r7, #18]
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 800b878:	8afb      	ldrh	r3, [r7, #22]
 800b87a:	8a7a      	ldrh	r2, [r7, #18]
 800b87c:	f107 0108 	add.w	r1, r7, #8
 800b880:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b882:	f7f9 fc41 	bl	8005108 <pbuf_copy_partial>
 800b886:	4603      	mov	r3, r0
 800b888:	461a      	mov	r2, r3
 800b88a:	8a7b      	ldrh	r3, [r7, #18]
 800b88c:	4293      	cmp	r3, r2
 800b88e:	d002      	beq.n	800b896 <dhcp_parse_reply+0x38e>
          return ERR_BUF;
 800b890:	f06f 0301 	mvn.w	r3, #1
 800b894:	e0b8      	b.n	800ba08 <dhcp_parse_reply+0x500>
        }
        if (decode_len > 4) {
 800b896:	7fbb      	ldrb	r3, [r7, #30]
 800b898:	2b04      	cmp	r3, #4
 800b89a:	d927      	bls.n	800b8ec <dhcp_parse_reply+0x3e4>
          /* decode more than one u32_t */
          LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800b89c:	7fbb      	ldrb	r3, [r7, #30]
 800b89e:	f003 0303 	and.w	r3, r3, #3
 800b8a2:	b2db      	uxtb	r3, r3
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d009      	beq.n	800b8bc <dhcp_parse_reply+0x3b4>
 800b8a8:	4b59      	ldr	r3, [pc, #356]	; (800ba10 <dhcp_parse_reply+0x508>)
 800b8aa:	f240 623e 	movw	r2, #1598	; 0x63e
 800b8ae:	495d      	ldr	r1, [pc, #372]	; (800ba24 <dhcp_parse_reply+0x51c>)
 800b8b0:	4859      	ldr	r0, [pc, #356]	; (800ba18 <dhcp_parse_reply+0x510>)
 800b8b2:	f002 fe35 	bl	800e520 <iprintf>
 800b8b6:	f06f 0305 	mvn.w	r3, #5
 800b8ba:	e0a5      	b.n	800ba08 <dhcp_parse_reply+0x500>
          dhcp_got_option(dhcp, decode_idx);
 800b8bc:	4a58      	ldr	r2, [pc, #352]	; (800ba20 <dhcp_parse_reply+0x518>)
 800b8be:	69bb      	ldr	r3, [r7, #24]
 800b8c0:	4413      	add	r3, r2
 800b8c2:	2201      	movs	r2, #1
 800b8c4:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800b8c6:	68bb      	ldr	r3, [r7, #8]
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f7f8 f8ac 	bl	8003a26 <lwip_htonl>
 800b8ce:	4601      	mov	r1, r0
 800b8d0:	4a55      	ldr	r2, [pc, #340]	; (800ba28 <dhcp_parse_reply+0x520>)
 800b8d2:	69bb      	ldr	r3, [r7, #24]
 800b8d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          decode_len -= 4;
 800b8d8:	7fbb      	ldrb	r3, [r7, #30]
 800b8da:	3b04      	subs	r3, #4
 800b8dc:	77bb      	strb	r3, [r7, #30]
          val_offset += 4;
 800b8de:	8afb      	ldrh	r3, [r7, #22]
 800b8e0:	3304      	adds	r3, #4
 800b8e2:	82fb      	strh	r3, [r7, #22]
          decode_idx++;
 800b8e4:	69bb      	ldr	r3, [r7, #24]
 800b8e6:	3301      	adds	r3, #1
 800b8e8:	61bb      	str	r3, [r7, #24]
          goto decode_next;
 800b8ea:	e7ac      	b.n	800b846 <dhcp_parse_reply+0x33e>
        } else if (decode_len == 4) {
 800b8ec:	7fbb      	ldrb	r3, [r7, #30]
 800b8ee:	2b04      	cmp	r3, #4
 800b8f0:	d106      	bne.n	800b900 <dhcp_parse_reply+0x3f8>
          value = lwip_ntohl(value);
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f7f8 f896 	bl	8003a26 <lwip_htonl>
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	60bb      	str	r3, [r7, #8]
 800b8fe:	e010      	b.n	800b922 <dhcp_parse_reply+0x41a>
        } else {
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800b900:	7fbb      	ldrb	r3, [r7, #30]
 800b902:	2b01      	cmp	r3, #1
 800b904:	d009      	beq.n	800b91a <dhcp_parse_reply+0x412>
 800b906:	4b42      	ldr	r3, [pc, #264]	; (800ba10 <dhcp_parse_reply+0x508>)
 800b908:	f44f 62c9 	mov.w	r2, #1608	; 0x648
 800b90c:	4947      	ldr	r1, [pc, #284]	; (800ba2c <dhcp_parse_reply+0x524>)
 800b90e:	4842      	ldr	r0, [pc, #264]	; (800ba18 <dhcp_parse_reply+0x510>)
 800b910:	f002 fe06 	bl	800e520 <iprintf>
 800b914:	f06f 0305 	mvn.w	r3, #5
 800b918:	e076      	b.n	800ba08 <dhcp_parse_reply+0x500>
          value = ((u8_t*)&value)[0];
 800b91a:	f107 0308 	add.w	r3, r7, #8
 800b91e:	781b      	ldrb	r3, [r3, #0]
 800b920:	60bb      	str	r3, [r7, #8]
        }
        dhcp_got_option(dhcp, decode_idx);
 800b922:	4a3f      	ldr	r2, [pc, #252]	; (800ba20 <dhcp_parse_reply+0x518>)
 800b924:	69bb      	ldr	r3, [r7, #24]
 800b926:	4413      	add	r3, r2
 800b928:	2201      	movs	r2, #1
 800b92a:	701a      	strb	r2, [r3, #0]
        dhcp_set_option_value(dhcp, decode_idx, value);
 800b92c:	68ba      	ldr	r2, [r7, #8]
 800b92e:	493e      	ldr	r1, [pc, #248]	; (800ba28 <dhcp_parse_reply+0x520>)
 800b930:	69bb      	ldr	r3, [r7, #24]
 800b932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      }
    }
    if (offset >= q->len) {
 800b936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b938:	895b      	ldrh	r3, [r3, #10]
 800b93a:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800b93c:	429a      	cmp	r2, r3
 800b93e:	d323      	bcc.n	800b988 <dhcp_parse_reply+0x480>
      offset -= q->len;
 800b940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b942:	895b      	ldrh	r3, [r3, #10]
 800b944:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800b946:	1ad3      	subs	r3, r2, r3
 800b948:	867b      	strh	r3, [r7, #50]	; 0x32
      offset_max -= q->len;
 800b94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b94c:	895b      	ldrh	r3, [r3, #10]
 800b94e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800b950:	1ad3      	subs	r3, r2, r3
 800b952:	863b      	strh	r3, [r7, #48]	; 0x30
      if ((offset < offset_max) && offset_max) {
 800b954:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800b956:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b958:	429a      	cmp	r2, r3
 800b95a:	d223      	bcs.n	800b9a4 <dhcp_parse_reply+0x49c>
 800b95c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d020      	beq.n	800b9a4 <dhcp_parse_reply+0x49c>
        q = q->next;
 800b962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	62bb      	str	r3, [r7, #40]	; 0x28
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800b968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d109      	bne.n	800b982 <dhcp_parse_reply+0x47a>
 800b96e:	4b28      	ldr	r3, [pc, #160]	; (800ba10 <dhcp_parse_reply+0x508>)
 800b970:	f240 6254 	movw	r2, #1620	; 0x654
 800b974:	492e      	ldr	r1, [pc, #184]	; (800ba30 <dhcp_parse_reply+0x528>)
 800b976:	4828      	ldr	r0, [pc, #160]	; (800ba18 <dhcp_parse_reply+0x510>)
 800b978:	f002 fdd2 	bl	800e520 <iprintf>
 800b97c:	f06f 0305 	mvn.w	r3, #5
 800b980:	e042      	b.n	800ba08 <dhcp_parse_reply+0x500>
        options = (u8_t*)q->payload;
 800b982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b984:	685b      	ldr	r3, [r3, #4]
 800b986:	637b      	str	r3, [r7, #52]	; 0x34
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800b988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d00a      	beq.n	800b9a4 <dhcp_parse_reply+0x49c>
 800b98e:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800b990:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b992:	429a      	cmp	r2, r3
 800b994:	d206      	bcs.n	800b9a4 <dhcp_parse_reply+0x49c>
 800b996:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b998:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b99a:	4413      	add	r3, r2
 800b99c:	781b      	ldrb	r3, [r3, #0]
 800b99e:	2bff      	cmp	r3, #255	; 0xff
 800b9a0:	f47f adf6 	bne.w	800b590 <dhcp_parse_reply+0x88>
        break;
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 800b9a4:	4b1e      	ldr	r3, [pc, #120]	; (800ba20 <dhcp_parse_reply+0x518>)
 800b9a6:	781b      	ldrb	r3, [r3, #0]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d018      	beq.n	800b9de <dhcp_parse_reply+0x4d6>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800b9ac:	4b1e      	ldr	r3, [pc, #120]	; (800ba28 <dhcp_parse_reply+0x520>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800b9b2:	4b1b      	ldr	r3, [pc, #108]	; (800ba20 <dhcp_parse_reply+0x518>)
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	2b01      	cmp	r3, #1
 800b9bc:	d102      	bne.n	800b9c4 <dhcp_parse_reply+0x4bc>
      parse_file_as_options = 1;
 800b9be:	2301      	movs	r3, #1
 800b9c0:	627b      	str	r3, [r7, #36]	; 0x24
 800b9c2:	e00c      	b.n	800b9de <dhcp_parse_reply+0x4d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	2b02      	cmp	r3, #2
 800b9c8:	d102      	bne.n	800b9d0 <dhcp_parse_reply+0x4c8>
      parse_sname_as_options = 1;
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	623b      	str	r3, [r7, #32]
 800b9ce:	e006      	b.n	800b9de <dhcp_parse_reply+0x4d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	2b03      	cmp	r3, #3
 800b9d4:	d103      	bne.n	800b9de <dhcp_parse_reply+0x4d6>
      parse_sname_as_options = 1;
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	623b      	str	r3, [r7, #32]
      parse_file_as_options = 1;
 800b9da:	2301      	movs	r3, #1
 800b9dc:	627b      	str	r3, [r7, #36]	; 0x24
      /* make sure the string is really NULL-terminated */
      dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
    }
#endif /* LWIP_DHCP_BOOTP_FILE */
  }
  if (parse_file_as_options) {
 800b9de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d006      	beq.n	800b9f2 <dhcp_parse_reply+0x4ea>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	627b      	str	r3, [r7, #36]	; 0x24
    options_idx = DHCP_FILE_OFS;
 800b9e8:	236c      	movs	r3, #108	; 0x6c
 800b9ea:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800b9ec:	23ec      	movs	r3, #236	; 0xec
 800b9ee:	85bb      	strh	r3, [r7, #44]	; 0x2c
    goto again;
 800b9f0:	e5a8      	b.n	800b544 <dhcp_parse_reply+0x3c>
  } else if (parse_sname_as_options) {
 800b9f2:	6a3b      	ldr	r3, [r7, #32]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d006      	beq.n	800ba06 <dhcp_parse_reply+0x4fe>
    parse_sname_as_options = 0;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	623b      	str	r3, [r7, #32]
    options_idx = DHCP_SNAME_OFS;
 800b9fc:	232c      	movs	r3, #44	; 0x2c
 800b9fe:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800ba00:	236c      	movs	r3, #108	; 0x6c
 800ba02:	85bb      	strh	r3, [r7, #44]	; 0x2c
    goto again;
 800ba04:	e59e      	b.n	800b544 <dhcp_parse_reply+0x3c>
  }
  return ERR_OK;
 800ba06:	2300      	movs	r3, #0
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	3738      	adds	r7, #56	; 0x38
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}
 800ba10:	080109c8 	.word	0x080109c8
 800ba14:	08010c60 	.word	0x08010c60
 800ba18:	08010a28 	.word	0x08010a28
 800ba1c:	08010ca4 	.word	0x08010ca4
 800ba20:	20006900 	.word	0x20006900
 800ba24:	08010cb8 	.word	0x08010cb8
 800ba28:	20006908 	.word	0x20006908
 800ba2c:	08010cd0 	.word	0x08010cd0
 800ba30:	08010ce4 	.word	0x08010ce4

0800ba34 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b08a      	sub	sp, #40	; 0x28
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	60f8      	str	r0, [r7, #12]
 800ba3c:	60b9      	str	r1, [r7, #8]
 800ba3e:	607a      	str	r2, [r7, #4]
 800ba40:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 800ba42:	4b68      	ldr	r3, [pc, #416]	; (800bbe4 <dhcp_recv+0x1b0>)
 800ba44:	685b      	ldr	r3, [r3, #4]
 800ba46:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ba48:	6a3b      	ldr	r3, [r7, #32]
 800ba4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba4c:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	685b      	ldr	r3, [r3, #4]
 800ba52:	61bb      	str	r3, [r7, #24]
  u8_t i;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 800ba54:	69fb      	ldr	r3, [r7, #28]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	f000 80a9 	beq.w	800bbae <dhcp_recv+0x17a>
 800ba5c:	69fb      	ldr	r3, [r7, #28]
 800ba5e:	7a1b      	ldrb	r3, [r3, #8]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	f000 80a4 	beq.w	800bbae <dhcp_recv+0x17a>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 800ba66:	69fb      	ldr	r3, [r7, #28]
 800ba68:	685b      	ldr	r3, [r3, #4]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d006      	beq.n	800ba7c <dhcp_recv+0x48>
 800ba6e:	4b5e      	ldr	r3, [pc, #376]	; (800bbe8 <dhcp_recv+0x1b4>)
 800ba70:	f44f 62d5 	mov.w	r2, #1704	; 0x6a8
 800ba74:	495d      	ldr	r1, [pc, #372]	; (800bbec <dhcp_recv+0x1b8>)
 800ba76:	485e      	ldr	r0, [pc, #376]	; (800bbf0 <dhcp_recv+0x1bc>)
 800ba78:	f002 fd52 	bl	800e520 <iprintf>

  if (p->len < DHCP_MIN_REPLY_LEN) {
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	895b      	ldrh	r3, [r3, #10]
 800ba80:	2b2b      	cmp	r3, #43	; 0x2b
 800ba82:	f240 8096 	bls.w	800bbb2 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 800ba86:	69bb      	ldr	r3, [r7, #24]
 800ba88:	781b      	ldrb	r3, [r3, #0]
 800ba8a:	2b02      	cmp	r3, #2
 800ba8c:	f040 8093 	bne.w	800bbb6 <dhcp_recv+0x182>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 800ba90:	2300      	movs	r3, #0
 800ba92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ba96:	e012      	b.n	800babe <dhcp_recv+0x8a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 800ba98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba9c:	6a3a      	ldr	r2, [r7, #32]
 800ba9e:	4413      	add	r3, r2
 800baa0:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800baa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800baa8:	69b9      	ldr	r1, [r7, #24]
 800baaa:	440b      	add	r3, r1
 800baac:	7f1b      	ldrb	r3, [r3, #28]
 800baae:	429a      	cmp	r2, r3
 800bab0:	f040 8083 	bne.w	800bbba <dhcp_recv+0x186>
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 800bab4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bab8:	3301      	adds	r3, #1
 800baba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800babe:	6a3b      	ldr	r3, [r7, #32]
 800bac0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800bac4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800bac8:	429a      	cmp	r2, r3
 800baca:	d207      	bcs.n	800badc <dhcp_recv+0xa8>
 800bacc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bad0:	2b05      	cmp	r3, #5
 800bad2:	d803      	bhi.n	800badc <dhcp_recv+0xa8>
 800bad4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bad8:	2b0f      	cmp	r3, #15
 800bada:	d9dd      	bls.n	800ba98 <dhcp_recv+0x64>
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 800badc:	69bb      	ldr	r3, [r7, #24]
 800bade:	685b      	ldr	r3, [r3, #4]
 800bae0:	4618      	mov	r0, r3
 800bae2:	f7f7 ffa0 	bl	8003a26 <lwip_htonl>
 800bae6:	4602      	mov	r2, r0
 800bae8:	69fb      	ldr	r3, [r7, #28]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	429a      	cmp	r2, r3
 800baee:	d166      	bne.n	800bbbe <dhcp_recv+0x18a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",lwip_ntohl(reply_msg->xid),dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
 800baf0:	6879      	ldr	r1, [r7, #4]
 800baf2:	69f8      	ldr	r0, [r7, #28]
 800baf4:	f7ff fd08 	bl	800b508 <dhcp_parse_reply>
 800baf8:	4603      	mov	r3, r0
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d161      	bne.n	800bbc2 <dhcp_recv+0x18e>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 800bafe:	4b3d      	ldr	r3, [pc, #244]	; (800bbf4 <dhcp_recv+0x1c0>)
 800bb00:	785b      	ldrb	r3, [r3, #1]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d05f      	beq.n	800bbc6 <dhcp_recv+0x192>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800bb06:	4b3c      	ldr	r3, [pc, #240]	; (800bbf8 <dhcp_recv+0x1c4>)
 800bb08:	685b      	ldr	r3, [r3, #4]
 800bb0a:	75fb      	strb	r3, [r7, #23]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 800bb0c:	7dfb      	ldrb	r3, [r7, #23]
 800bb0e:	2b05      	cmp	r3, #5
 800bb10:	d128      	bne.n	800bb64 <dhcp_recv+0x130>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 800bb12:	69fb      	ldr	r3, [r7, #28]
 800bb14:	7a5b      	ldrb	r3, [r3, #9]
 800bb16:	2b01      	cmp	r3, #1
 800bb18:	d111      	bne.n	800bb3e <dhcp_recv+0x10a>
      dhcp_handle_ack(netif);
 800bb1a:	6a38      	ldr	r0, [r7, #32]
 800bb1c:	f7fe fe62 	bl	800a7e4 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800bb20:	6a3b      	ldr	r3, [r7, #32]
 800bb22:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800bb26:	f003 0308 	and.w	r3, r3, #8
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d003      	beq.n	800bb36 <dhcp_recv+0x102>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 800bb2e:	6a38      	ldr	r0, [r7, #32]
 800bb30:	f7fe fc2a 	bl	800a388 <dhcp_check>
 800bb34:	e048      	b.n	800bbc8 <dhcp_recv+0x194>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 800bb36:	6a38      	ldr	r0, [r7, #32]
 800bb38:	f7ff f8a0 	bl	800ac7c <dhcp_bind>
 800bb3c:	e044      	b.n	800bbc8 <dhcp_recv+0x194>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800bb3e:	69fb      	ldr	r3, [r7, #28]
 800bb40:	7a5b      	ldrb	r3, [r3, #9]
 800bb42:	2b03      	cmp	r3, #3
 800bb44:	d007      	beq.n	800bb56 <dhcp_recv+0x122>
 800bb46:	69fb      	ldr	r3, [r7, #28]
 800bb48:	7a5b      	ldrb	r3, [r3, #9]
 800bb4a:	2b04      	cmp	r3, #4
 800bb4c:	d003      	beq.n	800bb56 <dhcp_recv+0x122>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 800bb4e:	69fb      	ldr	r3, [r7, #28]
 800bb50:	7a5b      	ldrb	r3, [r3, #9]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800bb52:	2b05      	cmp	r3, #5
 800bb54:	d138      	bne.n	800bbc8 <dhcp_recv+0x194>
      dhcp_handle_ack(netif);
 800bb56:	6a38      	ldr	r0, [r7, #32]
 800bb58:	f7fe fe44 	bl	800a7e4 <dhcp_handle_ack>
      dhcp_bind(netif);
 800bb5c:	6a38      	ldr	r0, [r7, #32]
 800bb5e:	f7ff f88d 	bl	800ac7c <dhcp_bind>
 800bb62:	e031      	b.n	800bbc8 <dhcp_recv+0x194>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 800bb64:	7dfb      	ldrb	r3, [r7, #23]
 800bb66:	2b06      	cmp	r3, #6
 800bb68:	d113      	bne.n	800bb92 <dhcp_recv+0x15e>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800bb6a:	69fb      	ldr	r3, [r7, #28]
 800bb6c:	7a5b      	ldrb	r3, [r3, #9]
  else if ((msg_type == DHCP_NAK) &&
 800bb6e:	2b03      	cmp	r3, #3
 800bb70:	d00b      	beq.n	800bb8a <dhcp_recv+0x156>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800bb72:	69fb      	ldr	r3, [r7, #28]
 800bb74:	7a5b      	ldrb	r3, [r3, #9]
 800bb76:	2b01      	cmp	r3, #1
 800bb78:	d007      	beq.n	800bb8a <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800bb7a:	69fb      	ldr	r3, [r7, #28]
 800bb7c:	7a5b      	ldrb	r3, [r3, #9]
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800bb7e:	2b04      	cmp	r3, #4
 800bb80:	d003      	beq.n	800bb8a <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800bb82:	69fb      	ldr	r3, [r7, #28]
 800bb84:	7a5b      	ldrb	r3, [r3, #9]
 800bb86:	2b05      	cmp	r3, #5
 800bb88:	d103      	bne.n	800bb92 <dhcp_recv+0x15e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 800bb8a:	6a38      	ldr	r0, [r7, #32]
 800bb8c:	f7fe fbe2 	bl	800a354 <dhcp_handle_nak>
 800bb90:	e01a      	b.n	800bbc8 <dhcp_recv+0x194>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 800bb92:	7dfb      	ldrb	r3, [r7, #23]
 800bb94:	2b02      	cmp	r3, #2
 800bb96:	d10a      	bne.n	800bbae <dhcp_recv+0x17a>
 800bb98:	69fb      	ldr	r3, [r7, #28]
 800bb9a:	7a5b      	ldrb	r3, [r3, #9]
 800bb9c:	2b06      	cmp	r3, #6
 800bb9e:	d106      	bne.n	800bbae <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    dhcp->request_timeout = 0;
 800bba0:	69fb      	ldr	r3, [r7, #28]
 800bba2:	2200      	movs	r2, #0
 800bba4:	82da      	strh	r2, [r3, #22]
    /* remember offered lease */
    dhcp_handle_offer(netif);
 800bba6:	6a38      	ldr	r0, [r7, #32]
 800bba8:	f7fe fc22 	bl	800a3f0 <dhcp_handle_offer>
 800bbac:	e00c      	b.n	800bbc8 <dhcp_recv+0x194>
  }

free_pbuf_and_return:
 800bbae:	bf00      	nop
 800bbb0:	e00a      	b.n	800bbc8 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 800bbb2:	bf00      	nop
 800bbb4:	e008      	b.n	800bbc8 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 800bbb6:	bf00      	nop
 800bbb8:	e006      	b.n	800bbc8 <dhcp_recv+0x194>
      goto free_pbuf_and_return;
 800bbba:	bf00      	nop
 800bbbc:	e004      	b.n	800bbc8 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 800bbbe:	bf00      	nop
 800bbc0:	e002      	b.n	800bbc8 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 800bbc2:	bf00      	nop
 800bbc4:	e000      	b.n	800bbc8 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 800bbc6:	bf00      	nop
  if (dhcp != NULL) {
 800bbc8:	69fb      	ldr	r3, [r7, #28]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d002      	beq.n	800bbd4 <dhcp_recv+0x1a0>
    dhcp->msg_in = NULL;
 800bbce:	69fb      	ldr	r3, [r7, #28]
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	605a      	str	r2, [r3, #4]
  }
  pbuf_free(p);
 800bbd4:	6878      	ldr	r0, [r7, #4]
 800bbd6:	f7f9 f899 	bl	8004d0c <pbuf_free>
}
 800bbda:	bf00      	nop
 800bbdc:	3728      	adds	r7, #40	; 0x28
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}
 800bbe2:	bf00      	nop
 800bbe4:	20003394 	.word	0x20003394
 800bbe8:	080109c8 	.word	0x080109c8
 800bbec:	08010af4 	.word	0x08010af4
 800bbf0:	08010a28 	.word	0x08010a28
 800bbf4:	20006900 	.word	0x20006900
 800bbf8:	20006908 	.word	0x20006908

0800bbfc <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
 800bbfc:	b590      	push	{r4, r7, lr}
 800bbfe:	b087      	sub	sp, #28
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	60f8      	str	r0, [r7, #12]
 800bc04:	60b9      	str	r1, [r7, #8]
 800bc06:	4613      	mov	r3, r2
 800bc08:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d109      	bne.n	800bc24 <dhcp_create_msg+0x28>
 800bc10:	4ba3      	ldr	r3, [pc, #652]	; (800bea0 <dhcp_create_msg+0x2a4>)
 800bc12:	f240 721d 	movw	r2, #1821	; 0x71d
 800bc16:	49a3      	ldr	r1, [pc, #652]	; (800bea4 <dhcp_create_msg+0x2a8>)
 800bc18:	48a3      	ldr	r0, [pc, #652]	; (800bea8 <dhcp_create_msg+0x2ac>)
 800bc1a:	f002 fc81 	bl	800e520 <iprintf>
 800bc1e:	f06f 030f 	mvn.w	r3, #15
 800bc22:	e138      	b.n	800be96 <dhcp_create_msg+0x29a>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800bc24:	68bb      	ldr	r3, [r7, #8]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d109      	bne.n	800bc3e <dhcp_create_msg+0x42>
 800bc2a:	4b9d      	ldr	r3, [pc, #628]	; (800bea0 <dhcp_create_msg+0x2a4>)
 800bc2c:	f240 721e 	movw	r2, #1822	; 0x71e
 800bc30:	499e      	ldr	r1, [pc, #632]	; (800beac <dhcp_create_msg+0x2b0>)
 800bc32:	489d      	ldr	r0, [pc, #628]	; (800bea8 <dhcp_create_msg+0x2ac>)
 800bc34:	f002 fc74 	bl	800e520 <iprintf>
 800bc38:	f06f 0305 	mvn.w	r3, #5
 800bc3c:	e12b      	b.n	800be96 <dhcp_create_msg+0x29a>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	68db      	ldr	r3, [r3, #12]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d006      	beq.n	800bc54 <dhcp_create_msg+0x58>
 800bc46:	4b96      	ldr	r3, [pc, #600]	; (800bea0 <dhcp_create_msg+0x2a4>)
 800bc48:	f240 721f 	movw	r2, #1823	; 0x71f
 800bc4c:	4998      	ldr	r1, [pc, #608]	; (800beb0 <dhcp_create_msg+0x2b4>)
 800bc4e:	4896      	ldr	r0, [pc, #600]	; (800bea8 <dhcp_create_msg+0x2ac>)
 800bc50:	f002 fc66 	bl	800e520 <iprintf>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	691b      	ldr	r3, [r3, #16]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d006      	beq.n	800bc6a <dhcp_create_msg+0x6e>
 800bc5c:	4b90      	ldr	r3, [pc, #576]	; (800bea0 <dhcp_create_msg+0x2a4>)
 800bc5e:	f44f 62e4 	mov.w	r2, #1824	; 0x720
 800bc62:	4994      	ldr	r1, [pc, #592]	; (800beb4 <dhcp_create_msg+0x2b8>)
 800bc64:	4890      	ldr	r0, [pc, #576]	; (800bea8 <dhcp_create_msg+0x2ac>)
 800bc66:	f002 fc5b 	bl	800e520 <iprintf>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	f44f 719a 	mov.w	r1, #308	; 0x134
 800bc70:	2000      	movs	r0, #0
 800bc72:	f7f8 fcd9 	bl	8004628 <pbuf_alloc>
 800bc76:	4602      	mov	r2, r0
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	60da      	str	r2, [r3, #12]
  if (dhcp->p_out == NULL) {
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	68db      	ldr	r3, [r3, #12]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d102      	bne.n	800bc8a <dhcp_create_msg+0x8e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
 800bc84:	f04f 33ff 	mov.w	r3, #4294967295
 800bc88:	e105      	b.n	800be96 <dhcp_create_msg+0x29a>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	68db      	ldr	r3, [r3, #12]
 800bc8e:	895b      	ldrh	r3, [r3, #10]
 800bc90:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800bc94:	d206      	bcs.n	800bca4 <dhcp_create_msg+0xa8>
 800bc96:	4b82      	ldr	r3, [pc, #520]	; (800bea0 <dhcp_create_msg+0x2a4>)
 800bc98:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800bc9c:	4986      	ldr	r1, [pc, #536]	; (800beb8 <dhcp_create_msg+0x2bc>)
 800bc9e:	4882      	ldr	r0, [pc, #520]	; (800bea8 <dhcp_create_msg+0x2ac>)
 800bca0:	f002 fc3e 	bl	800e520 <iprintf>
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800bca4:	79fb      	ldrb	r3, [r7, #7]
 800bca6:	2b03      	cmp	r3, #3
 800bca8:	d103      	bne.n	800bcb2 <dhcp_create_msg+0xb6>
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	7a5b      	ldrb	r3, [r3, #9]
 800bcae:	2b03      	cmp	r3, #3
 800bcb0:	d10d      	bne.n	800bcce <dhcp_create_msg+0xd2>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 800bcb2:	68bb      	ldr	r3, [r7, #8]
 800bcb4:	7a9b      	ldrb	r3, [r3, #10]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d105      	bne.n	800bcc6 <dhcp_create_msg+0xca>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 800bcba:	f002 fc49 	bl	800e550 <rand>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	461a      	mov	r2, r3
 800bcc2:	4b7e      	ldr	r3, [pc, #504]	; (800bebc <dhcp_create_msg+0x2c0>)
 800bcc4:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 800bcc6:	4b7d      	ldr	r3, [pc, #500]	; (800bebc <dhcp_create_msg+0x2c0>)
 800bcc8:	681a      	ldr	r2, [r3, #0]
 800bcca:	68bb      	ldr	r3, [r7, #8]
 800bccc:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 800bcce:	68bb      	ldr	r3, [r7, #8]
 800bcd0:	68db      	ldr	r3, [r3, #12]
 800bcd2:	685a      	ldr	r2, [r3, #4]
 800bcd4:	68bb      	ldr	r3, [r7, #8]
 800bcd6:	611a      	str	r2, [r3, #16]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	691b      	ldr	r3, [r3, #16]
 800bcdc:	2201      	movs	r2, #1
 800bcde:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 800bce0:	68bb      	ldr	r3, [r7, #8]
 800bce2:	691b      	ldr	r3, [r3, #16]
 800bce4:	2201      	movs	r2, #1
 800bce6:	705a      	strb	r2, [r3, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	691b      	ldr	r3, [r3, #16]
 800bcec:	68fa      	ldr	r2, [r7, #12]
 800bcee:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800bcf2:	709a      	strb	r2, [r3, #2]
  dhcp->msg_out->hops = 0;
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	691b      	ldr	r3, [r3, #16]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	70da      	strb	r2, [r3, #3]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	681a      	ldr	r2, [r3, #0]
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	691c      	ldr	r4, [r3, #16]
 800bd04:	4610      	mov	r0, r2
 800bd06:	f7f7 fe8e 	bl	8003a26 <lwip_htonl>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	6063      	str	r3, [r4, #4]
  dhcp->msg_out->secs = 0;
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	691b      	ldr	r3, [r3, #16]
 800bd12:	2200      	movs	r2, #0
 800bd14:	721a      	strb	r2, [r3, #8]
 800bd16:	2200      	movs	r2, #0
 800bd18:	725a      	strb	r2, [r3, #9]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	691b      	ldr	r3, [r3, #16]
 800bd1e:	2200      	movs	r2, #0
 800bd20:	729a      	strb	r2, [r3, #10]
 800bd22:	2200      	movs	r2, #0
 800bd24:	72da      	strb	r2, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	691b      	ldr	r3, [r3, #16]
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	731a      	strb	r2, [r3, #12]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	735a      	strb	r2, [r3, #13]
 800bd32:	2200      	movs	r2, #0
 800bd34:	739a      	strb	r2, [r3, #14]
 800bd36:	2200      	movs	r2, #0
 800bd38:	73da      	strb	r2, [r3, #15]
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800bd3a:	79fb      	ldrb	r3, [r7, #7]
 800bd3c:	2b08      	cmp	r3, #8
 800bd3e:	d010      	beq.n	800bd62 <dhcp_create_msg+0x166>
 800bd40:	79fb      	ldrb	r3, [r7, #7]
 800bd42:	2b04      	cmp	r3, #4
 800bd44:	d00d      	beq.n	800bd62 <dhcp_create_msg+0x166>
 800bd46:	79fb      	ldrb	r3, [r7, #7]
 800bd48:	2b07      	cmp	r3, #7
 800bd4a:	d00a      	beq.n	800bd62 <dhcp_create_msg+0x166>
 800bd4c:	79fb      	ldrb	r3, [r7, #7]
 800bd4e:	2b03      	cmp	r3, #3
 800bd50:	d10d      	bne.n	800bd6e <dhcp_create_msg+0x172>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	7a5b      	ldrb	r3, [r3, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 800bd56:	2b05      	cmp	r3, #5
 800bd58:	d003      	beq.n	800bd62 <dhcp_create_msg+0x166>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 800bd5a:	68bb      	ldr	r3, [r7, #8]
 800bd5c:	7a5b      	ldrb	r3, [r3, #9]
 800bd5e:	2b04      	cmp	r3, #4
 800bd60:	d105      	bne.n	800bd6e <dhcp_create_msg+0x172>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	1d1a      	adds	r2, r3, #4
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	691b      	ldr	r3, [r3, #16]
 800bd6a:	6812      	ldr	r2, [r2, #0]
 800bd6c:	60da      	str	r2, [r3, #12]
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	691b      	ldr	r3, [r3, #16]
 800bd72:	2200      	movs	r2, #0
 800bd74:	741a      	strb	r2, [r3, #16]
 800bd76:	2200      	movs	r2, #0
 800bd78:	745a      	strb	r2, [r3, #17]
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	749a      	strb	r2, [r3, #18]
 800bd7e:	2200      	movs	r2, #0
 800bd80:	74da      	strb	r2, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
 800bd82:	68bb      	ldr	r3, [r7, #8]
 800bd84:	691b      	ldr	r3, [r3, #16]
 800bd86:	2200      	movs	r2, #0
 800bd88:	751a      	strb	r2, [r3, #20]
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	755a      	strb	r2, [r3, #21]
 800bd8e:	2200      	movs	r2, #0
 800bd90:	759a      	strb	r2, [r3, #22]
 800bd92:	2200      	movs	r2, #0
 800bd94:	75da      	strb	r2, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	691b      	ldr	r3, [r3, #16]
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	761a      	strb	r2, [r3, #24]
 800bd9e:	2200      	movs	r2, #0
 800bda0:	765a      	strb	r2, [r3, #25]
 800bda2:	2200      	movs	r2, #0
 800bda4:	769a      	strb	r2, [r3, #26]
 800bda6:	2200      	movs	r2, #0
 800bda8:	76da      	strb	r2, [r3, #27]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 800bdaa:	2300      	movs	r3, #0
 800bdac:	82fb      	strh	r3, [r7, #22]
 800bdae:	e019      	b.n	800bde4 <dhcp_create_msg+0x1e8>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800bdb6:	b29b      	uxth	r3, r3
 800bdb8:	8afa      	ldrh	r2, [r7, #22]
 800bdba:	429a      	cmp	r2, r3
 800bdbc:	d208      	bcs.n	800bdd0 <dhcp_create_msg+0x1d4>
 800bdbe:	8afb      	ldrh	r3, [r7, #22]
 800bdc0:	2b05      	cmp	r3, #5
 800bdc2:	d805      	bhi.n	800bdd0 <dhcp_create_msg+0x1d4>
 800bdc4:	8afb      	ldrh	r3, [r7, #22]
 800bdc6:	68fa      	ldr	r2, [r7, #12]
 800bdc8:	4413      	add	r3, r2
 800bdca:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 800bdce:	e000      	b.n	800bdd2 <dhcp_create_msg+0x1d6>
 800bdd0:	2100      	movs	r1, #0
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	691a      	ldr	r2, [r3, #16]
 800bdd6:	8afb      	ldrh	r3, [r7, #22]
 800bdd8:	4413      	add	r3, r2
 800bdda:	460a      	mov	r2, r1
 800bddc:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 800bdde:	8afb      	ldrh	r3, [r7, #22]
 800bde0:	3301      	adds	r3, #1
 800bde2:	82fb      	strh	r3, [r7, #22]
 800bde4:	8afb      	ldrh	r3, [r7, #22]
 800bde6:	2b0f      	cmp	r3, #15
 800bde8:	d9e2      	bls.n	800bdb0 <dhcp_create_msg+0x1b4>
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 800bdea:	2300      	movs	r3, #0
 800bdec:	82fb      	strh	r3, [r7, #22]
 800bdee:	e009      	b.n	800be04 <dhcp_create_msg+0x208>
    dhcp->msg_out->sname[i] = 0;
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	691a      	ldr	r2, [r3, #16]
 800bdf4:	8afb      	ldrh	r3, [r7, #22]
 800bdf6:	4413      	add	r3, r2
 800bdf8:	2200      	movs	r2, #0
 800bdfa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 800bdfe:	8afb      	ldrh	r3, [r7, #22]
 800be00:	3301      	adds	r3, #1
 800be02:	82fb      	strh	r3, [r7, #22]
 800be04:	8afb      	ldrh	r3, [r7, #22]
 800be06:	2b3f      	cmp	r3, #63	; 0x3f
 800be08:	d9f2      	bls.n	800bdf0 <dhcp_create_msg+0x1f4>
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 800be0a:	2300      	movs	r3, #0
 800be0c:	82fb      	strh	r3, [r7, #22]
 800be0e:	e009      	b.n	800be24 <dhcp_create_msg+0x228>
    dhcp->msg_out->file[i] = 0;
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	691a      	ldr	r2, [r3, #16]
 800be14:	8afb      	ldrh	r3, [r7, #22]
 800be16:	4413      	add	r3, r2
 800be18:	2200      	movs	r2, #0
 800be1a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 800be1e:	8afb      	ldrh	r3, [r7, #22]
 800be20:	3301      	adds	r3, #1
 800be22:	82fb      	strh	r3, [r7, #22]
 800be24:	8afb      	ldrh	r3, [r7, #22]
 800be26:	2b7f      	cmp	r3, #127	; 0x7f
 800be28:	d9f2      	bls.n	800be10 <dhcp_create_msg+0x214>
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	691b      	ldr	r3, [r3, #16]
 800be2e:	2200      	movs	r2, #0
 800be30:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800be34:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 800be38:	2200      	movs	r2, #0
 800be3a:	f062 027d 	orn	r2, r2, #125	; 0x7d
 800be3e:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 800be42:	2200      	movs	r2, #0
 800be44:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 800be48:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 800be4c:	2200      	movs	r2, #0
 800be4e:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800be52:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  dhcp->options_out_len = 0;
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	2200      	movs	r2, #0
 800be5a:	829a      	strh	r2, [r3, #20]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 800be5c:	2300      	movs	r3, #0
 800be5e:	82fb      	strh	r3, [r7, #22]
 800be60:	e00b      	b.n	800be7a <dhcp_create_msg+0x27e>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 800be62:	68bb      	ldr	r3, [r7, #8]
 800be64:	691a      	ldr	r2, [r3, #16]
 800be66:	8afb      	ldrh	r3, [r7, #22]
 800be68:	8af9      	ldrh	r1, [r7, #22]
 800be6a:	b2c9      	uxtb	r1, r1
 800be6c:	4413      	add	r3, r2
 800be6e:	460a      	mov	r2, r1
 800be70:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 800be74:	8afb      	ldrh	r3, [r7, #22]
 800be76:	3301      	adds	r3, #1
 800be78:	82fb      	strh	r3, [r7, #22]
 800be7a:	8afb      	ldrh	r3, [r7, #22]
 800be7c:	2b43      	cmp	r3, #67	; 0x43
 800be7e:	d9f0      	bls.n	800be62 <dhcp_create_msg+0x266>
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800be80:	2201      	movs	r2, #1
 800be82:	2135      	movs	r1, #53	; 0x35
 800be84:	68b8      	ldr	r0, [r7, #8]
 800be86:	f7ff fa4d 	bl	800b324 <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
 800be8a:	79fb      	ldrb	r3, [r7, #7]
 800be8c:	4619      	mov	r1, r3
 800be8e:	68b8      	ldr	r0, [r7, #8]
 800be90:	f7ff fa82 	bl	800b398 <dhcp_option_byte>
  return ERR_OK;
 800be94:	2300      	movs	r3, #0
}
 800be96:	4618      	mov	r0, r3
 800be98:	371c      	adds	r7, #28
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd90      	pop	{r4, r7, pc}
 800be9e:	bf00      	nop
 800bea0:	080109c8 	.word	0x080109c8
 800bea4:	08010cf8 	.word	0x08010cf8
 800bea8:	08010a28 	.word	0x08010a28
 800beac:	08010d18 	.word	0x08010d18
 800beb0:	08010d38 	.word	0x08010d38
 800beb4:	08010d60 	.word	0x08010d60
 800beb8:	08010d88 	.word	0x08010d88
 800bebc:	2000011c 	.word	0x2000011c

0800bec0 <dhcp_delete_msg>:
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b082      	sub	sp, #8
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d107      	bne.n	800bede <dhcp_delete_msg+0x1e>
 800bece:	4b18      	ldr	r3, [pc, #96]	; (800bf30 <dhcp_delete_msg+0x70>)
 800bed0:	f240 726d 	movw	r2, #1901	; 0x76d
 800bed4:	4917      	ldr	r1, [pc, #92]	; (800bf34 <dhcp_delete_msg+0x74>)
 800bed6:	4818      	ldr	r0, [pc, #96]	; (800bf38 <dhcp_delete_msg+0x78>)
 800bed8:	f002 fb22 	bl	800e520 <iprintf>
 800bedc:	e024      	b.n	800bf28 <dhcp_delete_msg+0x68>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	68db      	ldr	r3, [r3, #12]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d106      	bne.n	800bef4 <dhcp_delete_msg+0x34>
 800bee6:	4b12      	ldr	r3, [pc, #72]	; (800bf30 <dhcp_delete_msg+0x70>)
 800bee8:	f240 726e 	movw	r2, #1902	; 0x76e
 800beec:	4913      	ldr	r1, [pc, #76]	; (800bf3c <dhcp_delete_msg+0x7c>)
 800beee:	4812      	ldr	r0, [pc, #72]	; (800bf38 <dhcp_delete_msg+0x78>)
 800bef0:	f002 fb16 	bl	800e520 <iprintf>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	691b      	ldr	r3, [r3, #16]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d106      	bne.n	800bf0a <dhcp_delete_msg+0x4a>
 800befc:	4b0c      	ldr	r3, [pc, #48]	; (800bf30 <dhcp_delete_msg+0x70>)
 800befe:	f240 726f 	movw	r2, #1903	; 0x76f
 800bf02:	490f      	ldr	r1, [pc, #60]	; (800bf40 <dhcp_delete_msg+0x80>)
 800bf04:	480c      	ldr	r0, [pc, #48]	; (800bf38 <dhcp_delete_msg+0x78>)
 800bf06:	f002 fb0b 	bl	800e520 <iprintf>
  if (dhcp->p_out != NULL) {
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	68db      	ldr	r3, [r3, #12]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d004      	beq.n	800bf1c <dhcp_delete_msg+0x5c>
    pbuf_free(dhcp->p_out);
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	68db      	ldr	r3, [r3, #12]
 800bf16:	4618      	mov	r0, r3
 800bf18:	f7f8 fef8 	bl	8004d0c <pbuf_free>
  }
  dhcp->p_out = NULL;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2200      	movs	r2, #0
 800bf20:	60da      	str	r2, [r3, #12]
  dhcp->msg_out = NULL;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2200      	movs	r2, #0
 800bf26:	611a      	str	r2, [r3, #16]
}
 800bf28:	3708      	adds	r7, #8
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}
 800bf2e:	bf00      	nop
 800bf30:	080109c8 	.word	0x080109c8
 800bf34:	08010dc8 	.word	0x08010dc8
 800bf38:	08010a28 	.word	0x08010a28
 800bf3c:	08010de8 	.word	0x08010de8
 800bf40:	08010e10 	.word	0x08010e10

0800bf44 <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b082      	sub	sp, #8
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d107      	bne.n	800bf62 <dhcp_option_trailer+0x1e>
 800bf52:	4b24      	ldr	r3, [pc, #144]	; (800bfe4 <dhcp_option_trailer+0xa0>)
 800bf54:	f240 7282 	movw	r2, #1922	; 0x782
 800bf58:	4923      	ldr	r1, [pc, #140]	; (800bfe8 <dhcp_option_trailer+0xa4>)
 800bf5a:	4824      	ldr	r0, [pc, #144]	; (800bfec <dhcp_option_trailer+0xa8>)
 800bf5c:	f002 fae0 	bl	800e520 <iprintf>
 800bf60:	e03c      	b.n	800bfdc <dhcp_option_trailer+0x98>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	691b      	ldr	r3, [r3, #16]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d106      	bne.n	800bf78 <dhcp_option_trailer+0x34>
 800bf6a:	4b1e      	ldr	r3, [pc, #120]	; (800bfe4 <dhcp_option_trailer+0xa0>)
 800bf6c:	f240 7283 	movw	r2, #1923	; 0x783
 800bf70:	491f      	ldr	r1, [pc, #124]	; (800bff0 <dhcp_option_trailer+0xac>)
 800bf72:	481e      	ldr	r0, [pc, #120]	; (800bfec <dhcp_option_trailer+0xa8>)
 800bf74:	f002 fad4 	bl	800e520 <iprintf>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	8a9b      	ldrh	r3, [r3, #20]
 800bf7c:	2b43      	cmp	r3, #67	; 0x43
 800bf7e:	d906      	bls.n	800bf8e <dhcp_option_trailer+0x4a>
 800bf80:	4b18      	ldr	r3, [pc, #96]	; (800bfe4 <dhcp_option_trailer+0xa0>)
 800bf82:	f240 7284 	movw	r2, #1924	; 0x784
 800bf86:	491b      	ldr	r1, [pc, #108]	; (800bff4 <dhcp_option_trailer+0xb0>)
 800bf88:	4818      	ldr	r0, [pc, #96]	; (800bfec <dhcp_option_trailer+0xa8>)
 800bf8a:	f002 fac9 	bl	800e520 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	691a      	ldr	r2, [r3, #16]
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	8a9b      	ldrh	r3, [r3, #20]
 800bf96:	1c59      	adds	r1, r3, #1
 800bf98:	b288      	uxth	r0, r1
 800bf9a:	6879      	ldr	r1, [r7, #4]
 800bf9c:	8288      	strh	r0, [r1, #20]
 800bf9e:	4413      	add	r3, r2
 800bfa0:	22ff      	movs	r2, #255	; 0xff
 800bfa2:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 800bfa6:	e00b      	b.n	800bfc0 <dhcp_option_trailer+0x7c>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	691a      	ldr	r2, [r3, #16]
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	8a9b      	ldrh	r3, [r3, #20]
 800bfb0:	1c59      	adds	r1, r3, #1
 800bfb2:	b288      	uxth	r0, r1
 800bfb4:	6879      	ldr	r1, [r7, #4]
 800bfb6:	8288      	strh	r0, [r1, #20]
 800bfb8:	4413      	add	r3, r2
 800bfba:	2200      	movs	r2, #0
 800bfbc:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	8a9b      	ldrh	r3, [r3, #20]
 800bfc4:	2b43      	cmp	r3, #67	; 0x43
 800bfc6:	d905      	bls.n	800bfd4 <dhcp_option_trailer+0x90>
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	8a9b      	ldrh	r3, [r3, #20]
 800bfcc:	f003 0303 	and.w	r3, r3, #3
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d003      	beq.n	800bfdc <dhcp_option_trailer+0x98>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	8a9b      	ldrh	r3, [r3, #20]
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 800bfd8:	2b43      	cmp	r3, #67	; 0x43
 800bfda:	d9e5      	bls.n	800bfa8 <dhcp_option_trailer+0x64>
  }
}
 800bfdc:	3708      	adds	r7, #8
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}
 800bfe2:	bf00      	nop
 800bfe4:	080109c8 	.word	0x080109c8
 800bfe8:	08010e38 	.word	0x08010e38
 800bfec:	08010a28 	.word	0x08010a28
 800bff0:	08010e5c 	.word	0x08010e5c
 800bff4:	08010e88 	.word	0x08010e88

0800bff8 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 800bff8:	b480      	push	{r7}
 800bffa:	b085      	sub	sp, #20
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d017      	beq.n	800c036 <dhcp_supplied_address+0x3e>
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d013      	beq.n	800c036 <dhcp_supplied_address+0x3e>
    struct dhcp* dhcp = netif_dhcp_data(netif);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c012:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	7a5b      	ldrb	r3, [r3, #9]
 800c018:	2b0a      	cmp	r3, #10
 800c01a:	d007      	beq.n	800c02c <dhcp_supplied_address+0x34>
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	7a5b      	ldrb	r3, [r3, #9]
 800c020:	2b05      	cmp	r3, #5
 800c022:	d003      	beq.n	800c02c <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	7a5b      	ldrb	r3, [r3, #9]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800c028:	2b04      	cmp	r3, #4
 800c02a:	d101      	bne.n	800c030 <dhcp_supplied_address+0x38>
 800c02c:	2301      	movs	r3, #1
 800c02e:	e000      	b.n	800c032 <dhcp_supplied_address+0x3a>
 800c030:	2300      	movs	r3, #0
 800c032:	b2db      	uxtb	r3, r3
 800c034:	e000      	b.n	800c038 <dhcp_supplied_address+0x40>
  }
  return 0;
 800c036:	2300      	movs	r3, #0
}
 800c038:	4618      	mov	r0, r3
 800c03a:	3714      	adds	r7, #20
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bc80      	pop	{r7}
 800c040:	4770      	bx	lr
	...

0800c044 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b082      	sub	sp, #8
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800c04c:	4915      	ldr	r1, [pc, #84]	; (800c0a4 <etharp_free_entry+0x60>)
 800c04e:	687a      	ldr	r2, [r7, #4]
 800c050:	4613      	mov	r3, r2
 800c052:	005b      	lsls	r3, r3, #1
 800c054:	4413      	add	r3, r2
 800c056:	00db      	lsls	r3, r3, #3
 800c058:	440b      	add	r3, r1
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d013      	beq.n	800c088 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800c060:	4910      	ldr	r1, [pc, #64]	; (800c0a4 <etharp_free_entry+0x60>)
 800c062:	687a      	ldr	r2, [r7, #4]
 800c064:	4613      	mov	r3, r2
 800c066:	005b      	lsls	r3, r3, #1
 800c068:	4413      	add	r3, r2
 800c06a:	00db      	lsls	r3, r3, #3
 800c06c:	440b      	add	r3, r1
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	4618      	mov	r0, r3
 800c072:	f7f8 fe4b 	bl	8004d0c <pbuf_free>
    arp_table[i].q = NULL;
 800c076:	490b      	ldr	r1, [pc, #44]	; (800c0a4 <etharp_free_entry+0x60>)
 800c078:	687a      	ldr	r2, [r7, #4]
 800c07a:	4613      	mov	r3, r2
 800c07c:	005b      	lsls	r3, r3, #1
 800c07e:	4413      	add	r3, r2
 800c080:	00db      	lsls	r3, r3, #3
 800c082:	440b      	add	r3, r1
 800c084:	2200      	movs	r2, #0
 800c086:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800c088:	4906      	ldr	r1, [pc, #24]	; (800c0a4 <etharp_free_entry+0x60>)
 800c08a:	687a      	ldr	r2, [r7, #4]
 800c08c:	4613      	mov	r3, r2
 800c08e:	005b      	lsls	r3, r3, #1
 800c090:	4413      	add	r3, r2
 800c092:	00db      	lsls	r3, r3, #3
 800c094:	440b      	add	r3, r1
 800c096:	3314      	adds	r3, #20
 800c098:	2200      	movs	r2, #0
 800c09a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800c09c:	bf00      	nop
 800c09e:	3708      	adds	r7, #8
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}
 800c0a4:	20000120 	.word	0x20000120

0800c0a8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b082      	sub	sp, #8
 800c0ac:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	71fb      	strb	r3, [r7, #7]
 800c0b2:	e096      	b.n	800c1e2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800c0b4:	79fa      	ldrb	r2, [r7, #7]
 800c0b6:	494f      	ldr	r1, [pc, #316]	; (800c1f4 <etharp_tmr+0x14c>)
 800c0b8:	4613      	mov	r3, r2
 800c0ba:	005b      	lsls	r3, r3, #1
 800c0bc:	4413      	add	r3, r2
 800c0be:	00db      	lsls	r3, r3, #3
 800c0c0:	440b      	add	r3, r1
 800c0c2:	3314      	adds	r3, #20
 800c0c4:	781b      	ldrb	r3, [r3, #0]
 800c0c6:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 800c0c8:	79bb      	ldrb	r3, [r7, #6]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	f000 8086 	beq.w	800c1dc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 800c0d0:	79fa      	ldrb	r2, [r7, #7]
 800c0d2:	4948      	ldr	r1, [pc, #288]	; (800c1f4 <etharp_tmr+0x14c>)
 800c0d4:	4613      	mov	r3, r2
 800c0d6:	005b      	lsls	r3, r3, #1
 800c0d8:	4413      	add	r3, r2
 800c0da:	00db      	lsls	r3, r3, #3
 800c0dc:	440b      	add	r3, r1
 800c0de:	3312      	adds	r3, #18
 800c0e0:	881b      	ldrh	r3, [r3, #0]
 800c0e2:	3301      	adds	r3, #1
 800c0e4:	b298      	uxth	r0, r3
 800c0e6:	4943      	ldr	r1, [pc, #268]	; (800c1f4 <etharp_tmr+0x14c>)
 800c0e8:	4613      	mov	r3, r2
 800c0ea:	005b      	lsls	r3, r3, #1
 800c0ec:	4413      	add	r3, r2
 800c0ee:	00db      	lsls	r3, r3, #3
 800c0f0:	440b      	add	r3, r1
 800c0f2:	3312      	adds	r3, #18
 800c0f4:	4602      	mov	r2, r0
 800c0f6:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c0f8:	79fa      	ldrb	r2, [r7, #7]
 800c0fa:	493e      	ldr	r1, [pc, #248]	; (800c1f4 <etharp_tmr+0x14c>)
 800c0fc:	4613      	mov	r3, r2
 800c0fe:	005b      	lsls	r3, r3, #1
 800c100:	4413      	add	r3, r2
 800c102:	00db      	lsls	r3, r3, #3
 800c104:	440b      	add	r3, r1
 800c106:	3312      	adds	r3, #18
 800c108:	881b      	ldrh	r3, [r3, #0]
 800c10a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800c10e:	d215      	bcs.n	800c13c <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c110:	79fa      	ldrb	r2, [r7, #7]
 800c112:	4938      	ldr	r1, [pc, #224]	; (800c1f4 <etharp_tmr+0x14c>)
 800c114:	4613      	mov	r3, r2
 800c116:	005b      	lsls	r3, r3, #1
 800c118:	4413      	add	r3, r2
 800c11a:	00db      	lsls	r3, r3, #3
 800c11c:	440b      	add	r3, r1
 800c11e:	3314      	adds	r3, #20
 800c120:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800c122:	2b01      	cmp	r3, #1
 800c124:	d10f      	bne.n	800c146 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800c126:	79fa      	ldrb	r2, [r7, #7]
 800c128:	4932      	ldr	r1, [pc, #200]	; (800c1f4 <etharp_tmr+0x14c>)
 800c12a:	4613      	mov	r3, r2
 800c12c:	005b      	lsls	r3, r3, #1
 800c12e:	4413      	add	r3, r2
 800c130:	00db      	lsls	r3, r3, #3
 800c132:	440b      	add	r3, r1
 800c134:	3312      	adds	r3, #18
 800c136:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800c138:	2b04      	cmp	r3, #4
 800c13a:	d904      	bls.n	800c146 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800c13c:	79fb      	ldrb	r3, [r7, #7]
 800c13e:	4618      	mov	r0, r3
 800c140:	f7ff ff80 	bl	800c044 <etharp_free_entry>
 800c144:	e04a      	b.n	800c1dc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800c146:	79fa      	ldrb	r2, [r7, #7]
 800c148:	492a      	ldr	r1, [pc, #168]	; (800c1f4 <etharp_tmr+0x14c>)
 800c14a:	4613      	mov	r3, r2
 800c14c:	005b      	lsls	r3, r3, #1
 800c14e:	4413      	add	r3, r2
 800c150:	00db      	lsls	r3, r3, #3
 800c152:	440b      	add	r3, r1
 800c154:	3314      	adds	r3, #20
 800c156:	781b      	ldrb	r3, [r3, #0]
 800c158:	2b03      	cmp	r3, #3
 800c15a:	d10a      	bne.n	800c172 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800c15c:	79fa      	ldrb	r2, [r7, #7]
 800c15e:	4925      	ldr	r1, [pc, #148]	; (800c1f4 <etharp_tmr+0x14c>)
 800c160:	4613      	mov	r3, r2
 800c162:	005b      	lsls	r3, r3, #1
 800c164:	4413      	add	r3, r2
 800c166:	00db      	lsls	r3, r3, #3
 800c168:	440b      	add	r3, r1
 800c16a:	3314      	adds	r3, #20
 800c16c:	2204      	movs	r2, #4
 800c16e:	701a      	strb	r2, [r3, #0]
 800c170:	e034      	b.n	800c1dc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800c172:	79fa      	ldrb	r2, [r7, #7]
 800c174:	491f      	ldr	r1, [pc, #124]	; (800c1f4 <etharp_tmr+0x14c>)
 800c176:	4613      	mov	r3, r2
 800c178:	005b      	lsls	r3, r3, #1
 800c17a:	4413      	add	r3, r2
 800c17c:	00db      	lsls	r3, r3, #3
 800c17e:	440b      	add	r3, r1
 800c180:	3314      	adds	r3, #20
 800c182:	781b      	ldrb	r3, [r3, #0]
 800c184:	2b04      	cmp	r3, #4
 800c186:	d10a      	bne.n	800c19e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800c188:	79fa      	ldrb	r2, [r7, #7]
 800c18a:	491a      	ldr	r1, [pc, #104]	; (800c1f4 <etharp_tmr+0x14c>)
 800c18c:	4613      	mov	r3, r2
 800c18e:	005b      	lsls	r3, r3, #1
 800c190:	4413      	add	r3, r2
 800c192:	00db      	lsls	r3, r3, #3
 800c194:	440b      	add	r3, r1
 800c196:	3314      	adds	r3, #20
 800c198:	2202      	movs	r2, #2
 800c19a:	701a      	strb	r2, [r3, #0]
 800c19c:	e01e      	b.n	800c1dc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800c19e:	79fa      	ldrb	r2, [r7, #7]
 800c1a0:	4914      	ldr	r1, [pc, #80]	; (800c1f4 <etharp_tmr+0x14c>)
 800c1a2:	4613      	mov	r3, r2
 800c1a4:	005b      	lsls	r3, r3, #1
 800c1a6:	4413      	add	r3, r2
 800c1a8:	00db      	lsls	r3, r3, #3
 800c1aa:	440b      	add	r3, r1
 800c1ac:	3314      	adds	r3, #20
 800c1ae:	781b      	ldrb	r3, [r3, #0]
 800c1b0:	2b01      	cmp	r3, #1
 800c1b2:	d113      	bne.n	800c1dc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800c1b4:	79fa      	ldrb	r2, [r7, #7]
 800c1b6:	490f      	ldr	r1, [pc, #60]	; (800c1f4 <etharp_tmr+0x14c>)
 800c1b8:	4613      	mov	r3, r2
 800c1ba:	005b      	lsls	r3, r3, #1
 800c1bc:	4413      	add	r3, r2
 800c1be:	00db      	lsls	r3, r3, #3
 800c1c0:	440b      	add	r3, r1
 800c1c2:	3308      	adds	r3, #8
 800c1c4:	6818      	ldr	r0, [r3, #0]
 800c1c6:	79fa      	ldrb	r2, [r7, #7]
 800c1c8:	4613      	mov	r3, r2
 800c1ca:	005b      	lsls	r3, r3, #1
 800c1cc:	4413      	add	r3, r2
 800c1ce:	00db      	lsls	r3, r3, #3
 800c1d0:	4a08      	ldr	r2, [pc, #32]	; (800c1f4 <etharp_tmr+0x14c>)
 800c1d2:	4413      	add	r3, r2
 800c1d4:	3304      	adds	r3, #4
 800c1d6:	4619      	mov	r1, r3
 800c1d8:	f000 fe3c 	bl	800ce54 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c1dc:	79fb      	ldrb	r3, [r7, #7]
 800c1de:	3301      	adds	r3, #1
 800c1e0:	71fb      	strb	r3, [r7, #7]
 800c1e2:	79fb      	ldrb	r3, [r7, #7]
 800c1e4:	2b09      	cmp	r3, #9
 800c1e6:	f67f af65 	bls.w	800c0b4 <etharp_tmr+0xc>
      }
    }
  }
}
 800c1ea:	bf00      	nop
 800c1ec:	3708      	adds	r7, #8
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	bd80      	pop	{r7, pc}
 800c1f2:	bf00      	nop
 800c1f4:	20000120 	.word	0x20000120

0800c1f8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b088      	sub	sp, #32
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	60f8      	str	r0, [r7, #12]
 800c200:	460b      	mov	r3, r1
 800c202:	607a      	str	r2, [r7, #4]
 800c204:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800c206:	230a      	movs	r3, #10
 800c208:	77fb      	strb	r3, [r7, #31]
 800c20a:	230a      	movs	r3, #10
 800c20c:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 800c20e:	230a      	movs	r3, #10
 800c210:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 800c212:	2300      	movs	r3, #0
 800c214:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 800c216:	230a      	movs	r3, #10
 800c218:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800c21a:	2300      	movs	r3, #0
 800c21c:	833b      	strh	r3, [r7, #24]
 800c21e:	2300      	movs	r3, #0
 800c220:	82fb      	strh	r3, [r7, #22]
 800c222:	2300      	movs	r3, #0
 800c224:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c226:	2300      	movs	r3, #0
 800c228:	773b      	strb	r3, [r7, #28]
 800c22a:	e093      	b.n	800c354 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 800c22c:	7f3a      	ldrb	r2, [r7, #28]
 800c22e:	4990      	ldr	r1, [pc, #576]	; (800c470 <etharp_find_entry+0x278>)
 800c230:	4613      	mov	r3, r2
 800c232:	005b      	lsls	r3, r3, #1
 800c234:	4413      	add	r3, r2
 800c236:	00db      	lsls	r3, r3, #3
 800c238:	440b      	add	r3, r1
 800c23a:	3314      	adds	r3, #20
 800c23c:	781b      	ldrb	r3, [r3, #0]
 800c23e:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800c240:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800c244:	2b0a      	cmp	r3, #10
 800c246:	d105      	bne.n	800c254 <etharp_find_entry+0x5c>
 800c248:	7cfb      	ldrb	r3, [r7, #19]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d102      	bne.n	800c254 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 800c24e:	7f3b      	ldrb	r3, [r7, #28]
 800c250:	777b      	strb	r3, [r7, #29]
 800c252:	e07c      	b.n	800c34e <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 800c254:	7cfb      	ldrb	r3, [r7, #19]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d079      	beq.n	800c34e <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800c25a:	7cfb      	ldrb	r3, [r7, #19]
 800c25c:	2b01      	cmp	r3, #1
 800c25e:	d009      	beq.n	800c274 <etharp_find_entry+0x7c>
 800c260:	7cfb      	ldrb	r3, [r7, #19]
 800c262:	2b01      	cmp	r3, #1
 800c264:	d806      	bhi.n	800c274 <etharp_find_entry+0x7c>
 800c266:	4b83      	ldr	r3, [pc, #524]	; (800c474 <etharp_find_entry+0x27c>)
 800c268:	f44f 7293 	mov.w	r2, #294	; 0x126
 800c26c:	4982      	ldr	r1, [pc, #520]	; (800c478 <etharp_find_entry+0x280>)
 800c26e:	4883      	ldr	r0, [pc, #524]	; (800c47c <etharp_find_entry+0x284>)
 800c270:	f002 f956 	bl	800e520 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d00f      	beq.n	800c29a <etharp_find_entry+0xa2>
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	6819      	ldr	r1, [r3, #0]
 800c27e:	7f3a      	ldrb	r2, [r7, #28]
 800c280:	487b      	ldr	r0, [pc, #492]	; (800c470 <etharp_find_entry+0x278>)
 800c282:	4613      	mov	r3, r2
 800c284:	005b      	lsls	r3, r3, #1
 800c286:	4413      	add	r3, r2
 800c288:	00db      	lsls	r3, r3, #3
 800c28a:	4403      	add	r3, r0
 800c28c:	3304      	adds	r3, #4
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	4299      	cmp	r1, r3
 800c292:	d102      	bne.n	800c29a <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 800c294:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800c298:	e0e5      	b.n	800c466 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800c29a:	7cfb      	ldrb	r3, [r7, #19]
 800c29c:	2b01      	cmp	r3, #1
 800c29e:	d13b      	bne.n	800c318 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800c2a0:	7f3a      	ldrb	r2, [r7, #28]
 800c2a2:	4973      	ldr	r1, [pc, #460]	; (800c470 <etharp_find_entry+0x278>)
 800c2a4:	4613      	mov	r3, r2
 800c2a6:	005b      	lsls	r3, r3, #1
 800c2a8:	4413      	add	r3, r2
 800c2aa:	00db      	lsls	r3, r3, #3
 800c2ac:	440b      	add	r3, r1
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d018      	beq.n	800c2e6 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 800c2b4:	7f3a      	ldrb	r2, [r7, #28]
 800c2b6:	496e      	ldr	r1, [pc, #440]	; (800c470 <etharp_find_entry+0x278>)
 800c2b8:	4613      	mov	r3, r2
 800c2ba:	005b      	lsls	r3, r3, #1
 800c2bc:	4413      	add	r3, r2
 800c2be:	00db      	lsls	r3, r3, #3
 800c2c0:	440b      	add	r3, r1
 800c2c2:	3312      	adds	r3, #18
 800c2c4:	881b      	ldrh	r3, [r3, #0]
 800c2c6:	8b3a      	ldrh	r2, [r7, #24]
 800c2c8:	429a      	cmp	r2, r3
 800c2ca:	d840      	bhi.n	800c34e <etharp_find_entry+0x156>
            old_queue = i;
 800c2cc:	7f3b      	ldrb	r3, [r7, #28]
 800c2ce:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 800c2d0:	7f3a      	ldrb	r2, [r7, #28]
 800c2d2:	4967      	ldr	r1, [pc, #412]	; (800c470 <etharp_find_entry+0x278>)
 800c2d4:	4613      	mov	r3, r2
 800c2d6:	005b      	lsls	r3, r3, #1
 800c2d8:	4413      	add	r3, r2
 800c2da:	00db      	lsls	r3, r3, #3
 800c2dc:	440b      	add	r3, r1
 800c2de:	3312      	adds	r3, #18
 800c2e0:	881b      	ldrh	r3, [r3, #0]
 800c2e2:	833b      	strh	r3, [r7, #24]
 800c2e4:	e033      	b.n	800c34e <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800c2e6:	7f3a      	ldrb	r2, [r7, #28]
 800c2e8:	4961      	ldr	r1, [pc, #388]	; (800c470 <etharp_find_entry+0x278>)
 800c2ea:	4613      	mov	r3, r2
 800c2ec:	005b      	lsls	r3, r3, #1
 800c2ee:	4413      	add	r3, r2
 800c2f0:	00db      	lsls	r3, r3, #3
 800c2f2:	440b      	add	r3, r1
 800c2f4:	3312      	adds	r3, #18
 800c2f6:	881b      	ldrh	r3, [r3, #0]
 800c2f8:	8afa      	ldrh	r2, [r7, #22]
 800c2fa:	429a      	cmp	r2, r3
 800c2fc:	d827      	bhi.n	800c34e <etharp_find_entry+0x156>
            old_pending = i;
 800c2fe:	7f3b      	ldrb	r3, [r7, #28]
 800c300:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 800c302:	7f3a      	ldrb	r2, [r7, #28]
 800c304:	495a      	ldr	r1, [pc, #360]	; (800c470 <etharp_find_entry+0x278>)
 800c306:	4613      	mov	r3, r2
 800c308:	005b      	lsls	r3, r3, #1
 800c30a:	4413      	add	r3, r2
 800c30c:	00db      	lsls	r3, r3, #3
 800c30e:	440b      	add	r3, r1
 800c310:	3312      	adds	r3, #18
 800c312:	881b      	ldrh	r3, [r3, #0]
 800c314:	82fb      	strh	r3, [r7, #22]
 800c316:	e01a      	b.n	800c34e <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800c318:	7cfb      	ldrb	r3, [r7, #19]
 800c31a:	2b01      	cmp	r3, #1
 800c31c:	d917      	bls.n	800c34e <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800c31e:	7f3a      	ldrb	r2, [r7, #28]
 800c320:	4953      	ldr	r1, [pc, #332]	; (800c470 <etharp_find_entry+0x278>)
 800c322:	4613      	mov	r3, r2
 800c324:	005b      	lsls	r3, r3, #1
 800c326:	4413      	add	r3, r2
 800c328:	00db      	lsls	r3, r3, #3
 800c32a:	440b      	add	r3, r1
 800c32c:	3312      	adds	r3, #18
 800c32e:	881b      	ldrh	r3, [r3, #0]
 800c330:	8aba      	ldrh	r2, [r7, #20]
 800c332:	429a      	cmp	r2, r3
 800c334:	d80b      	bhi.n	800c34e <etharp_find_entry+0x156>
            old_stable = i;
 800c336:	7f3b      	ldrb	r3, [r7, #28]
 800c338:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 800c33a:	7f3a      	ldrb	r2, [r7, #28]
 800c33c:	494c      	ldr	r1, [pc, #304]	; (800c470 <etharp_find_entry+0x278>)
 800c33e:	4613      	mov	r3, r2
 800c340:	005b      	lsls	r3, r3, #1
 800c342:	4413      	add	r3, r2
 800c344:	00db      	lsls	r3, r3, #3
 800c346:	440b      	add	r3, r1
 800c348:	3312      	adds	r3, #18
 800c34a:	881b      	ldrh	r3, [r3, #0]
 800c34c:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c34e:	7f3b      	ldrb	r3, [r7, #28]
 800c350:	3301      	adds	r3, #1
 800c352:	773b      	strb	r3, [r7, #28]
 800c354:	7f3b      	ldrb	r3, [r7, #28]
 800c356:	2b09      	cmp	r3, #9
 800c358:	f67f af68 	bls.w	800c22c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800c35c:	7afb      	ldrb	r3, [r7, #11]
 800c35e:	f003 0302 	and.w	r3, r3, #2
 800c362:	2b00      	cmp	r3, #0
 800c364:	d108      	bne.n	800c378 <etharp_find_entry+0x180>
 800c366:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800c36a:	2b0a      	cmp	r3, #10
 800c36c:	d107      	bne.n	800c37e <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800c36e:	7afb      	ldrb	r3, [r7, #11]
 800c370:	f003 0301 	and.w	r3, r3, #1
 800c374:	2b00      	cmp	r3, #0
 800c376:	d102      	bne.n	800c37e <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 800c378:	f04f 33ff 	mov.w	r3, #4294967295
 800c37c:	e073      	b.n	800c466 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800c37e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800c382:	2b09      	cmp	r3, #9
 800c384:	dc02      	bgt.n	800c38c <etharp_find_entry+0x194>
    i = empty;
 800c386:	7f7b      	ldrb	r3, [r7, #29]
 800c388:	773b      	strb	r3, [r7, #28]
 800c38a:	e036      	b.n	800c3fa <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800c38c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800c390:	2b09      	cmp	r3, #9
 800c392:	dc13      	bgt.n	800c3bc <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 800c394:	7fbb      	ldrb	r3, [r7, #30]
 800c396:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800c398:	7f3a      	ldrb	r2, [r7, #28]
 800c39a:	4935      	ldr	r1, [pc, #212]	; (800c470 <etharp_find_entry+0x278>)
 800c39c:	4613      	mov	r3, r2
 800c39e:	005b      	lsls	r3, r3, #1
 800c3a0:	4413      	add	r3, r2
 800c3a2:	00db      	lsls	r3, r3, #3
 800c3a4:	440b      	add	r3, r1
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d018      	beq.n	800c3de <etharp_find_entry+0x1e6>
 800c3ac:	4b31      	ldr	r3, [pc, #196]	; (800c474 <etharp_find_entry+0x27c>)
 800c3ae:	f240 126f 	movw	r2, #367	; 0x16f
 800c3b2:	4933      	ldr	r1, [pc, #204]	; (800c480 <etharp_find_entry+0x288>)
 800c3b4:	4831      	ldr	r0, [pc, #196]	; (800c47c <etharp_find_entry+0x284>)
 800c3b6:	f002 f8b3 	bl	800e520 <iprintf>
 800c3ba:	e010      	b.n	800c3de <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800c3bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c3c0:	2b09      	cmp	r3, #9
 800c3c2:	dc02      	bgt.n	800c3ca <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 800c3c4:	7ffb      	ldrb	r3, [r7, #31]
 800c3c6:	773b      	strb	r3, [r7, #28]
 800c3c8:	e009      	b.n	800c3de <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800c3ca:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c3ce:	2b09      	cmp	r3, #9
 800c3d0:	dc02      	bgt.n	800c3d8 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800c3d2:	7efb      	ldrb	r3, [r7, #27]
 800c3d4:	773b      	strb	r3, [r7, #28]
 800c3d6:	e002      	b.n	800c3de <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 800c3d8:	f04f 33ff 	mov.w	r3, #4294967295
 800c3dc:	e043      	b.n	800c466 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c3de:	7f3b      	ldrb	r3, [r7, #28]
 800c3e0:	2b09      	cmp	r3, #9
 800c3e2:	d906      	bls.n	800c3f2 <etharp_find_entry+0x1fa>
 800c3e4:	4b23      	ldr	r3, [pc, #140]	; (800c474 <etharp_find_entry+0x27c>)
 800c3e6:	f240 1281 	movw	r2, #385	; 0x181
 800c3ea:	4926      	ldr	r1, [pc, #152]	; (800c484 <etharp_find_entry+0x28c>)
 800c3ec:	4823      	ldr	r0, [pc, #140]	; (800c47c <etharp_find_entry+0x284>)
 800c3ee:	f002 f897 	bl	800e520 <iprintf>
    etharp_free_entry(i);
 800c3f2:	7f3b      	ldrb	r3, [r7, #28]
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f7ff fe25 	bl	800c044 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800c3fa:	7f3b      	ldrb	r3, [r7, #28]
 800c3fc:	2b09      	cmp	r3, #9
 800c3fe:	d906      	bls.n	800c40e <etharp_find_entry+0x216>
 800c400:	4b1c      	ldr	r3, [pc, #112]	; (800c474 <etharp_find_entry+0x27c>)
 800c402:	f240 1285 	movw	r2, #389	; 0x185
 800c406:	491f      	ldr	r1, [pc, #124]	; (800c484 <etharp_find_entry+0x28c>)
 800c408:	481c      	ldr	r0, [pc, #112]	; (800c47c <etharp_find_entry+0x284>)
 800c40a:	f002 f889 	bl	800e520 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800c40e:	7f3a      	ldrb	r2, [r7, #28]
 800c410:	4917      	ldr	r1, [pc, #92]	; (800c470 <etharp_find_entry+0x278>)
 800c412:	4613      	mov	r3, r2
 800c414:	005b      	lsls	r3, r3, #1
 800c416:	4413      	add	r3, r2
 800c418:	00db      	lsls	r3, r3, #3
 800c41a:	440b      	add	r3, r1
 800c41c:	3314      	adds	r3, #20
 800c41e:	781b      	ldrb	r3, [r3, #0]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d006      	beq.n	800c432 <etharp_find_entry+0x23a>
 800c424:	4b13      	ldr	r3, [pc, #76]	; (800c474 <etharp_find_entry+0x27c>)
 800c426:	f240 1287 	movw	r2, #391	; 0x187
 800c42a:	4917      	ldr	r1, [pc, #92]	; (800c488 <etharp_find_entry+0x290>)
 800c42c:	4813      	ldr	r0, [pc, #76]	; (800c47c <etharp_find_entry+0x284>)
 800c42e:	f002 f877 	bl	800e520 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d00a      	beq.n	800c44e <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800c438:	7f3a      	ldrb	r2, [r7, #28]
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	6819      	ldr	r1, [r3, #0]
 800c43e:	480c      	ldr	r0, [pc, #48]	; (800c470 <etharp_find_entry+0x278>)
 800c440:	4613      	mov	r3, r2
 800c442:	005b      	lsls	r3, r3, #1
 800c444:	4413      	add	r3, r2
 800c446:	00db      	lsls	r3, r3, #3
 800c448:	4403      	add	r3, r0
 800c44a:	3304      	adds	r3, #4
 800c44c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800c44e:	7f3a      	ldrb	r2, [r7, #28]
 800c450:	4907      	ldr	r1, [pc, #28]	; (800c470 <etharp_find_entry+0x278>)
 800c452:	4613      	mov	r3, r2
 800c454:	005b      	lsls	r3, r3, #1
 800c456:	4413      	add	r3, r2
 800c458:	00db      	lsls	r3, r3, #3
 800c45a:	440b      	add	r3, r1
 800c45c:	3312      	adds	r3, #18
 800c45e:	2200      	movs	r2, #0
 800c460:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 800c462:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 800c466:	4618      	mov	r0, r3
 800c468:	3720      	adds	r7, #32
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}
 800c46e:	bf00      	nop
 800c470:	20000120 	.word	0x20000120
 800c474:	08010ec8 	.word	0x08010ec8
 800c478:	08010f00 	.word	0x08010f00
 800c47c:	08010f40 	.word	0x08010f40
 800c480:	08010f68 	.word	0x08010f68
 800c484:	08010f80 	.word	0x08010f80
 800c488:	08010f94 	.word	0x08010f94

0800c48c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b088      	sub	sp, #32
 800c490:	af02      	add	r7, sp, #8
 800c492:	60f8      	str	r0, [r7, #12]
 800c494:	60b9      	str	r1, [r7, #8]
 800c496:	607a      	str	r2, [r7, #4]
 800c498:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800c4a0:	2b06      	cmp	r3, #6
 800c4a2:	d006      	beq.n	800c4b2 <etharp_update_arp_entry+0x26>
 800c4a4:	4b48      	ldr	r3, [pc, #288]	; (800c5c8 <etharp_update_arp_entry+0x13c>)
 800c4a6:	f240 12ab 	movw	r2, #427	; 0x1ab
 800c4aa:	4948      	ldr	r1, [pc, #288]	; (800c5cc <etharp_update_arp_entry+0x140>)
 800c4ac:	4848      	ldr	r0, [pc, #288]	; (800c5d0 <etharp_update_arp_entry+0x144>)
 800c4ae:	f002 f837 	bl	800e520 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800c4b2:	68bb      	ldr	r3, [r7, #8]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d012      	beq.n	800c4de <etharp_update_arp_entry+0x52>
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d00e      	beq.n	800c4de <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c4c0:	68bb      	ldr	r3, [r7, #8]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	68f9      	ldr	r1, [r7, #12]
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f001 f8fc 	bl	800d6c4 <ip4_addr_isbroadcast_u32>
 800c4cc:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d105      	bne.n	800c4de <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800c4d2:	68bb      	ldr	r3, [r7, #8]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800c4da:	2be0      	cmp	r3, #224	; 0xe0
 800c4dc:	d102      	bne.n	800c4e4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800c4de:	f06f 030f 	mvn.w	r3, #15
 800c4e2:	e06c      	b.n	800c5be <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800c4e4:	78fb      	ldrb	r3, [r7, #3]
 800c4e6:	68fa      	ldr	r2, [r7, #12]
 800c4e8:	4619      	mov	r1, r3
 800c4ea:	68b8      	ldr	r0, [r7, #8]
 800c4ec:	f7ff fe84 	bl	800c1f8 <etharp_find_entry>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 800c4f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	da02      	bge.n	800c502 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800c4fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c500:	e05d      	b.n	800c5be <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800c502:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800c506:	4933      	ldr	r1, [pc, #204]	; (800c5d4 <etharp_update_arp_entry+0x148>)
 800c508:	4613      	mov	r3, r2
 800c50a:	005b      	lsls	r3, r3, #1
 800c50c:	4413      	add	r3, r2
 800c50e:	00db      	lsls	r3, r3, #3
 800c510:	440b      	add	r3, r1
 800c512:	3314      	adds	r3, #20
 800c514:	2202      	movs	r2, #2
 800c516:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800c518:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800c51c:	492d      	ldr	r1, [pc, #180]	; (800c5d4 <etharp_update_arp_entry+0x148>)
 800c51e:	4613      	mov	r3, r2
 800c520:	005b      	lsls	r3, r3, #1
 800c522:	4413      	add	r3, r2
 800c524:	00db      	lsls	r3, r3, #3
 800c526:	440b      	add	r3, r1
 800c528:	3308      	adds	r3, #8
 800c52a:	68fa      	ldr	r2, [r7, #12]
 800c52c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800c52e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800c532:	4613      	mov	r3, r2
 800c534:	005b      	lsls	r3, r3, #1
 800c536:	4413      	add	r3, r2
 800c538:	00db      	lsls	r3, r3, #3
 800c53a:	3308      	adds	r3, #8
 800c53c:	4a25      	ldr	r2, [pc, #148]	; (800c5d4 <etharp_update_arp_entry+0x148>)
 800c53e:	4413      	add	r3, r2
 800c540:	3304      	adds	r3, #4
 800c542:	2206      	movs	r2, #6
 800c544:	6879      	ldr	r1, [r7, #4]
 800c546:	4618      	mov	r0, r3
 800c548:	f001 ffd7 	bl	800e4fa <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800c54c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800c550:	4920      	ldr	r1, [pc, #128]	; (800c5d4 <etharp_update_arp_entry+0x148>)
 800c552:	4613      	mov	r3, r2
 800c554:	005b      	lsls	r3, r3, #1
 800c556:	4413      	add	r3, r2
 800c558:	00db      	lsls	r3, r3, #3
 800c55a:	440b      	add	r3, r1
 800c55c:	3312      	adds	r3, #18
 800c55e:	2200      	movs	r2, #0
 800c560:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800c562:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800c566:	491b      	ldr	r1, [pc, #108]	; (800c5d4 <etharp_update_arp_entry+0x148>)
 800c568:	4613      	mov	r3, r2
 800c56a:	005b      	lsls	r3, r3, #1
 800c56c:	4413      	add	r3, r2
 800c56e:	00db      	lsls	r3, r3, #3
 800c570:	440b      	add	r3, r1
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d021      	beq.n	800c5bc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800c578:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800c57c:	4915      	ldr	r1, [pc, #84]	; (800c5d4 <etharp_update_arp_entry+0x148>)
 800c57e:	4613      	mov	r3, r2
 800c580:	005b      	lsls	r3, r3, #1
 800c582:	4413      	add	r3, r2
 800c584:	00db      	lsls	r3, r3, #3
 800c586:	440b      	add	r3, r1
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800c58c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800c590:	4910      	ldr	r1, [pc, #64]	; (800c5d4 <etharp_update_arp_entry+0x148>)
 800c592:	4613      	mov	r3, r2
 800c594:	005b      	lsls	r3, r3, #1
 800c596:	4413      	add	r3, r2
 800c598:	00db      	lsls	r3, r3, #3
 800c59a:	440b      	add	r3, r1
 800c59c:	2200      	movs	r2, #0
 800c59e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	f103 022d 	add.w	r2, r3, #45	; 0x2d
 800c5a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c5aa:	9300      	str	r3, [sp, #0]
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	6939      	ldr	r1, [r7, #16]
 800c5b0:	68f8      	ldr	r0, [r7, #12]
 800c5b2:	f001 ff27 	bl	800e404 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800c5b6:	6938      	ldr	r0, [r7, #16]
 800c5b8:	f7f8 fba8 	bl	8004d0c <pbuf_free>
  }
  return ERR_OK;
 800c5bc:	2300      	movs	r3, #0
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	3718      	adds	r7, #24
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	bd80      	pop	{r7, pc}
 800c5c6:	bf00      	nop
 800c5c8:	08010ec8 	.word	0x08010ec8
 800c5cc:	08010fc0 	.word	0x08010fc0
 800c5d0:	08010f40 	.word	0x08010f40
 800c5d4:	20000120 	.word	0x20000120

0800c5d8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b084      	sub	sp, #16
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	73fb      	strb	r3, [r7, #15]
 800c5e4:	e01f      	b.n	800c626 <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 800c5e6:	7bfa      	ldrb	r2, [r7, #15]
 800c5e8:	4912      	ldr	r1, [pc, #72]	; (800c634 <etharp_cleanup_netif+0x5c>)
 800c5ea:	4613      	mov	r3, r2
 800c5ec:	005b      	lsls	r3, r3, #1
 800c5ee:	4413      	add	r3, r2
 800c5f0:	00db      	lsls	r3, r3, #3
 800c5f2:	440b      	add	r3, r1
 800c5f4:	3314      	adds	r3, #20
 800c5f6:	781b      	ldrb	r3, [r3, #0]
 800c5f8:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800c5fa:	7bbb      	ldrb	r3, [r7, #14]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d00f      	beq.n	800c620 <etharp_cleanup_netif+0x48>
 800c600:	7bfa      	ldrb	r2, [r7, #15]
 800c602:	490c      	ldr	r1, [pc, #48]	; (800c634 <etharp_cleanup_netif+0x5c>)
 800c604:	4613      	mov	r3, r2
 800c606:	005b      	lsls	r3, r3, #1
 800c608:	4413      	add	r3, r2
 800c60a:	00db      	lsls	r3, r3, #3
 800c60c:	440b      	add	r3, r1
 800c60e:	3308      	adds	r3, #8
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	687a      	ldr	r2, [r7, #4]
 800c614:	429a      	cmp	r2, r3
 800c616:	d103      	bne.n	800c620 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 800c618:	7bfb      	ldrb	r3, [r7, #15]
 800c61a:	4618      	mov	r0, r3
 800c61c:	f7ff fd12 	bl	800c044 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800c620:	7bfb      	ldrb	r3, [r7, #15]
 800c622:	3301      	adds	r3, #1
 800c624:	73fb      	strb	r3, [r7, #15]
 800c626:	7bfb      	ldrb	r3, [r7, #15]
 800c628:	2b09      	cmp	r3, #9
 800c62a:	d9dc      	bls.n	800c5e6 <etharp_cleanup_netif+0xe>
    }
  }
}
 800c62c:	bf00      	nop
 800c62e:	3710      	adds	r7, #16
 800c630:	46bd      	mov	sp, r7
 800c632:	bd80      	pop	{r7, pc}
 800c634:	20000120 	.word	0x20000120

0800c638 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800c638:	b5b0      	push	{r4, r5, r7, lr}
 800c63a:	b08a      	sub	sp, #40	; 0x28
 800c63c:	af04      	add	r7, sp, #16
 800c63e:	6078      	str	r0, [r7, #4]
 800c640:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d107      	bne.n	800c658 <etharp_input+0x20>
 800c648:	4b3f      	ldr	r3, [pc, #252]	; (800c748 <etharp_input+0x110>)
 800c64a:	f44f 7222 	mov.w	r2, #648	; 0x288
 800c64e:	493f      	ldr	r1, [pc, #252]	; (800c74c <etharp_input+0x114>)
 800c650:	483f      	ldr	r0, [pc, #252]	; (800c750 <etharp_input+0x118>)
 800c652:	f001 ff65 	bl	800e520 <iprintf>
 800c656:	e074      	b.n	800c742 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	685b      	ldr	r3, [r3, #4]
 800c65c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800c65e:	693b      	ldr	r3, [r7, #16]
 800c660:	881b      	ldrh	r3, [r3, #0]
 800c662:	b29b      	uxth	r3, r3
 800c664:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c668:	d10c      	bne.n	800c684 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c66a:	693b      	ldr	r3, [r7, #16]
 800c66c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 800c66e:	2b06      	cmp	r3, #6
 800c670:	d108      	bne.n	800c684 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c672:	693b      	ldr	r3, [r7, #16]
 800c674:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800c676:	2b04      	cmp	r3, #4
 800c678:	d104      	bne.n	800c684 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800c67a:	693b      	ldr	r3, [r7, #16]
 800c67c:	885b      	ldrh	r3, [r3, #2]
 800c67e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800c680:	2b08      	cmp	r3, #8
 800c682:	d003      	beq.n	800c68c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800c684:	6878      	ldr	r0, [r7, #4]
 800c686:	f7f8 fb41 	bl	8004d0c <pbuf_free>
    return;
 800c68a:	e05a      	b.n	800c742 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800c68c:	693b      	ldr	r3, [r7, #16]
 800c68e:	330e      	adds	r3, #14
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800c694:	693b      	ldr	r3, [r7, #16]
 800c696:	3318      	adds	r3, #24
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	3304      	adds	r3, #4
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d102      	bne.n	800c6ac <etharp_input+0x74>
    for_us = 0;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	75fb      	strb	r3, [r7, #23]
 800c6aa:	e009      	b.n	800c6c0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800c6ac:	68ba      	ldr	r2, [r7, #8]
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	3304      	adds	r3, #4
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	bf0c      	ite	eq
 800c6b8:	2301      	moveq	r3, #1
 800c6ba:	2300      	movne	r3, #0
 800c6bc:	b2db      	uxtb	r3, r3
 800c6be:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800c6c0:	693b      	ldr	r3, [r7, #16]
 800c6c2:	f103 0208 	add.w	r2, r3, #8
 800c6c6:	7dfb      	ldrb	r3, [r7, #23]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d001      	beq.n	800c6d0 <etharp_input+0x98>
 800c6cc:	2301      	movs	r3, #1
 800c6ce:	e000      	b.n	800c6d2 <etharp_input+0x9a>
 800c6d0:	2302      	movs	r3, #2
 800c6d2:	f107 010c 	add.w	r1, r7, #12
 800c6d6:	6838      	ldr	r0, [r7, #0]
 800c6d8:	f7ff fed8 	bl	800c48c <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800c6dc:	693b      	ldr	r3, [r7, #16]
 800c6de:	88db      	ldrh	r3, [r3, #6]
 800c6e0:	b29b      	uxth	r3, r3
 800c6e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c6e6:	d003      	beq.n	800c6f0 <etharp_input+0xb8>
 800c6e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c6ec:	d01e      	beq.n	800c72c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 800c6ee:	e025      	b.n	800c73c <etharp_input+0x104>
    if (for_us) {
 800c6f0:	7dfb      	ldrb	r3, [r7, #23]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d021      	beq.n	800c73a <etharp_input+0x102>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800c6f6:	683b      	ldr	r3, [r7, #0]
 800c6f8:	f103 002d 	add.w	r0, r3, #45	; 0x2d
 800c6fc:	693b      	ldr	r3, [r7, #16]
 800c6fe:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	f103 052d 	add.w	r5, r3, #45	; 0x2d
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 800c70c:	693a      	ldr	r2, [r7, #16]
 800c70e:	3208      	adds	r2, #8
      etharp_raw(netif,
 800c710:	2102      	movs	r1, #2
 800c712:	9103      	str	r1, [sp, #12]
 800c714:	f107 010c 	add.w	r1, r7, #12
 800c718:	9102      	str	r1, [sp, #8]
 800c71a:	9201      	str	r2, [sp, #4]
 800c71c:	9300      	str	r3, [sp, #0]
 800c71e:	462b      	mov	r3, r5
 800c720:	4622      	mov	r2, r4
 800c722:	4601      	mov	r1, r0
 800c724:	6838      	ldr	r0, [r7, #0]
 800c726:	f000 fae7 	bl	800ccf8 <etharp_raw>
    break;
 800c72a:	e006      	b.n	800c73a <etharp_input+0x102>
    dhcp_arp_reply(netif, &sipaddr);
 800c72c:	f107 030c 	add.w	r3, r7, #12
 800c730:	4619      	mov	r1, r3
 800c732:	6838      	ldr	r0, [r7, #0]
 800c734:	f7fe f980 	bl	800aa38 <dhcp_arp_reply>
    break;
 800c738:	e000      	b.n	800c73c <etharp_input+0x104>
    break;
 800c73a:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800c73c:	6878      	ldr	r0, [r7, #4]
 800c73e:	f7f8 fae5 	bl	8004d0c <pbuf_free>
}
 800c742:	3718      	adds	r7, #24
 800c744:	46bd      	mov	sp, r7
 800c746:	bdb0      	pop	{r4, r5, r7, pc}
 800c748:	08010ec8 	.word	0x08010ec8
 800c74c:	08011018 	.word	0x08011018
 800c750:	08010f40 	.word	0x08010f40

0800c754 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b086      	sub	sp, #24
 800c758:	af02      	add	r7, sp, #8
 800c75a:	60f8      	str	r0, [r7, #12]
 800c75c:	60b9      	str	r1, [r7, #8]
 800c75e:	4613      	mov	r3, r2
 800c760:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800c762:	79fa      	ldrb	r2, [r7, #7]
 800c764:	4944      	ldr	r1, [pc, #272]	; (800c878 <etharp_output_to_arp_index+0x124>)
 800c766:	4613      	mov	r3, r2
 800c768:	005b      	lsls	r3, r3, #1
 800c76a:	4413      	add	r3, r2
 800c76c:	00db      	lsls	r3, r3, #3
 800c76e:	440b      	add	r3, r1
 800c770:	3314      	adds	r3, #20
 800c772:	781b      	ldrb	r3, [r3, #0]
 800c774:	2b01      	cmp	r3, #1
 800c776:	d806      	bhi.n	800c786 <etharp_output_to_arp_index+0x32>
 800c778:	4b40      	ldr	r3, [pc, #256]	; (800c87c <etharp_output_to_arp_index+0x128>)
 800c77a:	f240 22ed 	movw	r2, #749	; 0x2ed
 800c77e:	4940      	ldr	r1, [pc, #256]	; (800c880 <etharp_output_to_arp_index+0x12c>)
 800c780:	4840      	ldr	r0, [pc, #256]	; (800c884 <etharp_output_to_arp_index+0x130>)
 800c782:	f001 fecd 	bl	800e520 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800c786:	79fa      	ldrb	r2, [r7, #7]
 800c788:	493b      	ldr	r1, [pc, #236]	; (800c878 <etharp_output_to_arp_index+0x124>)
 800c78a:	4613      	mov	r3, r2
 800c78c:	005b      	lsls	r3, r3, #1
 800c78e:	4413      	add	r3, r2
 800c790:	00db      	lsls	r3, r3, #3
 800c792:	440b      	add	r3, r1
 800c794:	3314      	adds	r3, #20
 800c796:	781b      	ldrb	r3, [r3, #0]
 800c798:	2b02      	cmp	r3, #2
 800c79a:	d153      	bne.n	800c844 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800c79c:	79fa      	ldrb	r2, [r7, #7]
 800c79e:	4936      	ldr	r1, [pc, #216]	; (800c878 <etharp_output_to_arp_index+0x124>)
 800c7a0:	4613      	mov	r3, r2
 800c7a2:	005b      	lsls	r3, r3, #1
 800c7a4:	4413      	add	r3, r2
 800c7a6:	00db      	lsls	r3, r3, #3
 800c7a8:	440b      	add	r3, r1
 800c7aa:	3312      	adds	r3, #18
 800c7ac:	881b      	ldrh	r3, [r3, #0]
 800c7ae:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800c7b2:	d919      	bls.n	800c7e8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800c7b4:	79fa      	ldrb	r2, [r7, #7]
 800c7b6:	4613      	mov	r3, r2
 800c7b8:	005b      	lsls	r3, r3, #1
 800c7ba:	4413      	add	r3, r2
 800c7bc:	00db      	lsls	r3, r3, #3
 800c7be:	4a2e      	ldr	r2, [pc, #184]	; (800c878 <etharp_output_to_arp_index+0x124>)
 800c7c0:	4413      	add	r3, r2
 800c7c2:	3304      	adds	r3, #4
 800c7c4:	4619      	mov	r1, r3
 800c7c6:	68f8      	ldr	r0, [r7, #12]
 800c7c8:	f000 fb44 	bl	800ce54 <etharp_request>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d138      	bne.n	800c844 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c7d2:	79fa      	ldrb	r2, [r7, #7]
 800c7d4:	4928      	ldr	r1, [pc, #160]	; (800c878 <etharp_output_to_arp_index+0x124>)
 800c7d6:	4613      	mov	r3, r2
 800c7d8:	005b      	lsls	r3, r3, #1
 800c7da:	4413      	add	r3, r2
 800c7dc:	00db      	lsls	r3, r3, #3
 800c7de:	440b      	add	r3, r1
 800c7e0:	3314      	adds	r3, #20
 800c7e2:	2203      	movs	r2, #3
 800c7e4:	701a      	strb	r2, [r3, #0]
 800c7e6:	e02d      	b.n	800c844 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800c7e8:	79fa      	ldrb	r2, [r7, #7]
 800c7ea:	4923      	ldr	r1, [pc, #140]	; (800c878 <etharp_output_to_arp_index+0x124>)
 800c7ec:	4613      	mov	r3, r2
 800c7ee:	005b      	lsls	r3, r3, #1
 800c7f0:	4413      	add	r3, r2
 800c7f2:	00db      	lsls	r3, r3, #3
 800c7f4:	440b      	add	r3, r1
 800c7f6:	3312      	adds	r3, #18
 800c7f8:	881b      	ldrh	r3, [r3, #0]
 800c7fa:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800c7fe:	d321      	bcc.n	800c844 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800c800:	79fa      	ldrb	r2, [r7, #7]
 800c802:	4613      	mov	r3, r2
 800c804:	005b      	lsls	r3, r3, #1
 800c806:	4413      	add	r3, r2
 800c808:	00db      	lsls	r3, r3, #3
 800c80a:	4a1b      	ldr	r2, [pc, #108]	; (800c878 <etharp_output_to_arp_index+0x124>)
 800c80c:	4413      	add	r3, r2
 800c80e:	1d19      	adds	r1, r3, #4
 800c810:	79fa      	ldrb	r2, [r7, #7]
 800c812:	4613      	mov	r3, r2
 800c814:	005b      	lsls	r3, r3, #1
 800c816:	4413      	add	r3, r2
 800c818:	00db      	lsls	r3, r3, #3
 800c81a:	3308      	adds	r3, #8
 800c81c:	4a16      	ldr	r2, [pc, #88]	; (800c878 <etharp_output_to_arp_index+0x124>)
 800c81e:	4413      	add	r3, r2
 800c820:	3304      	adds	r3, #4
 800c822:	461a      	mov	r2, r3
 800c824:	68f8      	ldr	r0, [r7, #12]
 800c826:	f000 faf3 	bl	800ce10 <etharp_request_dst>
 800c82a:	4603      	mov	r3, r0
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d109      	bne.n	800c844 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800c830:	79fa      	ldrb	r2, [r7, #7]
 800c832:	4911      	ldr	r1, [pc, #68]	; (800c878 <etharp_output_to_arp_index+0x124>)
 800c834:	4613      	mov	r3, r2
 800c836:	005b      	lsls	r3, r3, #1
 800c838:	4413      	add	r3, r2
 800c83a:	00db      	lsls	r3, r3, #3
 800c83c:	440b      	add	r3, r1
 800c83e:	3314      	adds	r3, #20
 800c840:	2203      	movs	r2, #3
 800c842:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	f103 012d 	add.w	r1, r3, #45	; 0x2d
 800c84a:	79fa      	ldrb	r2, [r7, #7]
 800c84c:	4613      	mov	r3, r2
 800c84e:	005b      	lsls	r3, r3, #1
 800c850:	4413      	add	r3, r2
 800c852:	00db      	lsls	r3, r3, #3
 800c854:	3308      	adds	r3, #8
 800c856:	4a08      	ldr	r2, [pc, #32]	; (800c878 <etharp_output_to_arp_index+0x124>)
 800c858:	4413      	add	r3, r2
 800c85a:	1d1a      	adds	r2, r3, #4
 800c85c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c860:	9300      	str	r3, [sp, #0]
 800c862:	4613      	mov	r3, r2
 800c864:	460a      	mov	r2, r1
 800c866:	68b9      	ldr	r1, [r7, #8]
 800c868:	68f8      	ldr	r0, [r7, #12]
 800c86a:	f001 fdcb 	bl	800e404 <ethernet_output>
 800c86e:	4603      	mov	r3, r0
}
 800c870:	4618      	mov	r0, r3
 800c872:	3710      	adds	r7, #16
 800c874:	46bd      	mov	sp, r7
 800c876:	bd80      	pop	{r7, pc}
 800c878:	20000120 	.word	0x20000120
 800c87c:	08010ec8 	.word	0x08010ec8
 800c880:	08011038 	.word	0x08011038
 800c884:	08010f40 	.word	0x08010f40

0800c888 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b08a      	sub	sp, #40	; 0x28
 800c88c:	af02      	add	r7, sp, #8
 800c88e:	60f8      	str	r0, [r7, #12]
 800c890:	60b9      	str	r1, [r7, #8]
 800c892:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d106      	bne.n	800c8ac <etharp_output+0x24>
 800c89e:	4b69      	ldr	r3, [pc, #420]	; (800ca44 <etharp_output+0x1bc>)
 800c8a0:	f240 321b 	movw	r2, #795	; 0x31b
 800c8a4:	4968      	ldr	r1, [pc, #416]	; (800ca48 <etharp_output+0x1c0>)
 800c8a6:	4869      	ldr	r0, [pc, #420]	; (800ca4c <etharp_output+0x1c4>)
 800c8a8:	f001 fe3a 	bl	800e520 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d106      	bne.n	800c8c0 <etharp_output+0x38>
 800c8b2:	4b64      	ldr	r3, [pc, #400]	; (800ca44 <etharp_output+0x1bc>)
 800c8b4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800c8b8:	4965      	ldr	r1, [pc, #404]	; (800ca50 <etharp_output+0x1c8>)
 800c8ba:	4864      	ldr	r0, [pc, #400]	; (800ca4c <etharp_output+0x1c4>)
 800c8bc:	f001 fe30 	bl	800e520 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d106      	bne.n	800c8d4 <etharp_output+0x4c>
 800c8c6:	4b5f      	ldr	r3, [pc, #380]	; (800ca44 <etharp_output+0x1bc>)
 800c8c8:	f240 321d 	movw	r2, #797	; 0x31d
 800c8cc:	4961      	ldr	r1, [pc, #388]	; (800ca54 <etharp_output+0x1cc>)
 800c8ce:	485f      	ldr	r0, [pc, #380]	; (800ca4c <etharp_output+0x1c4>)
 800c8d0:	f001 fe26 	bl	800e520 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	68f9      	ldr	r1, [r7, #12]
 800c8da:	4618      	mov	r0, r3
 800c8dc:	f000 fef2 	bl	800d6c4 <ip4_addr_isbroadcast_u32>
 800c8e0:	4603      	mov	r3, r0
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d002      	beq.n	800c8ec <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800c8e6:	4b5c      	ldr	r3, [pc, #368]	; (800ca58 <etharp_output+0x1d0>)
 800c8e8:	61fb      	str	r3, [r7, #28]
 800c8ea:	e09b      	b.n	800ca24 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c8f4:	2be0      	cmp	r3, #224	; 0xe0
 800c8f6:	d118      	bne.n	800c92a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800c8f8:	2301      	movs	r3, #1
 800c8fa:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800c900:	235e      	movs	r3, #94	; 0x5e
 800c902:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	3301      	adds	r3, #1
 800c908:	781b      	ldrb	r3, [r3, #0]
 800c90a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c90e:	b2db      	uxtb	r3, r3
 800c910:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	3302      	adds	r3, #2
 800c916:	781b      	ldrb	r3, [r3, #0]
 800c918:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	3303      	adds	r3, #3
 800c91e:	781b      	ldrb	r3, [r3, #0]
 800c920:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800c922:	f107 0310 	add.w	r3, r7, #16
 800c926:	61fb      	str	r3, [r7, #28]
 800c928:	e07c      	b.n	800ca24 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681a      	ldr	r2, [r3, #0]
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	3304      	adds	r3, #4
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	405a      	eors	r2, r3
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	3308      	adds	r3, #8
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	4013      	ands	r3, r2
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d012      	beq.n	800c968 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800c948:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800c94c:	4293      	cmp	r3, r2
 800c94e:	d00b      	beq.n	800c968 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	330c      	adds	r3, #12
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d003      	beq.n	800c962 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	330c      	adds	r3, #12
 800c95e:	61bb      	str	r3, [r7, #24]
 800c960:	e002      	b.n	800c968 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800c962:	f06f 0303 	mvn.w	r3, #3
 800c966:	e069      	b.n	800ca3c <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c968:	4b3c      	ldr	r3, [pc, #240]	; (800ca5c <etharp_output+0x1d4>)
 800c96a:	781b      	ldrb	r3, [r3, #0]
 800c96c:	4619      	mov	r1, r3
 800c96e:	4a3c      	ldr	r2, [pc, #240]	; (800ca60 <etharp_output+0x1d8>)
 800c970:	460b      	mov	r3, r1
 800c972:	005b      	lsls	r3, r3, #1
 800c974:	440b      	add	r3, r1
 800c976:	00db      	lsls	r3, r3, #3
 800c978:	4413      	add	r3, r2
 800c97a:	3314      	adds	r3, #20
 800c97c:	781b      	ldrb	r3, [r3, #0]
 800c97e:	2b01      	cmp	r3, #1
 800c980:	d917      	bls.n	800c9b2 <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800c982:	69bb      	ldr	r3, [r7, #24]
 800c984:	681a      	ldr	r2, [r3, #0]
 800c986:	4b35      	ldr	r3, [pc, #212]	; (800ca5c <etharp_output+0x1d4>)
 800c988:	781b      	ldrb	r3, [r3, #0]
 800c98a:	4618      	mov	r0, r3
 800c98c:	4934      	ldr	r1, [pc, #208]	; (800ca60 <etharp_output+0x1d8>)
 800c98e:	4603      	mov	r3, r0
 800c990:	005b      	lsls	r3, r3, #1
 800c992:	4403      	add	r3, r0
 800c994:	00db      	lsls	r3, r3, #3
 800c996:	440b      	add	r3, r1
 800c998:	3304      	adds	r3, #4
 800c99a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800c99c:	429a      	cmp	r2, r3
 800c99e:	d108      	bne.n	800c9b2 <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800c9a0:	4b2e      	ldr	r3, [pc, #184]	; (800ca5c <etharp_output+0x1d4>)
 800c9a2:	781b      	ldrb	r3, [r3, #0]
 800c9a4:	461a      	mov	r2, r3
 800c9a6:	68b9      	ldr	r1, [r7, #8]
 800c9a8:	68f8      	ldr	r0, [r7, #12]
 800c9aa:	f7ff fed3 	bl	800c754 <etharp_output_to_arp_index>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	e044      	b.n	800ca3c <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	75fb      	strb	r3, [r7, #23]
 800c9b6:	e02a      	b.n	800ca0e <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c9b8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800c9bc:	4928      	ldr	r1, [pc, #160]	; (800ca60 <etharp_output+0x1d8>)
 800c9be:	4613      	mov	r3, r2
 800c9c0:	005b      	lsls	r3, r3, #1
 800c9c2:	4413      	add	r3, r2
 800c9c4:	00db      	lsls	r3, r3, #3
 800c9c6:	440b      	add	r3, r1
 800c9c8:	3314      	adds	r3, #20
 800c9ca:	781b      	ldrb	r3, [r3, #0]
 800c9cc:	2b01      	cmp	r3, #1
 800c9ce:	d918      	bls.n	800ca02 <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800c9d0:	69bb      	ldr	r3, [r7, #24]
 800c9d2:	6819      	ldr	r1, [r3, #0]
 800c9d4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800c9d8:	4821      	ldr	r0, [pc, #132]	; (800ca60 <etharp_output+0x1d8>)
 800c9da:	4613      	mov	r3, r2
 800c9dc:	005b      	lsls	r3, r3, #1
 800c9de:	4413      	add	r3, r2
 800c9e0:	00db      	lsls	r3, r3, #3
 800c9e2:	4403      	add	r3, r0
 800c9e4:	3304      	adds	r3, #4
 800c9e6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800c9e8:	4299      	cmp	r1, r3
 800c9ea:	d10a      	bne.n	800ca02 <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 800c9ec:	7dfa      	ldrb	r2, [r7, #23]
 800c9ee:	4b1b      	ldr	r3, [pc, #108]	; (800ca5c <etharp_output+0x1d4>)
 800c9f0:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800c9f2:	7dfb      	ldrb	r3, [r7, #23]
 800c9f4:	461a      	mov	r2, r3
 800c9f6:	68b9      	ldr	r1, [r7, #8]
 800c9f8:	68f8      	ldr	r0, [r7, #12]
 800c9fa:	f7ff feab 	bl	800c754 <etharp_output_to_arp_index>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	e01c      	b.n	800ca3c <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800ca02:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ca06:	b2db      	uxtb	r3, r3
 800ca08:	3301      	adds	r3, #1
 800ca0a:	b2db      	uxtb	r3, r3
 800ca0c:	75fb      	strb	r3, [r7, #23]
 800ca0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ca12:	2b09      	cmp	r3, #9
 800ca14:	ddd0      	ble.n	800c9b8 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800ca16:	68ba      	ldr	r2, [r7, #8]
 800ca18:	69b9      	ldr	r1, [r7, #24]
 800ca1a:	68f8      	ldr	r0, [r7, #12]
 800ca1c:	f000 f822 	bl	800ca64 <etharp_query>
 800ca20:	4603      	mov	r3, r0
 800ca22:	e00b      	b.n	800ca3c <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	f103 022d 	add.w	r2, r3, #45	; 0x2d
 800ca2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ca2e:	9300      	str	r3, [sp, #0]
 800ca30:	69fb      	ldr	r3, [r7, #28]
 800ca32:	68b9      	ldr	r1, [r7, #8]
 800ca34:	68f8      	ldr	r0, [r7, #12]
 800ca36:	f001 fce5 	bl	800e404 <ethernet_output>
 800ca3a:	4603      	mov	r3, r0
}
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	3720      	adds	r7, #32
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}
 800ca44:	08010ec8 	.word	0x08010ec8
 800ca48:	08011018 	.word	0x08011018
 800ca4c:	08010f40 	.word	0x08010f40
 800ca50:	08011068 	.word	0x08011068
 800ca54:	08011008 	.word	0x08011008
 800ca58:	08011644 	.word	0x08011644
 800ca5c:	20000210 	.word	0x20000210
 800ca60:	20000120 	.word	0x20000120

0800ca64 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b08c      	sub	sp, #48	; 0x30
 800ca68:	af02      	add	r7, sp, #8
 800ca6a:	60f8      	str	r0, [r7, #12]
 800ca6c:	60b9      	str	r1, [r7, #8]
 800ca6e:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	332d      	adds	r3, #45	; 0x2d
 800ca74:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800ca76:	23ff      	movs	r3, #255	; 0xff
 800ca78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	68f9      	ldr	r1, [r7, #12]
 800ca86:	4618      	mov	r0, r3
 800ca88:	f000 fe1c 	bl	800d6c4 <ip4_addr_isbroadcast_u32>
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d10c      	bne.n	800caac <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ca92:	68bb      	ldr	r3, [r7, #8]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800ca9a:	2be0      	cmp	r3, #224	; 0xe0
 800ca9c:	d006      	beq.n	800caac <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800ca9e:	68bb      	ldr	r3, [r7, #8]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d003      	beq.n	800caac <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d102      	bne.n	800cab2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800caac:	f06f 030f 	mvn.w	r3, #15
 800cab0:	e10f      	b.n	800ccd2 <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800cab2:	68fa      	ldr	r2, [r7, #12]
 800cab4:	2101      	movs	r1, #1
 800cab6:	68b8      	ldr	r0, [r7, #8]
 800cab8:	f7ff fb9e 	bl	800c1f8 <etharp_find_entry>
 800cabc:	4603      	mov	r3, r0
 800cabe:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 800cac0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	da02      	bge.n	800cace <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 800cac8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800cacc:	e101      	b.n	800ccd2 <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800cace:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800cad2:	4982      	ldr	r1, [pc, #520]	; (800ccdc <etharp_query+0x278>)
 800cad4:	4613      	mov	r3, r2
 800cad6:	005b      	lsls	r3, r3, #1
 800cad8:	4413      	add	r3, r2
 800cada:	00db      	lsls	r3, r3, #3
 800cadc:	440b      	add	r3, r1
 800cade:	3314      	adds	r3, #20
 800cae0:	781b      	ldrb	r3, [r3, #0]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d117      	bne.n	800cb16 <etharp_query+0xb2>
    is_new_entry = 1;
 800cae6:	2301      	movs	r3, #1
 800cae8:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800caea:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800caee:	497b      	ldr	r1, [pc, #492]	; (800ccdc <etharp_query+0x278>)
 800caf0:	4613      	mov	r3, r2
 800caf2:	005b      	lsls	r3, r3, #1
 800caf4:	4413      	add	r3, r2
 800caf6:	00db      	lsls	r3, r3, #3
 800caf8:	440b      	add	r3, r1
 800cafa:	3314      	adds	r3, #20
 800cafc:	2201      	movs	r2, #1
 800cafe:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800cb00:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800cb04:	4975      	ldr	r1, [pc, #468]	; (800ccdc <etharp_query+0x278>)
 800cb06:	4613      	mov	r3, r2
 800cb08:	005b      	lsls	r3, r3, #1
 800cb0a:	4413      	add	r3, r2
 800cb0c:	00db      	lsls	r3, r3, #3
 800cb0e:	440b      	add	r3, r1
 800cb10:	3308      	adds	r3, #8
 800cb12:	68fa      	ldr	r2, [r7, #12]
 800cb14:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800cb16:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800cb1a:	4970      	ldr	r1, [pc, #448]	; (800ccdc <etharp_query+0x278>)
 800cb1c:	4613      	mov	r3, r2
 800cb1e:	005b      	lsls	r3, r3, #1
 800cb20:	4413      	add	r3, r2
 800cb22:	00db      	lsls	r3, r3, #3
 800cb24:	440b      	add	r3, r1
 800cb26:	3314      	adds	r3, #20
 800cb28:	781b      	ldrb	r3, [r3, #0]
 800cb2a:	2b01      	cmp	r3, #1
 800cb2c:	d012      	beq.n	800cb54 <etharp_query+0xf0>
 800cb2e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800cb32:	496a      	ldr	r1, [pc, #424]	; (800ccdc <etharp_query+0x278>)
 800cb34:	4613      	mov	r3, r2
 800cb36:	005b      	lsls	r3, r3, #1
 800cb38:	4413      	add	r3, r2
 800cb3a:	00db      	lsls	r3, r3, #3
 800cb3c:	440b      	add	r3, r1
 800cb3e:	3314      	adds	r3, #20
 800cb40:	781b      	ldrb	r3, [r3, #0]
 800cb42:	2b01      	cmp	r3, #1
 800cb44:	d806      	bhi.n	800cb54 <etharp_query+0xf0>
 800cb46:	4b66      	ldr	r3, [pc, #408]	; (800cce0 <etharp_query+0x27c>)
 800cb48:	f240 32c9 	movw	r2, #969	; 0x3c9
 800cb4c:	4965      	ldr	r1, [pc, #404]	; (800cce4 <etharp_query+0x280>)
 800cb4e:	4866      	ldr	r0, [pc, #408]	; (800cce8 <etharp_query+0x284>)
 800cb50:	f001 fce6 	bl	800e520 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800cb54:	6a3b      	ldr	r3, [r7, #32]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d102      	bne.n	800cb60 <etharp_query+0xfc>
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d10c      	bne.n	800cb7a <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800cb60:	68b9      	ldr	r1, [r7, #8]
 800cb62:	68f8      	ldr	r0, [r7, #12]
 800cb64:	f000 f976 	bl	800ce54 <etharp_request>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d102      	bne.n	800cb7a <etharp_query+0x116>
      return result;
 800cb74:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cb78:	e0ab      	b.n	800ccd2 <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d106      	bne.n	800cb8e <etharp_query+0x12a>
 800cb80:	4b57      	ldr	r3, [pc, #348]	; (800cce0 <etharp_query+0x27c>)
 800cb82:	f240 32db 	movw	r2, #987	; 0x3db
 800cb86:	4959      	ldr	r1, [pc, #356]	; (800ccec <etharp_query+0x288>)
 800cb88:	4857      	ldr	r0, [pc, #348]	; (800cce8 <etharp_query+0x284>)
 800cb8a:	f001 fcc9 	bl	800e520 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800cb8e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800cb92:	4952      	ldr	r1, [pc, #328]	; (800ccdc <etharp_query+0x278>)
 800cb94:	4613      	mov	r3, r2
 800cb96:	005b      	lsls	r3, r3, #1
 800cb98:	4413      	add	r3, r2
 800cb9a:	00db      	lsls	r3, r3, #3
 800cb9c:	440b      	add	r3, r1
 800cb9e:	3314      	adds	r3, #20
 800cba0:	781b      	ldrb	r3, [r3, #0]
 800cba2:	2b01      	cmp	r3, #1
 800cba4:	d919      	bls.n	800cbda <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 800cba6:	7cfa      	ldrb	r2, [r7, #19]
 800cba8:	4b51      	ldr	r3, [pc, #324]	; (800ccf0 <etharp_query+0x28c>)
 800cbaa:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800cbac:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800cbb0:	4613      	mov	r3, r2
 800cbb2:	005b      	lsls	r3, r3, #1
 800cbb4:	4413      	add	r3, r2
 800cbb6:	00db      	lsls	r3, r3, #3
 800cbb8:	3308      	adds	r3, #8
 800cbba:	4a48      	ldr	r2, [pc, #288]	; (800ccdc <etharp_query+0x278>)
 800cbbc:	4413      	add	r3, r2
 800cbbe:	1d1a      	adds	r2, r3, #4
 800cbc0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cbc4:	9300      	str	r3, [sp, #0]
 800cbc6:	4613      	mov	r3, r2
 800cbc8:	697a      	ldr	r2, [r7, #20]
 800cbca:	6879      	ldr	r1, [r7, #4]
 800cbcc:	68f8      	ldr	r0, [r7, #12]
 800cbce:	f001 fc19 	bl	800e404 <ethernet_output>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cbd8:	e079      	b.n	800ccce <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800cbda:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800cbde:	493f      	ldr	r1, [pc, #252]	; (800ccdc <etharp_query+0x278>)
 800cbe0:	4613      	mov	r3, r2
 800cbe2:	005b      	lsls	r3, r3, #1
 800cbe4:	4413      	add	r3, r2
 800cbe6:	00db      	lsls	r3, r3, #3
 800cbe8:	440b      	add	r3, r1
 800cbea:	3314      	adds	r3, #20
 800cbec:	781b      	ldrb	r3, [r3, #0]
 800cbee:	2b01      	cmp	r3, #1
 800cbf0:	d16d      	bne.n	800ccce <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	61fb      	str	r3, [r7, #28]
    while (p) {
 800cbfa:	e01a      	b.n	800cc32 <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800cbfc:	69fb      	ldr	r3, [r7, #28]
 800cbfe:	895a      	ldrh	r2, [r3, #10]
 800cc00:	69fb      	ldr	r3, [r7, #28]
 800cc02:	891b      	ldrh	r3, [r3, #8]
 800cc04:	429a      	cmp	r2, r3
 800cc06:	d10a      	bne.n	800cc1e <etharp_query+0x1ba>
 800cc08:	69fb      	ldr	r3, [r7, #28]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d006      	beq.n	800cc1e <etharp_query+0x1ba>
 800cc10:	4b33      	ldr	r3, [pc, #204]	; (800cce0 <etharp_query+0x27c>)
 800cc12:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800cc16:	4937      	ldr	r1, [pc, #220]	; (800ccf4 <etharp_query+0x290>)
 800cc18:	4833      	ldr	r0, [pc, #204]	; (800cce8 <etharp_query+0x284>)
 800cc1a:	f001 fc81 	bl	800e520 <iprintf>
      if (p->type != PBUF_ROM) {
 800cc1e:	69fb      	ldr	r3, [r7, #28]
 800cc20:	7b1b      	ldrb	r3, [r3, #12]
 800cc22:	2b01      	cmp	r3, #1
 800cc24:	d002      	beq.n	800cc2c <etharp_query+0x1c8>
        copy_needed = 1;
 800cc26:	2301      	movs	r3, #1
 800cc28:	61bb      	str	r3, [r7, #24]
        break;
 800cc2a:	e005      	b.n	800cc38 <etharp_query+0x1d4>
      }
      p = p->next;
 800cc2c:	69fb      	ldr	r3, [r7, #28]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	61fb      	str	r3, [r7, #28]
    while (p) {
 800cc32:	69fb      	ldr	r3, [r7, #28]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d1e1      	bne.n	800cbfc <etharp_query+0x198>
    }
    if (copy_needed) {
 800cc38:	69bb      	ldr	r3, [r7, #24]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d017      	beq.n	800cc6e <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800cc3e:	69fb      	ldr	r3, [r7, #28]
 800cc40:	891b      	ldrh	r3, [r3, #8]
 800cc42:	2200      	movs	r2, #0
 800cc44:	4619      	mov	r1, r3
 800cc46:	2002      	movs	r0, #2
 800cc48:	f7f7 fcee 	bl	8004628 <pbuf_alloc>
 800cc4c:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 800cc4e:	69fb      	ldr	r3, [r7, #28]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d011      	beq.n	800cc78 <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 800cc54:	6879      	ldr	r1, [r7, #4]
 800cc56:	69f8      	ldr	r0, [r7, #28]
 800cc58:	f7f8 f98a 	bl	8004f70 <pbuf_copy>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d00a      	beq.n	800cc78 <etharp_query+0x214>
          pbuf_free(p);
 800cc62:	69f8      	ldr	r0, [r7, #28]
 800cc64:	f7f8 f852 	bl	8004d0c <pbuf_free>
          p = NULL;
 800cc68:	2300      	movs	r3, #0
 800cc6a:	61fb      	str	r3, [r7, #28]
 800cc6c:	e004      	b.n	800cc78 <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800cc72:	69f8      	ldr	r0, [r7, #28]
 800cc74:	f7f8 f8f4 	bl	8004e60 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800cc78:	69fb      	ldr	r3, [r7, #28]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d024      	beq.n	800ccc8 <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800cc7e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800cc82:	4916      	ldr	r1, [pc, #88]	; (800ccdc <etharp_query+0x278>)
 800cc84:	4613      	mov	r3, r2
 800cc86:	005b      	lsls	r3, r3, #1
 800cc88:	4413      	add	r3, r2
 800cc8a:	00db      	lsls	r3, r3, #3
 800cc8c:	440b      	add	r3, r1
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d00b      	beq.n	800ccac <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 800cc94:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800cc98:	4910      	ldr	r1, [pc, #64]	; (800ccdc <etharp_query+0x278>)
 800cc9a:	4613      	mov	r3, r2
 800cc9c:	005b      	lsls	r3, r3, #1
 800cc9e:	4413      	add	r3, r2
 800cca0:	00db      	lsls	r3, r3, #3
 800cca2:	440b      	add	r3, r1
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	4618      	mov	r0, r3
 800cca8:	f7f8 f830 	bl	8004d0c <pbuf_free>
      }
      arp_table[i].q = p;
 800ccac:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800ccb0:	490a      	ldr	r1, [pc, #40]	; (800ccdc <etharp_query+0x278>)
 800ccb2:	4613      	mov	r3, r2
 800ccb4:	005b      	lsls	r3, r3, #1
 800ccb6:	4413      	add	r3, r2
 800ccb8:	00db      	lsls	r3, r3, #3
 800ccba:	440b      	add	r3, r1
 800ccbc:	69fa      	ldr	r2, [r7, #28]
 800ccbe:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ccc6:	e002      	b.n	800ccce <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800ccc8:	23ff      	movs	r3, #255	; 0xff
 800ccca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800ccce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	3728      	adds	r7, #40	; 0x28
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	bd80      	pop	{r7, pc}
 800ccda:	bf00      	nop
 800ccdc:	20000120 	.word	0x20000120
 800cce0:	08010ec8 	.word	0x08010ec8
 800cce4:	08011074 	.word	0x08011074
 800cce8:	08010f40 	.word	0x08010f40
 800ccec:	08011068 	.word	0x08011068
 800ccf0:	20000210 	.word	0x20000210
 800ccf4:	0801109c 	.word	0x0801109c

0800ccf8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b08a      	sub	sp, #40	; 0x28
 800ccfc:	af02      	add	r7, sp, #8
 800ccfe:	60f8      	str	r0, [r7, #12]
 800cd00:	60b9      	str	r1, [r7, #8]
 800cd02:	607a      	str	r2, [r7, #4]
 800cd04:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800cd06:	2300      	movs	r3, #0
 800cd08:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d106      	bne.n	800cd1e <etharp_raw+0x26>
 800cd10:	4b3a      	ldr	r3, [pc, #232]	; (800cdfc <etharp_raw+0x104>)
 800cd12:	f44f 628b 	mov.w	r2, #1112	; 0x458
 800cd16:	493a      	ldr	r1, [pc, #232]	; (800ce00 <etharp_raw+0x108>)
 800cd18:	483a      	ldr	r0, [pc, #232]	; (800ce04 <etharp_raw+0x10c>)
 800cd1a:	f001 fc01 	bl	800e520 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800cd1e:	2200      	movs	r2, #0
 800cd20:	211c      	movs	r1, #28
 800cd22:	2002      	movs	r0, #2
 800cd24:	f7f7 fc80 	bl	8004628 <pbuf_alloc>
 800cd28:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800cd2a:	69bb      	ldr	r3, [r7, #24]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d102      	bne.n	800cd36 <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800cd30:	f04f 33ff 	mov.w	r3, #4294967295
 800cd34:	e05d      	b.n	800cdf2 <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800cd36:	69bb      	ldr	r3, [r7, #24]
 800cd38:	895b      	ldrh	r3, [r3, #10]
 800cd3a:	2b1b      	cmp	r3, #27
 800cd3c:	d806      	bhi.n	800cd4c <etharp_raw+0x54>
 800cd3e:	4b2f      	ldr	r3, [pc, #188]	; (800cdfc <etharp_raw+0x104>)
 800cd40:	f240 4264 	movw	r2, #1124	; 0x464
 800cd44:	4930      	ldr	r1, [pc, #192]	; (800ce08 <etharp_raw+0x110>)
 800cd46:	482f      	ldr	r0, [pc, #188]	; (800ce04 <etharp_raw+0x10c>)
 800cd48:	f001 fbea 	bl	800e520 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800cd4c:	69bb      	ldr	r3, [r7, #24]
 800cd4e:	685b      	ldr	r3, [r3, #4]
 800cd50:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800cd52:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cd54:	4618      	mov	r0, r3
 800cd56:	f7f6 fe59 	bl	8003a0c <lwip_htons>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	461a      	mov	r2, r3
 800cd5e:	697b      	ldr	r3, [r7, #20]
 800cd60:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800cd68:	2b06      	cmp	r3, #6
 800cd6a:	d006      	beq.n	800cd7a <etharp_raw+0x82>
 800cd6c:	4b23      	ldr	r3, [pc, #140]	; (800cdfc <etharp_raw+0x104>)
 800cd6e:	f240 426b 	movw	r2, #1131	; 0x46b
 800cd72:	4926      	ldr	r1, [pc, #152]	; (800ce0c <etharp_raw+0x114>)
 800cd74:	4823      	ldr	r0, [pc, #140]	; (800ce04 <etharp_raw+0x10c>)
 800cd76:	f001 fbd3 	bl	800e520 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800cd7a:	697b      	ldr	r3, [r7, #20]
 800cd7c:	3308      	adds	r3, #8
 800cd7e:	2206      	movs	r2, #6
 800cd80:	6839      	ldr	r1, [r7, #0]
 800cd82:	4618      	mov	r0, r3
 800cd84:	f001 fbb9 	bl	800e4fa <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800cd88:	697b      	ldr	r3, [r7, #20]
 800cd8a:	3312      	adds	r3, #18
 800cd8c:	2206      	movs	r2, #6
 800cd8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cd90:	4618      	mov	r0, r3
 800cd92:	f001 fbb2 	bl	800e4fa <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800cd96:	697b      	ldr	r3, [r7, #20]
 800cd98:	330e      	adds	r3, #14
 800cd9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd9c:	6812      	ldr	r2, [r2, #0]
 800cd9e:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800cda0:	697b      	ldr	r3, [r7, #20]
 800cda2:	3318      	adds	r3, #24
 800cda4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cda6:	6812      	ldr	r2, [r2, #0]
 800cda8:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800cdaa:	697b      	ldr	r3, [r7, #20]
 800cdac:	2200      	movs	r2, #0
 800cdae:	701a      	strb	r2, [r3, #0]
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	f042 0201 	orr.w	r2, r2, #1
 800cdb6:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800cdb8:	697b      	ldr	r3, [r7, #20]
 800cdba:	2200      	movs	r2, #0
 800cdbc:	f042 0208 	orr.w	r2, r2, #8
 800cdc0:	709a      	strb	r2, [r3, #2]
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800cdc6:	697b      	ldr	r3, [r7, #20]
 800cdc8:	2206      	movs	r2, #6
 800cdca:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800cdcc:	697b      	ldr	r3, [r7, #20]
 800cdce:	2204      	movs	r2, #4
 800cdd0:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800cdd2:	f640 0306 	movw	r3, #2054	; 0x806
 800cdd6:	9300      	str	r3, [sp, #0]
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	68ba      	ldr	r2, [r7, #8]
 800cddc:	69b9      	ldr	r1, [r7, #24]
 800cdde:	68f8      	ldr	r0, [r7, #12]
 800cde0:	f001 fb10 	bl	800e404 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800cde4:	69b8      	ldr	r0, [r7, #24]
 800cde6:	f7f7 ff91 	bl	8004d0c <pbuf_free>
  p = NULL;
 800cdea:	2300      	movs	r3, #0
 800cdec:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800cdee:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	3720      	adds	r7, #32
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bd80      	pop	{r7, pc}
 800cdfa:	bf00      	nop
 800cdfc:	08010ec8 	.word	0x08010ec8
 800ce00:	08011018 	.word	0x08011018
 800ce04:	08010f40 	.word	0x08010f40
 800ce08:	080110b8 	.word	0x080110b8
 800ce0c:	080110ec 	.word	0x080110ec

0800ce10 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b088      	sub	sp, #32
 800ce14:	af04      	add	r7, sp, #16
 800ce16:	60f8      	str	r0, [r7, #12]
 800ce18:	60b9      	str	r1, [r7, #8]
 800ce1a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	f103 012d 	add.w	r1, r3, #45	; 0x2d
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	f103 002d 	add.w	r0, r3, #45	; 0x2d
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800ce2c:	2201      	movs	r2, #1
 800ce2e:	9203      	str	r2, [sp, #12]
 800ce30:	68ba      	ldr	r2, [r7, #8]
 800ce32:	9202      	str	r2, [sp, #8]
 800ce34:	4a06      	ldr	r2, [pc, #24]	; (800ce50 <etharp_request_dst+0x40>)
 800ce36:	9201      	str	r2, [sp, #4]
 800ce38:	9300      	str	r3, [sp, #0]
 800ce3a:	4603      	mov	r3, r0
 800ce3c:	687a      	ldr	r2, [r7, #4]
 800ce3e:	68f8      	ldr	r0, [r7, #12]
 800ce40:	f7ff ff5a 	bl	800ccf8 <etharp_raw>
 800ce44:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800ce46:	4618      	mov	r0, r3
 800ce48:	3710      	adds	r7, #16
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}
 800ce4e:	bf00      	nop
 800ce50:	0801164c 	.word	0x0801164c

0800ce54 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b082      	sub	sp, #8
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
 800ce5c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800ce5e:	4a05      	ldr	r2, [pc, #20]	; (800ce74 <etharp_request+0x20>)
 800ce60:	6839      	ldr	r1, [r7, #0]
 800ce62:	6878      	ldr	r0, [r7, #4]
 800ce64:	f7ff ffd4 	bl	800ce10 <etharp_request_dst>
 800ce68:	4603      	mov	r3, r0
}
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	3708      	adds	r7, #8
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd80      	pop	{r7, pc}
 800ce72:	bf00      	nop
 800ce74:	08011644 	.word	0x08011644

0800ce78 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b08e      	sub	sp, #56	; 0x38
 800ce7c:	af04      	add	r7, sp, #16
 800ce7e:	6078      	str	r0, [r7, #4]
 800ce80:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800ce82:	4b7a      	ldr	r3, [pc, #488]	; (800d06c <icmp_input+0x1f4>)
 800ce84:	689b      	ldr	r3, [r3, #8]
 800ce86:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 800ce88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce8a:	781b      	ldrb	r3, [r3, #0]
 800ce8c:	b29b      	uxth	r3, r3
 800ce8e:	f003 030f 	and.w	r3, r3, #15
 800ce92:	b29b      	uxth	r3, r3
 800ce94:	009b      	lsls	r3, r3, #2
 800ce96:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800ce98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ce9a:	2b13      	cmp	r3, #19
 800ce9c:	f240 80d1 	bls.w	800d042 <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	895b      	ldrh	r3, [r3, #10]
 800cea4:	2b03      	cmp	r3, #3
 800cea6:	f240 80ce 	bls.w	800d046 <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	685b      	ldr	r3, [r3, #4]
 800ceae:	781b      	ldrb	r3, [r3, #0]
 800ceb0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 800ceb4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	f000 80bb 	beq.w	800d034 <icmp_input+0x1bc>
 800cebe:	2b08      	cmp	r3, #8
 800cec0:	f040 80bb 	bne.w	800d03a <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 800cec4:	4b6a      	ldr	r3, [pc, #424]	; (800d070 <icmp_input+0x1f8>)
 800cec6:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800cec8:	4b68      	ldr	r3, [pc, #416]	; (800d06c <icmp_input+0x1f4>)
 800ceca:	695b      	ldr	r3, [r3, #20]
 800cecc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ced0:	2be0      	cmp	r3, #224	; 0xe0
 800ced2:	f000 80bf 	beq.w	800d054 <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800ced6:	4b65      	ldr	r3, [pc, #404]	; (800d06c <icmp_input+0x1f4>)
 800ced8:	695a      	ldr	r2, [r3, #20]
 800ceda:	4b64      	ldr	r3, [pc, #400]	; (800d06c <icmp_input+0x1f4>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	4619      	mov	r1, r3
 800cee0:	4610      	mov	r0, r2
 800cee2:	f000 fbef 	bl	800d6c4 <ip4_addr_isbroadcast_u32>
 800cee6:	4603      	mov	r3, r0
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	f040 80b5 	bne.w	800d058 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	891b      	ldrh	r3, [r3, #8]
 800cef2:	2b07      	cmp	r3, #7
 800cef4:	f240 80a9 	bls.w	800d04a <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800cef8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cefa:	330e      	adds	r3, #14
 800cefc:	b29b      	uxth	r3, r3
 800cefe:	b21b      	sxth	r3, r3
 800cf00:	4619      	mov	r1, r3
 800cf02:	6878      	ldr	r0, [r7, #4]
 800cf04:	f7f7 fede 	bl	8004cc4 <pbuf_header>
 800cf08:	4603      	mov	r3, r0
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d046      	beq.n	800cf9c <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	891a      	ldrh	r2, [r3, #8]
 800cf12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cf14:	4413      	add	r3, r2
 800cf16:	b29b      	uxth	r3, r3
 800cf18:	2200      	movs	r2, #0
 800cf1a:	4619      	mov	r1, r3
 800cf1c:	2002      	movs	r0, #2
 800cf1e:	f7f7 fb83 	bl	8004628 <pbuf_alloc>
 800cf22:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 800cf24:	69bb      	ldr	r3, [r7, #24]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	f000 8098 	beq.w	800d05c <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800cf2c:	69bb      	ldr	r3, [r7, #24]
 800cf2e:	895b      	ldrh	r3, [r3, #10]
 800cf30:	461a      	mov	r2, r3
 800cf32:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cf34:	3308      	adds	r3, #8
 800cf36:	429a      	cmp	r2, r3
 800cf38:	d203      	bcs.n	800cf42 <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 800cf3a:	69b8      	ldr	r0, [r7, #24]
 800cf3c:	f7f7 fee6 	bl	8004d0c <pbuf_free>
        goto icmperr;
 800cf40:	e08d      	b.n	800d05e <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 800cf42:	69bb      	ldr	r3, [r7, #24]
 800cf44:	685b      	ldr	r3, [r3, #4]
 800cf46:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800cf48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f001 fad5 	bl	800e4fa <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 800cf50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cf52:	425b      	negs	r3, r3
 800cf54:	b29b      	uxth	r3, r3
 800cf56:	b21b      	sxth	r3, r3
 800cf58:	4619      	mov	r1, r3
 800cf5a:	69b8      	ldr	r0, [r7, #24]
 800cf5c:	f7f7 feb2 	bl	8004cc4 <pbuf_header>
 800cf60:	4603      	mov	r3, r0
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d009      	beq.n	800cf7a <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800cf66:	4b43      	ldr	r3, [pc, #268]	; (800d074 <icmp_input+0x1fc>)
 800cf68:	22af      	movs	r2, #175	; 0xaf
 800cf6a:	4943      	ldr	r1, [pc, #268]	; (800d078 <icmp_input+0x200>)
 800cf6c:	4843      	ldr	r0, [pc, #268]	; (800d07c <icmp_input+0x204>)
 800cf6e:	f001 fad7 	bl	800e520 <iprintf>
        pbuf_free(r);
 800cf72:	69b8      	ldr	r0, [r7, #24]
 800cf74:	f7f7 feca 	bl	8004d0c <pbuf_free>
        goto icmperr;
 800cf78:	e071      	b.n	800d05e <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 800cf7a:	6879      	ldr	r1, [r7, #4]
 800cf7c:	69b8      	ldr	r0, [r7, #24]
 800cf7e:	f7f7 fff7 	bl	8004f70 <pbuf_copy>
 800cf82:	4603      	mov	r3, r0
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d003      	beq.n	800cf90 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 800cf88:	69b8      	ldr	r0, [r7, #24]
 800cf8a:	f7f7 febf 	bl	8004d0c <pbuf_free>
        goto icmperr;
 800cf8e:	e066      	b.n	800d05e <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 800cf90:	6878      	ldr	r0, [r7, #4]
 800cf92:	f7f7 febb 	bl	8004d0c <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 800cf96:	69bb      	ldr	r3, [r7, #24]
 800cf98:	607b      	str	r3, [r7, #4]
 800cf9a:	e015      	b.n	800cfc8 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 800cf9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cf9e:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 800cfa2:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800cfa6:	33f2      	adds	r3, #242	; 0xf2
 800cfa8:	b29b      	uxth	r3, r3
 800cfaa:	b21b      	sxth	r3, r3
 800cfac:	4619      	mov	r1, r3
 800cfae:	6878      	ldr	r0, [r7, #4]
 800cfb0:	f7f7 fe88 	bl	8004cc4 <pbuf_header>
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d006      	beq.n	800cfc8 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800cfba:	4b2e      	ldr	r3, [pc, #184]	; (800d074 <icmp_input+0x1fc>)
 800cfbc:	22c0      	movs	r2, #192	; 0xc0
 800cfbe:	4930      	ldr	r1, [pc, #192]	; (800d080 <icmp_input+0x208>)
 800cfc0:	482e      	ldr	r0, [pc, #184]	; (800d07c <icmp_input+0x204>)
 800cfc2:	f001 faad 	bl	800e520 <iprintf>
        goto icmperr;
 800cfc6:	e04a      	b.n	800d05e <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	685b      	ldr	r3, [r3, #4]
 800cfcc:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 800cfce:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800cfd2:	4619      	mov	r1, r3
 800cfd4:	6878      	ldr	r0, [r7, #4]
 800cfd6:	f7f7 fe75 	bl	8004cc4 <pbuf_header>
 800cfda:	4603      	mov	r3, r0
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d12b      	bne.n	800d038 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	685b      	ldr	r3, [r3, #4]
 800cfe4:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 800cfe6:	69fb      	ldr	r3, [r7, #28]
 800cfe8:	681a      	ldr	r2, [r3, #0]
 800cfea:	693b      	ldr	r3, [r7, #16]
 800cfec:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800cfee:	4b1f      	ldr	r3, [pc, #124]	; (800d06c <icmp_input+0x1f4>)
 800cff0:	691a      	ldr	r2, [r3, #16]
 800cff2:	693b      	ldr	r3, [r7, #16]
 800cff4:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800cff6:	697b      	ldr	r3, [r7, #20]
 800cff8:	2200      	movs	r2, #0
 800cffa:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 800cffc:	697b      	ldr	r3, [r7, #20]
 800cffe:	2200      	movs	r2, #0
 800d000:	709a      	strb	r2, [r3, #2]
 800d002:	2200      	movs	r2, #0
 800d004:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800d006:	693b      	ldr	r3, [r7, #16]
 800d008:	22ff      	movs	r2, #255	; 0xff
 800d00a:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800d00c:	693b      	ldr	r3, [r7, #16]
 800d00e:	2200      	movs	r2, #0
 800d010:	729a      	strb	r2, [r3, #10]
 800d012:	2200      	movs	r2, #0
 800d014:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800d016:	683b      	ldr	r3, [r7, #0]
 800d018:	9302      	str	r3, [sp, #8]
 800d01a:	2301      	movs	r3, #1
 800d01c:	9301      	str	r3, [sp, #4]
 800d01e:	2300      	movs	r3, #0
 800d020:	9300      	str	r3, [sp, #0]
 800d022:	23ff      	movs	r3, #255	; 0xff
 800d024:	2200      	movs	r2, #0
 800d026:	69f9      	ldr	r1, [r7, #28]
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f000 fa79 	bl	800d520 <ip4_output_if>
 800d02e:	4603      	mov	r3, r0
 800d030:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 800d032:	e001      	b.n	800d038 <icmp_input+0x1c0>
    break;
 800d034:	bf00      	nop
 800d036:	e000      	b.n	800d03a <icmp_input+0x1c2>
    break;
 800d038:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800d03a:	6878      	ldr	r0, [r7, #4]
 800d03c:	f7f7 fe66 	bl	8004d0c <pbuf_free>
  return;
 800d040:	e011      	b.n	800d066 <icmp_input+0x1ee>
    goto lenerr;
 800d042:	bf00      	nop
 800d044:	e002      	b.n	800d04c <icmp_input+0x1d4>
    goto lenerr;
 800d046:	bf00      	nop
 800d048:	e000      	b.n	800d04c <icmp_input+0x1d4>
      goto lenerr;
 800d04a:	bf00      	nop
lenerr:
  pbuf_free(p);
 800d04c:	6878      	ldr	r0, [r7, #4]
 800d04e:	f7f7 fe5d 	bl	8004d0c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d052:	e008      	b.n	800d066 <icmp_input+0x1ee>
      goto icmperr;
 800d054:	bf00      	nop
 800d056:	e002      	b.n	800d05e <icmp_input+0x1e6>
      goto icmperr;
 800d058:	bf00      	nop
 800d05a:	e000      	b.n	800d05e <icmp_input+0x1e6>
        goto icmperr;
 800d05c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	f7f7 fe54 	bl	8004d0c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800d064:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800d066:	3728      	adds	r7, #40	; 0x28
 800d068:	46bd      	mov	sp, r7
 800d06a:	bd80      	pop	{r7, pc}
 800d06c:	20003394 	.word	0x20003394
 800d070:	200033a8 	.word	0x200033a8
 800d074:	08011130 	.word	0x08011130
 800d078:	08011168 	.word	0x08011168
 800d07c:	080111a0 	.word	0x080111a0
 800d080:	080111c8 	.word	0x080111c8

0800d084 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b082      	sub	sp, #8
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
 800d08c:	460b      	mov	r3, r1
 800d08e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800d090:	78fb      	ldrb	r3, [r7, #3]
 800d092:	461a      	mov	r2, r3
 800d094:	2103      	movs	r1, #3
 800d096:	6878      	ldr	r0, [r7, #4]
 800d098:	f000 f814 	bl	800d0c4 <icmp_send_response>
}
 800d09c:	bf00      	nop
 800d09e:	3708      	adds	r7, #8
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	bd80      	pop	{r7, pc}

0800d0a4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b082      	sub	sp, #8
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
 800d0ac:	460b      	mov	r3, r1
 800d0ae:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800d0b0:	78fb      	ldrb	r3, [r7, #3]
 800d0b2:	461a      	mov	r2, r3
 800d0b4:	210b      	movs	r1, #11
 800d0b6:	6878      	ldr	r0, [r7, #4]
 800d0b8:	f000 f804 	bl	800d0c4 <icmp_send_response>
}
 800d0bc:	bf00      	nop
 800d0be:	3708      	adds	r7, #8
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd80      	pop	{r7, pc}

0800d0c4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b08c      	sub	sp, #48	; 0x30
 800d0c8:	af04      	add	r7, sp, #16
 800d0ca:	6078      	str	r0, [r7, #4]
 800d0cc:	460b      	mov	r3, r1
 800d0ce:	70fb      	strb	r3, [r7, #3]
 800d0d0:	4613      	mov	r3, r2
 800d0d2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	2124      	movs	r1, #36	; 0x24
 800d0d8:	2001      	movs	r0, #1
 800d0da:	f7f7 faa5 	bl	8004628 <pbuf_alloc>
 800d0de:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800d0e0:	69fb      	ldr	r3, [r7, #28]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d04c      	beq.n	800d180 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800d0e6:	69fb      	ldr	r3, [r7, #28]
 800d0e8:	895b      	ldrh	r3, [r3, #10]
 800d0ea:	2b23      	cmp	r3, #35	; 0x23
 800d0ec:	d806      	bhi.n	800d0fc <icmp_send_response+0x38>
 800d0ee:	4b26      	ldr	r3, [pc, #152]	; (800d188 <icmp_send_response+0xc4>)
 800d0f0:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800d0f4:	4925      	ldr	r1, [pc, #148]	; (800d18c <icmp_send_response+0xc8>)
 800d0f6:	4826      	ldr	r0, [pc, #152]	; (800d190 <icmp_send_response+0xcc>)
 800d0f8:	f001 fa12 	bl	800e520 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	685b      	ldr	r3, [r3, #4]
 800d100:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800d102:	69fb      	ldr	r3, [r7, #28]
 800d104:	685b      	ldr	r3, [r3, #4]
 800d106:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800d108:	697b      	ldr	r3, [r7, #20]
 800d10a:	78fa      	ldrb	r2, [r7, #3]
 800d10c:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800d10e:	697b      	ldr	r3, [r7, #20]
 800d110:	78ba      	ldrb	r2, [r7, #2]
 800d112:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800d114:	697b      	ldr	r3, [r7, #20]
 800d116:	2200      	movs	r2, #0
 800d118:	711a      	strb	r2, [r3, #4]
 800d11a:	2200      	movs	r2, #0
 800d11c:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800d11e:	697b      	ldr	r3, [r7, #20]
 800d120:	2200      	movs	r2, #0
 800d122:	719a      	strb	r2, [r3, #6]
 800d124:	2200      	movs	r2, #0
 800d126:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800d128:	69fb      	ldr	r3, [r7, #28]
 800d12a:	685b      	ldr	r3, [r3, #4]
 800d12c:	f103 0008 	add.w	r0, r3, #8
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	685b      	ldr	r3, [r3, #4]
 800d134:	221c      	movs	r2, #28
 800d136:	4619      	mov	r1, r3
 800d138:	f001 f9df 	bl	800e4fa <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800d13c:	69bb      	ldr	r3, [r7, #24]
 800d13e:	68db      	ldr	r3, [r3, #12]
 800d140:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800d142:	f107 030c 	add.w	r3, r7, #12
 800d146:	4618      	mov	r0, r3
 800d148:	f000 f824 	bl	800d194 <ip4_route>
 800d14c:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800d14e:	693b      	ldr	r3, [r7, #16]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d011      	beq.n	800d178 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800d154:	697b      	ldr	r3, [r7, #20]
 800d156:	2200      	movs	r2, #0
 800d158:	709a      	strb	r2, [r3, #2]
 800d15a:	2200      	movs	r2, #0
 800d15c:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800d15e:	f107 020c 	add.w	r2, r7, #12
 800d162:	693b      	ldr	r3, [r7, #16]
 800d164:	9302      	str	r3, [sp, #8]
 800d166:	2301      	movs	r3, #1
 800d168:	9301      	str	r3, [sp, #4]
 800d16a:	2300      	movs	r3, #0
 800d16c:	9300      	str	r3, [sp, #0]
 800d16e:	23ff      	movs	r3, #255	; 0xff
 800d170:	2100      	movs	r1, #0
 800d172:	69f8      	ldr	r0, [r7, #28]
 800d174:	f000 f9d4 	bl	800d520 <ip4_output_if>
  }
  pbuf_free(q);
 800d178:	69f8      	ldr	r0, [r7, #28]
 800d17a:	f7f7 fdc7 	bl	8004d0c <pbuf_free>
 800d17e:	e000      	b.n	800d182 <icmp_send_response+0xbe>
    return;
 800d180:	bf00      	nop
}
 800d182:	3720      	adds	r7, #32
 800d184:	46bd      	mov	sp, r7
 800d186:	bd80      	pop	{r7, pc}
 800d188:	08011130 	.word	0x08011130
 800d18c:	080111fc 	.word	0x080111fc
 800d190:	080111a0 	.word	0x080111a0

0800d194 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800d194:	b480      	push	{r7}
 800d196:	b085      	sub	sp, #20
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800d19c:	4b30      	ldr	r3, [pc, #192]	; (800d260 <ip4_route+0xcc>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	60fb      	str	r3, [r7, #12]
 800d1a2:	e036      	b.n	800d212 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800d1aa:	f003 0301 	and.w	r3, r3, #1
 800d1ae:	b2db      	uxtb	r3, r3
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d02b      	beq.n	800d20c <ip4_route+0x78>
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800d1ba:	089b      	lsrs	r3, r3, #2
 800d1bc:	f003 0301 	and.w	r3, r3, #1
 800d1c0:	b2db      	uxtb	r3, r3
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d022      	beq.n	800d20c <ip4_route+0x78>
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	3304      	adds	r3, #4
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d01d      	beq.n	800d20c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	681a      	ldr	r2, [r3, #0]
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	3304      	adds	r3, #4
 800d1d8:	681b      	ldr	r3, [r3, #0]
 800d1da:	405a      	eors	r2, r3
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	3308      	adds	r3, #8
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	4013      	ands	r3, r2
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d101      	bne.n	800d1ec <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	e033      	b.n	800d254 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800d1f2:	f003 0302 	and.w	r3, r3, #2
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d108      	bne.n	800d20c <ip4_route+0x78>
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681a      	ldr	r2, [r3, #0]
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	330c      	adds	r3, #12
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	429a      	cmp	r2, r3
 800d206:	d101      	bne.n	800d20c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	e023      	b.n	800d254 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	60fb      	str	r3, [r7, #12]
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d1c5      	bne.n	800d1a4 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d218:	4b12      	ldr	r3, [pc, #72]	; (800d264 <ip4_route+0xd0>)
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d015      	beq.n	800d24c <ip4_route+0xb8>
 800d220:	4b10      	ldr	r3, [pc, #64]	; (800d264 <ip4_route+0xd0>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800d228:	f003 0301 	and.w	r3, r3, #1
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d00d      	beq.n	800d24c <ip4_route+0xb8>
 800d230:	4b0c      	ldr	r3, [pc, #48]	; (800d264 <ip4_route+0xd0>)
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800d238:	f003 0304 	and.w	r3, r3, #4
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d005      	beq.n	800d24c <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 800d240:	4b08      	ldr	r3, [pc, #32]	; (800d264 <ip4_route+0xd0>)
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	3304      	adds	r3, #4
 800d246:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d101      	bne.n	800d250 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800d24c:	2300      	movs	r3, #0
 800d24e:	e001      	b.n	800d254 <ip4_route+0xc0>
  }

  return netif_default;
 800d250:	4b04      	ldr	r3, [pc, #16]	; (800d264 <ip4_route+0xd0>)
 800d252:	681b      	ldr	r3, [r3, #0]
}
 800d254:	4618      	mov	r0, r3
 800d256:	3714      	adds	r7, #20
 800d258:	46bd      	mov	sp, r7
 800d25a:	bc80      	pop	{r7}
 800d25c:	4770      	bx	lr
 800d25e:	bf00      	nop
 800d260:	200068d4 	.word	0x200068d4
 800d264:	200068d8 	.word	0x200068d8

0800d268 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b088      	sub	sp, #32
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
 800d270:	6039      	str	r1, [r7, #0]
  struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 800d272:	2301      	movs	r3, #1
 800d274:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	685b      	ldr	r3, [r3, #4]
 800d27a:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 800d27c:	69fb      	ldr	r3, [r7, #28]
 800d27e:	781b      	ldrb	r3, [r3, #0]
 800d280:	091b      	lsrs	r3, r3, #4
 800d282:	b2db      	uxtb	r3, r3
 800d284:	2b04      	cmp	r3, #4
 800d286:	d004      	beq.n	800d292 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	f7f7 fd3f 	bl	8004d0c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800d28e:	2300      	movs	r3, #0
 800d290:	e13e      	b.n	800d510 <ip4_input+0x2a8>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 800d292:	69fb      	ldr	r3, [r7, #28]
 800d294:	781b      	ldrb	r3, [r3, #0]
 800d296:	b29b      	uxth	r3, r3
 800d298:	f003 030f 	and.w	r3, r3, #15
 800d29c:	81fb      	strh	r3, [r7, #14]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 800d29e:	89fb      	ldrh	r3, [r7, #14]
 800d2a0:	009b      	lsls	r3, r3, #2
 800d2a2:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800d2a4:	69fb      	ldr	r3, [r7, #28]
 800d2a6:	885b      	ldrh	r3, [r3, #2]
 800d2a8:	b29b      	uxth	r3, r3
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	f7f6 fbae 	bl	8003a0c <lwip_htons>
 800d2b0:	4603      	mov	r3, r0
 800d2b2:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	891b      	ldrh	r3, [r3, #8]
 800d2b8:	89ba      	ldrh	r2, [r7, #12]
 800d2ba:	429a      	cmp	r2, r3
 800d2bc:	d204      	bcs.n	800d2c8 <ip4_input+0x60>
    pbuf_realloc(p, iphdr_len);
 800d2be:	89bb      	ldrh	r3, [r7, #12]
 800d2c0:	4619      	mov	r1, r3
 800d2c2:	6878      	ldr	r0, [r7, #4]
 800d2c4:	f7f7 fbae 	bl	8004a24 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	895b      	ldrh	r3, [r3, #10]
 800d2cc:	89fa      	ldrh	r2, [r7, #14]
 800d2ce:	429a      	cmp	r2, r3
 800d2d0:	d807      	bhi.n	800d2e2 <ip4_input+0x7a>
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	891b      	ldrh	r3, [r3, #8]
 800d2d6:	89ba      	ldrh	r2, [r7, #12]
 800d2d8:	429a      	cmp	r2, r3
 800d2da:	d802      	bhi.n	800d2e2 <ip4_input+0x7a>
 800d2dc:	89fb      	ldrh	r3, [r7, #14]
 800d2de:	2b13      	cmp	r3, #19
 800d2e0:	d804      	bhi.n	800d2ec <ip4_input+0x84>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800d2e2:	6878      	ldr	r0, [r7, #4]
 800d2e4:	f7f7 fd12 	bl	8004d0c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	e111      	b.n	800d510 <ip4_input+0x2a8>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800d2ec:	69fb      	ldr	r3, [r7, #28]
 800d2ee:	691b      	ldr	r3, [r3, #16]
 800d2f0:	4a89      	ldr	r2, [pc, #548]	; (800d518 <ip4_input+0x2b0>)
 800d2f2:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800d2f4:	69fb      	ldr	r3, [r7, #28]
 800d2f6:	68db      	ldr	r3, [r3, #12]
 800d2f8:	4a87      	ldr	r2, [pc, #540]	; (800d518 <ip4_input+0x2b0>)
 800d2fa:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d2fc:	4b86      	ldr	r3, [pc, #536]	; (800d518 <ip4_input+0x2b0>)
 800d2fe:	695b      	ldr	r3, [r3, #20]
 800d300:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d304:	2be0      	cmp	r3, #224	; 0xe0
 800d306:	d112      	bne.n	800d32e <ip4_input+0xc6>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800d30e:	f003 0301 	and.w	r3, r3, #1
 800d312:	b2db      	uxtb	r3, r3
 800d314:	2b00      	cmp	r3, #0
 800d316:	d007      	beq.n	800d328 <ip4_input+0xc0>
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	3304      	adds	r3, #4
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d002      	beq.n	800d328 <ip4_input+0xc0>
      netif = inp;
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	61bb      	str	r3, [r7, #24]
 800d326:	e041      	b.n	800d3ac <ip4_input+0x144>
    } else {
      netif = NULL;
 800d328:	2300      	movs	r3, #0
 800d32a:	61bb      	str	r3, [r7, #24]
 800d32c:	e03e      	b.n	800d3ac <ip4_input+0x144>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 800d32e:	2301      	movs	r3, #1
 800d330:	613b      	str	r3, [r7, #16]
    netif = inp;
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	61bb      	str	r3, [r7, #24]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800d336:	69bb      	ldr	r3, [r7, #24]
 800d338:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800d33c:	f003 0301 	and.w	r3, r3, #1
 800d340:	b2db      	uxtb	r3, r3
 800d342:	2b00      	cmp	r3, #0
 800d344:	d014      	beq.n	800d370 <ip4_input+0x108>
 800d346:	69bb      	ldr	r3, [r7, #24]
 800d348:	3304      	adds	r3, #4
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d00f      	beq.n	800d370 <ip4_input+0x108>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d350:	4b71      	ldr	r3, [pc, #452]	; (800d518 <ip4_input+0x2b0>)
 800d352:	695a      	ldr	r2, [r3, #20]
 800d354:	69bb      	ldr	r3, [r7, #24]
 800d356:	3304      	adds	r3, #4
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	429a      	cmp	r2, r3
 800d35c:	d026      	beq.n	800d3ac <ip4_input+0x144>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800d35e:	4b6e      	ldr	r3, [pc, #440]	; (800d518 <ip4_input+0x2b0>)
 800d360:	695b      	ldr	r3, [r3, #20]
 800d362:	69b9      	ldr	r1, [r7, #24]
 800d364:	4618      	mov	r0, r3
 800d366:	f000 f9ad 	bl	800d6c4 <ip4_addr_isbroadcast_u32>
 800d36a:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d11d      	bne.n	800d3ac <ip4_input+0x144>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 800d370:	693b      	ldr	r3, [r7, #16]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d00d      	beq.n	800d392 <ip4_input+0x12a>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800d376:	4b68      	ldr	r3, [pc, #416]	; (800d518 <ip4_input+0x2b0>)
 800d378:	695b      	ldr	r3, [r3, #20]
 800d37a:	b2db      	uxtb	r3, r3
 800d37c:	2b7f      	cmp	r3, #127	; 0x7f
 800d37e:	d102      	bne.n	800d386 <ip4_input+0x11e>
          netif = NULL;
 800d380:	2300      	movs	r3, #0
 800d382:	61bb      	str	r3, [r7, #24]
          break;
 800d384:	e012      	b.n	800d3ac <ip4_input+0x144>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 800d386:	2300      	movs	r3, #0
 800d388:	613b      	str	r3, [r7, #16]
        netif = netif_list;
 800d38a:	4b64      	ldr	r3, [pc, #400]	; (800d51c <ip4_input+0x2b4>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	61bb      	str	r3, [r7, #24]
 800d390:	e002      	b.n	800d398 <ip4_input+0x130>
      } else {
        netif = netif->next;
 800d392:	69bb      	ldr	r3, [r7, #24]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	61bb      	str	r3, [r7, #24]
      }
      if (netif == inp) {
 800d398:	69ba      	ldr	r2, [r7, #24]
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	429a      	cmp	r2, r3
 800d39e:	d102      	bne.n	800d3a6 <ip4_input+0x13e>
        netif = netif->next;
 800d3a0:	69bb      	ldr	r3, [r7, #24]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	61bb      	str	r3, [r7, #24]
      }
    } while (netif != NULL);
 800d3a6:	69bb      	ldr	r3, [r7, #24]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d1c4      	bne.n	800d336 <ip4_input+0xce>
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 800d3ac:	69bb      	ldr	r3, [r7, #24]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d111      	bne.n	800d3d6 <ip4_input+0x16e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 800d3b2:	69fb      	ldr	r3, [r7, #28]
 800d3b4:	7a5b      	ldrb	r3, [r3, #9]
 800d3b6:	2b11      	cmp	r3, #17
 800d3b8:	d10d      	bne.n	800d3d6 <ip4_input+0x16e>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
 800d3ba:	89fb      	ldrh	r3, [r7, #14]
 800d3bc:	69fa      	ldr	r2, [r7, #28]
 800d3be:	4413      	add	r3, r2
 800d3c0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
        lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 800d3c2:	68bb      	ldr	r3, [r7, #8]
 800d3c4:	885b      	ldrh	r3, [r3, #2]
 800d3c6:	b29b      	uxth	r3, r3
 800d3c8:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 800d3cc:	d103      	bne.n	800d3d6 <ip4_input+0x16e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 800d3d6:	697b      	ldr	r3, [r7, #20]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d017      	beq.n	800d40c <ip4_input+0x1a4>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 800d3dc:	4b4e      	ldr	r3, [pc, #312]	; (800d518 <ip4_input+0x2b0>)
 800d3de:	691b      	ldr	r3, [r3, #16]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d013      	beq.n	800d40c <ip4_input+0x1a4>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d3e4:	4b4c      	ldr	r3, [pc, #304]	; (800d518 <ip4_input+0x2b0>)
 800d3e6:	691b      	ldr	r3, [r3, #16]
 800d3e8:	6839      	ldr	r1, [r7, #0]
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f000 f96a 	bl	800d6c4 <ip4_addr_isbroadcast_u32>
 800d3f0:	4603      	mov	r3, r0
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d105      	bne.n	800d402 <ip4_input+0x19a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800d3f6:	4b48      	ldr	r3, [pc, #288]	; (800d518 <ip4_input+0x2b0>)
 800d3f8:	691b      	ldr	r3, [r3, #16]
 800d3fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800d3fe:	2be0      	cmp	r3, #224	; 0xe0
 800d400:	d104      	bne.n	800d40c <ip4_input+0x1a4>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800d402:	6878      	ldr	r0, [r7, #4]
 800d404:	f7f7 fc82 	bl	8004d0c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800d408:	2300      	movs	r3, #0
 800d40a:	e081      	b.n	800d510 <ip4_input+0x2a8>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800d40c:	69bb      	ldr	r3, [r7, #24]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d104      	bne.n	800d41c <ip4_input+0x1b4>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800d412:	6878      	ldr	r0, [r7, #4]
 800d414:	f7f7 fc7a 	bl	8004d0c <pbuf_free>
    return ERR_OK;
 800d418:	2300      	movs	r3, #0
 800d41a:	e079      	b.n	800d510 <ip4_input+0x2a8>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800d41c:	69fb      	ldr	r3, [r7, #28]
 800d41e:	88db      	ldrh	r3, [r3, #6]
 800d420:	b29b      	uxth	r3, r3
 800d422:	461a      	mov	r2, r3
 800d424:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800d428:	4013      	ands	r3, r2
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d00b      	beq.n	800d446 <ip4_input+0x1de>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800d42e:	6878      	ldr	r0, [r7, #4]
 800d430:	f000 fc8c 	bl	800dd4c <ip4_reass>
 800d434:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d101      	bne.n	800d440 <ip4_input+0x1d8>
      return ERR_OK;
 800d43c:	2300      	movs	r3, #0
 800d43e:	e067      	b.n	800d510 <ip4_input+0x2a8>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	685b      	ldr	r3, [r3, #4]
 800d444:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800d446:	4a34      	ldr	r2, [pc, #208]	; (800d518 <ip4_input+0x2b0>)
 800d448:	69bb      	ldr	r3, [r7, #24]
 800d44a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800d44c:	4a32      	ldr	r2, [pc, #200]	; (800d518 <ip4_input+0x2b0>)
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800d452:	4a31      	ldr	r2, [pc, #196]	; (800d518 <ip4_input+0x2b0>)
 800d454:	69fb      	ldr	r3, [r7, #28]
 800d456:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800d458:	69fb      	ldr	r3, [r7, #28]
 800d45a:	781b      	ldrb	r3, [r3, #0]
 800d45c:	b29b      	uxth	r3, r3
 800d45e:	f003 030f 	and.w	r3, r3, #15
 800d462:	b29b      	uxth	r3, r3
 800d464:	009b      	lsls	r3, r3, #2
 800d466:	b29a      	uxth	r2, r3
 800d468:	4b2b      	ldr	r3, [pc, #172]	; (800d518 <ip4_input+0x2b0>)
 800d46a:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800d46c:	89fb      	ldrh	r3, [r7, #14]
 800d46e:	425b      	negs	r3, r3
 800d470:	b29b      	uxth	r3, r3
 800d472:	b21b      	sxth	r3, r3
 800d474:	4619      	mov	r1, r3
 800d476:	6878      	ldr	r0, [r7, #4]
 800d478:	f7f7 fc24 	bl	8004cc4 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 800d47c:	69fb      	ldr	r3, [r7, #28]
 800d47e:	7a5b      	ldrb	r3, [r3, #9]
 800d480:	2b06      	cmp	r3, #6
 800d482:	d009      	beq.n	800d498 <ip4_input+0x230>
 800d484:	2b11      	cmp	r3, #17
 800d486:	d002      	beq.n	800d48e <ip4_input+0x226>
 800d488:	2b01      	cmp	r3, #1
 800d48a:	d00a      	beq.n	800d4a2 <ip4_input+0x23a>
 800d48c:	e00e      	b.n	800d4ac <ip4_input+0x244>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 800d48e:	6839      	ldr	r1, [r7, #0]
 800d490:	6878      	ldr	r0, [r7, #4]
 800d492:	f7fc fbd5 	bl	8009c40 <udp_input>
      break;
 800d496:	e028      	b.n	800d4ea <ip4_input+0x282>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 800d498:	6839      	ldr	r1, [r7, #0]
 800d49a:	6878      	ldr	r0, [r7, #4]
 800d49c:	f7f9 f878 	bl	8006590 <tcp_input>
      break;
 800d4a0:	e023      	b.n	800d4ea <ip4_input+0x282>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 800d4a2:	6839      	ldr	r1, [r7, #0]
 800d4a4:	6878      	ldr	r0, [r7, #4]
 800d4a6:	f7ff fce7 	bl	800ce78 <icmp_input>
      break;
 800d4aa:	e01e      	b.n	800d4ea <ip4_input+0x282>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d4ac:	4b1a      	ldr	r3, [pc, #104]	; (800d518 <ip4_input+0x2b0>)
 800d4ae:	695b      	ldr	r3, [r3, #20]
 800d4b0:	69b9      	ldr	r1, [r7, #24]
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	f000 f906 	bl	800d6c4 <ip4_addr_isbroadcast_u32>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d112      	bne.n	800d4e4 <ip4_input+0x27c>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800d4be:	4b16      	ldr	r3, [pc, #88]	; (800d518 <ip4_input+0x2b0>)
 800d4c0:	695b      	ldr	r3, [r3, #20]
 800d4c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800d4c6:	2be0      	cmp	r3, #224	; 0xe0
 800d4c8:	d00c      	beq.n	800d4e4 <ip4_input+0x27c>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800d4ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800d4ce:	4619      	mov	r1, r3
 800d4d0:	6878      	ldr	r0, [r7, #4]
 800d4d2:	f7f7 fc09 	bl	8004ce8 <pbuf_header_force>
        p->payload = iphdr;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	69fa      	ldr	r2, [r7, #28]
 800d4da:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800d4dc:	2102      	movs	r1, #2
 800d4de:	6878      	ldr	r0, [r7, #4]
 800d4e0:	f7ff fdd0 	bl	800d084 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 800d4e4:	6878      	ldr	r0, [r7, #4]
 800d4e6:	f7f7 fc11 	bl	8004d0c <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800d4ea:	4b0b      	ldr	r3, [pc, #44]	; (800d518 <ip4_input+0x2b0>)
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800d4f0:	4b09      	ldr	r3, [pc, #36]	; (800d518 <ip4_input+0x2b0>)
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800d4f6:	4b08      	ldr	r3, [pc, #32]	; (800d518 <ip4_input+0x2b0>)
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800d4fc:	4b06      	ldr	r3, [pc, #24]	; (800d518 <ip4_input+0x2b0>)
 800d4fe:	2200      	movs	r2, #0
 800d500:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800d502:	4b05      	ldr	r3, [pc, #20]	; (800d518 <ip4_input+0x2b0>)
 800d504:	2200      	movs	r2, #0
 800d506:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800d508:	4b03      	ldr	r3, [pc, #12]	; (800d518 <ip4_input+0x2b0>)
 800d50a:	2200      	movs	r2, #0
 800d50c:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800d50e:	2300      	movs	r3, #0
}
 800d510:	4618      	mov	r0, r3
 800d512:	3720      	adds	r7, #32
 800d514:	46bd      	mov	sp, r7
 800d516:	bd80      	pop	{r7, pc}
 800d518:	20003394 	.word	0x20003394
 800d51c:	200068d4 	.word	0x200068d4

0800d520 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b08a      	sub	sp, #40	; 0x28
 800d524:	af04      	add	r7, sp, #16
 800d526:	60f8      	str	r0, [r7, #12]
 800d528:	60b9      	str	r1, [r7, #8]
 800d52a:	607a      	str	r2, [r7, #4]
 800d52c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800d52e:	68bb      	ldr	r3, [r7, #8]
 800d530:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d009      	beq.n	800d54c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d003      	beq.n	800d546 <ip4_output_if+0x26>
 800d53e:	68bb      	ldr	r3, [r7, #8]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d102      	bne.n	800d54c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800d546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d548:	3304      	adds	r3, #4
 800d54a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800d54c:	78fa      	ldrb	r2, [r7, #3]
 800d54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d550:	9302      	str	r3, [sp, #8]
 800d552:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d556:	9301      	str	r3, [sp, #4]
 800d558:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d55c:	9300      	str	r3, [sp, #0]
 800d55e:	4613      	mov	r3, r2
 800d560:	687a      	ldr	r2, [r7, #4]
 800d562:	6979      	ldr	r1, [r7, #20]
 800d564:	68f8      	ldr	r0, [r7, #12]
 800d566:	f000 f805 	bl	800d574 <ip4_output_if_src>
 800d56a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800d56c:	4618      	mov	r0, r3
 800d56e:	3718      	adds	r7, #24
 800d570:	46bd      	mov	sp, r7
 800d572:	bd80      	pop	{r7, pc}

0800d574 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b088      	sub	sp, #32
 800d578:	af00      	add	r7, sp, #0
 800d57a:	60f8      	str	r0, [r7, #12]
 800d57c:	60b9      	str	r1, [r7, #8]
 800d57e:	607a      	str	r2, [r7, #4]
 800d580:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	89db      	ldrh	r3, [r3, #14]
 800d586:	2b01      	cmp	r3, #1
 800d588:	d006      	beq.n	800d598 <ip4_output_if_src+0x24>
 800d58a:	4b48      	ldr	r3, [pc, #288]	; (800d6ac <ip4_output_if_src+0x138>)
 800d58c:	f240 3233 	movw	r2, #819	; 0x333
 800d590:	4947      	ldr	r1, [pc, #284]	; (800d6b0 <ip4_output_if_src+0x13c>)
 800d592:	4848      	ldr	r0, [pc, #288]	; (800d6b4 <ip4_output_if_src+0x140>)
 800d594:	f000 ffc4 	bl	800e520 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d060      	beq.n	800d660 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800d59e:	2314      	movs	r3, #20
 800d5a0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800d5a2:	2114      	movs	r1, #20
 800d5a4:	68f8      	ldr	r0, [r7, #12]
 800d5a6:	f7f7 fb8d 	bl	8004cc4 <pbuf_header>
 800d5aa:	4603      	mov	r3, r0
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d002      	beq.n	800d5b6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800d5b0:	f06f 0301 	mvn.w	r3, #1
 800d5b4:	e075      	b.n	800d6a2 <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	685b      	ldr	r3, [r3, #4]
 800d5ba:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	895b      	ldrh	r3, [r3, #10]
 800d5c0:	2b13      	cmp	r3, #19
 800d5c2:	d806      	bhi.n	800d5d2 <ip4_output_if_src+0x5e>
 800d5c4:	4b39      	ldr	r3, [pc, #228]	; (800d6ac <ip4_output_if_src+0x138>)
 800d5c6:	f240 3261 	movw	r2, #865	; 0x361
 800d5ca:	493b      	ldr	r1, [pc, #236]	; (800d6b8 <ip4_output_if_src+0x144>)
 800d5cc:	4839      	ldr	r0, [pc, #228]	; (800d6b4 <ip4_output_if_src+0x140>)
 800d5ce:	f000 ffa7 	bl	800e520 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800d5d2:	69fb      	ldr	r3, [r7, #28]
 800d5d4:	78fa      	ldrb	r2, [r7, #3]
 800d5d6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800d5d8:	69fb      	ldr	r3, [r7, #28]
 800d5da:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800d5de:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681a      	ldr	r2, [r3, #0]
 800d5e4:	69fb      	ldr	r3, [r7, #28]
 800d5e6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800d5e8:	8b7b      	ldrh	r3, [r7, #26]
 800d5ea:	089b      	lsrs	r3, r3, #2
 800d5ec:	b29b      	uxth	r3, r3
 800d5ee:	b2db      	uxtb	r3, r3
 800d5f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5f4:	b2da      	uxtb	r2, r3
 800d5f6:	69fb      	ldr	r3, [r7, #28]
 800d5f8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800d5fa:	69fb      	ldr	r3, [r7, #28]
 800d5fc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800d600:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	891b      	ldrh	r3, [r3, #8]
 800d606:	4618      	mov	r0, r3
 800d608:	f7f6 fa00 	bl	8003a0c <lwip_htons>
 800d60c:	4603      	mov	r3, r0
 800d60e:	461a      	mov	r2, r3
 800d610:	69fb      	ldr	r3, [r7, #28]
 800d612:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800d614:	69fb      	ldr	r3, [r7, #28]
 800d616:	2200      	movs	r2, #0
 800d618:	719a      	strb	r2, [r3, #6]
 800d61a:	2200      	movs	r2, #0
 800d61c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800d61e:	4b27      	ldr	r3, [pc, #156]	; (800d6bc <ip4_output_if_src+0x148>)
 800d620:	881b      	ldrh	r3, [r3, #0]
 800d622:	4618      	mov	r0, r3
 800d624:	f7f6 f9f2 	bl	8003a0c <lwip_htons>
 800d628:	4603      	mov	r3, r0
 800d62a:	461a      	mov	r2, r3
 800d62c:	69fb      	ldr	r3, [r7, #28]
 800d62e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800d630:	4b22      	ldr	r3, [pc, #136]	; (800d6bc <ip4_output_if_src+0x148>)
 800d632:	881b      	ldrh	r3, [r3, #0]
 800d634:	3301      	adds	r3, #1
 800d636:	b29a      	uxth	r2, r3
 800d638:	4b20      	ldr	r3, [pc, #128]	; (800d6bc <ip4_output_if_src+0x148>)
 800d63a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800d63c:	68bb      	ldr	r3, [r7, #8]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d104      	bne.n	800d64c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800d642:	4b1f      	ldr	r3, [pc, #124]	; (800d6c0 <ip4_output_if_src+0x14c>)
 800d644:	681a      	ldr	r2, [r3, #0]
 800d646:	69fb      	ldr	r3, [r7, #28]
 800d648:	60da      	str	r2, [r3, #12]
 800d64a:	e003      	b.n	800d654 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800d64c:	68bb      	ldr	r3, [r7, #8]
 800d64e:	681a      	ldr	r2, [r3, #0]
 800d650:	69fb      	ldr	r3, [r7, #28]
 800d652:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800d654:	69fb      	ldr	r3, [r7, #28]
 800d656:	2200      	movs	r2, #0
 800d658:	729a      	strb	r2, [r3, #10]
 800d65a:	2200      	movs	r2, #0
 800d65c:	72da      	strb	r2, [r3, #11]
 800d65e:	e008      	b.n	800d672 <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	685b      	ldr	r3, [r3, #4]
 800d664:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800d666:	69fb      	ldr	r3, [r7, #28]
 800d668:	691b      	ldr	r3, [r3, #16]
 800d66a:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800d66c:	f107 0314 	add.w	r3, r7, #20
 800d670:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800d672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d674:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d676:	2b00      	cmp	r3, #0
 800d678:	d00c      	beq.n	800d694 <ip4_output_if_src+0x120>
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	891a      	ldrh	r2, [r3, #8]
 800d67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d682:	429a      	cmp	r2, r3
 800d684:	d906      	bls.n	800d694 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 800d686:	687a      	ldr	r2, [r7, #4]
 800d688:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d68a:	68f8      	ldr	r0, [r7, #12]
 800d68c:	f000 fd08 	bl	800e0a0 <ip4_frag>
 800d690:	4603      	mov	r3, r0
 800d692:	e006      	b.n	800d6a2 <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800d694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d696:	695b      	ldr	r3, [r3, #20]
 800d698:	687a      	ldr	r2, [r7, #4]
 800d69a:	68f9      	ldr	r1, [r7, #12]
 800d69c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d69e:	4798      	blx	r3
 800d6a0:	4603      	mov	r3, r0
}
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	3720      	adds	r7, #32
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bd80      	pop	{r7, pc}
 800d6aa:	bf00      	nop
 800d6ac:	08011228 	.word	0x08011228
 800d6b0:	0801125c 	.word	0x0801125c
 800d6b4:	08011268 	.word	0x08011268
 800d6b8:	08011290 	.word	0x08011290
 800d6bc:	20000212 	.word	0x20000212
 800d6c0:	0801163c 	.word	0x0801163c

0800d6c4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800d6c4:	b480      	push	{r7}
 800d6c6:	b085      	sub	sp, #20
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
 800d6cc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6d8:	d002      	beq.n	800d6e0 <ip4_addr_isbroadcast_u32+0x1c>
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d101      	bne.n	800d6e4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800d6e0:	2301      	movs	r3, #1
 800d6e2:	e02a      	b.n	800d73a <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800d6ea:	f003 0302 	and.w	r3, r3, #2
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d101      	bne.n	800d6f6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	e021      	b.n	800d73a <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800d6f6:	683b      	ldr	r3, [r7, #0]
 800d6f8:	3304      	adds	r3, #4
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	687a      	ldr	r2, [r7, #4]
 800d6fe:	429a      	cmp	r2, r3
 800d700:	d101      	bne.n	800d706 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800d702:	2300      	movs	r3, #0
 800d704:	e019      	b.n	800d73a <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800d706:	68fa      	ldr	r2, [r7, #12]
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	3304      	adds	r3, #4
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	405a      	eors	r2, r3
 800d710:	683b      	ldr	r3, [r7, #0]
 800d712:	3308      	adds	r3, #8
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	4013      	ands	r3, r2
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d10d      	bne.n	800d738 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	3308      	adds	r3, #8
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	43da      	mvns	r2, r3
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800d728:	683b      	ldr	r3, [r7, #0]
 800d72a:	3308      	adds	r3, #8
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800d730:	429a      	cmp	r2, r3
 800d732:	d101      	bne.n	800d738 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800d734:	2301      	movs	r3, #1
 800d736:	e000      	b.n	800d73a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800d738:	2300      	movs	r3, #0
  }
}
 800d73a:	4618      	mov	r0, r3
 800d73c:	3714      	adds	r7, #20
 800d73e:	46bd      	mov	sp, r7
 800d740:	bc80      	pop	{r7}
 800d742:	4770      	bx	lr

0800d744 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b084      	sub	sp, #16
 800d748:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800d74a:	2300      	movs	r3, #0
 800d74c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800d74e:	4b12      	ldr	r3, [pc, #72]	; (800d798 <ip_reass_tmr+0x54>)
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800d754:	e018      	b.n	800d788 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	7fdb      	ldrb	r3, [r3, #31]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d00b      	beq.n	800d776 <ip_reass_tmr+0x32>
      r->timer--;
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	7fdb      	ldrb	r3, [r3, #31]
 800d762:	3b01      	subs	r3, #1
 800d764:	b2da      	uxtb	r2, r3
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	60fb      	str	r3, [r7, #12]
 800d774:	e008      	b.n	800d788 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800d780:	68b9      	ldr	r1, [r7, #8]
 800d782:	6878      	ldr	r0, [r7, #4]
 800d784:	f000 f80a 	bl	800d79c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d1e3      	bne.n	800d756 <ip_reass_tmr+0x12>
     }
   }
}
 800d78e:	bf00      	nop
 800d790:	3710      	adds	r7, #16
 800d792:	46bd      	mov	sp, r7
 800d794:	bd80      	pop	{r7, pc}
 800d796:	bf00      	nop
 800d798:	20000214 	.word	0x20000214

0800d79c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b088      	sub	sp, #32
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
 800d7a4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800d7aa:	683a      	ldr	r2, [r7, #0]
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	429a      	cmp	r2, r3
 800d7b0:	d105      	bne.n	800d7be <ip_reass_free_complete_datagram+0x22>
 800d7b2:	4b45      	ldr	r3, [pc, #276]	; (800d8c8 <ip_reass_free_complete_datagram+0x12c>)
 800d7b4:	22ab      	movs	r2, #171	; 0xab
 800d7b6:	4945      	ldr	r1, [pc, #276]	; (800d8cc <ip_reass_free_complete_datagram+0x130>)
 800d7b8:	4845      	ldr	r0, [pc, #276]	; (800d8d0 <ip_reass_free_complete_datagram+0x134>)
 800d7ba:	f000 feb1 	bl	800e520 <iprintf>
  if (prev != NULL) {
 800d7be:	683b      	ldr	r3, [r7, #0]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d00a      	beq.n	800d7da <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800d7c4:	683b      	ldr	r3, [r7, #0]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	687a      	ldr	r2, [r7, #4]
 800d7ca:	429a      	cmp	r2, r3
 800d7cc:	d005      	beq.n	800d7da <ip_reass_free_complete_datagram+0x3e>
 800d7ce:	4b3e      	ldr	r3, [pc, #248]	; (800d8c8 <ip_reass_free_complete_datagram+0x12c>)
 800d7d0:	22ad      	movs	r2, #173	; 0xad
 800d7d2:	4940      	ldr	r1, [pc, #256]	; (800d8d4 <ip_reass_free_complete_datagram+0x138>)
 800d7d4:	483e      	ldr	r0, [pc, #248]	; (800d8d0 <ip_reass_free_complete_datagram+0x134>)
 800d7d6:	f000 fea3 	bl	800e520 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	685b      	ldr	r3, [r3, #4]
 800d7de:	685b      	ldr	r3, [r3, #4]
 800d7e0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800d7e2:	697b      	ldr	r3, [r7, #20]
 800d7e4:	889b      	ldrh	r3, [r3, #4]
 800d7e6:	b29b      	uxth	r3, r3
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d12a      	bne.n	800d842 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	685b      	ldr	r3, [r3, #4]
 800d7f0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800d7f2:	697b      	ldr	r3, [r7, #20]
 800d7f4:	681a      	ldr	r2, [r3, #0]
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800d7fa:	69bb      	ldr	r3, [r7, #24]
 800d7fc:	6858      	ldr	r0, [r3, #4]
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	3308      	adds	r3, #8
 800d802:	2214      	movs	r2, #20
 800d804:	4619      	mov	r1, r3
 800d806:	f000 fe78 	bl	800e4fa <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800d80a:	2101      	movs	r1, #1
 800d80c:	69b8      	ldr	r0, [r7, #24]
 800d80e:	f7ff fc49 	bl	800d0a4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800d812:	69b8      	ldr	r0, [r7, #24]
 800d814:	f7f7 fb0e 	bl	8004e34 <pbuf_clen>
 800d818:	4603      	mov	r3, r0
 800d81a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d81c:	8bfa      	ldrh	r2, [r7, #30]
 800d81e:	8a7b      	ldrh	r3, [r7, #18]
 800d820:	4413      	add	r3, r2
 800d822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d826:	db05      	blt.n	800d834 <ip_reass_free_complete_datagram+0x98>
 800d828:	4b27      	ldr	r3, [pc, #156]	; (800d8c8 <ip_reass_free_complete_datagram+0x12c>)
 800d82a:	22bc      	movs	r2, #188	; 0xbc
 800d82c:	492a      	ldr	r1, [pc, #168]	; (800d8d8 <ip_reass_free_complete_datagram+0x13c>)
 800d82e:	4828      	ldr	r0, [pc, #160]	; (800d8d0 <ip_reass_free_complete_datagram+0x134>)
 800d830:	f000 fe76 	bl	800e520 <iprintf>
    pbufs_freed += clen;
 800d834:	8bfa      	ldrh	r2, [r7, #30]
 800d836:	8a7b      	ldrh	r3, [r7, #18]
 800d838:	4413      	add	r3, r2
 800d83a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800d83c:	69b8      	ldr	r0, [r7, #24]
 800d83e:	f7f7 fa65 	bl	8004d0c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	685b      	ldr	r3, [r3, #4]
 800d846:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800d848:	e01f      	b.n	800d88a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800d84a:	69bb      	ldr	r3, [r7, #24]
 800d84c:	685b      	ldr	r3, [r3, #4]
 800d84e:	617b      	str	r3, [r7, #20]
    pcur = p;
 800d850:	69bb      	ldr	r3, [r7, #24]
 800d852:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800d854:	697b      	ldr	r3, [r7, #20]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800d85a:	68f8      	ldr	r0, [r7, #12]
 800d85c:	f7f7 faea 	bl	8004e34 <pbuf_clen>
 800d860:	4603      	mov	r3, r0
 800d862:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800d864:	8bfa      	ldrh	r2, [r7, #30]
 800d866:	8a7b      	ldrh	r3, [r7, #18]
 800d868:	4413      	add	r3, r2
 800d86a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d86e:	db05      	blt.n	800d87c <ip_reass_free_complete_datagram+0xe0>
 800d870:	4b15      	ldr	r3, [pc, #84]	; (800d8c8 <ip_reass_free_complete_datagram+0x12c>)
 800d872:	22cc      	movs	r2, #204	; 0xcc
 800d874:	4918      	ldr	r1, [pc, #96]	; (800d8d8 <ip_reass_free_complete_datagram+0x13c>)
 800d876:	4816      	ldr	r0, [pc, #88]	; (800d8d0 <ip_reass_free_complete_datagram+0x134>)
 800d878:	f000 fe52 	bl	800e520 <iprintf>
    pbufs_freed += clen;
 800d87c:	8bfa      	ldrh	r2, [r7, #30]
 800d87e:	8a7b      	ldrh	r3, [r7, #18]
 800d880:	4413      	add	r3, r2
 800d882:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800d884:	68f8      	ldr	r0, [r7, #12]
 800d886:	f7f7 fa41 	bl	8004d0c <pbuf_free>
  while (p != NULL) {
 800d88a:	69bb      	ldr	r3, [r7, #24]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d1dc      	bne.n	800d84a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800d890:	6839      	ldr	r1, [r7, #0]
 800d892:	6878      	ldr	r0, [r7, #4]
 800d894:	f000 f8c2 	bl	800da1c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800d898:	4b10      	ldr	r3, [pc, #64]	; (800d8dc <ip_reass_free_complete_datagram+0x140>)
 800d89a:	881b      	ldrh	r3, [r3, #0]
 800d89c:	8bfa      	ldrh	r2, [r7, #30]
 800d89e:	429a      	cmp	r2, r3
 800d8a0:	d905      	bls.n	800d8ae <ip_reass_free_complete_datagram+0x112>
 800d8a2:	4b09      	ldr	r3, [pc, #36]	; (800d8c8 <ip_reass_free_complete_datagram+0x12c>)
 800d8a4:	22d2      	movs	r2, #210	; 0xd2
 800d8a6:	490e      	ldr	r1, [pc, #56]	; (800d8e0 <ip_reass_free_complete_datagram+0x144>)
 800d8a8:	4809      	ldr	r0, [pc, #36]	; (800d8d0 <ip_reass_free_complete_datagram+0x134>)
 800d8aa:	f000 fe39 	bl	800e520 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 800d8ae:	4b0b      	ldr	r3, [pc, #44]	; (800d8dc <ip_reass_free_complete_datagram+0x140>)
 800d8b0:	881a      	ldrh	r2, [r3, #0]
 800d8b2:	8bfb      	ldrh	r3, [r7, #30]
 800d8b4:	1ad3      	subs	r3, r2, r3
 800d8b6:	b29a      	uxth	r2, r3
 800d8b8:	4b08      	ldr	r3, [pc, #32]	; (800d8dc <ip_reass_free_complete_datagram+0x140>)
 800d8ba:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800d8bc:	8bfb      	ldrh	r3, [r7, #30]
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	3720      	adds	r7, #32
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bd80      	pop	{r7, pc}
 800d8c6:	bf00      	nop
 800d8c8:	080112c0 	.word	0x080112c0
 800d8cc:	080112fc 	.word	0x080112fc
 800d8d0:	08011308 	.word	0x08011308
 800d8d4:	08011330 	.word	0x08011330
 800d8d8:	08011344 	.word	0x08011344
 800d8dc:	20000218 	.word	0x20000218
 800d8e0:	08011364 	.word	0x08011364

0800d8e4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b08a      	sub	sp, #40	; 0x28
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
 800d8ec:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800d8fe:	2300      	movs	r3, #0
 800d900:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800d902:	4b28      	ldr	r3, [pc, #160]	; (800d9a4 <ip_reass_remove_oldest_datagram+0xc0>)
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d908:	e030      	b.n	800d96c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800d90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d90c:	695a      	ldr	r2, [r3, #20]
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	68db      	ldr	r3, [r3, #12]
 800d912:	429a      	cmp	r2, r3
 800d914:	d10c      	bne.n	800d930 <ip_reass_remove_oldest_datagram+0x4c>
 800d916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d918:	699a      	ldr	r2, [r3, #24]
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	691b      	ldr	r3, [r3, #16]
 800d91e:	429a      	cmp	r2, r3
 800d920:	d106      	bne.n	800d930 <ip_reass_remove_oldest_datagram+0x4c>
 800d922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d924:	899a      	ldrh	r2, [r3, #12]
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	889b      	ldrh	r3, [r3, #4]
 800d92a:	b29b      	uxth	r3, r3
 800d92c:	429a      	cmp	r2, r3
 800d92e:	d014      	beq.n	800d95a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800d930:	693b      	ldr	r3, [r7, #16]
 800d932:	3301      	adds	r3, #1
 800d934:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800d936:	6a3b      	ldr	r3, [r7, #32]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d104      	bne.n	800d946 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800d93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d93e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d940:	69fb      	ldr	r3, [r7, #28]
 800d942:	61bb      	str	r3, [r7, #24]
 800d944:	e009      	b.n	800d95a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800d946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d948:	7fda      	ldrb	r2, [r3, #31]
 800d94a:	6a3b      	ldr	r3, [r7, #32]
 800d94c:	7fdb      	ldrb	r3, [r3, #31]
 800d94e:	429a      	cmp	r2, r3
 800d950:	d803      	bhi.n	800d95a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800d952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d954:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800d956:	69fb      	ldr	r3, [r7, #28]
 800d958:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800d95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d001      	beq.n	800d966 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800d962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d964:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800d966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800d96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d1cb      	bne.n	800d90a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800d972:	6a3b      	ldr	r3, [r7, #32]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d008      	beq.n	800d98a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800d978:	69b9      	ldr	r1, [r7, #24]
 800d97a:	6a38      	ldr	r0, [r7, #32]
 800d97c:	f7ff ff0e 	bl	800d79c <ip_reass_free_complete_datagram>
 800d980:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800d982:	697a      	ldr	r2, [r7, #20]
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	4413      	add	r3, r2
 800d988:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800d98a:	697a      	ldr	r2, [r7, #20]
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	429a      	cmp	r2, r3
 800d990:	da02      	bge.n	800d998 <ip_reass_remove_oldest_datagram+0xb4>
 800d992:	693b      	ldr	r3, [r7, #16]
 800d994:	2b01      	cmp	r3, #1
 800d996:	dcac      	bgt.n	800d8f2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800d998:	697b      	ldr	r3, [r7, #20]
}
 800d99a:	4618      	mov	r0, r3
 800d99c:	3728      	adds	r7, #40	; 0x28
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd80      	pop	{r7, pc}
 800d9a2:	bf00      	nop
 800d9a4:	20000214 	.word	0x20000214

0800d9a8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800d9a8:	b580      	push	{r7, lr}
 800d9aa:	b084      	sub	sp, #16
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
 800d9b0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d9b2:	2004      	movs	r0, #4
 800d9b4:	f7f6 fbd2 	bl	800415c <memp_malloc>
 800d9b8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d110      	bne.n	800d9e2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800d9c0:	6839      	ldr	r1, [r7, #0]
 800d9c2:	6878      	ldr	r0, [r7, #4]
 800d9c4:	f7ff ff8e 	bl	800d8e4 <ip_reass_remove_oldest_datagram>
 800d9c8:	4602      	mov	r2, r0
 800d9ca:	683b      	ldr	r3, [r7, #0]
 800d9cc:	4293      	cmp	r3, r2
 800d9ce:	dc03      	bgt.n	800d9d8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800d9d0:	2004      	movs	r0, #4
 800d9d2:	f7f6 fbc3 	bl	800415c <memp_malloc>
 800d9d6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d101      	bne.n	800d9e2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 800d9de:	2300      	movs	r3, #0
 800d9e0:	e016      	b.n	800da10 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800d9e2:	2220      	movs	r2, #32
 800d9e4:	2100      	movs	r1, #0
 800d9e6:	68f8      	ldr	r0, [r7, #12]
 800d9e8:	f000 fd92 	bl	800e510 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	2203      	movs	r2, #3
 800d9f0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800d9f2:	4b09      	ldr	r3, [pc, #36]	; (800da18 <ip_reass_enqueue_new_datagram+0x70>)
 800d9f4:	681a      	ldr	r2, [r3, #0]
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800d9fa:	4a07      	ldr	r2, [pc, #28]	; (800da18 <ip_reass_enqueue_new_datagram+0x70>)
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	3308      	adds	r3, #8
 800da04:	2214      	movs	r2, #20
 800da06:	6879      	ldr	r1, [r7, #4]
 800da08:	4618      	mov	r0, r3
 800da0a:	f000 fd76 	bl	800e4fa <memcpy>
  return ipr;
 800da0e:	68fb      	ldr	r3, [r7, #12]
}
 800da10:	4618      	mov	r0, r3
 800da12:	3710      	adds	r7, #16
 800da14:	46bd      	mov	sp, r7
 800da16:	bd80      	pop	{r7, pc}
 800da18:	20000214 	.word	0x20000214

0800da1c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b082      	sub	sp, #8
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
 800da24:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800da26:	4b10      	ldr	r3, [pc, #64]	; (800da68 <ip_reass_dequeue_datagram+0x4c>)
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	687a      	ldr	r2, [r7, #4]
 800da2c:	429a      	cmp	r2, r3
 800da2e:	d104      	bne.n	800da3a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	4a0c      	ldr	r2, [pc, #48]	; (800da68 <ip_reass_dequeue_datagram+0x4c>)
 800da36:	6013      	str	r3, [r2, #0]
 800da38:	e00d      	b.n	800da56 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800da3a:	683b      	ldr	r3, [r7, #0]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d106      	bne.n	800da4e <ip_reass_dequeue_datagram+0x32>
 800da40:	4b0a      	ldr	r3, [pc, #40]	; (800da6c <ip_reass_dequeue_datagram+0x50>)
 800da42:	f240 1245 	movw	r2, #325	; 0x145
 800da46:	490a      	ldr	r1, [pc, #40]	; (800da70 <ip_reass_dequeue_datagram+0x54>)
 800da48:	480a      	ldr	r0, [pc, #40]	; (800da74 <ip_reass_dequeue_datagram+0x58>)
 800da4a:	f000 fd69 	bl	800e520 <iprintf>
    prev->next = ipr->next;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	681a      	ldr	r2, [r3, #0]
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800da56:	6879      	ldr	r1, [r7, #4]
 800da58:	2004      	movs	r0, #4
 800da5a:	f7f6 fbcb 	bl	80041f4 <memp_free>
}
 800da5e:	bf00      	nop
 800da60:	3708      	adds	r7, #8
 800da62:	46bd      	mov	sp, r7
 800da64:	bd80      	pop	{r7, pc}
 800da66:	bf00      	nop
 800da68:	20000214 	.word	0x20000214
 800da6c:	080112c0 	.word	0x080112c0
 800da70:	08011380 	.word	0x08011380
 800da74:	08011308 	.word	0x08011308

0800da78 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b08c      	sub	sp, #48	; 0x30
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	60f8      	str	r0, [r7, #12]
 800da80:	60b9      	str	r1, [r7, #8]
 800da82:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 800da84:	2300      	movs	r3, #0
 800da86:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800da88:	2301      	movs	r3, #1
 800da8a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	685b      	ldr	r3, [r3, #4]
 800da90:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800da92:	69fb      	ldr	r3, [r7, #28]
 800da94:	885b      	ldrh	r3, [r3, #2]
 800da96:	b29b      	uxth	r3, r3
 800da98:	4618      	mov	r0, r3
 800da9a:	f7f5 ffb7 	bl	8003a0c <lwip_htons>
 800da9e:	4603      	mov	r3, r0
 800daa0:	461a      	mov	r2, r3
 800daa2:	69fb      	ldr	r3, [r7, #28]
 800daa4:	781b      	ldrb	r3, [r3, #0]
 800daa6:	b29b      	uxth	r3, r3
 800daa8:	f003 030f 	and.w	r3, r3, #15
 800daac:	b29b      	uxth	r3, r3
 800daae:	009b      	lsls	r3, r3, #2
 800dab0:	b29b      	uxth	r3, r3
 800dab2:	1ad3      	subs	r3, r2, r3
 800dab4:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800dab6:	69fb      	ldr	r3, [r7, #28]
 800dab8:	88db      	ldrh	r3, [r3, #6]
 800daba:	b29b      	uxth	r3, r3
 800dabc:	4618      	mov	r0, r3
 800dabe:	f7f5 ffa5 	bl	8003a0c <lwip_htons>
 800dac2:	4603      	mov	r3, r0
 800dac4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dac8:	b29b      	uxth	r3, r3
 800daca:	00db      	lsls	r3, r3, #3
 800dacc:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 800dace:	68bb      	ldr	r3, [r7, #8]
 800dad0:	685b      	ldr	r3, [r3, #4]
 800dad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800dad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dad6:	2200      	movs	r2, #0
 800dad8:	701a      	strb	r2, [r3, #0]
 800dada:	2200      	movs	r2, #0
 800dadc:	705a      	strb	r2, [r3, #1]
 800dade:	2200      	movs	r2, #0
 800dae0:	709a      	strb	r2, [r3, #2]
 800dae2:	2200      	movs	r2, #0
 800dae4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800dae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dae8:	8b3a      	ldrh	r2, [r7, #24]
 800daea:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 800daec:	8b3a      	ldrh	r2, [r7, #24]
 800daee:	8b7b      	ldrh	r3, [r7, #26]
 800daf0:	4413      	add	r3, r2
 800daf2:	b29a      	uxth	r2, r3
 800daf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daf6:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	685b      	ldr	r3, [r3, #4]
 800dafc:	627b      	str	r3, [r7, #36]	; 0x24
 800dafe:	e061      	b.n	800dbc4 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800db00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db02:	685b      	ldr	r3, [r3, #4]
 800db04:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 800db06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db08:	889b      	ldrh	r3, [r3, #4]
 800db0a:	b29a      	uxth	r2, r3
 800db0c:	697b      	ldr	r3, [r7, #20]
 800db0e:	889b      	ldrh	r3, [r3, #4]
 800db10:	b29b      	uxth	r3, r3
 800db12:	429a      	cmp	r2, r3
 800db14:	d232      	bcs.n	800db7c <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800db16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db1a:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800db1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d01f      	beq.n	800db62 <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800db22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db24:	889b      	ldrh	r3, [r3, #4]
 800db26:	b29a      	uxth	r2, r3
 800db28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db2a:	88db      	ldrh	r3, [r3, #6]
 800db2c:	b29b      	uxth	r3, r3
 800db2e:	429a      	cmp	r2, r3
 800db30:	f0c0 80e3 	bcc.w	800dcfa <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 800db34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db36:	88db      	ldrh	r3, [r3, #6]
 800db38:	b29a      	uxth	r2, r3
 800db3a:	697b      	ldr	r3, [r7, #20]
 800db3c:	889b      	ldrh	r3, [r3, #4]
 800db3e:	b29b      	uxth	r3, r3
 800db40:	429a      	cmp	r2, r3
 800db42:	f200 80da 	bhi.w	800dcfa <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800db46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db48:	68ba      	ldr	r2, [r7, #8]
 800db4a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800db4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db4e:	88db      	ldrh	r3, [r3, #6]
 800db50:	b29a      	uxth	r2, r3
 800db52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db54:	889b      	ldrh	r3, [r3, #4]
 800db56:	b29b      	uxth	r3, r3
 800db58:	429a      	cmp	r2, r3
 800db5a:	d037      	beq.n	800dbcc <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800db5c:	2300      	movs	r3, #0
 800db5e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800db60:	e034      	b.n	800dbcc <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 800db62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db64:	88db      	ldrh	r3, [r3, #6]
 800db66:	b29a      	uxth	r2, r3
 800db68:	697b      	ldr	r3, [r7, #20]
 800db6a:	889b      	ldrh	r3, [r3, #4]
 800db6c:	b29b      	uxth	r3, r3
 800db6e:	429a      	cmp	r2, r3
 800db70:	f200 80c5 	bhi.w	800dcfe <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	68ba      	ldr	r2, [r7, #8]
 800db78:	605a      	str	r2, [r3, #4]
      break;
 800db7a:	e027      	b.n	800dbcc <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 800db7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db7e:	889b      	ldrh	r3, [r3, #4]
 800db80:	b29a      	uxth	r2, r3
 800db82:	697b      	ldr	r3, [r7, #20]
 800db84:	889b      	ldrh	r3, [r3, #4]
 800db86:	b29b      	uxth	r3, r3
 800db88:	429a      	cmp	r2, r3
 800db8a:	f000 80ba 	beq.w	800dd02 <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800db8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db90:	889b      	ldrh	r3, [r3, #4]
 800db92:	b29a      	uxth	r2, r3
 800db94:	697b      	ldr	r3, [r7, #20]
 800db96:	88db      	ldrh	r3, [r3, #6]
 800db98:	b29b      	uxth	r3, r3
 800db9a:	429a      	cmp	r2, r3
 800db9c:	f0c0 80b3 	bcc.w	800dd06 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800dba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d009      	beq.n	800dbba <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 800dba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dba8:	88db      	ldrh	r3, [r3, #6]
 800dbaa:	b29a      	uxth	r2, r3
 800dbac:	697b      	ldr	r3, [r7, #20]
 800dbae:	889b      	ldrh	r3, [r3, #4]
 800dbb0:	b29b      	uxth	r3, r3
 800dbb2:	429a      	cmp	r2, r3
 800dbb4:	d001      	beq.n	800dbba <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800dbba:	697b      	ldr	r3, [r7, #20]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800dbc0:	697b      	ldr	r3, [r7, #20]
 800dbc2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800dbc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d19a      	bne.n	800db00 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 800dbca:	e000      	b.n	800dbce <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 800dbcc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800dbce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d12d      	bne.n	800dc30 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 800dbd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d01c      	beq.n	800dc14 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800dbda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbdc:	88db      	ldrh	r3, [r3, #6]
 800dbde:	b29a      	uxth	r2, r3
 800dbe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbe2:	889b      	ldrh	r3, [r3, #4]
 800dbe4:	b29b      	uxth	r3, r3
 800dbe6:	429a      	cmp	r2, r3
 800dbe8:	d906      	bls.n	800dbf8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 800dbea:	4b51      	ldr	r3, [pc, #324]	; (800dd30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800dbec:	f240 12ab 	movw	r2, #427	; 0x1ab
 800dbf0:	4950      	ldr	r1, [pc, #320]	; (800dd34 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800dbf2:	4851      	ldr	r0, [pc, #324]	; (800dd38 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800dbf4:	f000 fc94 	bl	800e520 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800dbf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbfa:	68ba      	ldr	r2, [r7, #8]
 800dbfc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800dbfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc00:	88db      	ldrh	r3, [r3, #6]
 800dc02:	b29a      	uxth	r2, r3
 800dc04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc06:	889b      	ldrh	r3, [r3, #4]
 800dc08:	b29b      	uxth	r3, r3
 800dc0a:	429a      	cmp	r2, r3
 800dc0c:	d010      	beq.n	800dc30 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 800dc0e:	2300      	movs	r3, #0
 800dc10:	623b      	str	r3, [r7, #32]
 800dc12:	e00d      	b.n	800dc30 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	685b      	ldr	r3, [r3, #4]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d006      	beq.n	800dc2a <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 800dc1c:	4b44      	ldr	r3, [pc, #272]	; (800dd30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800dc1e:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 800dc22:	4946      	ldr	r1, [pc, #280]	; (800dd3c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800dc24:	4844      	ldr	r0, [pc, #272]	; (800dd38 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800dc26:	f000 fc7b 	bl	800e520 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	68ba      	ldr	r2, [r7, #8]
 800dc2e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d105      	bne.n	800dc42 <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	7f9b      	ldrb	r3, [r3, #30]
 800dc3a:	f003 0301 	and.w	r3, r3, #1
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d059      	beq.n	800dcf6 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 800dc42:	6a3b      	ldr	r3, [r7, #32]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d04f      	beq.n	800dce8 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	685b      	ldr	r3, [r3, #4]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d006      	beq.n	800dc5e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	685b      	ldr	r3, [r3, #4]
 800dc54:	685b      	ldr	r3, [r3, #4]
 800dc56:	889b      	ldrh	r3, [r3, #4]
 800dc58:	b29b      	uxth	r3, r3
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d002      	beq.n	800dc64 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800dc5e:	2300      	movs	r3, #0
 800dc60:	623b      	str	r3, [r7, #32]
 800dc62:	e041      	b.n	800dce8 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800dc64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc66:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800dc68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800dc6e:	e012      	b.n	800dc96 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 800dc70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc72:	685b      	ldr	r3, [r3, #4]
 800dc74:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800dc76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc78:	88db      	ldrh	r3, [r3, #6]
 800dc7a:	b29a      	uxth	r2, r3
 800dc7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc7e:	889b      	ldrh	r3, [r3, #4]
 800dc80:	b29b      	uxth	r3, r3
 800dc82:	429a      	cmp	r2, r3
 800dc84:	d002      	beq.n	800dc8c <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 800dc86:	2300      	movs	r3, #0
 800dc88:	623b      	str	r3, [r7, #32]
            break;
 800dc8a:	e007      	b.n	800dc9c <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 800dc8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc8e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800dc90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800dc96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d1e9      	bne.n	800dc70 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800dc9c:	6a3b      	ldr	r3, [r7, #32]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d022      	beq.n	800dce8 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	685b      	ldr	r3, [r3, #4]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d106      	bne.n	800dcb8 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 800dcaa:	4b21      	ldr	r3, [pc, #132]	; (800dd30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800dcac:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800dcb0:	4923      	ldr	r1, [pc, #140]	; (800dd40 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800dcb2:	4821      	ldr	r0, [pc, #132]	; (800dd38 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800dcb4:	f000 fc34 	bl	800e520 <iprintf>
          LWIP_ASSERT("sanity check",
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	685b      	ldr	r3, [r3, #4]
 800dcbc:	685b      	ldr	r3, [r3, #4]
 800dcbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dcc0:	429a      	cmp	r2, r3
 800dcc2:	d106      	bne.n	800dcd2 <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 800dcc4:	4b1a      	ldr	r3, [pc, #104]	; (800dd30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800dcc6:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800dcca:	491d      	ldr	r1, [pc, #116]	; (800dd40 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800dccc:	481a      	ldr	r0, [pc, #104]	; (800dd38 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800dcce:	f000 fc27 	bl	800e520 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800dcd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d006      	beq.n	800dce8 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 800dcda:	4b15      	ldr	r3, [pc, #84]	; (800dd30 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800dcdc:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800dce0:	4918      	ldr	r1, [pc, #96]	; (800dd44 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800dce2:	4815      	ldr	r0, [pc, #84]	; (800dd38 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800dce4:	f000 fc1c 	bl	800e520 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800dce8:	6a3b      	ldr	r3, [r7, #32]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	bf14      	ite	ne
 800dcee:	2301      	movne	r3, #1
 800dcf0:	2300      	moveq	r3, #0
 800dcf2:	b2db      	uxtb	r3, r3
 800dcf4:	e018      	b.n	800dd28 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	e016      	b.n	800dd28 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 800dcfa:	bf00      	nop
 800dcfc:	e004      	b.n	800dd08 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 800dcfe:	bf00      	nop
 800dd00:	e002      	b.n	800dd08 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800dd02:	bf00      	nop
 800dd04:	e000      	b.n	800dd08 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 800dd06:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800dd08:	68b8      	ldr	r0, [r7, #8]
 800dd0a:	f7f7 f893 	bl	8004e34 <pbuf_clen>
 800dd0e:	4603      	mov	r3, r0
 800dd10:	461a      	mov	r2, r3
 800dd12:	4b0d      	ldr	r3, [pc, #52]	; (800dd48 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800dd14:	881b      	ldrh	r3, [r3, #0]
 800dd16:	1a9b      	subs	r3, r3, r2
 800dd18:	b29a      	uxth	r2, r3
 800dd1a:	4b0b      	ldr	r3, [pc, #44]	; (800dd48 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800dd1c:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 800dd1e:	68b8      	ldr	r0, [r7, #8]
 800dd20:	f7f6 fff4 	bl	8004d0c <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 800dd24:	f04f 33ff 	mov.w	r3, #4294967295
#endif /* IP_REASS_CHECK_OVERLAP */
}
 800dd28:	4618      	mov	r0, r3
 800dd2a:	3730      	adds	r7, #48	; 0x30
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	bd80      	pop	{r7, pc}
 800dd30:	080112c0 	.word	0x080112c0
 800dd34:	0801139c 	.word	0x0801139c
 800dd38:	08011308 	.word	0x08011308
 800dd3c:	080113bc 	.word	0x080113bc
 800dd40:	080113f4 	.word	0x080113f4
 800dd44:	08011404 	.word	0x08011404
 800dd48:	20000218 	.word	0x20000218

0800dd4c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800dd4c:	b580      	push	{r7, lr}
 800dd4e:	b08e      	sub	sp, #56	; 0x38
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	685b      	ldr	r3, [r3, #4]
 800dd58:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800dd5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd5c:	781b      	ldrb	r3, [r3, #0]
 800dd5e:	f003 030f 	and.w	r3, r3, #15
 800dd62:	009b      	lsls	r3, r3, #2
 800dd64:	2b14      	cmp	r3, #20
 800dd66:	f040 8131 	bne.w	800dfcc <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800dd6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd6c:	88db      	ldrh	r3, [r3, #6]
 800dd6e:	b29b      	uxth	r3, r3
 800dd70:	4618      	mov	r0, r3
 800dd72:	f7f5 fe4b 	bl	8003a0c <lwip_htons>
 800dd76:	4603      	mov	r3, r0
 800dd78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dd7c:	b29b      	uxth	r3, r3
 800dd7e:	00db      	lsls	r3, r3, #3
 800dd80:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800dd82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd84:	885b      	ldrh	r3, [r3, #2]
 800dd86:	b29b      	uxth	r3, r3
 800dd88:	4618      	mov	r0, r3
 800dd8a:	f7f5 fe3f 	bl	8003a0c <lwip_htons>
 800dd8e:	4603      	mov	r3, r0
 800dd90:	461a      	mov	r2, r3
 800dd92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd94:	781b      	ldrb	r3, [r3, #0]
 800dd96:	b29b      	uxth	r3, r3
 800dd98:	f003 030f 	and.w	r3, r3, #15
 800dd9c:	b29b      	uxth	r3, r3
 800dd9e:	009b      	lsls	r3, r3, #2
 800dda0:	b29b      	uxth	r3, r3
 800dda2:	1ad3      	subs	r3, r2, r3
 800dda4:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800dda6:	6878      	ldr	r0, [r7, #4]
 800dda8:	f7f7 f844 	bl	8004e34 <pbuf_clen>
 800ddac:	4603      	mov	r3, r0
 800ddae:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800ddb0:	4b8d      	ldr	r3, [pc, #564]	; (800dfe8 <ip4_reass+0x29c>)
 800ddb2:	881b      	ldrh	r3, [r3, #0]
 800ddb4:	461a      	mov	r2, r3
 800ddb6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ddb8:	4413      	add	r3, r2
 800ddba:	2b0a      	cmp	r3, #10
 800ddbc:	dd10      	ble.n	800dde0 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ddbe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ddc0:	4619      	mov	r1, r3
 800ddc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ddc4:	f7ff fd8e 	bl	800d8e4 <ip_reass_remove_oldest_datagram>
 800ddc8:	4603      	mov	r3, r0
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	f000 8100 	beq.w	800dfd0 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800ddd0:	4b85      	ldr	r3, [pc, #532]	; (800dfe8 <ip4_reass+0x29c>)
 800ddd2:	881b      	ldrh	r3, [r3, #0]
 800ddd4:	461a      	mov	r2, r3
 800ddd6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ddd8:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ddda:	2b0a      	cmp	r3, #10
 800dddc:	f300 80f8 	bgt.w	800dfd0 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800dde0:	4b82      	ldr	r3, [pc, #520]	; (800dfec <ip4_reass+0x2a0>)
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	633b      	str	r3, [r7, #48]	; 0x30
 800dde6:	e015      	b.n	800de14 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800dde8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddea:	695a      	ldr	r2, [r3, #20]
 800ddec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddee:	68db      	ldr	r3, [r3, #12]
 800ddf0:	429a      	cmp	r2, r3
 800ddf2:	d10c      	bne.n	800de0e <ip4_reass+0xc2>
 800ddf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddf6:	699a      	ldr	r2, [r3, #24]
 800ddf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddfa:	691b      	ldr	r3, [r3, #16]
 800ddfc:	429a      	cmp	r2, r3
 800ddfe:	d106      	bne.n	800de0e <ip4_reass+0xc2>
 800de00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de02:	899a      	ldrh	r2, [r3, #12]
 800de04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de06:	889b      	ldrh	r3, [r3, #4]
 800de08:	b29b      	uxth	r3, r3
 800de0a:	429a      	cmp	r2, r3
 800de0c:	d006      	beq.n	800de1c <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800de0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	633b      	str	r3, [r7, #48]	; 0x30
 800de14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de16:	2b00      	cmp	r3, #0
 800de18:	d1e6      	bne.n	800dde8 <ip4_reass+0x9c>
 800de1a:	e000      	b.n	800de1e <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800de1c:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800de1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de20:	2b00      	cmp	r3, #0
 800de22:	d109      	bne.n	800de38 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800de24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800de26:	4619      	mov	r1, r3
 800de28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de2a:	f7ff fdbd 	bl	800d9a8 <ip_reass_enqueue_new_datagram>
 800de2e:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800de30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de32:	2b00      	cmp	r3, #0
 800de34:	d11c      	bne.n	800de70 <ip4_reass+0x124>
      goto nullreturn;
 800de36:	e0ce      	b.n	800dfd6 <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800de38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de3a:	88db      	ldrh	r3, [r3, #6]
 800de3c:	b29b      	uxth	r3, r3
 800de3e:	4618      	mov	r0, r3
 800de40:	f7f5 fde4 	bl	8003a0c <lwip_htons>
 800de44:	4603      	mov	r3, r0
 800de46:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d110      	bne.n	800de70 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800de4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de50:	89db      	ldrh	r3, [r3, #14]
 800de52:	4618      	mov	r0, r3
 800de54:	f7f5 fdda 	bl	8003a0c <lwip_htons>
 800de58:	4603      	mov	r3, r0
 800de5a:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d006      	beq.n	800de70 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800de62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de64:	3308      	adds	r3, #8
 800de66:	2214      	movs	r2, #20
 800de68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800de6a:	4618      	mov	r0, r3
 800de6c:	f000 fb45 	bl	800e4fa <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800de70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de72:	88db      	ldrh	r3, [r3, #6]
 800de74:	b29b      	uxth	r3, r3
 800de76:	f003 0320 	and.w	r3, r3, #32
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	bf0c      	ite	eq
 800de7e:	2301      	moveq	r3, #1
 800de80:	2300      	movne	r3, #0
 800de82:	b2db      	uxtb	r3, r3
 800de84:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800de86:	69fb      	ldr	r3, [r7, #28]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d00e      	beq.n	800deaa <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 800de8c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800de8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800de90:	4413      	add	r3, r2
 800de92:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800de94:	8b7a      	ldrh	r2, [r7, #26]
 800de96:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800de98:	429a      	cmp	r2, r3
 800de9a:	f0c0 8099 	bcc.w	800dfd0 <ip4_reass+0x284>
 800de9e:	8b7b      	ldrh	r3, [r7, #26]
 800dea0:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800dea4:	4293      	cmp	r3, r2
 800dea6:	f200 8093 	bhi.w	800dfd0 <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800deaa:	69fa      	ldr	r2, [r7, #28]
 800deac:	6879      	ldr	r1, [r7, #4]
 800deae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800deb0:	f7ff fde2 	bl	800da78 <ip_reass_chain_frag_into_datagram_and_validate>
 800deb4:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800deb6:	697b      	ldr	r3, [r7, #20]
 800deb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800debc:	f000 808a 	beq.w	800dfd4 <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800dec0:	4b49      	ldr	r3, [pc, #292]	; (800dfe8 <ip4_reass+0x29c>)
 800dec2:	881a      	ldrh	r2, [r3, #0]
 800dec4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dec6:	4413      	add	r3, r2
 800dec8:	b29a      	uxth	r2, r3
 800deca:	4b47      	ldr	r3, [pc, #284]	; (800dfe8 <ip4_reass+0x29c>)
 800decc:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800dece:	69fb      	ldr	r3, [r7, #28]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d00d      	beq.n	800def0 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 800ded4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ded6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ded8:	4413      	add	r3, r2
 800deda:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800dedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dede:	8a7a      	ldrh	r2, [r7, #18]
 800dee0:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800dee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dee4:	7f9b      	ldrb	r3, [r3, #30]
 800dee6:	f043 0301 	orr.w	r3, r3, #1
 800deea:	b2da      	uxtb	r2, r3
 800deec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deee:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800def0:	697b      	ldr	r3, [r7, #20]
 800def2:	2b01      	cmp	r3, #1
 800def4:	d168      	bne.n	800dfc8 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 800def6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800def8:	8b9b      	ldrh	r3, [r3, #28]
 800defa:	3314      	adds	r3, #20
 800defc:	b29a      	uxth	r2, r3
 800defe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df00:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800df02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df04:	685b      	ldr	r3, [r3, #4]
 800df06:	685b      	ldr	r3, [r3, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 800df0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df0e:	685b      	ldr	r3, [r3, #4]
 800df10:	685b      	ldr	r3, [r3, #4]
 800df12:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800df14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df16:	3308      	adds	r3, #8
 800df18:	2214      	movs	r2, #20
 800df1a:	4619      	mov	r1, r3
 800df1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800df1e:	f000 faec 	bl	800e4fa <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800df22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df24:	8b9b      	ldrh	r3, [r3, #28]
 800df26:	4618      	mov	r0, r3
 800df28:	f7f5 fd70 	bl	8003a0c <lwip_htons>
 800df2c:	4603      	mov	r3, r0
 800df2e:	461a      	mov	r2, r3
 800df30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df32:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800df34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df36:	2200      	movs	r2, #0
 800df38:	719a      	strb	r2, [r3, #6]
 800df3a:	2200      	movs	r2, #0
 800df3c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800df3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df40:	2200      	movs	r2, #0
 800df42:	729a      	strb	r2, [r3, #10]
 800df44:	2200      	movs	r2, #0
 800df46:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800df48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df4a:	685b      	ldr	r3, [r3, #4]
 800df4c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800df4e:	e00e      	b.n	800df6e <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 800df50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df52:	685b      	ldr	r3, [r3, #4]
 800df54:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 800df56:	f06f 0113 	mvn.w	r1, #19
 800df5a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800df5c:	f7f6 feb2 	bl	8004cc4 <pbuf_header>
      pbuf_cat(p, r);
 800df60:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800df62:	6878      	ldr	r0, [r7, #4]
 800df64:	f7f6 ff9e 	bl	8004ea4 <pbuf_cat>
      r = iprh->next_pbuf;
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800df6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df70:	2b00      	cmp	r3, #0
 800df72:	d1ed      	bne.n	800df50 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800df74:	4b1d      	ldr	r3, [pc, #116]	; (800dfec <ip4_reass+0x2a0>)
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df7a:	429a      	cmp	r2, r3
 800df7c:	d102      	bne.n	800df84 <ip4_reass+0x238>
      ipr_prev = NULL;
 800df7e:	2300      	movs	r3, #0
 800df80:	62fb      	str	r3, [r7, #44]	; 0x2c
 800df82:	e010      	b.n	800dfa6 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800df84:	4b19      	ldr	r3, [pc, #100]	; (800dfec <ip4_reass+0x2a0>)
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	62fb      	str	r3, [r7, #44]	; 0x2c
 800df8a:	e007      	b.n	800df9c <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 800df8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df92:	429a      	cmp	r2, r3
 800df94:	d006      	beq.n	800dfa4 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800df96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800df9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d1f4      	bne.n	800df8c <ip4_reass+0x240>
 800dfa2:	e000      	b.n	800dfa6 <ip4_reass+0x25a>
          break;
 800dfa4:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800dfa6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dfa8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dfaa:	f7ff fd37 	bl	800da1c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 800dfae:	6878      	ldr	r0, [r7, #4]
 800dfb0:	f7f6 ff40 	bl	8004e34 <pbuf_clen>
 800dfb4:	4603      	mov	r3, r0
 800dfb6:	461a      	mov	r2, r3
 800dfb8:	4b0b      	ldr	r3, [pc, #44]	; (800dfe8 <ip4_reass+0x29c>)
 800dfba:	881b      	ldrh	r3, [r3, #0]
 800dfbc:	1a9b      	subs	r3, r3, r2
 800dfbe:	b29a      	uxth	r2, r3
 800dfc0:	4b09      	ldr	r3, [pc, #36]	; (800dfe8 <ip4_reass+0x29c>)
 800dfc2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	e00a      	b.n	800dfde <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800dfc8:	2300      	movs	r3, #0
 800dfca:	e008      	b.n	800dfde <ip4_reass+0x292>
    goto nullreturn;
 800dfcc:	bf00      	nop
 800dfce:	e002      	b.n	800dfd6 <ip4_reass+0x28a>

nullreturn:
 800dfd0:	bf00      	nop
 800dfd2:	e000      	b.n	800dfd6 <ip4_reass+0x28a>
    goto nullreturn;
 800dfd4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800dfd6:	6878      	ldr	r0, [r7, #4]
 800dfd8:	f7f6 fe98 	bl	8004d0c <pbuf_free>
  return NULL;
 800dfdc:	2300      	movs	r3, #0
}
 800dfde:	4618      	mov	r0, r3
 800dfe0:	3738      	adds	r7, #56	; 0x38
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	bd80      	pop	{r7, pc}
 800dfe6:	bf00      	nop
 800dfe8:	20000218 	.word	0x20000218
 800dfec:	20000214 	.word	0x20000214

0800dff0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 800dff0:	b580      	push	{r7, lr}
 800dff2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800dff4:	2005      	movs	r0, #5
 800dff6:	f7f6 f8b1 	bl	800415c <memp_malloc>
 800dffa:	4603      	mov	r3, r0
}
 800dffc:	4618      	mov	r0, r3
 800dffe:	bd80      	pop	{r7, pc}

0800e000 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b082      	sub	sp, #8
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d106      	bne.n	800e01c <ip_frag_free_pbuf_custom_ref+0x1c>
 800e00e:	4b07      	ldr	r3, [pc, #28]	; (800e02c <ip_frag_free_pbuf_custom_ref+0x2c>)
 800e010:	f240 22ae 	movw	r2, #686	; 0x2ae
 800e014:	4906      	ldr	r1, [pc, #24]	; (800e030 <ip_frag_free_pbuf_custom_ref+0x30>)
 800e016:	4807      	ldr	r0, [pc, #28]	; (800e034 <ip_frag_free_pbuf_custom_ref+0x34>)
 800e018:	f000 fa82 	bl	800e520 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800e01c:	6879      	ldr	r1, [r7, #4]
 800e01e:	2005      	movs	r0, #5
 800e020:	f7f6 f8e8 	bl	80041f4 <memp_free>
}
 800e024:	bf00      	nop
 800e026:	3708      	adds	r7, #8
 800e028:	46bd      	mov	sp, r7
 800e02a:	bd80      	pop	{r7, pc}
 800e02c:	080112c0 	.word	0x080112c0
 800e030:	08011428 	.word	0x08011428
 800e034:	08011308 	.word	0x08011308

0800e038 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b084      	sub	sp, #16
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d106      	bne.n	800e058 <ipfrag_free_pbuf_custom+0x20>
 800e04a:	4b11      	ldr	r3, [pc, #68]	; (800e090 <ipfrag_free_pbuf_custom+0x58>)
 800e04c:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 800e050:	4910      	ldr	r1, [pc, #64]	; (800e094 <ipfrag_free_pbuf_custom+0x5c>)
 800e052:	4811      	ldr	r0, [pc, #68]	; (800e098 <ipfrag_free_pbuf_custom+0x60>)
 800e054:	f000 fa64 	bl	800e520 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 800e058:	68fa      	ldr	r2, [r7, #12]
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	429a      	cmp	r2, r3
 800e05e:	d006      	beq.n	800e06e <ipfrag_free_pbuf_custom+0x36>
 800e060:	4b0b      	ldr	r3, [pc, #44]	; (800e090 <ipfrag_free_pbuf_custom+0x58>)
 800e062:	f240 22b9 	movw	r2, #697	; 0x2b9
 800e066:	490d      	ldr	r1, [pc, #52]	; (800e09c <ipfrag_free_pbuf_custom+0x64>)
 800e068:	480b      	ldr	r0, [pc, #44]	; (800e098 <ipfrag_free_pbuf_custom+0x60>)
 800e06a:	f000 fa59 	bl	800e520 <iprintf>
  if (pcr->original != NULL) {
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	695b      	ldr	r3, [r3, #20]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d004      	beq.n	800e080 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	695b      	ldr	r3, [r3, #20]
 800e07a:	4618      	mov	r0, r3
 800e07c:	f7f6 fe46 	bl	8004d0c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800e080:	68f8      	ldr	r0, [r7, #12]
 800e082:	f7ff ffbd 	bl	800e000 <ip_frag_free_pbuf_custom_ref>
}
 800e086:	bf00      	nop
 800e088:	3710      	adds	r7, #16
 800e08a:	46bd      	mov	sp, r7
 800e08c:	bd80      	pop	{r7, pc}
 800e08e:	bf00      	nop
 800e090:	080112c0 	.word	0x080112c0
 800e094:	08011434 	.word	0x08011434
 800e098:	08011308 	.word	0x08011308
 800e09c:	08011440 	.word	0x08011440

0800e0a0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b092      	sub	sp, #72	; 0x48
 800e0a4:	af02      	add	r7, sp, #8
 800e0a6:	60f8      	str	r0, [r7, #12]
 800e0a8:	60b9      	str	r1, [r7, #8]
 800e0aa:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800e0b0:	68bb      	ldr	r3, [r7, #8]
 800e0b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e0b4:	3b14      	subs	r3, #20
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	da00      	bge.n	800e0bc <ip4_frag+0x1c>
 800e0ba:	3307      	adds	r3, #7
 800e0bc:	10db      	asrs	r3, r3, #3
 800e0be:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800e0c0:	2314      	movs	r3, #20
 800e0c2:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	685b      	ldr	r3, [r3, #4]
 800e0c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 800e0ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0cc:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800e0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0d0:	781b      	ldrb	r3, [r3, #0]
 800e0d2:	f003 030f 	and.w	r3, r3, #15
 800e0d6:	009b      	lsls	r3, r3, #2
 800e0d8:	2b14      	cmp	r3, #20
 800e0da:	d009      	beq.n	800e0f0 <ip4_frag+0x50>
 800e0dc:	4b79      	ldr	r3, [pc, #484]	; (800e2c4 <ip4_frag+0x224>)
 800e0de:	f240 22e1 	movw	r2, #737	; 0x2e1
 800e0e2:	4979      	ldr	r1, [pc, #484]	; (800e2c8 <ip4_frag+0x228>)
 800e0e4:	4879      	ldr	r0, [pc, #484]	; (800e2cc <ip4_frag+0x22c>)
 800e0e6:	f000 fa1b 	bl	800e520 <iprintf>
 800e0ea:	f06f 0305 	mvn.w	r3, #5
 800e0ee:	e0e5      	b.n	800e2bc <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800e0f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0f2:	88db      	ldrh	r3, [r3, #6]
 800e0f4:	b29b      	uxth	r3, r3
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	f7f5 fc88 	bl	8003a0c <lwip_htons>
 800e0fc:	4603      	mov	r3, r0
 800e0fe:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 800e100:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e102:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e106:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800e108:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e10a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d009      	beq.n	800e126 <ip4_frag+0x86>
 800e112:	4b6c      	ldr	r3, [pc, #432]	; (800e2c4 <ip4_frag+0x224>)
 800e114:	f240 22e6 	movw	r2, #742	; 0x2e6
 800e118:	496d      	ldr	r1, [pc, #436]	; (800e2d0 <ip4_frag+0x230>)
 800e11a:	486c      	ldr	r0, [pc, #432]	; (800e2cc <ip4_frag+0x22c>)
 800e11c:	f000 fa00 	bl	800e520 <iprintf>
 800e120:	f06f 0305 	mvn.w	r3, #5
 800e124:	e0ca      	b.n	800e2bc <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	891b      	ldrh	r3, [r3, #8]
 800e12a:	3b14      	subs	r3, #20
 800e12c:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 800e12e:	e0bc      	b.n	800e2aa <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 800e130:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800e132:	00da      	lsls	r2, r3, #3
 800e134:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e136:	4293      	cmp	r3, r2
 800e138:	bfa8      	it	ge
 800e13a:	4613      	movge	r3, r2
 800e13c:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800e13e:	2200      	movs	r2, #0
 800e140:	2114      	movs	r1, #20
 800e142:	2002      	movs	r0, #2
 800e144:	f7f6 fa70 	bl	8004628 <pbuf_alloc>
 800e148:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 800e14a:	6a3b      	ldr	r3, [r7, #32]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	f000 80b2 	beq.w	800e2b6 <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	895b      	ldrh	r3, [r3, #10]
 800e156:	2b13      	cmp	r3, #19
 800e158:	d806      	bhi.n	800e168 <ip4_frag+0xc8>
 800e15a:	4b5a      	ldr	r3, [pc, #360]	; (800e2c4 <ip4_frag+0x224>)
 800e15c:	f240 3209 	movw	r2, #777	; 0x309
 800e160:	495c      	ldr	r1, [pc, #368]	; (800e2d4 <ip4_frag+0x234>)
 800e162:	485a      	ldr	r0, [pc, #360]	; (800e2cc <ip4_frag+0x22c>)
 800e164:	f000 f9dc 	bl	800e520 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800e168:	6a3b      	ldr	r3, [r7, #32]
 800e16a:	685b      	ldr	r3, [r3, #4]
 800e16c:	2214      	movs	r2, #20
 800e16e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e170:	4618      	mov	r0, r3
 800e172:	f000 f9c2 	bl	800e4fa <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800e176:	6a3b      	ldr	r3, [r7, #32]
 800e178:	685b      	ldr	r3, [r3, #4]
 800e17a:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 800e17c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e17e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 800e180:	e04f      	b.n	800e222 <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	895a      	ldrh	r2, [r3, #10]
 800e186:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e188:	1ad3      	subs	r3, r2, r3
 800e18a:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800e18c:	8b7a      	ldrh	r2, [r7, #26]
 800e18e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e190:	4293      	cmp	r3, r2
 800e192:	bf28      	it	cs
 800e194:	4613      	movcs	r3, r2
 800e196:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800e198:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d105      	bne.n	800e1aa <ip4_frag+0x10a>
        poff = 0;
 800e19e:	2300      	movs	r3, #0
 800e1a0:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	60fb      	str	r3, [r7, #12]
        continue;
 800e1a8:	e03b      	b.n	800e222 <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800e1aa:	f7ff ff21 	bl	800dff0 <ip_frag_alloc_pbuf_custom_ref>
 800e1ae:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 800e1b0:	697b      	ldr	r3, [r7, #20]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d103      	bne.n	800e1be <ip4_frag+0x11e>
        pbuf_free(rambuf);
 800e1b6:	6a38      	ldr	r0, [r7, #32]
 800e1b8:	f7f6 fda8 	bl	8004d0c <pbuf_free>
        goto memerr;
 800e1bc:	e07c      	b.n	800e2b8 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e1be:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800e1c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e1c6:	4413      	add	r3, r2
 800e1c8:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800e1ca:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e1cc:	9201      	str	r2, [sp, #4]
 800e1ce:	9300      	str	r3, [sp, #0]
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	2202      	movs	r2, #2
 800e1d4:	2004      	movs	r0, #4
 800e1d6:	f7f6 fbbb 	bl	8004950 <pbuf_alloced_custom>
 800e1da:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 800e1dc:	693b      	ldr	r3, [r7, #16]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d106      	bne.n	800e1f0 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 800e1e2:	6978      	ldr	r0, [r7, #20]
 800e1e4:	f7ff ff0c 	bl	800e000 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800e1e8:	6a38      	ldr	r0, [r7, #32]
 800e1ea:	f7f6 fd8f 	bl	8004d0c <pbuf_free>
        goto memerr;
 800e1ee:	e063      	b.n	800e2b8 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 800e1f0:	68f8      	ldr	r0, [r7, #12]
 800e1f2:	f7f6 fe35 	bl	8004e60 <pbuf_ref>
      pcr->original = p;
 800e1f6:	697b      	ldr	r3, [r7, #20]
 800e1f8:	68fa      	ldr	r2, [r7, #12]
 800e1fa:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800e1fc:	697b      	ldr	r3, [r7, #20]
 800e1fe:	4a36      	ldr	r2, [pc, #216]	; (800e2d8 <ip4_frag+0x238>)
 800e200:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800e202:	6939      	ldr	r1, [r7, #16]
 800e204:	6a38      	ldr	r0, [r7, #32]
 800e206:	f7f6 fe4d 	bl	8004ea4 <pbuf_cat>
      left_to_copy -= newpbuflen;
 800e20a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800e20c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e20e:	1ad3      	subs	r3, r2, r3
 800e210:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 800e212:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e214:	2b00      	cmp	r3, #0
 800e216:	d004      	beq.n	800e222 <ip4_frag+0x182>
        poff = 0;
 800e218:	2300      	movs	r3, #0
 800e21a:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800e222:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e224:	2b00      	cmp	r3, #0
 800e226:	d1ac      	bne.n	800e182 <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 800e228:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e22a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e22c:	4413      	add	r3, r2
 800e22e:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800e230:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e232:	68bb      	ldr	r3, [r7, #8]
 800e234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e236:	3b14      	subs	r3, #20
 800e238:	429a      	cmp	r2, r3
 800e23a:	bfd4      	ite	le
 800e23c:	2301      	movle	r3, #1
 800e23e:	2300      	movgt	r3, #0
 800e240:	b2db      	uxtb	r3, r3
 800e242:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800e244:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800e246:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e24a:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 800e24c:	69fb      	ldr	r3, [r7, #28]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d103      	bne.n	800e25a <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 800e252:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e254:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800e258:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800e25a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e25c:	4618      	mov	r0, r3
 800e25e:	f7f5 fbd5 	bl	8003a0c <lwip_htons>
 800e262:	4603      	mov	r3, r0
 800e264:	461a      	mov	r2, r3
 800e266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e268:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800e26a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e26c:	3314      	adds	r3, #20
 800e26e:	b29b      	uxth	r3, r3
 800e270:	4618      	mov	r0, r3
 800e272:	f7f5 fbcb 	bl	8003a0c <lwip_htons>
 800e276:	4603      	mov	r3, r0
 800e278:	461a      	mov	r2, r3
 800e27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e27c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800e27e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e280:	2200      	movs	r2, #0
 800e282:	729a      	strb	r2, [r3, #10]
 800e284:	2200      	movs	r2, #0
 800e286:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800e288:	68bb      	ldr	r3, [r7, #8]
 800e28a:	695b      	ldr	r3, [r3, #20]
 800e28c:	687a      	ldr	r2, [r7, #4]
 800e28e:	6a39      	ldr	r1, [r7, #32]
 800e290:	68b8      	ldr	r0, [r7, #8]
 800e292:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800e294:	6a38      	ldr	r0, [r7, #32]
 800e296:	f7f6 fd39 	bl	8004d0c <pbuf_free>
    left -= fragsize;
 800e29a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e29c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e29e:	1ad3      	subs	r3, r2, r3
 800e2a0:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 800e2a2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800e2a4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800e2a6:	4413      	add	r3, r2
 800e2a8:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 800e2aa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	f47f af3f 	bne.w	800e130 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	e002      	b.n	800e2bc <ip4_frag+0x21c>
      goto memerr;
 800e2b6:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800e2b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e2bc:	4618      	mov	r0, r3
 800e2be:	3740      	adds	r7, #64	; 0x40
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	bd80      	pop	{r7, pc}
 800e2c4:	080112c0 	.word	0x080112c0
 800e2c8:	0801144c 	.word	0x0801144c
 800e2cc:	08011308 	.word	0x08011308
 800e2d0:	08011474 	.word	0x08011474
 800e2d4:	08011490 	.word	0x08011490
 800e2d8:	0800e039 	.word	0x0800e039

0800e2dc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b086      	sub	sp, #24
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
 800e2e4:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 800e2e6:	230e      	movs	r3, #14
 800e2e8:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	895b      	ldrh	r3, [r3, #10]
 800e2ee:	2b0e      	cmp	r3, #14
 800e2f0:	d977      	bls.n	800e3e2 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	685b      	ldr	r3, [r3, #4]
 800e2f6:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800e2f8:	693b      	ldr	r3, [r7, #16]
 800e2fa:	7b1a      	ldrb	r2, [r3, #12]
 800e2fc:	7b5b      	ldrb	r3, [r3, #13]
 800e2fe:	021b      	lsls	r3, r3, #8
 800e300:	4313      	orrs	r3, r2
 800e302:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800e304:	693b      	ldr	r3, [r7, #16]
 800e306:	781b      	ldrb	r3, [r3, #0]
 800e308:	f003 0301 	and.w	r3, r3, #1
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d023      	beq.n	800e358 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800e310:	693b      	ldr	r3, [r7, #16]
 800e312:	781b      	ldrb	r3, [r3, #0]
 800e314:	2b01      	cmp	r3, #1
 800e316:	d10f      	bne.n	800e338 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e318:	693b      	ldr	r3, [r7, #16]
 800e31a:	785b      	ldrb	r3, [r3, #1]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d11b      	bne.n	800e358 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800e320:	693b      	ldr	r3, [r7, #16]
 800e322:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800e324:	2b5e      	cmp	r3, #94	; 0x5e
 800e326:	d117      	bne.n	800e358 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	7b5b      	ldrb	r3, [r3, #13]
 800e32c:	f043 0310 	orr.w	r3, r3, #16
 800e330:	b2da      	uxtb	r2, r3
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	735a      	strb	r2, [r3, #13]
 800e336:	e00f      	b.n	800e358 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800e338:	693b      	ldr	r3, [r7, #16]
 800e33a:	2206      	movs	r2, #6
 800e33c:	4930      	ldr	r1, [pc, #192]	; (800e400 <ethernet_input+0x124>)
 800e33e:	4618      	mov	r0, r3
 800e340:	f000 f8cc 	bl	800e4dc <memcmp>
 800e344:	4603      	mov	r3, r0
 800e346:	2b00      	cmp	r3, #0
 800e348:	d106      	bne.n	800e358 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	7b5b      	ldrb	r3, [r3, #13]
 800e34e:	f043 0308 	orr.w	r3, r3, #8
 800e352:	b2da      	uxtb	r2, r3
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800e358:	89fb      	ldrh	r3, [r7, #14]
 800e35a:	2b08      	cmp	r3, #8
 800e35c:	d003      	beq.n	800e366 <ethernet_input+0x8a>
 800e35e:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800e362:	d01e      	beq.n	800e3a2 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800e364:	e044      	b.n	800e3f0 <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800e36c:	f003 0308 	and.w	r3, r3, #8
 800e370:	2b00      	cmp	r3, #0
 800e372:	d038      	beq.n	800e3e6 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	895b      	ldrh	r3, [r3, #10]
 800e378:	461a      	mov	r2, r3
 800e37a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e37e:	429a      	cmp	r2, r3
 800e380:	db33      	blt.n	800e3ea <ethernet_input+0x10e>
 800e382:	8afb      	ldrh	r3, [r7, #22]
 800e384:	425b      	negs	r3, r3
 800e386:	b29b      	uxth	r3, r3
 800e388:	b21b      	sxth	r3, r3
 800e38a:	4619      	mov	r1, r3
 800e38c:	6878      	ldr	r0, [r7, #4]
 800e38e:	f7f6 fc99 	bl	8004cc4 <pbuf_header>
 800e392:	4603      	mov	r3, r0
 800e394:	2b00      	cmp	r3, #0
 800e396:	d128      	bne.n	800e3ea <ethernet_input+0x10e>
        ip4_input(p, netif);
 800e398:	6839      	ldr	r1, [r7, #0]
 800e39a:	6878      	ldr	r0, [r7, #4]
 800e39c:	f7fe ff64 	bl	800d268 <ip4_input>
      break;
 800e3a0:	e01d      	b.n	800e3de <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800e3a2:	683b      	ldr	r3, [r7, #0]
 800e3a4:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800e3a8:	f003 0308 	and.w	r3, r3, #8
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d01e      	beq.n	800e3ee <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	895b      	ldrh	r3, [r3, #10]
 800e3b4:	461a      	mov	r2, r3
 800e3b6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800e3ba:	429a      	cmp	r2, r3
 800e3bc:	db15      	blt.n	800e3ea <ethernet_input+0x10e>
 800e3be:	8afb      	ldrh	r3, [r7, #22]
 800e3c0:	425b      	negs	r3, r3
 800e3c2:	b29b      	uxth	r3, r3
 800e3c4:	b21b      	sxth	r3, r3
 800e3c6:	4619      	mov	r1, r3
 800e3c8:	6878      	ldr	r0, [r7, #4]
 800e3ca:	f7f6 fc7b 	bl	8004cc4 <pbuf_header>
 800e3ce:	4603      	mov	r3, r0
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d10a      	bne.n	800e3ea <ethernet_input+0x10e>
        etharp_input(p, netif);
 800e3d4:	6839      	ldr	r1, [r7, #0]
 800e3d6:	6878      	ldr	r0, [r7, #4]
 800e3d8:	f7fe f92e 	bl	800c638 <etharp_input>
      break;
 800e3dc:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800e3de:	2300      	movs	r3, #0
 800e3e0:	e00a      	b.n	800e3f8 <ethernet_input+0x11c>
    goto free_and_return;
 800e3e2:	bf00      	nop
 800e3e4:	e004      	b.n	800e3f0 <ethernet_input+0x114>
        goto free_and_return;
 800e3e6:	bf00      	nop
 800e3e8:	e002      	b.n	800e3f0 <ethernet_input+0x114>

free_and_return:
 800e3ea:	bf00      	nop
 800e3ec:	e000      	b.n	800e3f0 <ethernet_input+0x114>
        goto free_and_return;
 800e3ee:	bf00      	nop
  pbuf_free(p);
 800e3f0:	6878      	ldr	r0, [r7, #4]
 800e3f2:	f7f6 fc8b 	bl	8004d0c <pbuf_free>
  return ERR_OK;
 800e3f6:	2300      	movs	r3, #0
}
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	3718      	adds	r7, #24
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	bd80      	pop	{r7, pc}
 800e400:	08011644 	.word	0x08011644

0800e404 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800e404:	b580      	push	{r7, lr}
 800e406:	b086      	sub	sp, #24
 800e408:	af00      	add	r7, sp, #0
 800e40a:	60f8      	str	r0, [r7, #12]
 800e40c:	60b9      	str	r1, [r7, #8]
 800e40e:	607a      	str	r2, [r7, #4]
 800e410:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800e412:	8c3b      	ldrh	r3, [r7, #32]
 800e414:	4618      	mov	r0, r3
 800e416:	f7f5 faf9 	bl	8003a0c <lwip_htons>
 800e41a:	4603      	mov	r3, r0
 800e41c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800e41e:	210e      	movs	r1, #14
 800e420:	68b8      	ldr	r0, [r7, #8]
 800e422:	f7f6 fc4f 	bl	8004cc4 <pbuf_header>
 800e426:	4603      	mov	r3, r0
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d125      	bne.n	800e478 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800e42c:	68bb      	ldr	r3, [r7, #8]
 800e42e:	685b      	ldr	r3, [r3, #4]
 800e430:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800e432:	693b      	ldr	r3, [r7, #16]
 800e434:	8afa      	ldrh	r2, [r7, #22]
 800e436:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800e438:	693b      	ldr	r3, [r7, #16]
 800e43a:	2206      	movs	r2, #6
 800e43c:	6839      	ldr	r1, [r7, #0]
 800e43e:	4618      	mov	r0, r3
 800e440:	f000 f85b 	bl	800e4fa <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 800e444:	693b      	ldr	r3, [r7, #16]
 800e446:	3306      	adds	r3, #6
 800e448:	2206      	movs	r2, #6
 800e44a:	6879      	ldr	r1, [r7, #4]
 800e44c:	4618      	mov	r0, r3
 800e44e:	f000 f854 	bl	800e4fa <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800e458:	2b06      	cmp	r3, #6
 800e45a:	d006      	beq.n	800e46a <ethernet_output+0x66>
 800e45c:	4b0a      	ldr	r3, [pc, #40]	; (800e488 <ethernet_output+0x84>)
 800e45e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800e462:	490a      	ldr	r1, [pc, #40]	; (800e48c <ethernet_output+0x88>)
 800e464:	480a      	ldr	r0, [pc, #40]	; (800e490 <ethernet_output+0x8c>)
 800e466:	f000 f85b 	bl	800e520 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	699b      	ldr	r3, [r3, #24]
 800e46e:	68b9      	ldr	r1, [r7, #8]
 800e470:	68f8      	ldr	r0, [r7, #12]
 800e472:	4798      	blx	r3
 800e474:	4603      	mov	r3, r0
 800e476:	e002      	b.n	800e47e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800e478:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800e47a:	f06f 0301 	mvn.w	r3, #1
}
 800e47e:	4618      	mov	r0, r3
 800e480:	3718      	adds	r7, #24
 800e482:	46bd      	mov	sp, r7
 800e484:	bd80      	pop	{r7, pc}
 800e486:	bf00      	nop
 800e488:	080114b0 	.word	0x080114b0
 800e48c:	080114e8 	.word	0x080114e8
 800e490:	0801151c 	.word	0x0801151c

0800e494 <__libc_init_array>:
 800e494:	b570      	push	{r4, r5, r6, lr}
 800e496:	2500      	movs	r5, #0
 800e498:	4e0c      	ldr	r6, [pc, #48]	; (800e4cc <__libc_init_array+0x38>)
 800e49a:	4c0d      	ldr	r4, [pc, #52]	; (800e4d0 <__libc_init_array+0x3c>)
 800e49c:	1ba4      	subs	r4, r4, r6
 800e49e:	10a4      	asrs	r4, r4, #2
 800e4a0:	42a5      	cmp	r5, r4
 800e4a2:	d109      	bne.n	800e4b8 <__libc_init_array+0x24>
 800e4a4:	f000 ff66 	bl	800f374 <_init>
 800e4a8:	2500      	movs	r5, #0
 800e4aa:	4e0a      	ldr	r6, [pc, #40]	; (800e4d4 <__libc_init_array+0x40>)
 800e4ac:	4c0a      	ldr	r4, [pc, #40]	; (800e4d8 <__libc_init_array+0x44>)
 800e4ae:	1ba4      	subs	r4, r4, r6
 800e4b0:	10a4      	asrs	r4, r4, #2
 800e4b2:	42a5      	cmp	r5, r4
 800e4b4:	d105      	bne.n	800e4c2 <__libc_init_array+0x2e>
 800e4b6:	bd70      	pop	{r4, r5, r6, pc}
 800e4b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e4bc:	4798      	blx	r3
 800e4be:	3501      	adds	r5, #1
 800e4c0:	e7ee      	b.n	800e4a0 <__libc_init_array+0xc>
 800e4c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e4c6:	4798      	blx	r3
 800e4c8:	3501      	adds	r5, #1
 800e4ca:	e7f2      	b.n	800e4b2 <__libc_init_array+0x1e>
 800e4cc:	080116f4 	.word	0x080116f4
 800e4d0:	080116f4 	.word	0x080116f4
 800e4d4:	080116f4 	.word	0x080116f4
 800e4d8:	080116f8 	.word	0x080116f8

0800e4dc <memcmp>:
 800e4dc:	b530      	push	{r4, r5, lr}
 800e4de:	2400      	movs	r4, #0
 800e4e0:	42a2      	cmp	r2, r4
 800e4e2:	d101      	bne.n	800e4e8 <memcmp+0xc>
 800e4e4:	2000      	movs	r0, #0
 800e4e6:	e007      	b.n	800e4f8 <memcmp+0x1c>
 800e4e8:	5d03      	ldrb	r3, [r0, r4]
 800e4ea:	3401      	adds	r4, #1
 800e4ec:	190d      	adds	r5, r1, r4
 800e4ee:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800e4f2:	42ab      	cmp	r3, r5
 800e4f4:	d0f4      	beq.n	800e4e0 <memcmp+0x4>
 800e4f6:	1b58      	subs	r0, r3, r5
 800e4f8:	bd30      	pop	{r4, r5, pc}

0800e4fa <memcpy>:
 800e4fa:	b510      	push	{r4, lr}
 800e4fc:	1e43      	subs	r3, r0, #1
 800e4fe:	440a      	add	r2, r1
 800e500:	4291      	cmp	r1, r2
 800e502:	d100      	bne.n	800e506 <memcpy+0xc>
 800e504:	bd10      	pop	{r4, pc}
 800e506:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e50a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e50e:	e7f7      	b.n	800e500 <memcpy+0x6>

0800e510 <memset>:
 800e510:	4603      	mov	r3, r0
 800e512:	4402      	add	r2, r0
 800e514:	4293      	cmp	r3, r2
 800e516:	d100      	bne.n	800e51a <memset+0xa>
 800e518:	4770      	bx	lr
 800e51a:	f803 1b01 	strb.w	r1, [r3], #1
 800e51e:	e7f9      	b.n	800e514 <memset+0x4>

0800e520 <iprintf>:
 800e520:	b40f      	push	{r0, r1, r2, r3}
 800e522:	4b0a      	ldr	r3, [pc, #40]	; (800e54c <iprintf+0x2c>)
 800e524:	b513      	push	{r0, r1, r4, lr}
 800e526:	681c      	ldr	r4, [r3, #0]
 800e528:	b124      	cbz	r4, 800e534 <iprintf+0x14>
 800e52a:	69a3      	ldr	r3, [r4, #24]
 800e52c:	b913      	cbnz	r3, 800e534 <iprintf+0x14>
 800e52e:	4620      	mov	r0, r4
 800e530:	f000 f882 	bl	800e638 <__sinit>
 800e534:	ab05      	add	r3, sp, #20
 800e536:	9a04      	ldr	r2, [sp, #16]
 800e538:	68a1      	ldr	r1, [r4, #8]
 800e53a:	4620      	mov	r0, r4
 800e53c:	9301      	str	r3, [sp, #4]
 800e53e:	f000 f9db 	bl	800e8f8 <_vfiprintf_r>
 800e542:	b002      	add	sp, #8
 800e544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e548:	b004      	add	sp, #16
 800e54a:	4770      	bx	lr
 800e54c:	20000018 	.word	0x20000018

0800e550 <rand>:
 800e550:	b538      	push	{r3, r4, r5, lr}
 800e552:	4b13      	ldr	r3, [pc, #76]	; (800e5a0 <rand+0x50>)
 800e554:	681c      	ldr	r4, [r3, #0]
 800e556:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e558:	b97b      	cbnz	r3, 800e57a <rand+0x2a>
 800e55a:	2018      	movs	r0, #24
 800e55c:	f000 f8f6 	bl	800e74c <malloc>
 800e560:	4a10      	ldr	r2, [pc, #64]	; (800e5a4 <rand+0x54>)
 800e562:	4b11      	ldr	r3, [pc, #68]	; (800e5a8 <rand+0x58>)
 800e564:	63a0      	str	r0, [r4, #56]	; 0x38
 800e566:	e9c0 2300 	strd	r2, r3, [r0]
 800e56a:	4b10      	ldr	r3, [pc, #64]	; (800e5ac <rand+0x5c>)
 800e56c:	2201      	movs	r2, #1
 800e56e:	6083      	str	r3, [r0, #8]
 800e570:	230b      	movs	r3, #11
 800e572:	8183      	strh	r3, [r0, #12]
 800e574:	2300      	movs	r3, #0
 800e576:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800e57a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e57c:	480c      	ldr	r0, [pc, #48]	; (800e5b0 <rand+0x60>)
 800e57e:	690a      	ldr	r2, [r1, #16]
 800e580:	694b      	ldr	r3, [r1, #20]
 800e582:	4350      	muls	r0, r2
 800e584:	4c0b      	ldr	r4, [pc, #44]	; (800e5b4 <rand+0x64>)
 800e586:	fb04 0003 	mla	r0, r4, r3, r0
 800e58a:	fba2 2304 	umull	r2, r3, r2, r4
 800e58e:	4403      	add	r3, r0
 800e590:	1c54      	adds	r4, r2, #1
 800e592:	f143 0500 	adc.w	r5, r3, #0
 800e596:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800e59a:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800e59e:	bd38      	pop	{r3, r4, r5, pc}
 800e5a0:	20000018 	.word	0x20000018
 800e5a4:	abcd330e 	.word	0xabcd330e
 800e5a8:	e66d1234 	.word	0xe66d1234
 800e5ac:	0005deec 	.word	0x0005deec
 800e5b0:	5851f42d 	.word	0x5851f42d
 800e5b4:	4c957f2d 	.word	0x4c957f2d

0800e5b8 <std>:
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	b510      	push	{r4, lr}
 800e5bc:	4604      	mov	r4, r0
 800e5be:	e9c0 3300 	strd	r3, r3, [r0]
 800e5c2:	6083      	str	r3, [r0, #8]
 800e5c4:	8181      	strh	r1, [r0, #12]
 800e5c6:	6643      	str	r3, [r0, #100]	; 0x64
 800e5c8:	81c2      	strh	r2, [r0, #14]
 800e5ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e5ce:	6183      	str	r3, [r0, #24]
 800e5d0:	4619      	mov	r1, r3
 800e5d2:	2208      	movs	r2, #8
 800e5d4:	305c      	adds	r0, #92	; 0x5c
 800e5d6:	f7ff ff9b 	bl	800e510 <memset>
 800e5da:	4b05      	ldr	r3, [pc, #20]	; (800e5f0 <std+0x38>)
 800e5dc:	6224      	str	r4, [r4, #32]
 800e5de:	6263      	str	r3, [r4, #36]	; 0x24
 800e5e0:	4b04      	ldr	r3, [pc, #16]	; (800e5f4 <std+0x3c>)
 800e5e2:	62a3      	str	r3, [r4, #40]	; 0x28
 800e5e4:	4b04      	ldr	r3, [pc, #16]	; (800e5f8 <std+0x40>)
 800e5e6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e5e8:	4b04      	ldr	r3, [pc, #16]	; (800e5fc <std+0x44>)
 800e5ea:	6323      	str	r3, [r4, #48]	; 0x30
 800e5ec:	bd10      	pop	{r4, pc}
 800e5ee:	bf00      	nop
 800e5f0:	0800ee55 	.word	0x0800ee55
 800e5f4:	0800ee77 	.word	0x0800ee77
 800e5f8:	0800eeaf 	.word	0x0800eeaf
 800e5fc:	0800eed3 	.word	0x0800eed3

0800e600 <_cleanup_r>:
 800e600:	4901      	ldr	r1, [pc, #4]	; (800e608 <_cleanup_r+0x8>)
 800e602:	f000 b885 	b.w	800e710 <_fwalk_reent>
 800e606:	bf00      	nop
 800e608:	0800f1ad 	.word	0x0800f1ad

0800e60c <__sfmoreglue>:
 800e60c:	b570      	push	{r4, r5, r6, lr}
 800e60e:	2568      	movs	r5, #104	; 0x68
 800e610:	1e4a      	subs	r2, r1, #1
 800e612:	4355      	muls	r5, r2
 800e614:	460e      	mov	r6, r1
 800e616:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e61a:	f000 f8eb 	bl	800e7f4 <_malloc_r>
 800e61e:	4604      	mov	r4, r0
 800e620:	b140      	cbz	r0, 800e634 <__sfmoreglue+0x28>
 800e622:	2100      	movs	r1, #0
 800e624:	e9c0 1600 	strd	r1, r6, [r0]
 800e628:	300c      	adds	r0, #12
 800e62a:	60a0      	str	r0, [r4, #8]
 800e62c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e630:	f7ff ff6e 	bl	800e510 <memset>
 800e634:	4620      	mov	r0, r4
 800e636:	bd70      	pop	{r4, r5, r6, pc}

0800e638 <__sinit>:
 800e638:	6983      	ldr	r3, [r0, #24]
 800e63a:	b510      	push	{r4, lr}
 800e63c:	4604      	mov	r4, r0
 800e63e:	bb33      	cbnz	r3, 800e68e <__sinit+0x56>
 800e640:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800e644:	6503      	str	r3, [r0, #80]	; 0x50
 800e646:	4b12      	ldr	r3, [pc, #72]	; (800e690 <__sinit+0x58>)
 800e648:	4a12      	ldr	r2, [pc, #72]	; (800e694 <__sinit+0x5c>)
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	6282      	str	r2, [r0, #40]	; 0x28
 800e64e:	4298      	cmp	r0, r3
 800e650:	bf04      	itt	eq
 800e652:	2301      	moveq	r3, #1
 800e654:	6183      	streq	r3, [r0, #24]
 800e656:	f000 f81f 	bl	800e698 <__sfp>
 800e65a:	6060      	str	r0, [r4, #4]
 800e65c:	4620      	mov	r0, r4
 800e65e:	f000 f81b 	bl	800e698 <__sfp>
 800e662:	60a0      	str	r0, [r4, #8]
 800e664:	4620      	mov	r0, r4
 800e666:	f000 f817 	bl	800e698 <__sfp>
 800e66a:	2200      	movs	r2, #0
 800e66c:	60e0      	str	r0, [r4, #12]
 800e66e:	2104      	movs	r1, #4
 800e670:	6860      	ldr	r0, [r4, #4]
 800e672:	f7ff ffa1 	bl	800e5b8 <std>
 800e676:	2201      	movs	r2, #1
 800e678:	2109      	movs	r1, #9
 800e67a:	68a0      	ldr	r0, [r4, #8]
 800e67c:	f7ff ff9c 	bl	800e5b8 <std>
 800e680:	2202      	movs	r2, #2
 800e682:	2112      	movs	r1, #18
 800e684:	68e0      	ldr	r0, [r4, #12]
 800e686:	f7ff ff97 	bl	800e5b8 <std>
 800e68a:	2301      	movs	r3, #1
 800e68c:	61a3      	str	r3, [r4, #24]
 800e68e:	bd10      	pop	{r4, pc}
 800e690:	08011654 	.word	0x08011654
 800e694:	0800e601 	.word	0x0800e601

0800e698 <__sfp>:
 800e698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e69a:	4b1b      	ldr	r3, [pc, #108]	; (800e708 <__sfp+0x70>)
 800e69c:	4607      	mov	r7, r0
 800e69e:	681e      	ldr	r6, [r3, #0]
 800e6a0:	69b3      	ldr	r3, [r6, #24]
 800e6a2:	b913      	cbnz	r3, 800e6aa <__sfp+0x12>
 800e6a4:	4630      	mov	r0, r6
 800e6a6:	f7ff ffc7 	bl	800e638 <__sinit>
 800e6aa:	3648      	adds	r6, #72	; 0x48
 800e6ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e6b0:	3b01      	subs	r3, #1
 800e6b2:	d503      	bpl.n	800e6bc <__sfp+0x24>
 800e6b4:	6833      	ldr	r3, [r6, #0]
 800e6b6:	b133      	cbz	r3, 800e6c6 <__sfp+0x2e>
 800e6b8:	6836      	ldr	r6, [r6, #0]
 800e6ba:	e7f7      	b.n	800e6ac <__sfp+0x14>
 800e6bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e6c0:	b16d      	cbz	r5, 800e6de <__sfp+0x46>
 800e6c2:	3468      	adds	r4, #104	; 0x68
 800e6c4:	e7f4      	b.n	800e6b0 <__sfp+0x18>
 800e6c6:	2104      	movs	r1, #4
 800e6c8:	4638      	mov	r0, r7
 800e6ca:	f7ff ff9f 	bl	800e60c <__sfmoreglue>
 800e6ce:	6030      	str	r0, [r6, #0]
 800e6d0:	2800      	cmp	r0, #0
 800e6d2:	d1f1      	bne.n	800e6b8 <__sfp+0x20>
 800e6d4:	230c      	movs	r3, #12
 800e6d6:	4604      	mov	r4, r0
 800e6d8:	603b      	str	r3, [r7, #0]
 800e6da:	4620      	mov	r0, r4
 800e6dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6de:	4b0b      	ldr	r3, [pc, #44]	; (800e70c <__sfp+0x74>)
 800e6e0:	6665      	str	r5, [r4, #100]	; 0x64
 800e6e2:	e9c4 5500 	strd	r5, r5, [r4]
 800e6e6:	60a5      	str	r5, [r4, #8]
 800e6e8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800e6ec:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800e6f0:	2208      	movs	r2, #8
 800e6f2:	4629      	mov	r1, r5
 800e6f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e6f8:	f7ff ff0a 	bl	800e510 <memset>
 800e6fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e700:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e704:	e7e9      	b.n	800e6da <__sfp+0x42>
 800e706:	bf00      	nop
 800e708:	08011654 	.word	0x08011654
 800e70c:	ffff0001 	.word	0xffff0001

0800e710 <_fwalk_reent>:
 800e710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e714:	4680      	mov	r8, r0
 800e716:	4689      	mov	r9, r1
 800e718:	2600      	movs	r6, #0
 800e71a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e71e:	b914      	cbnz	r4, 800e726 <_fwalk_reent+0x16>
 800e720:	4630      	mov	r0, r6
 800e722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e726:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800e72a:	3f01      	subs	r7, #1
 800e72c:	d501      	bpl.n	800e732 <_fwalk_reent+0x22>
 800e72e:	6824      	ldr	r4, [r4, #0]
 800e730:	e7f5      	b.n	800e71e <_fwalk_reent+0xe>
 800e732:	89ab      	ldrh	r3, [r5, #12]
 800e734:	2b01      	cmp	r3, #1
 800e736:	d907      	bls.n	800e748 <_fwalk_reent+0x38>
 800e738:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e73c:	3301      	adds	r3, #1
 800e73e:	d003      	beq.n	800e748 <_fwalk_reent+0x38>
 800e740:	4629      	mov	r1, r5
 800e742:	4640      	mov	r0, r8
 800e744:	47c8      	blx	r9
 800e746:	4306      	orrs	r6, r0
 800e748:	3568      	adds	r5, #104	; 0x68
 800e74a:	e7ee      	b.n	800e72a <_fwalk_reent+0x1a>

0800e74c <malloc>:
 800e74c:	4b02      	ldr	r3, [pc, #8]	; (800e758 <malloc+0xc>)
 800e74e:	4601      	mov	r1, r0
 800e750:	6818      	ldr	r0, [r3, #0]
 800e752:	f000 b84f 	b.w	800e7f4 <_malloc_r>
 800e756:	bf00      	nop
 800e758:	20000018 	.word	0x20000018

0800e75c <_free_r>:
 800e75c:	b538      	push	{r3, r4, r5, lr}
 800e75e:	4605      	mov	r5, r0
 800e760:	2900      	cmp	r1, #0
 800e762:	d043      	beq.n	800e7ec <_free_r+0x90>
 800e764:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e768:	1f0c      	subs	r4, r1, #4
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	bfb8      	it	lt
 800e76e:	18e4      	addlt	r4, r4, r3
 800e770:	f000 fdca 	bl	800f308 <__malloc_lock>
 800e774:	4a1e      	ldr	r2, [pc, #120]	; (800e7f0 <_free_r+0x94>)
 800e776:	6813      	ldr	r3, [r2, #0]
 800e778:	4610      	mov	r0, r2
 800e77a:	b933      	cbnz	r3, 800e78a <_free_r+0x2e>
 800e77c:	6063      	str	r3, [r4, #4]
 800e77e:	6014      	str	r4, [r2, #0]
 800e780:	4628      	mov	r0, r5
 800e782:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e786:	f000 bdc0 	b.w	800f30a <__malloc_unlock>
 800e78a:	42a3      	cmp	r3, r4
 800e78c:	d90b      	bls.n	800e7a6 <_free_r+0x4a>
 800e78e:	6821      	ldr	r1, [r4, #0]
 800e790:	1862      	adds	r2, r4, r1
 800e792:	4293      	cmp	r3, r2
 800e794:	bf01      	itttt	eq
 800e796:	681a      	ldreq	r2, [r3, #0]
 800e798:	685b      	ldreq	r3, [r3, #4]
 800e79a:	1852      	addeq	r2, r2, r1
 800e79c:	6022      	streq	r2, [r4, #0]
 800e79e:	6063      	str	r3, [r4, #4]
 800e7a0:	6004      	str	r4, [r0, #0]
 800e7a2:	e7ed      	b.n	800e780 <_free_r+0x24>
 800e7a4:	4613      	mov	r3, r2
 800e7a6:	685a      	ldr	r2, [r3, #4]
 800e7a8:	b10a      	cbz	r2, 800e7ae <_free_r+0x52>
 800e7aa:	42a2      	cmp	r2, r4
 800e7ac:	d9fa      	bls.n	800e7a4 <_free_r+0x48>
 800e7ae:	6819      	ldr	r1, [r3, #0]
 800e7b0:	1858      	adds	r0, r3, r1
 800e7b2:	42a0      	cmp	r0, r4
 800e7b4:	d10b      	bne.n	800e7ce <_free_r+0x72>
 800e7b6:	6820      	ldr	r0, [r4, #0]
 800e7b8:	4401      	add	r1, r0
 800e7ba:	1858      	adds	r0, r3, r1
 800e7bc:	4282      	cmp	r2, r0
 800e7be:	6019      	str	r1, [r3, #0]
 800e7c0:	d1de      	bne.n	800e780 <_free_r+0x24>
 800e7c2:	6810      	ldr	r0, [r2, #0]
 800e7c4:	6852      	ldr	r2, [r2, #4]
 800e7c6:	4401      	add	r1, r0
 800e7c8:	6019      	str	r1, [r3, #0]
 800e7ca:	605a      	str	r2, [r3, #4]
 800e7cc:	e7d8      	b.n	800e780 <_free_r+0x24>
 800e7ce:	d902      	bls.n	800e7d6 <_free_r+0x7a>
 800e7d0:	230c      	movs	r3, #12
 800e7d2:	602b      	str	r3, [r5, #0]
 800e7d4:	e7d4      	b.n	800e780 <_free_r+0x24>
 800e7d6:	6820      	ldr	r0, [r4, #0]
 800e7d8:	1821      	adds	r1, r4, r0
 800e7da:	428a      	cmp	r2, r1
 800e7dc:	bf01      	itttt	eq
 800e7de:	6811      	ldreq	r1, [r2, #0]
 800e7e0:	6852      	ldreq	r2, [r2, #4]
 800e7e2:	1809      	addeq	r1, r1, r0
 800e7e4:	6021      	streq	r1, [r4, #0]
 800e7e6:	6062      	str	r2, [r4, #4]
 800e7e8:	605c      	str	r4, [r3, #4]
 800e7ea:	e7c9      	b.n	800e780 <_free_r+0x24>
 800e7ec:	bd38      	pop	{r3, r4, r5, pc}
 800e7ee:	bf00      	nop
 800e7f0:	2000021c 	.word	0x2000021c

0800e7f4 <_malloc_r>:
 800e7f4:	b570      	push	{r4, r5, r6, lr}
 800e7f6:	1ccd      	adds	r5, r1, #3
 800e7f8:	f025 0503 	bic.w	r5, r5, #3
 800e7fc:	3508      	adds	r5, #8
 800e7fe:	2d0c      	cmp	r5, #12
 800e800:	bf38      	it	cc
 800e802:	250c      	movcc	r5, #12
 800e804:	2d00      	cmp	r5, #0
 800e806:	4606      	mov	r6, r0
 800e808:	db01      	blt.n	800e80e <_malloc_r+0x1a>
 800e80a:	42a9      	cmp	r1, r5
 800e80c:	d903      	bls.n	800e816 <_malloc_r+0x22>
 800e80e:	230c      	movs	r3, #12
 800e810:	6033      	str	r3, [r6, #0]
 800e812:	2000      	movs	r0, #0
 800e814:	bd70      	pop	{r4, r5, r6, pc}
 800e816:	f000 fd77 	bl	800f308 <__malloc_lock>
 800e81a:	4a21      	ldr	r2, [pc, #132]	; (800e8a0 <_malloc_r+0xac>)
 800e81c:	6814      	ldr	r4, [r2, #0]
 800e81e:	4621      	mov	r1, r4
 800e820:	b991      	cbnz	r1, 800e848 <_malloc_r+0x54>
 800e822:	4c20      	ldr	r4, [pc, #128]	; (800e8a4 <_malloc_r+0xb0>)
 800e824:	6823      	ldr	r3, [r4, #0]
 800e826:	b91b      	cbnz	r3, 800e830 <_malloc_r+0x3c>
 800e828:	4630      	mov	r0, r6
 800e82a:	f000 fb03 	bl	800ee34 <_sbrk_r>
 800e82e:	6020      	str	r0, [r4, #0]
 800e830:	4629      	mov	r1, r5
 800e832:	4630      	mov	r0, r6
 800e834:	f000 fafe 	bl	800ee34 <_sbrk_r>
 800e838:	1c43      	adds	r3, r0, #1
 800e83a:	d124      	bne.n	800e886 <_malloc_r+0x92>
 800e83c:	230c      	movs	r3, #12
 800e83e:	4630      	mov	r0, r6
 800e840:	6033      	str	r3, [r6, #0]
 800e842:	f000 fd62 	bl	800f30a <__malloc_unlock>
 800e846:	e7e4      	b.n	800e812 <_malloc_r+0x1e>
 800e848:	680b      	ldr	r3, [r1, #0]
 800e84a:	1b5b      	subs	r3, r3, r5
 800e84c:	d418      	bmi.n	800e880 <_malloc_r+0x8c>
 800e84e:	2b0b      	cmp	r3, #11
 800e850:	d90f      	bls.n	800e872 <_malloc_r+0x7e>
 800e852:	600b      	str	r3, [r1, #0]
 800e854:	18cc      	adds	r4, r1, r3
 800e856:	50cd      	str	r5, [r1, r3]
 800e858:	4630      	mov	r0, r6
 800e85a:	f000 fd56 	bl	800f30a <__malloc_unlock>
 800e85e:	f104 000b 	add.w	r0, r4, #11
 800e862:	1d23      	adds	r3, r4, #4
 800e864:	f020 0007 	bic.w	r0, r0, #7
 800e868:	1ac3      	subs	r3, r0, r3
 800e86a:	d0d3      	beq.n	800e814 <_malloc_r+0x20>
 800e86c:	425a      	negs	r2, r3
 800e86e:	50e2      	str	r2, [r4, r3]
 800e870:	e7d0      	b.n	800e814 <_malloc_r+0x20>
 800e872:	684b      	ldr	r3, [r1, #4]
 800e874:	428c      	cmp	r4, r1
 800e876:	bf16      	itet	ne
 800e878:	6063      	strne	r3, [r4, #4]
 800e87a:	6013      	streq	r3, [r2, #0]
 800e87c:	460c      	movne	r4, r1
 800e87e:	e7eb      	b.n	800e858 <_malloc_r+0x64>
 800e880:	460c      	mov	r4, r1
 800e882:	6849      	ldr	r1, [r1, #4]
 800e884:	e7cc      	b.n	800e820 <_malloc_r+0x2c>
 800e886:	1cc4      	adds	r4, r0, #3
 800e888:	f024 0403 	bic.w	r4, r4, #3
 800e88c:	42a0      	cmp	r0, r4
 800e88e:	d005      	beq.n	800e89c <_malloc_r+0xa8>
 800e890:	1a21      	subs	r1, r4, r0
 800e892:	4630      	mov	r0, r6
 800e894:	f000 face 	bl	800ee34 <_sbrk_r>
 800e898:	3001      	adds	r0, #1
 800e89a:	d0cf      	beq.n	800e83c <_malloc_r+0x48>
 800e89c:	6025      	str	r5, [r4, #0]
 800e89e:	e7db      	b.n	800e858 <_malloc_r+0x64>
 800e8a0:	2000021c 	.word	0x2000021c
 800e8a4:	20000220 	.word	0x20000220

0800e8a8 <__sfputc_r>:
 800e8a8:	6893      	ldr	r3, [r2, #8]
 800e8aa:	b410      	push	{r4}
 800e8ac:	3b01      	subs	r3, #1
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	6093      	str	r3, [r2, #8]
 800e8b2:	da07      	bge.n	800e8c4 <__sfputc_r+0x1c>
 800e8b4:	6994      	ldr	r4, [r2, #24]
 800e8b6:	42a3      	cmp	r3, r4
 800e8b8:	db01      	blt.n	800e8be <__sfputc_r+0x16>
 800e8ba:	290a      	cmp	r1, #10
 800e8bc:	d102      	bne.n	800e8c4 <__sfputc_r+0x1c>
 800e8be:	bc10      	pop	{r4}
 800e8c0:	f000 bb0c 	b.w	800eedc <__swbuf_r>
 800e8c4:	6813      	ldr	r3, [r2, #0]
 800e8c6:	1c58      	adds	r0, r3, #1
 800e8c8:	6010      	str	r0, [r2, #0]
 800e8ca:	7019      	strb	r1, [r3, #0]
 800e8cc:	4608      	mov	r0, r1
 800e8ce:	bc10      	pop	{r4}
 800e8d0:	4770      	bx	lr

0800e8d2 <__sfputs_r>:
 800e8d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8d4:	4606      	mov	r6, r0
 800e8d6:	460f      	mov	r7, r1
 800e8d8:	4614      	mov	r4, r2
 800e8da:	18d5      	adds	r5, r2, r3
 800e8dc:	42ac      	cmp	r4, r5
 800e8de:	d101      	bne.n	800e8e4 <__sfputs_r+0x12>
 800e8e0:	2000      	movs	r0, #0
 800e8e2:	e007      	b.n	800e8f4 <__sfputs_r+0x22>
 800e8e4:	463a      	mov	r2, r7
 800e8e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8ea:	4630      	mov	r0, r6
 800e8ec:	f7ff ffdc 	bl	800e8a8 <__sfputc_r>
 800e8f0:	1c43      	adds	r3, r0, #1
 800e8f2:	d1f3      	bne.n	800e8dc <__sfputs_r+0xa>
 800e8f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e8f8 <_vfiprintf_r>:
 800e8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8fc:	460c      	mov	r4, r1
 800e8fe:	b09d      	sub	sp, #116	; 0x74
 800e900:	4617      	mov	r7, r2
 800e902:	461d      	mov	r5, r3
 800e904:	4606      	mov	r6, r0
 800e906:	b118      	cbz	r0, 800e910 <_vfiprintf_r+0x18>
 800e908:	6983      	ldr	r3, [r0, #24]
 800e90a:	b90b      	cbnz	r3, 800e910 <_vfiprintf_r+0x18>
 800e90c:	f7ff fe94 	bl	800e638 <__sinit>
 800e910:	4b7c      	ldr	r3, [pc, #496]	; (800eb04 <_vfiprintf_r+0x20c>)
 800e912:	429c      	cmp	r4, r3
 800e914:	d158      	bne.n	800e9c8 <_vfiprintf_r+0xd0>
 800e916:	6874      	ldr	r4, [r6, #4]
 800e918:	89a3      	ldrh	r3, [r4, #12]
 800e91a:	0718      	lsls	r0, r3, #28
 800e91c:	d55e      	bpl.n	800e9dc <_vfiprintf_r+0xe4>
 800e91e:	6923      	ldr	r3, [r4, #16]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d05b      	beq.n	800e9dc <_vfiprintf_r+0xe4>
 800e924:	2300      	movs	r3, #0
 800e926:	9309      	str	r3, [sp, #36]	; 0x24
 800e928:	2320      	movs	r3, #32
 800e92a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e92e:	2330      	movs	r3, #48	; 0x30
 800e930:	f04f 0b01 	mov.w	fp, #1
 800e934:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e938:	9503      	str	r5, [sp, #12]
 800e93a:	46b8      	mov	r8, r7
 800e93c:	4645      	mov	r5, r8
 800e93e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e942:	b10b      	cbz	r3, 800e948 <_vfiprintf_r+0x50>
 800e944:	2b25      	cmp	r3, #37	; 0x25
 800e946:	d154      	bne.n	800e9f2 <_vfiprintf_r+0xfa>
 800e948:	ebb8 0a07 	subs.w	sl, r8, r7
 800e94c:	d00b      	beq.n	800e966 <_vfiprintf_r+0x6e>
 800e94e:	4653      	mov	r3, sl
 800e950:	463a      	mov	r2, r7
 800e952:	4621      	mov	r1, r4
 800e954:	4630      	mov	r0, r6
 800e956:	f7ff ffbc 	bl	800e8d2 <__sfputs_r>
 800e95a:	3001      	adds	r0, #1
 800e95c:	f000 80c2 	beq.w	800eae4 <_vfiprintf_r+0x1ec>
 800e960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e962:	4453      	add	r3, sl
 800e964:	9309      	str	r3, [sp, #36]	; 0x24
 800e966:	f898 3000 	ldrb.w	r3, [r8]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	f000 80ba 	beq.w	800eae4 <_vfiprintf_r+0x1ec>
 800e970:	2300      	movs	r3, #0
 800e972:	f04f 32ff 	mov.w	r2, #4294967295
 800e976:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e97a:	9304      	str	r3, [sp, #16]
 800e97c:	9307      	str	r3, [sp, #28]
 800e97e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e982:	931a      	str	r3, [sp, #104]	; 0x68
 800e984:	46a8      	mov	r8, r5
 800e986:	2205      	movs	r2, #5
 800e988:	f818 1b01 	ldrb.w	r1, [r8], #1
 800e98c:	485e      	ldr	r0, [pc, #376]	; (800eb08 <_vfiprintf_r+0x210>)
 800e98e:	f000 fcad 	bl	800f2ec <memchr>
 800e992:	9b04      	ldr	r3, [sp, #16]
 800e994:	bb78      	cbnz	r0, 800e9f6 <_vfiprintf_r+0xfe>
 800e996:	06d9      	lsls	r1, r3, #27
 800e998:	bf44      	itt	mi
 800e99a:	2220      	movmi	r2, #32
 800e99c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e9a0:	071a      	lsls	r2, r3, #28
 800e9a2:	bf44      	itt	mi
 800e9a4:	222b      	movmi	r2, #43	; 0x2b
 800e9a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e9aa:	782a      	ldrb	r2, [r5, #0]
 800e9ac:	2a2a      	cmp	r2, #42	; 0x2a
 800e9ae:	d02a      	beq.n	800ea06 <_vfiprintf_r+0x10e>
 800e9b0:	46a8      	mov	r8, r5
 800e9b2:	2000      	movs	r0, #0
 800e9b4:	250a      	movs	r5, #10
 800e9b6:	9a07      	ldr	r2, [sp, #28]
 800e9b8:	4641      	mov	r1, r8
 800e9ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e9be:	3b30      	subs	r3, #48	; 0x30
 800e9c0:	2b09      	cmp	r3, #9
 800e9c2:	d969      	bls.n	800ea98 <_vfiprintf_r+0x1a0>
 800e9c4:	b360      	cbz	r0, 800ea20 <_vfiprintf_r+0x128>
 800e9c6:	e024      	b.n	800ea12 <_vfiprintf_r+0x11a>
 800e9c8:	4b50      	ldr	r3, [pc, #320]	; (800eb0c <_vfiprintf_r+0x214>)
 800e9ca:	429c      	cmp	r4, r3
 800e9cc:	d101      	bne.n	800e9d2 <_vfiprintf_r+0xda>
 800e9ce:	68b4      	ldr	r4, [r6, #8]
 800e9d0:	e7a2      	b.n	800e918 <_vfiprintf_r+0x20>
 800e9d2:	4b4f      	ldr	r3, [pc, #316]	; (800eb10 <_vfiprintf_r+0x218>)
 800e9d4:	429c      	cmp	r4, r3
 800e9d6:	bf08      	it	eq
 800e9d8:	68f4      	ldreq	r4, [r6, #12]
 800e9da:	e79d      	b.n	800e918 <_vfiprintf_r+0x20>
 800e9dc:	4621      	mov	r1, r4
 800e9de:	4630      	mov	r0, r6
 800e9e0:	f000 fae0 	bl	800efa4 <__swsetup_r>
 800e9e4:	2800      	cmp	r0, #0
 800e9e6:	d09d      	beq.n	800e924 <_vfiprintf_r+0x2c>
 800e9e8:	f04f 30ff 	mov.w	r0, #4294967295
 800e9ec:	b01d      	add	sp, #116	; 0x74
 800e9ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9f2:	46a8      	mov	r8, r5
 800e9f4:	e7a2      	b.n	800e93c <_vfiprintf_r+0x44>
 800e9f6:	4a44      	ldr	r2, [pc, #272]	; (800eb08 <_vfiprintf_r+0x210>)
 800e9f8:	4645      	mov	r5, r8
 800e9fa:	1a80      	subs	r0, r0, r2
 800e9fc:	fa0b f000 	lsl.w	r0, fp, r0
 800ea00:	4318      	orrs	r0, r3
 800ea02:	9004      	str	r0, [sp, #16]
 800ea04:	e7be      	b.n	800e984 <_vfiprintf_r+0x8c>
 800ea06:	9a03      	ldr	r2, [sp, #12]
 800ea08:	1d11      	adds	r1, r2, #4
 800ea0a:	6812      	ldr	r2, [r2, #0]
 800ea0c:	9103      	str	r1, [sp, #12]
 800ea0e:	2a00      	cmp	r2, #0
 800ea10:	db01      	blt.n	800ea16 <_vfiprintf_r+0x11e>
 800ea12:	9207      	str	r2, [sp, #28]
 800ea14:	e004      	b.n	800ea20 <_vfiprintf_r+0x128>
 800ea16:	4252      	negs	r2, r2
 800ea18:	f043 0302 	orr.w	r3, r3, #2
 800ea1c:	9207      	str	r2, [sp, #28]
 800ea1e:	9304      	str	r3, [sp, #16]
 800ea20:	f898 3000 	ldrb.w	r3, [r8]
 800ea24:	2b2e      	cmp	r3, #46	; 0x2e
 800ea26:	d10e      	bne.n	800ea46 <_vfiprintf_r+0x14e>
 800ea28:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ea2c:	2b2a      	cmp	r3, #42	; 0x2a
 800ea2e:	d138      	bne.n	800eaa2 <_vfiprintf_r+0x1aa>
 800ea30:	9b03      	ldr	r3, [sp, #12]
 800ea32:	f108 0802 	add.w	r8, r8, #2
 800ea36:	1d1a      	adds	r2, r3, #4
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	9203      	str	r2, [sp, #12]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	bfb8      	it	lt
 800ea40:	f04f 33ff 	movlt.w	r3, #4294967295
 800ea44:	9305      	str	r3, [sp, #20]
 800ea46:	4d33      	ldr	r5, [pc, #204]	; (800eb14 <_vfiprintf_r+0x21c>)
 800ea48:	2203      	movs	r2, #3
 800ea4a:	f898 1000 	ldrb.w	r1, [r8]
 800ea4e:	4628      	mov	r0, r5
 800ea50:	f000 fc4c 	bl	800f2ec <memchr>
 800ea54:	b140      	cbz	r0, 800ea68 <_vfiprintf_r+0x170>
 800ea56:	2340      	movs	r3, #64	; 0x40
 800ea58:	1b40      	subs	r0, r0, r5
 800ea5a:	fa03 f000 	lsl.w	r0, r3, r0
 800ea5e:	9b04      	ldr	r3, [sp, #16]
 800ea60:	f108 0801 	add.w	r8, r8, #1
 800ea64:	4303      	orrs	r3, r0
 800ea66:	9304      	str	r3, [sp, #16]
 800ea68:	f898 1000 	ldrb.w	r1, [r8]
 800ea6c:	2206      	movs	r2, #6
 800ea6e:	482a      	ldr	r0, [pc, #168]	; (800eb18 <_vfiprintf_r+0x220>)
 800ea70:	f108 0701 	add.w	r7, r8, #1
 800ea74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ea78:	f000 fc38 	bl	800f2ec <memchr>
 800ea7c:	2800      	cmp	r0, #0
 800ea7e:	d037      	beq.n	800eaf0 <_vfiprintf_r+0x1f8>
 800ea80:	4b26      	ldr	r3, [pc, #152]	; (800eb1c <_vfiprintf_r+0x224>)
 800ea82:	bb1b      	cbnz	r3, 800eacc <_vfiprintf_r+0x1d4>
 800ea84:	9b03      	ldr	r3, [sp, #12]
 800ea86:	3307      	adds	r3, #7
 800ea88:	f023 0307 	bic.w	r3, r3, #7
 800ea8c:	3308      	adds	r3, #8
 800ea8e:	9303      	str	r3, [sp, #12]
 800ea90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea92:	444b      	add	r3, r9
 800ea94:	9309      	str	r3, [sp, #36]	; 0x24
 800ea96:	e750      	b.n	800e93a <_vfiprintf_r+0x42>
 800ea98:	fb05 3202 	mla	r2, r5, r2, r3
 800ea9c:	2001      	movs	r0, #1
 800ea9e:	4688      	mov	r8, r1
 800eaa0:	e78a      	b.n	800e9b8 <_vfiprintf_r+0xc0>
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	250a      	movs	r5, #10
 800eaa6:	4619      	mov	r1, r3
 800eaa8:	f108 0801 	add.w	r8, r8, #1
 800eaac:	9305      	str	r3, [sp, #20]
 800eaae:	4640      	mov	r0, r8
 800eab0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eab4:	3a30      	subs	r2, #48	; 0x30
 800eab6:	2a09      	cmp	r2, #9
 800eab8:	d903      	bls.n	800eac2 <_vfiprintf_r+0x1ca>
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d0c3      	beq.n	800ea46 <_vfiprintf_r+0x14e>
 800eabe:	9105      	str	r1, [sp, #20]
 800eac0:	e7c1      	b.n	800ea46 <_vfiprintf_r+0x14e>
 800eac2:	fb05 2101 	mla	r1, r5, r1, r2
 800eac6:	2301      	movs	r3, #1
 800eac8:	4680      	mov	r8, r0
 800eaca:	e7f0      	b.n	800eaae <_vfiprintf_r+0x1b6>
 800eacc:	ab03      	add	r3, sp, #12
 800eace:	9300      	str	r3, [sp, #0]
 800ead0:	4622      	mov	r2, r4
 800ead2:	4b13      	ldr	r3, [pc, #76]	; (800eb20 <_vfiprintf_r+0x228>)
 800ead4:	a904      	add	r1, sp, #16
 800ead6:	4630      	mov	r0, r6
 800ead8:	f3af 8000 	nop.w
 800eadc:	f1b0 3fff 	cmp.w	r0, #4294967295
 800eae0:	4681      	mov	r9, r0
 800eae2:	d1d5      	bne.n	800ea90 <_vfiprintf_r+0x198>
 800eae4:	89a3      	ldrh	r3, [r4, #12]
 800eae6:	065b      	lsls	r3, r3, #25
 800eae8:	f53f af7e 	bmi.w	800e9e8 <_vfiprintf_r+0xf0>
 800eaec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eaee:	e77d      	b.n	800e9ec <_vfiprintf_r+0xf4>
 800eaf0:	ab03      	add	r3, sp, #12
 800eaf2:	9300      	str	r3, [sp, #0]
 800eaf4:	4622      	mov	r2, r4
 800eaf6:	4b0a      	ldr	r3, [pc, #40]	; (800eb20 <_vfiprintf_r+0x228>)
 800eaf8:	a904      	add	r1, sp, #16
 800eafa:	4630      	mov	r0, r6
 800eafc:	f000 f888 	bl	800ec10 <_printf_i>
 800eb00:	e7ec      	b.n	800eadc <_vfiprintf_r+0x1e4>
 800eb02:	bf00      	nop
 800eb04:	08011678 	.word	0x08011678
 800eb08:	080116b8 	.word	0x080116b8
 800eb0c:	08011698 	.word	0x08011698
 800eb10:	08011658 	.word	0x08011658
 800eb14:	080116be 	.word	0x080116be
 800eb18:	080116c2 	.word	0x080116c2
 800eb1c:	00000000 	.word	0x00000000
 800eb20:	0800e8d3 	.word	0x0800e8d3

0800eb24 <_printf_common>:
 800eb24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb28:	4691      	mov	r9, r2
 800eb2a:	461f      	mov	r7, r3
 800eb2c:	688a      	ldr	r2, [r1, #8]
 800eb2e:	690b      	ldr	r3, [r1, #16]
 800eb30:	4606      	mov	r6, r0
 800eb32:	4293      	cmp	r3, r2
 800eb34:	bfb8      	it	lt
 800eb36:	4613      	movlt	r3, r2
 800eb38:	f8c9 3000 	str.w	r3, [r9]
 800eb3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eb40:	460c      	mov	r4, r1
 800eb42:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eb46:	b112      	cbz	r2, 800eb4e <_printf_common+0x2a>
 800eb48:	3301      	adds	r3, #1
 800eb4a:	f8c9 3000 	str.w	r3, [r9]
 800eb4e:	6823      	ldr	r3, [r4, #0]
 800eb50:	0699      	lsls	r1, r3, #26
 800eb52:	bf42      	ittt	mi
 800eb54:	f8d9 3000 	ldrmi.w	r3, [r9]
 800eb58:	3302      	addmi	r3, #2
 800eb5a:	f8c9 3000 	strmi.w	r3, [r9]
 800eb5e:	6825      	ldr	r5, [r4, #0]
 800eb60:	f015 0506 	ands.w	r5, r5, #6
 800eb64:	d107      	bne.n	800eb76 <_printf_common+0x52>
 800eb66:	f104 0a19 	add.w	sl, r4, #25
 800eb6a:	68e3      	ldr	r3, [r4, #12]
 800eb6c:	f8d9 2000 	ldr.w	r2, [r9]
 800eb70:	1a9b      	subs	r3, r3, r2
 800eb72:	42ab      	cmp	r3, r5
 800eb74:	dc29      	bgt.n	800ebca <_printf_common+0xa6>
 800eb76:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800eb7a:	6822      	ldr	r2, [r4, #0]
 800eb7c:	3300      	adds	r3, #0
 800eb7e:	bf18      	it	ne
 800eb80:	2301      	movne	r3, #1
 800eb82:	0692      	lsls	r2, r2, #26
 800eb84:	d42e      	bmi.n	800ebe4 <_printf_common+0xc0>
 800eb86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eb8a:	4639      	mov	r1, r7
 800eb8c:	4630      	mov	r0, r6
 800eb8e:	47c0      	blx	r8
 800eb90:	3001      	adds	r0, #1
 800eb92:	d021      	beq.n	800ebd8 <_printf_common+0xb4>
 800eb94:	6823      	ldr	r3, [r4, #0]
 800eb96:	68e5      	ldr	r5, [r4, #12]
 800eb98:	f003 0306 	and.w	r3, r3, #6
 800eb9c:	2b04      	cmp	r3, #4
 800eb9e:	bf18      	it	ne
 800eba0:	2500      	movne	r5, #0
 800eba2:	f8d9 2000 	ldr.w	r2, [r9]
 800eba6:	f04f 0900 	mov.w	r9, #0
 800ebaa:	bf08      	it	eq
 800ebac:	1aad      	subeq	r5, r5, r2
 800ebae:	68a3      	ldr	r3, [r4, #8]
 800ebb0:	6922      	ldr	r2, [r4, #16]
 800ebb2:	bf08      	it	eq
 800ebb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ebb8:	4293      	cmp	r3, r2
 800ebba:	bfc4      	itt	gt
 800ebbc:	1a9b      	subgt	r3, r3, r2
 800ebbe:	18ed      	addgt	r5, r5, r3
 800ebc0:	341a      	adds	r4, #26
 800ebc2:	454d      	cmp	r5, r9
 800ebc4:	d11a      	bne.n	800ebfc <_printf_common+0xd8>
 800ebc6:	2000      	movs	r0, #0
 800ebc8:	e008      	b.n	800ebdc <_printf_common+0xb8>
 800ebca:	2301      	movs	r3, #1
 800ebcc:	4652      	mov	r2, sl
 800ebce:	4639      	mov	r1, r7
 800ebd0:	4630      	mov	r0, r6
 800ebd2:	47c0      	blx	r8
 800ebd4:	3001      	adds	r0, #1
 800ebd6:	d103      	bne.n	800ebe0 <_printf_common+0xbc>
 800ebd8:	f04f 30ff 	mov.w	r0, #4294967295
 800ebdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebe0:	3501      	adds	r5, #1
 800ebe2:	e7c2      	b.n	800eb6a <_printf_common+0x46>
 800ebe4:	2030      	movs	r0, #48	; 0x30
 800ebe6:	18e1      	adds	r1, r4, r3
 800ebe8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ebec:	1c5a      	adds	r2, r3, #1
 800ebee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ebf2:	4422      	add	r2, r4
 800ebf4:	3302      	adds	r3, #2
 800ebf6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ebfa:	e7c4      	b.n	800eb86 <_printf_common+0x62>
 800ebfc:	2301      	movs	r3, #1
 800ebfe:	4622      	mov	r2, r4
 800ec00:	4639      	mov	r1, r7
 800ec02:	4630      	mov	r0, r6
 800ec04:	47c0      	blx	r8
 800ec06:	3001      	adds	r0, #1
 800ec08:	d0e6      	beq.n	800ebd8 <_printf_common+0xb4>
 800ec0a:	f109 0901 	add.w	r9, r9, #1
 800ec0e:	e7d8      	b.n	800ebc2 <_printf_common+0x9e>

0800ec10 <_printf_i>:
 800ec10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ec14:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800ec18:	460c      	mov	r4, r1
 800ec1a:	7e09      	ldrb	r1, [r1, #24]
 800ec1c:	b085      	sub	sp, #20
 800ec1e:	296e      	cmp	r1, #110	; 0x6e
 800ec20:	4617      	mov	r7, r2
 800ec22:	4606      	mov	r6, r0
 800ec24:	4698      	mov	r8, r3
 800ec26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ec28:	f000 80b3 	beq.w	800ed92 <_printf_i+0x182>
 800ec2c:	d822      	bhi.n	800ec74 <_printf_i+0x64>
 800ec2e:	2963      	cmp	r1, #99	; 0x63
 800ec30:	d036      	beq.n	800eca0 <_printf_i+0x90>
 800ec32:	d80a      	bhi.n	800ec4a <_printf_i+0x3a>
 800ec34:	2900      	cmp	r1, #0
 800ec36:	f000 80b9 	beq.w	800edac <_printf_i+0x19c>
 800ec3a:	2958      	cmp	r1, #88	; 0x58
 800ec3c:	f000 8083 	beq.w	800ed46 <_printf_i+0x136>
 800ec40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ec44:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ec48:	e032      	b.n	800ecb0 <_printf_i+0xa0>
 800ec4a:	2964      	cmp	r1, #100	; 0x64
 800ec4c:	d001      	beq.n	800ec52 <_printf_i+0x42>
 800ec4e:	2969      	cmp	r1, #105	; 0x69
 800ec50:	d1f6      	bne.n	800ec40 <_printf_i+0x30>
 800ec52:	6820      	ldr	r0, [r4, #0]
 800ec54:	6813      	ldr	r3, [r2, #0]
 800ec56:	0605      	lsls	r5, r0, #24
 800ec58:	f103 0104 	add.w	r1, r3, #4
 800ec5c:	d52a      	bpl.n	800ecb4 <_printf_i+0xa4>
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	6011      	str	r1, [r2, #0]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	da03      	bge.n	800ec6e <_printf_i+0x5e>
 800ec66:	222d      	movs	r2, #45	; 0x2d
 800ec68:	425b      	negs	r3, r3
 800ec6a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ec6e:	486f      	ldr	r0, [pc, #444]	; (800ee2c <_printf_i+0x21c>)
 800ec70:	220a      	movs	r2, #10
 800ec72:	e039      	b.n	800ece8 <_printf_i+0xd8>
 800ec74:	2973      	cmp	r1, #115	; 0x73
 800ec76:	f000 809d 	beq.w	800edb4 <_printf_i+0x1a4>
 800ec7a:	d808      	bhi.n	800ec8e <_printf_i+0x7e>
 800ec7c:	296f      	cmp	r1, #111	; 0x6f
 800ec7e:	d020      	beq.n	800ecc2 <_printf_i+0xb2>
 800ec80:	2970      	cmp	r1, #112	; 0x70
 800ec82:	d1dd      	bne.n	800ec40 <_printf_i+0x30>
 800ec84:	6823      	ldr	r3, [r4, #0]
 800ec86:	f043 0320 	orr.w	r3, r3, #32
 800ec8a:	6023      	str	r3, [r4, #0]
 800ec8c:	e003      	b.n	800ec96 <_printf_i+0x86>
 800ec8e:	2975      	cmp	r1, #117	; 0x75
 800ec90:	d017      	beq.n	800ecc2 <_printf_i+0xb2>
 800ec92:	2978      	cmp	r1, #120	; 0x78
 800ec94:	d1d4      	bne.n	800ec40 <_printf_i+0x30>
 800ec96:	2378      	movs	r3, #120	; 0x78
 800ec98:	4865      	ldr	r0, [pc, #404]	; (800ee30 <_printf_i+0x220>)
 800ec9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ec9e:	e055      	b.n	800ed4c <_printf_i+0x13c>
 800eca0:	6813      	ldr	r3, [r2, #0]
 800eca2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eca6:	1d19      	adds	r1, r3, #4
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	6011      	str	r1, [r2, #0]
 800ecac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ecb0:	2301      	movs	r3, #1
 800ecb2:	e08c      	b.n	800edce <_printf_i+0x1be>
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ecba:	6011      	str	r1, [r2, #0]
 800ecbc:	bf18      	it	ne
 800ecbe:	b21b      	sxthne	r3, r3
 800ecc0:	e7cf      	b.n	800ec62 <_printf_i+0x52>
 800ecc2:	6813      	ldr	r3, [r2, #0]
 800ecc4:	6825      	ldr	r5, [r4, #0]
 800ecc6:	1d18      	adds	r0, r3, #4
 800ecc8:	6010      	str	r0, [r2, #0]
 800ecca:	0628      	lsls	r0, r5, #24
 800eccc:	d501      	bpl.n	800ecd2 <_printf_i+0xc2>
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	e002      	b.n	800ecd8 <_printf_i+0xc8>
 800ecd2:	0668      	lsls	r0, r5, #25
 800ecd4:	d5fb      	bpl.n	800ecce <_printf_i+0xbe>
 800ecd6:	881b      	ldrh	r3, [r3, #0]
 800ecd8:	296f      	cmp	r1, #111	; 0x6f
 800ecda:	bf14      	ite	ne
 800ecdc:	220a      	movne	r2, #10
 800ecde:	2208      	moveq	r2, #8
 800ece0:	4852      	ldr	r0, [pc, #328]	; (800ee2c <_printf_i+0x21c>)
 800ece2:	2100      	movs	r1, #0
 800ece4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ece8:	6865      	ldr	r5, [r4, #4]
 800ecea:	2d00      	cmp	r5, #0
 800ecec:	60a5      	str	r5, [r4, #8]
 800ecee:	f2c0 8095 	blt.w	800ee1c <_printf_i+0x20c>
 800ecf2:	6821      	ldr	r1, [r4, #0]
 800ecf4:	f021 0104 	bic.w	r1, r1, #4
 800ecf8:	6021      	str	r1, [r4, #0]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d13d      	bne.n	800ed7a <_printf_i+0x16a>
 800ecfe:	2d00      	cmp	r5, #0
 800ed00:	f040 808e 	bne.w	800ee20 <_printf_i+0x210>
 800ed04:	4665      	mov	r5, ip
 800ed06:	2a08      	cmp	r2, #8
 800ed08:	d10b      	bne.n	800ed22 <_printf_i+0x112>
 800ed0a:	6823      	ldr	r3, [r4, #0]
 800ed0c:	07db      	lsls	r3, r3, #31
 800ed0e:	d508      	bpl.n	800ed22 <_printf_i+0x112>
 800ed10:	6923      	ldr	r3, [r4, #16]
 800ed12:	6862      	ldr	r2, [r4, #4]
 800ed14:	429a      	cmp	r2, r3
 800ed16:	bfde      	ittt	le
 800ed18:	2330      	movle	r3, #48	; 0x30
 800ed1a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ed1e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ed22:	ebac 0305 	sub.w	r3, ip, r5
 800ed26:	6123      	str	r3, [r4, #16]
 800ed28:	f8cd 8000 	str.w	r8, [sp]
 800ed2c:	463b      	mov	r3, r7
 800ed2e:	aa03      	add	r2, sp, #12
 800ed30:	4621      	mov	r1, r4
 800ed32:	4630      	mov	r0, r6
 800ed34:	f7ff fef6 	bl	800eb24 <_printf_common>
 800ed38:	3001      	adds	r0, #1
 800ed3a:	d14d      	bne.n	800edd8 <_printf_i+0x1c8>
 800ed3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ed40:	b005      	add	sp, #20
 800ed42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed46:	4839      	ldr	r0, [pc, #228]	; (800ee2c <_printf_i+0x21c>)
 800ed48:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800ed4c:	6813      	ldr	r3, [r2, #0]
 800ed4e:	6821      	ldr	r1, [r4, #0]
 800ed50:	1d1d      	adds	r5, r3, #4
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	6015      	str	r5, [r2, #0]
 800ed56:	060a      	lsls	r2, r1, #24
 800ed58:	d50b      	bpl.n	800ed72 <_printf_i+0x162>
 800ed5a:	07ca      	lsls	r2, r1, #31
 800ed5c:	bf44      	itt	mi
 800ed5e:	f041 0120 	orrmi.w	r1, r1, #32
 800ed62:	6021      	strmi	r1, [r4, #0]
 800ed64:	b91b      	cbnz	r3, 800ed6e <_printf_i+0x15e>
 800ed66:	6822      	ldr	r2, [r4, #0]
 800ed68:	f022 0220 	bic.w	r2, r2, #32
 800ed6c:	6022      	str	r2, [r4, #0]
 800ed6e:	2210      	movs	r2, #16
 800ed70:	e7b7      	b.n	800ece2 <_printf_i+0xd2>
 800ed72:	064d      	lsls	r5, r1, #25
 800ed74:	bf48      	it	mi
 800ed76:	b29b      	uxthmi	r3, r3
 800ed78:	e7ef      	b.n	800ed5a <_printf_i+0x14a>
 800ed7a:	4665      	mov	r5, ip
 800ed7c:	fbb3 f1f2 	udiv	r1, r3, r2
 800ed80:	fb02 3311 	mls	r3, r2, r1, r3
 800ed84:	5cc3      	ldrb	r3, [r0, r3]
 800ed86:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ed8a:	460b      	mov	r3, r1
 800ed8c:	2900      	cmp	r1, #0
 800ed8e:	d1f5      	bne.n	800ed7c <_printf_i+0x16c>
 800ed90:	e7b9      	b.n	800ed06 <_printf_i+0xf6>
 800ed92:	6813      	ldr	r3, [r2, #0]
 800ed94:	6825      	ldr	r5, [r4, #0]
 800ed96:	1d18      	adds	r0, r3, #4
 800ed98:	6961      	ldr	r1, [r4, #20]
 800ed9a:	6010      	str	r0, [r2, #0]
 800ed9c:	0628      	lsls	r0, r5, #24
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	d501      	bpl.n	800eda6 <_printf_i+0x196>
 800eda2:	6019      	str	r1, [r3, #0]
 800eda4:	e002      	b.n	800edac <_printf_i+0x19c>
 800eda6:	066a      	lsls	r2, r5, #25
 800eda8:	d5fb      	bpl.n	800eda2 <_printf_i+0x192>
 800edaa:	8019      	strh	r1, [r3, #0]
 800edac:	2300      	movs	r3, #0
 800edae:	4665      	mov	r5, ip
 800edb0:	6123      	str	r3, [r4, #16]
 800edb2:	e7b9      	b.n	800ed28 <_printf_i+0x118>
 800edb4:	6813      	ldr	r3, [r2, #0]
 800edb6:	1d19      	adds	r1, r3, #4
 800edb8:	6011      	str	r1, [r2, #0]
 800edba:	681d      	ldr	r5, [r3, #0]
 800edbc:	6862      	ldr	r2, [r4, #4]
 800edbe:	2100      	movs	r1, #0
 800edc0:	4628      	mov	r0, r5
 800edc2:	f000 fa93 	bl	800f2ec <memchr>
 800edc6:	b108      	cbz	r0, 800edcc <_printf_i+0x1bc>
 800edc8:	1b40      	subs	r0, r0, r5
 800edca:	6060      	str	r0, [r4, #4]
 800edcc:	6863      	ldr	r3, [r4, #4]
 800edce:	6123      	str	r3, [r4, #16]
 800edd0:	2300      	movs	r3, #0
 800edd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800edd6:	e7a7      	b.n	800ed28 <_printf_i+0x118>
 800edd8:	6923      	ldr	r3, [r4, #16]
 800edda:	462a      	mov	r2, r5
 800eddc:	4639      	mov	r1, r7
 800edde:	4630      	mov	r0, r6
 800ede0:	47c0      	blx	r8
 800ede2:	3001      	adds	r0, #1
 800ede4:	d0aa      	beq.n	800ed3c <_printf_i+0x12c>
 800ede6:	6823      	ldr	r3, [r4, #0]
 800ede8:	079b      	lsls	r3, r3, #30
 800edea:	d413      	bmi.n	800ee14 <_printf_i+0x204>
 800edec:	68e0      	ldr	r0, [r4, #12]
 800edee:	9b03      	ldr	r3, [sp, #12]
 800edf0:	4298      	cmp	r0, r3
 800edf2:	bfb8      	it	lt
 800edf4:	4618      	movlt	r0, r3
 800edf6:	e7a3      	b.n	800ed40 <_printf_i+0x130>
 800edf8:	2301      	movs	r3, #1
 800edfa:	464a      	mov	r2, r9
 800edfc:	4639      	mov	r1, r7
 800edfe:	4630      	mov	r0, r6
 800ee00:	47c0      	blx	r8
 800ee02:	3001      	adds	r0, #1
 800ee04:	d09a      	beq.n	800ed3c <_printf_i+0x12c>
 800ee06:	3501      	adds	r5, #1
 800ee08:	68e3      	ldr	r3, [r4, #12]
 800ee0a:	9a03      	ldr	r2, [sp, #12]
 800ee0c:	1a9b      	subs	r3, r3, r2
 800ee0e:	42ab      	cmp	r3, r5
 800ee10:	dcf2      	bgt.n	800edf8 <_printf_i+0x1e8>
 800ee12:	e7eb      	b.n	800edec <_printf_i+0x1dc>
 800ee14:	2500      	movs	r5, #0
 800ee16:	f104 0919 	add.w	r9, r4, #25
 800ee1a:	e7f5      	b.n	800ee08 <_printf_i+0x1f8>
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d1ac      	bne.n	800ed7a <_printf_i+0x16a>
 800ee20:	7803      	ldrb	r3, [r0, #0]
 800ee22:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ee26:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ee2a:	e76c      	b.n	800ed06 <_printf_i+0xf6>
 800ee2c:	080116c9 	.word	0x080116c9
 800ee30:	080116da 	.word	0x080116da

0800ee34 <_sbrk_r>:
 800ee34:	b538      	push	{r3, r4, r5, lr}
 800ee36:	2300      	movs	r3, #0
 800ee38:	4c05      	ldr	r4, [pc, #20]	; (800ee50 <_sbrk_r+0x1c>)
 800ee3a:	4605      	mov	r5, r0
 800ee3c:	4608      	mov	r0, r1
 800ee3e:	6023      	str	r3, [r4, #0]
 800ee40:	f7f1 fd54 	bl	80008ec <_sbrk>
 800ee44:	1c43      	adds	r3, r0, #1
 800ee46:	d102      	bne.n	800ee4e <_sbrk_r+0x1a>
 800ee48:	6823      	ldr	r3, [r4, #0]
 800ee4a:	b103      	cbz	r3, 800ee4e <_sbrk_r+0x1a>
 800ee4c:	602b      	str	r3, [r5, #0]
 800ee4e:	bd38      	pop	{r3, r4, r5, pc}
 800ee50:	20006928 	.word	0x20006928

0800ee54 <__sread>:
 800ee54:	b510      	push	{r4, lr}
 800ee56:	460c      	mov	r4, r1
 800ee58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee5c:	f000 fa56 	bl	800f30c <_read_r>
 800ee60:	2800      	cmp	r0, #0
 800ee62:	bfab      	itete	ge
 800ee64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ee66:	89a3      	ldrhlt	r3, [r4, #12]
 800ee68:	181b      	addge	r3, r3, r0
 800ee6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ee6e:	bfac      	ite	ge
 800ee70:	6563      	strge	r3, [r4, #84]	; 0x54
 800ee72:	81a3      	strhlt	r3, [r4, #12]
 800ee74:	bd10      	pop	{r4, pc}

0800ee76 <__swrite>:
 800ee76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee7a:	461f      	mov	r7, r3
 800ee7c:	898b      	ldrh	r3, [r1, #12]
 800ee7e:	4605      	mov	r5, r0
 800ee80:	05db      	lsls	r3, r3, #23
 800ee82:	460c      	mov	r4, r1
 800ee84:	4616      	mov	r6, r2
 800ee86:	d505      	bpl.n	800ee94 <__swrite+0x1e>
 800ee88:	2302      	movs	r3, #2
 800ee8a:	2200      	movs	r2, #0
 800ee8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee90:	f000 f9b6 	bl	800f200 <_lseek_r>
 800ee94:	89a3      	ldrh	r3, [r4, #12]
 800ee96:	4632      	mov	r2, r6
 800ee98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ee9c:	81a3      	strh	r3, [r4, #12]
 800ee9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eea2:	463b      	mov	r3, r7
 800eea4:	4628      	mov	r0, r5
 800eea6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eeaa:	f000 b869 	b.w	800ef80 <_write_r>

0800eeae <__sseek>:
 800eeae:	b510      	push	{r4, lr}
 800eeb0:	460c      	mov	r4, r1
 800eeb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eeb6:	f000 f9a3 	bl	800f200 <_lseek_r>
 800eeba:	1c43      	adds	r3, r0, #1
 800eebc:	89a3      	ldrh	r3, [r4, #12]
 800eebe:	bf15      	itete	ne
 800eec0:	6560      	strne	r0, [r4, #84]	; 0x54
 800eec2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800eec6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800eeca:	81a3      	strheq	r3, [r4, #12]
 800eecc:	bf18      	it	ne
 800eece:	81a3      	strhne	r3, [r4, #12]
 800eed0:	bd10      	pop	{r4, pc}

0800eed2 <__sclose>:
 800eed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eed6:	f000 b8d3 	b.w	800f080 <_close_r>
	...

0800eedc <__swbuf_r>:
 800eedc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eede:	460e      	mov	r6, r1
 800eee0:	4614      	mov	r4, r2
 800eee2:	4605      	mov	r5, r0
 800eee4:	b118      	cbz	r0, 800eeee <__swbuf_r+0x12>
 800eee6:	6983      	ldr	r3, [r0, #24]
 800eee8:	b90b      	cbnz	r3, 800eeee <__swbuf_r+0x12>
 800eeea:	f7ff fba5 	bl	800e638 <__sinit>
 800eeee:	4b21      	ldr	r3, [pc, #132]	; (800ef74 <__swbuf_r+0x98>)
 800eef0:	429c      	cmp	r4, r3
 800eef2:	d12a      	bne.n	800ef4a <__swbuf_r+0x6e>
 800eef4:	686c      	ldr	r4, [r5, #4]
 800eef6:	69a3      	ldr	r3, [r4, #24]
 800eef8:	60a3      	str	r3, [r4, #8]
 800eefa:	89a3      	ldrh	r3, [r4, #12]
 800eefc:	071a      	lsls	r2, r3, #28
 800eefe:	d52e      	bpl.n	800ef5e <__swbuf_r+0x82>
 800ef00:	6923      	ldr	r3, [r4, #16]
 800ef02:	b363      	cbz	r3, 800ef5e <__swbuf_r+0x82>
 800ef04:	6923      	ldr	r3, [r4, #16]
 800ef06:	6820      	ldr	r0, [r4, #0]
 800ef08:	b2f6      	uxtb	r6, r6
 800ef0a:	1ac0      	subs	r0, r0, r3
 800ef0c:	6963      	ldr	r3, [r4, #20]
 800ef0e:	4637      	mov	r7, r6
 800ef10:	4283      	cmp	r3, r0
 800ef12:	dc04      	bgt.n	800ef1e <__swbuf_r+0x42>
 800ef14:	4621      	mov	r1, r4
 800ef16:	4628      	mov	r0, r5
 800ef18:	f000 f948 	bl	800f1ac <_fflush_r>
 800ef1c:	bb28      	cbnz	r0, 800ef6a <__swbuf_r+0x8e>
 800ef1e:	68a3      	ldr	r3, [r4, #8]
 800ef20:	3001      	adds	r0, #1
 800ef22:	3b01      	subs	r3, #1
 800ef24:	60a3      	str	r3, [r4, #8]
 800ef26:	6823      	ldr	r3, [r4, #0]
 800ef28:	1c5a      	adds	r2, r3, #1
 800ef2a:	6022      	str	r2, [r4, #0]
 800ef2c:	701e      	strb	r6, [r3, #0]
 800ef2e:	6963      	ldr	r3, [r4, #20]
 800ef30:	4283      	cmp	r3, r0
 800ef32:	d004      	beq.n	800ef3e <__swbuf_r+0x62>
 800ef34:	89a3      	ldrh	r3, [r4, #12]
 800ef36:	07db      	lsls	r3, r3, #31
 800ef38:	d519      	bpl.n	800ef6e <__swbuf_r+0x92>
 800ef3a:	2e0a      	cmp	r6, #10
 800ef3c:	d117      	bne.n	800ef6e <__swbuf_r+0x92>
 800ef3e:	4621      	mov	r1, r4
 800ef40:	4628      	mov	r0, r5
 800ef42:	f000 f933 	bl	800f1ac <_fflush_r>
 800ef46:	b190      	cbz	r0, 800ef6e <__swbuf_r+0x92>
 800ef48:	e00f      	b.n	800ef6a <__swbuf_r+0x8e>
 800ef4a:	4b0b      	ldr	r3, [pc, #44]	; (800ef78 <__swbuf_r+0x9c>)
 800ef4c:	429c      	cmp	r4, r3
 800ef4e:	d101      	bne.n	800ef54 <__swbuf_r+0x78>
 800ef50:	68ac      	ldr	r4, [r5, #8]
 800ef52:	e7d0      	b.n	800eef6 <__swbuf_r+0x1a>
 800ef54:	4b09      	ldr	r3, [pc, #36]	; (800ef7c <__swbuf_r+0xa0>)
 800ef56:	429c      	cmp	r4, r3
 800ef58:	bf08      	it	eq
 800ef5a:	68ec      	ldreq	r4, [r5, #12]
 800ef5c:	e7cb      	b.n	800eef6 <__swbuf_r+0x1a>
 800ef5e:	4621      	mov	r1, r4
 800ef60:	4628      	mov	r0, r5
 800ef62:	f000 f81f 	bl	800efa4 <__swsetup_r>
 800ef66:	2800      	cmp	r0, #0
 800ef68:	d0cc      	beq.n	800ef04 <__swbuf_r+0x28>
 800ef6a:	f04f 37ff 	mov.w	r7, #4294967295
 800ef6e:	4638      	mov	r0, r7
 800ef70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef72:	bf00      	nop
 800ef74:	08011678 	.word	0x08011678
 800ef78:	08011698 	.word	0x08011698
 800ef7c:	08011658 	.word	0x08011658

0800ef80 <_write_r>:
 800ef80:	b538      	push	{r3, r4, r5, lr}
 800ef82:	4605      	mov	r5, r0
 800ef84:	4608      	mov	r0, r1
 800ef86:	4611      	mov	r1, r2
 800ef88:	2200      	movs	r2, #0
 800ef8a:	4c05      	ldr	r4, [pc, #20]	; (800efa0 <_write_r+0x20>)
 800ef8c:	6022      	str	r2, [r4, #0]
 800ef8e:	461a      	mov	r2, r3
 800ef90:	f7f1 fc5f 	bl	8000852 <_write>
 800ef94:	1c43      	adds	r3, r0, #1
 800ef96:	d102      	bne.n	800ef9e <_write_r+0x1e>
 800ef98:	6823      	ldr	r3, [r4, #0]
 800ef9a:	b103      	cbz	r3, 800ef9e <_write_r+0x1e>
 800ef9c:	602b      	str	r3, [r5, #0]
 800ef9e:	bd38      	pop	{r3, r4, r5, pc}
 800efa0:	20006928 	.word	0x20006928

0800efa4 <__swsetup_r>:
 800efa4:	4b32      	ldr	r3, [pc, #200]	; (800f070 <__swsetup_r+0xcc>)
 800efa6:	b570      	push	{r4, r5, r6, lr}
 800efa8:	681d      	ldr	r5, [r3, #0]
 800efaa:	4606      	mov	r6, r0
 800efac:	460c      	mov	r4, r1
 800efae:	b125      	cbz	r5, 800efba <__swsetup_r+0x16>
 800efb0:	69ab      	ldr	r3, [r5, #24]
 800efb2:	b913      	cbnz	r3, 800efba <__swsetup_r+0x16>
 800efb4:	4628      	mov	r0, r5
 800efb6:	f7ff fb3f 	bl	800e638 <__sinit>
 800efba:	4b2e      	ldr	r3, [pc, #184]	; (800f074 <__swsetup_r+0xd0>)
 800efbc:	429c      	cmp	r4, r3
 800efbe:	d10f      	bne.n	800efe0 <__swsetup_r+0x3c>
 800efc0:	686c      	ldr	r4, [r5, #4]
 800efc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efc6:	b29a      	uxth	r2, r3
 800efc8:	0715      	lsls	r5, r2, #28
 800efca:	d42c      	bmi.n	800f026 <__swsetup_r+0x82>
 800efcc:	06d0      	lsls	r0, r2, #27
 800efce:	d411      	bmi.n	800eff4 <__swsetup_r+0x50>
 800efd0:	2209      	movs	r2, #9
 800efd2:	6032      	str	r2, [r6, #0]
 800efd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800efd8:	81a3      	strh	r3, [r4, #12]
 800efda:	f04f 30ff 	mov.w	r0, #4294967295
 800efde:	e03e      	b.n	800f05e <__swsetup_r+0xba>
 800efe0:	4b25      	ldr	r3, [pc, #148]	; (800f078 <__swsetup_r+0xd4>)
 800efe2:	429c      	cmp	r4, r3
 800efe4:	d101      	bne.n	800efea <__swsetup_r+0x46>
 800efe6:	68ac      	ldr	r4, [r5, #8]
 800efe8:	e7eb      	b.n	800efc2 <__swsetup_r+0x1e>
 800efea:	4b24      	ldr	r3, [pc, #144]	; (800f07c <__swsetup_r+0xd8>)
 800efec:	429c      	cmp	r4, r3
 800efee:	bf08      	it	eq
 800eff0:	68ec      	ldreq	r4, [r5, #12]
 800eff2:	e7e6      	b.n	800efc2 <__swsetup_r+0x1e>
 800eff4:	0751      	lsls	r1, r2, #29
 800eff6:	d512      	bpl.n	800f01e <__swsetup_r+0x7a>
 800eff8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800effa:	b141      	cbz	r1, 800f00e <__swsetup_r+0x6a>
 800effc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f000:	4299      	cmp	r1, r3
 800f002:	d002      	beq.n	800f00a <__swsetup_r+0x66>
 800f004:	4630      	mov	r0, r6
 800f006:	f7ff fba9 	bl	800e75c <_free_r>
 800f00a:	2300      	movs	r3, #0
 800f00c:	6363      	str	r3, [r4, #52]	; 0x34
 800f00e:	89a3      	ldrh	r3, [r4, #12]
 800f010:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f014:	81a3      	strh	r3, [r4, #12]
 800f016:	2300      	movs	r3, #0
 800f018:	6063      	str	r3, [r4, #4]
 800f01a:	6923      	ldr	r3, [r4, #16]
 800f01c:	6023      	str	r3, [r4, #0]
 800f01e:	89a3      	ldrh	r3, [r4, #12]
 800f020:	f043 0308 	orr.w	r3, r3, #8
 800f024:	81a3      	strh	r3, [r4, #12]
 800f026:	6923      	ldr	r3, [r4, #16]
 800f028:	b94b      	cbnz	r3, 800f03e <__swsetup_r+0x9a>
 800f02a:	89a3      	ldrh	r3, [r4, #12]
 800f02c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f030:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f034:	d003      	beq.n	800f03e <__swsetup_r+0x9a>
 800f036:	4621      	mov	r1, r4
 800f038:	4630      	mov	r0, r6
 800f03a:	f000 f917 	bl	800f26c <__smakebuf_r>
 800f03e:	89a2      	ldrh	r2, [r4, #12]
 800f040:	f012 0301 	ands.w	r3, r2, #1
 800f044:	d00c      	beq.n	800f060 <__swsetup_r+0xbc>
 800f046:	2300      	movs	r3, #0
 800f048:	60a3      	str	r3, [r4, #8]
 800f04a:	6963      	ldr	r3, [r4, #20]
 800f04c:	425b      	negs	r3, r3
 800f04e:	61a3      	str	r3, [r4, #24]
 800f050:	6923      	ldr	r3, [r4, #16]
 800f052:	b953      	cbnz	r3, 800f06a <__swsetup_r+0xc6>
 800f054:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f058:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800f05c:	d1ba      	bne.n	800efd4 <__swsetup_r+0x30>
 800f05e:	bd70      	pop	{r4, r5, r6, pc}
 800f060:	0792      	lsls	r2, r2, #30
 800f062:	bf58      	it	pl
 800f064:	6963      	ldrpl	r3, [r4, #20]
 800f066:	60a3      	str	r3, [r4, #8]
 800f068:	e7f2      	b.n	800f050 <__swsetup_r+0xac>
 800f06a:	2000      	movs	r0, #0
 800f06c:	e7f7      	b.n	800f05e <__swsetup_r+0xba>
 800f06e:	bf00      	nop
 800f070:	20000018 	.word	0x20000018
 800f074:	08011678 	.word	0x08011678
 800f078:	08011698 	.word	0x08011698
 800f07c:	08011658 	.word	0x08011658

0800f080 <_close_r>:
 800f080:	b538      	push	{r3, r4, r5, lr}
 800f082:	2300      	movs	r3, #0
 800f084:	4c05      	ldr	r4, [pc, #20]	; (800f09c <_close_r+0x1c>)
 800f086:	4605      	mov	r5, r0
 800f088:	4608      	mov	r0, r1
 800f08a:	6023      	str	r3, [r4, #0]
 800f08c:	f7f1 fbfd 	bl	800088a <_close>
 800f090:	1c43      	adds	r3, r0, #1
 800f092:	d102      	bne.n	800f09a <_close_r+0x1a>
 800f094:	6823      	ldr	r3, [r4, #0]
 800f096:	b103      	cbz	r3, 800f09a <_close_r+0x1a>
 800f098:	602b      	str	r3, [r5, #0]
 800f09a:	bd38      	pop	{r3, r4, r5, pc}
 800f09c:	20006928 	.word	0x20006928

0800f0a0 <__sflush_r>:
 800f0a0:	898a      	ldrh	r2, [r1, #12]
 800f0a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0a6:	4605      	mov	r5, r0
 800f0a8:	0710      	lsls	r0, r2, #28
 800f0aa:	460c      	mov	r4, r1
 800f0ac:	d458      	bmi.n	800f160 <__sflush_r+0xc0>
 800f0ae:	684b      	ldr	r3, [r1, #4]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	dc05      	bgt.n	800f0c0 <__sflush_r+0x20>
 800f0b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	dc02      	bgt.n	800f0c0 <__sflush_r+0x20>
 800f0ba:	2000      	movs	r0, #0
 800f0bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f0c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f0c2:	2e00      	cmp	r6, #0
 800f0c4:	d0f9      	beq.n	800f0ba <__sflush_r+0x1a>
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f0cc:	682f      	ldr	r7, [r5, #0]
 800f0ce:	6a21      	ldr	r1, [r4, #32]
 800f0d0:	602b      	str	r3, [r5, #0]
 800f0d2:	d032      	beq.n	800f13a <__sflush_r+0x9a>
 800f0d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f0d6:	89a3      	ldrh	r3, [r4, #12]
 800f0d8:	075a      	lsls	r2, r3, #29
 800f0da:	d505      	bpl.n	800f0e8 <__sflush_r+0x48>
 800f0dc:	6863      	ldr	r3, [r4, #4]
 800f0de:	1ac0      	subs	r0, r0, r3
 800f0e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f0e2:	b10b      	cbz	r3, 800f0e8 <__sflush_r+0x48>
 800f0e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f0e6:	1ac0      	subs	r0, r0, r3
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	4602      	mov	r2, r0
 800f0ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f0ee:	6a21      	ldr	r1, [r4, #32]
 800f0f0:	4628      	mov	r0, r5
 800f0f2:	47b0      	blx	r6
 800f0f4:	1c43      	adds	r3, r0, #1
 800f0f6:	89a3      	ldrh	r3, [r4, #12]
 800f0f8:	d106      	bne.n	800f108 <__sflush_r+0x68>
 800f0fa:	6829      	ldr	r1, [r5, #0]
 800f0fc:	291d      	cmp	r1, #29
 800f0fe:	d848      	bhi.n	800f192 <__sflush_r+0xf2>
 800f100:	4a29      	ldr	r2, [pc, #164]	; (800f1a8 <__sflush_r+0x108>)
 800f102:	40ca      	lsrs	r2, r1
 800f104:	07d6      	lsls	r6, r2, #31
 800f106:	d544      	bpl.n	800f192 <__sflush_r+0xf2>
 800f108:	2200      	movs	r2, #0
 800f10a:	6062      	str	r2, [r4, #4]
 800f10c:	6922      	ldr	r2, [r4, #16]
 800f10e:	04d9      	lsls	r1, r3, #19
 800f110:	6022      	str	r2, [r4, #0]
 800f112:	d504      	bpl.n	800f11e <__sflush_r+0x7e>
 800f114:	1c42      	adds	r2, r0, #1
 800f116:	d101      	bne.n	800f11c <__sflush_r+0x7c>
 800f118:	682b      	ldr	r3, [r5, #0]
 800f11a:	b903      	cbnz	r3, 800f11e <__sflush_r+0x7e>
 800f11c:	6560      	str	r0, [r4, #84]	; 0x54
 800f11e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f120:	602f      	str	r7, [r5, #0]
 800f122:	2900      	cmp	r1, #0
 800f124:	d0c9      	beq.n	800f0ba <__sflush_r+0x1a>
 800f126:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f12a:	4299      	cmp	r1, r3
 800f12c:	d002      	beq.n	800f134 <__sflush_r+0x94>
 800f12e:	4628      	mov	r0, r5
 800f130:	f7ff fb14 	bl	800e75c <_free_r>
 800f134:	2000      	movs	r0, #0
 800f136:	6360      	str	r0, [r4, #52]	; 0x34
 800f138:	e7c0      	b.n	800f0bc <__sflush_r+0x1c>
 800f13a:	2301      	movs	r3, #1
 800f13c:	4628      	mov	r0, r5
 800f13e:	47b0      	blx	r6
 800f140:	1c41      	adds	r1, r0, #1
 800f142:	d1c8      	bne.n	800f0d6 <__sflush_r+0x36>
 800f144:	682b      	ldr	r3, [r5, #0]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d0c5      	beq.n	800f0d6 <__sflush_r+0x36>
 800f14a:	2b1d      	cmp	r3, #29
 800f14c:	d001      	beq.n	800f152 <__sflush_r+0xb2>
 800f14e:	2b16      	cmp	r3, #22
 800f150:	d101      	bne.n	800f156 <__sflush_r+0xb6>
 800f152:	602f      	str	r7, [r5, #0]
 800f154:	e7b1      	b.n	800f0ba <__sflush_r+0x1a>
 800f156:	89a3      	ldrh	r3, [r4, #12]
 800f158:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f15c:	81a3      	strh	r3, [r4, #12]
 800f15e:	e7ad      	b.n	800f0bc <__sflush_r+0x1c>
 800f160:	690f      	ldr	r7, [r1, #16]
 800f162:	2f00      	cmp	r7, #0
 800f164:	d0a9      	beq.n	800f0ba <__sflush_r+0x1a>
 800f166:	0793      	lsls	r3, r2, #30
 800f168:	bf18      	it	ne
 800f16a:	2300      	movne	r3, #0
 800f16c:	680e      	ldr	r6, [r1, #0]
 800f16e:	bf08      	it	eq
 800f170:	694b      	ldreq	r3, [r1, #20]
 800f172:	eba6 0807 	sub.w	r8, r6, r7
 800f176:	600f      	str	r7, [r1, #0]
 800f178:	608b      	str	r3, [r1, #8]
 800f17a:	f1b8 0f00 	cmp.w	r8, #0
 800f17e:	dd9c      	ble.n	800f0ba <__sflush_r+0x1a>
 800f180:	4643      	mov	r3, r8
 800f182:	463a      	mov	r2, r7
 800f184:	6a21      	ldr	r1, [r4, #32]
 800f186:	4628      	mov	r0, r5
 800f188:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f18a:	47b0      	blx	r6
 800f18c:	2800      	cmp	r0, #0
 800f18e:	dc06      	bgt.n	800f19e <__sflush_r+0xfe>
 800f190:	89a3      	ldrh	r3, [r4, #12]
 800f192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f196:	81a3      	strh	r3, [r4, #12]
 800f198:	f04f 30ff 	mov.w	r0, #4294967295
 800f19c:	e78e      	b.n	800f0bc <__sflush_r+0x1c>
 800f19e:	4407      	add	r7, r0
 800f1a0:	eba8 0800 	sub.w	r8, r8, r0
 800f1a4:	e7e9      	b.n	800f17a <__sflush_r+0xda>
 800f1a6:	bf00      	nop
 800f1a8:	20400001 	.word	0x20400001

0800f1ac <_fflush_r>:
 800f1ac:	b538      	push	{r3, r4, r5, lr}
 800f1ae:	690b      	ldr	r3, [r1, #16]
 800f1b0:	4605      	mov	r5, r0
 800f1b2:	460c      	mov	r4, r1
 800f1b4:	b1db      	cbz	r3, 800f1ee <_fflush_r+0x42>
 800f1b6:	b118      	cbz	r0, 800f1c0 <_fflush_r+0x14>
 800f1b8:	6983      	ldr	r3, [r0, #24]
 800f1ba:	b90b      	cbnz	r3, 800f1c0 <_fflush_r+0x14>
 800f1bc:	f7ff fa3c 	bl	800e638 <__sinit>
 800f1c0:	4b0c      	ldr	r3, [pc, #48]	; (800f1f4 <_fflush_r+0x48>)
 800f1c2:	429c      	cmp	r4, r3
 800f1c4:	d109      	bne.n	800f1da <_fflush_r+0x2e>
 800f1c6:	686c      	ldr	r4, [r5, #4]
 800f1c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f1cc:	b17b      	cbz	r3, 800f1ee <_fflush_r+0x42>
 800f1ce:	4621      	mov	r1, r4
 800f1d0:	4628      	mov	r0, r5
 800f1d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f1d6:	f7ff bf63 	b.w	800f0a0 <__sflush_r>
 800f1da:	4b07      	ldr	r3, [pc, #28]	; (800f1f8 <_fflush_r+0x4c>)
 800f1dc:	429c      	cmp	r4, r3
 800f1de:	d101      	bne.n	800f1e4 <_fflush_r+0x38>
 800f1e0:	68ac      	ldr	r4, [r5, #8]
 800f1e2:	e7f1      	b.n	800f1c8 <_fflush_r+0x1c>
 800f1e4:	4b05      	ldr	r3, [pc, #20]	; (800f1fc <_fflush_r+0x50>)
 800f1e6:	429c      	cmp	r4, r3
 800f1e8:	bf08      	it	eq
 800f1ea:	68ec      	ldreq	r4, [r5, #12]
 800f1ec:	e7ec      	b.n	800f1c8 <_fflush_r+0x1c>
 800f1ee:	2000      	movs	r0, #0
 800f1f0:	bd38      	pop	{r3, r4, r5, pc}
 800f1f2:	bf00      	nop
 800f1f4:	08011678 	.word	0x08011678
 800f1f8:	08011698 	.word	0x08011698
 800f1fc:	08011658 	.word	0x08011658

0800f200 <_lseek_r>:
 800f200:	b538      	push	{r3, r4, r5, lr}
 800f202:	4605      	mov	r5, r0
 800f204:	4608      	mov	r0, r1
 800f206:	4611      	mov	r1, r2
 800f208:	2200      	movs	r2, #0
 800f20a:	4c05      	ldr	r4, [pc, #20]	; (800f220 <_lseek_r+0x20>)
 800f20c:	6022      	str	r2, [r4, #0]
 800f20e:	461a      	mov	r2, r3
 800f210:	f7f1 fb5f 	bl	80008d2 <_lseek>
 800f214:	1c43      	adds	r3, r0, #1
 800f216:	d102      	bne.n	800f21e <_lseek_r+0x1e>
 800f218:	6823      	ldr	r3, [r4, #0]
 800f21a:	b103      	cbz	r3, 800f21e <_lseek_r+0x1e>
 800f21c:	602b      	str	r3, [r5, #0]
 800f21e:	bd38      	pop	{r3, r4, r5, pc}
 800f220:	20006928 	.word	0x20006928

0800f224 <__swhatbuf_r>:
 800f224:	b570      	push	{r4, r5, r6, lr}
 800f226:	460e      	mov	r6, r1
 800f228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f22c:	b096      	sub	sp, #88	; 0x58
 800f22e:	2900      	cmp	r1, #0
 800f230:	4614      	mov	r4, r2
 800f232:	461d      	mov	r5, r3
 800f234:	da07      	bge.n	800f246 <__swhatbuf_r+0x22>
 800f236:	2300      	movs	r3, #0
 800f238:	602b      	str	r3, [r5, #0]
 800f23a:	89b3      	ldrh	r3, [r6, #12]
 800f23c:	061a      	lsls	r2, r3, #24
 800f23e:	d410      	bmi.n	800f262 <__swhatbuf_r+0x3e>
 800f240:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f244:	e00e      	b.n	800f264 <__swhatbuf_r+0x40>
 800f246:	466a      	mov	r2, sp
 800f248:	f000 f872 	bl	800f330 <_fstat_r>
 800f24c:	2800      	cmp	r0, #0
 800f24e:	dbf2      	blt.n	800f236 <__swhatbuf_r+0x12>
 800f250:	9a01      	ldr	r2, [sp, #4]
 800f252:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f256:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f25a:	425a      	negs	r2, r3
 800f25c:	415a      	adcs	r2, r3
 800f25e:	602a      	str	r2, [r5, #0]
 800f260:	e7ee      	b.n	800f240 <__swhatbuf_r+0x1c>
 800f262:	2340      	movs	r3, #64	; 0x40
 800f264:	2000      	movs	r0, #0
 800f266:	6023      	str	r3, [r4, #0]
 800f268:	b016      	add	sp, #88	; 0x58
 800f26a:	bd70      	pop	{r4, r5, r6, pc}

0800f26c <__smakebuf_r>:
 800f26c:	898b      	ldrh	r3, [r1, #12]
 800f26e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f270:	079d      	lsls	r5, r3, #30
 800f272:	4606      	mov	r6, r0
 800f274:	460c      	mov	r4, r1
 800f276:	d507      	bpl.n	800f288 <__smakebuf_r+0x1c>
 800f278:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f27c:	6023      	str	r3, [r4, #0]
 800f27e:	6123      	str	r3, [r4, #16]
 800f280:	2301      	movs	r3, #1
 800f282:	6163      	str	r3, [r4, #20]
 800f284:	b002      	add	sp, #8
 800f286:	bd70      	pop	{r4, r5, r6, pc}
 800f288:	ab01      	add	r3, sp, #4
 800f28a:	466a      	mov	r2, sp
 800f28c:	f7ff ffca 	bl	800f224 <__swhatbuf_r>
 800f290:	9900      	ldr	r1, [sp, #0]
 800f292:	4605      	mov	r5, r0
 800f294:	4630      	mov	r0, r6
 800f296:	f7ff faad 	bl	800e7f4 <_malloc_r>
 800f29a:	b948      	cbnz	r0, 800f2b0 <__smakebuf_r+0x44>
 800f29c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f2a0:	059a      	lsls	r2, r3, #22
 800f2a2:	d4ef      	bmi.n	800f284 <__smakebuf_r+0x18>
 800f2a4:	f023 0303 	bic.w	r3, r3, #3
 800f2a8:	f043 0302 	orr.w	r3, r3, #2
 800f2ac:	81a3      	strh	r3, [r4, #12]
 800f2ae:	e7e3      	b.n	800f278 <__smakebuf_r+0xc>
 800f2b0:	4b0d      	ldr	r3, [pc, #52]	; (800f2e8 <__smakebuf_r+0x7c>)
 800f2b2:	62b3      	str	r3, [r6, #40]	; 0x28
 800f2b4:	89a3      	ldrh	r3, [r4, #12]
 800f2b6:	6020      	str	r0, [r4, #0]
 800f2b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f2bc:	81a3      	strh	r3, [r4, #12]
 800f2be:	9b00      	ldr	r3, [sp, #0]
 800f2c0:	6120      	str	r0, [r4, #16]
 800f2c2:	6163      	str	r3, [r4, #20]
 800f2c4:	9b01      	ldr	r3, [sp, #4]
 800f2c6:	b15b      	cbz	r3, 800f2e0 <__smakebuf_r+0x74>
 800f2c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f2cc:	4630      	mov	r0, r6
 800f2ce:	f000 f841 	bl	800f354 <_isatty_r>
 800f2d2:	b128      	cbz	r0, 800f2e0 <__smakebuf_r+0x74>
 800f2d4:	89a3      	ldrh	r3, [r4, #12]
 800f2d6:	f023 0303 	bic.w	r3, r3, #3
 800f2da:	f043 0301 	orr.w	r3, r3, #1
 800f2de:	81a3      	strh	r3, [r4, #12]
 800f2e0:	89a3      	ldrh	r3, [r4, #12]
 800f2e2:	431d      	orrs	r5, r3
 800f2e4:	81a5      	strh	r5, [r4, #12]
 800f2e6:	e7cd      	b.n	800f284 <__smakebuf_r+0x18>
 800f2e8:	0800e601 	.word	0x0800e601

0800f2ec <memchr>:
 800f2ec:	b510      	push	{r4, lr}
 800f2ee:	b2c9      	uxtb	r1, r1
 800f2f0:	4402      	add	r2, r0
 800f2f2:	4290      	cmp	r0, r2
 800f2f4:	4603      	mov	r3, r0
 800f2f6:	d101      	bne.n	800f2fc <memchr+0x10>
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	e003      	b.n	800f304 <memchr+0x18>
 800f2fc:	781c      	ldrb	r4, [r3, #0]
 800f2fe:	3001      	adds	r0, #1
 800f300:	428c      	cmp	r4, r1
 800f302:	d1f6      	bne.n	800f2f2 <memchr+0x6>
 800f304:	4618      	mov	r0, r3
 800f306:	bd10      	pop	{r4, pc}

0800f308 <__malloc_lock>:
 800f308:	4770      	bx	lr

0800f30a <__malloc_unlock>:
 800f30a:	4770      	bx	lr

0800f30c <_read_r>:
 800f30c:	b538      	push	{r3, r4, r5, lr}
 800f30e:	4605      	mov	r5, r0
 800f310:	4608      	mov	r0, r1
 800f312:	4611      	mov	r1, r2
 800f314:	2200      	movs	r2, #0
 800f316:	4c05      	ldr	r4, [pc, #20]	; (800f32c <_read_r+0x20>)
 800f318:	6022      	str	r2, [r4, #0]
 800f31a:	461a      	mov	r2, r3
 800f31c:	f7f1 fa7c 	bl	8000818 <_read>
 800f320:	1c43      	adds	r3, r0, #1
 800f322:	d102      	bne.n	800f32a <_read_r+0x1e>
 800f324:	6823      	ldr	r3, [r4, #0]
 800f326:	b103      	cbz	r3, 800f32a <_read_r+0x1e>
 800f328:	602b      	str	r3, [r5, #0]
 800f32a:	bd38      	pop	{r3, r4, r5, pc}
 800f32c:	20006928 	.word	0x20006928

0800f330 <_fstat_r>:
 800f330:	b538      	push	{r3, r4, r5, lr}
 800f332:	2300      	movs	r3, #0
 800f334:	4c06      	ldr	r4, [pc, #24]	; (800f350 <_fstat_r+0x20>)
 800f336:	4605      	mov	r5, r0
 800f338:	4608      	mov	r0, r1
 800f33a:	4611      	mov	r1, r2
 800f33c:	6023      	str	r3, [r4, #0]
 800f33e:	f7f1 faaf 	bl	80008a0 <_fstat>
 800f342:	1c43      	adds	r3, r0, #1
 800f344:	d102      	bne.n	800f34c <_fstat_r+0x1c>
 800f346:	6823      	ldr	r3, [r4, #0]
 800f348:	b103      	cbz	r3, 800f34c <_fstat_r+0x1c>
 800f34a:	602b      	str	r3, [r5, #0]
 800f34c:	bd38      	pop	{r3, r4, r5, pc}
 800f34e:	bf00      	nop
 800f350:	20006928 	.word	0x20006928

0800f354 <_isatty_r>:
 800f354:	b538      	push	{r3, r4, r5, lr}
 800f356:	2300      	movs	r3, #0
 800f358:	4c05      	ldr	r4, [pc, #20]	; (800f370 <_isatty_r+0x1c>)
 800f35a:	4605      	mov	r5, r0
 800f35c:	4608      	mov	r0, r1
 800f35e:	6023      	str	r3, [r4, #0]
 800f360:	f7f1 faad 	bl	80008be <_isatty>
 800f364:	1c43      	adds	r3, r0, #1
 800f366:	d102      	bne.n	800f36e <_isatty_r+0x1a>
 800f368:	6823      	ldr	r3, [r4, #0]
 800f36a:	b103      	cbz	r3, 800f36e <_isatty_r+0x1a>
 800f36c:	602b      	str	r3, [r5, #0]
 800f36e:	bd38      	pop	{r3, r4, r5, pc}
 800f370:	20006928 	.word	0x20006928

0800f374 <_init>:
 800f374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f376:	bf00      	nop
 800f378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f37a:	bc08      	pop	{r3}
 800f37c:	469e      	mov	lr, r3
 800f37e:	4770      	bx	lr

0800f380 <_fini>:
 800f380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f382:	bf00      	nop
 800f384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f386:	bc08      	pop	{r3}
 800f388:	469e      	mov	lr, r3
 800f38a:	4770      	bx	lr
